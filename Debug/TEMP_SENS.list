
TEMP_SENS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cc90  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004dc  0800ce20  0800ce20  0001ce20  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d2fc  0800d2fc  00020218  2**0
                  CONTENTS
  4 .ARM          00000008  0800d2fc  0800d2fc  0001d2fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d304  0800d304  00020218  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d304  0800d304  0001d304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d308  0800d308  0001d308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000218  20000000  0800d30c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020218  2**0
                  CONTENTS
 10 .bss          00000898  20000218  20000218  00020218  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ab0  20000ab0  00020218  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020218  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001adcc  00000000  00000000  00020248  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003f90  00000000  00000000  0003b014  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001710  00000000  00000000  0003efa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001560  00000000  00000000  000406b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027752  00000000  00000000  00041c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001e1bf  00000000  00000000  0006936a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e16d5  00000000  00000000  00087529  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00168bfe  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007748  00000000  00000000  00168c50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000218 	.word	0x20000218
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ce08 	.word	0x0800ce08

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000021c 	.word	0x2000021c
 80001cc:	0800ce08 	.word	0x0800ce08

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000ff8:	b5b0      	push	{r4, r5, r7, lr}
 8000ffa:	b08a      	sub	sp, #40	; 0x28
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	60f8      	str	r0, [r7, #12]
 8001000:	60b9      	str	r1, [r7, #8]
 8001002:	607a      	str	r2, [r7, #4]
 8001004:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8001006:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800100a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800100e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8001012:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8001014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001016:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8001018:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 800101a:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8001028:	f107 0310 	add.w	r3, r7, #16
 800102c:	4618      	mov	r0, r3
 800102e:	f000 f80e 	bl	800104e <Lcd_init>

	return lcd;
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	461d      	mov	r5, r3
 8001036:	f107 0410 	add.w	r4, r7, #16
 800103a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800103c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800103e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001042:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001046:	68f8      	ldr	r0, [r7, #12]
 8001048:	3728      	adds	r7, #40	; 0x28
 800104a:	46bd      	mov	sp, r7
 800104c:	bdb0      	pop	{r4, r5, r7, pc}

0800104e <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	7d9b      	ldrb	r3, [r3, #22]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d10c      	bne.n	8001078 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800105e:	2133      	movs	r1, #51	; 0x33
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 f88b 	bl	800117c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8001066:	2132      	movs	r1, #50	; 0x32
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f000 f887 	bl	800117c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800106e:	2128      	movs	r1, #40	; 0x28
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f000 f883 	bl	800117c <lcd_write_command>
 8001076:	e003      	b.n	8001080 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001078:	2138      	movs	r1, #56	; 0x38
 800107a:	6878      	ldr	r0, [r7, #4]
 800107c:	f000 f87e 	bl	800117c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8001080:	2101      	movs	r1, #1
 8001082:	6878      	ldr	r0, [r7, #4]
 8001084:	f000 f87a 	bl	800117c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001088:	210c      	movs	r1, #12
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 f876 	bl	800117c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8001090:	2106      	movs	r1, #6
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f000 f872 	bl	800117c <lcd_write_command>
}
 8001098:	bf00      	nop
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}

080010a0 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b086      	sub	sp, #24
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
 80010a8:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 80010aa:	f107 030c 	add.w	r3, r7, #12
 80010ae:	683a      	ldr	r2, [r7, #0]
 80010b0:	4906      	ldr	r1, [pc, #24]	; (80010cc <Lcd_int+0x2c>)
 80010b2:	4618      	mov	r0, r3
 80010b4:	f008 f9b4 	bl	8009420 <siprintf>

	Lcd_string(lcd, buffer);
 80010b8:	f107 030c 	add.w	r3, r7, #12
 80010bc:	4619      	mov	r1, r3
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f000 f822 	bl	8001108 <Lcd_string>
}
 80010c4:	bf00      	nop
 80010c6:	3718      	adds	r7, #24
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}
 80010cc:	0800ce20 	.word	0x0800ce20

080010d0 <Lcd_float>:

void Lcd_float(Lcd_HandleTypeDef * lcd, float number)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	ed87 0a00 	vstr	s0, [r7]
	char buffer[11];
	sprintf(buffer, "%f", number);
 80010dc:	6838      	ldr	r0, [r7, #0]
 80010de:	f7ff fa33 	bl	8000548 <__aeabi_f2d>
 80010e2:	4602      	mov	r2, r0
 80010e4:	460b      	mov	r3, r1
 80010e6:	f107 000c 	add.w	r0, r7, #12
 80010ea:	4906      	ldr	r1, [pc, #24]	; (8001104 <Lcd_float+0x34>)
 80010ec:	f008 f998 	bl	8009420 <siprintf>

	Lcd_string(lcd, buffer);
 80010f0:	f107 030c 	add.w	r3, r7, #12
 80010f4:	4619      	mov	r1, r3
 80010f6:	6878      	ldr	r0, [r7, #4]
 80010f8:	f000 f806 	bl	8001108 <Lcd_string>
}
 80010fc:	bf00      	nop
 80010fe:	3718      	adds	r7, #24
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	0800ce24 	.word	0x0800ce24

08001108 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8001108:	b590      	push	{r4, r7, lr}
 800110a:	b085      	sub	sp, #20
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
 8001116:	e00a      	b.n	800112e <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8001118:	7bfb      	ldrb	r3, [r7, #15]
 800111a:	683a      	ldr	r2, [r7, #0]
 800111c:	4413      	add	r3, r2
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	4619      	mov	r1, r3
 8001122:	6878      	ldr	r0, [r7, #4]
 8001124:	f000 f858 	bl	80011d8 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8001128:	7bfb      	ldrb	r3, [r7, #15]
 800112a:	3301      	adds	r3, #1
 800112c:	73fb      	strb	r3, [r7, #15]
 800112e:	7bfc      	ldrb	r4, [r7, #15]
 8001130:	6838      	ldr	r0, [r7, #0]
 8001132:	f7ff f84d 	bl	80001d0 <strlen>
 8001136:	4603      	mov	r3, r0
 8001138:	429c      	cmp	r4, r3
 800113a:	d3ed      	bcc.n	8001118 <Lcd_string+0x10>
	}
}
 800113c:	bf00      	nop
 800113e:	bf00      	nop
 8001140:	3714      	adds	r7, #20
 8001142:	46bd      	mov	sp, r7
 8001144:	bd90      	pop	{r4, r7, pc}
	...

08001148 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
 8001154:	4613      	mov	r3, r2
 8001156:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8001158:	78fb      	ldrb	r3, [r7, #3]
 800115a:	4a07      	ldr	r2, [pc, #28]	; (8001178 <Lcd_cursor+0x30>)
 800115c:	5cd2      	ldrb	r2, [r2, r3]
 800115e:	78bb      	ldrb	r3, [r7, #2]
 8001160:	4413      	add	r3, r2
 8001162:	b2db      	uxtb	r3, r3
 8001164:	3b80      	subs	r3, #128	; 0x80
 8001166:	b2db      	uxtb	r3, r3
 8001168:	4619      	mov	r1, r3
 800116a:	6878      	ldr	r0, [r7, #4]
 800116c:	f000 f806 	bl	800117c <lcd_write_command>
	#endif
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}
 8001178:	0800ce3c 	.word	0x0800ce3c

0800117c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b082      	sub	sp, #8
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6898      	ldr	r0, [r3, #8]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	899b      	ldrh	r3, [r3, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	4619      	mov	r1, r3
 8001194:	f001 fda0 	bl	8002cd8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	7d9b      	ldrb	r3, [r3, #22]
 800119c:	2b00      	cmp	r3, #0
 800119e:	d111      	bne.n	80011c4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	091b      	lsrs	r3, r3, #4
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	2204      	movs	r2, #4
 80011a8:	4619      	mov	r1, r3
 80011aa:	6878      	ldr	r0, [r7, #4]
 80011ac:	f000 f842 	bl	8001234 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80011b0:	78fb      	ldrb	r3, [r7, #3]
 80011b2:	f003 030f 	and.w	r3, r3, #15
 80011b6:	b2db      	uxtb	r3, r3
 80011b8:	2204      	movs	r2, #4
 80011ba:	4619      	mov	r1, r3
 80011bc:	6878      	ldr	r0, [r7, #4]
 80011be:	f000 f839 	bl	8001234 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80011c2:	e005      	b.n	80011d0 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80011c4:	78fb      	ldrb	r3, [r7, #3]
 80011c6:	2208      	movs	r2, #8
 80011c8:	4619      	mov	r1, r3
 80011ca:	6878      	ldr	r0, [r7, #4]
 80011cc:	f000 f832 	bl	8001234 <lcd_write>
}
 80011d0:	bf00      	nop
 80011d2:	3708      	adds	r7, #8
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}

080011d8 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
 80011e0:	460b      	mov	r3, r1
 80011e2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6898      	ldr	r0, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	899b      	ldrh	r3, [r3, #12]
 80011ec:	2201      	movs	r2, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	f001 fd72 	bl	8002cd8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	7d9b      	ldrb	r3, [r3, #22]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d111      	bne.n	8001220 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	091b      	lsrs	r3, r3, #4
 8001200:	b2db      	uxtb	r3, r3
 8001202:	2204      	movs	r2, #4
 8001204:	4619      	mov	r1, r3
 8001206:	6878      	ldr	r0, [r7, #4]
 8001208:	f000 f814 	bl	8001234 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 800120c:	78fb      	ldrb	r3, [r7, #3]
 800120e:	f003 030f 	and.w	r3, r3, #15
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2204      	movs	r2, #4
 8001216:	4619      	mov	r1, r3
 8001218:	6878      	ldr	r0, [r7, #4]
 800121a:	f000 f80b 	bl	8001234 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800121e:	e005      	b.n	800122c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001220:	78fb      	ldrb	r3, [r7, #3]
 8001222:	2208      	movs	r2, #8
 8001224:	4619      	mov	r1, r3
 8001226:	6878      	ldr	r0, [r7, #4]
 8001228:	f000 f804 	bl	8001234 <lcd_write>
}
 800122c:	bf00      	nop
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
 8001240:	4613      	mov	r3, r2
 8001242:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001244:	2300      	movs	r3, #0
 8001246:	73fb      	strb	r3, [r7, #15]
 8001248:	e019      	b.n	800127e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	681a      	ldr	r2, [r3, #0]
 800124e:	7bfb      	ldrb	r3, [r7, #15]
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	4413      	add	r3, r2
 8001254:	6818      	ldr	r0, [r3, #0]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	7bfb      	ldrb	r3, [r7, #15]
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	4413      	add	r3, r2
 8001260:	8819      	ldrh	r1, [r3, #0]
 8001262:	78fa      	ldrb	r2, [r7, #3]
 8001264:	7bfb      	ldrb	r3, [r7, #15]
 8001266:	fa42 f303 	asr.w	r3, r2, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	f003 0301 	and.w	r3, r3, #1
 8001270:	b2db      	uxtb	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	f001 fd30 	bl	8002cd8 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001278:	7bfb      	ldrb	r3, [r7, #15]
 800127a:	3301      	adds	r3, #1
 800127c:	73fb      	strb	r3, [r7, #15]
 800127e:	7bfa      	ldrb	r2, [r7, #15]
 8001280:	78bb      	ldrb	r3, [r7, #2]
 8001282:	429a      	cmp	r2, r3
 8001284:	d3e1      	bcc.n	800124a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6918      	ldr	r0, [r3, #16]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	8a9b      	ldrh	r3, [r3, #20]
 800128e:	2201      	movs	r2, #1
 8001290:	4619      	mov	r1, r3
 8001292:	f001 fd21 	bl	8002cd8 <HAL_GPIO_WritePin>
	DELAY(1);
 8001296:	2001      	movs	r0, #1
 8001298:	f000 fe80 	bl	8001f9c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6918      	ldr	r0, [r3, #16]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	8a9b      	ldrh	r3, [r3, #20]
 80012a4:	2200      	movs	r2, #0
 80012a6:	4619      	mov	r1, r3
 80012a8:	f001 fd16 	bl	8002cd8 <HAL_GPIO_WritePin>
}
 80012ac:	bf00      	nop
 80012ae:	3710      	adds	r7, #16
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08c      	sub	sp, #48	; 0x30
 80012b8:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80012ba:	f000 fdfd 	bl	8001eb8 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80012be:	f000 f87b 	bl	80013b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80012c2:	f000 f9ed 	bl	80016a0 <MX_GPIO_Init>
	MX_ADC1_Init();
 80012c6:	f000 f8e1 	bl	800148c <MX_ADC1_Init>
	MX_I2C1_Init();
 80012ca:	f000 f931 	bl	8001530 <MX_I2C1_Init>
	MX_I2S3_Init();
 80012ce:	f000 f95d 	bl	800158c <MX_I2S3_Init>
	MX_SPI1_Init();
 80012d2:	f000 f98b 	bl	80015ec <MX_SPI1_Init>
	MX_USB_HOST_Init();
 80012d6:	f006 fe41 	bl	8007f5c <MX_USB_HOST_Init>
	MX_TIM11_Init();
 80012da:	f000 f9bd 	bl	8001658 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */

	Lcd_HandleTypeDef lcd = Lcd_create(
 80012de:	4638      	mov	r0, r7
 80012e0:	2300      	movs	r3, #0
 80012e2:	9303      	str	r3, [sp, #12]
 80012e4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80012e8:	9302      	str	r3, [sp, #8]
 80012ea:	4b2b      	ldr	r3, [pc, #172]	; (8001398 <main+0xe4>)
 80012ec:	9301      	str	r3, [sp, #4]
 80012ee:	2380      	movs	r3, #128	; 0x80
 80012f0:	9300      	str	r3, [sp, #0]
 80012f2:	4b29      	ldr	r3, [pc, #164]	; (8001398 <main+0xe4>)
 80012f4:	4a29      	ldr	r2, [pc, #164]	; (800139c <main+0xe8>)
 80012f6:	492a      	ldr	r1, [pc, #168]	; (80013a0 <main+0xec>)
 80012f8:	f7ff fe7e 	bl	8000ff8 <Lcd_create>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while(1) {
		HAL_ADC_Start(&hadc1);
 80012fc:	4829      	ldr	r0, [pc, #164]	; (80013a4 <main+0xf0>)
 80012fe:	f000 feb5 	bl	800206c <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001302:	f04f 31ff 	mov.w	r1, #4294967295
 8001306:	4827      	ldr	r0, [pc, #156]	; (80013a4 <main+0xf0>)
 8001308:	f000 ff82 	bl	8002210 <HAL_ADC_PollForConversion>

		uint32_t value = HAL_ADC_GetValue(&hadc1);
 800130c:	4825      	ldr	r0, [pc, #148]	; (80013a4 <main+0xf0>)
 800130e:	f001 f80a 	bl	8002326 <HAL_ADC_GetValue>
 8001312:	61f8      	str	r0, [r7, #28]
		float temp = 100.0 - ((value / 1024.0) * 49.0);
 8001314:	69f8      	ldr	r0, [r7, #28]
 8001316:	f7ff f8f5 	bl	8000504 <__aeabi_ui2d>
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	4b22      	ldr	r3, [pc, #136]	; (80013a8 <main+0xf4>)
 8001320:	f7ff fa94 	bl	800084c <__aeabi_ddiv>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f04f 0200 	mov.w	r2, #0
 8001330:	4b1e      	ldr	r3, [pc, #120]	; (80013ac <main+0xf8>)
 8001332:	f7ff f961 	bl	80005f8 <__aeabi_dmul>
 8001336:	4602      	mov	r2, r0
 8001338:	460b      	mov	r3, r1
 800133a:	f04f 0000 	mov.w	r0, #0
 800133e:	491c      	ldr	r1, [pc, #112]	; (80013b0 <main+0xfc>)
 8001340:	f7fe ffa2 	bl	8000288 <__aeabi_dsub>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc4c 	bl	8000be8 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	61bb      	str	r3, [r7, #24]

		Lcd_cursor(&lcd, 0, 0);
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	2100      	movs	r1, #0
 800135a:	4618      	mov	r0, r3
 800135c:	f7ff fef4 	bl	8001148 <Lcd_cursor>
		Lcd_string(&lcd, "TEMPERATURA ");
 8001360:	463b      	mov	r3, r7
 8001362:	4914      	ldr	r1, [pc, #80]	; (80013b4 <main+0x100>)
 8001364:	4618      	mov	r0, r3
 8001366:	f7ff fecf 	bl	8001108 <Lcd_string>

		Lcd_float(&lcd, temp);
 800136a:	463b      	mov	r3, r7
 800136c:	ed97 0a06 	vldr	s0, [r7, #24]
 8001370:	4618      	mov	r0, r3
 8001372:	f7ff fead 	bl	80010d0 <Lcd_float>
		Lcd_cursor(&lcd, 1, 0);
 8001376:	463b      	mov	r3, r7
 8001378:	2200      	movs	r2, #0
 800137a:	2101      	movs	r1, #1
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff fee3 	bl	8001148 <Lcd_cursor>
		Lcd_int(&lcd, value);
 8001382:	69fa      	ldr	r2, [r7, #28]
 8001384:	463b      	mov	r3, r7
 8001386:	4611      	mov	r1, r2
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff fe89 	bl	80010a0 <Lcd_int>
		HAL_Delay(500);
 800138e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001392:	f000 fe03 	bl	8001f9c <HAL_Delay>
	while(1) {
 8001396:	e7b1      	b.n	80012fc <main+0x48>
 8001398:	40021000 	.word	0x40021000
 800139c:	20000010 	.word	0x20000010
 80013a0:	20000000 	.word	0x20000000
 80013a4:	20000234 	.word	0x20000234
 80013a8:	40900000 	.word	0x40900000
 80013ac:	40488000 	.word	0x40488000
 80013b0:	40590000 	.word	0x40590000
 80013b4:	0800ce28 	.word	0x0800ce28

080013b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b094      	sub	sp, #80	; 0x50
 80013bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013be:	f107 0320 	add.w	r3, r7, #32
 80013c2:	2230      	movs	r2, #48	; 0x30
 80013c4:	2100      	movs	r1, #0
 80013c6:	4618      	mov	r0, r3
 80013c8:	f007 f8b2 	bl	8008530 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013cc:	f107 030c 	add.w	r3, r7, #12
 80013d0:	2200      	movs	r2, #0
 80013d2:	601a      	str	r2, [r3, #0]
 80013d4:	605a      	str	r2, [r3, #4]
 80013d6:	609a      	str	r2, [r3, #8]
 80013d8:	60da      	str	r2, [r3, #12]
 80013da:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013dc:	2300      	movs	r3, #0
 80013de:	60bb      	str	r3, [r7, #8]
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <SystemClock_Config+0xcc>)
 80013e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013e4:	4a27      	ldr	r2, [pc, #156]	; (8001484 <SystemClock_Config+0xcc>)
 80013e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80013ea:	6413      	str	r3, [r2, #64]	; 0x40
 80013ec:	4b25      	ldr	r3, [pc, #148]	; (8001484 <SystemClock_Config+0xcc>)
 80013ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013f4:	60bb      	str	r3, [r7, #8]
 80013f6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f8:	2300      	movs	r3, #0
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	4b22      	ldr	r3, [pc, #136]	; (8001488 <SystemClock_Config+0xd0>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a21      	ldr	r2, [pc, #132]	; (8001488 <SystemClock_Config+0xd0>)
 8001402:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001406:	6013      	str	r3, [r2, #0]
 8001408:	4b1f      	ldr	r3, [pc, #124]	; (8001488 <SystemClock_Config+0xd0>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001410:	607b      	str	r3, [r7, #4]
 8001412:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001414:	2301      	movs	r3, #1
 8001416:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001418:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800141c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800141e:	2302      	movs	r3, #2
 8001420:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001422:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001426:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001428:	2308      	movs	r3, #8
 800142a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800142c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001430:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001432:	2302      	movs	r3, #2
 8001434:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001436:	2307      	movs	r3, #7
 8001438:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	4618      	mov	r0, r3
 8001440:	f003 fe36 	bl	80050b0 <HAL_RCC_OscConfig>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800144a:	f000 fa5b 	bl	8001904 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800144e:	230f      	movs	r3, #15
 8001450:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001452:	2302      	movs	r3, #2
 8001454:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800145a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800145e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001460:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001464:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001466:	f107 030c 	add.w	r3, r7, #12
 800146a:	2105      	movs	r1, #5
 800146c:	4618      	mov	r0, r3
 800146e:	f004 f897 	bl	80055a0 <HAL_RCC_ClockConfig>
 8001472:	4603      	mov	r3, r0
 8001474:	2b00      	cmp	r3, #0
 8001476:	d001      	beq.n	800147c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001478:	f000 fa44 	bl	8001904 <Error_Handler>
  }
}
 800147c:	bf00      	nop
 800147e:	3750      	adds	r7, #80	; 0x50
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	40023800 	.word	0x40023800
 8001488:	40007000 	.word	0x40007000

0800148c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001492:	463b      	mov	r3, r7
 8001494:	2200      	movs	r2, #0
 8001496:	601a      	str	r2, [r3, #0]
 8001498:	605a      	str	r2, [r3, #4]
 800149a:	609a      	str	r2, [r3, #8]
 800149c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800149e:	4b21      	ldr	r3, [pc, #132]	; (8001524 <MX_ADC1_Init+0x98>)
 80014a0:	4a21      	ldr	r2, [pc, #132]	; (8001528 <MX_ADC1_Init+0x9c>)
 80014a2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80014a4:	4b1f      	ldr	r3, [pc, #124]	; (8001524 <MX_ADC1_Init+0x98>)
 80014a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80014aa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80014ac:	4b1d      	ldr	r3, [pc, #116]	; (8001524 <MX_ADC1_Init+0x98>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80014b2:	4b1c      	ldr	r3, [pc, #112]	; (8001524 <MX_ADC1_Init+0x98>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80014b8:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <MX_ADC1_Init+0x98>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80014be:	4b19      	ldr	r3, [pc, #100]	; (8001524 <MX_ADC1_Init+0x98>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014c6:	4b17      	ldr	r3, [pc, #92]	; (8001524 <MX_ADC1_Init+0x98>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014cc:	4b15      	ldr	r3, [pc, #84]	; (8001524 <MX_ADC1_Init+0x98>)
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <MX_ADC1_Init+0xa0>)
 80014d0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80014d2:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_ADC1_Init+0x98>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <MX_ADC1_Init+0x98>)
 80014da:	2201      	movs	r2, #1
 80014dc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_ADC1_Init+0x98>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_ADC1_Init+0x98>)
 80014e8:	2201      	movs	r2, #1
 80014ea:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80014ec:	480d      	ldr	r0, [pc, #52]	; (8001524 <MX_ADC1_Init+0x98>)
 80014ee:	f000 fd79 	bl	8001fe4 <HAL_ADC_Init>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80014f8:	f000 fa04 	bl	8001904 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80014fc:	2309      	movs	r3, #9
 80014fe:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001500:	2301      	movs	r3, #1
 8001502:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001504:	2300      	movs	r3, #0
 8001506:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001508:	463b      	mov	r3, r7
 800150a:	4619      	mov	r1, r3
 800150c:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_ADC1_Init+0x98>)
 800150e:	f000 ff17 	bl	8002340 <HAL_ADC_ConfigChannel>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001518:	f000 f9f4 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800151c:	bf00      	nop
 800151e:	3710      	adds	r7, #16
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}
 8001524:	20000234 	.word	0x20000234
 8001528:	40012000 	.word	0x40012000
 800152c:	0f000001 	.word	0x0f000001

08001530 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001534:	4b12      	ldr	r3, [pc, #72]	; (8001580 <MX_I2C1_Init+0x50>)
 8001536:	4a13      	ldr	r2, [pc, #76]	; (8001584 <MX_I2C1_Init+0x54>)
 8001538:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800153a:	4b11      	ldr	r3, [pc, #68]	; (8001580 <MX_I2C1_Init+0x50>)
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <MX_I2C1_Init+0x58>)
 800153e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001540:	4b0f      	ldr	r3, [pc, #60]	; (8001580 <MX_I2C1_Init+0x50>)
 8001542:	2200      	movs	r2, #0
 8001544:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001546:	4b0e      	ldr	r3, [pc, #56]	; (8001580 <MX_I2C1_Init+0x50>)
 8001548:	2200      	movs	r2, #0
 800154a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800154c:	4b0c      	ldr	r3, [pc, #48]	; (8001580 <MX_I2C1_Init+0x50>)
 800154e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001552:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001554:	4b0a      	ldr	r3, [pc, #40]	; (8001580 <MX_I2C1_Init+0x50>)
 8001556:	2200      	movs	r2, #0
 8001558:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800155a:	4b09      	ldr	r3, [pc, #36]	; (8001580 <MX_I2C1_Init+0x50>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <MX_I2C1_Init+0x50>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001566:	4b06      	ldr	r3, [pc, #24]	; (8001580 <MX_I2C1_Init+0x50>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800156c:	4804      	ldr	r0, [pc, #16]	; (8001580 <MX_I2C1_Init+0x50>)
 800156e:	f002 ffbb 	bl	80044e8 <HAL_I2C_Init>
 8001572:	4603      	mov	r3, r0
 8001574:	2b00      	cmp	r3, #0
 8001576:	d001      	beq.n	800157c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001578:	f000 f9c4 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	2000027c 	.word	0x2000027c
 8001584:	40005400 	.word	0x40005400
 8001588:	000186a0 	.word	0x000186a0

0800158c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001590:	4b13      	ldr	r3, [pc, #76]	; (80015e0 <MX_I2S3_Init+0x54>)
 8001592:	4a14      	ldr	r2, [pc, #80]	; (80015e4 <MX_I2S3_Init+0x58>)
 8001594:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001596:	4b12      	ldr	r3, [pc, #72]	; (80015e0 <MX_I2S3_Init+0x54>)
 8001598:	f44f 7200 	mov.w	r2, #512	; 0x200
 800159c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800159e:	4b10      	ldr	r3, [pc, #64]	; (80015e0 <MX_I2S3_Init+0x54>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	; (80015e0 <MX_I2S3_Init+0x54>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	; (80015e0 <MX_I2S3_Init+0x54>)
 80015ac:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015b0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80015b2:	4b0b      	ldr	r3, [pc, #44]	; (80015e0 <MX_I2S3_Init+0x54>)
 80015b4:	4a0c      	ldr	r2, [pc, #48]	; (80015e8 <MX_I2S3_Init+0x5c>)
 80015b6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <MX_I2S3_Init+0x54>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <MX_I2S3_Init+0x54>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80015c4:	4b06      	ldr	r3, [pc, #24]	; (80015e0 <MX_I2S3_Init+0x54>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80015ca:	4805      	ldr	r0, [pc, #20]	; (80015e0 <MX_I2S3_Init+0x54>)
 80015cc:	f003 f8d0 	bl	8004770 <HAL_I2S_Init>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80015d6:	f000 f995 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80015da:	bf00      	nop
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	200002d0 	.word	0x200002d0
 80015e4:	40003c00 	.word	0x40003c00
 80015e8:	00017700 	.word	0x00017700

080015ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_SPI1_Init+0x64>)
 80015f2:	4a18      	ldr	r2, [pc, #96]	; (8001654 <MX_SPI1_Init+0x68>)
 80015f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <MX_SPI1_Init+0x64>)
 80015f8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80015fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80015fe:	4b14      	ldr	r3, [pc, #80]	; (8001650 <MX_SPI1_Init+0x64>)
 8001600:	2200      	movs	r2, #0
 8001602:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001604:	4b12      	ldr	r3, [pc, #72]	; (8001650 <MX_SPI1_Init+0x64>)
 8001606:	2200      	movs	r2, #0
 8001608:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800160a:	4b11      	ldr	r3, [pc, #68]	; (8001650 <MX_SPI1_Init+0x64>)
 800160c:	2200      	movs	r2, #0
 800160e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001610:	4b0f      	ldr	r3, [pc, #60]	; (8001650 <MX_SPI1_Init+0x64>)
 8001612:	2200      	movs	r2, #0
 8001614:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001616:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <MX_SPI1_Init+0x64>)
 8001618:	f44f 7200 	mov.w	r2, #512	; 0x200
 800161c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <MX_SPI1_Init+0x64>)
 8001620:	2200      	movs	r2, #0
 8001622:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001624:	4b0a      	ldr	r3, [pc, #40]	; (8001650 <MX_SPI1_Init+0x64>)
 8001626:	2200      	movs	r2, #0
 8001628:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <MX_SPI1_Init+0x64>)
 800162c:	2200      	movs	r2, #0
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001630:	4b07      	ldr	r3, [pc, #28]	; (8001650 <MX_SPI1_Init+0x64>)
 8001632:	2200      	movs	r2, #0
 8001634:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001636:	4b06      	ldr	r3, [pc, #24]	; (8001650 <MX_SPI1_Init+0x64>)
 8001638:	220a      	movs	r2, #10
 800163a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800163c:	4804      	ldr	r0, [pc, #16]	; (8001650 <MX_SPI1_Init+0x64>)
 800163e:	f004 fafb 	bl	8005c38 <HAL_SPI_Init>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001648:	f000 f95c 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800164c:	bf00      	nop
 800164e:	bd80      	pop	{r7, pc}
 8001650:	20000318 	.word	0x20000318
 8001654:	40013000 	.word	0x40013000

08001658 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 800165c:	4b0e      	ldr	r3, [pc, #56]	; (8001698 <MX_TIM11_Init+0x40>)
 800165e:	4a0f      	ldr	r2, [pc, #60]	; (800169c <MX_TIM11_Init+0x44>)
 8001660:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001662:	4b0d      	ldr	r3, [pc, #52]	; (8001698 <MX_TIM11_Init+0x40>)
 8001664:	2200      	movs	r2, #0
 8001666:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001668:	4b0b      	ldr	r3, [pc, #44]	; (8001698 <MX_TIM11_Init+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 800166e:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <MX_TIM11_Init+0x40>)
 8001670:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001674:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001676:	4b08      	ldr	r3, [pc, #32]	; (8001698 <MX_TIM11_Init+0x40>)
 8001678:	2200      	movs	r2, #0
 800167a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167c:	4b06      	ldr	r3, [pc, #24]	; (8001698 <MX_TIM11_Init+0x40>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <MX_TIM11_Init+0x40>)
 8001684:	f004 fb61 	bl	8005d4a <HAL_TIM_Base_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800168e:	f000 f939 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001692:	bf00      	nop
 8001694:	bd80      	pop	{r7, pc}
 8001696:	bf00      	nop
 8001698:	20000370 	.word	0x20000370
 800169c:	40014800 	.word	0x40014800

080016a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	; 0x30
 80016a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a6:	f107 031c 	add.w	r3, r7, #28
 80016aa:	2200      	movs	r2, #0
 80016ac:	601a      	str	r2, [r3, #0]
 80016ae:	605a      	str	r2, [r3, #4]
 80016b0:	609a      	str	r2, [r3, #8]
 80016b2:	60da      	str	r2, [r3, #12]
 80016b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80016b6:	2300      	movs	r3, #0
 80016b8:	61bb      	str	r3, [r7, #24]
 80016ba:	4b8c      	ldr	r3, [pc, #560]	; (80018ec <MX_GPIO_Init+0x24c>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	4a8b      	ldr	r2, [pc, #556]	; (80018ec <MX_GPIO_Init+0x24c>)
 80016c0:	f043 0310 	orr.w	r3, r3, #16
 80016c4:	6313      	str	r3, [r2, #48]	; 0x30
 80016c6:	4b89      	ldr	r3, [pc, #548]	; (80018ec <MX_GPIO_Init+0x24c>)
 80016c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ca:	f003 0310 	and.w	r3, r3, #16
 80016ce:	61bb      	str	r3, [r7, #24]
 80016d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80016d2:	2300      	movs	r3, #0
 80016d4:	617b      	str	r3, [r7, #20]
 80016d6:	4b85      	ldr	r3, [pc, #532]	; (80018ec <MX_GPIO_Init+0x24c>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	4a84      	ldr	r2, [pc, #528]	; (80018ec <MX_GPIO_Init+0x24c>)
 80016dc:	f043 0304 	orr.w	r3, r3, #4
 80016e0:	6313      	str	r3, [r2, #48]	; 0x30
 80016e2:	4b82      	ldr	r3, [pc, #520]	; (80018ec <MX_GPIO_Init+0x24c>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80016ee:	2300      	movs	r3, #0
 80016f0:	613b      	str	r3, [r7, #16]
 80016f2:	4b7e      	ldr	r3, [pc, #504]	; (80018ec <MX_GPIO_Init+0x24c>)
 80016f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f6:	4a7d      	ldr	r2, [pc, #500]	; (80018ec <MX_GPIO_Init+0x24c>)
 80016f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016fc:	6313      	str	r3, [r2, #48]	; 0x30
 80016fe:	4b7b      	ldr	r3, [pc, #492]	; (80018ec <MX_GPIO_Init+0x24c>)
 8001700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001702:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001706:	613b      	str	r3, [r7, #16]
 8001708:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800170a:	2300      	movs	r3, #0
 800170c:	60fb      	str	r3, [r7, #12]
 800170e:	4b77      	ldr	r3, [pc, #476]	; (80018ec <MX_GPIO_Init+0x24c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	4a76      	ldr	r2, [pc, #472]	; (80018ec <MX_GPIO_Init+0x24c>)
 8001714:	f043 0301 	orr.w	r3, r3, #1
 8001718:	6313      	str	r3, [r2, #48]	; 0x30
 800171a:	4b74      	ldr	r3, [pc, #464]	; (80018ec <MX_GPIO_Init+0x24c>)
 800171c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171e:	f003 0301 	and.w	r3, r3, #1
 8001722:	60fb      	str	r3, [r7, #12]
 8001724:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	60bb      	str	r3, [r7, #8]
 800172a:	4b70      	ldr	r3, [pc, #448]	; (80018ec <MX_GPIO_Init+0x24c>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172e:	4a6f      	ldr	r2, [pc, #444]	; (80018ec <MX_GPIO_Init+0x24c>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	; 0x30
 8001736:	4b6d      	ldr	r3, [pc, #436]	; (80018ec <MX_GPIO_Init+0x24c>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	60bb      	str	r3, [r7, #8]
 8001740:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	607b      	str	r3, [r7, #4]
 8001746:	4b69      	ldr	r3, [pc, #420]	; (80018ec <MX_GPIO_Init+0x24c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174a:	4a68      	ldr	r2, [pc, #416]	; (80018ec <MX_GPIO_Init+0x24c>)
 800174c:	f043 0308 	orr.w	r3, r3, #8
 8001750:	6313      	str	r3, [r2, #48]	; 0x30
 8001752:	4b66      	ldr	r3, [pc, #408]	; (80018ec <MX_GPIO_Init+0x24c>)
 8001754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	607b      	str	r3, [r7, #4]
 800175c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LCD_RS_Pin|LCD_RW_Pin|LCD_ENA_Pin
 800175e:	2200      	movs	r2, #0
 8001760:	f64f 4188 	movw	r1, #64648	; 0xfc88
 8001764:	4862      	ldr	r0, [pc, #392]	; (80018f0 <MX_GPIO_Init+0x250>)
 8001766:	f001 fab7 	bl	8002cd8 <HAL_GPIO_WritePin>
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800176a:	2201      	movs	r2, #1
 800176c:	2101      	movs	r1, #1
 800176e:	4861      	ldr	r0, [pc, #388]	; (80018f4 <MX_GPIO_Init+0x254>)
 8001770:	f001 fab2 	bl	8002cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001774:	2200      	movs	r2, #0
 8001776:	f24f 0110 	movw	r1, #61456	; 0xf010
 800177a:	485f      	ldr	r0, [pc, #380]	; (80018f8 <MX_GPIO_Init+0x258>)
 800177c:	f001 faac 	bl	8002cd8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin, GPIO_PIN_RESET);
 8001780:	2200      	movs	r2, #0
 8001782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001786:	485b      	ldr	r0, [pc, #364]	; (80018f4 <MX_GPIO_Init+0x254>)
 8001788:	f001 faa6 	bl	8002cd8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LCD_RS_Pin LCD_RW_Pin LCD_ENA_Pin
                           LCD_DB4_Pin LCD_DB5_Pin LCD_DB6_Pin LCD_DB7_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LCD_RS_Pin|LCD_RW_Pin|LCD_ENA_Pin
 800178c:	f64f 4388 	movw	r3, #64648	; 0xfc88
 8001790:	61fb      	str	r3, [r7, #28]
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001792:	2301      	movs	r3, #1
 8001794:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001796:	2300      	movs	r3, #0
 8001798:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800179a:	2300      	movs	r3, #0
 800179c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800179e:	f107 031c 	add.w	r3, r7, #28
 80017a2:	4619      	mov	r1, r3
 80017a4:	4852      	ldr	r0, [pc, #328]	; (80018f0 <MX_GPIO_Init+0x250>)
 80017a6:	f001 f8fb 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin BTN_DOWN_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|BTN_DOWN_Pin;
 80017aa:	f240 1301 	movw	r3, #257	; 0x101
 80017ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017b4:	2300      	movs	r3, #0
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b8:	2300      	movs	r3, #0
 80017ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80017bc:	f107 031c 	add.w	r3, r7, #28
 80017c0:	4619      	mov	r1, r3
 80017c2:	484c      	ldr	r0, [pc, #304]	; (80018f4 <MX_GPIO_Init+0x254>)
 80017c4:	f001 f8ec 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80017c8:	2308      	movs	r3, #8
 80017ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017cc:	2302      	movs	r3, #2
 80017ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d0:	2300      	movs	r3, #0
 80017d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017d4:	2300      	movs	r3, #0
 80017d6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80017d8:	2305      	movs	r3, #5
 80017da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80017dc:	f107 031c 	add.w	r3, r7, #28
 80017e0:	4619      	mov	r1, r3
 80017e2:	4844      	ldr	r0, [pc, #272]	; (80018f4 <MX_GPIO_Init+0x254>)
 80017e4:	f001 f8dc 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017e8:	2301      	movs	r3, #1
 80017ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80017ec:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80017f0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f2:	2300      	movs	r3, #0
 80017f4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017f6:	f107 031c 	add.w	r3, r7, #28
 80017fa:	4619      	mov	r1, r3
 80017fc:	483f      	ldr	r0, [pc, #252]	; (80018fc <MX_GPIO_Init+0x25c>)
 80017fe:	f001 f8cf 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001802:	2304      	movs	r3, #4
 8001804:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001806:	2300      	movs	r3, #0
 8001808:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800180a:	2300      	movs	r3, #0
 800180c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800180e:	f107 031c 	add.w	r3, r7, #28
 8001812:	4619      	mov	r1, r3
 8001814:	483a      	ldr	r0, [pc, #232]	; (8001900 <MX_GPIO_Init+0x260>)
 8001816:	f001 f8c3 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800181a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800181e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001820:	2302      	movs	r3, #2
 8001822:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001824:	2300      	movs	r3, #0
 8001826:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001828:	2300      	movs	r3, #0
 800182a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800182c:	2301      	movs	r3, #1
 800182e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001830:	f107 031c 	add.w	r3, r7, #28
 8001834:	4619      	mov	r1, r3
 8001836:	482e      	ldr	r0, [pc, #184]	; (80018f0 <MX_GPIO_Init+0x250>)
 8001838:	f001 f8b2 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 800183c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001840:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001842:	2302      	movs	r3, #2
 8001844:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001846:	2300      	movs	r3, #0
 8001848:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800184a:	2300      	movs	r3, #0
 800184c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800184e:	2305      	movs	r3, #5
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001852:	f107 031c 	add.w	r3, r7, #28
 8001856:	4619      	mov	r1, r3
 8001858:	4829      	ldr	r0, [pc, #164]	; (8001900 <MX_GPIO_Init+0x260>)
 800185a:	f001 f8a1 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 800185e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001862:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001870:	f107 031c 	add.w	r3, r7, #28
 8001874:	4619      	mov	r1, r3
 8001876:	4820      	ldr	r0, [pc, #128]	; (80018f8 <MX_GPIO_Init+0x258>)
 8001878:	f001 f892 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_LEFT_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 800187c:	f44f 6324 	mov.w	r3, #2624	; 0xa40
 8001880:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001882:	2300      	movs	r3, #0
 8001884:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001886:	2300      	movs	r3, #0
 8001888:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800188a:	f107 031c 	add.w	r3, r7, #28
 800188e:	4619      	mov	r1, r3
 8001890:	4818      	ldr	r0, [pc, #96]	; (80018f4 <MX_GPIO_Init+0x254>)
 8001892:	f001 f885 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_MID_Pin */
  GPIO_InitStruct.Pin = BTN_MID_Pin;
 8001896:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800189a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800189c:	2300      	movs	r3, #0
 800189e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a0:	2300      	movs	r3, #0
 80018a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_MID_GPIO_Port, &GPIO_InitStruct);
 80018a4:	f107 031c 	add.w	r3, r7, #28
 80018a8:	4619      	mov	r1, r3
 80018aa:	4814      	ldr	r0, [pc, #80]	; (80018fc <MX_GPIO_Init+0x25c>)
 80018ac:	f001 f878 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80018b0:	2320      	movs	r3, #32
 80018b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80018b4:	2300      	movs	r3, #0
 80018b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b8:	2300      	movs	r3, #0
 80018ba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80018bc:	f107 031c 	add.w	r3, r7, #28
 80018c0:	4619      	mov	r1, r3
 80018c2:	480d      	ldr	r0, [pc, #52]	; (80018f8 <MX_GPIO_Init+0x258>)
 80018c4:	f001 f86c 	bl	80029a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 80018c8:	2302      	movs	r3, #2
 80018ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80018cc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 80018d0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018d2:	2300      	movs	r3, #0
 80018d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 80018d6:	f107 031c 	add.w	r3, r7, #28
 80018da:	4619      	mov	r1, r3
 80018dc:	4804      	ldr	r0, [pc, #16]	; (80018f0 <MX_GPIO_Init+0x250>)
 80018de:	f001 f85f 	bl	80029a0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018e2:	bf00      	nop
 80018e4:	3730      	adds	r7, #48	; 0x30
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40021000 	.word	0x40021000
 80018f4:	40020800 	.word	0x40020800
 80018f8:	40020c00 	.word	0x40020c00
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020400 	.word	0x40020400

08001904 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001908:	b672      	cpsid	i
}
 800190a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800190c:	e7fe      	b.n	800190c <Error_Handler+0x8>
	...

08001910 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b082      	sub	sp, #8
 8001914:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001916:	2300      	movs	r3, #0
 8001918:	607b      	str	r3, [r7, #4]
 800191a:	4b10      	ldr	r3, [pc, #64]	; (800195c <HAL_MspInit+0x4c>)
 800191c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191e:	4a0f      	ldr	r2, [pc, #60]	; (800195c <HAL_MspInit+0x4c>)
 8001920:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001924:	6453      	str	r3, [r2, #68]	; 0x44
 8001926:	4b0d      	ldr	r3, [pc, #52]	; (800195c <HAL_MspInit+0x4c>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800192e:	607b      	str	r3, [r7, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	603b      	str	r3, [r7, #0]
 8001936:	4b09      	ldr	r3, [pc, #36]	; (800195c <HAL_MspInit+0x4c>)
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	4a08      	ldr	r2, [pc, #32]	; (800195c <HAL_MspInit+0x4c>)
 800193c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001940:	6413      	str	r3, [r2, #64]	; 0x40
 8001942:	4b06      	ldr	r3, [pc, #24]	; (800195c <HAL_MspInit+0x4c>)
 8001944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800194a:	603b      	str	r3, [r7, #0]
 800194c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800194e:	2007      	movs	r0, #7
 8001950:	f000 ffe4 	bl	800291c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001954:	bf00      	nop
 8001956:	3708      	adds	r7, #8
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40023800 	.word	0x40023800

08001960 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b08a      	sub	sp, #40	; 0x28
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001968:	f107 0314 	add.w	r3, r7, #20
 800196c:	2200      	movs	r2, #0
 800196e:	601a      	str	r2, [r3, #0]
 8001970:	605a      	str	r2, [r3, #4]
 8001972:	609a      	str	r2, [r3, #8]
 8001974:	60da      	str	r2, [r3, #12]
 8001976:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	4a17      	ldr	r2, [pc, #92]	; (80019dc <HAL_ADC_MspInit+0x7c>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d127      	bne.n	80019d2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001982:	2300      	movs	r3, #0
 8001984:	613b      	str	r3, [r7, #16]
 8001986:	4b16      	ldr	r3, [pc, #88]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 8001988:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800198a:	4a15      	ldr	r2, [pc, #84]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 800198c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001990:	6453      	str	r3, [r2, #68]	; 0x44
 8001992:	4b13      	ldr	r3, [pc, #76]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 8001994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800199a:	613b      	str	r3, [r7, #16]
 800199c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60fb      	str	r3, [r7, #12]
 80019a2:	4b0f      	ldr	r3, [pc, #60]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a0e      	ldr	r2, [pc, #56]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 80019a8:	f043 0302 	orr.w	r3, r3, #2
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b0c      	ldr	r3, [pc, #48]	; (80019e0 <HAL_ADC_MspInit+0x80>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0302 	and.w	r3, r3, #2
 80019b6:	60fb      	str	r3, [r7, #12]
 80019b8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = TEMP_SENS_Pin;
 80019ba:	2302      	movs	r3, #2
 80019bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80019be:	2303      	movs	r3, #3
 80019c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TEMP_SENS_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	4805      	ldr	r0, [pc, #20]	; (80019e4 <HAL_ADC_MspInit+0x84>)
 80019ce:	f000 ffe7 	bl	80029a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	; 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40012000 	.word	0x40012000
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020400 	.word	0x40020400

080019e8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b08a      	sub	sp, #40	; 0x28
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f0:	f107 0314 	add.w	r3, r7, #20
 80019f4:	2200      	movs	r2, #0
 80019f6:	601a      	str	r2, [r3, #0]
 80019f8:	605a      	str	r2, [r3, #4]
 80019fa:	609a      	str	r2, [r3, #8]
 80019fc:	60da      	str	r2, [r3, #12]
 80019fe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a19      	ldr	r2, [pc, #100]	; (8001a6c <HAL_I2C_MspInit+0x84>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d12c      	bne.n	8001a64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	613b      	str	r3, [r7, #16]
 8001a0e:	4b18      	ldr	r3, [pc, #96]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a12:	4a17      	ldr	r2, [pc, #92]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a14:	f043 0302 	orr.w	r3, r3, #2
 8001a18:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1a:	4b15      	ldr	r3, [pc, #84]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	613b      	str	r3, [r7, #16]
 8001a24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001a26:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001a2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a2c:	2312      	movs	r3, #18
 8001a2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a34:	2300      	movs	r3, #0
 8001a36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a38:	2304      	movs	r3, #4
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	f107 0314 	add.w	r3, r7, #20
 8001a40:	4619      	mov	r1, r3
 8001a42:	480c      	ldr	r0, [pc, #48]	; (8001a74 <HAL_I2C_MspInit+0x8c>)
 8001a44:	f000 ffac 	bl	80029a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a48:	2300      	movs	r3, #0
 8001a4a:	60fb      	str	r3, [r7, #12]
 8001a4c:	4b08      	ldr	r3, [pc, #32]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a50:	4a07      	ldr	r2, [pc, #28]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a56:	6413      	str	r3, [r2, #64]	; 0x40
 8001a58:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <HAL_I2C_MspInit+0x88>)
 8001a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a60:	60fb      	str	r3, [r7, #12]
 8001a62:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a64:	bf00      	nop
 8001a66:	3728      	adds	r7, #40	; 0x28
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	40005400 	.word	0x40005400
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40020400 	.word	0x40020400

08001a78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b08e      	sub	sp, #56	; 0x38
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a84:	2200      	movs	r2, #0
 8001a86:	601a      	str	r2, [r3, #0]
 8001a88:	605a      	str	r2, [r3, #4]
 8001a8a:	609a      	str	r2, [r3, #8]
 8001a8c:	60da      	str	r2, [r3, #12]
 8001a8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001a90:	f107 0314 	add.w	r3, r7, #20
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
 8001a9a:	609a      	str	r2, [r3, #8]
 8001a9c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	4a31      	ldr	r2, [pc, #196]	; (8001b68 <HAL_I2S_MspInit+0xf0>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	d15a      	bne.n	8001b5e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001aac:	23c0      	movs	r3, #192	; 0xc0
 8001aae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001ab0:	2302      	movs	r3, #2
 8001ab2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ab4:	f107 0314 	add.w	r3, r7, #20
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f003 ff7d 	bl	80059b8 <HAL_RCCEx_PeriphCLKConfig>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001ac4:	f7ff ff1e 	bl	8001904 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001ac8:	2300      	movs	r3, #0
 8001aca:	613b      	str	r3, [r7, #16]
 8001acc:	4b27      	ldr	r3, [pc, #156]	; (8001b6c <HAL_I2S_MspInit+0xf4>)
 8001ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad0:	4a26      	ldr	r2, [pc, #152]	; (8001b6c <HAL_I2S_MspInit+0xf4>)
 8001ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad8:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <HAL_I2S_MspInit+0xf4>)
 8001ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001adc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
 8001ae8:	4b20      	ldr	r3, [pc, #128]	; (8001b6c <HAL_I2S_MspInit+0xf4>)
 8001aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aec:	4a1f      	ldr	r2, [pc, #124]	; (8001b6c <HAL_I2S_MspInit+0xf4>)
 8001aee:	f043 0301 	orr.w	r3, r3, #1
 8001af2:	6313      	str	r3, [r2, #48]	; 0x30
 8001af4:	4b1d      	ldr	r3, [pc, #116]	; (8001b6c <HAL_I2S_MspInit+0xf4>)
 8001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af8:	f003 0301 	and.w	r3, r3, #1
 8001afc:	60fb      	str	r3, [r7, #12]
 8001afe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b00:	2300      	movs	r3, #0
 8001b02:	60bb      	str	r3, [r7, #8]
 8001b04:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_I2S_MspInit+0xf4>)
 8001b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b08:	4a18      	ldr	r2, [pc, #96]	; (8001b6c <HAL_I2S_MspInit+0xf4>)
 8001b0a:	f043 0304 	orr.w	r3, r3, #4
 8001b0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b10:	4b16      	ldr	r3, [pc, #88]	; (8001b6c <HAL_I2S_MspInit+0xf4>)
 8001b12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b14:	f003 0304 	and.w	r3, r3, #4
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001b1c:	2310      	movs	r3, #16
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b20:	2302      	movs	r3, #2
 8001b22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b2c:	2306      	movs	r3, #6
 8001b2e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b34:	4619      	mov	r1, r3
 8001b36:	480e      	ldr	r0, [pc, #56]	; (8001b70 <HAL_I2S_MspInit+0xf8>)
 8001b38:	f000 ff32 	bl	80029a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001b3c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b42:	2302      	movs	r3, #2
 8001b44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001b4e:	2306      	movs	r3, #6
 8001b50:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b56:	4619      	mov	r1, r3
 8001b58:	4806      	ldr	r0, [pc, #24]	; (8001b74 <HAL_I2S_MspInit+0xfc>)
 8001b5a:	f000 ff21 	bl	80029a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3738      	adds	r7, #56	; 0x38
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40003c00 	.word	0x40003c00
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020000 	.word	0x40020000
 8001b74:	40020800 	.word	0x40020800

08001b78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b08a      	sub	sp, #40	; 0x28
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b80:	f107 0314 	add.w	r3, r7, #20
 8001b84:	2200      	movs	r2, #0
 8001b86:	601a      	str	r2, [r3, #0]
 8001b88:	605a      	str	r2, [r3, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
 8001b8c:	60da      	str	r2, [r3, #12]
 8001b8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	4a19      	ldr	r2, [pc, #100]	; (8001bfc <HAL_SPI_MspInit+0x84>)
 8001b96:	4293      	cmp	r3, r2
 8001b98:	d12b      	bne.n	8001bf2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
 8001b9e:	4b18      	ldr	r3, [pc, #96]	; (8001c00 <HAL_SPI_MspInit+0x88>)
 8001ba0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba2:	4a17      	ldr	r2, [pc, #92]	; (8001c00 <HAL_SPI_MspInit+0x88>)
 8001ba4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001ba8:	6453      	str	r3, [r2, #68]	; 0x44
 8001baa:	4b15      	ldr	r3, [pc, #84]	; (8001c00 <HAL_SPI_MspInit+0x88>)
 8001bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001bb2:	613b      	str	r3, [r7, #16]
 8001bb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	60fb      	str	r3, [r7, #12]
 8001bba:	4b11      	ldr	r3, [pc, #68]	; (8001c00 <HAL_SPI_MspInit+0x88>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbe:	4a10      	ldr	r2, [pc, #64]	; (8001c00 <HAL_SPI_MspInit+0x88>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bc6:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_SPI_MspInit+0x88>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001bd2:	23e0      	movs	r3, #224	; 0xe0
 8001bd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bde:	2300      	movs	r3, #0
 8001be0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001be2:	2305      	movs	r3, #5
 8001be4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001be6:	f107 0314 	add.w	r3, r7, #20
 8001bea:	4619      	mov	r1, r3
 8001bec:	4805      	ldr	r0, [pc, #20]	; (8001c04 <HAL_SPI_MspInit+0x8c>)
 8001bee:	f000 fed7 	bl	80029a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001bf2:	bf00      	nop
 8001bf4:	3728      	adds	r7, #40	; 0x28
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}
 8001bfa:	bf00      	nop
 8001bfc:	40013000 	.word	0x40013000
 8001c00:	40023800 	.word	0x40023800
 8001c04:	40020000 	.word	0x40020000

08001c08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b085      	sub	sp, #20
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a0b      	ldr	r2, [pc, #44]	; (8001c44 <HAL_TIM_Base_MspInit+0x3c>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d10d      	bne.n	8001c36 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
 8001c1e:	4b0a      	ldr	r3, [pc, #40]	; (8001c48 <HAL_TIM_Base_MspInit+0x40>)
 8001c20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c22:	4a09      	ldr	r2, [pc, #36]	; (8001c48 <HAL_TIM_Base_MspInit+0x40>)
 8001c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c28:	6453      	str	r3, [r2, #68]	; 0x44
 8001c2a:	4b07      	ldr	r3, [pc, #28]	; (8001c48 <HAL_TIM_Base_MspInit+0x40>)
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8001c36:	bf00      	nop
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	40014800 	.word	0x40014800
 8001c48:	40023800 	.word	0x40023800

08001c4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c50:	e7fe      	b.n	8001c50 <NMI_Handler+0x4>

08001c52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c52:	b480      	push	{r7}
 8001c54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c56:	e7fe      	b.n	8001c56 <HardFault_Handler+0x4>

08001c58 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c58:	b480      	push	{r7}
 8001c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c5c:	e7fe      	b.n	8001c5c <MemManage_Handler+0x4>

08001c5e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c5e:	b480      	push	{r7}
 8001c60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c62:	e7fe      	b.n	8001c62 <BusFault_Handler+0x4>

08001c64 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c68:	e7fe      	b.n	8001c68 <UsageFault_Handler+0x4>

08001c6a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c6e:	bf00      	nop
 8001c70:	46bd      	mov	sp, r7
 8001c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c76:	4770      	bx	lr

08001c78 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c7c:	bf00      	nop
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c86:	b480      	push	{r7}
 8001c88:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c8a:	bf00      	nop
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr

08001c94 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c98:	f000 f960 	bl	8001f5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c9c:	bf00      	nop
 8001c9e:	bd80      	pop	{r7, pc}

08001ca0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <OTG_FS_IRQHandler+0x10>)
 8001ca6:	f001 fa9b 	bl	80031e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	2000079c 	.word	0x2000079c

08001cb4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0
  return 1;
 8001cb8:	2301      	movs	r3, #1
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <_kill>:

int _kill(int pid, int sig)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b082      	sub	sp, #8
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001cce:	f006 fbf5 	bl	80084bc <__errno>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2216      	movs	r2, #22
 8001cd6:	601a      	str	r2, [r3, #0]
  return -1;
 8001cd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <_exit>:

void _exit (int status)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001cec:	f04f 31ff 	mov.w	r1, #4294967295
 8001cf0:	6878      	ldr	r0, [r7, #4]
 8001cf2:	f7ff ffe7 	bl	8001cc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cf6:	e7fe      	b.n	8001cf6 <_exit+0x12>

08001cf8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	60f8      	str	r0, [r7, #12]
 8001d00:	60b9      	str	r1, [r7, #8]
 8001d02:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d04:	2300      	movs	r3, #0
 8001d06:	617b      	str	r3, [r7, #20]
 8001d08:	e00a      	b.n	8001d20 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d0a:	f3af 8000 	nop.w
 8001d0e:	4601      	mov	r1, r0
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	1c5a      	adds	r2, r3, #1
 8001d14:	60ba      	str	r2, [r7, #8]
 8001d16:	b2ca      	uxtb	r2, r1
 8001d18:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	3301      	adds	r3, #1
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	dbf0      	blt.n	8001d0a <_read+0x12>
  }

  return len;
 8001d28:	687b      	ldr	r3, [r7, #4]
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3718      	adds	r7, #24
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}

08001d32 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b086      	sub	sp, #24
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	60f8      	str	r0, [r7, #12]
 8001d3a:	60b9      	str	r1, [r7, #8]
 8001d3c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d3e:	2300      	movs	r3, #0
 8001d40:	617b      	str	r3, [r7, #20]
 8001d42:	e009      	b.n	8001d58 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d44:	68bb      	ldr	r3, [r7, #8]
 8001d46:	1c5a      	adds	r2, r3, #1
 8001d48:	60ba      	str	r2, [r7, #8]
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	3301      	adds	r3, #1
 8001d56:	617b      	str	r3, [r7, #20]
 8001d58:	697a      	ldr	r2, [r7, #20]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	429a      	cmp	r2, r3
 8001d5e:	dbf1      	blt.n	8001d44 <_write+0x12>
  }
  return len;
 8001d60:	687b      	ldr	r3, [r7, #4]
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3718      	adds	r7, #24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bd80      	pop	{r7, pc}

08001d6a <_close>:

int _close(int file)
{
 8001d6a:	b480      	push	{r7}
 8001d6c:	b083      	sub	sp, #12
 8001d6e:	af00      	add	r7, sp, #0
 8001d70:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d72:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
 8001d8a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d92:	605a      	str	r2, [r3, #4]
  return 0;
 8001d94:	2300      	movs	r3, #0
}
 8001d96:	4618      	mov	r0, r3
 8001d98:	370c      	adds	r7, #12
 8001d9a:	46bd      	mov	sp, r7
 8001d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da0:	4770      	bx	lr

08001da2 <_isatty>:

int _isatty(int file)
{
 8001da2:	b480      	push	{r7}
 8001da4:	b083      	sub	sp, #12
 8001da6:	af00      	add	r7, sp, #0
 8001da8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001daa:	2301      	movs	r3, #1
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	370c      	adds	r7, #12
 8001db0:	46bd      	mov	sp, r7
 8001db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db6:	4770      	bx	lr

08001db8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	60f8      	str	r0, [r7, #12]
 8001dc0:	60b9      	str	r1, [r7, #8]
 8001dc2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	3714      	adds	r7, #20
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b086      	sub	sp, #24
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ddc:	4a14      	ldr	r2, [pc, #80]	; (8001e30 <_sbrk+0x5c>)
 8001dde:	4b15      	ldr	r3, [pc, #84]	; (8001e34 <_sbrk+0x60>)
 8001de0:	1ad3      	subs	r3, r2, r3
 8001de2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001de8:	4b13      	ldr	r3, [pc, #76]	; (8001e38 <_sbrk+0x64>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d102      	bne.n	8001df6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001df0:	4b11      	ldr	r3, [pc, #68]	; (8001e38 <_sbrk+0x64>)
 8001df2:	4a12      	ldr	r2, [pc, #72]	; (8001e3c <_sbrk+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001df6:	4b10      	ldr	r3, [pc, #64]	; (8001e38 <_sbrk+0x64>)
 8001df8:	681a      	ldr	r2, [r3, #0]
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4413      	add	r3, r2
 8001dfe:	693a      	ldr	r2, [r7, #16]
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d207      	bcs.n	8001e14 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e04:	f006 fb5a 	bl	80084bc <__errno>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	220c      	movs	r2, #12
 8001e0c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001e12:	e009      	b.n	8001e28 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e14:	4b08      	ldr	r3, [pc, #32]	; (8001e38 <_sbrk+0x64>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e1a:	4b07      	ldr	r3, [pc, #28]	; (8001e38 <_sbrk+0x64>)
 8001e1c:	681a      	ldr	r2, [r3, #0]
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	4413      	add	r3, r2
 8001e22:	4a05      	ldr	r2, [pc, #20]	; (8001e38 <_sbrk+0x64>)
 8001e24:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e26:	68fb      	ldr	r3, [r7, #12]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3718      	adds	r7, #24
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}
 8001e30:	20020000 	.word	0x20020000
 8001e34:	00000400 	.word	0x00000400
 8001e38:	200003b8 	.word	0x200003b8
 8001e3c:	20000ab0 	.word	0x20000ab0

08001e40 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <SystemInit+0x20>)
 8001e46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e4a:	4a05      	ldr	r2, [pc, #20]	; (8001e60 <SystemInit+0x20>)
 8001e4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e50:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000ed00 	.word	0xe000ed00

08001e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001e9c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e68:	480d      	ldr	r0, [pc, #52]	; (8001ea0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e6a:	490e      	ldr	r1, [pc, #56]	; (8001ea4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e6c:	4a0e      	ldr	r2, [pc, #56]	; (8001ea8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e70:	e002      	b.n	8001e78 <LoopCopyDataInit>

08001e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e76:	3304      	adds	r3, #4

08001e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e7c:	d3f9      	bcc.n	8001e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e7e:	4a0b      	ldr	r2, [pc, #44]	; (8001eac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e80:	4c0b      	ldr	r4, [pc, #44]	; (8001eb0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e84:	e001      	b.n	8001e8a <LoopFillZerobss>

08001e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e88:	3204      	adds	r2, #4

08001e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e8c:	d3fb      	bcc.n	8001e86 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001e8e:	f7ff ffd7 	bl	8001e40 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e92:	f006 fb19 	bl	80084c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e96:	f7ff fa0d 	bl	80012b4 <main>
  bx  lr    
 8001e9a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001e9c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ea0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ea4:	20000218 	.word	0x20000218
  ldr r2, =_sidata
 8001ea8:	0800d30c 	.word	0x0800d30c
  ldr r2, =_sbss
 8001eac:	20000218 	.word	0x20000218
  ldr r4, =_ebss
 8001eb0:	20000ab0 	.word	0x20000ab0

08001eb4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001eb4:	e7fe      	b.n	8001eb4 <ADC_IRQHandler>
	...

08001eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ebc:	4b0e      	ldr	r3, [pc, #56]	; (8001ef8 <HAL_Init+0x40>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a0d      	ldr	r2, [pc, #52]	; (8001ef8 <HAL_Init+0x40>)
 8001ec2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ec6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	; (8001ef8 <HAL_Init+0x40>)
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <HAL_Init+0x40>)
 8001ece:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ed2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ed4:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <HAL_Init+0x40>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a07      	ldr	r2, [pc, #28]	; (8001ef8 <HAL_Init+0x40>)
 8001eda:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ede:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ee0:	2003      	movs	r0, #3
 8001ee2:	f000 fd1b 	bl	800291c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001ee6:	2000      	movs	r0, #0
 8001ee8:	f000 f808 	bl	8001efc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001eec:	f7ff fd10 	bl	8001910 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ef0:	2300      	movs	r3, #0
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	bd80      	pop	{r7, pc}
 8001ef6:	bf00      	nop
 8001ef8:	40023c00 	.word	0x40023c00

08001efc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f04:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_InitTick+0x54>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_InitTick+0x58>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4619      	mov	r1, r3
 8001f0e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f12:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f16:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f000 fd33 	bl	8002986 <HAL_SYSTICK_Config>
 8001f20:	4603      	mov	r3, r0
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d001      	beq.n	8001f2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e00e      	b.n	8001f48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b0f      	cmp	r3, #15
 8001f2e:	d80a      	bhi.n	8001f46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f30:	2200      	movs	r2, #0
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	f04f 30ff 	mov.w	r0, #4294967295
 8001f38:	f000 fcfb 	bl	8002932 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f3c:	4a06      	ldr	r2, [pc, #24]	; (8001f58 <HAL_InitTick+0x5c>)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f42:	2300      	movs	r3, #0
 8001f44:	e000      	b.n	8001f48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	3708      	adds	r7, #8
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	bd80      	pop	{r7, pc}
 8001f50:	20000018 	.word	0x20000018
 8001f54:	20000020 	.word	0x20000020
 8001f58:	2000001c 	.word	0x2000001c

08001f5c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f60:	4b06      	ldr	r3, [pc, #24]	; (8001f7c <HAL_IncTick+0x20>)
 8001f62:	781b      	ldrb	r3, [r3, #0]
 8001f64:	461a      	mov	r2, r3
 8001f66:	4b06      	ldr	r3, [pc, #24]	; (8001f80 <HAL_IncTick+0x24>)
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4413      	add	r3, r2
 8001f6c:	4a04      	ldr	r2, [pc, #16]	; (8001f80 <HAL_IncTick+0x24>)
 8001f6e:	6013      	str	r3, [r2, #0]
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr
 8001f7a:	bf00      	nop
 8001f7c:	20000020 	.word	0x20000020
 8001f80:	200003bc 	.word	0x200003bc

08001f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  return uwTick;
 8001f88:	4b03      	ldr	r3, [pc, #12]	; (8001f98 <HAL_GetTick+0x14>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr
 8001f96:	bf00      	nop
 8001f98:	200003bc 	.word	0x200003bc

08001f9c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fa4:	f7ff ffee 	bl	8001f84 <HAL_GetTick>
 8001fa8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fb4:	d005      	beq.n	8001fc2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fb6:	4b0a      	ldr	r3, [pc, #40]	; (8001fe0 <HAL_Delay+0x44>)
 8001fb8:	781b      	ldrb	r3, [r3, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fc2:	bf00      	nop
 8001fc4:	f7ff ffde 	bl	8001f84 <HAL_GetTick>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	1ad3      	subs	r3, r2, r3
 8001fce:	68fa      	ldr	r2, [r7, #12]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d8f7      	bhi.n	8001fc4 <HAL_Delay+0x28>
  {
  }
}
 8001fd4:	bf00      	nop
 8001fd6:	bf00      	nop
 8001fd8:	3710      	adds	r7, #16
 8001fda:	46bd      	mov	sp, r7
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	20000020 	.word	0x20000020

08001fe4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b084      	sub	sp, #16
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fec:	2300      	movs	r3, #0
 8001fee:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d101      	bne.n	8001ffa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	e033      	b.n	8002062 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d109      	bne.n	8002016 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f7ff fcac 	bl	8001960 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	2200      	movs	r2, #0
 800200c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	d118      	bne.n	8002054 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800202a:	f023 0302 	bic.w	r3, r3, #2
 800202e:	f043 0202 	orr.w	r2, r3, #2
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002036:	6878      	ldr	r0, [r7, #4]
 8002038:	f000 faa4 	bl	8002584 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002046:	f023 0303 	bic.w	r3, r3, #3
 800204a:	f043 0201 	orr.w	r2, r3, #1
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	641a      	str	r2, [r3, #64]	; 0x40
 8002052:	e001      	b.n	8002058 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2200      	movs	r2, #0
 800205c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002060:	7bfb      	ldrb	r3, [r7, #15]
}
 8002062:	4618      	mov	r0, r3
 8002064:	3710      	adds	r7, #16
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}
	...

0800206c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800207e:	2b01      	cmp	r3, #1
 8002080:	d101      	bne.n	8002086 <HAL_ADC_Start+0x1a>
 8002082:	2302      	movs	r3, #2
 8002084:	e0b2      	b.n	80021ec <HAL_ADC_Start+0x180>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	2201      	movs	r2, #1
 800208a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689b      	ldr	r3, [r3, #8]
 8002094:	f003 0301 	and.w	r3, r3, #1
 8002098:	2b01      	cmp	r3, #1
 800209a:	d018      	beq.n	80020ce <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689a      	ldr	r2, [r3, #8]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f042 0201 	orr.w	r2, r2, #1
 80020aa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80020ac:	4b52      	ldr	r3, [pc, #328]	; (80021f8 <HAL_ADC_Start+0x18c>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a52      	ldr	r2, [pc, #328]	; (80021fc <HAL_ADC_Start+0x190>)
 80020b2:	fba2 2303 	umull	r2, r3, r2, r3
 80020b6:	0c9a      	lsrs	r2, r3, #18
 80020b8:	4613      	mov	r3, r2
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	4413      	add	r3, r2
 80020be:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020c0:	e002      	b.n	80020c8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	3b01      	subs	r3, #1
 80020c6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80020c8:	68bb      	ldr	r3, [r7, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f9      	bne.n	80020c2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	689b      	ldr	r3, [r3, #8]
 80020d4:	f003 0301 	and.w	r3, r3, #1
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d17a      	bne.n	80021d2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80020e4:	f023 0301 	bic.w	r3, r3, #1
 80020e8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	685b      	ldr	r3, [r3, #4]
 80020f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002106:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002112:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002116:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800211a:	d106      	bne.n	800212a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002120:	f023 0206 	bic.w	r2, r3, #6
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	645a      	str	r2, [r3, #68]	; 0x44
 8002128:	e002      	b.n	8002130 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	2200      	movs	r2, #0
 800212e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	2200      	movs	r2, #0
 8002134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002138:	4b31      	ldr	r3, [pc, #196]	; (8002200 <HAL_ADC_Start+0x194>)
 800213a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002144:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	2b00      	cmp	r3, #0
 8002150:	d12a      	bne.n	80021a8 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a2b      	ldr	r2, [pc, #172]	; (8002204 <HAL_ADC_Start+0x198>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d015      	beq.n	8002188 <HAL_ADC_Start+0x11c>
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a29      	ldr	r2, [pc, #164]	; (8002208 <HAL_ADC_Start+0x19c>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d105      	bne.n	8002172 <HAL_ADC_Start+0x106>
 8002166:	4b26      	ldr	r3, [pc, #152]	; (8002200 <HAL_ADC_Start+0x194>)
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	f003 031f 	and.w	r3, r3, #31
 800216e:	2b00      	cmp	r3, #0
 8002170:	d00a      	beq.n	8002188 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4a25      	ldr	r2, [pc, #148]	; (800220c <HAL_ADC_Start+0x1a0>)
 8002178:	4293      	cmp	r3, r2
 800217a:	d136      	bne.n	80021ea <HAL_ADC_Start+0x17e>
 800217c:	4b20      	ldr	r3, [pc, #128]	; (8002200 <HAL_ADC_Start+0x194>)
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	f003 0310 	and.w	r3, r3, #16
 8002184:	2b00      	cmp	r3, #0
 8002186:	d130      	bne.n	80021ea <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	689b      	ldr	r3, [r3, #8]
 800218e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d129      	bne.n	80021ea <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	689a      	ldr	r2, [r3, #8]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021a4:	609a      	str	r2, [r3, #8]
 80021a6:	e020      	b.n	80021ea <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a15      	ldr	r2, [pc, #84]	; (8002204 <HAL_ADC_Start+0x198>)
 80021ae:	4293      	cmp	r3, r2
 80021b0:	d11b      	bne.n	80021ea <HAL_ADC_Start+0x17e>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	689b      	ldr	r3, [r3, #8]
 80021b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d114      	bne.n	80021ea <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	689a      	ldr	r2, [r3, #8]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80021ce:	609a      	str	r2, [r3, #8]
 80021d0:	e00b      	b.n	80021ea <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f043 0210 	orr.w	r2, r3, #16
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021e2:	f043 0201 	orr.w	r2, r3, #1
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80021ea:	2300      	movs	r3, #0
}
 80021ec:	4618      	mov	r0, r3
 80021ee:	3714      	adds	r7, #20
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr
 80021f8:	20000018 	.word	0x20000018
 80021fc:	431bde83 	.word	0x431bde83
 8002200:	40012300 	.word	0x40012300
 8002204:	40012000 	.word	0x40012000
 8002208:	40012100 	.word	0x40012100
 800220c:	40012200 	.word	0x40012200

08002210 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002210:	b580      	push	{r7, lr}
 8002212:	b084      	sub	sp, #16
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800221a:	2300      	movs	r3, #0
 800221c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002228:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800222c:	d113      	bne.n	8002256 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002238:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800223c:	d10b      	bne.n	8002256 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f043 0220 	orr.w	r2, r3, #32
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2200      	movs	r2, #0
 800224e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002252:	2301      	movs	r3, #1
 8002254:	e063      	b.n	800231e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002256:	f7ff fe95 	bl	8001f84 <HAL_GetTick>
 800225a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800225c:	e021      	b.n	80022a2 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002264:	d01d      	beq.n	80022a2 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d007      	beq.n	800227c <HAL_ADC_PollForConversion+0x6c>
 800226c:	f7ff fe8a 	bl	8001f84 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	683a      	ldr	r2, [r7, #0]
 8002278:	429a      	cmp	r2, r3
 800227a:	d212      	bcs.n	80022a2 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f003 0302 	and.w	r3, r3, #2
 8002286:	2b02      	cmp	r3, #2
 8002288:	d00b      	beq.n	80022a2 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	f043 0204 	orr.w	r2, r3, #4
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2200      	movs	r2, #0
 800229a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e03d      	b.n	800231e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f003 0302 	and.w	r3, r3, #2
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d1d6      	bne.n	800225e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f06f 0212 	mvn.w	r2, #18
 80022b8:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d123      	bne.n	800231c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d11f      	bne.n	800231c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022e2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d006      	beq.n	80022f8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	689b      	ldr	r3, [r3, #8]
 80022f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d111      	bne.n	800231c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002308:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800230c:	2b00      	cmp	r3, #0
 800230e:	d105      	bne.n	800231c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002314:	f043 0201 	orr.w	r2, r3, #1
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800231c:	2300      	movs	r3, #0
}
 800231e:	4618      	mov	r0, r3
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002326:	b480      	push	{r7}
 8002328:	b083      	sub	sp, #12
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002334:	4618      	mov	r0, r3
 8002336:	370c      	adds	r7, #12
 8002338:	46bd      	mov	sp, r7
 800233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233e:	4770      	bx	lr

08002340 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002340:	b480      	push	{r7}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800234a:	2300      	movs	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002354:	2b01      	cmp	r3, #1
 8002356:	d101      	bne.n	800235c <HAL_ADC_ConfigChannel+0x1c>
 8002358:	2302      	movs	r3, #2
 800235a:	e105      	b.n	8002568 <HAL_ADC_ConfigChannel+0x228>
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2201      	movs	r2, #1
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2b09      	cmp	r3, #9
 800236a:	d925      	bls.n	80023b8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	68d9      	ldr	r1, [r3, #12]
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	b29b      	uxth	r3, r3
 8002378:	461a      	mov	r2, r3
 800237a:	4613      	mov	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	4413      	add	r3, r2
 8002380:	3b1e      	subs	r3, #30
 8002382:	2207      	movs	r2, #7
 8002384:	fa02 f303 	lsl.w	r3, r2, r3
 8002388:	43da      	mvns	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	400a      	ands	r2, r1
 8002390:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	68d9      	ldr	r1, [r3, #12]
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	689a      	ldr	r2, [r3, #8]
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	b29b      	uxth	r3, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	4603      	mov	r3, r0
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	4403      	add	r3, r0
 80023aa:	3b1e      	subs	r3, #30
 80023ac:	409a      	lsls	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	430a      	orrs	r2, r1
 80023b4:	60da      	str	r2, [r3, #12]
 80023b6:	e022      	b.n	80023fe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6919      	ldr	r1, [r3, #16]
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	461a      	mov	r2, r3
 80023c6:	4613      	mov	r3, r2
 80023c8:	005b      	lsls	r3, r3, #1
 80023ca:	4413      	add	r3, r2
 80023cc:	2207      	movs	r2, #7
 80023ce:	fa02 f303 	lsl.w	r3, r2, r3
 80023d2:	43da      	mvns	r2, r3
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	400a      	ands	r2, r1
 80023da:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6919      	ldr	r1, [r3, #16]
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	689a      	ldr	r2, [r3, #8]
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	b29b      	uxth	r3, r3
 80023ec:	4618      	mov	r0, r3
 80023ee:	4603      	mov	r3, r0
 80023f0:	005b      	lsls	r3, r3, #1
 80023f2:	4403      	add	r3, r0
 80023f4:	409a      	lsls	r2, r3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	430a      	orrs	r2, r1
 80023fc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	2b06      	cmp	r3, #6
 8002404:	d824      	bhi.n	8002450 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685a      	ldr	r2, [r3, #4]
 8002410:	4613      	mov	r3, r2
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	4413      	add	r3, r2
 8002416:	3b05      	subs	r3, #5
 8002418:	221f      	movs	r2, #31
 800241a:	fa02 f303 	lsl.w	r3, r2, r3
 800241e:	43da      	mvns	r2, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	400a      	ands	r2, r1
 8002426:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	b29b      	uxth	r3, r3
 8002434:	4618      	mov	r0, r3
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	4613      	mov	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	4413      	add	r3, r2
 8002440:	3b05      	subs	r3, #5
 8002442:	fa00 f203 	lsl.w	r2, r0, r3
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	430a      	orrs	r2, r1
 800244c:	635a      	str	r2, [r3, #52]	; 0x34
 800244e:	e04c      	b.n	80024ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	2b0c      	cmp	r3, #12
 8002456:	d824      	bhi.n	80024a2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	685a      	ldr	r2, [r3, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	009b      	lsls	r3, r3, #2
 8002466:	4413      	add	r3, r2
 8002468:	3b23      	subs	r3, #35	; 0x23
 800246a:	221f      	movs	r2, #31
 800246c:	fa02 f303 	lsl.w	r3, r2, r3
 8002470:	43da      	mvns	r2, r3
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	400a      	ands	r2, r1
 8002478:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	b29b      	uxth	r3, r3
 8002486:	4618      	mov	r0, r3
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	685a      	ldr	r2, [r3, #4]
 800248c:	4613      	mov	r3, r2
 800248e:	009b      	lsls	r3, r3, #2
 8002490:	4413      	add	r3, r2
 8002492:	3b23      	subs	r3, #35	; 0x23
 8002494:	fa00 f203 	lsl.w	r2, r0, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	430a      	orrs	r2, r1
 800249e:	631a      	str	r2, [r3, #48]	; 0x30
 80024a0:	e023      	b.n	80024ea <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685a      	ldr	r2, [r3, #4]
 80024ac:	4613      	mov	r3, r2
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	4413      	add	r3, r2
 80024b2:	3b41      	subs	r3, #65	; 0x41
 80024b4:	221f      	movs	r2, #31
 80024b6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ba:	43da      	mvns	r2, r3
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	400a      	ands	r2, r1
 80024c2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	b29b      	uxth	r3, r3
 80024d0:	4618      	mov	r0, r3
 80024d2:	683b      	ldr	r3, [r7, #0]
 80024d4:	685a      	ldr	r2, [r3, #4]
 80024d6:	4613      	mov	r3, r2
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	4413      	add	r3, r2
 80024dc:	3b41      	subs	r3, #65	; 0x41
 80024de:	fa00 f203 	lsl.w	r2, r0, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	430a      	orrs	r2, r1
 80024e8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80024ea:	4b22      	ldr	r3, [pc, #136]	; (8002574 <HAL_ADC_ConfigChannel+0x234>)
 80024ec:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a21      	ldr	r2, [pc, #132]	; (8002578 <HAL_ADC_ConfigChannel+0x238>)
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d109      	bne.n	800250c <HAL_ADC_ConfigChannel+0x1cc>
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2b12      	cmp	r3, #18
 80024fe:	d105      	bne.n	800250c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4a19      	ldr	r2, [pc, #100]	; (8002578 <HAL_ADC_ConfigChannel+0x238>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d123      	bne.n	800255e <HAL_ADC_ConfigChannel+0x21e>
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	2b10      	cmp	r3, #16
 800251c:	d003      	beq.n	8002526 <HAL_ADC_ConfigChannel+0x1e6>
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2b11      	cmp	r3, #17
 8002524:	d11b      	bne.n	800255e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002532:	683b      	ldr	r3, [r7, #0]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	2b10      	cmp	r3, #16
 8002538:	d111      	bne.n	800255e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800253a:	4b10      	ldr	r3, [pc, #64]	; (800257c <HAL_ADC_ConfigChannel+0x23c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4a10      	ldr	r2, [pc, #64]	; (8002580 <HAL_ADC_ConfigChannel+0x240>)
 8002540:	fba2 2303 	umull	r2, r3, r2, r3
 8002544:	0c9a      	lsrs	r2, r3, #18
 8002546:	4613      	mov	r3, r2
 8002548:	009b      	lsls	r3, r3, #2
 800254a:	4413      	add	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002550:	e002      	b.n	8002558 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	3b01      	subs	r3, #1
 8002556:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1f9      	bne.n	8002552 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40012300 	.word	0x40012300
 8002578:	40012000 	.word	0x40012000
 800257c:	20000018 	.word	0x20000018
 8002580:	431bde83 	.word	0x431bde83

08002584 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800258c:	4b79      	ldr	r3, [pc, #484]	; (8002774 <ADC_Init+0x1f0>)
 800258e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	685a      	ldr	r2, [r3, #4]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	431a      	orrs	r2, r3
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685a      	ldr	r2, [r3, #4]
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80025b8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	6859      	ldr	r1, [r3, #4]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	691b      	ldr	r3, [r3, #16]
 80025c4:	021a      	lsls	r2, r3, #8
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	430a      	orrs	r2, r1
 80025cc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	685a      	ldr	r2, [r3, #4]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80025dc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	6859      	ldr	r1, [r3, #4]
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	689a      	ldr	r2, [r3, #8]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	689a      	ldr	r2, [r3, #8]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80025fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	6899      	ldr	r1, [r3, #8]
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	430a      	orrs	r2, r1
 8002610:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002616:	4a58      	ldr	r2, [pc, #352]	; (8002778 <ADC_Init+0x1f4>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d022      	beq.n	8002662 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800262a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	6899      	ldr	r1, [r3, #8]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	430a      	orrs	r2, r1
 800263c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	689a      	ldr	r2, [r3, #8]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800264c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	6899      	ldr	r1, [r3, #8]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	430a      	orrs	r2, r1
 800265e:	609a      	str	r2, [r3, #8]
 8002660:	e00f      	b.n	8002682 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002670:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002680:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	689a      	ldr	r2, [r3, #8]
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0202 	bic.w	r2, r2, #2
 8002690:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	6899      	ldr	r1, [r3, #8]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	7e1b      	ldrb	r3, [r3, #24]
 800269c:	005a      	lsls	r2, r3, #1
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d01b      	beq.n	80026e8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	685a      	ldr	r2, [r3, #4]
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80026be:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	685a      	ldr	r2, [r3, #4]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80026ce:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	6859      	ldr	r1, [r3, #4]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026da:	3b01      	subs	r3, #1
 80026dc:	035a      	lsls	r2, r3, #13
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	430a      	orrs	r2, r1
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	e007      	b.n	80026f8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	685a      	ldr	r2, [r3, #4]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80026f6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002706:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	69db      	ldr	r3, [r3, #28]
 8002712:	3b01      	subs	r3, #1
 8002714:	051a      	lsls	r2, r3, #20
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	430a      	orrs	r2, r1
 800271c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800272c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	6899      	ldr	r1, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800273a:	025a      	lsls	r2, r3, #9
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	430a      	orrs	r2, r1
 8002742:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689a      	ldr	r2, [r3, #8]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002752:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	6899      	ldr	r1, [r3, #8]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	029a      	lsls	r2, r3, #10
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	430a      	orrs	r2, r1
 8002766:	609a      	str	r2, [r3, #8]
}
 8002768:	bf00      	nop
 800276a:	3714      	adds	r7, #20
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40012300 	.word	0x40012300
 8002778:	0f000001 	.word	0x0f000001

0800277c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800277c:	b480      	push	{r7}
 800277e:	b085      	sub	sp, #20
 8002780:	af00      	add	r7, sp, #0
 8002782:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f003 0307 	and.w	r3, r3, #7
 800278a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800278c:	4b0c      	ldr	r3, [pc, #48]	; (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002792:	68ba      	ldr	r2, [r7, #8]
 8002794:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002798:	4013      	ands	r3, r2
 800279a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80027a0:	68bb      	ldr	r3, [r7, #8]
 80027a2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80027a4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80027a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027ac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80027ae:	4a04      	ldr	r2, [pc, #16]	; (80027c0 <__NVIC_SetPriorityGrouping+0x44>)
 80027b0:	68bb      	ldr	r3, [r7, #8]
 80027b2:	60d3      	str	r3, [r2, #12]
}
 80027b4:	bf00      	nop
 80027b6:	3714      	adds	r7, #20
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr
 80027c0:	e000ed00 	.word	0xe000ed00

080027c4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80027c8:	4b04      	ldr	r3, [pc, #16]	; (80027dc <__NVIC_GetPriorityGrouping+0x18>)
 80027ca:	68db      	ldr	r3, [r3, #12]
 80027cc:	0a1b      	lsrs	r3, r3, #8
 80027ce:	f003 0307 	and.w	r3, r3, #7
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr
 80027dc:	e000ed00 	.word	0xe000ed00

080027e0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80027e0:	b480      	push	{r7}
 80027e2:	b083      	sub	sp, #12
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	4603      	mov	r3, r0
 80027e8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80027ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	db0b      	blt.n	800280a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80027f2:	79fb      	ldrb	r3, [r7, #7]
 80027f4:	f003 021f 	and.w	r2, r3, #31
 80027f8:	4907      	ldr	r1, [pc, #28]	; (8002818 <__NVIC_EnableIRQ+0x38>)
 80027fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80027fe:	095b      	lsrs	r3, r3, #5
 8002800:	2001      	movs	r0, #1
 8002802:	fa00 f202 	lsl.w	r2, r0, r2
 8002806:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800280a:	bf00      	nop
 800280c:	370c      	adds	r7, #12
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	e000e100 	.word	0xe000e100

0800281c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800281c:	b480      	push	{r7}
 800281e:	b083      	sub	sp, #12
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	6039      	str	r1, [r7, #0]
 8002826:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002828:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800282c:	2b00      	cmp	r3, #0
 800282e:	db0a      	blt.n	8002846 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	b2da      	uxtb	r2, r3
 8002834:	490c      	ldr	r1, [pc, #48]	; (8002868 <__NVIC_SetPriority+0x4c>)
 8002836:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800283a:	0112      	lsls	r2, r2, #4
 800283c:	b2d2      	uxtb	r2, r2
 800283e:	440b      	add	r3, r1
 8002840:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002844:	e00a      	b.n	800285c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	b2da      	uxtb	r2, r3
 800284a:	4908      	ldr	r1, [pc, #32]	; (800286c <__NVIC_SetPriority+0x50>)
 800284c:	79fb      	ldrb	r3, [r7, #7]
 800284e:	f003 030f 	and.w	r3, r3, #15
 8002852:	3b04      	subs	r3, #4
 8002854:	0112      	lsls	r2, r2, #4
 8002856:	b2d2      	uxtb	r2, r2
 8002858:	440b      	add	r3, r1
 800285a:	761a      	strb	r2, [r3, #24]
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr
 8002868:	e000e100 	.word	0xe000e100
 800286c:	e000ed00 	.word	0xe000ed00

08002870 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002870:	b480      	push	{r7}
 8002872:	b089      	sub	sp, #36	; 0x24
 8002874:	af00      	add	r7, sp, #0
 8002876:	60f8      	str	r0, [r7, #12]
 8002878:	60b9      	str	r1, [r7, #8]
 800287a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	f003 0307 	and.w	r3, r3, #7
 8002882:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002884:	69fb      	ldr	r3, [r7, #28]
 8002886:	f1c3 0307 	rsb	r3, r3, #7
 800288a:	2b04      	cmp	r3, #4
 800288c:	bf28      	it	cs
 800288e:	2304      	movcs	r3, #4
 8002890:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	3304      	adds	r3, #4
 8002896:	2b06      	cmp	r3, #6
 8002898:	d902      	bls.n	80028a0 <NVIC_EncodePriority+0x30>
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	3b03      	subs	r3, #3
 800289e:	e000      	b.n	80028a2 <NVIC_EncodePriority+0x32>
 80028a0:	2300      	movs	r3, #0
 80028a2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028a4:	f04f 32ff 	mov.w	r2, #4294967295
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	fa02 f303 	lsl.w	r3, r2, r3
 80028ae:	43da      	mvns	r2, r3
 80028b0:	68bb      	ldr	r3, [r7, #8]
 80028b2:	401a      	ands	r2, r3
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80028b8:	f04f 31ff 	mov.w	r1, #4294967295
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	fa01 f303 	lsl.w	r3, r1, r3
 80028c2:	43d9      	mvns	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80028c8:	4313      	orrs	r3, r2
         );
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3724      	adds	r7, #36	; 0x24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d4:	4770      	bx	lr
	...

080028d8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b082      	sub	sp, #8
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	3b01      	subs	r3, #1
 80028e4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80028e8:	d301      	bcc.n	80028ee <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80028ea:	2301      	movs	r3, #1
 80028ec:	e00f      	b.n	800290e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80028ee:	4a0a      	ldr	r2, [pc, #40]	; (8002918 <SysTick_Config+0x40>)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3b01      	subs	r3, #1
 80028f4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80028f6:	210f      	movs	r1, #15
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
 80028fc:	f7ff ff8e 	bl	800281c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002900:	4b05      	ldr	r3, [pc, #20]	; (8002918 <SysTick_Config+0x40>)
 8002902:	2200      	movs	r2, #0
 8002904:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002906:	4b04      	ldr	r3, [pc, #16]	; (8002918 <SysTick_Config+0x40>)
 8002908:	2207      	movs	r2, #7
 800290a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}
 8002916:	bf00      	nop
 8002918:	e000e010 	.word	0xe000e010

0800291c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800291c:	b580      	push	{r7, lr}
 800291e:	b082      	sub	sp, #8
 8002920:	af00      	add	r7, sp, #0
 8002922:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff29 	bl	800277c <__NVIC_SetPriorityGrouping>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002932:	b580      	push	{r7, lr}
 8002934:	b086      	sub	sp, #24
 8002936:	af00      	add	r7, sp, #0
 8002938:	4603      	mov	r3, r0
 800293a:	60b9      	str	r1, [r7, #8]
 800293c:	607a      	str	r2, [r7, #4]
 800293e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002940:	2300      	movs	r3, #0
 8002942:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002944:	f7ff ff3e 	bl	80027c4 <__NVIC_GetPriorityGrouping>
 8002948:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	68b9      	ldr	r1, [r7, #8]
 800294e:	6978      	ldr	r0, [r7, #20]
 8002950:	f7ff ff8e 	bl	8002870 <NVIC_EncodePriority>
 8002954:	4602      	mov	r2, r0
 8002956:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800295a:	4611      	mov	r1, r2
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff ff5d 	bl	800281c <__NVIC_SetPriority>
}
 8002962:	bf00      	nop
 8002964:	3718      	adds	r7, #24
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}

0800296a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b082      	sub	sp, #8
 800296e:	af00      	add	r7, sp, #0
 8002970:	4603      	mov	r3, r0
 8002972:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002974:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ff31 	bl	80027e0 <__NVIC_EnableIRQ>
}
 800297e:	bf00      	nop
 8002980:	3708      	adds	r7, #8
 8002982:	46bd      	mov	sp, r7
 8002984:	bd80      	pop	{r7, pc}

08002986 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002986:	b580      	push	{r7, lr}
 8002988:	b082      	sub	sp, #8
 800298a:	af00      	add	r7, sp, #0
 800298c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800298e:	6878      	ldr	r0, [r7, #4]
 8002990:	f7ff ffa2 	bl	80028d8 <SysTick_Config>
 8002994:	4603      	mov	r3, r0
}
 8002996:	4618      	mov	r0, r3
 8002998:	3708      	adds	r7, #8
 800299a:	46bd      	mov	sp, r7
 800299c:	bd80      	pop	{r7, pc}
	...

080029a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b089      	sub	sp, #36	; 0x24
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	6078      	str	r0, [r7, #4]
 80029a8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80029aa:	2300      	movs	r3, #0
 80029ac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80029ae:	2300      	movs	r3, #0
 80029b0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80029b2:	2300      	movs	r3, #0
 80029b4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80029b6:	2300      	movs	r3, #0
 80029b8:	61fb      	str	r3, [r7, #28]
 80029ba:	e16b      	b.n	8002c94 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80029bc:	2201      	movs	r2, #1
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	fa02 f303 	lsl.w	r3, r2, r3
 80029c4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	697a      	ldr	r2, [r7, #20]
 80029cc:	4013      	ands	r3, r2
 80029ce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	f040 815a 	bne.w	8002c8e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	f003 0303 	and.w	r3, r3, #3
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d005      	beq.n	80029f2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d130      	bne.n	8002a54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	689b      	ldr	r3, [r3, #8]
 80029f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	005b      	lsls	r3, r3, #1
 80029fc:	2203      	movs	r2, #3
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43db      	mvns	r3, r3
 8002a04:	69ba      	ldr	r2, [r7, #24]
 8002a06:	4013      	ands	r3, r2
 8002a08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	68da      	ldr	r2, [r3, #12]
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	fa02 f303 	lsl.w	r3, r2, r3
 8002a16:	69ba      	ldr	r2, [r7, #24]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	69ba      	ldr	r2, [r7, #24]
 8002a20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002a28:	2201      	movs	r2, #1
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a30:	43db      	mvns	r3, r3
 8002a32:	69ba      	ldr	r2, [r7, #24]
 8002a34:	4013      	ands	r3, r2
 8002a36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	685b      	ldr	r3, [r3, #4]
 8002a3c:	091b      	lsrs	r3, r3, #4
 8002a3e:	f003 0201 	and.w	r2, r3, #1
 8002a42:	69fb      	ldr	r3, [r7, #28]
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	69ba      	ldr	r2, [r7, #24]
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	69ba      	ldr	r2, [r7, #24]
 8002a52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	685b      	ldr	r3, [r3, #4]
 8002a58:	f003 0303 	and.w	r3, r3, #3
 8002a5c:	2b03      	cmp	r3, #3
 8002a5e:	d017      	beq.n	8002a90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002a66:	69fb      	ldr	r3, [r7, #28]
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	2203      	movs	r2, #3
 8002a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a70:	43db      	mvns	r3, r3
 8002a72:	69ba      	ldr	r2, [r7, #24]
 8002a74:	4013      	ands	r3, r2
 8002a76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	689a      	ldr	r2, [r3, #8]
 8002a7c:	69fb      	ldr	r3, [r7, #28]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	fa02 f303 	lsl.w	r3, r2, r3
 8002a84:	69ba      	ldr	r2, [r7, #24]
 8002a86:	4313      	orrs	r3, r2
 8002a88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a90:	683b      	ldr	r3, [r7, #0]
 8002a92:	685b      	ldr	r3, [r3, #4]
 8002a94:	f003 0303 	and.w	r3, r3, #3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d123      	bne.n	8002ae4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	08da      	lsrs	r2, r3, #3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	3208      	adds	r2, #8
 8002aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002aaa:	69fb      	ldr	r3, [r7, #28]
 8002aac:	f003 0307 	and.w	r3, r3, #7
 8002ab0:	009b      	lsls	r3, r3, #2
 8002ab2:	220f      	movs	r2, #15
 8002ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab8:	43db      	mvns	r3, r3
 8002aba:	69ba      	ldr	r2, [r7, #24]
 8002abc:	4013      	ands	r3, r2
 8002abe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	691a      	ldr	r2, [r3, #16]
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	f003 0307 	and.w	r3, r3, #7
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ad6:	69fb      	ldr	r3, [r7, #28]
 8002ad8:	08da      	lsrs	r2, r3, #3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	3208      	adds	r2, #8
 8002ade:	69b9      	ldr	r1, [r7, #24]
 8002ae0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002aea:	69fb      	ldr	r3, [r7, #28]
 8002aec:	005b      	lsls	r3, r3, #1
 8002aee:	2203      	movs	r2, #3
 8002af0:	fa02 f303 	lsl.w	r3, r2, r3
 8002af4:	43db      	mvns	r3, r3
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	4013      	ands	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	685b      	ldr	r3, [r3, #4]
 8002b00:	f003 0203 	and.w	r2, r3, #3
 8002b04:	69fb      	ldr	r3, [r7, #28]
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 80b4 	beq.w	8002c8e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
 8002b2a:	4b60      	ldr	r3, [pc, #384]	; (8002cac <HAL_GPIO_Init+0x30c>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b2e:	4a5f      	ldr	r2, [pc, #380]	; (8002cac <HAL_GPIO_Init+0x30c>)
 8002b30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b34:	6453      	str	r3, [r2, #68]	; 0x44
 8002b36:	4b5d      	ldr	r3, [pc, #372]	; (8002cac <HAL_GPIO_Init+0x30c>)
 8002b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b3e:	60fb      	str	r3, [r7, #12]
 8002b40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b42:	4a5b      	ldr	r2, [pc, #364]	; (8002cb0 <HAL_GPIO_Init+0x310>)
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	089b      	lsrs	r3, r3, #2
 8002b48:	3302      	adds	r3, #2
 8002b4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002b50:	69fb      	ldr	r3, [r7, #28]
 8002b52:	f003 0303 	and.w	r3, r3, #3
 8002b56:	009b      	lsls	r3, r3, #2
 8002b58:	220f      	movs	r2, #15
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43db      	mvns	r3, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4013      	ands	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	4a52      	ldr	r2, [pc, #328]	; (8002cb4 <HAL_GPIO_Init+0x314>)
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	d02b      	beq.n	8002bc6 <HAL_GPIO_Init+0x226>
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4a51      	ldr	r2, [pc, #324]	; (8002cb8 <HAL_GPIO_Init+0x318>)
 8002b72:	4293      	cmp	r3, r2
 8002b74:	d025      	beq.n	8002bc2 <HAL_GPIO_Init+0x222>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a50      	ldr	r2, [pc, #320]	; (8002cbc <HAL_GPIO_Init+0x31c>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d01f      	beq.n	8002bbe <HAL_GPIO_Init+0x21e>
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	4a4f      	ldr	r2, [pc, #316]	; (8002cc0 <HAL_GPIO_Init+0x320>)
 8002b82:	4293      	cmp	r3, r2
 8002b84:	d019      	beq.n	8002bba <HAL_GPIO_Init+0x21a>
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a4e      	ldr	r2, [pc, #312]	; (8002cc4 <HAL_GPIO_Init+0x324>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d013      	beq.n	8002bb6 <HAL_GPIO_Init+0x216>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	4a4d      	ldr	r2, [pc, #308]	; (8002cc8 <HAL_GPIO_Init+0x328>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d00d      	beq.n	8002bb2 <HAL_GPIO_Init+0x212>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a4c      	ldr	r2, [pc, #304]	; (8002ccc <HAL_GPIO_Init+0x32c>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d007      	beq.n	8002bae <HAL_GPIO_Init+0x20e>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a4b      	ldr	r2, [pc, #300]	; (8002cd0 <HAL_GPIO_Init+0x330>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d101      	bne.n	8002baa <HAL_GPIO_Init+0x20a>
 8002ba6:	2307      	movs	r3, #7
 8002ba8:	e00e      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
 8002baa:	2308      	movs	r3, #8
 8002bac:	e00c      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
 8002bae:	2306      	movs	r3, #6
 8002bb0:	e00a      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
 8002bb2:	2305      	movs	r3, #5
 8002bb4:	e008      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
 8002bb6:	2304      	movs	r3, #4
 8002bb8:	e006      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e004      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	e002      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
 8002bc2:	2301      	movs	r3, #1
 8002bc4:	e000      	b.n	8002bc8 <HAL_GPIO_Init+0x228>
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	69fa      	ldr	r2, [r7, #28]
 8002bca:	f002 0203 	and.w	r2, r2, #3
 8002bce:	0092      	lsls	r2, r2, #2
 8002bd0:	4093      	lsls	r3, r2
 8002bd2:	69ba      	ldr	r2, [r7, #24]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002bd8:	4935      	ldr	r1, [pc, #212]	; (8002cb0 <HAL_GPIO_Init+0x310>)
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	089b      	lsrs	r3, r3, #2
 8002bde:	3302      	adds	r3, #2
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002be6:	4b3b      	ldr	r3, [pc, #236]	; (8002cd4 <HAL_GPIO_Init+0x334>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002bec:	693b      	ldr	r3, [r7, #16]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d003      	beq.n	8002c0a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c02:	69ba      	ldr	r2, [r7, #24]
 8002c04:	693b      	ldr	r3, [r7, #16]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c0a:	4a32      	ldr	r2, [pc, #200]	; (8002cd4 <HAL_GPIO_Init+0x334>)
 8002c0c:	69bb      	ldr	r3, [r7, #24]
 8002c0e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c10:	4b30      	ldr	r3, [pc, #192]	; (8002cd4 <HAL_GPIO_Init+0x334>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	43db      	mvns	r3, r3
 8002c1a:	69ba      	ldr	r2, [r7, #24]
 8002c1c:	4013      	ands	r3, r2
 8002c1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c20:	683b      	ldr	r3, [r7, #0]
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d003      	beq.n	8002c34 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4313      	orrs	r3, r2
 8002c32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002c34:	4a27      	ldr	r2, [pc, #156]	; (8002cd4 <HAL_GPIO_Init+0x334>)
 8002c36:	69bb      	ldr	r3, [r7, #24]
 8002c38:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002c3a:	4b26      	ldr	r3, [pc, #152]	; (8002cd4 <HAL_GPIO_Init+0x334>)
 8002c3c:	685b      	ldr	r3, [r3, #4]
 8002c3e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d003      	beq.n	8002c5e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002c5e:	4a1d      	ldr	r2, [pc, #116]	; (8002cd4 <HAL_GPIO_Init+0x334>)
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002c64:	4b1b      	ldr	r3, [pc, #108]	; (8002cd4 <HAL_GPIO_Init+0x334>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c6a:	693b      	ldr	r3, [r7, #16]
 8002c6c:	43db      	mvns	r3, r3
 8002c6e:	69ba      	ldr	r2, [r7, #24]
 8002c70:	4013      	ands	r3, r2
 8002c72:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d003      	beq.n	8002c88 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	693b      	ldr	r3, [r7, #16]
 8002c84:	4313      	orrs	r3, r2
 8002c86:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002c88:	4a12      	ldr	r2, [pc, #72]	; (8002cd4 <HAL_GPIO_Init+0x334>)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c8e:	69fb      	ldr	r3, [r7, #28]
 8002c90:	3301      	adds	r3, #1
 8002c92:	61fb      	str	r3, [r7, #28]
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	2b0f      	cmp	r3, #15
 8002c98:	f67f ae90 	bls.w	80029bc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002c9c:	bf00      	nop
 8002c9e:	bf00      	nop
 8002ca0:	3724      	adds	r7, #36	; 0x24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	40023800 	.word	0x40023800
 8002cb0:	40013800 	.word	0x40013800
 8002cb4:	40020000 	.word	0x40020000
 8002cb8:	40020400 	.word	0x40020400
 8002cbc:	40020800 	.word	0x40020800
 8002cc0:	40020c00 	.word	0x40020c00
 8002cc4:	40021000 	.word	0x40021000
 8002cc8:	40021400 	.word	0x40021400
 8002ccc:	40021800 	.word	0x40021800
 8002cd0:	40021c00 	.word	0x40021c00
 8002cd4:	40013c00 	.word	0x40013c00

08002cd8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	807b      	strh	r3, [r7, #2]
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ce8:	787b      	ldrb	r3, [r7, #1]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d003      	beq.n	8002cf6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002cee:	887a      	ldrh	r2, [r7, #2]
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002cf4:	e003      	b.n	8002cfe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002cf6:	887b      	ldrh	r3, [r7, #2]
 8002cf8:	041a      	lsls	r2, r3, #16
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	619a      	str	r2, [r3, #24]
}
 8002cfe:	bf00      	nop
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8002d0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d0c:	b08f      	sub	sp, #60	; 0x3c
 8002d0e:	af0a      	add	r7, sp, #40	; 0x28
 8002d10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d101      	bne.n	8002d1c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002d18:	2301      	movs	r3, #1
 8002d1a:	e054      	b.n	8002dc6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d106      	bne.n	8002d3c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	2200      	movs	r2, #0
 8002d32:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f005 f964 	bl	8008004 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	2203      	movs	r2, #3
 8002d40:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d102      	bne.n	8002d56 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f003 f956 	bl	800600c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	603b      	str	r3, [r7, #0]
 8002d66:	687e      	ldr	r6, [r7, #4]
 8002d68:	466d      	mov	r5, sp
 8002d6a:	f106 0410 	add.w	r4, r6, #16
 8002d6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002d76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002d7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002d7e:	1d33      	adds	r3, r6, #4
 8002d80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002d82:	6838      	ldr	r0, [r7, #0]
 8002d84:	f003 f8d0 	bl	8005f28 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2101      	movs	r1, #1
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f003 f94d 	bl	800602e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	603b      	str	r3, [r7, #0]
 8002d9a:	687e      	ldr	r6, [r7, #4]
 8002d9c:	466d      	mov	r5, sp
 8002d9e:	f106 0410 	add.w	r4, r6, #16
 8002da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002da6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002da8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002daa:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002dae:	e885 0003 	stmia.w	r5, {r0, r1}
 8002db2:	1d33      	adds	r3, r6, #4
 8002db4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002db6:	6838      	ldr	r0, [r7, #0]
 8002db8:	f003 fad6 	bl	8006368 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3714      	adds	r7, #20
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002dce <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002dce:	b590      	push	{r4, r7, lr}
 8002dd0:	b089      	sub	sp, #36	; 0x24
 8002dd2:	af04      	add	r7, sp, #16
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	4608      	mov	r0, r1
 8002dd8:	4611      	mov	r1, r2
 8002dda:	461a      	mov	r2, r3
 8002ddc:	4603      	mov	r3, r0
 8002dde:	70fb      	strb	r3, [r7, #3]
 8002de0:	460b      	mov	r3, r1
 8002de2:	70bb      	strb	r3, [r7, #2]
 8002de4:	4613      	mov	r3, r2
 8002de6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d101      	bne.n	8002df6 <HAL_HCD_HC_Init+0x28>
 8002df2:	2302      	movs	r3, #2
 8002df4:	e076      	b.n	8002ee4 <HAL_HCD_HC_Init+0x116>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2201      	movs	r2, #1
 8002dfa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002dfe:	78fb      	ldrb	r3, [r7, #3]
 8002e00:	687a      	ldr	r2, [r7, #4]
 8002e02:	212c      	movs	r1, #44	; 0x2c
 8002e04:	fb01 f303 	mul.w	r3, r1, r3
 8002e08:	4413      	add	r3, r2
 8002e0a:	333d      	adds	r3, #61	; 0x3d
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002e10:	78fb      	ldrb	r3, [r7, #3]
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	212c      	movs	r1, #44	; 0x2c
 8002e16:	fb01 f303 	mul.w	r3, r1, r3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	3338      	adds	r3, #56	; 0x38
 8002e1e:	787a      	ldrb	r2, [r7, #1]
 8002e20:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	212c      	movs	r1, #44	; 0x2c
 8002e28:	fb01 f303 	mul.w	r3, r1, r3
 8002e2c:	4413      	add	r3, r2
 8002e2e:	3340      	adds	r3, #64	; 0x40
 8002e30:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002e32:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002e34:	78fb      	ldrb	r3, [r7, #3]
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3339      	adds	r3, #57	; 0x39
 8002e42:	78fa      	ldrb	r2, [r7, #3]
 8002e44:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002e46:	78fb      	ldrb	r3, [r7, #3]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	212c      	movs	r1, #44	; 0x2c
 8002e4c:	fb01 f303 	mul.w	r3, r1, r3
 8002e50:	4413      	add	r3, r2
 8002e52:	333f      	adds	r3, #63	; 0x3f
 8002e54:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002e58:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002e5a:	78fb      	ldrb	r3, [r7, #3]
 8002e5c:	78ba      	ldrb	r2, [r7, #2]
 8002e5e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002e62:	b2d0      	uxtb	r0, r2
 8002e64:	687a      	ldr	r2, [r7, #4]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	333a      	adds	r3, #58	; 0x3a
 8002e70:	4602      	mov	r2, r0
 8002e72:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002e74:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	da09      	bge.n	8002e90 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002e7c:	78fb      	ldrb	r3, [r7, #3]
 8002e7e:	687a      	ldr	r2, [r7, #4]
 8002e80:	212c      	movs	r1, #44	; 0x2c
 8002e82:	fb01 f303 	mul.w	r3, r1, r3
 8002e86:	4413      	add	r3, r2
 8002e88:	333b      	adds	r3, #59	; 0x3b
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	701a      	strb	r2, [r3, #0]
 8002e8e:	e008      	b.n	8002ea2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002e90:	78fb      	ldrb	r3, [r7, #3]
 8002e92:	687a      	ldr	r2, [r7, #4]
 8002e94:	212c      	movs	r1, #44	; 0x2c
 8002e96:	fb01 f303 	mul.w	r3, r1, r3
 8002e9a:	4413      	add	r3, r2
 8002e9c:	333b      	adds	r3, #59	; 0x3b
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002ea2:	78fb      	ldrb	r3, [r7, #3]
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	212c      	movs	r1, #44	; 0x2c
 8002ea8:	fb01 f303 	mul.w	r3, r1, r3
 8002eac:	4413      	add	r3, r2
 8002eae:	333c      	adds	r3, #60	; 0x3c
 8002eb0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002eb4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	787c      	ldrb	r4, [r7, #1]
 8002ebc:	78ba      	ldrb	r2, [r7, #2]
 8002ebe:	78f9      	ldrb	r1, [r7, #3]
 8002ec0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002ec2:	9302      	str	r3, [sp, #8]
 8002ec4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	4623      	mov	r3, r4
 8002ed2:	f003 fba5 	bl	8006620 <USB_HC_Init>
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2200      	movs	r2, #0
 8002ede:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	3714      	adds	r7, #20
 8002ee8:	46bd      	mov	sp, r7
 8002eea:	bd90      	pop	{r4, r7, pc}

08002eec <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b084      	sub	sp, #16
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002f02:	2b01      	cmp	r3, #1
 8002f04:	d101      	bne.n	8002f0a <HAL_HCD_HC_Halt+0x1e>
 8002f06:	2302      	movs	r3, #2
 8002f08:	e00f      	b.n	8002f2a <HAL_HCD_HC_Halt+0x3e>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	2201      	movs	r2, #1
 8002f0e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	78fa      	ldrb	r2, [r7, #3]
 8002f18:	4611      	mov	r1, r2
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f003 fdf5 	bl	8006b0a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2200      	movs	r2, #0
 8002f24:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002f28:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
	...

08002f34 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b082      	sub	sp, #8
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
 8002f3c:	4608      	mov	r0, r1
 8002f3e:	4611      	mov	r1, r2
 8002f40:	461a      	mov	r2, r3
 8002f42:	4603      	mov	r3, r0
 8002f44:	70fb      	strb	r3, [r7, #3]
 8002f46:	460b      	mov	r3, r1
 8002f48:	70bb      	strb	r3, [r7, #2]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002f4e:	78fb      	ldrb	r3, [r7, #3]
 8002f50:	687a      	ldr	r2, [r7, #4]
 8002f52:	212c      	movs	r1, #44	; 0x2c
 8002f54:	fb01 f303 	mul.w	r3, r1, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	333b      	adds	r3, #59	; 0x3b
 8002f5c:	78ba      	ldrb	r2, [r7, #2]
 8002f5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002f60:	78fb      	ldrb	r3, [r7, #3]
 8002f62:	687a      	ldr	r2, [r7, #4]
 8002f64:	212c      	movs	r1, #44	; 0x2c
 8002f66:	fb01 f303 	mul.w	r3, r1, r3
 8002f6a:	4413      	add	r3, r2
 8002f6c:	333f      	adds	r3, #63	; 0x3f
 8002f6e:	787a      	ldrb	r2, [r7, #1]
 8002f70:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002f72:	7c3b      	ldrb	r3, [r7, #16]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d112      	bne.n	8002f9e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002f78:	78fb      	ldrb	r3, [r7, #3]
 8002f7a:	687a      	ldr	r2, [r7, #4]
 8002f7c:	212c      	movs	r1, #44	; 0x2c
 8002f7e:	fb01 f303 	mul.w	r3, r1, r3
 8002f82:	4413      	add	r3, r2
 8002f84:	3342      	adds	r3, #66	; 0x42
 8002f86:	2203      	movs	r2, #3
 8002f88:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002f8a:	78fb      	ldrb	r3, [r7, #3]
 8002f8c:	687a      	ldr	r2, [r7, #4]
 8002f8e:	212c      	movs	r1, #44	; 0x2c
 8002f90:	fb01 f303 	mul.w	r3, r1, r3
 8002f94:	4413      	add	r3, r2
 8002f96:	333d      	adds	r3, #61	; 0x3d
 8002f98:	7f3a      	ldrb	r2, [r7, #28]
 8002f9a:	701a      	strb	r2, [r3, #0]
 8002f9c:	e008      	b.n	8002fb0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002f9e:	78fb      	ldrb	r3, [r7, #3]
 8002fa0:	687a      	ldr	r2, [r7, #4]
 8002fa2:	212c      	movs	r1, #44	; 0x2c
 8002fa4:	fb01 f303 	mul.w	r3, r1, r3
 8002fa8:	4413      	add	r3, r2
 8002faa:	3342      	adds	r3, #66	; 0x42
 8002fac:	2202      	movs	r2, #2
 8002fae:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002fb0:	787b      	ldrb	r3, [r7, #1]
 8002fb2:	2b03      	cmp	r3, #3
 8002fb4:	f200 80c6 	bhi.w	8003144 <HAL_HCD_HC_SubmitRequest+0x210>
 8002fb8:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbe:	bf00      	nop
 8002fc0:	08002fd1 	.word	0x08002fd1
 8002fc4:	08003131 	.word	0x08003131
 8002fc8:	08003035 	.word	0x08003035
 8002fcc:	080030b3 	.word	0x080030b3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002fd0:	7c3b      	ldrb	r3, [r7, #16]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	f040 80b8 	bne.w	8003148 <HAL_HCD_HC_SubmitRequest+0x214>
 8002fd8:	78bb      	ldrb	r3, [r7, #2]
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 80b4 	bne.w	8003148 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002fe0:	8b3b      	ldrh	r3, [r7, #24]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d108      	bne.n	8002ff8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002fe6:	78fb      	ldrb	r3, [r7, #3]
 8002fe8:	687a      	ldr	r2, [r7, #4]
 8002fea:	212c      	movs	r1, #44	; 0x2c
 8002fec:	fb01 f303 	mul.w	r3, r1, r3
 8002ff0:	4413      	add	r3, r2
 8002ff2:	3355      	adds	r3, #85	; 0x55
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002ff8:	78fb      	ldrb	r3, [r7, #3]
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	212c      	movs	r1, #44	; 0x2c
 8002ffe:	fb01 f303 	mul.w	r3, r1, r3
 8003002:	4413      	add	r3, r2
 8003004:	3355      	adds	r3, #85	; 0x55
 8003006:	781b      	ldrb	r3, [r3, #0]
 8003008:	2b00      	cmp	r3, #0
 800300a:	d109      	bne.n	8003020 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800300c:	78fb      	ldrb	r3, [r7, #3]
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	212c      	movs	r1, #44	; 0x2c
 8003012:	fb01 f303 	mul.w	r3, r1, r3
 8003016:	4413      	add	r3, r2
 8003018:	3342      	adds	r3, #66	; 0x42
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800301e:	e093      	b.n	8003148 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003020:	78fb      	ldrb	r3, [r7, #3]
 8003022:	687a      	ldr	r2, [r7, #4]
 8003024:	212c      	movs	r1, #44	; 0x2c
 8003026:	fb01 f303 	mul.w	r3, r1, r3
 800302a:	4413      	add	r3, r2
 800302c:	3342      	adds	r3, #66	; 0x42
 800302e:	2202      	movs	r2, #2
 8003030:	701a      	strb	r2, [r3, #0]
      break;
 8003032:	e089      	b.n	8003148 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003034:	78bb      	ldrb	r3, [r7, #2]
 8003036:	2b00      	cmp	r3, #0
 8003038:	d11d      	bne.n	8003076 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800303a:	78fb      	ldrb	r3, [r7, #3]
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	212c      	movs	r1, #44	; 0x2c
 8003040:	fb01 f303 	mul.w	r3, r1, r3
 8003044:	4413      	add	r3, r2
 8003046:	3355      	adds	r3, #85	; 0x55
 8003048:	781b      	ldrb	r3, [r3, #0]
 800304a:	2b00      	cmp	r3, #0
 800304c:	d109      	bne.n	8003062 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800304e:	78fb      	ldrb	r3, [r7, #3]
 8003050:	687a      	ldr	r2, [r7, #4]
 8003052:	212c      	movs	r1, #44	; 0x2c
 8003054:	fb01 f303 	mul.w	r3, r1, r3
 8003058:	4413      	add	r3, r2
 800305a:	3342      	adds	r3, #66	; 0x42
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003060:	e073      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	212c      	movs	r1, #44	; 0x2c
 8003068:	fb01 f303 	mul.w	r3, r1, r3
 800306c:	4413      	add	r3, r2
 800306e:	3342      	adds	r3, #66	; 0x42
 8003070:	2202      	movs	r2, #2
 8003072:	701a      	strb	r2, [r3, #0]
      break;
 8003074:	e069      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003076:	78fb      	ldrb	r3, [r7, #3]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3354      	adds	r3, #84	; 0x54
 8003084:	781b      	ldrb	r3, [r3, #0]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d109      	bne.n	800309e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800308a:	78fb      	ldrb	r3, [r7, #3]
 800308c:	687a      	ldr	r2, [r7, #4]
 800308e:	212c      	movs	r1, #44	; 0x2c
 8003090:	fb01 f303 	mul.w	r3, r1, r3
 8003094:	4413      	add	r3, r2
 8003096:	3342      	adds	r3, #66	; 0x42
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
      break;
 800309c:	e055      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800309e:	78fb      	ldrb	r3, [r7, #3]
 80030a0:	687a      	ldr	r2, [r7, #4]
 80030a2:	212c      	movs	r1, #44	; 0x2c
 80030a4:	fb01 f303 	mul.w	r3, r1, r3
 80030a8:	4413      	add	r3, r2
 80030aa:	3342      	adds	r3, #66	; 0x42
 80030ac:	2202      	movs	r2, #2
 80030ae:	701a      	strb	r2, [r3, #0]
      break;
 80030b0:	e04b      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80030b2:	78bb      	ldrb	r3, [r7, #2]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d11d      	bne.n	80030f4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80030b8:	78fb      	ldrb	r3, [r7, #3]
 80030ba:	687a      	ldr	r2, [r7, #4]
 80030bc:	212c      	movs	r1, #44	; 0x2c
 80030be:	fb01 f303 	mul.w	r3, r1, r3
 80030c2:	4413      	add	r3, r2
 80030c4:	3355      	adds	r3, #85	; 0x55
 80030c6:	781b      	ldrb	r3, [r3, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d109      	bne.n	80030e0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80030cc:	78fb      	ldrb	r3, [r7, #3]
 80030ce:	687a      	ldr	r2, [r7, #4]
 80030d0:	212c      	movs	r1, #44	; 0x2c
 80030d2:	fb01 f303 	mul.w	r3, r1, r3
 80030d6:	4413      	add	r3, r2
 80030d8:	3342      	adds	r3, #66	; 0x42
 80030da:	2200      	movs	r2, #0
 80030dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80030de:	e034      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	212c      	movs	r1, #44	; 0x2c
 80030e6:	fb01 f303 	mul.w	r3, r1, r3
 80030ea:	4413      	add	r3, r2
 80030ec:	3342      	adds	r3, #66	; 0x42
 80030ee:	2202      	movs	r2, #2
 80030f0:	701a      	strb	r2, [r3, #0]
      break;
 80030f2:	e02a      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80030f4:	78fb      	ldrb	r3, [r7, #3]
 80030f6:	687a      	ldr	r2, [r7, #4]
 80030f8:	212c      	movs	r1, #44	; 0x2c
 80030fa:	fb01 f303 	mul.w	r3, r1, r3
 80030fe:	4413      	add	r3, r2
 8003100:	3354      	adds	r3, #84	; 0x54
 8003102:	781b      	ldrb	r3, [r3, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d109      	bne.n	800311c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003108:	78fb      	ldrb	r3, [r7, #3]
 800310a:	687a      	ldr	r2, [r7, #4]
 800310c:	212c      	movs	r1, #44	; 0x2c
 800310e:	fb01 f303 	mul.w	r3, r1, r3
 8003112:	4413      	add	r3, r2
 8003114:	3342      	adds	r3, #66	; 0x42
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
      break;
 800311a:	e016      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800311c:	78fb      	ldrb	r3, [r7, #3]
 800311e:	687a      	ldr	r2, [r7, #4]
 8003120:	212c      	movs	r1, #44	; 0x2c
 8003122:	fb01 f303 	mul.w	r3, r1, r3
 8003126:	4413      	add	r3, r2
 8003128:	3342      	adds	r3, #66	; 0x42
 800312a:	2202      	movs	r2, #2
 800312c:	701a      	strb	r2, [r3, #0]
      break;
 800312e:	e00c      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003130:	78fb      	ldrb	r3, [r7, #3]
 8003132:	687a      	ldr	r2, [r7, #4]
 8003134:	212c      	movs	r1, #44	; 0x2c
 8003136:	fb01 f303 	mul.w	r3, r1, r3
 800313a:	4413      	add	r3, r2
 800313c:	3342      	adds	r3, #66	; 0x42
 800313e:	2200      	movs	r2, #0
 8003140:	701a      	strb	r2, [r3, #0]
      break;
 8003142:	e002      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003144:	bf00      	nop
 8003146:	e000      	b.n	800314a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003148:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800314a:	78fb      	ldrb	r3, [r7, #3]
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	212c      	movs	r1, #44	; 0x2c
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	3344      	adds	r3, #68	; 0x44
 8003158:	697a      	ldr	r2, [r7, #20]
 800315a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800315c:	78fb      	ldrb	r3, [r7, #3]
 800315e:	8b3a      	ldrh	r2, [r7, #24]
 8003160:	6879      	ldr	r1, [r7, #4]
 8003162:	202c      	movs	r0, #44	; 0x2c
 8003164:	fb00 f303 	mul.w	r3, r0, r3
 8003168:	440b      	add	r3, r1
 800316a:	334c      	adds	r3, #76	; 0x4c
 800316c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800316e:	78fb      	ldrb	r3, [r7, #3]
 8003170:	687a      	ldr	r2, [r7, #4]
 8003172:	212c      	movs	r1, #44	; 0x2c
 8003174:	fb01 f303 	mul.w	r3, r1, r3
 8003178:	4413      	add	r3, r2
 800317a:	3360      	adds	r3, #96	; 0x60
 800317c:	2200      	movs	r2, #0
 800317e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003180:	78fb      	ldrb	r3, [r7, #3]
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	212c      	movs	r1, #44	; 0x2c
 8003186:	fb01 f303 	mul.w	r3, r1, r3
 800318a:	4413      	add	r3, r2
 800318c:	3350      	adds	r3, #80	; 0x50
 800318e:	2200      	movs	r2, #0
 8003190:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003192:	78fb      	ldrb	r3, [r7, #3]
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	212c      	movs	r1, #44	; 0x2c
 8003198:	fb01 f303 	mul.w	r3, r1, r3
 800319c:	4413      	add	r3, r2
 800319e:	3339      	adds	r3, #57	; 0x39
 80031a0:	78fa      	ldrb	r2, [r7, #3]
 80031a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80031a4:	78fb      	ldrb	r3, [r7, #3]
 80031a6:	687a      	ldr	r2, [r7, #4]
 80031a8:	212c      	movs	r1, #44	; 0x2c
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	3361      	adds	r3, #97	; 0x61
 80031b2:	2200      	movs	r2, #0
 80031b4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6818      	ldr	r0, [r3, #0]
 80031ba:	78fb      	ldrb	r3, [r7, #3]
 80031bc:	222c      	movs	r2, #44	; 0x2c
 80031be:	fb02 f303 	mul.w	r3, r2, r3
 80031c2:	3338      	adds	r3, #56	; 0x38
 80031c4:	687a      	ldr	r2, [r7, #4]
 80031c6:	18d1      	adds	r1, r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	691b      	ldr	r3, [r3, #16]
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	461a      	mov	r2, r3
 80031d0:	f003 fb48 	bl	8006864 <USB_HC_StartXfer>
 80031d4:	4603      	mov	r3, r0
}
 80031d6:	4618      	mov	r0, r3
 80031d8:	3708      	adds	r7, #8
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}
 80031de:	bf00      	nop

080031e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b086      	sub	sp, #24
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031ee:	693b      	ldr	r3, [r7, #16]
 80031f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f003 f873 	bl	80062e2 <USB_GetMode>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b01      	cmp	r3, #1
 8003200:	f040 80f6 	bne.w	80033f0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f003 f857 	bl	80062bc <USB_ReadInterrupts>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	f000 80ec 	beq.w	80033ee <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4618      	mov	r0, r3
 800321c:	f003 f84e 	bl	80062bc <USB_ReadInterrupts>
 8003220:	4603      	mov	r3, r0
 8003222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003226:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800322a:	d104      	bne.n	8003236 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003234:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	4618      	mov	r0, r3
 800323c:	f003 f83e 	bl	80062bc <USB_ReadInterrupts>
 8003240:	4603      	mov	r3, r0
 8003242:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003246:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800324a:	d104      	bne.n	8003256 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003254:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	4618      	mov	r0, r3
 800325c:	f003 f82e 	bl	80062bc <USB_ReadInterrupts>
 8003260:	4603      	mov	r3, r0
 8003262:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003266:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800326a:	d104      	bne.n	8003276 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003274:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f003 f81e 	bl	80062bc <USB_ReadInterrupts>
 8003280:	4603      	mov	r3, r0
 8003282:	f003 0302 	and.w	r3, r3, #2
 8003286:	2b02      	cmp	r3, #2
 8003288:	d103      	bne.n	8003292 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2202      	movs	r2, #2
 8003290:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	4618      	mov	r0, r3
 8003298:	f003 f810 	bl	80062bc <USB_ReadInterrupts>
 800329c:	4603      	mov	r3, r0
 800329e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032a6:	d11c      	bne.n	80032e2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80032b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10f      	bne.n	80032e2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80032c2:	2110      	movs	r1, #16
 80032c4:	6938      	ldr	r0, [r7, #16]
 80032c6:	f002 feff 	bl	80060c8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80032ca:	6938      	ldr	r0, [r7, #16]
 80032cc:	f002 ff30 	bl	8006130 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2101      	movs	r1, #1
 80032d6:	4618      	mov	r0, r3
 80032d8:	f003 f906 	bl	80064e8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80032dc:	6878      	ldr	r0, [r7, #4]
 80032de:	f004 ff0f 	bl	8008100 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f002 ffe8 	bl	80062bc <USB_ReadInterrupts>
 80032ec:	4603      	mov	r3, r0
 80032ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80032f6:	d102      	bne.n	80032fe <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f001 f882 	bl	8004402 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4618      	mov	r0, r3
 8003304:	f002 ffda 	bl	80062bc <USB_ReadInterrupts>
 8003308:	4603      	mov	r3, r0
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b08      	cmp	r3, #8
 8003310:	d106      	bne.n	8003320 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f004 fed8 	bl	80080c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	2208      	movs	r2, #8
 800331e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4618      	mov	r0, r3
 8003326:	f002 ffc9 	bl	80062bc <USB_ReadInterrupts>
 800332a:	4603      	mov	r3, r0
 800332c:	f003 0310 	and.w	r3, r3, #16
 8003330:	2b10      	cmp	r3, #16
 8003332:	d101      	bne.n	8003338 <HAL_HCD_IRQHandler+0x158>
 8003334:	2301      	movs	r3, #1
 8003336:	e000      	b.n	800333a <HAL_HCD_IRQHandler+0x15a>
 8003338:	2300      	movs	r3, #0
 800333a:	2b00      	cmp	r3, #0
 800333c:	d012      	beq.n	8003364 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	699a      	ldr	r2, [r3, #24]
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0210 	bic.w	r2, r2, #16
 800334c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800334e:	6878      	ldr	r0, [r7, #4]
 8003350:	f000 ff85 	bl	800425e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	699a      	ldr	r2, [r3, #24]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f042 0210 	orr.w	r2, r2, #16
 8003362:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f002 ffa7 	bl	80062bc <USB_ReadInterrupts>
 800336e:	4603      	mov	r3, r0
 8003370:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003374:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003378:	d13a      	bne.n	80033f0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f003 fbb2 	bl	8006ae8 <USB_HC_ReadInterrupt>
 8003384:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
 800338a:	e025      	b.n	80033d8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	f003 030f 	and.w	r3, r3, #15
 8003392:	68ba      	ldr	r2, [r7, #8]
 8003394:	fa22 f303 	lsr.w	r3, r2, r3
 8003398:	f003 0301 	and.w	r3, r3, #1
 800339c:	2b00      	cmp	r3, #0
 800339e:	d018      	beq.n	80033d2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	015a      	lsls	r2, r3, #5
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	4413      	add	r3, r2
 80033a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033b6:	d106      	bne.n	80033c6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	4619      	mov	r1, r3
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 f88f 	bl	80034e2 <HCD_HC_IN_IRQHandler>
 80033c4:	e005      	b.n	80033d2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	4619      	mov	r1, r3
 80033cc:	6878      	ldr	r0, [r7, #4]
 80033ce:	f000 fbdd 	bl	8003b8c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80033d2:	697b      	ldr	r3, [r7, #20]
 80033d4:	3301      	adds	r3, #1
 80033d6:	617b      	str	r3, [r7, #20]
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	697a      	ldr	r2, [r7, #20]
 80033de:	429a      	cmp	r2, r3
 80033e0:	d3d4      	bcc.n	800338c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80033ea:	615a      	str	r2, [r3, #20]
 80033ec:	e000      	b.n	80033f0 <HAL_HCD_IRQHandler+0x210>
      return;
 80033ee:	bf00      	nop
    }
  }
}
 80033f0:	3718      	adds	r7, #24
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003404:	2b01      	cmp	r3, #1
 8003406:	d101      	bne.n	800340c <HAL_HCD_Start+0x16>
 8003408:	2302      	movs	r3, #2
 800340a:	e013      	b.n	8003434 <HAL_HCD_Start+0x3e>
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	2101      	movs	r1, #1
 800341a:	4618      	mov	r0, r3
 800341c:	f003 f89e 	bl	800655c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4618      	mov	r0, r3
 8003426:	f002 fde0 	bl	8005fea <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	2200      	movs	r2, #0
 800342e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3708      	adds	r7, #8
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800343c:	b580      	push	{r7, lr}
 800343e:	b082      	sub	sp, #8
 8003440:	af00      	add	r7, sp, #0
 8003442:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800344a:	2b01      	cmp	r3, #1
 800344c:	d101      	bne.n	8003452 <HAL_HCD_Stop+0x16>
 800344e:	2302      	movs	r3, #2
 8003450:	e00d      	b.n	800346e <HAL_HCD_Stop+0x32>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2201      	movs	r2, #1
 8003456:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	4618      	mov	r0, r3
 8003460:	f003 fc8c 	bl	8006d7c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2200      	movs	r2, #0
 8003468:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3708      	adds	r7, #8
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}

08003476 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003476:	b480      	push	{r7}
 8003478:	b083      	sub	sp, #12
 800347a:	af00      	add	r7, sp, #0
 800347c:	6078      	str	r0, [r7, #4]
 800347e:	460b      	mov	r3, r1
 8003480:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003482:	78fb      	ldrb	r3, [r7, #3]
 8003484:	687a      	ldr	r2, [r7, #4]
 8003486:	212c      	movs	r1, #44	; 0x2c
 8003488:	fb01 f303 	mul.w	r3, r1, r3
 800348c:	4413      	add	r3, r2
 800348e:	3360      	adds	r3, #96	; 0x60
 8003490:	781b      	ldrb	r3, [r3, #0]
}
 8003492:	4618      	mov	r0, r3
 8003494:	370c      	adds	r7, #12
 8003496:	46bd      	mov	sp, r7
 8003498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800349c:	4770      	bx	lr

0800349e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800349e:	b480      	push	{r7}
 80034a0:	b083      	sub	sp, #12
 80034a2:	af00      	add	r7, sp, #0
 80034a4:	6078      	str	r0, [r7, #4]
 80034a6:	460b      	mov	r3, r1
 80034a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80034aa:	78fb      	ldrb	r3, [r7, #3]
 80034ac:	687a      	ldr	r2, [r7, #4]
 80034ae:	212c      	movs	r1, #44	; 0x2c
 80034b0:	fb01 f303 	mul.w	r3, r1, r3
 80034b4:	4413      	add	r3, r2
 80034b6:	3350      	adds	r3, #80	; 0x50
 80034b8:	681b      	ldr	r3, [r3, #0]
}
 80034ba:	4618      	mov	r0, r3
 80034bc:	370c      	adds	r7, #12
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr

080034c6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80034c6:	b580      	push	{r7, lr}
 80034c8:	b082      	sub	sp, #8
 80034ca:	af00      	add	r7, sp, #0
 80034cc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f003 f892 	bl	80065fc <USB_GetCurrentFrame>
 80034d8:	4603      	mov	r3, r0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b086      	sub	sp, #24
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
 80034ea:	460b      	mov	r3, r1
 80034ec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034f4:	697b      	ldr	r3, [r7, #20]
 80034f6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80034f8:	78fb      	ldrb	r3, [r7, #3]
 80034fa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	015a      	lsls	r2, r3, #5
 8003500:	693b      	ldr	r3, [r7, #16]
 8003502:	4413      	add	r3, r2
 8003504:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	f003 0304 	and.w	r3, r3, #4
 800350e:	2b04      	cmp	r3, #4
 8003510:	d11a      	bne.n	8003548 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	015a      	lsls	r2, r3, #5
 8003516:	693b      	ldr	r3, [r7, #16]
 8003518:	4413      	add	r3, r2
 800351a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800351e:	461a      	mov	r2, r3
 8003520:	2304      	movs	r3, #4
 8003522:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003524:	687a      	ldr	r2, [r7, #4]
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	212c      	movs	r1, #44	; 0x2c
 800352a:	fb01 f303 	mul.w	r3, r1, r3
 800352e:	4413      	add	r3, r2
 8003530:	3361      	adds	r3, #97	; 0x61
 8003532:	2206      	movs	r2, #6
 8003534:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	68fa      	ldr	r2, [r7, #12]
 800353c:	b2d2      	uxtb	r2, r2
 800353e:	4611      	mov	r1, r2
 8003540:	4618      	mov	r0, r3
 8003542:	f003 fae2 	bl	8006b0a <USB_HC_Halt>
 8003546:	e0af      	b.n	80036a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	015a      	lsls	r2, r3, #5
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	4413      	add	r3, r2
 8003550:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800355e:	d11b      	bne.n	8003598 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	015a      	lsls	r2, r3, #5
 8003564:	693b      	ldr	r3, [r7, #16]
 8003566:	4413      	add	r3, r2
 8003568:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800356c:	461a      	mov	r2, r3
 800356e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003572:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	212c      	movs	r1, #44	; 0x2c
 800357a:	fb01 f303 	mul.w	r3, r1, r3
 800357e:	4413      	add	r3, r2
 8003580:	3361      	adds	r3, #97	; 0x61
 8003582:	2207      	movs	r2, #7
 8003584:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	b2d2      	uxtb	r2, r2
 800358e:	4611      	mov	r1, r2
 8003590:	4618      	mov	r0, r3
 8003592:	f003 faba 	bl	8006b0a <USB_HC_Halt>
 8003596:	e087      	b.n	80036a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	015a      	lsls	r2, r3, #5
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	4413      	add	r3, r2
 80035a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f003 0320 	and.w	r3, r3, #32
 80035aa:	2b20      	cmp	r3, #32
 80035ac:	d109      	bne.n	80035c2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	015a      	lsls	r2, r3, #5
 80035b2:	693b      	ldr	r3, [r7, #16]
 80035b4:	4413      	add	r3, r2
 80035b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ba:	461a      	mov	r2, r3
 80035bc:	2320      	movs	r3, #32
 80035be:	6093      	str	r3, [r2, #8]
 80035c0:	e072      	b.n	80036a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	015a      	lsls	r2, r3, #5
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	4413      	add	r3, r2
 80035ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035ce:	689b      	ldr	r3, [r3, #8]
 80035d0:	f003 0308 	and.w	r3, r3, #8
 80035d4:	2b08      	cmp	r3, #8
 80035d6:	d11a      	bne.n	800360e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	015a      	lsls	r2, r3, #5
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	4413      	add	r3, r2
 80035e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80035e4:	461a      	mov	r2, r3
 80035e6:	2308      	movs	r3, #8
 80035e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	212c      	movs	r1, #44	; 0x2c
 80035f0:	fb01 f303 	mul.w	r3, r1, r3
 80035f4:	4413      	add	r3, r2
 80035f6:	3361      	adds	r3, #97	; 0x61
 80035f8:	2205      	movs	r2, #5
 80035fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68fa      	ldr	r2, [r7, #12]
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	4611      	mov	r1, r2
 8003606:	4618      	mov	r0, r3
 8003608:	f003 fa7f 	bl	8006b0a <USB_HC_Halt>
 800360c:	e04c      	b.n	80036a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	015a      	lsls	r2, r3, #5
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	4413      	add	r3, r2
 8003616:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800361a:	689b      	ldr	r3, [r3, #8]
 800361c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003620:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003624:	d11b      	bne.n	800365e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	015a      	lsls	r2, r3, #5
 800362a:	693b      	ldr	r3, [r7, #16]
 800362c:	4413      	add	r3, r2
 800362e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003632:	461a      	mov	r2, r3
 8003634:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003638:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800363a:	687a      	ldr	r2, [r7, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	212c      	movs	r1, #44	; 0x2c
 8003640:	fb01 f303 	mul.w	r3, r1, r3
 8003644:	4413      	add	r3, r2
 8003646:	3361      	adds	r3, #97	; 0x61
 8003648:	2208      	movs	r2, #8
 800364a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	b2d2      	uxtb	r2, r2
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f003 fa57 	bl	8006b0a <USB_HC_Halt>
 800365c:	e024      	b.n	80036a8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	015a      	lsls	r2, r3, #5
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	4413      	add	r3, r2
 8003666:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003670:	2b80      	cmp	r3, #128	; 0x80
 8003672:	d119      	bne.n	80036a8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003680:	461a      	mov	r2, r3
 8003682:	2380      	movs	r3, #128	; 0x80
 8003684:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	212c      	movs	r1, #44	; 0x2c
 800368c:	fb01 f303 	mul.w	r3, r1, r3
 8003690:	4413      	add	r3, r2
 8003692:	3361      	adds	r3, #97	; 0x61
 8003694:	2206      	movs	r2, #6
 8003696:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68fa      	ldr	r2, [r7, #12]
 800369e:	b2d2      	uxtb	r2, r2
 80036a0:	4611      	mov	r1, r2
 80036a2:	4618      	mov	r0, r3
 80036a4:	f003 fa31 	bl	8006b0a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	015a      	lsls	r2, r3, #5
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	4413      	add	r3, r2
 80036b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036b4:	689b      	ldr	r3, [r3, #8]
 80036b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80036be:	d112      	bne.n	80036e6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	68fa      	ldr	r2, [r7, #12]
 80036c6:	b2d2      	uxtb	r2, r2
 80036c8:	4611      	mov	r1, r2
 80036ca:	4618      	mov	r0, r3
 80036cc:	f003 fa1d 	bl	8006b0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	015a      	lsls	r2, r3, #5
 80036d4:	693b      	ldr	r3, [r7, #16]
 80036d6:	4413      	add	r3, r2
 80036d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036dc:	461a      	mov	r2, r3
 80036de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80036e2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80036e4:	e24e      	b.n	8003b84 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	015a      	lsls	r2, r3, #5
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	4413      	add	r3, r2
 80036ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	f040 80df 	bne.w	80038bc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d019      	beq.n	800373a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	212c      	movs	r1, #44	; 0x2c
 800370c:	fb01 f303 	mul.w	r3, r1, r3
 8003710:	4413      	add	r3, r2
 8003712:	3348      	adds	r3, #72	; 0x48
 8003714:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	0159      	lsls	r1, r3, #5
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	440b      	add	r3, r1
 800371e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003722:	691b      	ldr	r3, [r3, #16]
 8003724:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003728:	1ad2      	subs	r2, r2, r3
 800372a:	6879      	ldr	r1, [r7, #4]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	202c      	movs	r0, #44	; 0x2c
 8003730:	fb00 f303 	mul.w	r3, r0, r3
 8003734:	440b      	add	r3, r1
 8003736:	3350      	adds	r3, #80	; 0x50
 8003738:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	212c      	movs	r1, #44	; 0x2c
 8003740:	fb01 f303 	mul.w	r3, r1, r3
 8003744:	4413      	add	r3, r2
 8003746:	3361      	adds	r3, #97	; 0x61
 8003748:	2201      	movs	r2, #1
 800374a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800374c:	687a      	ldr	r2, [r7, #4]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	212c      	movs	r1, #44	; 0x2c
 8003752:	fb01 f303 	mul.w	r3, r1, r3
 8003756:	4413      	add	r3, r2
 8003758:	335c      	adds	r3, #92	; 0x5c
 800375a:	2200      	movs	r2, #0
 800375c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	015a      	lsls	r2, r3, #5
 8003762:	693b      	ldr	r3, [r7, #16]
 8003764:	4413      	add	r3, r2
 8003766:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800376a:	461a      	mov	r2, r3
 800376c:	2301      	movs	r3, #1
 800376e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	212c      	movs	r1, #44	; 0x2c
 8003776:	fb01 f303 	mul.w	r3, r1, r3
 800377a:	4413      	add	r3, r2
 800377c:	333f      	adds	r3, #63	; 0x3f
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d009      	beq.n	8003798 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	212c      	movs	r1, #44	; 0x2c
 800378a:	fb01 f303 	mul.w	r3, r1, r3
 800378e:	4413      	add	r3, r2
 8003790:	333f      	adds	r3, #63	; 0x3f
 8003792:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003794:	2b02      	cmp	r3, #2
 8003796:	d111      	bne.n	80037bc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68fa      	ldr	r2, [r7, #12]
 800379e:	b2d2      	uxtb	r2, r2
 80037a0:	4611      	mov	r1, r2
 80037a2:	4618      	mov	r0, r3
 80037a4:	f003 f9b1 	bl	8006b0a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	015a      	lsls	r2, r3, #5
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4413      	add	r3, r2
 80037b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037b4:	461a      	mov	r2, r3
 80037b6:	2310      	movs	r3, #16
 80037b8:	6093      	str	r3, [r2, #8]
 80037ba:	e03a      	b.n	8003832 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80037bc:	687a      	ldr	r2, [r7, #4]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	212c      	movs	r1, #44	; 0x2c
 80037c2:	fb01 f303 	mul.w	r3, r1, r3
 80037c6:	4413      	add	r3, r2
 80037c8:	333f      	adds	r3, #63	; 0x3f
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b03      	cmp	r3, #3
 80037ce:	d009      	beq.n	80037e4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	212c      	movs	r1, #44	; 0x2c
 80037d6:	fb01 f303 	mul.w	r3, r1, r3
 80037da:	4413      	add	r3, r2
 80037dc:	333f      	adds	r3, #63	; 0x3f
 80037de:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80037e0:	2b01      	cmp	r3, #1
 80037e2:	d126      	bne.n	8003832 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	015a      	lsls	r2, r3, #5
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	4413      	add	r3, r2
 80037ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	68fa      	ldr	r2, [r7, #12]
 80037f4:	0151      	lsls	r1, r2, #5
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	440a      	add	r2, r1
 80037fa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80037fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003802:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	212c      	movs	r1, #44	; 0x2c
 800380a:	fb01 f303 	mul.w	r3, r1, r3
 800380e:	4413      	add	r3, r2
 8003810:	3360      	adds	r3, #96	; 0x60
 8003812:	2201      	movs	r2, #1
 8003814:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	b2d9      	uxtb	r1, r3
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	202c      	movs	r0, #44	; 0x2c
 8003820:	fb00 f303 	mul.w	r3, r0, r3
 8003824:	4413      	add	r3, r2
 8003826:	3360      	adds	r3, #96	; 0x60
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	461a      	mov	r2, r3
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f004 fc75 	bl	800811c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	2b01      	cmp	r3, #1
 8003838:	d12b      	bne.n	8003892 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	212c      	movs	r1, #44	; 0x2c
 8003840:	fb01 f303 	mul.w	r3, r1, r3
 8003844:	4413      	add	r3, r2
 8003846:	3348      	adds	r3, #72	; 0x48
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6879      	ldr	r1, [r7, #4]
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	202c      	movs	r0, #44	; 0x2c
 8003850:	fb00 f202 	mul.w	r2, r0, r2
 8003854:	440a      	add	r2, r1
 8003856:	3240      	adds	r2, #64	; 0x40
 8003858:	8812      	ldrh	r2, [r2, #0]
 800385a:	fbb3 f3f2 	udiv	r3, r3, r2
 800385e:	f003 0301 	and.w	r3, r3, #1
 8003862:	2b00      	cmp	r3, #0
 8003864:	f000 818e 	beq.w	8003b84 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003868:	687a      	ldr	r2, [r7, #4]
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	212c      	movs	r1, #44	; 0x2c
 800386e:	fb01 f303 	mul.w	r3, r1, r3
 8003872:	4413      	add	r3, r2
 8003874:	3354      	adds	r3, #84	; 0x54
 8003876:	781b      	ldrb	r3, [r3, #0]
 8003878:	f083 0301 	eor.w	r3, r3, #1
 800387c:	b2d8      	uxtb	r0, r3
 800387e:	687a      	ldr	r2, [r7, #4]
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	212c      	movs	r1, #44	; 0x2c
 8003884:	fb01 f303 	mul.w	r3, r1, r3
 8003888:	4413      	add	r3, r2
 800388a:	3354      	adds	r3, #84	; 0x54
 800388c:	4602      	mov	r2, r0
 800388e:	701a      	strb	r2, [r3, #0]
}
 8003890:	e178      	b.n	8003b84 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003892:	687a      	ldr	r2, [r7, #4]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	212c      	movs	r1, #44	; 0x2c
 8003898:	fb01 f303 	mul.w	r3, r1, r3
 800389c:	4413      	add	r3, r2
 800389e:	3354      	adds	r3, #84	; 0x54
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	f083 0301 	eor.w	r3, r3, #1
 80038a6:	b2d8      	uxtb	r0, r3
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	212c      	movs	r1, #44	; 0x2c
 80038ae:	fb01 f303 	mul.w	r3, r1, r3
 80038b2:	4413      	add	r3, r2
 80038b4:	3354      	adds	r3, #84	; 0x54
 80038b6:	4602      	mov	r2, r0
 80038b8:	701a      	strb	r2, [r3, #0]
}
 80038ba:	e163      	b.n	8003b84 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	693b      	ldr	r3, [r7, #16]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	f003 0302 	and.w	r3, r3, #2
 80038ce:	2b02      	cmp	r3, #2
 80038d0:	f040 80f6 	bne.w	8003ac0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80038d4:	687a      	ldr	r2, [r7, #4]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	212c      	movs	r1, #44	; 0x2c
 80038da:	fb01 f303 	mul.w	r3, r1, r3
 80038de:	4413      	add	r3, r2
 80038e0:	3361      	adds	r3, #97	; 0x61
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d109      	bne.n	80038fc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80038e8:	687a      	ldr	r2, [r7, #4]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	212c      	movs	r1, #44	; 0x2c
 80038ee:	fb01 f303 	mul.w	r3, r1, r3
 80038f2:	4413      	add	r3, r2
 80038f4:	3360      	adds	r3, #96	; 0x60
 80038f6:	2201      	movs	r2, #1
 80038f8:	701a      	strb	r2, [r3, #0]
 80038fa:	e0c9      	b.n	8003a90 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	212c      	movs	r1, #44	; 0x2c
 8003902:	fb01 f303 	mul.w	r3, r1, r3
 8003906:	4413      	add	r3, r2
 8003908:	3361      	adds	r3, #97	; 0x61
 800390a:	781b      	ldrb	r3, [r3, #0]
 800390c:	2b05      	cmp	r3, #5
 800390e:	d109      	bne.n	8003924 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	212c      	movs	r1, #44	; 0x2c
 8003916:	fb01 f303 	mul.w	r3, r1, r3
 800391a:	4413      	add	r3, r2
 800391c:	3360      	adds	r3, #96	; 0x60
 800391e:	2205      	movs	r2, #5
 8003920:	701a      	strb	r2, [r3, #0]
 8003922:	e0b5      	b.n	8003a90 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	212c      	movs	r1, #44	; 0x2c
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	3361      	adds	r3, #97	; 0x61
 8003932:	781b      	ldrb	r3, [r3, #0]
 8003934:	2b06      	cmp	r3, #6
 8003936:	d009      	beq.n	800394c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	212c      	movs	r1, #44	; 0x2c
 800393e:	fb01 f303 	mul.w	r3, r1, r3
 8003942:	4413      	add	r3, r2
 8003944:	3361      	adds	r3, #97	; 0x61
 8003946:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003948:	2b08      	cmp	r3, #8
 800394a:	d150      	bne.n	80039ee <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800394c:	687a      	ldr	r2, [r7, #4]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	212c      	movs	r1, #44	; 0x2c
 8003952:	fb01 f303 	mul.w	r3, r1, r3
 8003956:	4413      	add	r3, r2
 8003958:	335c      	adds	r3, #92	; 0x5c
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	1c5a      	adds	r2, r3, #1
 800395e:	6879      	ldr	r1, [r7, #4]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	202c      	movs	r0, #44	; 0x2c
 8003964:	fb00 f303 	mul.w	r3, r0, r3
 8003968:	440b      	add	r3, r1
 800396a:	335c      	adds	r3, #92	; 0x5c
 800396c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800396e:	687a      	ldr	r2, [r7, #4]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	212c      	movs	r1, #44	; 0x2c
 8003974:	fb01 f303 	mul.w	r3, r1, r3
 8003978:	4413      	add	r3, r2
 800397a:	335c      	adds	r3, #92	; 0x5c
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d912      	bls.n	80039a8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003982:	687a      	ldr	r2, [r7, #4]
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	212c      	movs	r1, #44	; 0x2c
 8003988:	fb01 f303 	mul.w	r3, r1, r3
 800398c:	4413      	add	r3, r2
 800398e:	335c      	adds	r3, #92	; 0x5c
 8003990:	2200      	movs	r2, #0
 8003992:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	212c      	movs	r1, #44	; 0x2c
 800399a:	fb01 f303 	mul.w	r3, r1, r3
 800399e:	4413      	add	r3, r2
 80039a0:	3360      	adds	r3, #96	; 0x60
 80039a2:	2204      	movs	r2, #4
 80039a4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039a6:	e073      	b.n	8003a90 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80039a8:	687a      	ldr	r2, [r7, #4]
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	212c      	movs	r1, #44	; 0x2c
 80039ae:	fb01 f303 	mul.w	r3, r1, r3
 80039b2:	4413      	add	r3, r2
 80039b4:	3360      	adds	r3, #96	; 0x60
 80039b6:	2202      	movs	r2, #2
 80039b8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	015a      	lsls	r2, r3, #5
 80039be:	693b      	ldr	r3, [r7, #16]
 80039c0:	4413      	add	r3, r2
 80039c2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80039d0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80039d8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	015a      	lsls	r2, r3, #5
 80039de:	693b      	ldr	r3, [r7, #16]
 80039e0:	4413      	add	r3, r2
 80039e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e6:	461a      	mov	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80039ec:	e050      	b.n	8003a90 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80039ee:	687a      	ldr	r2, [r7, #4]
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	212c      	movs	r1, #44	; 0x2c
 80039f4:	fb01 f303 	mul.w	r3, r1, r3
 80039f8:	4413      	add	r3, r2
 80039fa:	3361      	adds	r3, #97	; 0x61
 80039fc:	781b      	ldrb	r3, [r3, #0]
 80039fe:	2b03      	cmp	r3, #3
 8003a00:	d122      	bne.n	8003a48 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003a02:	687a      	ldr	r2, [r7, #4]
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	212c      	movs	r1, #44	; 0x2c
 8003a08:	fb01 f303 	mul.w	r3, r1, r3
 8003a0c:	4413      	add	r3, r2
 8003a0e:	3360      	adds	r3, #96	; 0x60
 8003a10:	2202      	movs	r2, #2
 8003a12:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	015a      	lsls	r2, r3, #5
 8003a18:	693b      	ldr	r3, [r7, #16]
 8003a1a:	4413      	add	r3, r2
 8003a1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003a2a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003a32:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	015a      	lsls	r2, r3, #5
 8003a38:	693b      	ldr	r3, [r7, #16]
 8003a3a:	4413      	add	r3, r2
 8003a3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a40:	461a      	mov	r2, r3
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e023      	b.n	8003a90 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003a48:	687a      	ldr	r2, [r7, #4]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	212c      	movs	r1, #44	; 0x2c
 8003a4e:	fb01 f303 	mul.w	r3, r1, r3
 8003a52:	4413      	add	r3, r2
 8003a54:	3361      	adds	r3, #97	; 0x61
 8003a56:	781b      	ldrb	r3, [r3, #0]
 8003a58:	2b07      	cmp	r3, #7
 8003a5a:	d119      	bne.n	8003a90 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003a5c:	687a      	ldr	r2, [r7, #4]
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	212c      	movs	r1, #44	; 0x2c
 8003a62:	fb01 f303 	mul.w	r3, r1, r3
 8003a66:	4413      	add	r3, r2
 8003a68:	335c      	adds	r3, #92	; 0x5c
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	1c5a      	adds	r2, r3, #1
 8003a6e:	6879      	ldr	r1, [r7, #4]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	202c      	movs	r0, #44	; 0x2c
 8003a74:	fb00 f303 	mul.w	r3, r0, r3
 8003a78:	440b      	add	r3, r1
 8003a7a:	335c      	adds	r3, #92	; 0x5c
 8003a7c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	212c      	movs	r1, #44	; 0x2c
 8003a84:	fb01 f303 	mul.w	r3, r1, r3
 8003a88:	4413      	add	r3, r2
 8003a8a:	3360      	adds	r3, #96	; 0x60
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	015a      	lsls	r2, r3, #5
 8003a94:	693b      	ldr	r3, [r7, #16]
 8003a96:	4413      	add	r3, r2
 8003a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	2302      	movs	r3, #2
 8003aa0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	b2d9      	uxtb	r1, r3
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	202c      	movs	r0, #44	; 0x2c
 8003aac:	fb00 f303 	mul.w	r3, r0, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	3360      	adds	r3, #96	; 0x60
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f004 fb2f 	bl	800811c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003abe:	e061      	b.n	8003b84 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	015a      	lsls	r2, r3, #5
 8003ac4:	693b      	ldr	r3, [r7, #16]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f003 0310 	and.w	r3, r3, #16
 8003ad2:	2b10      	cmp	r3, #16
 8003ad4:	d156      	bne.n	8003b84 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003ad6:	687a      	ldr	r2, [r7, #4]
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	212c      	movs	r1, #44	; 0x2c
 8003adc:	fb01 f303 	mul.w	r3, r1, r3
 8003ae0:	4413      	add	r3, r2
 8003ae2:	333f      	adds	r3, #63	; 0x3f
 8003ae4:	781b      	ldrb	r3, [r3, #0]
 8003ae6:	2b03      	cmp	r3, #3
 8003ae8:	d111      	bne.n	8003b0e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	212c      	movs	r1, #44	; 0x2c
 8003af0:	fb01 f303 	mul.w	r3, r1, r3
 8003af4:	4413      	add	r3, r2
 8003af6:	335c      	adds	r3, #92	; 0x5c
 8003af8:	2200      	movs	r2, #0
 8003afa:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	b2d2      	uxtb	r2, r2
 8003b04:	4611      	mov	r1, r2
 8003b06:	4618      	mov	r0, r3
 8003b08:	f002 ffff 	bl	8006b0a <USB_HC_Halt>
 8003b0c:	e031      	b.n	8003b72 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	212c      	movs	r1, #44	; 0x2c
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	333f      	adds	r3, #63	; 0x3f
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d009      	beq.n	8003b36 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b22:	687a      	ldr	r2, [r7, #4]
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	212c      	movs	r1, #44	; 0x2c
 8003b28:	fb01 f303 	mul.w	r3, r1, r3
 8003b2c:	4413      	add	r3, r2
 8003b2e:	333f      	adds	r3, #63	; 0x3f
 8003b30:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b32:	2b02      	cmp	r3, #2
 8003b34:	d11d      	bne.n	8003b72 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003b36:	687a      	ldr	r2, [r7, #4]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	212c      	movs	r1, #44	; 0x2c
 8003b3c:	fb01 f303 	mul.w	r3, r1, r3
 8003b40:	4413      	add	r3, r2
 8003b42:	335c      	adds	r3, #92	; 0x5c
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	691b      	ldr	r3, [r3, #16]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d110      	bne.n	8003b72 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003b50:	687a      	ldr	r2, [r7, #4]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	212c      	movs	r1, #44	; 0x2c
 8003b56:	fb01 f303 	mul.w	r3, r1, r3
 8003b5a:	4413      	add	r3, r2
 8003b5c:	3361      	adds	r3, #97	; 0x61
 8003b5e:	2203      	movs	r2, #3
 8003b60:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	b2d2      	uxtb	r2, r2
 8003b6a:	4611      	mov	r1, r2
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f002 ffcc 	bl	8006b0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	015a      	lsls	r2, r3, #5
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4413      	add	r3, r2
 8003b7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b7e:	461a      	mov	r2, r3
 8003b80:	2310      	movs	r3, #16
 8003b82:	6093      	str	r3, [r2, #8]
}
 8003b84:	bf00      	nop
 8003b86:	3718      	adds	r7, #24
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}

08003b8c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b088      	sub	sp, #32
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	460b      	mov	r3, r1
 8003b96:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b9e:	69fb      	ldr	r3, [r7, #28]
 8003ba0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003ba2:	78fb      	ldrb	r3, [r7, #3]
 8003ba4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003ba6:	697b      	ldr	r3, [r7, #20]
 8003ba8:	015a      	lsls	r2, r3, #5
 8003baa:	69bb      	ldr	r3, [r7, #24]
 8003bac:	4413      	add	r3, r2
 8003bae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 0304 	and.w	r3, r3, #4
 8003bb8:	2b04      	cmp	r3, #4
 8003bba:	d11a      	bne.n	8003bf2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2304      	movs	r3, #4
 8003bcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003bce:	687a      	ldr	r2, [r7, #4]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	212c      	movs	r1, #44	; 0x2c
 8003bd4:	fb01 f303 	mul.w	r3, r1, r3
 8003bd8:	4413      	add	r3, r2
 8003bda:	3361      	adds	r3, #97	; 0x61
 8003bdc:	2206      	movs	r2, #6
 8003bde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	697a      	ldr	r2, [r7, #20]
 8003be6:	b2d2      	uxtb	r2, r2
 8003be8:	4611      	mov	r1, r2
 8003bea:	4618      	mov	r0, r3
 8003bec:	f002 ff8d 	bl	8006b0a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003bf0:	e331      	b.n	8004256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bfe:	689b      	ldr	r3, [r3, #8]
 8003c00:	f003 0320 	and.w	r3, r3, #32
 8003c04:	2b20      	cmp	r3, #32
 8003c06:	d12e      	bne.n	8003c66 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	69bb      	ldr	r3, [r7, #24]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c14:	461a      	mov	r2, r3
 8003c16:	2320      	movs	r3, #32
 8003c18:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	212c      	movs	r1, #44	; 0x2c
 8003c20:	fb01 f303 	mul.w	r3, r1, r3
 8003c24:	4413      	add	r3, r2
 8003c26:	333d      	adds	r3, #61	; 0x3d
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	f040 8313 	bne.w	8004256 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003c30:	687a      	ldr	r2, [r7, #4]
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	212c      	movs	r1, #44	; 0x2c
 8003c36:	fb01 f303 	mul.w	r3, r1, r3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	333d      	adds	r3, #61	; 0x3d
 8003c3e:	2200      	movs	r2, #0
 8003c40:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003c42:	687a      	ldr	r2, [r7, #4]
 8003c44:	697b      	ldr	r3, [r7, #20]
 8003c46:	212c      	movs	r1, #44	; 0x2c
 8003c48:	fb01 f303 	mul.w	r3, r1, r3
 8003c4c:	4413      	add	r3, r2
 8003c4e:	3360      	adds	r3, #96	; 0x60
 8003c50:	2202      	movs	r2, #2
 8003c52:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	b2d2      	uxtb	r2, r2
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f002 ff53 	bl	8006b0a <USB_HC_Halt>
}
 8003c64:	e2f7      	b.n	8004256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	015a      	lsls	r2, r3, #5
 8003c6a:	69bb      	ldr	r3, [r7, #24]
 8003c6c:	4413      	add	r3, r2
 8003c6e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c72:	689b      	ldr	r3, [r3, #8]
 8003c74:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c7c:	d112      	bne.n	8003ca4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003c7e:	697b      	ldr	r3, [r7, #20]
 8003c80:	015a      	lsls	r2, r3, #5
 8003c82:	69bb      	ldr	r3, [r7, #24]
 8003c84:	4413      	add	r3, r2
 8003c86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003c90:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	b2d2      	uxtb	r2, r2
 8003c9a:	4611      	mov	r1, r2
 8003c9c:	4618      	mov	r0, r3
 8003c9e:	f002 ff34 	bl	8006b0a <USB_HC_Halt>
}
 8003ca2:	e2d8      	b.n	8004256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	015a      	lsls	r2, r3, #5
 8003ca8:	69bb      	ldr	r3, [r7, #24]
 8003caa:	4413      	add	r3, r2
 8003cac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d140      	bne.n	8003d3c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003cba:	687a      	ldr	r2, [r7, #4]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	212c      	movs	r1, #44	; 0x2c
 8003cc0:	fb01 f303 	mul.w	r3, r1, r3
 8003cc4:	4413      	add	r3, r2
 8003cc6:	335c      	adds	r3, #92	; 0x5c
 8003cc8:	2200      	movs	r2, #0
 8003cca:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	015a      	lsls	r2, r3, #5
 8003cd0:	69bb      	ldr	r3, [r7, #24]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cde:	2b40      	cmp	r3, #64	; 0x40
 8003ce0:	d111      	bne.n	8003d06 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003ce2:	687a      	ldr	r2, [r7, #4]
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	212c      	movs	r1, #44	; 0x2c
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	4413      	add	r3, r2
 8003cee:	333d      	adds	r3, #61	; 0x3d
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	015a      	lsls	r2, r3, #5
 8003cf8:	69bb      	ldr	r3, [r7, #24]
 8003cfa:	4413      	add	r3, r2
 8003cfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d00:	461a      	mov	r2, r3
 8003d02:	2340      	movs	r3, #64	; 0x40
 8003d04:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003d06:	697b      	ldr	r3, [r7, #20]
 8003d08:	015a      	lsls	r2, r3, #5
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	4413      	add	r3, r2
 8003d0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d12:	461a      	mov	r2, r3
 8003d14:	2301      	movs	r3, #1
 8003d16:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003d18:	687a      	ldr	r2, [r7, #4]
 8003d1a:	697b      	ldr	r3, [r7, #20]
 8003d1c:	212c      	movs	r1, #44	; 0x2c
 8003d1e:	fb01 f303 	mul.w	r3, r1, r3
 8003d22:	4413      	add	r3, r2
 8003d24:	3361      	adds	r3, #97	; 0x61
 8003d26:	2201      	movs	r2, #1
 8003d28:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	697a      	ldr	r2, [r7, #20]
 8003d30:	b2d2      	uxtb	r2, r2
 8003d32:	4611      	mov	r1, r2
 8003d34:	4618      	mov	r0, r3
 8003d36:	f002 fee8 	bl	8006b0a <USB_HC_Halt>
}
 8003d3a:	e28c      	b.n	8004256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8003d3c:	697b      	ldr	r3, [r7, #20]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d4e:	2b40      	cmp	r3, #64	; 0x40
 8003d50:	d12c      	bne.n	8003dac <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8003d52:	687a      	ldr	r2, [r7, #4]
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	212c      	movs	r1, #44	; 0x2c
 8003d58:	fb01 f303 	mul.w	r3, r1, r3
 8003d5c:	4413      	add	r3, r2
 8003d5e:	3361      	adds	r3, #97	; 0x61
 8003d60:	2204      	movs	r2, #4
 8003d62:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8003d64:	687a      	ldr	r2, [r7, #4]
 8003d66:	697b      	ldr	r3, [r7, #20]
 8003d68:	212c      	movs	r1, #44	; 0x2c
 8003d6a:	fb01 f303 	mul.w	r3, r1, r3
 8003d6e:	4413      	add	r3, r2
 8003d70:	333d      	adds	r3, #61	; 0x3d
 8003d72:	2201      	movs	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003d76:	687a      	ldr	r2, [r7, #4]
 8003d78:	697b      	ldr	r3, [r7, #20]
 8003d7a:	212c      	movs	r1, #44	; 0x2c
 8003d7c:	fb01 f303 	mul.w	r3, r1, r3
 8003d80:	4413      	add	r3, r2
 8003d82:	335c      	adds	r3, #92	; 0x5c
 8003d84:	2200      	movs	r2, #0
 8003d86:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	697a      	ldr	r2, [r7, #20]
 8003d8e:	b2d2      	uxtb	r2, r2
 8003d90:	4611      	mov	r1, r2
 8003d92:	4618      	mov	r0, r3
 8003d94:	f002 feb9 	bl	8006b0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003d98:	697b      	ldr	r3, [r7, #20]
 8003d9a:	015a      	lsls	r2, r3, #5
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	4413      	add	r3, r2
 8003da0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003da4:	461a      	mov	r2, r3
 8003da6:	2340      	movs	r3, #64	; 0x40
 8003da8:	6093      	str	r3, [r2, #8]
}
 8003daa:	e254      	b.n	8004256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	015a      	lsls	r2, r3, #5
 8003db0:	69bb      	ldr	r3, [r7, #24]
 8003db2:	4413      	add	r3, r2
 8003db4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003db8:	689b      	ldr	r3, [r3, #8]
 8003dba:	f003 0308 	and.w	r3, r3, #8
 8003dbe:	2b08      	cmp	r3, #8
 8003dc0:	d11a      	bne.n	8003df8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	015a      	lsls	r2, r3, #5
 8003dc6:	69bb      	ldr	r3, [r7, #24]
 8003dc8:	4413      	add	r3, r2
 8003dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dce:	461a      	mov	r2, r3
 8003dd0:	2308      	movs	r3, #8
 8003dd2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	212c      	movs	r1, #44	; 0x2c
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	3361      	adds	r3, #97	; 0x61
 8003de2:	2205      	movs	r2, #5
 8003de4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	697a      	ldr	r2, [r7, #20]
 8003dec:	b2d2      	uxtb	r2, r2
 8003dee:	4611      	mov	r1, r2
 8003df0:	4618      	mov	r0, r3
 8003df2:	f002 fe8a 	bl	8006b0a <USB_HC_Halt>
}
 8003df6:	e22e      	b.n	8004256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003df8:	697b      	ldr	r3, [r7, #20]
 8003dfa:	015a      	lsls	r2, r3, #5
 8003dfc:	69bb      	ldr	r3, [r7, #24]
 8003dfe:	4413      	add	r3, r2
 8003e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e04:	689b      	ldr	r3, [r3, #8]
 8003e06:	f003 0310 	and.w	r3, r3, #16
 8003e0a:	2b10      	cmp	r3, #16
 8003e0c:	d140      	bne.n	8003e90 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003e0e:	687a      	ldr	r2, [r7, #4]
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	212c      	movs	r1, #44	; 0x2c
 8003e14:	fb01 f303 	mul.w	r3, r1, r3
 8003e18:	4413      	add	r3, r2
 8003e1a:	335c      	adds	r3, #92	; 0x5c
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003e20:	687a      	ldr	r2, [r7, #4]
 8003e22:	697b      	ldr	r3, [r7, #20]
 8003e24:	212c      	movs	r1, #44	; 0x2c
 8003e26:	fb01 f303 	mul.w	r3, r1, r3
 8003e2a:	4413      	add	r3, r2
 8003e2c:	3361      	adds	r3, #97	; 0x61
 8003e2e:	2203      	movs	r2, #3
 8003e30:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	212c      	movs	r1, #44	; 0x2c
 8003e38:	fb01 f303 	mul.w	r3, r1, r3
 8003e3c:	4413      	add	r3, r2
 8003e3e:	333d      	adds	r3, #61	; 0x3d
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d112      	bne.n	8003e6c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003e46:	687a      	ldr	r2, [r7, #4]
 8003e48:	697b      	ldr	r3, [r7, #20]
 8003e4a:	212c      	movs	r1, #44	; 0x2c
 8003e4c:	fb01 f303 	mul.w	r3, r1, r3
 8003e50:	4413      	add	r3, r2
 8003e52:	333c      	adds	r3, #60	; 0x3c
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d108      	bne.n	8003e6c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003e5a:	687a      	ldr	r2, [r7, #4]
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	212c      	movs	r1, #44	; 0x2c
 8003e60:	fb01 f303 	mul.w	r3, r1, r3
 8003e64:	4413      	add	r3, r2
 8003e66:	333d      	adds	r3, #61	; 0x3d
 8003e68:	2201      	movs	r2, #1
 8003e6a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	697a      	ldr	r2, [r7, #20]
 8003e72:	b2d2      	uxtb	r2, r2
 8003e74:	4611      	mov	r1, r2
 8003e76:	4618      	mov	r0, r3
 8003e78:	f002 fe47 	bl	8006b0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003e7c:	697b      	ldr	r3, [r7, #20]
 8003e7e:	015a      	lsls	r2, r3, #5
 8003e80:	69bb      	ldr	r3, [r7, #24]
 8003e82:	4413      	add	r3, r2
 8003e84:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e88:	461a      	mov	r2, r3
 8003e8a:	2310      	movs	r3, #16
 8003e8c:	6093      	str	r3, [r2, #8]
}
 8003e8e:	e1e2      	b.n	8004256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003e90:	697b      	ldr	r3, [r7, #20]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	69bb      	ldr	r3, [r7, #24]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ea2:	2b80      	cmp	r3, #128	; 0x80
 8003ea4:	d164      	bne.n	8003f70 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	691b      	ldr	r3, [r3, #16]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d111      	bne.n	8003ed2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003eae:	687a      	ldr	r2, [r7, #4]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	212c      	movs	r1, #44	; 0x2c
 8003eb4:	fb01 f303 	mul.w	r3, r1, r3
 8003eb8:	4413      	add	r3, r2
 8003eba:	3361      	adds	r3, #97	; 0x61
 8003ebc:	2206      	movs	r2, #6
 8003ebe:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	4611      	mov	r1, r2
 8003eca:	4618      	mov	r0, r3
 8003ecc:	f002 fe1d 	bl	8006b0a <USB_HC_Halt>
 8003ed0:	e044      	b.n	8003f5c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003ed2:	687a      	ldr	r2, [r7, #4]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	212c      	movs	r1, #44	; 0x2c
 8003ed8:	fb01 f303 	mul.w	r3, r1, r3
 8003edc:	4413      	add	r3, r2
 8003ede:	335c      	adds	r3, #92	; 0x5c
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	6879      	ldr	r1, [r7, #4]
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	202c      	movs	r0, #44	; 0x2c
 8003eea:	fb00 f303 	mul.w	r3, r0, r3
 8003eee:	440b      	add	r3, r1
 8003ef0:	335c      	adds	r3, #92	; 0x5c
 8003ef2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003ef4:	687a      	ldr	r2, [r7, #4]
 8003ef6:	697b      	ldr	r3, [r7, #20]
 8003ef8:	212c      	movs	r1, #44	; 0x2c
 8003efa:	fb01 f303 	mul.w	r3, r1, r3
 8003efe:	4413      	add	r3, r2
 8003f00:	335c      	adds	r3, #92	; 0x5c
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	2b02      	cmp	r3, #2
 8003f06:	d920      	bls.n	8003f4a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003f08:	687a      	ldr	r2, [r7, #4]
 8003f0a:	697b      	ldr	r3, [r7, #20]
 8003f0c:	212c      	movs	r1, #44	; 0x2c
 8003f0e:	fb01 f303 	mul.w	r3, r1, r3
 8003f12:	4413      	add	r3, r2
 8003f14:	335c      	adds	r3, #92	; 0x5c
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003f1a:	687a      	ldr	r2, [r7, #4]
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	212c      	movs	r1, #44	; 0x2c
 8003f20:	fb01 f303 	mul.w	r3, r1, r3
 8003f24:	4413      	add	r3, r2
 8003f26:	3360      	adds	r3, #96	; 0x60
 8003f28:	2204      	movs	r2, #4
 8003f2a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003f2c:	697b      	ldr	r3, [r7, #20]
 8003f2e:	b2d9      	uxtb	r1, r3
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	202c      	movs	r0, #44	; 0x2c
 8003f36:	fb00 f303 	mul.w	r3, r0, r3
 8003f3a:	4413      	add	r3, r2
 8003f3c:	3360      	adds	r3, #96	; 0x60
 8003f3e:	781b      	ldrb	r3, [r3, #0]
 8003f40:	461a      	mov	r2, r3
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f004 f8ea 	bl	800811c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f48:	e008      	b.n	8003f5c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	697b      	ldr	r3, [r7, #20]
 8003f4e:	212c      	movs	r1, #44	; 0x2c
 8003f50:	fb01 f303 	mul.w	r3, r1, r3
 8003f54:	4413      	add	r3, r2
 8003f56:	3360      	adds	r3, #96	; 0x60
 8003f58:	2202      	movs	r2, #2
 8003f5a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003f5c:	697b      	ldr	r3, [r7, #20]
 8003f5e:	015a      	lsls	r2, r3, #5
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	4413      	add	r3, r2
 8003f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f68:	461a      	mov	r2, r3
 8003f6a:	2380      	movs	r3, #128	; 0x80
 8003f6c:	6093      	str	r3, [r2, #8]
}
 8003f6e:	e172      	b.n	8004256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003f70:	697b      	ldr	r3, [r7, #20]
 8003f72:	015a      	lsls	r2, r3, #5
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	4413      	add	r3, r2
 8003f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f82:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f86:	d11b      	bne.n	8003fc0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	697b      	ldr	r3, [r7, #20]
 8003f8c:	212c      	movs	r1, #44	; 0x2c
 8003f8e:	fb01 f303 	mul.w	r3, r1, r3
 8003f92:	4413      	add	r3, r2
 8003f94:	3361      	adds	r3, #97	; 0x61
 8003f96:	2208      	movs	r2, #8
 8003f98:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	697a      	ldr	r2, [r7, #20]
 8003fa0:	b2d2      	uxtb	r2, r2
 8003fa2:	4611      	mov	r1, r2
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	f002 fdb0 	bl	8006b0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	015a      	lsls	r2, r3, #5
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	4413      	add	r3, r2
 8003fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fbc:	6093      	str	r3, [r2, #8]
}
 8003fbe:	e14a      	b.n	8004256 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	015a      	lsls	r2, r3, #5
 8003fc4:	69bb      	ldr	r3, [r7, #24]
 8003fc6:	4413      	add	r3, r2
 8003fc8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	f003 0302 	and.w	r3, r3, #2
 8003fd2:	2b02      	cmp	r3, #2
 8003fd4:	f040 813f 	bne.w	8004256 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	212c      	movs	r1, #44	; 0x2c
 8003fde:	fb01 f303 	mul.w	r3, r1, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	3361      	adds	r3, #97	; 0x61
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	2b01      	cmp	r3, #1
 8003fea:	d17d      	bne.n	80040e8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	212c      	movs	r1, #44	; 0x2c
 8003ff2:	fb01 f303 	mul.w	r3, r1, r3
 8003ff6:	4413      	add	r3, r2
 8003ff8:	3360      	adds	r3, #96	; 0x60
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003ffe:	687a      	ldr	r2, [r7, #4]
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	212c      	movs	r1, #44	; 0x2c
 8004004:	fb01 f303 	mul.w	r3, r1, r3
 8004008:	4413      	add	r3, r2
 800400a:	333f      	adds	r3, #63	; 0x3f
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	2b02      	cmp	r3, #2
 8004010:	d00a      	beq.n	8004028 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004012:	687a      	ldr	r2, [r7, #4]
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	212c      	movs	r1, #44	; 0x2c
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	4413      	add	r3, r2
 800401e:	333f      	adds	r3, #63	; 0x3f
 8004020:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004022:	2b03      	cmp	r3, #3
 8004024:	f040 8100 	bne.w	8004228 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d113      	bne.n	8004058 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	212c      	movs	r1, #44	; 0x2c
 8004036:	fb01 f303 	mul.w	r3, r1, r3
 800403a:	4413      	add	r3, r2
 800403c:	3355      	adds	r3, #85	; 0x55
 800403e:	781b      	ldrb	r3, [r3, #0]
 8004040:	f083 0301 	eor.w	r3, r3, #1
 8004044:	b2d8      	uxtb	r0, r3
 8004046:	687a      	ldr	r2, [r7, #4]
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	212c      	movs	r1, #44	; 0x2c
 800404c:	fb01 f303 	mul.w	r3, r1, r3
 8004050:	4413      	add	r3, r2
 8004052:	3355      	adds	r3, #85	; 0x55
 8004054:	4602      	mov	r2, r0
 8004056:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	691b      	ldr	r3, [r3, #16]
 800405c:	2b01      	cmp	r3, #1
 800405e:	f040 80e3 	bne.w	8004228 <HCD_HC_OUT_IRQHandler+0x69c>
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	212c      	movs	r1, #44	; 0x2c
 8004068:	fb01 f303 	mul.w	r3, r1, r3
 800406c:	4413      	add	r3, r2
 800406e:	334c      	adds	r3, #76	; 0x4c
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	f000 80d8 	beq.w	8004228 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	212c      	movs	r1, #44	; 0x2c
 800407e:	fb01 f303 	mul.w	r3, r1, r3
 8004082:	4413      	add	r3, r2
 8004084:	334c      	adds	r3, #76	; 0x4c
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	202c      	movs	r0, #44	; 0x2c
 800408e:	fb00 f202 	mul.w	r2, r0, r2
 8004092:	440a      	add	r2, r1
 8004094:	3240      	adds	r2, #64	; 0x40
 8004096:	8812      	ldrh	r2, [r2, #0]
 8004098:	4413      	add	r3, r2
 800409a:	3b01      	subs	r3, #1
 800409c:	6879      	ldr	r1, [r7, #4]
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	202c      	movs	r0, #44	; 0x2c
 80040a2:	fb00 f202 	mul.w	r2, r0, r2
 80040a6:	440a      	add	r2, r1
 80040a8:	3240      	adds	r2, #64	; 0x40
 80040aa:	8812      	ldrh	r2, [r2, #0]
 80040ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80040b0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 0301 	and.w	r3, r3, #1
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 80b5 	beq.w	8004228 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	697b      	ldr	r3, [r7, #20]
 80040c2:	212c      	movs	r1, #44	; 0x2c
 80040c4:	fb01 f303 	mul.w	r3, r1, r3
 80040c8:	4413      	add	r3, r2
 80040ca:	3355      	adds	r3, #85	; 0x55
 80040cc:	781b      	ldrb	r3, [r3, #0]
 80040ce:	f083 0301 	eor.w	r3, r3, #1
 80040d2:	b2d8      	uxtb	r0, r3
 80040d4:	687a      	ldr	r2, [r7, #4]
 80040d6:	697b      	ldr	r3, [r7, #20]
 80040d8:	212c      	movs	r1, #44	; 0x2c
 80040da:	fb01 f303 	mul.w	r3, r1, r3
 80040de:	4413      	add	r3, r2
 80040e0:	3355      	adds	r3, #85	; 0x55
 80040e2:	4602      	mov	r2, r0
 80040e4:	701a      	strb	r2, [r3, #0]
 80040e6:	e09f      	b.n	8004228 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80040e8:	687a      	ldr	r2, [r7, #4]
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	212c      	movs	r1, #44	; 0x2c
 80040ee:	fb01 f303 	mul.w	r3, r1, r3
 80040f2:	4413      	add	r3, r2
 80040f4:	3361      	adds	r3, #97	; 0x61
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	2b03      	cmp	r3, #3
 80040fa:	d109      	bne.n	8004110 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80040fc:	687a      	ldr	r2, [r7, #4]
 80040fe:	697b      	ldr	r3, [r7, #20]
 8004100:	212c      	movs	r1, #44	; 0x2c
 8004102:	fb01 f303 	mul.w	r3, r1, r3
 8004106:	4413      	add	r3, r2
 8004108:	3360      	adds	r3, #96	; 0x60
 800410a:	2202      	movs	r2, #2
 800410c:	701a      	strb	r2, [r3, #0]
 800410e:	e08b      	b.n	8004228 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004110:	687a      	ldr	r2, [r7, #4]
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	212c      	movs	r1, #44	; 0x2c
 8004116:	fb01 f303 	mul.w	r3, r1, r3
 800411a:	4413      	add	r3, r2
 800411c:	3361      	adds	r3, #97	; 0x61
 800411e:	781b      	ldrb	r3, [r3, #0]
 8004120:	2b04      	cmp	r3, #4
 8004122:	d109      	bne.n	8004138 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004124:	687a      	ldr	r2, [r7, #4]
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	212c      	movs	r1, #44	; 0x2c
 800412a:	fb01 f303 	mul.w	r3, r1, r3
 800412e:	4413      	add	r3, r2
 8004130:	3360      	adds	r3, #96	; 0x60
 8004132:	2202      	movs	r2, #2
 8004134:	701a      	strb	r2, [r3, #0]
 8004136:	e077      	b.n	8004228 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004138:	687a      	ldr	r2, [r7, #4]
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	212c      	movs	r1, #44	; 0x2c
 800413e:	fb01 f303 	mul.w	r3, r1, r3
 8004142:	4413      	add	r3, r2
 8004144:	3361      	adds	r3, #97	; 0x61
 8004146:	781b      	ldrb	r3, [r3, #0]
 8004148:	2b05      	cmp	r3, #5
 800414a:	d109      	bne.n	8004160 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	212c      	movs	r1, #44	; 0x2c
 8004152:	fb01 f303 	mul.w	r3, r1, r3
 8004156:	4413      	add	r3, r2
 8004158:	3360      	adds	r3, #96	; 0x60
 800415a:	2205      	movs	r2, #5
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	e063      	b.n	8004228 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004160:	687a      	ldr	r2, [r7, #4]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	212c      	movs	r1, #44	; 0x2c
 8004166:	fb01 f303 	mul.w	r3, r1, r3
 800416a:	4413      	add	r3, r2
 800416c:	3361      	adds	r3, #97	; 0x61
 800416e:	781b      	ldrb	r3, [r3, #0]
 8004170:	2b06      	cmp	r3, #6
 8004172:	d009      	beq.n	8004188 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004174:	687a      	ldr	r2, [r7, #4]
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	212c      	movs	r1, #44	; 0x2c
 800417a:	fb01 f303 	mul.w	r3, r1, r3
 800417e:	4413      	add	r3, r2
 8004180:	3361      	adds	r3, #97	; 0x61
 8004182:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004184:	2b08      	cmp	r3, #8
 8004186:	d14f      	bne.n	8004228 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	212c      	movs	r1, #44	; 0x2c
 800418e:	fb01 f303 	mul.w	r3, r1, r3
 8004192:	4413      	add	r3, r2
 8004194:	335c      	adds	r3, #92	; 0x5c
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	1c5a      	adds	r2, r3, #1
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	697b      	ldr	r3, [r7, #20]
 800419e:	202c      	movs	r0, #44	; 0x2c
 80041a0:	fb00 f303 	mul.w	r3, r0, r3
 80041a4:	440b      	add	r3, r1
 80041a6:	335c      	adds	r3, #92	; 0x5c
 80041a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	212c      	movs	r1, #44	; 0x2c
 80041b0:	fb01 f303 	mul.w	r3, r1, r3
 80041b4:	4413      	add	r3, r2
 80041b6:	335c      	adds	r3, #92	; 0x5c
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	2b02      	cmp	r3, #2
 80041bc:	d912      	bls.n	80041e4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	697b      	ldr	r3, [r7, #20]
 80041c2:	212c      	movs	r1, #44	; 0x2c
 80041c4:	fb01 f303 	mul.w	r3, r1, r3
 80041c8:	4413      	add	r3, r2
 80041ca:	335c      	adds	r3, #92	; 0x5c
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80041d0:	687a      	ldr	r2, [r7, #4]
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	212c      	movs	r1, #44	; 0x2c
 80041d6:	fb01 f303 	mul.w	r3, r1, r3
 80041da:	4413      	add	r3, r2
 80041dc:	3360      	adds	r3, #96	; 0x60
 80041de:	2204      	movs	r2, #4
 80041e0:	701a      	strb	r2, [r3, #0]
 80041e2:	e021      	b.n	8004228 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80041e4:	687a      	ldr	r2, [r7, #4]
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	212c      	movs	r1, #44	; 0x2c
 80041ea:	fb01 f303 	mul.w	r3, r1, r3
 80041ee:	4413      	add	r3, r2
 80041f0:	3360      	adds	r3, #96	; 0x60
 80041f2:	2202      	movs	r2, #2
 80041f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80041f6:	697b      	ldr	r3, [r7, #20]
 80041f8:	015a      	lsls	r2, r3, #5
 80041fa:	69bb      	ldr	r3, [r7, #24]
 80041fc:	4413      	add	r3, r2
 80041fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800420c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004214:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	015a      	lsls	r2, r3, #5
 800421a:	69bb      	ldr	r3, [r7, #24]
 800421c:	4413      	add	r3, r2
 800421e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004222:	461a      	mov	r2, r3
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004228:	697b      	ldr	r3, [r7, #20]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	4413      	add	r3, r2
 8004230:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004234:	461a      	mov	r2, r3
 8004236:	2302      	movs	r3, #2
 8004238:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	b2d9      	uxtb	r1, r3
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	202c      	movs	r0, #44	; 0x2c
 8004244:	fb00 f303 	mul.w	r3, r0, r3
 8004248:	4413      	add	r3, r2
 800424a:	3360      	adds	r3, #96	; 0x60
 800424c:	781b      	ldrb	r3, [r3, #0]
 800424e:	461a      	mov	r2, r3
 8004250:	6878      	ldr	r0, [r7, #4]
 8004252:	f003 ff63 	bl	800811c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004256:	bf00      	nop
 8004258:	3720      	adds	r7, #32
 800425a:	46bd      	mov	sp, r7
 800425c:	bd80      	pop	{r7, pc}

0800425e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800425e:	b580      	push	{r7, lr}
 8004260:	b08a      	sub	sp, #40	; 0x28
 8004262:	af00      	add	r7, sp, #0
 8004264:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800426c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800426e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	6a1b      	ldr	r3, [r3, #32]
 8004276:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004278:	69fb      	ldr	r3, [r7, #28]
 800427a:	f003 030f 	and.w	r3, r3, #15
 800427e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004280:	69fb      	ldr	r3, [r7, #28]
 8004282:	0c5b      	lsrs	r3, r3, #17
 8004284:	f003 030f 	and.w	r3, r3, #15
 8004288:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	091b      	lsrs	r3, r3, #4
 800428e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004292:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004294:	697b      	ldr	r3, [r7, #20]
 8004296:	2b02      	cmp	r3, #2
 8004298:	d004      	beq.n	80042a4 <HCD_RXQLVL_IRQHandler+0x46>
 800429a:	697b      	ldr	r3, [r7, #20]
 800429c:	2b05      	cmp	r3, #5
 800429e:	f000 80a9 	beq.w	80043f4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80042a2:	e0aa      	b.n	80043fa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	f000 80a6 	beq.w	80043f8 <HCD_RXQLVL_IRQHandler+0x19a>
 80042ac:	687a      	ldr	r2, [r7, #4]
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	212c      	movs	r1, #44	; 0x2c
 80042b2:	fb01 f303 	mul.w	r3, r1, r3
 80042b6:	4413      	add	r3, r2
 80042b8:	3344      	adds	r3, #68	; 0x44
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	f000 809b 	beq.w	80043f8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80042c2:	687a      	ldr	r2, [r7, #4]
 80042c4:	69bb      	ldr	r3, [r7, #24]
 80042c6:	212c      	movs	r1, #44	; 0x2c
 80042c8:	fb01 f303 	mul.w	r3, r1, r3
 80042cc:	4413      	add	r3, r2
 80042ce:	3350      	adds	r3, #80	; 0x50
 80042d0:	681a      	ldr	r2, [r3, #0]
 80042d2:	693b      	ldr	r3, [r7, #16]
 80042d4:	441a      	add	r2, r3
 80042d6:	6879      	ldr	r1, [r7, #4]
 80042d8:	69bb      	ldr	r3, [r7, #24]
 80042da:	202c      	movs	r0, #44	; 0x2c
 80042dc:	fb00 f303 	mul.w	r3, r0, r3
 80042e0:	440b      	add	r3, r1
 80042e2:	334c      	adds	r3, #76	; 0x4c
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d87a      	bhi.n	80043e0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6818      	ldr	r0, [r3, #0]
 80042ee:	687a      	ldr	r2, [r7, #4]
 80042f0:	69bb      	ldr	r3, [r7, #24]
 80042f2:	212c      	movs	r1, #44	; 0x2c
 80042f4:	fb01 f303 	mul.w	r3, r1, r3
 80042f8:	4413      	add	r3, r2
 80042fa:	3344      	adds	r3, #68	; 0x44
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	693a      	ldr	r2, [r7, #16]
 8004300:	b292      	uxth	r2, r2
 8004302:	4619      	mov	r1, r3
 8004304:	f001 ff82 	bl	800620c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	69bb      	ldr	r3, [r7, #24]
 800430c:	212c      	movs	r1, #44	; 0x2c
 800430e:	fb01 f303 	mul.w	r3, r1, r3
 8004312:	4413      	add	r3, r2
 8004314:	3344      	adds	r3, #68	; 0x44
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	441a      	add	r2, r3
 800431c:	6879      	ldr	r1, [r7, #4]
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	202c      	movs	r0, #44	; 0x2c
 8004322:	fb00 f303 	mul.w	r3, r0, r3
 8004326:	440b      	add	r3, r1
 8004328:	3344      	adds	r3, #68	; 0x44
 800432a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800432c:	687a      	ldr	r2, [r7, #4]
 800432e:	69bb      	ldr	r3, [r7, #24]
 8004330:	212c      	movs	r1, #44	; 0x2c
 8004332:	fb01 f303 	mul.w	r3, r1, r3
 8004336:	4413      	add	r3, r2
 8004338:	3350      	adds	r3, #80	; 0x50
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	441a      	add	r2, r3
 8004340:	6879      	ldr	r1, [r7, #4]
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	202c      	movs	r0, #44	; 0x2c
 8004346:	fb00 f303 	mul.w	r3, r0, r3
 800434a:	440b      	add	r3, r1
 800434c:	3350      	adds	r3, #80	; 0x50
 800434e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	015a      	lsls	r2, r3, #5
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	4413      	add	r3, r2
 8004358:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800435c:	691b      	ldr	r3, [r3, #16]
 800435e:	0cdb      	lsrs	r3, r3, #19
 8004360:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004364:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004366:	687a      	ldr	r2, [r7, #4]
 8004368:	69bb      	ldr	r3, [r7, #24]
 800436a:	212c      	movs	r1, #44	; 0x2c
 800436c:	fb01 f303 	mul.w	r3, r1, r3
 8004370:	4413      	add	r3, r2
 8004372:	3340      	adds	r3, #64	; 0x40
 8004374:	881b      	ldrh	r3, [r3, #0]
 8004376:	461a      	mov	r2, r3
 8004378:	693b      	ldr	r3, [r7, #16]
 800437a:	4293      	cmp	r3, r2
 800437c:	d13c      	bne.n	80043f8 <HCD_RXQLVL_IRQHandler+0x19a>
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d039      	beq.n	80043f8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	015a      	lsls	r2, r3, #5
 8004388:	6a3b      	ldr	r3, [r7, #32]
 800438a:	4413      	add	r3, r2
 800438c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004394:	68bb      	ldr	r3, [r7, #8]
 8004396:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800439a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043a2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	015a      	lsls	r2, r3, #5
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	4413      	add	r3, r2
 80043ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b0:	461a      	mov	r2, r3
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80043b6:	687a      	ldr	r2, [r7, #4]
 80043b8:	69bb      	ldr	r3, [r7, #24]
 80043ba:	212c      	movs	r1, #44	; 0x2c
 80043bc:	fb01 f303 	mul.w	r3, r1, r3
 80043c0:	4413      	add	r3, r2
 80043c2:	3354      	adds	r3, #84	; 0x54
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	f083 0301 	eor.w	r3, r3, #1
 80043ca:	b2d8      	uxtb	r0, r3
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	212c      	movs	r1, #44	; 0x2c
 80043d2:	fb01 f303 	mul.w	r3, r1, r3
 80043d6:	4413      	add	r3, r2
 80043d8:	3354      	adds	r3, #84	; 0x54
 80043da:	4602      	mov	r2, r0
 80043dc:	701a      	strb	r2, [r3, #0]
      break;
 80043de:	e00b      	b.n	80043f8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80043e0:	687a      	ldr	r2, [r7, #4]
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	212c      	movs	r1, #44	; 0x2c
 80043e6:	fb01 f303 	mul.w	r3, r1, r3
 80043ea:	4413      	add	r3, r2
 80043ec:	3360      	adds	r3, #96	; 0x60
 80043ee:	2204      	movs	r2, #4
 80043f0:	701a      	strb	r2, [r3, #0]
      break;
 80043f2:	e001      	b.n	80043f8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80043f4:	bf00      	nop
 80043f6:	e000      	b.n	80043fa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80043f8:	bf00      	nop
  }
}
 80043fa:	bf00      	nop
 80043fc:	3728      	adds	r7, #40	; 0x28
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}

08004402 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004402:	b580      	push	{r7, lr}
 8004404:	b086      	sub	sp, #24
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004410:	697b      	ldr	r3, [r7, #20]
 8004412:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800441e:	693b      	ldr	r3, [r7, #16]
 8004420:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800442e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b02      	cmp	r3, #2
 8004438:	d10b      	bne.n	8004452 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	f003 0301 	and.w	r3, r3, #1
 8004440:	2b01      	cmp	r3, #1
 8004442:	d102      	bne.n	800444a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f003 fe4d 	bl	80080e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800444a:	68bb      	ldr	r3, [r7, #8]
 800444c:	f043 0302 	orr.w	r3, r3, #2
 8004450:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f003 0308 	and.w	r3, r3, #8
 8004458:	2b08      	cmp	r3, #8
 800445a:	d132      	bne.n	80044c2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f043 0308 	orr.w	r3, r3, #8
 8004462:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f003 0304 	and.w	r3, r3, #4
 800446a:	2b04      	cmp	r3, #4
 800446c:	d126      	bne.n	80044bc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	2b02      	cmp	r3, #2
 8004474:	d113      	bne.n	800449e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800447c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004480:	d106      	bne.n	8004490 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	2102      	movs	r1, #2
 8004488:	4618      	mov	r0, r3
 800448a:	f002 f82d 	bl	80064e8 <USB_InitFSLSPClkSel>
 800448e:	e011      	b.n	80044b4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2101      	movs	r1, #1
 8004496:	4618      	mov	r0, r3
 8004498:	f002 f826 	bl	80064e8 <USB_InitFSLSPClkSel>
 800449c:	e00a      	b.n	80044b4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	68db      	ldr	r3, [r3, #12]
 80044a2:	2b01      	cmp	r3, #1
 80044a4:	d106      	bne.n	80044b4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80044a6:	693b      	ldr	r3, [r7, #16]
 80044a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80044ac:	461a      	mov	r2, r3
 80044ae:	f64e 2360 	movw	r3, #60000	; 0xea60
 80044b2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80044b4:	6878      	ldr	r0, [r7, #4]
 80044b6:	f003 fe3f 	bl	8008138 <HAL_HCD_PortEnabled_Callback>
 80044ba:	e002      	b.n	80044c2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80044bc:	6878      	ldr	r0, [r7, #4]
 80044be:	f003 fe49 	bl	8008154 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	f003 0320 	and.w	r3, r3, #32
 80044c8:	2b20      	cmp	r3, #32
 80044ca:	d103      	bne.n	80044d4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80044cc:	68bb      	ldr	r3, [r7, #8]
 80044ce:	f043 0320 	orr.w	r3, r3, #32
 80044d2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80044d4:	693b      	ldr	r3, [r7, #16]
 80044d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80044da:	461a      	mov	r2, r3
 80044dc:	68bb      	ldr	r3, [r7, #8]
 80044de:	6013      	str	r3, [r2, #0]
}
 80044e0:	bf00      	nop
 80044e2:	3718      	adds	r7, #24
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b084      	sub	sp, #16
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d101      	bne.n	80044fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e12b      	b.n	8004752 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004500:	b2db      	uxtb	r3, r3
 8004502:	2b00      	cmp	r3, #0
 8004504:	d106      	bne.n	8004514 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2200      	movs	r2, #0
 800450a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800450e:	6878      	ldr	r0, [r7, #4]
 8004510:	f7fd fa6a 	bl	80019e8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2224      	movs	r2, #36	; 0x24
 8004518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800453a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800454a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800454c:	f001 fa20 	bl	8005990 <HAL_RCC_GetPCLK1Freq>
 8004550:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	4a81      	ldr	r2, [pc, #516]	; (800475c <HAL_I2C_Init+0x274>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d807      	bhi.n	800456c <HAL_I2C_Init+0x84>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	4a80      	ldr	r2, [pc, #512]	; (8004760 <HAL_I2C_Init+0x278>)
 8004560:	4293      	cmp	r3, r2
 8004562:	bf94      	ite	ls
 8004564:	2301      	movls	r3, #1
 8004566:	2300      	movhi	r3, #0
 8004568:	b2db      	uxtb	r3, r3
 800456a:	e006      	b.n	800457a <HAL_I2C_Init+0x92>
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	4a7d      	ldr	r2, [pc, #500]	; (8004764 <HAL_I2C_Init+0x27c>)
 8004570:	4293      	cmp	r3, r2
 8004572:	bf94      	ite	ls
 8004574:	2301      	movls	r3, #1
 8004576:	2300      	movhi	r3, #0
 8004578:	b2db      	uxtb	r3, r3
 800457a:	2b00      	cmp	r3, #0
 800457c:	d001      	beq.n	8004582 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800457e:	2301      	movs	r3, #1
 8004580:	e0e7      	b.n	8004752 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	4a78      	ldr	r2, [pc, #480]	; (8004768 <HAL_I2C_Init+0x280>)
 8004586:	fba2 2303 	umull	r2, r3, r2, r3
 800458a:	0c9b      	lsrs	r3, r3, #18
 800458c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	68ba      	ldr	r2, [r7, #8]
 800459e:	430a      	orrs	r2, r1
 80045a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6a1b      	ldr	r3, [r3, #32]
 80045a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	4a6a      	ldr	r2, [pc, #424]	; (800475c <HAL_I2C_Init+0x274>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d802      	bhi.n	80045bc <HAL_I2C_Init+0xd4>
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	3301      	adds	r3, #1
 80045ba:	e009      	b.n	80045d0 <HAL_I2C_Init+0xe8>
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80045c2:	fb02 f303 	mul.w	r3, r2, r3
 80045c6:	4a69      	ldr	r2, [pc, #420]	; (800476c <HAL_I2C_Init+0x284>)
 80045c8:	fba2 2303 	umull	r2, r3, r2, r3
 80045cc:	099b      	lsrs	r3, r3, #6
 80045ce:	3301      	adds	r3, #1
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	6812      	ldr	r2, [r2, #0]
 80045d4:	430b      	orrs	r3, r1
 80045d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80045e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	495c      	ldr	r1, [pc, #368]	; (800475c <HAL_I2C_Init+0x274>)
 80045ec:	428b      	cmp	r3, r1
 80045ee:	d819      	bhi.n	8004624 <HAL_I2C_Init+0x13c>
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	1e59      	subs	r1, r3, #1
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	005b      	lsls	r3, r3, #1
 80045fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80045fe:	1c59      	adds	r1, r3, #1
 8004600:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004604:	400b      	ands	r3, r1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <HAL_I2C_Init+0x138>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	1e59      	subs	r1, r3, #1
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	685b      	ldr	r3, [r3, #4]
 8004612:	005b      	lsls	r3, r3, #1
 8004614:	fbb1 f3f3 	udiv	r3, r1, r3
 8004618:	3301      	adds	r3, #1
 800461a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800461e:	e051      	b.n	80046c4 <HAL_I2C_Init+0x1dc>
 8004620:	2304      	movs	r3, #4
 8004622:	e04f      	b.n	80046c4 <HAL_I2C_Init+0x1dc>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d111      	bne.n	8004650 <HAL_I2C_Init+0x168>
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	1e58      	subs	r0, r3, #1
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6859      	ldr	r1, [r3, #4]
 8004634:	460b      	mov	r3, r1
 8004636:	005b      	lsls	r3, r3, #1
 8004638:	440b      	add	r3, r1
 800463a:	fbb0 f3f3 	udiv	r3, r0, r3
 800463e:	3301      	adds	r3, #1
 8004640:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004644:	2b00      	cmp	r3, #0
 8004646:	bf0c      	ite	eq
 8004648:	2301      	moveq	r3, #1
 800464a:	2300      	movne	r3, #0
 800464c:	b2db      	uxtb	r3, r3
 800464e:	e012      	b.n	8004676 <HAL_I2C_Init+0x18e>
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	1e58      	subs	r0, r3, #1
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6859      	ldr	r1, [r3, #4]
 8004658:	460b      	mov	r3, r1
 800465a:	009b      	lsls	r3, r3, #2
 800465c:	440b      	add	r3, r1
 800465e:	0099      	lsls	r1, r3, #2
 8004660:	440b      	add	r3, r1
 8004662:	fbb0 f3f3 	udiv	r3, r0, r3
 8004666:	3301      	adds	r3, #1
 8004668:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800466c:	2b00      	cmp	r3, #0
 800466e:	bf0c      	ite	eq
 8004670:	2301      	moveq	r3, #1
 8004672:	2300      	movne	r3, #0
 8004674:	b2db      	uxtb	r3, r3
 8004676:	2b00      	cmp	r3, #0
 8004678:	d001      	beq.n	800467e <HAL_I2C_Init+0x196>
 800467a:	2301      	movs	r3, #1
 800467c:	e022      	b.n	80046c4 <HAL_I2C_Init+0x1dc>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10e      	bne.n	80046a4 <HAL_I2C_Init+0x1bc>
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	1e58      	subs	r0, r3, #1
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6859      	ldr	r1, [r3, #4]
 800468e:	460b      	mov	r3, r1
 8004690:	005b      	lsls	r3, r3, #1
 8004692:	440b      	add	r3, r1
 8004694:	fbb0 f3f3 	udiv	r3, r0, r3
 8004698:	3301      	adds	r3, #1
 800469a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800469e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80046a2:	e00f      	b.n	80046c4 <HAL_I2C_Init+0x1dc>
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	1e58      	subs	r0, r3, #1
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6859      	ldr	r1, [r3, #4]
 80046ac:	460b      	mov	r3, r1
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	440b      	add	r3, r1
 80046b2:	0099      	lsls	r1, r3, #2
 80046b4:	440b      	add	r3, r1
 80046b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80046ba:	3301      	adds	r3, #1
 80046bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80046c4:	6879      	ldr	r1, [r7, #4]
 80046c6:	6809      	ldr	r1, [r1, #0]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	69da      	ldr	r2, [r3, #28]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	431a      	orrs	r2, r3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	430a      	orrs	r2, r1
 80046e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80046f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	6911      	ldr	r1, [r2, #16]
 80046fa:	687a      	ldr	r2, [r7, #4]
 80046fc:	68d2      	ldr	r2, [r2, #12]
 80046fe:	4311      	orrs	r1, r2
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6812      	ldr	r2, [r2, #0]
 8004704:	430b      	orrs	r3, r1
 8004706:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68db      	ldr	r3, [r3, #12]
 800470e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	695a      	ldr	r2, [r3, #20]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	699b      	ldr	r3, [r3, #24]
 800471a:	431a      	orrs	r2, r3
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	430a      	orrs	r2, r1
 8004722:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	681a      	ldr	r2, [r3, #0]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f042 0201 	orr.w	r2, r2, #1
 8004732:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2200      	movs	r2, #0
 8004738:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2220      	movs	r2, #32
 800473e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	2200      	movs	r2, #0
 8004746:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004750:	2300      	movs	r3, #0
}
 8004752:	4618      	mov	r0, r3
 8004754:	3710      	adds	r7, #16
 8004756:	46bd      	mov	sp, r7
 8004758:	bd80      	pop	{r7, pc}
 800475a:	bf00      	nop
 800475c:	000186a0 	.word	0x000186a0
 8004760:	001e847f 	.word	0x001e847f
 8004764:	003d08ff 	.word	0x003d08ff
 8004768:	431bde83 	.word	0x431bde83
 800476c:	10624dd3 	.word	0x10624dd3

08004770 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b088      	sub	sp, #32
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d101      	bne.n	8004782 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e128      	b.n	80049d4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004788:	b2db      	uxtb	r3, r3
 800478a:	2b00      	cmp	r3, #0
 800478c:	d109      	bne.n	80047a2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2200      	movs	r2, #0
 8004792:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a90      	ldr	r2, [pc, #576]	; (80049dc <HAL_I2S_Init+0x26c>)
 800479a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800479c:	6878      	ldr	r0, [r7, #4]
 800479e:	f7fd f96b 	bl	8001a78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	2202      	movs	r2, #2
 80047a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	69db      	ldr	r3, [r3, #28]
 80047b0:	687a      	ldr	r2, [r7, #4]
 80047b2:	6812      	ldr	r2, [r2, #0]
 80047b4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80047b8:	f023 030f 	bic.w	r3, r3, #15
 80047bc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2202      	movs	r2, #2
 80047c4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	695b      	ldr	r3, [r3, #20]
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d060      	beq.n	8004890 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80047d6:	2310      	movs	r3, #16
 80047d8:	617b      	str	r3, [r7, #20]
 80047da:	e001      	b.n	80047e0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80047dc:	2320      	movs	r3, #32
 80047de:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	689b      	ldr	r3, [r3, #8]
 80047e4:	2b20      	cmp	r3, #32
 80047e6:	d802      	bhi.n	80047ee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	005b      	lsls	r3, r3, #1
 80047ec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80047ee:	2001      	movs	r0, #1
 80047f0:	f001 f9c4 	bl	8005b7c <HAL_RCCEx_GetPeriphCLKFreq>
 80047f4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	691b      	ldr	r3, [r3, #16]
 80047fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80047fe:	d125      	bne.n	800484c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d010      	beq.n	800482a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	009b      	lsls	r3, r3, #2
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004812:	4613      	mov	r3, r2
 8004814:	009b      	lsls	r3, r3, #2
 8004816:	4413      	add	r3, r2
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	461a      	mov	r2, r3
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	695b      	ldr	r3, [r3, #20]
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	3305      	adds	r3, #5
 8004826:	613b      	str	r3, [r7, #16]
 8004828:	e01f      	b.n	800486a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	00db      	lsls	r3, r3, #3
 800482e:	68fa      	ldr	r2, [r7, #12]
 8004830:	fbb2 f2f3 	udiv	r2, r2, r3
 8004834:	4613      	mov	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4413      	add	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	461a      	mov	r2, r3
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	695b      	ldr	r3, [r3, #20]
 8004842:	fbb2 f3f3 	udiv	r3, r2, r3
 8004846:	3305      	adds	r3, #5
 8004848:	613b      	str	r3, [r7, #16]
 800484a:	e00e      	b.n	800486a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800484c:	68fa      	ldr	r2, [r7, #12]
 800484e:	697b      	ldr	r3, [r7, #20]
 8004850:	fbb2 f2f3 	udiv	r2, r2, r3
 8004854:	4613      	mov	r3, r2
 8004856:	009b      	lsls	r3, r3, #2
 8004858:	4413      	add	r3, r2
 800485a:	005b      	lsls	r3, r3, #1
 800485c:	461a      	mov	r2, r3
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	fbb2 f3f3 	udiv	r3, r2, r3
 8004866:	3305      	adds	r3, #5
 8004868:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800486a:	693b      	ldr	r3, [r7, #16]
 800486c:	4a5c      	ldr	r2, [pc, #368]	; (80049e0 <HAL_I2S_Init+0x270>)
 800486e:	fba2 2303 	umull	r2, r3, r2, r3
 8004872:	08db      	lsrs	r3, r3, #3
 8004874:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004876:	693b      	ldr	r3, [r7, #16]
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	69bb      	ldr	r3, [r7, #24]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	085b      	lsrs	r3, r3, #1
 8004886:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004888:	69bb      	ldr	r3, [r7, #24]
 800488a:	021b      	lsls	r3, r3, #8
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	e003      	b.n	8004898 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004890:	2302      	movs	r3, #2
 8004892:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d902      	bls.n	80048a4 <HAL_I2S_Init+0x134>
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	2bff      	cmp	r3, #255	; 0xff
 80048a2:	d907      	bls.n	80048b4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048a8:	f043 0210 	orr.w	r2, r3, #16
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80048b0:	2301      	movs	r3, #1
 80048b2:	e08f      	b.n	80049d4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	691a      	ldr	r2, [r3, #16]
 80048b8:	69bb      	ldr	r3, [r7, #24]
 80048ba:	ea42 0103 	orr.w	r1, r2, r3
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	69db      	ldr	r3, [r3, #28]
 80048ce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80048d2:	f023 030f 	bic.w	r3, r3, #15
 80048d6:	687a      	ldr	r2, [r7, #4]
 80048d8:	6851      	ldr	r1, [r2, #4]
 80048da:	687a      	ldr	r2, [r7, #4]
 80048dc:	6892      	ldr	r2, [r2, #8]
 80048de:	4311      	orrs	r1, r2
 80048e0:	687a      	ldr	r2, [r7, #4]
 80048e2:	68d2      	ldr	r2, [r2, #12]
 80048e4:	4311      	orrs	r1, r2
 80048e6:	687a      	ldr	r2, [r7, #4]
 80048e8:	6992      	ldr	r2, [r2, #24]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	431a      	orrs	r2, r3
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80048f6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6a1b      	ldr	r3, [r3, #32]
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d161      	bne.n	80049c4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	4a38      	ldr	r2, [pc, #224]	; (80049e4 <HAL_I2S_Init+0x274>)
 8004904:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a37      	ldr	r2, [pc, #220]	; (80049e8 <HAL_I2S_Init+0x278>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d101      	bne.n	8004914 <HAL_I2S_Init+0x1a4>
 8004910:	4b36      	ldr	r3, [pc, #216]	; (80049ec <HAL_I2S_Init+0x27c>)
 8004912:	e001      	b.n	8004918 <HAL_I2S_Init+0x1a8>
 8004914:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004918:	69db      	ldr	r3, [r3, #28]
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	6812      	ldr	r2, [r2, #0]
 800491e:	4932      	ldr	r1, [pc, #200]	; (80049e8 <HAL_I2S_Init+0x278>)
 8004920:	428a      	cmp	r2, r1
 8004922:	d101      	bne.n	8004928 <HAL_I2S_Init+0x1b8>
 8004924:	4a31      	ldr	r2, [pc, #196]	; (80049ec <HAL_I2S_Init+0x27c>)
 8004926:	e001      	b.n	800492c <HAL_I2S_Init+0x1bc>
 8004928:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800492c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004930:	f023 030f 	bic.w	r3, r3, #15
 8004934:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	4a2b      	ldr	r2, [pc, #172]	; (80049e8 <HAL_I2S_Init+0x278>)
 800493c:	4293      	cmp	r3, r2
 800493e:	d101      	bne.n	8004944 <HAL_I2S_Init+0x1d4>
 8004940:	4b2a      	ldr	r3, [pc, #168]	; (80049ec <HAL_I2S_Init+0x27c>)
 8004942:	e001      	b.n	8004948 <HAL_I2S_Init+0x1d8>
 8004944:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004948:	2202      	movs	r2, #2
 800494a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a25      	ldr	r2, [pc, #148]	; (80049e8 <HAL_I2S_Init+0x278>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d101      	bne.n	800495a <HAL_I2S_Init+0x1ea>
 8004956:	4b25      	ldr	r3, [pc, #148]	; (80049ec <HAL_I2S_Init+0x27c>)
 8004958:	e001      	b.n	800495e <HAL_I2S_Init+0x1ee>
 800495a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800495e:	69db      	ldr	r3, [r3, #28]
 8004960:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800496a:	d003      	beq.n	8004974 <HAL_I2S_Init+0x204>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	685b      	ldr	r3, [r3, #4]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d103      	bne.n	800497c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004974:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004978:	613b      	str	r3, [r7, #16]
 800497a:	e001      	b.n	8004980 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800497c:	2300      	movs	r3, #0
 800497e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	689b      	ldr	r3, [r3, #8]
 8004988:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800498a:	4313      	orrs	r3, r2
 800498c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004994:	4313      	orrs	r3, r2
 8004996:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	699b      	ldr	r3, [r3, #24]
 800499c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800499e:	4313      	orrs	r3, r2
 80049a0:	b29a      	uxth	r2, r3
 80049a2:	897b      	ldrh	r3, [r7, #10]
 80049a4:	4313      	orrs	r3, r2
 80049a6:	b29b      	uxth	r3, r3
 80049a8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049ac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	4a0d      	ldr	r2, [pc, #52]	; (80049e8 <HAL_I2S_Init+0x278>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d101      	bne.n	80049bc <HAL_I2S_Init+0x24c>
 80049b8:	4b0c      	ldr	r3, [pc, #48]	; (80049ec <HAL_I2S_Init+0x27c>)
 80049ba:	e001      	b.n	80049c0 <HAL_I2S_Init+0x250>
 80049bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049c0:	897a      	ldrh	r2, [r7, #10]
 80049c2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3720      	adds	r7, #32
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	08004ae7 	.word	0x08004ae7
 80049e0:	cccccccd 	.word	0xcccccccd
 80049e4:	08004bfd 	.word	0x08004bfd
 80049e8:	40003800 	.word	0x40003800
 80049ec:	40003400 	.word	0x40003400

080049f0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b083      	sub	sp, #12
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004a0c:	bf00      	nop
 8004a0e:	370c      	adds	r7, #12
 8004a10:	46bd      	mov	sp, r7
 8004a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a16:	4770      	bx	lr

08004a18 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b083      	sub	sp, #12
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004a20:	bf00      	nop
 8004a22:	370c      	adds	r7, #12
 8004a24:	46bd      	mov	sp, r7
 8004a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2a:	4770      	bx	lr

08004a2c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004a2c:	b580      	push	{r7, lr}
 8004a2e:	b082      	sub	sp, #8
 8004a30:	af00      	add	r7, sp, #0
 8004a32:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	881a      	ldrh	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a44:	1c9a      	adds	r2, r3, #2
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a4e:	b29b      	uxth	r3, r3
 8004a50:	3b01      	subs	r3, #1
 8004a52:	b29a      	uxth	r2, r3
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10e      	bne.n	8004a80 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685a      	ldr	r2, [r3, #4]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a70:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2201      	movs	r2, #1
 8004a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7ff ffb8 	bl	80049f0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004a80:	bf00      	nop
 8004a82:	3708      	adds	r7, #8
 8004a84:	46bd      	mov	sp, r7
 8004a86:	bd80      	pop	{r7, pc}

08004a88 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	68da      	ldr	r2, [r3, #12]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a9a:	b292      	uxth	r2, r2
 8004a9c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	1c9a      	adds	r2, r3, #2
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004aac:	b29b      	uxth	r3, r3
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	b29a      	uxth	r2, r3
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004aba:	b29b      	uxth	r3, r3
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10e      	bne.n	8004ade <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	685a      	ldr	r2, [r3, #4]
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ace:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2201      	movs	r2, #1
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004ad8:	6878      	ldr	r0, [r7, #4]
 8004ada:	f7ff ff93 	bl	8004a04 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004ade:	bf00      	nop
 8004ae0:	3708      	adds	r7, #8
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}

08004ae6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ae6:	b580      	push	{r7, lr}
 8004ae8:	b086      	sub	sp, #24
 8004aea:	af00      	add	r7, sp, #0
 8004aec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	689b      	ldr	r3, [r3, #8]
 8004af4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004afc:	b2db      	uxtb	r3, r3
 8004afe:	2b04      	cmp	r3, #4
 8004b00:	d13a      	bne.n	8004b78 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d109      	bne.n	8004b20 <I2S_IRQHandler+0x3a>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b16:	2b40      	cmp	r3, #64	; 0x40
 8004b18:	d102      	bne.n	8004b20 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7ff ffb4 	bl	8004a88 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b26:	2b40      	cmp	r3, #64	; 0x40
 8004b28:	d126      	bne.n	8004b78 <I2S_IRQHandler+0x92>
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b20      	cmp	r3, #32
 8004b36:	d11f      	bne.n	8004b78 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	685a      	ldr	r2, [r3, #4]
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004b46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004b48:	2300      	movs	r3, #0
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	613b      	str	r3, [r7, #16]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689b      	ldr	r3, [r3, #8]
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2201      	movs	r2, #1
 8004b62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b6a:	f043 0202 	orr.w	r2, r3, #2
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f7ff ff50 	bl	8004a18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d136      	bne.n	8004bf2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	f003 0302 	and.w	r3, r3, #2
 8004b8a:	2b02      	cmp	r3, #2
 8004b8c:	d109      	bne.n	8004ba2 <I2S_IRQHandler+0xbc>
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b98:	2b80      	cmp	r3, #128	; 0x80
 8004b9a:	d102      	bne.n	8004ba2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7ff ff45 	bl	8004a2c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	f003 0308 	and.w	r3, r3, #8
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d122      	bne.n	8004bf2 <I2S_IRQHandler+0x10c>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	685b      	ldr	r3, [r3, #4]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d11b      	bne.n	8004bf2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	685a      	ldr	r2, [r3, #4]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004bc8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004bca:	2300      	movs	r3, #0
 8004bcc:	60fb      	str	r3, [r7, #12]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	60fb      	str	r3, [r7, #12]
 8004bd6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2201      	movs	r2, #1
 8004bdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004be4:	f043 0204 	orr.w	r2, r3, #4
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004bec:	6878      	ldr	r0, [r7, #4]
 8004bee:	f7ff ff13 	bl	8004a18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004bf2:	bf00      	nop
 8004bf4:	3718      	adds	r7, #24
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b088      	sub	sp, #32
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	689b      	ldr	r3, [r3, #8]
 8004c0a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a92      	ldr	r2, [pc, #584]	; (8004e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d101      	bne.n	8004c1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004c16:	4b92      	ldr	r3, [pc, #584]	; (8004e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c18:	e001      	b.n	8004c1e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8004c1a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c1e:	689b      	ldr	r3, [r3, #8]
 8004c20:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	4a8b      	ldr	r2, [pc, #556]	; (8004e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004c30:	4293      	cmp	r3, r2
 8004c32:	d101      	bne.n	8004c38 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004c34:	4b8a      	ldr	r3, [pc, #552]	; (8004e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004c36:	e001      	b.n	8004c3c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004c38:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c3c:	685b      	ldr	r3, [r3, #4]
 8004c3e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c48:	d004      	beq.n	8004c54 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f040 8099 	bne.w	8004d86 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004c54:	69fb      	ldr	r3, [r7, #28]
 8004c56:	f003 0302 	and.w	r3, r3, #2
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d107      	bne.n	8004c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d002      	beq.n	8004c6e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f000 f925 	bl	8004eb8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b01      	cmp	r3, #1
 8004c76:	d107      	bne.n	8004c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d002      	beq.n	8004c88 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004c82:	6878      	ldr	r0, [r7, #4]
 8004c84:	f000 f9c8 	bl	8005018 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c8e:	2b40      	cmp	r3, #64	; 0x40
 8004c90:	d13a      	bne.n	8004d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004c92:	693b      	ldr	r3, [r7, #16]
 8004c94:	f003 0320 	and.w	r3, r3, #32
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	d035      	beq.n	8004d08 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a6e      	ldr	r2, [pc, #440]	; (8004e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d101      	bne.n	8004caa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004ca6:	4b6e      	ldr	r3, [pc, #440]	; (8004e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ca8:	e001      	b.n	8004cae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8004caa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cae:	685a      	ldr	r2, [r3, #4]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4969      	ldr	r1, [pc, #420]	; (8004e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004cb6:	428b      	cmp	r3, r1
 8004cb8:	d101      	bne.n	8004cbe <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8004cba:	4b69      	ldr	r3, [pc, #420]	; (8004e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004cbc:	e001      	b.n	8004cc2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8004cbe:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004cc2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004cc6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004cd6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004cd8:	2300      	movs	r3, #0
 8004cda:	60fb      	str	r3, [r7, #12]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	60fb      	str	r3, [r7, #12]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	60fb      	str	r3, [r7, #12]
 8004cec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2201      	movs	r2, #1
 8004cf2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cfa:	f043 0202 	orr.w	r2, r3, #2
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff fe88 	bl	8004a18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	f003 0308 	and.w	r3, r3, #8
 8004d0e:	2b08      	cmp	r3, #8
 8004d10:	f040 80c3 	bne.w	8004e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004d14:	697b      	ldr	r3, [r7, #20]
 8004d16:	f003 0320 	and.w	r3, r3, #32
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f000 80bd 	beq.w	8004e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	685a      	ldr	r2, [r3, #4]
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004d2e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	4a49      	ldr	r2, [pc, #292]	; (8004e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d36:	4293      	cmp	r3, r2
 8004d38:	d101      	bne.n	8004d3e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004d3a:	4b49      	ldr	r3, [pc, #292]	; (8004e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d3c:	e001      	b.n	8004d42 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004d3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d42:	685a      	ldr	r2, [r3, #4]
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	4944      	ldr	r1, [pc, #272]	; (8004e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004d4a:	428b      	cmp	r3, r1
 8004d4c:	d101      	bne.n	8004d52 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004d4e:	4b44      	ldr	r3, [pc, #272]	; (8004e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004d50:	e001      	b.n	8004d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004d52:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d56:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004d5a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004d5c:	2300      	movs	r3, #0
 8004d5e:	60bb      	str	r3, [r7, #8]
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	60bb      	str	r3, [r7, #8]
 8004d68:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d76:	f043 0204 	orr.w	r2, r3, #4
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7ff fe4a 	bl	8004a18 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004d84:	e089      	b.n	8004e9a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	f003 0302 	and.w	r3, r3, #2
 8004d8c:	2b02      	cmp	r3, #2
 8004d8e:	d107      	bne.n	8004da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d002      	beq.n	8004da0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f8be 	bl	8004f1c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	f003 0301 	and.w	r3, r3, #1
 8004da6:	2b01      	cmp	r3, #1
 8004da8:	d107      	bne.n	8004dba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004daa:	697b      	ldr	r3, [r7, #20]
 8004dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d002      	beq.n	8004dba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004db4:	6878      	ldr	r0, [r7, #4]
 8004db6:	f000 f8fd 	bl	8004fb4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004dc0:	2b40      	cmp	r3, #64	; 0x40
 8004dc2:	d12f      	bne.n	8004e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004dc4:	697b      	ldr	r3, [r7, #20]
 8004dc6:	f003 0320 	and.w	r3, r3, #32
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d02a      	beq.n	8004e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ddc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	4a1e      	ldr	r2, [pc, #120]	; (8004e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d101      	bne.n	8004dec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004de8:	4b1d      	ldr	r3, [pc, #116]	; (8004e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004dea:	e001      	b.n	8004df0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004dec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4919      	ldr	r1, [pc, #100]	; (8004e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004df8:	428b      	cmp	r3, r1
 8004dfa:	d101      	bne.n	8004e00 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004dfc:	4b18      	ldr	r3, [pc, #96]	; (8004e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004dfe:	e001      	b.n	8004e04 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004e00:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e08:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e16:	f043 0202 	orr.w	r2, r3, #2
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e1e:	6878      	ldr	r0, [r7, #4]
 8004e20:	f7ff fdfa 	bl	8004a18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004e24:	69bb      	ldr	r3, [r7, #24]
 8004e26:	f003 0308 	and.w	r3, r3, #8
 8004e2a:	2b08      	cmp	r3, #8
 8004e2c:	d136      	bne.n	8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004e2e:	693b      	ldr	r3, [r7, #16]
 8004e30:	f003 0320 	and.w	r3, r3, #32
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d031      	beq.n	8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	4a07      	ldr	r2, [pc, #28]	; (8004e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d101      	bne.n	8004e46 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004e42:	4b07      	ldr	r3, [pc, #28]	; (8004e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e44:	e001      	b.n	8004e4a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004e46:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e4a:	685a      	ldr	r2, [r3, #4]
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4902      	ldr	r1, [pc, #8]	; (8004e5c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004e52:	428b      	cmp	r3, r1
 8004e54:	d106      	bne.n	8004e64 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004e56:	4b02      	ldr	r3, [pc, #8]	; (8004e60 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004e58:	e006      	b.n	8004e68 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004e5a:	bf00      	nop
 8004e5c:	40003800 	.word	0x40003800
 8004e60:	40003400 	.word	0x40003400
 8004e64:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004e68:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e6c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	685a      	ldr	r2, [r3, #4]
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004e7c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2201      	movs	r2, #1
 8004e82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e8a:	f043 0204 	orr.w	r2, r3, #4
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7ff fdc0 	bl	8004a18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004e98:	e000      	b.n	8004e9c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004e9a:	bf00      	nop
}
 8004e9c:	bf00      	nop
 8004e9e:	3720      	adds	r7, #32
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	bd80      	pop	{r7, pc}

08004ea4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004ea4:	b480      	push	{r7}
 8004ea6:	b083      	sub	sp, #12
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004eac:	bf00      	nop
 8004eae:	370c      	adds	r7, #12
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb6:	4770      	bx	lr

08004eb8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
 8004ebe:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec4:	1c99      	adds	r1, r3, #2
 8004ec6:	687a      	ldr	r2, [r7, #4]
 8004ec8:	6251      	str	r1, [r2, #36]	; 0x24
 8004eca:	881a      	ldrh	r2, [r3, #0]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ed6:	b29b      	uxth	r3, r3
 8004ed8:	3b01      	subs	r3, #1
 8004eda:	b29a      	uxth	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ee4:	b29b      	uxth	r3, r3
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d113      	bne.n	8004f12 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004ef8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004efe:	b29b      	uxth	r3, r3
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d106      	bne.n	8004f12 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f0c:	6878      	ldr	r0, [r7, #4]
 8004f0e:	f7ff ffc9 	bl	8004ea4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
	...

08004f1c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b082      	sub	sp, #8
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f28:	1c99      	adds	r1, r3, #2
 8004f2a:	687a      	ldr	r2, [r7, #4]
 8004f2c:	6251      	str	r1, [r2, #36]	; 0x24
 8004f2e:	8819      	ldrh	r1, [r3, #0]
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	4a1d      	ldr	r2, [pc, #116]	; (8004fac <I2SEx_TxISR_I2SExt+0x90>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d101      	bne.n	8004f3e <I2SEx_TxISR_I2SExt+0x22>
 8004f3a:	4b1d      	ldr	r3, [pc, #116]	; (8004fb0 <I2SEx_TxISR_I2SExt+0x94>)
 8004f3c:	e001      	b.n	8004f42 <I2SEx_TxISR_I2SExt+0x26>
 8004f3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f42:	460a      	mov	r2, r1
 8004f44:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f4a:	b29b      	uxth	r3, r3
 8004f4c:	3b01      	subs	r3, #1
 8004f4e:	b29a      	uxth	r2, r3
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f58:	b29b      	uxth	r3, r3
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d121      	bne.n	8004fa2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a12      	ldr	r2, [pc, #72]	; (8004fac <I2SEx_TxISR_I2SExt+0x90>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d101      	bne.n	8004f6c <I2SEx_TxISR_I2SExt+0x50>
 8004f68:	4b11      	ldr	r3, [pc, #68]	; (8004fb0 <I2SEx_TxISR_I2SExt+0x94>)
 8004f6a:	e001      	b.n	8004f70 <I2SEx_TxISR_I2SExt+0x54>
 8004f6c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f70:	685a      	ldr	r2, [r3, #4]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	490d      	ldr	r1, [pc, #52]	; (8004fac <I2SEx_TxISR_I2SExt+0x90>)
 8004f78:	428b      	cmp	r3, r1
 8004f7a:	d101      	bne.n	8004f80 <I2SEx_TxISR_I2SExt+0x64>
 8004f7c:	4b0c      	ldr	r3, [pc, #48]	; (8004fb0 <I2SEx_TxISR_I2SExt+0x94>)
 8004f7e:	e001      	b.n	8004f84 <I2SEx_TxISR_I2SExt+0x68>
 8004f80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004f84:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004f88:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004f8e:	b29b      	uxth	r3, r3
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d106      	bne.n	8004fa2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff ff81 	bl	8004ea4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	40003800 	.word	0x40003800
 8004fb0:	40003400 	.word	0x40003400

08004fb4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b082      	sub	sp, #8
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68d8      	ldr	r0, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fc6:	1c99      	adds	r1, r3, #2
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004fcc:	b282      	uxth	r2, r0
 8004fce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d113      	bne.n	8005010 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ff6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	d106      	bne.n	8005010 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2201      	movs	r2, #1
 8005006:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f7ff ff4a 	bl	8004ea4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005010:	bf00      	nop
 8005012:	3708      	adds	r7, #8
 8005014:	46bd      	mov	sp, r7
 8005016:	bd80      	pop	{r7, pc}

08005018 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a20      	ldr	r2, [pc, #128]	; (80050a8 <I2SEx_RxISR_I2SExt+0x90>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d101      	bne.n	800502e <I2SEx_RxISR_I2SExt+0x16>
 800502a:	4b20      	ldr	r3, [pc, #128]	; (80050ac <I2SEx_RxISR_I2SExt+0x94>)
 800502c:	e001      	b.n	8005032 <I2SEx_RxISR_I2SExt+0x1a>
 800502e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005032:	68d8      	ldr	r0, [r3, #12]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	1c99      	adds	r1, r3, #2
 800503a:	687a      	ldr	r2, [r7, #4]
 800503c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800503e:	b282      	uxth	r2, r0
 8005040:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005046:	b29b      	uxth	r3, r3
 8005048:	3b01      	subs	r3, #1
 800504a:	b29a      	uxth	r2, r3
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	d121      	bne.n	800509e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	4a12      	ldr	r2, [pc, #72]	; (80050a8 <I2SEx_RxISR_I2SExt+0x90>)
 8005060:	4293      	cmp	r3, r2
 8005062:	d101      	bne.n	8005068 <I2SEx_RxISR_I2SExt+0x50>
 8005064:	4b11      	ldr	r3, [pc, #68]	; (80050ac <I2SEx_RxISR_I2SExt+0x94>)
 8005066:	e001      	b.n	800506c <I2SEx_RxISR_I2SExt+0x54>
 8005068:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800506c:	685a      	ldr	r2, [r3, #4]
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	490d      	ldr	r1, [pc, #52]	; (80050a8 <I2SEx_RxISR_I2SExt+0x90>)
 8005074:	428b      	cmp	r3, r1
 8005076:	d101      	bne.n	800507c <I2SEx_RxISR_I2SExt+0x64>
 8005078:	4b0c      	ldr	r3, [pc, #48]	; (80050ac <I2SEx_RxISR_I2SExt+0x94>)
 800507a:	e001      	b.n	8005080 <I2SEx_RxISR_I2SExt+0x68>
 800507c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005080:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005084:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800508a:	b29b      	uxth	r3, r3
 800508c:	2b00      	cmp	r3, #0
 800508e:	d106      	bne.n	800509e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2201      	movs	r2, #1
 8005094:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f7ff ff03 	bl	8004ea4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800509e:	bf00      	nop
 80050a0:	3708      	adds	r7, #8
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
 80050a6:	bf00      	nop
 80050a8:	40003800 	.word	0x40003800
 80050ac:	40003400 	.word	0x40003400

080050b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050b0:	b580      	push	{r7, lr}
 80050b2:	b086      	sub	sp, #24
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d101      	bne.n	80050c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e267      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f003 0301 	and.w	r3, r3, #1
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d075      	beq.n	80051ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050ce:	4b88      	ldr	r3, [pc, #544]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80050d0:	689b      	ldr	r3, [r3, #8]
 80050d2:	f003 030c 	and.w	r3, r3, #12
 80050d6:	2b04      	cmp	r3, #4
 80050d8:	d00c      	beq.n	80050f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050da:	4b85      	ldr	r3, [pc, #532]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80050dc:	689b      	ldr	r3, [r3, #8]
 80050de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050e2:	2b08      	cmp	r3, #8
 80050e4:	d112      	bne.n	800510c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050e6:	4b82      	ldr	r3, [pc, #520]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80050e8:	685b      	ldr	r3, [r3, #4]
 80050ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f2:	d10b      	bne.n	800510c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f4:	4b7e      	ldr	r3, [pc, #504]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d05b      	beq.n	80051b8 <HAL_RCC_OscConfig+0x108>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d157      	bne.n	80051b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	e242      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005114:	d106      	bne.n	8005124 <HAL_RCC_OscConfig+0x74>
 8005116:	4b76      	ldr	r3, [pc, #472]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a75      	ldr	r2, [pc, #468]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 800511c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005120:	6013      	str	r3, [r2, #0]
 8005122:	e01d      	b.n	8005160 <HAL_RCC_OscConfig+0xb0>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800512c:	d10c      	bne.n	8005148 <HAL_RCC_OscConfig+0x98>
 800512e:	4b70      	ldr	r3, [pc, #448]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a6f      	ldr	r2, [pc, #444]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005134:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005138:	6013      	str	r3, [r2, #0]
 800513a:	4b6d      	ldr	r3, [pc, #436]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a6c      	ldr	r2, [pc, #432]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005140:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005144:	6013      	str	r3, [r2, #0]
 8005146:	e00b      	b.n	8005160 <HAL_RCC_OscConfig+0xb0>
 8005148:	4b69      	ldr	r3, [pc, #420]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a68      	ldr	r2, [pc, #416]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 800514e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005152:	6013      	str	r3, [r2, #0]
 8005154:	4b66      	ldr	r3, [pc, #408]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	4a65      	ldr	r2, [pc, #404]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 800515a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800515e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	685b      	ldr	r3, [r3, #4]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d013      	beq.n	8005190 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005168:	f7fc ff0c 	bl	8001f84 <HAL_GetTick>
 800516c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516e:	e008      	b.n	8005182 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005170:	f7fc ff08 	bl	8001f84 <HAL_GetTick>
 8005174:	4602      	mov	r2, r0
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	1ad3      	subs	r3, r2, r3
 800517a:	2b64      	cmp	r3, #100	; 0x64
 800517c:	d901      	bls.n	8005182 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e207      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005182:	4b5b      	ldr	r3, [pc, #364]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518a:	2b00      	cmp	r3, #0
 800518c:	d0f0      	beq.n	8005170 <HAL_RCC_OscConfig+0xc0>
 800518e:	e014      	b.n	80051ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005190:	f7fc fef8 	bl	8001f84 <HAL_GetTick>
 8005194:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005196:	e008      	b.n	80051aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005198:	f7fc fef4 	bl	8001f84 <HAL_GetTick>
 800519c:	4602      	mov	r2, r0
 800519e:	693b      	ldr	r3, [r7, #16]
 80051a0:	1ad3      	subs	r3, r2, r3
 80051a2:	2b64      	cmp	r3, #100	; 0x64
 80051a4:	d901      	bls.n	80051aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051a6:	2303      	movs	r3, #3
 80051a8:	e1f3      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051aa:	4b51      	ldr	r3, [pc, #324]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d1f0      	bne.n	8005198 <HAL_RCC_OscConfig+0xe8>
 80051b6:	e000      	b.n	80051ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f003 0302 	and.w	r3, r3, #2
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d063      	beq.n	800528e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051c6:	4b4a      	ldr	r3, [pc, #296]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80051c8:	689b      	ldr	r3, [r3, #8]
 80051ca:	f003 030c 	and.w	r3, r3, #12
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d00b      	beq.n	80051ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051d2:	4b47      	ldr	r3, [pc, #284]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051da:	2b08      	cmp	r3, #8
 80051dc:	d11c      	bne.n	8005218 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051de:	4b44      	ldr	r3, [pc, #272]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80051e0:	685b      	ldr	r3, [r3, #4]
 80051e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d116      	bne.n	8005218 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ea:	4b41      	ldr	r3, [pc, #260]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d005      	beq.n	8005202 <HAL_RCC_OscConfig+0x152>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	68db      	ldr	r3, [r3, #12]
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d001      	beq.n	8005202 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e1c7      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005202:	4b3b      	ldr	r3, [pc, #236]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	691b      	ldr	r3, [r3, #16]
 800520e:	00db      	lsls	r3, r3, #3
 8005210:	4937      	ldr	r1, [pc, #220]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005212:	4313      	orrs	r3, r2
 8005214:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005216:	e03a      	b.n	800528e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	68db      	ldr	r3, [r3, #12]
 800521c:	2b00      	cmp	r3, #0
 800521e:	d020      	beq.n	8005262 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005220:	4b34      	ldr	r3, [pc, #208]	; (80052f4 <HAL_RCC_OscConfig+0x244>)
 8005222:	2201      	movs	r2, #1
 8005224:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005226:	f7fc fead 	bl	8001f84 <HAL_GetTick>
 800522a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522c:	e008      	b.n	8005240 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800522e:	f7fc fea9 	bl	8001f84 <HAL_GetTick>
 8005232:	4602      	mov	r2, r0
 8005234:	693b      	ldr	r3, [r7, #16]
 8005236:	1ad3      	subs	r3, r2, r3
 8005238:	2b02      	cmp	r3, #2
 800523a:	d901      	bls.n	8005240 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800523c:	2303      	movs	r3, #3
 800523e:	e1a8      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005240:	4b2b      	ldr	r3, [pc, #172]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f003 0302 	and.w	r3, r3, #2
 8005248:	2b00      	cmp	r3, #0
 800524a:	d0f0      	beq.n	800522e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800524c:	4b28      	ldr	r3, [pc, #160]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	691b      	ldr	r3, [r3, #16]
 8005258:	00db      	lsls	r3, r3, #3
 800525a:	4925      	ldr	r1, [pc, #148]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 800525c:	4313      	orrs	r3, r2
 800525e:	600b      	str	r3, [r1, #0]
 8005260:	e015      	b.n	800528e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005262:	4b24      	ldr	r3, [pc, #144]	; (80052f4 <HAL_RCC_OscConfig+0x244>)
 8005264:	2200      	movs	r2, #0
 8005266:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005268:	f7fc fe8c 	bl	8001f84 <HAL_GetTick>
 800526c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800526e:	e008      	b.n	8005282 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005270:	f7fc fe88 	bl	8001f84 <HAL_GetTick>
 8005274:	4602      	mov	r2, r0
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	1ad3      	subs	r3, r2, r3
 800527a:	2b02      	cmp	r3, #2
 800527c:	d901      	bls.n	8005282 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800527e:	2303      	movs	r3, #3
 8005280:	e187      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005282:	4b1b      	ldr	r3, [pc, #108]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f003 0302 	and.w	r3, r3, #2
 800528a:	2b00      	cmp	r3, #0
 800528c:	d1f0      	bne.n	8005270 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0308 	and.w	r3, r3, #8
 8005296:	2b00      	cmp	r3, #0
 8005298:	d036      	beq.n	8005308 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	695b      	ldr	r3, [r3, #20]
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d016      	beq.n	80052d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052a2:	4b15      	ldr	r3, [pc, #84]	; (80052f8 <HAL_RCC_OscConfig+0x248>)
 80052a4:	2201      	movs	r2, #1
 80052a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052a8:	f7fc fe6c 	bl	8001f84 <HAL_GetTick>
 80052ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ae:	e008      	b.n	80052c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052b0:	f7fc fe68 	bl	8001f84 <HAL_GetTick>
 80052b4:	4602      	mov	r2, r0
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	1ad3      	subs	r3, r2, r3
 80052ba:	2b02      	cmp	r3, #2
 80052bc:	d901      	bls.n	80052c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052be:	2303      	movs	r3, #3
 80052c0:	e167      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052c2:	4b0b      	ldr	r3, [pc, #44]	; (80052f0 <HAL_RCC_OscConfig+0x240>)
 80052c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c6:	f003 0302 	and.w	r3, r3, #2
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d0f0      	beq.n	80052b0 <HAL_RCC_OscConfig+0x200>
 80052ce:	e01b      	b.n	8005308 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052d0:	4b09      	ldr	r3, [pc, #36]	; (80052f8 <HAL_RCC_OscConfig+0x248>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052d6:	f7fc fe55 	bl	8001f84 <HAL_GetTick>
 80052da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052dc:	e00e      	b.n	80052fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052de:	f7fc fe51 	bl	8001f84 <HAL_GetTick>
 80052e2:	4602      	mov	r2, r0
 80052e4:	693b      	ldr	r3, [r7, #16]
 80052e6:	1ad3      	subs	r3, r2, r3
 80052e8:	2b02      	cmp	r3, #2
 80052ea:	d907      	bls.n	80052fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80052ec:	2303      	movs	r3, #3
 80052ee:	e150      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
 80052f0:	40023800 	.word	0x40023800
 80052f4:	42470000 	.word	0x42470000
 80052f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052fc:	4b88      	ldr	r3, [pc, #544]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80052fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005300:	f003 0302 	and.w	r3, r3, #2
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1ea      	bne.n	80052de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0304 	and.w	r3, r3, #4
 8005310:	2b00      	cmp	r3, #0
 8005312:	f000 8097 	beq.w	8005444 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005316:	2300      	movs	r3, #0
 8005318:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800531a:	4b81      	ldr	r3, [pc, #516]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 800531c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005322:	2b00      	cmp	r3, #0
 8005324:	d10f      	bne.n	8005346 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005326:	2300      	movs	r3, #0
 8005328:	60bb      	str	r3, [r7, #8]
 800532a:	4b7d      	ldr	r3, [pc, #500]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 800532c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800532e:	4a7c      	ldr	r2, [pc, #496]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 8005330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005334:	6413      	str	r3, [r2, #64]	; 0x40
 8005336:	4b7a      	ldr	r3, [pc, #488]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800533e:	60bb      	str	r3, [r7, #8]
 8005340:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005342:	2301      	movs	r3, #1
 8005344:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005346:	4b77      	ldr	r3, [pc, #476]	; (8005524 <HAL_RCC_OscConfig+0x474>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d118      	bne.n	8005384 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005352:	4b74      	ldr	r3, [pc, #464]	; (8005524 <HAL_RCC_OscConfig+0x474>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4a73      	ldr	r2, [pc, #460]	; (8005524 <HAL_RCC_OscConfig+0x474>)
 8005358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800535c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800535e:	f7fc fe11 	bl	8001f84 <HAL_GetTick>
 8005362:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005364:	e008      	b.n	8005378 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005366:	f7fc fe0d 	bl	8001f84 <HAL_GetTick>
 800536a:	4602      	mov	r2, r0
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	1ad3      	subs	r3, r2, r3
 8005370:	2b02      	cmp	r3, #2
 8005372:	d901      	bls.n	8005378 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005374:	2303      	movs	r3, #3
 8005376:	e10c      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005378:	4b6a      	ldr	r3, [pc, #424]	; (8005524 <HAL_RCC_OscConfig+0x474>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005380:	2b00      	cmp	r3, #0
 8005382:	d0f0      	beq.n	8005366 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	689b      	ldr	r3, [r3, #8]
 8005388:	2b01      	cmp	r3, #1
 800538a:	d106      	bne.n	800539a <HAL_RCC_OscConfig+0x2ea>
 800538c:	4b64      	ldr	r3, [pc, #400]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 800538e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005390:	4a63      	ldr	r2, [pc, #396]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 8005392:	f043 0301 	orr.w	r3, r3, #1
 8005396:	6713      	str	r3, [r2, #112]	; 0x70
 8005398:	e01c      	b.n	80053d4 <HAL_RCC_OscConfig+0x324>
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	689b      	ldr	r3, [r3, #8]
 800539e:	2b05      	cmp	r3, #5
 80053a0:	d10c      	bne.n	80053bc <HAL_RCC_OscConfig+0x30c>
 80053a2:	4b5f      	ldr	r3, [pc, #380]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a6:	4a5e      	ldr	r2, [pc, #376]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053a8:	f043 0304 	orr.w	r3, r3, #4
 80053ac:	6713      	str	r3, [r2, #112]	; 0x70
 80053ae:	4b5c      	ldr	r3, [pc, #368]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b2:	4a5b      	ldr	r2, [pc, #364]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053b4:	f043 0301 	orr.w	r3, r3, #1
 80053b8:	6713      	str	r3, [r2, #112]	; 0x70
 80053ba:	e00b      	b.n	80053d4 <HAL_RCC_OscConfig+0x324>
 80053bc:	4b58      	ldr	r3, [pc, #352]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053c0:	4a57      	ldr	r2, [pc, #348]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053c2:	f023 0301 	bic.w	r3, r3, #1
 80053c6:	6713      	str	r3, [r2, #112]	; 0x70
 80053c8:	4b55      	ldr	r3, [pc, #340]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053cc:	4a54      	ldr	r2, [pc, #336]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053ce:	f023 0304 	bic.w	r3, r3, #4
 80053d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	689b      	ldr	r3, [r3, #8]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d015      	beq.n	8005408 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053dc:	f7fc fdd2 	bl	8001f84 <HAL_GetTick>
 80053e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053e2:	e00a      	b.n	80053fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053e4:	f7fc fdce 	bl	8001f84 <HAL_GetTick>
 80053e8:	4602      	mov	r2, r0
 80053ea:	693b      	ldr	r3, [r7, #16]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d901      	bls.n	80053fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80053f6:	2303      	movs	r3, #3
 80053f8:	e0cb      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053fa:	4b49      	ldr	r3, [pc, #292]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80053fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fe:	f003 0302 	and.w	r3, r3, #2
 8005402:	2b00      	cmp	r3, #0
 8005404:	d0ee      	beq.n	80053e4 <HAL_RCC_OscConfig+0x334>
 8005406:	e014      	b.n	8005432 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005408:	f7fc fdbc 	bl	8001f84 <HAL_GetTick>
 800540c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800540e:	e00a      	b.n	8005426 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005410:	f7fc fdb8 	bl	8001f84 <HAL_GetTick>
 8005414:	4602      	mov	r2, r0
 8005416:	693b      	ldr	r3, [r7, #16]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	f241 3288 	movw	r2, #5000	; 0x1388
 800541e:	4293      	cmp	r3, r2
 8005420:	d901      	bls.n	8005426 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005422:	2303      	movs	r3, #3
 8005424:	e0b5      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005426:	4b3e      	ldr	r3, [pc, #248]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 8005428:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800542a:	f003 0302 	and.w	r3, r3, #2
 800542e:	2b00      	cmp	r3, #0
 8005430:	d1ee      	bne.n	8005410 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005432:	7dfb      	ldrb	r3, [r7, #23]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d105      	bne.n	8005444 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005438:	4b39      	ldr	r3, [pc, #228]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 800543a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800543c:	4a38      	ldr	r2, [pc, #224]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 800543e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005442:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	699b      	ldr	r3, [r3, #24]
 8005448:	2b00      	cmp	r3, #0
 800544a:	f000 80a1 	beq.w	8005590 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800544e:	4b34      	ldr	r3, [pc, #208]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	f003 030c 	and.w	r3, r3, #12
 8005456:	2b08      	cmp	r3, #8
 8005458:	d05c      	beq.n	8005514 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	2b02      	cmp	r3, #2
 8005460:	d141      	bne.n	80054e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005462:	4b31      	ldr	r3, [pc, #196]	; (8005528 <HAL_RCC_OscConfig+0x478>)
 8005464:	2200      	movs	r2, #0
 8005466:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005468:	f7fc fd8c 	bl	8001f84 <HAL_GetTick>
 800546c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800546e:	e008      	b.n	8005482 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005470:	f7fc fd88 	bl	8001f84 <HAL_GetTick>
 8005474:	4602      	mov	r2, r0
 8005476:	693b      	ldr	r3, [r7, #16]
 8005478:	1ad3      	subs	r3, r2, r3
 800547a:	2b02      	cmp	r3, #2
 800547c:	d901      	bls.n	8005482 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800547e:	2303      	movs	r3, #3
 8005480:	e087      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005482:	4b27      	ldr	r3, [pc, #156]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d1f0      	bne.n	8005470 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	69da      	ldr	r2, [r3, #28]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a1b      	ldr	r3, [r3, #32]
 8005496:	431a      	orrs	r2, r3
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800549c:	019b      	lsls	r3, r3, #6
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a4:	085b      	lsrs	r3, r3, #1
 80054a6:	3b01      	subs	r3, #1
 80054a8:	041b      	lsls	r3, r3, #16
 80054aa:	431a      	orrs	r2, r3
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b0:	061b      	lsls	r3, r3, #24
 80054b2:	491b      	ldr	r1, [pc, #108]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80054b4:	4313      	orrs	r3, r2
 80054b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054b8:	4b1b      	ldr	r3, [pc, #108]	; (8005528 <HAL_RCC_OscConfig+0x478>)
 80054ba:	2201      	movs	r2, #1
 80054bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054be:	f7fc fd61 	bl	8001f84 <HAL_GetTick>
 80054c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054c4:	e008      	b.n	80054d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054c6:	f7fc fd5d 	bl	8001f84 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e05c      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054d8:	4b11      	ldr	r3, [pc, #68]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d0f0      	beq.n	80054c6 <HAL_RCC_OscConfig+0x416>
 80054e4:	e054      	b.n	8005590 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054e6:	4b10      	ldr	r3, [pc, #64]	; (8005528 <HAL_RCC_OscConfig+0x478>)
 80054e8:	2200      	movs	r2, #0
 80054ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ec:	f7fc fd4a 	bl	8001f84 <HAL_GetTick>
 80054f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054f2:	e008      	b.n	8005506 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054f4:	f7fc fd46 	bl	8001f84 <HAL_GetTick>
 80054f8:	4602      	mov	r2, r0
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	1ad3      	subs	r3, r2, r3
 80054fe:	2b02      	cmp	r3, #2
 8005500:	d901      	bls.n	8005506 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005502:	2303      	movs	r3, #3
 8005504:	e045      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005506:	4b06      	ldr	r3, [pc, #24]	; (8005520 <HAL_RCC_OscConfig+0x470>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d1f0      	bne.n	80054f4 <HAL_RCC_OscConfig+0x444>
 8005512:	e03d      	b.n	8005590 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	2b01      	cmp	r3, #1
 800551a:	d107      	bne.n	800552c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e038      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
 8005520:	40023800 	.word	0x40023800
 8005524:	40007000 	.word	0x40007000
 8005528:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800552c:	4b1b      	ldr	r3, [pc, #108]	; (800559c <HAL_RCC_OscConfig+0x4ec>)
 800552e:	685b      	ldr	r3, [r3, #4]
 8005530:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	699b      	ldr	r3, [r3, #24]
 8005536:	2b01      	cmp	r3, #1
 8005538:	d028      	beq.n	800558c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800553a:	68fb      	ldr	r3, [r7, #12]
 800553c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005544:	429a      	cmp	r2, r3
 8005546:	d121      	bne.n	800558c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005552:	429a      	cmp	r2, r3
 8005554:	d11a      	bne.n	800558c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005556:	68fa      	ldr	r2, [r7, #12]
 8005558:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800555c:	4013      	ands	r3, r2
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005562:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005564:	4293      	cmp	r3, r2
 8005566:	d111      	bne.n	800558c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005572:	085b      	lsrs	r3, r3, #1
 8005574:	3b01      	subs	r3, #1
 8005576:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005578:	429a      	cmp	r2, r3
 800557a:	d107      	bne.n	800558c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005586:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005588:	429a      	cmp	r2, r3
 800558a:	d001      	beq.n	8005590 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e000      	b.n	8005592 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}
 800559a:	bf00      	nop
 800559c:	40023800 	.word	0x40023800

080055a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055a0:	b580      	push	{r7, lr}
 80055a2:	b084      	sub	sp, #16
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
 80055a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d101      	bne.n	80055b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055b0:	2301      	movs	r3, #1
 80055b2:	e0cc      	b.n	800574e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055b4:	4b68      	ldr	r3, [pc, #416]	; (8005758 <HAL_RCC_ClockConfig+0x1b8>)
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0307 	and.w	r3, r3, #7
 80055bc:	683a      	ldr	r2, [r7, #0]
 80055be:	429a      	cmp	r2, r3
 80055c0:	d90c      	bls.n	80055dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c2:	4b65      	ldr	r3, [pc, #404]	; (8005758 <HAL_RCC_ClockConfig+0x1b8>)
 80055c4:	683a      	ldr	r2, [r7, #0]
 80055c6:	b2d2      	uxtb	r2, r2
 80055c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ca:	4b63      	ldr	r3, [pc, #396]	; (8005758 <HAL_RCC_ClockConfig+0x1b8>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0307 	and.w	r3, r3, #7
 80055d2:	683a      	ldr	r2, [r7, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d001      	beq.n	80055dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055d8:	2301      	movs	r3, #1
 80055da:	e0b8      	b.n	800574e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	f003 0302 	and.w	r3, r3, #2
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d020      	beq.n	800562a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f003 0304 	and.w	r3, r3, #4
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d005      	beq.n	8005600 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055f4:	4b59      	ldr	r3, [pc, #356]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	4a58      	ldr	r2, [pc, #352]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 80055fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f003 0308 	and.w	r3, r3, #8
 8005608:	2b00      	cmp	r3, #0
 800560a:	d005      	beq.n	8005618 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800560c:	4b53      	ldr	r3, [pc, #332]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4a52      	ldr	r2, [pc, #328]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005616:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005618:	4b50      	ldr	r3, [pc, #320]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	494d      	ldr	r1, [pc, #308]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005626:	4313      	orrs	r3, r2
 8005628:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 0301 	and.w	r3, r3, #1
 8005632:	2b00      	cmp	r3, #0
 8005634:	d044      	beq.n	80056c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	685b      	ldr	r3, [r3, #4]
 800563a:	2b01      	cmp	r3, #1
 800563c:	d107      	bne.n	800564e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800563e:	4b47      	ldr	r3, [pc, #284]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d119      	bne.n	800567e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800564a:	2301      	movs	r3, #1
 800564c:	e07f      	b.n	800574e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	2b02      	cmp	r3, #2
 8005654:	d003      	beq.n	800565e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800565a:	2b03      	cmp	r3, #3
 800565c:	d107      	bne.n	800566e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800565e:	4b3f      	ldr	r3, [pc, #252]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	d109      	bne.n	800567e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800566a:	2301      	movs	r3, #1
 800566c:	e06f      	b.n	800574e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800566e:	4b3b      	ldr	r3, [pc, #236]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0302 	and.w	r3, r3, #2
 8005676:	2b00      	cmp	r3, #0
 8005678:	d101      	bne.n	800567e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	e067      	b.n	800574e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800567e:	4b37      	ldr	r3, [pc, #220]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f023 0203 	bic.w	r2, r3, #3
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	685b      	ldr	r3, [r3, #4]
 800568a:	4934      	ldr	r1, [pc, #208]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 800568c:	4313      	orrs	r3, r2
 800568e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005690:	f7fc fc78 	bl	8001f84 <HAL_GetTick>
 8005694:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005696:	e00a      	b.n	80056ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005698:	f7fc fc74 	bl	8001f84 <HAL_GetTick>
 800569c:	4602      	mov	r2, r0
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	1ad3      	subs	r3, r2, r3
 80056a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80056a6:	4293      	cmp	r3, r2
 80056a8:	d901      	bls.n	80056ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056aa:	2303      	movs	r3, #3
 80056ac:	e04f      	b.n	800574e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056ae:	4b2b      	ldr	r3, [pc, #172]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 80056b0:	689b      	ldr	r3, [r3, #8]
 80056b2:	f003 020c 	and.w	r2, r3, #12
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	685b      	ldr	r3, [r3, #4]
 80056ba:	009b      	lsls	r3, r3, #2
 80056bc:	429a      	cmp	r2, r3
 80056be:	d1eb      	bne.n	8005698 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056c0:	4b25      	ldr	r3, [pc, #148]	; (8005758 <HAL_RCC_ClockConfig+0x1b8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0307 	and.w	r3, r3, #7
 80056c8:	683a      	ldr	r2, [r7, #0]
 80056ca:	429a      	cmp	r2, r3
 80056cc:	d20c      	bcs.n	80056e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056ce:	4b22      	ldr	r3, [pc, #136]	; (8005758 <HAL_RCC_ClockConfig+0x1b8>)
 80056d0:	683a      	ldr	r2, [r7, #0]
 80056d2:	b2d2      	uxtb	r2, r2
 80056d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056d6:	4b20      	ldr	r3, [pc, #128]	; (8005758 <HAL_RCC_ClockConfig+0x1b8>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	683a      	ldr	r2, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d001      	beq.n	80056e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056e4:	2301      	movs	r3, #1
 80056e6:	e032      	b.n	800574e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0304 	and.w	r3, r3, #4
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d008      	beq.n	8005706 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056f4:	4b19      	ldr	r3, [pc, #100]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	4916      	ldr	r1, [pc, #88]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005702:	4313      	orrs	r3, r2
 8005704:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0308 	and.w	r3, r3, #8
 800570e:	2b00      	cmp	r3, #0
 8005710:	d009      	beq.n	8005726 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005712:	4b12      	ldr	r3, [pc, #72]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	00db      	lsls	r3, r3, #3
 8005720:	490e      	ldr	r1, [pc, #56]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 8005722:	4313      	orrs	r3, r2
 8005724:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005726:	f000 f821 	bl	800576c <HAL_RCC_GetSysClockFreq>
 800572a:	4602      	mov	r2, r0
 800572c:	4b0b      	ldr	r3, [pc, #44]	; (800575c <HAL_RCC_ClockConfig+0x1bc>)
 800572e:	689b      	ldr	r3, [r3, #8]
 8005730:	091b      	lsrs	r3, r3, #4
 8005732:	f003 030f 	and.w	r3, r3, #15
 8005736:	490a      	ldr	r1, [pc, #40]	; (8005760 <HAL_RCC_ClockConfig+0x1c0>)
 8005738:	5ccb      	ldrb	r3, [r1, r3]
 800573a:	fa22 f303 	lsr.w	r3, r2, r3
 800573e:	4a09      	ldr	r2, [pc, #36]	; (8005764 <HAL_RCC_ClockConfig+0x1c4>)
 8005740:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005742:	4b09      	ldr	r3, [pc, #36]	; (8005768 <HAL_RCC_ClockConfig+0x1c8>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	4618      	mov	r0, r3
 8005748:	f7fc fbd8 	bl	8001efc <HAL_InitTick>

  return HAL_OK;
 800574c:	2300      	movs	r3, #0
}
 800574e:	4618      	mov	r0, r3
 8005750:	3710      	adds	r7, #16
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}
 8005756:	bf00      	nop
 8005758:	40023c00 	.word	0x40023c00
 800575c:	40023800 	.word	0x40023800
 8005760:	0800ce40 	.word	0x0800ce40
 8005764:	20000018 	.word	0x20000018
 8005768:	2000001c 	.word	0x2000001c

0800576c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800576c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005770:	b094      	sub	sp, #80	; 0x50
 8005772:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005774:	2300      	movs	r3, #0
 8005776:	647b      	str	r3, [r7, #68]	; 0x44
 8005778:	2300      	movs	r3, #0
 800577a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800577c:	2300      	movs	r3, #0
 800577e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005780:	2300      	movs	r3, #0
 8005782:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005784:	4b79      	ldr	r3, [pc, #484]	; (800596c <HAL_RCC_GetSysClockFreq+0x200>)
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	f003 030c 	and.w	r3, r3, #12
 800578c:	2b08      	cmp	r3, #8
 800578e:	d00d      	beq.n	80057ac <HAL_RCC_GetSysClockFreq+0x40>
 8005790:	2b08      	cmp	r3, #8
 8005792:	f200 80e1 	bhi.w	8005958 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <HAL_RCC_GetSysClockFreq+0x34>
 800579a:	2b04      	cmp	r3, #4
 800579c:	d003      	beq.n	80057a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800579e:	e0db      	b.n	8005958 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057a0:	4b73      	ldr	r3, [pc, #460]	; (8005970 <HAL_RCC_GetSysClockFreq+0x204>)
 80057a2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80057a4:	e0db      	b.n	800595e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057a6:	4b73      	ldr	r3, [pc, #460]	; (8005974 <HAL_RCC_GetSysClockFreq+0x208>)
 80057a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80057aa:	e0d8      	b.n	800595e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057ac:	4b6f      	ldr	r3, [pc, #444]	; (800596c <HAL_RCC_GetSysClockFreq+0x200>)
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057b4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057b6:	4b6d      	ldr	r3, [pc, #436]	; (800596c <HAL_RCC_GetSysClockFreq+0x200>)
 80057b8:	685b      	ldr	r3, [r3, #4]
 80057ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d063      	beq.n	800588a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057c2:	4b6a      	ldr	r3, [pc, #424]	; (800596c <HAL_RCC_GetSysClockFreq+0x200>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	099b      	lsrs	r3, r3, #6
 80057c8:	2200      	movs	r2, #0
 80057ca:	63bb      	str	r3, [r7, #56]	; 0x38
 80057cc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80057ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80057d4:	633b      	str	r3, [r7, #48]	; 0x30
 80057d6:	2300      	movs	r3, #0
 80057d8:	637b      	str	r3, [r7, #52]	; 0x34
 80057da:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80057de:	4622      	mov	r2, r4
 80057e0:	462b      	mov	r3, r5
 80057e2:	f04f 0000 	mov.w	r0, #0
 80057e6:	f04f 0100 	mov.w	r1, #0
 80057ea:	0159      	lsls	r1, r3, #5
 80057ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80057f0:	0150      	lsls	r0, r2, #5
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4621      	mov	r1, r4
 80057f8:	1a51      	subs	r1, r2, r1
 80057fa:	6139      	str	r1, [r7, #16]
 80057fc:	4629      	mov	r1, r5
 80057fe:	eb63 0301 	sbc.w	r3, r3, r1
 8005802:	617b      	str	r3, [r7, #20]
 8005804:	f04f 0200 	mov.w	r2, #0
 8005808:	f04f 0300 	mov.w	r3, #0
 800580c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005810:	4659      	mov	r1, fp
 8005812:	018b      	lsls	r3, r1, #6
 8005814:	4651      	mov	r1, sl
 8005816:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800581a:	4651      	mov	r1, sl
 800581c:	018a      	lsls	r2, r1, #6
 800581e:	4651      	mov	r1, sl
 8005820:	ebb2 0801 	subs.w	r8, r2, r1
 8005824:	4659      	mov	r1, fp
 8005826:	eb63 0901 	sbc.w	r9, r3, r1
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005836:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800583a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800583e:	4690      	mov	r8, r2
 8005840:	4699      	mov	r9, r3
 8005842:	4623      	mov	r3, r4
 8005844:	eb18 0303 	adds.w	r3, r8, r3
 8005848:	60bb      	str	r3, [r7, #8]
 800584a:	462b      	mov	r3, r5
 800584c:	eb49 0303 	adc.w	r3, r9, r3
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	f04f 0200 	mov.w	r2, #0
 8005856:	f04f 0300 	mov.w	r3, #0
 800585a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800585e:	4629      	mov	r1, r5
 8005860:	024b      	lsls	r3, r1, #9
 8005862:	4621      	mov	r1, r4
 8005864:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005868:	4621      	mov	r1, r4
 800586a:	024a      	lsls	r2, r1, #9
 800586c:	4610      	mov	r0, r2
 800586e:	4619      	mov	r1, r3
 8005870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005872:	2200      	movs	r2, #0
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
 8005876:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005878:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800587c:	f7fb fa04 	bl	8000c88 <__aeabi_uldivmod>
 8005880:	4602      	mov	r2, r0
 8005882:	460b      	mov	r3, r1
 8005884:	4613      	mov	r3, r2
 8005886:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005888:	e058      	b.n	800593c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800588a:	4b38      	ldr	r3, [pc, #224]	; (800596c <HAL_RCC_GetSysClockFreq+0x200>)
 800588c:	685b      	ldr	r3, [r3, #4]
 800588e:	099b      	lsrs	r3, r3, #6
 8005890:	2200      	movs	r2, #0
 8005892:	4618      	mov	r0, r3
 8005894:	4611      	mov	r1, r2
 8005896:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800589a:	623b      	str	r3, [r7, #32]
 800589c:	2300      	movs	r3, #0
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
 80058a0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80058a4:	4642      	mov	r2, r8
 80058a6:	464b      	mov	r3, r9
 80058a8:	f04f 0000 	mov.w	r0, #0
 80058ac:	f04f 0100 	mov.w	r1, #0
 80058b0:	0159      	lsls	r1, r3, #5
 80058b2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80058b6:	0150      	lsls	r0, r2, #5
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4641      	mov	r1, r8
 80058be:	ebb2 0a01 	subs.w	sl, r2, r1
 80058c2:	4649      	mov	r1, r9
 80058c4:	eb63 0b01 	sbc.w	fp, r3, r1
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80058d4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80058d8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80058dc:	ebb2 040a 	subs.w	r4, r2, sl
 80058e0:	eb63 050b 	sbc.w	r5, r3, fp
 80058e4:	f04f 0200 	mov.w	r2, #0
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	00eb      	lsls	r3, r5, #3
 80058ee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058f2:	00e2      	lsls	r2, r4, #3
 80058f4:	4614      	mov	r4, r2
 80058f6:	461d      	mov	r5, r3
 80058f8:	4643      	mov	r3, r8
 80058fa:	18e3      	adds	r3, r4, r3
 80058fc:	603b      	str	r3, [r7, #0]
 80058fe:	464b      	mov	r3, r9
 8005900:	eb45 0303 	adc.w	r3, r5, r3
 8005904:	607b      	str	r3, [r7, #4]
 8005906:	f04f 0200 	mov.w	r2, #0
 800590a:	f04f 0300 	mov.w	r3, #0
 800590e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005912:	4629      	mov	r1, r5
 8005914:	028b      	lsls	r3, r1, #10
 8005916:	4621      	mov	r1, r4
 8005918:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800591c:	4621      	mov	r1, r4
 800591e:	028a      	lsls	r2, r1, #10
 8005920:	4610      	mov	r0, r2
 8005922:	4619      	mov	r1, r3
 8005924:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005926:	2200      	movs	r2, #0
 8005928:	61bb      	str	r3, [r7, #24]
 800592a:	61fa      	str	r2, [r7, #28]
 800592c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005930:	f7fb f9aa 	bl	8000c88 <__aeabi_uldivmod>
 8005934:	4602      	mov	r2, r0
 8005936:	460b      	mov	r3, r1
 8005938:	4613      	mov	r3, r2
 800593a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800593c:	4b0b      	ldr	r3, [pc, #44]	; (800596c <HAL_RCC_GetSysClockFreq+0x200>)
 800593e:	685b      	ldr	r3, [r3, #4]
 8005940:	0c1b      	lsrs	r3, r3, #16
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	3301      	adds	r3, #1
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800594c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800594e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005950:	fbb2 f3f3 	udiv	r3, r2, r3
 8005954:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005956:	e002      	b.n	800595e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005958:	4b05      	ldr	r3, [pc, #20]	; (8005970 <HAL_RCC_GetSysClockFreq+0x204>)
 800595a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800595c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800595e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005960:	4618      	mov	r0, r3
 8005962:	3750      	adds	r7, #80	; 0x50
 8005964:	46bd      	mov	sp, r7
 8005966:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800596a:	bf00      	nop
 800596c:	40023800 	.word	0x40023800
 8005970:	00f42400 	.word	0x00f42400
 8005974:	007a1200 	.word	0x007a1200

08005978 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005978:	b480      	push	{r7}
 800597a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800597c:	4b03      	ldr	r3, [pc, #12]	; (800598c <HAL_RCC_GetHCLKFreq+0x14>)
 800597e:	681b      	ldr	r3, [r3, #0]
}
 8005980:	4618      	mov	r0, r3
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr
 800598a:	bf00      	nop
 800598c:	20000018 	.word	0x20000018

08005990 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005994:	f7ff fff0 	bl	8005978 <HAL_RCC_GetHCLKFreq>
 8005998:	4602      	mov	r2, r0
 800599a:	4b05      	ldr	r3, [pc, #20]	; (80059b0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800599c:	689b      	ldr	r3, [r3, #8]
 800599e:	0a9b      	lsrs	r3, r3, #10
 80059a0:	f003 0307 	and.w	r3, r3, #7
 80059a4:	4903      	ldr	r1, [pc, #12]	; (80059b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80059a6:	5ccb      	ldrb	r3, [r1, r3]
 80059a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	40023800 	.word	0x40023800
 80059b4:	0800ce50 	.word	0x0800ce50

080059b8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b086      	sub	sp, #24
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80059c4:	2300      	movs	r3, #0
 80059c6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f003 0301 	and.w	r3, r3, #1
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d105      	bne.n	80059e0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d035      	beq.n	8005a4c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80059e0:	4b62      	ldr	r3, [pc, #392]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80059e2:	2200      	movs	r2, #0
 80059e4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80059e6:	f7fc facd 	bl	8001f84 <HAL_GetTick>
 80059ea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80059ec:	e008      	b.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80059ee:	f7fc fac9 	bl	8001f84 <HAL_GetTick>
 80059f2:	4602      	mov	r2, r0
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	2b02      	cmp	r3, #2
 80059fa:	d901      	bls.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059fc:	2303      	movs	r3, #3
 80059fe:	e0b0      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005a00:	4b5b      	ldr	r3, [pc, #364]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1f0      	bne.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	019a      	lsls	r2, r3, #6
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	071b      	lsls	r3, r3, #28
 8005a18:	4955      	ldr	r1, [pc, #340]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a20:	4b52      	ldr	r3, [pc, #328]	; (8005b6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005a22:	2201      	movs	r2, #1
 8005a24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a26:	f7fc faad 	bl	8001f84 <HAL_GetTick>
 8005a2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a2c:	e008      	b.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005a2e:	f7fc faa9 	bl	8001f84 <HAL_GetTick>
 8005a32:	4602      	mov	r2, r0
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	1ad3      	subs	r3, r2, r3
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d901      	bls.n	8005a40 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a3c:	2303      	movs	r3, #3
 8005a3e:	e090      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a40:	4b4b      	ldr	r3, [pc, #300]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d0f0      	beq.n	8005a2e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f003 0302 	and.w	r3, r3, #2
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	f000 8083 	beq.w	8005b60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	60fb      	str	r3, [r7, #12]
 8005a5e:	4b44      	ldr	r3, [pc, #272]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a62:	4a43      	ldr	r2, [pc, #268]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a68:	6413      	str	r3, [r2, #64]	; 0x40
 8005a6a:	4b41      	ldr	r3, [pc, #260]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005a72:	60fb      	str	r3, [r7, #12]
 8005a74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005a76:	4b3f      	ldr	r3, [pc, #252]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a3e      	ldr	r2, [pc, #248]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005a80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005a82:	f7fc fa7f 	bl	8001f84 <HAL_GetTick>
 8005a86:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a88:	e008      	b.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005a8a:	f7fc fa7b 	bl	8001f84 <HAL_GetTick>
 8005a8e:	4602      	mov	r2, r0
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	1ad3      	subs	r3, r2, r3
 8005a94:	2b02      	cmp	r3, #2
 8005a96:	d901      	bls.n	8005a9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e062      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005a9c:	4b35      	ldr	r3, [pc, #212]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d0f0      	beq.n	8005a8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005aa8:	4b31      	ldr	r3, [pc, #196]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ab0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d02f      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	68db      	ldr	r3, [r3, #12]
 8005abc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	429a      	cmp	r2, r3
 8005ac4:	d028      	beq.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ac6:	4b2a      	ldr	r3, [pc, #168]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ac8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005aca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ace:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ad0:	4b29      	ldr	r3, [pc, #164]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ad2:	2201      	movs	r2, #1
 8005ad4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ad6:	4b28      	ldr	r3, [pc, #160]	; (8005b78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ad8:	2200      	movs	r2, #0
 8005ada:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005adc:	4a24      	ldr	r2, [pc, #144]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ade:	693b      	ldr	r3, [r7, #16]
 8005ae0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ae2:	4b23      	ldr	r3, [pc, #140]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ae4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ae6:	f003 0301 	and.w	r3, r3, #1
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d114      	bne.n	8005b18 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005aee:	f7fc fa49 	bl	8001f84 <HAL_GetTick>
 8005af2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005af4:	e00a      	b.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005af6:	f7fc fa45 	bl	8001f84 <HAL_GetTick>
 8005afa:	4602      	mov	r2, r0
 8005afc:	697b      	ldr	r3, [r7, #20]
 8005afe:	1ad3      	subs	r3, r2, r3
 8005b00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005b04:	4293      	cmp	r3, r2
 8005b06:	d901      	bls.n	8005b0c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005b08:	2303      	movs	r3, #3
 8005b0a:	e02a      	b.n	8005b62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005b0c:	4b18      	ldr	r3, [pc, #96]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005b10:	f003 0302 	and.w	r3, r3, #2
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d0ee      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005b24:	d10d      	bne.n	8005b42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005b26:	4b12      	ldr	r3, [pc, #72]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b28:	689b      	ldr	r3, [r3, #8]
 8005b2a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005b36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b3a:	490d      	ldr	r1, [pc, #52]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	608b      	str	r3, [r1, #8]
 8005b40:	e005      	b.n	8005b4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005b42:	4b0b      	ldr	r3, [pc, #44]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b44:	689b      	ldr	r3, [r3, #8]
 8005b46:	4a0a      	ldr	r2, [pc, #40]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b48:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005b4c:	6093      	str	r3, [r2, #8]
 8005b4e:	4b08      	ldr	r3, [pc, #32]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005b5a:	4905      	ldr	r1, [pc, #20]	; (8005b70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005b5c:	4313      	orrs	r3, r2
 8005b5e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005b60:	2300      	movs	r3, #0
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3718      	adds	r7, #24
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	42470068 	.word	0x42470068
 8005b70:	40023800 	.word	0x40023800
 8005b74:	40007000 	.word	0x40007000
 8005b78:	42470e40 	.word	0x42470e40

08005b7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005b84:	2300      	movs	r3, #0
 8005b86:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005b88:	2300      	movs	r3, #0
 8005b8a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005b90:	2300      	movs	r3, #0
 8005b92:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2b01      	cmp	r3, #1
 8005b98:	d13e      	bne.n	8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005b9a:	4b23      	ldr	r3, [pc, #140]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005b9c:	689b      	ldr	r3, [r3, #8]
 8005b9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005ba2:	60fb      	str	r3, [r7, #12]
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d005      	beq.n	8005bb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2b01      	cmp	r3, #1
 8005bae:	d12f      	bne.n	8005c10 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005bb0:	4b1e      	ldr	r3, [pc, #120]	; (8005c2c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005bb2:	617b      	str	r3, [r7, #20]
          break;
 8005bb4:	e02f      	b.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005bb6:	4b1c      	ldr	r3, [pc, #112]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005bc2:	d108      	bne.n	8005bd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005bc4:	4b18      	ldr	r3, [pc, #96]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bcc:	4a18      	ldr	r2, [pc, #96]	; (8005c30 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005bd2:	613b      	str	r3, [r7, #16]
 8005bd4:	e007      	b.n	8005be6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005bd6:	4b14      	ldr	r3, [pc, #80]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bde:	4a15      	ldr	r2, [pc, #84]	; (8005c34 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005be0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005be4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005be6:	4b10      	ldr	r3, [pc, #64]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005be8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005bec:	099b      	lsrs	r3, r3, #6
 8005bee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	fb02 f303 	mul.w	r3, r2, r3
 8005bf8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005bfa:	4b0b      	ldr	r3, [pc, #44]	; (8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c00:	0f1b      	lsrs	r3, r3, #28
 8005c02:	f003 0307 	and.w	r3, r3, #7
 8005c06:	68ba      	ldr	r2, [r7, #8]
 8005c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c0c:	617b      	str	r3, [r7, #20]
          break;
 8005c0e:	e002      	b.n	8005c16 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005c10:	2300      	movs	r3, #0
 8005c12:	617b      	str	r3, [r7, #20]
          break;
 8005c14:	bf00      	nop
        }
      }
      break;
 8005c16:	bf00      	nop
    }
  }
  return frequency;
 8005c18:	697b      	ldr	r3, [r7, #20]
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	371c      	adds	r7, #28
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr
 8005c26:	bf00      	nop
 8005c28:	40023800 	.word	0x40023800
 8005c2c:	00bb8000 	.word	0x00bb8000
 8005c30:	007a1200 	.word	0x007a1200
 8005c34:	00f42400 	.word	0x00f42400

08005c38 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d101      	bne.n	8005c4a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e07b      	b.n	8005d42 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d108      	bne.n	8005c64 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	685b      	ldr	r3, [r3, #4]
 8005c56:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005c5a:	d009      	beq.n	8005c70 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2200      	movs	r2, #0
 8005c60:	61da      	str	r2, [r3, #28]
 8005c62:	e005      	b.n	8005c70 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2200      	movs	r2, #0
 8005c68:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	2200      	movs	r2, #0
 8005c6e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2200      	movs	r2, #0
 8005c74:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d106      	bne.n	8005c90 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	2200      	movs	r2, #0
 8005c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005c8a:	6878      	ldr	r0, [r7, #4]
 8005c8c:	f7fb ff74 	bl	8001b78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2202      	movs	r2, #2
 8005c94:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	681a      	ldr	r2, [r3, #0]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ca6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	685b      	ldr	r3, [r3, #4]
 8005cac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005cb8:	431a      	orrs	r2, r3
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	68db      	ldr	r3, [r3, #12]
 8005cbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cc2:	431a      	orrs	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	691b      	ldr	r3, [r3, #16]
 8005cc8:	f003 0302 	and.w	r3, r3, #2
 8005ccc:	431a      	orrs	r2, r3
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	695b      	ldr	r3, [r3, #20]
 8005cd2:	f003 0301 	and.w	r3, r3, #1
 8005cd6:	431a      	orrs	r2, r3
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	699b      	ldr	r3, [r3, #24]
 8005cdc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005ce0:	431a      	orrs	r2, r3
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	69db      	ldr	r3, [r3, #28]
 8005ce6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005cea:	431a      	orrs	r2, r3
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	6a1b      	ldr	r3, [r3, #32]
 8005cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005cf4:	ea42 0103 	orr.w	r1, r2, r3
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005cfc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	430a      	orrs	r2, r1
 8005d06:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	699b      	ldr	r3, [r3, #24]
 8005d0c:	0c1b      	lsrs	r3, r3, #16
 8005d0e:	f003 0104 	and.w	r1, r3, #4
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d16:	f003 0210 	and.w	r2, r3, #16
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	430a      	orrs	r2, r1
 8005d20:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	69da      	ldr	r2, [r3, #28]
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005d30:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2200      	movs	r2, #0
 8005d36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005d40:	2300      	movs	r3, #0
}
 8005d42:	4618      	mov	r0, r3
 8005d44:	3708      	adds	r7, #8
 8005d46:	46bd      	mov	sp, r7
 8005d48:	bd80      	pop	{r7, pc}

08005d4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d4a:	b580      	push	{r7, lr}
 8005d4c:	b082      	sub	sp, #8
 8005d4e:	af00      	add	r7, sp, #0
 8005d50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	d101      	bne.n	8005d5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	e041      	b.n	8005de0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d106      	bne.n	8005d76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	2200      	movs	r2, #0
 8005d6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7fb ff49 	bl	8001c08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2202      	movs	r2, #2
 8005d7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681a      	ldr	r2, [r3, #0]
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3304      	adds	r3, #4
 8005d86:	4619      	mov	r1, r3
 8005d88:	4610      	mov	r0, r2
 8005d8a:	f000 f82d 	bl	8005de8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	2201      	movs	r2, #1
 8005d92:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2201      	movs	r2, #1
 8005d9a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3708      	adds	r7, #8
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}

08005de8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005de8:	b480      	push	{r7}
 8005dea:	b085      	sub	sp, #20
 8005dec:	af00      	add	r7, sp, #0
 8005dee:	6078      	str	r0, [r7, #4]
 8005df0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	4a40      	ldr	r2, [pc, #256]	; (8005efc <TIM_Base_SetConfig+0x114>)
 8005dfc:	4293      	cmp	r3, r2
 8005dfe:	d013      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e06:	d00f      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	4a3d      	ldr	r2, [pc, #244]	; (8005f00 <TIM_Base_SetConfig+0x118>)
 8005e0c:	4293      	cmp	r3, r2
 8005e0e:	d00b      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	4a3c      	ldr	r2, [pc, #240]	; (8005f04 <TIM_Base_SetConfig+0x11c>)
 8005e14:	4293      	cmp	r3, r2
 8005e16:	d007      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	4a3b      	ldr	r2, [pc, #236]	; (8005f08 <TIM_Base_SetConfig+0x120>)
 8005e1c:	4293      	cmp	r3, r2
 8005e1e:	d003      	beq.n	8005e28 <TIM_Base_SetConfig+0x40>
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a3a      	ldr	r2, [pc, #232]	; (8005f0c <TIM_Base_SetConfig+0x124>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d108      	bne.n	8005e3a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	685b      	ldr	r3, [r3, #4]
 8005e34:	68fa      	ldr	r2, [r7, #12]
 8005e36:	4313      	orrs	r3, r2
 8005e38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	4a2f      	ldr	r2, [pc, #188]	; (8005efc <TIM_Base_SetConfig+0x114>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d02b      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e48:	d027      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	4a2c      	ldr	r2, [pc, #176]	; (8005f00 <TIM_Base_SetConfig+0x118>)
 8005e4e:	4293      	cmp	r3, r2
 8005e50:	d023      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	4a2b      	ldr	r2, [pc, #172]	; (8005f04 <TIM_Base_SetConfig+0x11c>)
 8005e56:	4293      	cmp	r3, r2
 8005e58:	d01f      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	4a2a      	ldr	r2, [pc, #168]	; (8005f08 <TIM_Base_SetConfig+0x120>)
 8005e5e:	4293      	cmp	r3, r2
 8005e60:	d01b      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a29      	ldr	r2, [pc, #164]	; (8005f0c <TIM_Base_SetConfig+0x124>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d017      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	4a28      	ldr	r2, [pc, #160]	; (8005f10 <TIM_Base_SetConfig+0x128>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d013      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	4a27      	ldr	r2, [pc, #156]	; (8005f14 <TIM_Base_SetConfig+0x12c>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d00f      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	4a26      	ldr	r2, [pc, #152]	; (8005f18 <TIM_Base_SetConfig+0x130>)
 8005e7e:	4293      	cmp	r3, r2
 8005e80:	d00b      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	4a25      	ldr	r2, [pc, #148]	; (8005f1c <TIM_Base_SetConfig+0x134>)
 8005e86:	4293      	cmp	r3, r2
 8005e88:	d007      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	4a24      	ldr	r2, [pc, #144]	; (8005f20 <TIM_Base_SetConfig+0x138>)
 8005e8e:	4293      	cmp	r3, r2
 8005e90:	d003      	beq.n	8005e9a <TIM_Base_SetConfig+0xb2>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	4a23      	ldr	r2, [pc, #140]	; (8005f24 <TIM_Base_SetConfig+0x13c>)
 8005e96:	4293      	cmp	r3, r2
 8005e98:	d108      	bne.n	8005eac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ea0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	68fa      	ldr	r2, [r7, #12]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005eb2:	683b      	ldr	r3, [r7, #0]
 8005eb4:	695b      	ldr	r3, [r3, #20]
 8005eb6:	4313      	orrs	r3, r2
 8005eb8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	689a      	ldr	r2, [r3, #8]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	681a      	ldr	r2, [r3, #0]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	4a0a      	ldr	r2, [pc, #40]	; (8005efc <TIM_Base_SetConfig+0x114>)
 8005ed4:	4293      	cmp	r3, r2
 8005ed6:	d003      	beq.n	8005ee0 <TIM_Base_SetConfig+0xf8>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4a0c      	ldr	r2, [pc, #48]	; (8005f0c <TIM_Base_SetConfig+0x124>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d103      	bne.n	8005ee8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	691a      	ldr	r2, [r3, #16]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	2201      	movs	r2, #1
 8005eec:	615a      	str	r2, [r3, #20]
}
 8005eee:	bf00      	nop
 8005ef0:	3714      	adds	r7, #20
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr
 8005efa:	bf00      	nop
 8005efc:	40010000 	.word	0x40010000
 8005f00:	40000400 	.word	0x40000400
 8005f04:	40000800 	.word	0x40000800
 8005f08:	40000c00 	.word	0x40000c00
 8005f0c:	40010400 	.word	0x40010400
 8005f10:	40014000 	.word	0x40014000
 8005f14:	40014400 	.word	0x40014400
 8005f18:	40014800 	.word	0x40014800
 8005f1c:	40001800 	.word	0x40001800
 8005f20:	40001c00 	.word	0x40001c00
 8005f24:	40002000 	.word	0x40002000

08005f28 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005f28:	b084      	sub	sp, #16
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
 8005f32:	f107 001c 	add.w	r0, r7, #28
 8005f36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f3c:	2b01      	cmp	r3, #1
 8005f3e:	d122      	bne.n	8005f86 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	68db      	ldr	r3, [r3, #12]
 8005f50:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f58:	687a      	ldr	r2, [r7, #4]
 8005f5a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f6a:	2b01      	cmp	r3, #1
 8005f6c:	d105      	bne.n	8005f7a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f7a:	6878      	ldr	r0, [r7, #4]
 8005f7c:	f000 f9c0 	bl	8006300 <USB_CoreReset>
 8005f80:	4603      	mov	r3, r0
 8005f82:	73fb      	strb	r3, [r7, #15]
 8005f84:	e01a      	b.n	8005fbc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f000 f9b4 	bl	8006300 <USB_CoreReset>
 8005f98:	4603      	mov	r3, r0
 8005f9a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005f9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fa6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	639a      	str	r2, [r3, #56]	; 0x38
 8005fae:	e005      	b.n	8005fbc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fb4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d10b      	bne.n	8005fda <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	689b      	ldr	r3, [r3, #8]
 8005fc6:	f043 0206 	orr.w	r2, r3, #6
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	f043 0220 	orr.w	r2, r3, #32
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005fda:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fdc:	4618      	mov	r0, r3
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005fe6:	b004      	add	sp, #16
 8005fe8:	4770      	bx	lr

08005fea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b083      	sub	sp, #12
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	f043 0201 	orr.w	r2, r3, #1
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	370c      	adds	r7, #12
 8006004:	46bd      	mov	sp, r7
 8006006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600a:	4770      	bx	lr

0800600c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800600c:	b480      	push	{r7}
 800600e:	b083      	sub	sp, #12
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	689b      	ldr	r3, [r3, #8]
 8006018:	f023 0201 	bic.w	r2, r3, #1
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	370c      	adds	r7, #12
 8006026:	46bd      	mov	sp, r7
 8006028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602c:	4770      	bx	lr

0800602e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800602e:	b580      	push	{r7, lr}
 8006030:	b084      	sub	sp, #16
 8006032:	af00      	add	r7, sp, #0
 8006034:	6078      	str	r0, [r7, #4]
 8006036:	460b      	mov	r3, r1
 8006038:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800603a:	2300      	movs	r3, #0
 800603c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800604a:	78fb      	ldrb	r3, [r7, #3]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d115      	bne.n	800607c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800605c:	2001      	movs	r0, #1
 800605e:	f7fb ff9d 	bl	8001f9c <HAL_Delay>
      ms++;
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	3301      	adds	r3, #1
 8006066:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 f93a 	bl	80062e2 <USB_GetMode>
 800606e:	4603      	mov	r3, r0
 8006070:	2b01      	cmp	r3, #1
 8006072:	d01e      	beq.n	80060b2 <USB_SetCurrentMode+0x84>
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	2b31      	cmp	r3, #49	; 0x31
 8006078:	d9f0      	bls.n	800605c <USB_SetCurrentMode+0x2e>
 800607a:	e01a      	b.n	80060b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800607c:	78fb      	ldrb	r3, [r7, #3]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d115      	bne.n	80060ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	68db      	ldr	r3, [r3, #12]
 8006086:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800608e:	2001      	movs	r0, #1
 8006090:	f7fb ff84 	bl	8001f9c <HAL_Delay>
      ms++;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	3301      	adds	r3, #1
 8006098:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f921 	bl	80062e2 <USB_GetMode>
 80060a0:	4603      	mov	r3, r0
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d005      	beq.n	80060b2 <USB_SetCurrentMode+0x84>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	2b31      	cmp	r3, #49	; 0x31
 80060aa:	d9f0      	bls.n	800608e <USB_SetCurrentMode+0x60>
 80060ac:	e001      	b.n	80060b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e005      	b.n	80060be <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b32      	cmp	r3, #50	; 0x32
 80060b6:	d101      	bne.n	80060bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80060b8:	2301      	movs	r3, #1
 80060ba:	e000      	b.n	80060be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80060bc:	2300      	movs	r3, #0
}
 80060be:	4618      	mov	r0, r3
 80060c0:	3710      	adds	r7, #16
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
	...

080060c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80060c8:	b480      	push	{r7}
 80060ca:	b085      	sub	sp, #20
 80060cc:	af00      	add	r7, sp, #0
 80060ce:	6078      	str	r0, [r7, #4]
 80060d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80060d2:	2300      	movs	r3, #0
 80060d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	3301      	adds	r3, #1
 80060da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	4a13      	ldr	r2, [pc, #76]	; (800612c <USB_FlushTxFifo+0x64>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d901      	bls.n	80060e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80060e4:	2303      	movs	r3, #3
 80060e6:	e01b      	b.n	8006120 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	691b      	ldr	r3, [r3, #16]
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	daf2      	bge.n	80060d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80060f0:	2300      	movs	r3, #0
 80060f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	019b      	lsls	r3, r3, #6
 80060f8:	f043 0220 	orr.w	r2, r3, #32
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3301      	adds	r3, #1
 8006104:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4a08      	ldr	r2, [pc, #32]	; (800612c <USB_FlushTxFifo+0x64>)
 800610a:	4293      	cmp	r3, r2
 800610c:	d901      	bls.n	8006112 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800610e:	2303      	movs	r3, #3
 8006110:	e006      	b.n	8006120 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	691b      	ldr	r3, [r3, #16]
 8006116:	f003 0320 	and.w	r3, r3, #32
 800611a:	2b20      	cmp	r3, #32
 800611c:	d0f0      	beq.n	8006100 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800611e:	2300      	movs	r3, #0
}
 8006120:	4618      	mov	r0, r3
 8006122:	3714      	adds	r7, #20
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr
 800612c:	00030d40 	.word	0x00030d40

08006130 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006130:	b480      	push	{r7}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006138:	2300      	movs	r3, #0
 800613a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	3301      	adds	r3, #1
 8006140:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4a11      	ldr	r2, [pc, #68]	; (800618c <USB_FlushRxFifo+0x5c>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d901      	bls.n	800614e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e018      	b.n	8006180 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	691b      	ldr	r3, [r3, #16]
 8006152:	2b00      	cmp	r3, #0
 8006154:	daf2      	bge.n	800613c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006156:	2300      	movs	r3, #0
 8006158:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	2210      	movs	r2, #16
 800615e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	3301      	adds	r3, #1
 8006164:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	4a08      	ldr	r2, [pc, #32]	; (800618c <USB_FlushRxFifo+0x5c>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d901      	bls.n	8006172 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	e006      	b.n	8006180 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	691b      	ldr	r3, [r3, #16]
 8006176:	f003 0310 	and.w	r3, r3, #16
 800617a:	2b10      	cmp	r3, #16
 800617c:	d0f0      	beq.n	8006160 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800617e:	2300      	movs	r3, #0
}
 8006180:	4618      	mov	r0, r3
 8006182:	3714      	adds	r7, #20
 8006184:	46bd      	mov	sp, r7
 8006186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800618a:	4770      	bx	lr
 800618c:	00030d40 	.word	0x00030d40

08006190 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006190:	b480      	push	{r7}
 8006192:	b089      	sub	sp, #36	; 0x24
 8006194:	af00      	add	r7, sp, #0
 8006196:	60f8      	str	r0, [r7, #12]
 8006198:	60b9      	str	r1, [r7, #8]
 800619a:	4611      	mov	r1, r2
 800619c:	461a      	mov	r2, r3
 800619e:	460b      	mov	r3, r1
 80061a0:	71fb      	strb	r3, [r7, #7]
 80061a2:	4613      	mov	r3, r2
 80061a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80061ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d123      	bne.n	80061fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80061b6:	88bb      	ldrh	r3, [r7, #4]
 80061b8:	3303      	adds	r3, #3
 80061ba:	089b      	lsrs	r3, r3, #2
 80061bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80061be:	2300      	movs	r3, #0
 80061c0:	61bb      	str	r3, [r7, #24]
 80061c2:	e018      	b.n	80061f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80061c4:	79fb      	ldrb	r3, [r7, #7]
 80061c6:	031a      	lsls	r2, r3, #12
 80061c8:	697b      	ldr	r3, [r7, #20]
 80061ca:	4413      	add	r3, r2
 80061cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80061d0:	461a      	mov	r2, r3
 80061d2:	69fb      	ldr	r3, [r7, #28]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	3301      	adds	r3, #1
 80061dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061de:	69fb      	ldr	r3, [r7, #28]
 80061e0:	3301      	adds	r3, #1
 80061e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	3301      	adds	r3, #1
 80061e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	3301      	adds	r3, #1
 80061ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80061f0:	69bb      	ldr	r3, [r7, #24]
 80061f2:	3301      	adds	r3, #1
 80061f4:	61bb      	str	r3, [r7, #24]
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d3e2      	bcc.n	80061c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	4618      	mov	r0, r3
 8006202:	3724      	adds	r7, #36	; 0x24
 8006204:	46bd      	mov	sp, r7
 8006206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620a:	4770      	bx	lr

0800620c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800620c:	b480      	push	{r7}
 800620e:	b08b      	sub	sp, #44	; 0x2c
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	4613      	mov	r3, r2
 8006218:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800621e:	68bb      	ldr	r3, [r7, #8]
 8006220:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006222:	88fb      	ldrh	r3, [r7, #6]
 8006224:	089b      	lsrs	r3, r3, #2
 8006226:	b29b      	uxth	r3, r3
 8006228:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800622a:	88fb      	ldrh	r3, [r7, #6]
 800622c:	f003 0303 	and.w	r3, r3, #3
 8006230:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006232:	2300      	movs	r3, #0
 8006234:	623b      	str	r3, [r7, #32]
 8006236:	e014      	b.n	8006262 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006238:	69bb      	ldr	r3, [r7, #24]
 800623a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006242:	601a      	str	r2, [r3, #0]
    pDest++;
 8006244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006246:	3301      	adds	r3, #1
 8006248:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800624a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800624c:	3301      	adds	r3, #1
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	3301      	adds	r3, #1
 8006254:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006256:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006258:	3301      	adds	r3, #1
 800625a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800625c:	6a3b      	ldr	r3, [r7, #32]
 800625e:	3301      	adds	r3, #1
 8006260:	623b      	str	r3, [r7, #32]
 8006262:	6a3a      	ldr	r2, [r7, #32]
 8006264:	697b      	ldr	r3, [r7, #20]
 8006266:	429a      	cmp	r2, r3
 8006268:	d3e6      	bcc.n	8006238 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800626a:	8bfb      	ldrh	r3, [r7, #30]
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01e      	beq.n	80062ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006270:	2300      	movs	r3, #0
 8006272:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006274:	69bb      	ldr	r3, [r7, #24]
 8006276:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800627a:	461a      	mov	r2, r3
 800627c:	f107 0310 	add.w	r3, r7, #16
 8006280:	6812      	ldr	r2, [r2, #0]
 8006282:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006284:	693a      	ldr	r2, [r7, #16]
 8006286:	6a3b      	ldr	r3, [r7, #32]
 8006288:	b2db      	uxtb	r3, r3
 800628a:	00db      	lsls	r3, r3, #3
 800628c:	fa22 f303 	lsr.w	r3, r2, r3
 8006290:	b2da      	uxtb	r2, r3
 8006292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006294:	701a      	strb	r2, [r3, #0]
      i++;
 8006296:	6a3b      	ldr	r3, [r7, #32]
 8006298:	3301      	adds	r3, #1
 800629a:	623b      	str	r3, [r7, #32]
      pDest++;
 800629c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800629e:	3301      	adds	r3, #1
 80062a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80062a2:	8bfb      	ldrh	r3, [r7, #30]
 80062a4:	3b01      	subs	r3, #1
 80062a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80062a8:	8bfb      	ldrh	r3, [r7, #30]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d1ea      	bne.n	8006284 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80062ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	372c      	adds	r7, #44	; 0x2c
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr

080062bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80062bc:	b480      	push	{r7}
 80062be:	b085      	sub	sp, #20
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	695b      	ldr	r3, [r3, #20]
 80062c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	699b      	ldr	r3, [r3, #24]
 80062ce:	68fa      	ldr	r2, [r7, #12]
 80062d0:	4013      	ands	r3, r2
 80062d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80062d4:	68fb      	ldr	r3, [r7, #12]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3714      	adds	r7, #20
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80062e2:	b480      	push	{r7}
 80062e4:	b083      	sub	sp, #12
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	695b      	ldr	r3, [r3, #20]
 80062ee:	f003 0301 	and.w	r3, r3, #1
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	370c      	adds	r7, #12
 80062f6:	46bd      	mov	sp, r7
 80062f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fc:	4770      	bx	lr
	...

08006300 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006300:	b480      	push	{r7}
 8006302:	b085      	sub	sp, #20
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006308:	2300      	movs	r3, #0
 800630a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800630c:	68fb      	ldr	r3, [r7, #12]
 800630e:	3301      	adds	r3, #1
 8006310:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	4a13      	ldr	r2, [pc, #76]	; (8006364 <USB_CoreReset+0x64>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d901      	bls.n	800631e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800631a:	2303      	movs	r3, #3
 800631c:	e01b      	b.n	8006356 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	691b      	ldr	r3, [r3, #16]
 8006322:	2b00      	cmp	r3, #0
 8006324:	daf2      	bge.n	800630c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006326:	2300      	movs	r3, #0
 8006328:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	691b      	ldr	r3, [r3, #16]
 800632e:	f043 0201 	orr.w	r2, r3, #1
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	3301      	adds	r3, #1
 800633a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	4a09      	ldr	r2, [pc, #36]	; (8006364 <USB_CoreReset+0x64>)
 8006340:	4293      	cmp	r3, r2
 8006342:	d901      	bls.n	8006348 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006344:	2303      	movs	r3, #3
 8006346:	e006      	b.n	8006356 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	f003 0301 	and.w	r3, r3, #1
 8006350:	2b01      	cmp	r3, #1
 8006352:	d0f0      	beq.n	8006336 <USB_CoreReset+0x36>

  return HAL_OK;
 8006354:	2300      	movs	r3, #0
}
 8006356:	4618      	mov	r0, r3
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr
 8006362:	bf00      	nop
 8006364:	00030d40 	.word	0x00030d40

08006368 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006368:	b084      	sub	sp, #16
 800636a:	b580      	push	{r7, lr}
 800636c:	b086      	sub	sp, #24
 800636e:	af00      	add	r7, sp, #0
 8006370:	6078      	str	r0, [r7, #4]
 8006372:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006376:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006388:	461a      	mov	r2, r3
 800638a:	2300      	movs	r3, #0
 800638c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006392:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800639e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063aa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80063b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d018      	beq.n	80063f0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80063be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063c0:	2b01      	cmp	r3, #1
 80063c2:	d10a      	bne.n	80063da <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68fa      	ldr	r2, [r7, #12]
 80063ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063d2:	f043 0304 	orr.w	r3, r3, #4
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	e014      	b.n	8006404 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80063da:	68fb      	ldr	r3, [r7, #12]
 80063dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68fa      	ldr	r2, [r7, #12]
 80063e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063e8:	f023 0304 	bic.w	r3, r3, #4
 80063ec:	6013      	str	r3, [r2, #0]
 80063ee:	e009      	b.n	8006404 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	68fa      	ldr	r2, [r7, #12]
 80063fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80063fe:	f023 0304 	bic.w	r3, r3, #4
 8006402:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006404:	2110      	movs	r1, #16
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f7ff fe5e 	bl	80060c8 <USB_FlushTxFifo>
 800640c:	4603      	mov	r3, r0
 800640e:	2b00      	cmp	r3, #0
 8006410:	d001      	beq.n	8006416 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006412:	2301      	movs	r3, #1
 8006414:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f7ff fe8a 	bl	8006130 <USB_FlushRxFifo>
 800641c:	4603      	mov	r3, r0
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006426:	2300      	movs	r3, #0
 8006428:	613b      	str	r3, [r7, #16]
 800642a:	e015      	b.n	8006458 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800642c:	693b      	ldr	r3, [r7, #16]
 800642e:	015a      	lsls	r2, r3, #5
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	4413      	add	r3, r2
 8006434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006438:	461a      	mov	r2, r3
 800643a:	f04f 33ff 	mov.w	r3, #4294967295
 800643e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006440:	693b      	ldr	r3, [r7, #16]
 8006442:	015a      	lsls	r2, r3, #5
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	4413      	add	r3, r2
 8006448:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800644c:	461a      	mov	r2, r3
 800644e:	2300      	movs	r3, #0
 8006450:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	3301      	adds	r3, #1
 8006456:	613b      	str	r3, [r7, #16]
 8006458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645a:	693a      	ldr	r2, [r7, #16]
 800645c:	429a      	cmp	r2, r3
 800645e:	d3e5      	bcc.n	800642c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	2200      	movs	r2, #0
 8006464:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f04f 32ff 	mov.w	r2, #4294967295
 800646c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006472:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006476:	2b00      	cmp	r3, #0
 8006478:	d00b      	beq.n	8006492 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006480:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	4a13      	ldr	r2, [pc, #76]	; (80064d4 <USB_HostInit+0x16c>)
 8006486:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	4a13      	ldr	r2, [pc, #76]	; (80064d8 <USB_HostInit+0x170>)
 800648c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006490:	e009      	b.n	80064a6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2280      	movs	r2, #128	; 0x80
 8006496:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	4a10      	ldr	r2, [pc, #64]	; (80064dc <USB_HostInit+0x174>)
 800649c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a0f      	ldr	r2, [pc, #60]	; (80064e0 <USB_HostInit+0x178>)
 80064a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80064a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d105      	bne.n	80064b8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	699b      	ldr	r3, [r3, #24]
 80064b0:	f043 0210 	orr.w	r2, r3, #16
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	699a      	ldr	r2, [r3, #24]
 80064bc:	4b09      	ldr	r3, [pc, #36]	; (80064e4 <USB_HostInit+0x17c>)
 80064be:	4313      	orrs	r3, r2
 80064c0:	687a      	ldr	r2, [r7, #4]
 80064c2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80064c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80064c6:	4618      	mov	r0, r3
 80064c8:	3718      	adds	r7, #24
 80064ca:	46bd      	mov	sp, r7
 80064cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80064d0:	b004      	add	sp, #16
 80064d2:	4770      	bx	lr
 80064d4:	01000200 	.word	0x01000200
 80064d8:	00e00300 	.word	0x00e00300
 80064dc:	00600080 	.word	0x00600080
 80064e0:	004000e0 	.word	0x004000e0
 80064e4:	a3200008 	.word	0xa3200008

080064e8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80064e8:	b480      	push	{r7}
 80064ea:	b085      	sub	sp, #20
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	6078      	str	r0, [r7, #4]
 80064f0:	460b      	mov	r3, r1
 80064f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	68fa      	ldr	r2, [r7, #12]
 8006502:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006506:	f023 0303 	bic.w	r3, r3, #3
 800650a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006512:	681a      	ldr	r2, [r3, #0]
 8006514:	78fb      	ldrb	r3, [r7, #3]
 8006516:	f003 0303 	and.w	r3, r3, #3
 800651a:	68f9      	ldr	r1, [r7, #12]
 800651c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006520:	4313      	orrs	r3, r2
 8006522:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006524:	78fb      	ldrb	r3, [r7, #3]
 8006526:	2b01      	cmp	r3, #1
 8006528:	d107      	bne.n	800653a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006530:	461a      	mov	r2, r3
 8006532:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006536:	6053      	str	r3, [r2, #4]
 8006538:	e009      	b.n	800654e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800653a:	78fb      	ldrb	r3, [r7, #3]
 800653c:	2b02      	cmp	r3, #2
 800653e:	d106      	bne.n	800654e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006546:	461a      	mov	r2, r3
 8006548:	f241 7370 	movw	r3, #6000	; 0x1770
 800654c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800654e:	2300      	movs	r3, #0
}
 8006550:	4618      	mov	r0, r3
 8006552:	3714      	adds	r7, #20
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800655c:	b480      	push	{r7}
 800655e:	b085      	sub	sp, #20
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
 8006564:	460b      	mov	r3, r1
 8006566:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800656c:	2300      	movs	r3, #0
 800656e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006580:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006588:	2b00      	cmp	r3, #0
 800658a:	d109      	bne.n	80065a0 <USB_DriveVbus+0x44>
 800658c:	78fb      	ldrb	r3, [r7, #3]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d106      	bne.n	80065a0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006592:	68bb      	ldr	r3, [r7, #8]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800659a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800659e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80065a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80065aa:	d109      	bne.n	80065c0 <USB_DriveVbus+0x64>
 80065ac:	78fb      	ldrb	r3, [r7, #3]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d106      	bne.n	80065c0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80065ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065be:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80065c0:	2300      	movs	r3, #0
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3714      	adds	r7, #20
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr

080065ce <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80065ce:	b480      	push	{r7}
 80065d0:	b085      	sub	sp, #20
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80065da:	2300      	movs	r3, #0
 80065dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80065e8:	68bb      	ldr	r3, [r7, #8]
 80065ea:	0c5b      	lsrs	r3, r3, #17
 80065ec:	f003 0303 	and.w	r3, r3, #3
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3714      	adds	r7, #20
 80065f4:	46bd      	mov	sp, r7
 80065f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fa:	4770      	bx	lr

080065fc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80065fc:	b480      	push	{r7}
 80065fe:	b085      	sub	sp, #20
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	b29b      	uxth	r3, r3
}
 8006612:	4618      	mov	r0, r3
 8006614:	3714      	adds	r7, #20
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr
	...

08006620 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b088      	sub	sp, #32
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
 8006628:	4608      	mov	r0, r1
 800662a:	4611      	mov	r1, r2
 800662c:	461a      	mov	r2, r3
 800662e:	4603      	mov	r3, r0
 8006630:	70fb      	strb	r3, [r7, #3]
 8006632:	460b      	mov	r3, r1
 8006634:	70bb      	strb	r3, [r7, #2]
 8006636:	4613      	mov	r3, r2
 8006638:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800663a:	2300      	movs	r3, #0
 800663c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006642:	78fb      	ldrb	r3, [r7, #3]
 8006644:	015a      	lsls	r2, r3, #5
 8006646:	693b      	ldr	r3, [r7, #16]
 8006648:	4413      	add	r3, r2
 800664a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800664e:	461a      	mov	r2, r3
 8006650:	f04f 33ff 	mov.w	r3, #4294967295
 8006654:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006656:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800665a:	2b03      	cmp	r3, #3
 800665c:	d87e      	bhi.n	800675c <USB_HC_Init+0x13c>
 800665e:	a201      	add	r2, pc, #4	; (adr r2, 8006664 <USB_HC_Init+0x44>)
 8006660:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006664:	08006675 	.word	0x08006675
 8006668:	0800671f 	.word	0x0800671f
 800666c:	08006675 	.word	0x08006675
 8006670:	080066e1 	.word	0x080066e1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006674:	78fb      	ldrb	r3, [r7, #3]
 8006676:	015a      	lsls	r2, r3, #5
 8006678:	693b      	ldr	r3, [r7, #16]
 800667a:	4413      	add	r3, r2
 800667c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006680:	461a      	mov	r2, r3
 8006682:	f240 439d 	movw	r3, #1181	; 0x49d
 8006686:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006688:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800668c:	2b00      	cmp	r3, #0
 800668e:	da10      	bge.n	80066b2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006690:	78fb      	ldrb	r3, [r7, #3]
 8006692:	015a      	lsls	r2, r3, #5
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	4413      	add	r3, r2
 8006698:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	78fa      	ldrb	r2, [r7, #3]
 80066a0:	0151      	lsls	r1, r2, #5
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	440a      	add	r2, r1
 80066a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80066ae:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80066b0:	e057      	b.n	8006762 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80066b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d051      	beq.n	8006762 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80066be:	78fb      	ldrb	r3, [r7, #3]
 80066c0:	015a      	lsls	r2, r3, #5
 80066c2:	693b      	ldr	r3, [r7, #16]
 80066c4:	4413      	add	r3, r2
 80066c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ca:	68db      	ldr	r3, [r3, #12]
 80066cc:	78fa      	ldrb	r2, [r7, #3]
 80066ce:	0151      	lsls	r1, r2, #5
 80066d0:	693a      	ldr	r2, [r7, #16]
 80066d2:	440a      	add	r2, r1
 80066d4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80066d8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80066dc:	60d3      	str	r3, [r2, #12]
      break;
 80066de:	e040      	b.n	8006762 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80066e0:	78fb      	ldrb	r3, [r7, #3]
 80066e2:	015a      	lsls	r2, r3, #5
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	4413      	add	r3, r2
 80066e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80066ec:	461a      	mov	r2, r3
 80066ee:	f240 639d 	movw	r3, #1693	; 0x69d
 80066f2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80066f4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	da34      	bge.n	8006766 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80066fc:	78fb      	ldrb	r3, [r7, #3]
 80066fe:	015a      	lsls	r2, r3, #5
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	4413      	add	r3, r2
 8006704:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	78fa      	ldrb	r2, [r7, #3]
 800670c:	0151      	lsls	r1, r2, #5
 800670e:	693a      	ldr	r2, [r7, #16]
 8006710:	440a      	add	r2, r1
 8006712:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800671a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800671c:	e023      	b.n	8006766 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800671e:	78fb      	ldrb	r3, [r7, #3]
 8006720:	015a      	lsls	r2, r3, #5
 8006722:	693b      	ldr	r3, [r7, #16]
 8006724:	4413      	add	r3, r2
 8006726:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800672a:	461a      	mov	r2, r3
 800672c:	f240 2325 	movw	r3, #549	; 0x225
 8006730:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006732:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006736:	2b00      	cmp	r3, #0
 8006738:	da17      	bge.n	800676a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800673a:	78fb      	ldrb	r3, [r7, #3]
 800673c:	015a      	lsls	r2, r3, #5
 800673e:	693b      	ldr	r3, [r7, #16]
 8006740:	4413      	add	r3, r2
 8006742:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	78fa      	ldrb	r2, [r7, #3]
 800674a:	0151      	lsls	r1, r2, #5
 800674c:	693a      	ldr	r2, [r7, #16]
 800674e:	440a      	add	r2, r1
 8006750:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006754:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006758:	60d3      	str	r3, [r2, #12]
      }
      break;
 800675a:	e006      	b.n	800676a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800675c:	2301      	movs	r3, #1
 800675e:	77fb      	strb	r3, [r7, #31]
      break;
 8006760:	e004      	b.n	800676c <USB_HC_Init+0x14c>
      break;
 8006762:	bf00      	nop
 8006764:	e002      	b.n	800676c <USB_HC_Init+0x14c>
      break;
 8006766:	bf00      	nop
 8006768:	e000      	b.n	800676c <USB_HC_Init+0x14c>
      break;
 800676a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800676c:	78fb      	ldrb	r3, [r7, #3]
 800676e:	015a      	lsls	r2, r3, #5
 8006770:	693b      	ldr	r3, [r7, #16]
 8006772:	4413      	add	r3, r2
 8006774:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006778:	68db      	ldr	r3, [r3, #12]
 800677a:	78fa      	ldrb	r2, [r7, #3]
 800677c:	0151      	lsls	r1, r2, #5
 800677e:	693a      	ldr	r2, [r7, #16]
 8006780:	440a      	add	r2, r1
 8006782:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006786:	f043 0302 	orr.w	r3, r3, #2
 800678a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800678c:	693b      	ldr	r3, [r7, #16]
 800678e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006792:	699a      	ldr	r2, [r3, #24]
 8006794:	78fb      	ldrb	r3, [r7, #3]
 8006796:	f003 030f 	and.w	r3, r3, #15
 800679a:	2101      	movs	r1, #1
 800679c:	fa01 f303 	lsl.w	r3, r1, r3
 80067a0:	6939      	ldr	r1, [r7, #16]
 80067a2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80067a6:	4313      	orrs	r3, r2
 80067a8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	699b      	ldr	r3, [r3, #24]
 80067ae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80067b6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	da03      	bge.n	80067c6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80067be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067c2:	61bb      	str	r3, [r7, #24]
 80067c4:	e001      	b.n	80067ca <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80067c6:	2300      	movs	r3, #0
 80067c8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f7ff feff 	bl	80065ce <USB_GetHostSpeed>
 80067d0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 80067d2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80067d6:	2b02      	cmp	r3, #2
 80067d8:	d106      	bne.n	80067e8 <USB_HC_Init+0x1c8>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b02      	cmp	r3, #2
 80067de:	d003      	beq.n	80067e8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80067e0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80067e4:	617b      	str	r3, [r7, #20]
 80067e6:	e001      	b.n	80067ec <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80067e8:	2300      	movs	r3, #0
 80067ea:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067ec:	787b      	ldrb	r3, [r7, #1]
 80067ee:	059b      	lsls	r3, r3, #22
 80067f0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80067f4:	78bb      	ldrb	r3, [r7, #2]
 80067f6:	02db      	lsls	r3, r3, #11
 80067f8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80067fc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80067fe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006802:	049b      	lsls	r3, r3, #18
 8006804:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006808:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800680a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800680c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006810:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006816:	78fb      	ldrb	r3, [r7, #3]
 8006818:	0159      	lsls	r1, r3, #5
 800681a:	693b      	ldr	r3, [r7, #16]
 800681c:	440b      	add	r3, r1
 800681e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006822:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006824:	697b      	ldr	r3, [r7, #20]
 8006826:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006828:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800682a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800682e:	2b03      	cmp	r3, #3
 8006830:	d003      	beq.n	800683a <USB_HC_Init+0x21a>
 8006832:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006836:	2b01      	cmp	r3, #1
 8006838:	d10f      	bne.n	800685a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800683a:	78fb      	ldrb	r3, [r7, #3]
 800683c:	015a      	lsls	r2, r3, #5
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	4413      	add	r3, r2
 8006842:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	78fa      	ldrb	r2, [r7, #3]
 800684a:	0151      	lsls	r1, r2, #5
 800684c:	693a      	ldr	r2, [r7, #16]
 800684e:	440a      	add	r2, r1
 8006850:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006854:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006858:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800685a:	7ffb      	ldrb	r3, [r7, #31]
}
 800685c:	4618      	mov	r0, r3
 800685e:	3720      	adds	r7, #32
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08c      	sub	sp, #48	; 0x30
 8006868:	af02      	add	r7, sp, #8
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	4613      	mov	r3, r2
 8006870:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006876:	68bb      	ldr	r3, [r7, #8]
 8006878:	785b      	ldrb	r3, [r3, #1]
 800687a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 800687c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006880:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800688a:	2b00      	cmp	r3, #0
 800688c:	d02d      	beq.n	80068ea <USB_HC_StartXfer+0x86>
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	791b      	ldrb	r3, [r3, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d129      	bne.n	80068ea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006896:	79fb      	ldrb	r3, [r7, #7]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d117      	bne.n	80068cc <USB_HC_StartXfer+0x68>
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	79db      	ldrb	r3, [r3, #7]
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d003      	beq.n	80068ac <USB_HC_StartXfer+0x48>
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	79db      	ldrb	r3, [r3, #7]
 80068a8:	2b02      	cmp	r3, #2
 80068aa:	d10f      	bne.n	80068cc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80068ac:	69fb      	ldr	r3, [r7, #28]
 80068ae:	015a      	lsls	r2, r3, #5
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	4413      	add	r3, r2
 80068b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	69fa      	ldr	r2, [r7, #28]
 80068bc:	0151      	lsls	r1, r2, #5
 80068be:	6a3a      	ldr	r2, [r7, #32]
 80068c0:	440a      	add	r2, r1
 80068c2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ca:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80068cc:	79fb      	ldrb	r3, [r7, #7]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d10b      	bne.n	80068ea <USB_HC_StartXfer+0x86>
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	795b      	ldrb	r3, [r3, #5]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d107      	bne.n	80068ea <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	785b      	ldrb	r3, [r3, #1]
 80068de:	4619      	mov	r1, r3
 80068e0:	68f8      	ldr	r0, [r7, #12]
 80068e2:	f000 fa0f 	bl	8006d04 <USB_DoPing>
      return HAL_OK;
 80068e6:	2300      	movs	r3, #0
 80068e8:	e0f8      	b.n	8006adc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 80068ea:	68bb      	ldr	r3, [r7, #8]
 80068ec:	695b      	ldr	r3, [r3, #20]
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d018      	beq.n	8006924 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	695b      	ldr	r3, [r3, #20]
 80068f6:	68ba      	ldr	r2, [r7, #8]
 80068f8:	8912      	ldrh	r2, [r2, #8]
 80068fa:	4413      	add	r3, r2
 80068fc:	3b01      	subs	r3, #1
 80068fe:	68ba      	ldr	r2, [r7, #8]
 8006900:	8912      	ldrh	r2, [r2, #8]
 8006902:	fbb3 f3f2 	udiv	r3, r3, r2
 8006906:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006908:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800690a:	8b7b      	ldrh	r3, [r7, #26]
 800690c:	429a      	cmp	r2, r3
 800690e:	d90b      	bls.n	8006928 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006910:	8b7b      	ldrh	r3, [r7, #26]
 8006912:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006914:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006916:	68ba      	ldr	r2, [r7, #8]
 8006918:	8912      	ldrh	r2, [r2, #8]
 800691a:	fb03 f202 	mul.w	r2, r3, r2
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	611a      	str	r2, [r3, #16]
 8006922:	e001      	b.n	8006928 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006924:	2301      	movs	r3, #1
 8006926:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006928:	68bb      	ldr	r3, [r7, #8]
 800692a:	78db      	ldrb	r3, [r3, #3]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d007      	beq.n	8006940 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006930:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006932:	68ba      	ldr	r2, [r7, #8]
 8006934:	8912      	ldrh	r2, [r2, #8]
 8006936:	fb03 f202 	mul.w	r2, r3, r2
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	611a      	str	r2, [r3, #16]
 800693e:	e003      	b.n	8006948 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	695a      	ldr	r2, [r3, #20]
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006948:	68bb      	ldr	r3, [r7, #8]
 800694a:	691b      	ldr	r3, [r3, #16]
 800694c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006950:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006952:	04d9      	lsls	r1, r3, #19
 8006954:	4b63      	ldr	r3, [pc, #396]	; (8006ae4 <USB_HC_StartXfer+0x280>)
 8006956:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006958:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	7a9b      	ldrb	r3, [r3, #10]
 800695e:	075b      	lsls	r3, r3, #29
 8006960:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006964:	69f9      	ldr	r1, [r7, #28]
 8006966:	0148      	lsls	r0, r1, #5
 8006968:	6a39      	ldr	r1, [r7, #32]
 800696a:	4401      	add	r1, r0
 800696c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006970:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006972:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006974:	79fb      	ldrb	r3, [r7, #7]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d009      	beq.n	800698e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	68d9      	ldr	r1, [r3, #12]
 800697e:	69fb      	ldr	r3, [r7, #28]
 8006980:	015a      	lsls	r2, r3, #5
 8006982:	6a3b      	ldr	r3, [r7, #32]
 8006984:	4413      	add	r3, r2
 8006986:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800698a:	460a      	mov	r2, r1
 800698c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800698e:	6a3b      	ldr	r3, [r7, #32]
 8006990:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006994:	689b      	ldr	r3, [r3, #8]
 8006996:	f003 0301 	and.w	r3, r3, #1
 800699a:	2b00      	cmp	r3, #0
 800699c:	bf0c      	ite	eq
 800699e:	2301      	moveq	r3, #1
 80069a0:	2300      	movne	r3, #0
 80069a2:	b2db      	uxtb	r3, r3
 80069a4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80069a6:	69fb      	ldr	r3, [r7, #28]
 80069a8:	015a      	lsls	r2, r3, #5
 80069aa:	6a3b      	ldr	r3, [r7, #32]
 80069ac:	4413      	add	r3, r2
 80069ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	69fa      	ldr	r2, [r7, #28]
 80069b6:	0151      	lsls	r1, r2, #5
 80069b8:	6a3a      	ldr	r2, [r7, #32]
 80069ba:	440a      	add	r2, r1
 80069bc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80069c0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80069c4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80069c6:	69fb      	ldr	r3, [r7, #28]
 80069c8:	015a      	lsls	r2, r3, #5
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	4413      	add	r3, r2
 80069ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069d2:	681a      	ldr	r2, [r3, #0]
 80069d4:	7e7b      	ldrb	r3, [r7, #25]
 80069d6:	075b      	lsls	r3, r3, #29
 80069d8:	69f9      	ldr	r1, [r7, #28]
 80069da:	0148      	lsls	r0, r1, #5
 80069dc:	6a39      	ldr	r1, [r7, #32]
 80069de:	4401      	add	r1, r0
 80069e0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80069e4:	4313      	orrs	r3, r2
 80069e6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80069e8:	69fb      	ldr	r3, [r7, #28]
 80069ea:	015a      	lsls	r2, r3, #5
 80069ec:	6a3b      	ldr	r3, [r7, #32]
 80069ee:	4413      	add	r3, r2
 80069f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069f8:	693b      	ldr	r3, [r7, #16]
 80069fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069fe:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006a00:	68bb      	ldr	r3, [r7, #8]
 8006a02:	78db      	ldrb	r3, [r3, #3]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d004      	beq.n	8006a12 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a0e:	613b      	str	r3, [r7, #16]
 8006a10:	e003      	b.n	8006a1a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006a12:	693b      	ldr	r3, [r7, #16]
 8006a14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a18:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006a1a:	693b      	ldr	r3, [r7, #16]
 8006a1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a20:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006a22:	69fb      	ldr	r3, [r7, #28]
 8006a24:	015a      	lsls	r2, r3, #5
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	4413      	add	r3, r2
 8006a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a2e:	461a      	mov	r2, r3
 8006a30:	693b      	ldr	r3, [r7, #16]
 8006a32:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006a34:	79fb      	ldrb	r3, [r7, #7]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d001      	beq.n	8006a3e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e04e      	b.n	8006adc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006a3e:	68bb      	ldr	r3, [r7, #8]
 8006a40:	78db      	ldrb	r3, [r3, #3]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d149      	bne.n	8006ada <USB_HC_StartXfer+0x276>
 8006a46:	68bb      	ldr	r3, [r7, #8]
 8006a48:	695b      	ldr	r3, [r3, #20]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d045      	beq.n	8006ada <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006a4e:	68bb      	ldr	r3, [r7, #8]
 8006a50:	79db      	ldrb	r3, [r3, #7]
 8006a52:	2b03      	cmp	r3, #3
 8006a54:	d830      	bhi.n	8006ab8 <USB_HC_StartXfer+0x254>
 8006a56:	a201      	add	r2, pc, #4	; (adr r2, 8006a5c <USB_HC_StartXfer+0x1f8>)
 8006a58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a5c:	08006a6d 	.word	0x08006a6d
 8006a60:	08006a91 	.word	0x08006a91
 8006a64:	08006a6d 	.word	0x08006a6d
 8006a68:	08006a91 	.word	0x08006a91
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006a6c:	68bb      	ldr	r3, [r7, #8]
 8006a6e:	695b      	ldr	r3, [r3, #20]
 8006a70:	3303      	adds	r3, #3
 8006a72:	089b      	lsrs	r3, r3, #2
 8006a74:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006a76:	8afa      	ldrh	r2, [r7, #22]
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a7c:	b29b      	uxth	r3, r3
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d91c      	bls.n	8006abc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	699b      	ldr	r3, [r3, #24]
 8006a86:	f043 0220 	orr.w	r2, r3, #32
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006a8e:	e015      	b.n	8006abc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	695b      	ldr	r3, [r3, #20]
 8006a94:	3303      	adds	r3, #3
 8006a96:	089b      	lsrs	r3, r3, #2
 8006a98:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006a9a:	8afa      	ldrh	r2, [r7, #22]
 8006a9c:	6a3b      	ldr	r3, [r7, #32]
 8006a9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006aa2:	691b      	ldr	r3, [r3, #16]
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	429a      	cmp	r2, r3
 8006aa8:	d90a      	bls.n	8006ac0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006ab6:	e003      	b.n	8006ac0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006ab8:	bf00      	nop
 8006aba:	e002      	b.n	8006ac2 <USB_HC_StartXfer+0x25e>
        break;
 8006abc:	bf00      	nop
 8006abe:	e000      	b.n	8006ac2 <USB_HC_StartXfer+0x25e>
        break;
 8006ac0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006ac2:	68bb      	ldr	r3, [r7, #8]
 8006ac4:	68d9      	ldr	r1, [r3, #12]
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	785a      	ldrb	r2, [r3, #1]
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	695b      	ldr	r3, [r3, #20]
 8006ace:	b29b      	uxth	r3, r3
 8006ad0:	2000      	movs	r0, #0
 8006ad2:	9000      	str	r0, [sp, #0]
 8006ad4:	68f8      	ldr	r0, [r7, #12]
 8006ad6:	f7ff fb5b 	bl	8006190 <USB_WritePacket>
  }

  return HAL_OK;
 8006ada:	2300      	movs	r3, #0
}
 8006adc:	4618      	mov	r0, r3
 8006ade:	3728      	adds	r7, #40	; 0x28
 8006ae0:	46bd      	mov	sp, r7
 8006ae2:	bd80      	pop	{r7, pc}
 8006ae4:	1ff80000 	.word	0x1ff80000

08006ae8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b085      	sub	sp, #20
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006afa:	695b      	ldr	r3, [r3, #20]
 8006afc:	b29b      	uxth	r3, r3
}
 8006afe:	4618      	mov	r0, r3
 8006b00:	3714      	adds	r7, #20
 8006b02:	46bd      	mov	sp, r7
 8006b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b08:	4770      	bx	lr

08006b0a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006b0a:	b480      	push	{r7}
 8006b0c:	b089      	sub	sp, #36	; 0x24
 8006b0e:	af00      	add	r7, sp, #0
 8006b10:	6078      	str	r0, [r7, #4]
 8006b12:	460b      	mov	r3, r1
 8006b14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006b1a:	78fb      	ldrb	r3, [r7, #3]
 8006b1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006b22:	69bb      	ldr	r3, [r7, #24]
 8006b24:	015a      	lsls	r2, r3, #5
 8006b26:	69fb      	ldr	r3, [r7, #28]
 8006b28:	4413      	add	r3, r2
 8006b2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	0c9b      	lsrs	r3, r3, #18
 8006b32:	f003 0303 	and.w	r3, r3, #3
 8006b36:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006b38:	69bb      	ldr	r3, [r7, #24]
 8006b3a:	015a      	lsls	r2, r3, #5
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	4413      	add	r3, r2
 8006b40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	0fdb      	lsrs	r3, r3, #31
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	689b      	ldr	r3, [r3, #8]
 8006b52:	f003 0320 	and.w	r3, r3, #32
 8006b56:	2b20      	cmp	r3, #32
 8006b58:	d104      	bne.n	8006b64 <USB_HC_Halt+0x5a>
 8006b5a:	693b      	ldr	r3, [r7, #16]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006b60:	2300      	movs	r3, #0
 8006b62:	e0c8      	b.n	8006cf6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d002      	beq.n	8006b70 <USB_HC_Halt+0x66>
 8006b6a:	697b      	ldr	r3, [r7, #20]
 8006b6c:	2b02      	cmp	r3, #2
 8006b6e:	d163      	bne.n	8006c38 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006b70:	69bb      	ldr	r3, [r7, #24]
 8006b72:	015a      	lsls	r2, r3, #5
 8006b74:	69fb      	ldr	r3, [r7, #28]
 8006b76:	4413      	add	r3, r2
 8006b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	69ba      	ldr	r2, [r7, #24]
 8006b80:	0151      	lsls	r1, r2, #5
 8006b82:	69fa      	ldr	r2, [r7, #28]
 8006b84:	440a      	add	r2, r1
 8006b86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006b8e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	689b      	ldr	r3, [r3, #8]
 8006b94:	f003 0320 	and.w	r3, r3, #32
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	f040 80ab 	bne.w	8006cf4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ba2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d133      	bne.n	8006c12 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	69fb      	ldr	r3, [r7, #28]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	0151      	lsls	r1, r2, #5
 8006bbc:	69fa      	ldr	r2, [r7, #28]
 8006bbe:	440a      	add	r2, r1
 8006bc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006bc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006bc8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006bca:	69bb      	ldr	r3, [r7, #24]
 8006bcc:	015a      	lsls	r2, r3, #5
 8006bce:	69fb      	ldr	r3, [r7, #28]
 8006bd0:	4413      	add	r3, r2
 8006bd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	69ba      	ldr	r2, [r7, #24]
 8006bda:	0151      	lsls	r1, r2, #5
 8006bdc:	69fa      	ldr	r2, [r7, #28]
 8006bde:	440a      	add	r2, r1
 8006be0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006be4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006be8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	3301      	adds	r3, #1
 8006bee:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006bf6:	d81d      	bhi.n	8006c34 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006bf8:	69bb      	ldr	r3, [r7, #24]
 8006bfa:	015a      	lsls	r2, r3, #5
 8006bfc:	69fb      	ldr	r3, [r7, #28]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c0e:	d0ec      	beq.n	8006bea <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c10:	e070      	b.n	8006cf4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	015a      	lsls	r2, r3, #5
 8006c16:	69fb      	ldr	r3, [r7, #28]
 8006c18:	4413      	add	r3, r2
 8006c1a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	69ba      	ldr	r2, [r7, #24]
 8006c22:	0151      	lsls	r1, r2, #5
 8006c24:	69fa      	ldr	r2, [r7, #28]
 8006c26:	440a      	add	r2, r1
 8006c28:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c2c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006c30:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c32:	e05f      	b.n	8006cf4 <USB_HC_Halt+0x1ea>
            break;
 8006c34:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006c36:	e05d      	b.n	8006cf4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	015a      	lsls	r2, r3, #5
 8006c3c:	69fb      	ldr	r3, [r7, #28]
 8006c3e:	4413      	add	r3, r2
 8006c40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	69ba      	ldr	r2, [r7, #24]
 8006c48:	0151      	lsls	r1, r2, #5
 8006c4a:	69fa      	ldr	r2, [r7, #28]
 8006c4c:	440a      	add	r2, r1
 8006c4e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c52:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006c56:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8006c58:	69fb      	ldr	r3, [r7, #28]
 8006c5a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c5e:	691b      	ldr	r3, [r3, #16]
 8006c60:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d133      	bne.n	8006cd0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006c68:	69bb      	ldr	r3, [r7, #24]
 8006c6a:	015a      	lsls	r2, r3, #5
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	4413      	add	r3, r2
 8006c70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	69ba      	ldr	r2, [r7, #24]
 8006c78:	0151      	lsls	r1, r2, #5
 8006c7a:	69fa      	ldr	r2, [r7, #28]
 8006c7c:	440a      	add	r2, r1
 8006c7e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c82:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006c86:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006c88:	69bb      	ldr	r3, [r7, #24]
 8006c8a:	015a      	lsls	r2, r3, #5
 8006c8c:	69fb      	ldr	r3, [r7, #28]
 8006c8e:	4413      	add	r3, r2
 8006c90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	0151      	lsls	r1, r2, #5
 8006c9a:	69fa      	ldr	r2, [r7, #28]
 8006c9c:	440a      	add	r2, r1
 8006c9e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ca2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006ca6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	3301      	adds	r3, #1
 8006cac:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006cb4:	d81d      	bhi.n	8006cf2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	015a      	lsls	r2, r3, #5
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006cc8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ccc:	d0ec      	beq.n	8006ca8 <USB_HC_Halt+0x19e>
 8006cce:	e011      	b.n	8006cf4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006cd0:	69bb      	ldr	r3, [r7, #24]
 8006cd2:	015a      	lsls	r2, r3, #5
 8006cd4:	69fb      	ldr	r3, [r7, #28]
 8006cd6:	4413      	add	r3, r2
 8006cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	69ba      	ldr	r2, [r7, #24]
 8006ce0:	0151      	lsls	r1, r2, #5
 8006ce2:	69fa      	ldr	r2, [r7, #28]
 8006ce4:	440a      	add	r2, r1
 8006ce6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006cee:	6013      	str	r3, [r2, #0]
 8006cf0:	e000      	b.n	8006cf4 <USB_HC_Halt+0x1ea>
          break;
 8006cf2:	bf00      	nop
    }
  }

  return HAL_OK;
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3724      	adds	r7, #36	; 0x24
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d00:	4770      	bx	lr
	...

08006d04 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	460b      	mov	r3, r1
 8006d0e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006d14:	78fb      	ldrb	r3, [r7, #3]
 8006d16:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006d18:	2301      	movs	r3, #1
 8006d1a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	04da      	lsls	r2, r3, #19
 8006d20:	4b15      	ldr	r3, [pc, #84]	; (8006d78 <USB_DoPing+0x74>)
 8006d22:	4013      	ands	r3, r2
 8006d24:	693a      	ldr	r2, [r7, #16]
 8006d26:	0151      	lsls	r1, r2, #5
 8006d28:	697a      	ldr	r2, [r7, #20]
 8006d2a:	440a      	add	r2, r1
 8006d2c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006d30:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d34:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	015a      	lsls	r2, r3, #5
 8006d3a:	697b      	ldr	r3, [r7, #20]
 8006d3c:	4413      	add	r3, r2
 8006d3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006d46:	68bb      	ldr	r3, [r7, #8]
 8006d48:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006d4c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006d54:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8006d56:	693b      	ldr	r3, [r7, #16]
 8006d58:	015a      	lsls	r2, r3, #5
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	4413      	add	r3, r2
 8006d5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d62:	461a      	mov	r2, r3
 8006d64:	68bb      	ldr	r3, [r7, #8]
 8006d66:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8006d68:	2300      	movs	r3, #0
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	371c      	adds	r7, #28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d74:	4770      	bx	lr
 8006d76:	bf00      	nop
 8006d78:	1ff80000 	.word	0x1ff80000

08006d7c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b088      	sub	sp, #32
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8006d84:	2300      	movs	r3, #0
 8006d86:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff f93b 	bl	800600c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006d96:	2110      	movs	r1, #16
 8006d98:	6878      	ldr	r0, [r7, #4]
 8006d9a:	f7ff f995 	bl	80060c8 <USB_FlushTxFifo>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006da4:	2301      	movs	r3, #1
 8006da6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7ff f9c1 	bl	8006130 <USB_FlushRxFifo>
 8006dae:	4603      	mov	r3, r0
 8006db0:	2b00      	cmp	r3, #0
 8006db2:	d001      	beq.n	8006db8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006db4:	2301      	movs	r3, #1
 8006db6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006db8:	2300      	movs	r3, #0
 8006dba:	61bb      	str	r3, [r7, #24]
 8006dbc:	e01f      	b.n	8006dfe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006dbe:	69bb      	ldr	r3, [r7, #24]
 8006dc0:	015a      	lsls	r2, r3, #5
 8006dc2:	697b      	ldr	r3, [r7, #20]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006dce:	693b      	ldr	r3, [r7, #16]
 8006dd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006dd4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006ddc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006dde:	693b      	ldr	r3, [r7, #16]
 8006de0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006de4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	015a      	lsls	r2, r3, #5
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	4413      	add	r3, r2
 8006dee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df2:	461a      	mov	r2, r3
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006df8:	69bb      	ldr	r3, [r7, #24]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	61bb      	str	r3, [r7, #24]
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	2b0f      	cmp	r3, #15
 8006e02:	d9dc      	bls.n	8006dbe <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006e04:	2300      	movs	r3, #0
 8006e06:	61bb      	str	r3, [r7, #24]
 8006e08:	e034      	b.n	8006e74 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006e0a:	69bb      	ldr	r3, [r7, #24]
 8006e0c:	015a      	lsls	r2, r3, #5
 8006e0e:	697b      	ldr	r3, [r7, #20]
 8006e10:	4413      	add	r3, r2
 8006e12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006e20:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006e22:	693b      	ldr	r3, [r7, #16]
 8006e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e28:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006e2a:	693b      	ldr	r3, [r7, #16]
 8006e2c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e30:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006e32:	69bb      	ldr	r3, [r7, #24]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	697b      	ldr	r3, [r7, #20]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e3e:	461a      	mov	r2, r3
 8006e40:	693b      	ldr	r3, [r7, #16]
 8006e42:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3301      	adds	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006e50:	d80c      	bhi.n	8006e6c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006e52:	69bb      	ldr	r3, [r7, #24]
 8006e54:	015a      	lsls	r2, r3, #5
 8006e56:	697b      	ldr	r3, [r7, #20]
 8006e58:	4413      	add	r3, r2
 8006e5a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006e64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006e68:	d0ec      	beq.n	8006e44 <USB_StopHost+0xc8>
 8006e6a:	e000      	b.n	8006e6e <USB_StopHost+0xf2>
        break;
 8006e6c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006e6e:	69bb      	ldr	r3, [r7, #24]
 8006e70:	3301      	adds	r3, #1
 8006e72:	61bb      	str	r3, [r7, #24]
 8006e74:	69bb      	ldr	r3, [r7, #24]
 8006e76:	2b0f      	cmp	r3, #15
 8006e78:	d9c7      	bls.n	8006e0a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006e80:	461a      	mov	r2, r3
 8006e82:	f04f 33ff 	mov.w	r3, #4294967295
 8006e86:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f04f 32ff 	mov.w	r2, #4294967295
 8006e8e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006e90:	6878      	ldr	r0, [r7, #4]
 8006e92:	f7ff f8aa 	bl	8005fea <USB_EnableGlobalInt>

  return ret;
 8006e96:	7ffb      	ldrb	r3, [r7, #31]
}
 8006e98:	4618      	mov	r0, r3
 8006e9a:	3720      	adds	r7, #32
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	bd80      	pop	{r7, pc}

08006ea0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006ea0:	b590      	push	{r4, r7, lr}
 8006ea2:	b089      	sub	sp, #36	; 0x24
 8006ea4:	af04      	add	r7, sp, #16
 8006ea6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	2202      	movs	r2, #2
 8006eac:	2102      	movs	r1, #2
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fc66 	bl	8007780 <USBH_FindInterface>
 8006eb4:	4603      	mov	r3, r0
 8006eb6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006eb8:	7bfb      	ldrb	r3, [r7, #15]
 8006eba:	2bff      	cmp	r3, #255	; 0xff
 8006ebc:	d002      	beq.n	8006ec4 <USBH_CDC_InterfaceInit+0x24>
 8006ebe:	7bfb      	ldrb	r3, [r7, #15]
 8006ec0:	2b01      	cmp	r3, #1
 8006ec2:	d901      	bls.n	8006ec8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006ec4:	2302      	movs	r3, #2
 8006ec6:	e13d      	b.n	8007144 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006ec8:	7bfb      	ldrb	r3, [r7, #15]
 8006eca:	4619      	mov	r1, r3
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fc3b 	bl	8007748 <USBH_SelectInterface>
 8006ed2:	4603      	mov	r3, r0
 8006ed4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006ed6:	7bbb      	ldrb	r3, [r7, #14]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d001      	beq.n	8006ee0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006edc:	2302      	movs	r3, #2
 8006ede:	e131      	b.n	8007144 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006ee6:	2050      	movs	r0, #80	; 0x50
 8006ee8:	f001 fb12 	bl	8008510 <malloc>
 8006eec:	4603      	mov	r3, r0
 8006eee:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006ef6:	69db      	ldr	r3, [r3, #28]
 8006ef8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d101      	bne.n	8006f04 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006f00:	2302      	movs	r3, #2
 8006f02:	e11f      	b.n	8007144 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006f04:	2250      	movs	r2, #80	; 0x50
 8006f06:	2100      	movs	r1, #0
 8006f08:	68b8      	ldr	r0, [r7, #8]
 8006f0a:	f001 fb11 	bl	8008530 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006f0e:	7bfb      	ldrb	r3, [r7, #15]
 8006f10:	687a      	ldr	r2, [r7, #4]
 8006f12:	211a      	movs	r1, #26
 8006f14:	fb01 f303 	mul.w	r3, r1, r3
 8006f18:	4413      	add	r3, r2
 8006f1a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f1e:	781b      	ldrb	r3, [r3, #0]
 8006f20:	b25b      	sxtb	r3, r3
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	da15      	bge.n	8006f52 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	211a      	movs	r1, #26
 8006f2c:	fb01 f303 	mul.w	r3, r1, r3
 8006f30:	4413      	add	r3, r2
 8006f32:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006f36:	781a      	ldrb	r2, [r3, #0]
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006f3c:	7bfb      	ldrb	r3, [r7, #15]
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	211a      	movs	r1, #26
 8006f42:	fb01 f303 	mul.w	r3, r1, r3
 8006f46:	4413      	add	r3, r2
 8006f48:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006f4c:	881a      	ldrh	r2, [r3, #0]
 8006f4e:	68bb      	ldr	r3, [r7, #8]
 8006f50:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	785b      	ldrb	r3, [r3, #1]
 8006f56:	4619      	mov	r1, r3
 8006f58:	6878      	ldr	r0, [r7, #4]
 8006f5a:	f000 ff9c 	bl	8007e96 <USBH_AllocPipe>
 8006f5e:	4603      	mov	r3, r0
 8006f60:	461a      	mov	r2, r3
 8006f62:	68bb      	ldr	r3, [r7, #8]
 8006f64:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006f66:	68bb      	ldr	r3, [r7, #8]
 8006f68:	7819      	ldrb	r1, [r3, #0]
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	7858      	ldrb	r0, [r3, #1]
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006f7a:	68ba      	ldr	r2, [r7, #8]
 8006f7c:	8952      	ldrh	r2, [r2, #10]
 8006f7e:	9202      	str	r2, [sp, #8]
 8006f80:	2203      	movs	r2, #3
 8006f82:	9201      	str	r2, [sp, #4]
 8006f84:	9300      	str	r3, [sp, #0]
 8006f86:	4623      	mov	r3, r4
 8006f88:	4602      	mov	r2, r0
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 ff54 	bl	8007e38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	2200      	movs	r2, #0
 8006f96:	4619      	mov	r1, r3
 8006f98:	6878      	ldr	r0, [r7, #4]
 8006f9a:	f001 fa17 	bl	80083cc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	210a      	movs	r1, #10
 8006fa4:	6878      	ldr	r0, [r7, #4]
 8006fa6:	f000 fbeb 	bl	8007780 <USBH_FindInterface>
 8006faa:	4603      	mov	r3, r0
 8006fac:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
 8006fb0:	2bff      	cmp	r3, #255	; 0xff
 8006fb2:	d002      	beq.n	8006fba <USBH_CDC_InterfaceInit+0x11a>
 8006fb4:	7bfb      	ldrb	r3, [r7, #15]
 8006fb6:	2b01      	cmp	r3, #1
 8006fb8:	d901      	bls.n	8006fbe <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006fba:	2302      	movs	r3, #2
 8006fbc:	e0c2      	b.n	8007144 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
 8006fc0:	687a      	ldr	r2, [r7, #4]
 8006fc2:	211a      	movs	r1, #26
 8006fc4:	fb01 f303 	mul.w	r3, r1, r3
 8006fc8:	4413      	add	r3, r2
 8006fca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	b25b      	sxtb	r3, r3
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	da16      	bge.n	8007004 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006fd6:	7bfb      	ldrb	r3, [r7, #15]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	211a      	movs	r1, #26
 8006fdc:	fb01 f303 	mul.w	r3, r1, r3
 8006fe0:	4413      	add	r3, r2
 8006fe2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006fe6:	781a      	ldrb	r2, [r3, #0]
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006fec:	7bfb      	ldrb	r3, [r7, #15]
 8006fee:	687a      	ldr	r2, [r7, #4]
 8006ff0:	211a      	movs	r1, #26
 8006ff2:	fb01 f303 	mul.w	r3, r1, r3
 8006ff6:	4413      	add	r3, r2
 8006ff8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006ffc:	881a      	ldrh	r2, [r3, #0]
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	835a      	strh	r2, [r3, #26]
 8007002:	e015      	b.n	8007030 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007004:	7bfb      	ldrb	r3, [r7, #15]
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	211a      	movs	r1, #26
 800700a:	fb01 f303 	mul.w	r3, r1, r3
 800700e:	4413      	add	r3, r2
 8007010:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007014:	781a      	ldrb	r2, [r3, #0]
 8007016:	68bb      	ldr	r3, [r7, #8]
 8007018:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800701a:	7bfb      	ldrb	r3, [r7, #15]
 800701c:	687a      	ldr	r2, [r7, #4]
 800701e:	211a      	movs	r1, #26
 8007020:	fb01 f303 	mul.w	r3, r1, r3
 8007024:	4413      	add	r3, r2
 8007026:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800702a:	881a      	ldrh	r2, [r3, #0]
 800702c:	68bb      	ldr	r3, [r7, #8]
 800702e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007030:	7bfb      	ldrb	r3, [r7, #15]
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	211a      	movs	r1, #26
 8007036:	fb01 f303 	mul.w	r3, r1, r3
 800703a:	4413      	add	r3, r2
 800703c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	b25b      	sxtb	r3, r3
 8007044:	2b00      	cmp	r3, #0
 8007046:	da16      	bge.n	8007076 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007048:	7bfb      	ldrb	r3, [r7, #15]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	211a      	movs	r1, #26
 800704e:	fb01 f303 	mul.w	r3, r1, r3
 8007052:	4413      	add	r3, r2
 8007054:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007058:	781a      	ldrb	r2, [r3, #0]
 800705a:	68bb      	ldr	r3, [r7, #8]
 800705c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800705e:	7bfb      	ldrb	r3, [r7, #15]
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	211a      	movs	r1, #26
 8007064:	fb01 f303 	mul.w	r3, r1, r3
 8007068:	4413      	add	r3, r2
 800706a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800706e:	881a      	ldrh	r2, [r3, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	835a      	strh	r2, [r3, #26]
 8007074:	e015      	b.n	80070a2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007076:	7bfb      	ldrb	r3, [r7, #15]
 8007078:	687a      	ldr	r2, [r7, #4]
 800707a:	211a      	movs	r1, #26
 800707c:	fb01 f303 	mul.w	r3, r1, r3
 8007080:	4413      	add	r3, r2
 8007082:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007086:	781a      	ldrb	r2, [r3, #0]
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800708c:	7bfb      	ldrb	r3, [r7, #15]
 800708e:	687a      	ldr	r2, [r7, #4]
 8007090:	211a      	movs	r1, #26
 8007092:	fb01 f303 	mul.w	r3, r1, r3
 8007096:	4413      	add	r3, r2
 8007098:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800709c:	881a      	ldrh	r2, [r3, #0]
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80070a2:	68bb      	ldr	r3, [r7, #8]
 80070a4:	7b9b      	ldrb	r3, [r3, #14]
 80070a6:	4619      	mov	r1, r3
 80070a8:	6878      	ldr	r0, [r7, #4]
 80070aa:	f000 fef4 	bl	8007e96 <USBH_AllocPipe>
 80070ae:	4603      	mov	r3, r0
 80070b0:	461a      	mov	r2, r3
 80070b2:	68bb      	ldr	r3, [r7, #8]
 80070b4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80070b6:	68bb      	ldr	r3, [r7, #8]
 80070b8:	7bdb      	ldrb	r3, [r3, #15]
 80070ba:	4619      	mov	r1, r3
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 feea 	bl	8007e96 <USBH_AllocPipe>
 80070c2:	4603      	mov	r3, r0
 80070c4:	461a      	mov	r2, r3
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80070ca:	68bb      	ldr	r3, [r7, #8]
 80070cc:	7b59      	ldrb	r1, [r3, #13]
 80070ce:	68bb      	ldr	r3, [r7, #8]
 80070d0:	7b98      	ldrb	r0, [r3, #14]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80070de:	68ba      	ldr	r2, [r7, #8]
 80070e0:	8b12      	ldrh	r2, [r2, #24]
 80070e2:	9202      	str	r2, [sp, #8]
 80070e4:	2202      	movs	r2, #2
 80070e6:	9201      	str	r2, [sp, #4]
 80070e8:	9300      	str	r3, [sp, #0]
 80070ea:	4623      	mov	r3, r4
 80070ec:	4602      	mov	r2, r0
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 fea2 	bl	8007e38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	7b19      	ldrb	r1, [r3, #12]
 80070f8:	68bb      	ldr	r3, [r7, #8]
 80070fa:	7bd8      	ldrb	r0, [r3, #15]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007108:	68ba      	ldr	r2, [r7, #8]
 800710a:	8b52      	ldrh	r2, [r2, #26]
 800710c:	9202      	str	r2, [sp, #8]
 800710e:	2202      	movs	r2, #2
 8007110:	9201      	str	r2, [sp, #4]
 8007112:	9300      	str	r3, [sp, #0]
 8007114:	4623      	mov	r3, r4
 8007116:	4602      	mov	r2, r0
 8007118:	6878      	ldr	r0, [r7, #4]
 800711a:	f000 fe8d 	bl	8007e38 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	7b5b      	ldrb	r3, [r3, #13]
 800712a:	2200      	movs	r2, #0
 800712c:	4619      	mov	r1, r3
 800712e:	6878      	ldr	r0, [r7, #4]
 8007130:	f001 f94c 	bl	80083cc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	7b1b      	ldrb	r3, [r3, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	4619      	mov	r1, r3
 800713c:	6878      	ldr	r0, [r7, #4]
 800713e:	f001 f945 	bl	80083cc <USBH_LL_SetToggle>

  return USBH_OK;
 8007142:	2300      	movs	r3, #0
}
 8007144:	4618      	mov	r0, r3
 8007146:	3714      	adds	r7, #20
 8007148:	46bd      	mov	sp, r7
 800714a:	bd90      	pop	{r4, r7, pc}

0800714c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800715a:	69db      	ldr	r3, [r3, #28]
 800715c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	781b      	ldrb	r3, [r3, #0]
 8007162:	2b00      	cmp	r3, #0
 8007164:	d00e      	beq.n	8007184 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	781b      	ldrb	r3, [r3, #0]
 800716a:	4619      	mov	r1, r3
 800716c:	6878      	ldr	r0, [r7, #4]
 800716e:	f000 fe82 	bl	8007e76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	4619      	mov	r1, r3
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fead 	bl	8007ed8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	2200      	movs	r2, #0
 8007182:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	7b1b      	ldrb	r3, [r3, #12]
 8007188:	2b00      	cmp	r3, #0
 800718a:	d00e      	beq.n	80071aa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	7b1b      	ldrb	r3, [r3, #12]
 8007190:	4619      	mov	r1, r3
 8007192:	6878      	ldr	r0, [r7, #4]
 8007194:	f000 fe6f 	bl	8007e76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	7b1b      	ldrb	r3, [r3, #12]
 800719c:	4619      	mov	r1, r3
 800719e:	6878      	ldr	r0, [r7, #4]
 80071a0:	f000 fe9a 	bl	8007ed8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	2200      	movs	r2, #0
 80071a8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	7b5b      	ldrb	r3, [r3, #13]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d00e      	beq.n	80071d0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	7b5b      	ldrb	r3, [r3, #13]
 80071b6:	4619      	mov	r1, r3
 80071b8:	6878      	ldr	r0, [r7, #4]
 80071ba:	f000 fe5c 	bl	8007e76 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	7b5b      	ldrb	r3, [r3, #13]
 80071c2:	4619      	mov	r1, r3
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f000 fe87 	bl	8007ed8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2200      	movs	r2, #0
 80071ce:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071d6:	69db      	ldr	r3, [r3, #28]
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d00b      	beq.n	80071f4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071e2:	69db      	ldr	r3, [r3, #28]
 80071e4:	4618      	mov	r0, r3
 80071e6:	f001 f99b 	bl	8008520 <free>
    phost->pActiveClass->pData = 0U;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071f0:	2200      	movs	r2, #0
 80071f2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80071f4:	2300      	movs	r3, #0
}
 80071f6:	4618      	mov	r0, r3
 80071f8:	3710      	adds	r7, #16
 80071fa:	46bd      	mov	sp, r7
 80071fc:	bd80      	pop	{r7, pc}

080071fe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80071fe:	b580      	push	{r7, lr}
 8007200:	b084      	sub	sp, #16
 8007202:	af00      	add	r7, sp, #0
 8007204:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800720c:	69db      	ldr	r3, [r3, #28]
 800720e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	3340      	adds	r3, #64	; 0x40
 8007214:	4619      	mov	r1, r3
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f8b1 	bl	800737e <GetLineCoding>
 800721c:	4603      	mov	r3, r0
 800721e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007220:	7afb      	ldrb	r3, [r7, #11]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d105      	bne.n	8007232 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800722c:	2102      	movs	r1, #2
 800722e:	6878      	ldr	r0, [r7, #4]
 8007230:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007232:	7afb      	ldrb	r3, [r7, #11]
}
 8007234:	4618      	mov	r0, r3
 8007236:	3710      	adds	r7, #16
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800723c:	b580      	push	{r7, lr}
 800723e:	b084      	sub	sp, #16
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007244:	2301      	movs	r3, #1
 8007246:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007248:	2300      	movs	r3, #0
 800724a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007252:	69db      	ldr	r3, [r3, #28]
 8007254:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800725c:	2b04      	cmp	r3, #4
 800725e:	d877      	bhi.n	8007350 <USBH_CDC_Process+0x114>
 8007260:	a201      	add	r2, pc, #4	; (adr r2, 8007268 <USBH_CDC_Process+0x2c>)
 8007262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007266:	bf00      	nop
 8007268:	0800727d 	.word	0x0800727d
 800726c:	08007283 	.word	0x08007283
 8007270:	080072b3 	.word	0x080072b3
 8007274:	08007327 	.word	0x08007327
 8007278:	08007335 	.word	0x08007335
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800727c:	2300      	movs	r3, #0
 800727e:	73fb      	strb	r3, [r7, #15]
      break;
 8007280:	e06d      	b.n	800735e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007282:	68bb      	ldr	r3, [r7, #8]
 8007284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007286:	4619      	mov	r1, r3
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f000 f897 	bl	80073bc <SetLineCoding>
 800728e:	4603      	mov	r3, r0
 8007290:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007292:	7bbb      	ldrb	r3, [r7, #14]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d104      	bne.n	80072a2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2202      	movs	r2, #2
 800729c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80072a0:	e058      	b.n	8007354 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80072a2:	7bbb      	ldrb	r3, [r7, #14]
 80072a4:	2b01      	cmp	r3, #1
 80072a6:	d055      	beq.n	8007354 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	2204      	movs	r2, #4
 80072ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80072b0:	e050      	b.n	8007354 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	3340      	adds	r3, #64	; 0x40
 80072b6:	4619      	mov	r1, r3
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 f860 	bl	800737e <GetLineCoding>
 80072be:	4603      	mov	r3, r0
 80072c0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80072c2:	7bbb      	ldrb	r3, [r7, #14]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d126      	bne.n	8007316 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	2200      	movs	r2, #0
 80072cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80072d0:	68bb      	ldr	r3, [r7, #8]
 80072d2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80072d6:	68bb      	ldr	r3, [r7, #8]
 80072d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072da:	791b      	ldrb	r3, [r3, #4]
 80072dc:	429a      	cmp	r2, r3
 80072de:	d13b      	bne.n	8007358 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80072e0:	68bb      	ldr	r3, [r7, #8]
 80072e2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80072e6:	68bb      	ldr	r3, [r7, #8]
 80072e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072ea:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80072ec:	429a      	cmp	r2, r3
 80072ee:	d133      	bne.n	8007358 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80072f6:	68bb      	ldr	r3, [r7, #8]
 80072f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80072fa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80072fc:	429a      	cmp	r2, r3
 80072fe:	d12b      	bne.n	8007358 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007300:	68bb      	ldr	r3, [r7, #8]
 8007302:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007308:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800730a:	429a      	cmp	r2, r3
 800730c:	d124      	bne.n	8007358 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f958 	bl	80075c4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007314:	e020      	b.n	8007358 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007316:	7bbb      	ldrb	r3, [r7, #14]
 8007318:	2b01      	cmp	r3, #1
 800731a:	d01d      	beq.n	8007358 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800731c:	68bb      	ldr	r3, [r7, #8]
 800731e:	2204      	movs	r2, #4
 8007320:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007324:	e018      	b.n	8007358 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007326:	6878      	ldr	r0, [r7, #4]
 8007328:	f000 f867 	bl	80073fa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f000 f8da 	bl	80074e6 <CDC_ProcessReception>
      break;
 8007332:	e014      	b.n	800735e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007334:	2100      	movs	r1, #0
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f000 fb08 	bl	800794c <USBH_ClrFeature>
 800733c:	4603      	mov	r3, r0
 800733e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007340:	7bbb      	ldrb	r3, [r7, #14]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d10a      	bne.n	800735c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	2200      	movs	r2, #0
 800734a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800734e:	e005      	b.n	800735c <USBH_CDC_Process+0x120>

    default:
      break;
 8007350:	bf00      	nop
 8007352:	e004      	b.n	800735e <USBH_CDC_Process+0x122>
      break;
 8007354:	bf00      	nop
 8007356:	e002      	b.n	800735e <USBH_CDC_Process+0x122>
      break;
 8007358:	bf00      	nop
 800735a:	e000      	b.n	800735e <USBH_CDC_Process+0x122>
      break;
 800735c:	bf00      	nop

  }

  return status;
 800735e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007360:	4618      	mov	r0, r3
 8007362:	3710      	adds	r7, #16
 8007364:	46bd      	mov	sp, r7
 8007366:	bd80      	pop	{r7, pc}

08007368 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007368:	b480      	push	{r7}
 800736a:	b083      	sub	sp, #12
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007370:	2300      	movs	r3, #0
}
 8007372:	4618      	mov	r0, r3
 8007374:	370c      	adds	r7, #12
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr

0800737e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800737e:	b580      	push	{r7, lr}
 8007380:	b082      	sub	sp, #8
 8007382:	af00      	add	r7, sp, #0
 8007384:	6078      	str	r0, [r7, #4]
 8007386:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	22a1      	movs	r2, #161	; 0xa1
 800738c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	2221      	movs	r2, #33	; 0x21
 8007392:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2200      	movs	r2, #0
 800739e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2207      	movs	r2, #7
 80073a4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80073a6:	683b      	ldr	r3, [r7, #0]
 80073a8:	2207      	movs	r2, #7
 80073aa:	4619      	mov	r1, r3
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 faf1 	bl	8007994 <USBH_CtlReq>
 80073b2:	4603      	mov	r3, r0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3708      	adds	r7, #8
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}

080073bc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2221      	movs	r2, #33	; 0x21
 80073ca:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	2220      	movs	r2, #32
 80073d0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	2200      	movs	r2, #0
 80073d6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2200      	movs	r2, #0
 80073dc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2207      	movs	r2, #7
 80073e2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80073e4:	683b      	ldr	r3, [r7, #0]
 80073e6:	2207      	movs	r2, #7
 80073e8:	4619      	mov	r1, r3
 80073ea:	6878      	ldr	r0, [r7, #4]
 80073ec:	f000 fad2 	bl	8007994 <USBH_CtlReq>
 80073f0:	4603      	mov	r3, r0
}
 80073f2:	4618      	mov	r0, r3
 80073f4:	3708      	adds	r7, #8
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}

080073fa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80073fa:	b580      	push	{r7, lr}
 80073fc:	b086      	sub	sp, #24
 80073fe:	af02      	add	r7, sp, #8
 8007400:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007408:	69db      	ldr	r3, [r3, #28]
 800740a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800740c:	2300      	movs	r3, #0
 800740e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007416:	2b01      	cmp	r3, #1
 8007418:	d002      	beq.n	8007420 <CDC_ProcessTransmission+0x26>
 800741a:	2b02      	cmp	r3, #2
 800741c:	d023      	beq.n	8007466 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800741e:	e05e      	b.n	80074de <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007424:	68fa      	ldr	r2, [r7, #12]
 8007426:	8b12      	ldrh	r2, [r2, #24]
 8007428:	4293      	cmp	r3, r2
 800742a:	d90b      	bls.n	8007444 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	69d9      	ldr	r1, [r3, #28]
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	8b1a      	ldrh	r2, [r3, #24]
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	7b5b      	ldrb	r3, [r3, #13]
 8007438:	2001      	movs	r0, #1
 800743a:	9000      	str	r0, [sp, #0]
 800743c:	6878      	ldr	r0, [r7, #4]
 800743e:	f000 fcb8 	bl	8007db2 <USBH_BulkSendData>
 8007442:	e00b      	b.n	800745c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007448:	68fb      	ldr	r3, [r7, #12]
 800744a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800744c:	b29a      	uxth	r2, r3
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	7b5b      	ldrb	r3, [r3, #13]
 8007452:	2001      	movs	r0, #1
 8007454:	9000      	str	r0, [sp, #0]
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fcab 	bl	8007db2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2202      	movs	r2, #2
 8007460:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007464:	e03b      	b.n	80074de <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	7b5b      	ldrb	r3, [r3, #13]
 800746a:	4619      	mov	r1, r3
 800746c:	6878      	ldr	r0, [r7, #4]
 800746e:	f000 ff83 	bl	8008378 <USBH_LL_GetURBState>
 8007472:	4603      	mov	r3, r0
 8007474:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007476:	7afb      	ldrb	r3, [r7, #11]
 8007478:	2b01      	cmp	r3, #1
 800747a:	d128      	bne.n	80074ce <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007480:	68fa      	ldr	r2, [r7, #12]
 8007482:	8b12      	ldrh	r2, [r2, #24]
 8007484:	4293      	cmp	r3, r2
 8007486:	d90e      	bls.n	80074a6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800748c:	68fa      	ldr	r2, [r7, #12]
 800748e:	8b12      	ldrh	r2, [r2, #24]
 8007490:	1a9a      	subs	r2, r3, r2
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	69db      	ldr	r3, [r3, #28]
 800749a:	68fa      	ldr	r2, [r7, #12]
 800749c:	8b12      	ldrh	r2, [r2, #24]
 800749e:	441a      	add	r2, r3
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	61da      	str	r2, [r3, #28]
 80074a4:	e002      	b.n	80074ac <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d004      	beq.n	80074be <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80074bc:	e00e      	b.n	80074dc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80074c6:	6878      	ldr	r0, [r7, #4]
 80074c8:	f000 f868 	bl	800759c <USBH_CDC_TransmitCallback>
      break;
 80074cc:	e006      	b.n	80074dc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80074ce:	7afb      	ldrb	r3, [r7, #11]
 80074d0:	2b02      	cmp	r3, #2
 80074d2:	d103      	bne.n	80074dc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	2201      	movs	r2, #1
 80074d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80074dc:	bf00      	nop
  }
}
 80074de:	bf00      	nop
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b086      	sub	sp, #24
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f4:	69db      	ldr	r3, [r3, #28]
 80074f6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80074f8:	2300      	movs	r3, #0
 80074fa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007502:	2b03      	cmp	r3, #3
 8007504:	d002      	beq.n	800750c <CDC_ProcessReception+0x26>
 8007506:	2b04      	cmp	r3, #4
 8007508:	d00e      	beq.n	8007528 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800750a:	e043      	b.n	8007594 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	6a19      	ldr	r1, [r3, #32]
 8007510:	697b      	ldr	r3, [r7, #20]
 8007512:	8b5a      	ldrh	r2, [r3, #26]
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	7b1b      	ldrb	r3, [r3, #12]
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fc6f 	bl	8007dfc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800751e:	697b      	ldr	r3, [r7, #20]
 8007520:	2204      	movs	r2, #4
 8007522:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007526:	e035      	b.n	8007594 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	7b1b      	ldrb	r3, [r3, #12]
 800752c:	4619      	mov	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f000 ff22 	bl	8008378 <USBH_LL_GetURBState>
 8007534:	4603      	mov	r3, r0
 8007536:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007538:	7cfb      	ldrb	r3, [r7, #19]
 800753a:	2b01      	cmp	r3, #1
 800753c:	d129      	bne.n	8007592 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	7b1b      	ldrb	r3, [r3, #12]
 8007542:	4619      	mov	r1, r3
 8007544:	6878      	ldr	r0, [r7, #4]
 8007546:	f000 fe85 	bl	8008254 <USBH_LL_GetLastXferSize>
 800754a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007550:	68fa      	ldr	r2, [r7, #12]
 8007552:	429a      	cmp	r2, r3
 8007554:	d016      	beq.n	8007584 <CDC_ProcessReception+0x9e>
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	8b5b      	ldrh	r3, [r3, #26]
 800755a:	461a      	mov	r2, r3
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	4293      	cmp	r3, r2
 8007560:	d910      	bls.n	8007584 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	1ad2      	subs	r2, r2, r3
 800756a:	697b      	ldr	r3, [r7, #20]
 800756c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800756e:	697b      	ldr	r3, [r7, #20]
 8007570:	6a1a      	ldr	r2, [r3, #32]
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	441a      	add	r2, r3
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	2203      	movs	r2, #3
 800757e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007582:	e006      	b.n	8007592 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007584:	697b      	ldr	r3, [r7, #20]
 8007586:	2200      	movs	r2, #0
 8007588:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f80f 	bl	80075b0 <USBH_CDC_ReceiveCallback>
      break;
 8007592:	bf00      	nop
  }
}
 8007594:	bf00      	nop
 8007596:	3718      	adds	r7, #24
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800759c:	b480      	push	{r7}
 800759e:	b083      	sub	sp, #12
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80075a4:	bf00      	nop
 80075a6:	370c      	adds	r7, #12
 80075a8:	46bd      	mov	sp, r7
 80075aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ae:	4770      	bx	lr

080075b0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80075b0:	b480      	push	{r7}
 80075b2:	b083      	sub	sp, #12
 80075b4:	af00      	add	r7, sp, #0
 80075b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80075b8:	bf00      	nop
 80075ba:	370c      	adds	r7, #12
 80075bc:	46bd      	mov	sp, r7
 80075be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c2:	4770      	bx	lr

080075c4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80075c4:	b480      	push	{r7}
 80075c6:	b083      	sub	sp, #12
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80075cc:	bf00      	nop
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80075d8:	b580      	push	{r7, lr}
 80075da:	b084      	sub	sp, #16
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	4613      	mov	r3, r2
 80075e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d101      	bne.n	80075f0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80075ec:	2302      	movs	r3, #2
 80075ee:	e029      	b.n	8007644 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	79fa      	ldrb	r2, [r7, #7]
 80075f4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	2200      	movs	r2, #0
 8007604:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007608:	68f8      	ldr	r0, [r7, #12]
 800760a:	f000 f81f 	bl	800764c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2200      	movs	r2, #0
 800761a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	2200      	movs	r2, #0
 8007622:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2200      	movs	r2, #0
 800762a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d003      	beq.n	800763c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	68ba      	ldr	r2, [r7, #8]
 8007638:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800763c:	68f8      	ldr	r0, [r7, #12]
 800763e:	f000 fd97 	bl	8008170 <USBH_LL_Init>

  return USBH_OK;
 8007642:	2300      	movs	r3, #0
}
 8007644:	4618      	mov	r0, r3
 8007646:	3710      	adds	r7, #16
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800764c:	b480      	push	{r7}
 800764e:	b085      	sub	sp, #20
 8007650:	af00      	add	r7, sp, #0
 8007652:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007654:	2300      	movs	r3, #0
 8007656:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007658:	2300      	movs	r3, #0
 800765a:	60fb      	str	r3, [r7, #12]
 800765c:	e009      	b.n	8007672 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800765e:	687a      	ldr	r2, [r7, #4]
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	33e0      	adds	r3, #224	; 0xe0
 8007664:	009b      	lsls	r3, r3, #2
 8007666:	4413      	add	r3, r2
 8007668:	2200      	movs	r2, #0
 800766a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	3301      	adds	r3, #1
 8007670:	60fb      	str	r3, [r7, #12]
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	2b0f      	cmp	r3, #15
 8007676:	d9f2      	bls.n	800765e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007678:	2300      	movs	r3, #0
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	e009      	b.n	8007692 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4413      	add	r3, r2
 8007684:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007688:	2200      	movs	r2, #0
 800768a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	3301      	adds	r3, #1
 8007690:	60fb      	str	r3, [r7, #12]
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007698:	d3f1      	bcc.n	800767e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2200      	movs	r2, #0
 800769e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	2200      	movs	r2, #0
 80076a4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	2201      	movs	r2, #1
 80076aa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2200      	movs	r2, #0
 80076b0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	2201      	movs	r2, #1
 80076b8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2240      	movs	r2, #64	; 0x40
 80076be:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2201      	movs	r2, #1
 80076d2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	2200      	movs	r2, #0
 80076da:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	2200      	movs	r2, #0
 80076e2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 80076e6:	2300      	movs	r3, #0
}
 80076e8:	4618      	mov	r0, r3
 80076ea:	3714      	adds	r7, #20
 80076ec:	46bd      	mov	sp, r7
 80076ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f2:	4770      	bx	lr

080076f4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80076f4:	b480      	push	{r7}
 80076f6:	b085      	sub	sp, #20
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	6078      	str	r0, [r7, #4]
 80076fc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80076fe:	2300      	movs	r3, #0
 8007700:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007702:	683b      	ldr	r3, [r7, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d016      	beq.n	8007736 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800770e:	2b00      	cmp	r3, #0
 8007710:	d10e      	bne.n	8007730 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007718:	1c59      	adds	r1, r3, #1
 800771a:	687a      	ldr	r2, [r7, #4]
 800771c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007720:	687a      	ldr	r2, [r7, #4]
 8007722:	33de      	adds	r3, #222	; 0xde
 8007724:	6839      	ldr	r1, [r7, #0]
 8007726:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800772a:	2300      	movs	r3, #0
 800772c:	73fb      	strb	r3, [r7, #15]
 800772e:	e004      	b.n	800773a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007730:	2302      	movs	r3, #2
 8007732:	73fb      	strb	r3, [r7, #15]
 8007734:	e001      	b.n	800773a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007736:	2302      	movs	r3, #2
 8007738:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800773a:	7bfb      	ldrb	r3, [r7, #15]
}
 800773c:	4618      	mov	r0, r3
 800773e:	3714      	adds	r7, #20
 8007740:	46bd      	mov	sp, r7
 8007742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007746:	4770      	bx	lr

08007748 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007748:	b480      	push	{r7}
 800774a:	b085      	sub	sp, #20
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
 8007750:	460b      	mov	r3, r1
 8007752:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007754:	2300      	movs	r3, #0
 8007756:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800775e:	78fa      	ldrb	r2, [r7, #3]
 8007760:	429a      	cmp	r2, r3
 8007762:	d204      	bcs.n	800776e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	78fa      	ldrb	r2, [r7, #3]
 8007768:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800776c:	e001      	b.n	8007772 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800776e:	2302      	movs	r3, #2
 8007770:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007772:	7bfb      	ldrb	r3, [r7, #15]
}
 8007774:	4618      	mov	r0, r3
 8007776:	3714      	adds	r7, #20
 8007778:	46bd      	mov	sp, r7
 800777a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777e:	4770      	bx	lr

08007780 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007780:	b480      	push	{r7}
 8007782:	b087      	sub	sp, #28
 8007784:	af00      	add	r7, sp, #0
 8007786:	6078      	str	r0, [r7, #4]
 8007788:	4608      	mov	r0, r1
 800778a:	4611      	mov	r1, r2
 800778c:	461a      	mov	r2, r3
 800778e:	4603      	mov	r3, r0
 8007790:	70fb      	strb	r3, [r7, #3]
 8007792:	460b      	mov	r3, r1
 8007794:	70bb      	strb	r3, [r7, #2]
 8007796:	4613      	mov	r3, r2
 8007798:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800779a:	2300      	movs	r3, #0
 800779c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800779e:	2300      	movs	r3, #0
 80077a0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80077a8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80077aa:	e025      	b.n	80077f8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80077ac:	7dfb      	ldrb	r3, [r7, #23]
 80077ae:	221a      	movs	r2, #26
 80077b0:	fb02 f303 	mul.w	r3, r2, r3
 80077b4:	3308      	adds	r3, #8
 80077b6:	68fa      	ldr	r2, [r7, #12]
 80077b8:	4413      	add	r3, r2
 80077ba:	3302      	adds	r3, #2
 80077bc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80077be:	693b      	ldr	r3, [r7, #16]
 80077c0:	795b      	ldrb	r3, [r3, #5]
 80077c2:	78fa      	ldrb	r2, [r7, #3]
 80077c4:	429a      	cmp	r2, r3
 80077c6:	d002      	beq.n	80077ce <USBH_FindInterface+0x4e>
 80077c8:	78fb      	ldrb	r3, [r7, #3]
 80077ca:	2bff      	cmp	r3, #255	; 0xff
 80077cc:	d111      	bne.n	80077f2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80077d2:	78ba      	ldrb	r2, [r7, #2]
 80077d4:	429a      	cmp	r2, r3
 80077d6:	d002      	beq.n	80077de <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077d8:	78bb      	ldrb	r3, [r7, #2]
 80077da:	2bff      	cmp	r3, #255	; 0xff
 80077dc:	d109      	bne.n	80077f2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80077e2:	787a      	ldrb	r2, [r7, #1]
 80077e4:	429a      	cmp	r2, r3
 80077e6:	d002      	beq.n	80077ee <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80077e8:	787b      	ldrb	r3, [r7, #1]
 80077ea:	2bff      	cmp	r3, #255	; 0xff
 80077ec:	d101      	bne.n	80077f2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80077ee:	7dfb      	ldrb	r3, [r7, #23]
 80077f0:	e006      	b.n	8007800 <USBH_FindInterface+0x80>
    }
    if_ix++;
 80077f2:	7dfb      	ldrb	r3, [r7, #23]
 80077f4:	3301      	adds	r3, #1
 80077f6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80077f8:	7dfb      	ldrb	r3, [r7, #23]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d9d6      	bls.n	80077ac <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80077fe:	23ff      	movs	r3, #255	; 0xff
}
 8007800:	4618      	mov	r0, r3
 8007802:	371c      	adds	r7, #28
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b082      	sub	sp, #8
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007814:	6878      	ldr	r0, [r7, #4]
 8007816:	f000 fce7 	bl	80081e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800781a:	2101      	movs	r1, #1
 800781c:	6878      	ldr	r0, [r7, #4]
 800781e:	f000 fdbe 	bl	800839e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007822:	2300      	movs	r3, #0
}
 8007824:	4618      	mov	r0, r3
 8007826:	3708      	adds	r7, #8
 8007828:	46bd      	mov	sp, r7
 800782a:	bd80      	pop	{r7, pc}

0800782c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800782c:	b480      	push	{r7}
 800782e:	b083      	sub	sp, #12
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	683a      	ldr	r2, [r7, #0]
 800783a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800783e:	bf00      	nop
 8007840:	370c      	adds	r7, #12
 8007842:	46bd      	mov	sp, r7
 8007844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007848:	4770      	bx	lr

0800784a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007858:	1c5a      	adds	r2, r3, #1
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007860:	6878      	ldr	r0, [r7, #4]
 8007862:	f000 f804 	bl	800786e <USBH_HandleSof>
}
 8007866:	bf00      	nop
 8007868:	3708      	adds	r7, #8
 800786a:	46bd      	mov	sp, r7
 800786c:	bd80      	pop	{r7, pc}

0800786e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800786e:	b580      	push	{r7, lr}
 8007870:	b082      	sub	sp, #8
 8007872:	af00      	add	r7, sp, #0
 8007874:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	781b      	ldrb	r3, [r3, #0]
 800787a:	b2db      	uxtb	r3, r3
 800787c:	2b0b      	cmp	r3, #11
 800787e:	d10a      	bne.n	8007896 <USBH_HandleSof+0x28>
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007886:	2b00      	cmp	r3, #0
 8007888:	d005      	beq.n	8007896 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007890:	699b      	ldr	r3, [r3, #24]
 8007892:	6878      	ldr	r0, [r7, #4]
 8007894:	4798      	blx	r3
  }
}
 8007896:	bf00      	nop
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}

0800789e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800789e:	b480      	push	{r7}
 80078a0:	b083      	sub	sp, #12
 80078a2:	af00      	add	r7, sp, #0
 80078a4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2201      	movs	r2, #1
 80078aa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80078ae:	bf00      	nop
}
 80078b0:	370c      	adds	r7, #12
 80078b2:	46bd      	mov	sp, r7
 80078b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b8:	4770      	bx	lr

080078ba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80078ba:	b480      	push	{r7}
 80078bc:	b083      	sub	sp, #12
 80078be:	af00      	add	r7, sp, #0
 80078c0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80078ca:	bf00      	nop
}
 80078cc:	370c      	adds	r7, #12
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr

080078d6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80078d6:	b480      	push	{r7}
 80078d8:	b083      	sub	sp, #12
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2201      	movs	r2, #1
 80078e2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80078f6:	2300      	movs	r3, #0
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	370c      	adds	r7, #12
 80078fc:	46bd      	mov	sp, r7
 80078fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007902:	4770      	bx	lr

08007904 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b082      	sub	sp, #8
 8007908:	af00      	add	r7, sp, #0
 800790a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2200      	movs	r2, #0
 8007918:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007924:	6878      	ldr	r0, [r7, #4]
 8007926:	f000 fc7a 	bl	800821e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	791b      	ldrb	r3, [r3, #4]
 800792e:	4619      	mov	r1, r3
 8007930:	6878      	ldr	r0, [r7, #4]
 8007932:	f000 fad1 	bl	8007ed8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	795b      	ldrb	r3, [r3, #5]
 800793a:	4619      	mov	r1, r3
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 facb 	bl	8007ed8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007942:	2300      	movs	r3, #0
}
 8007944:	4618      	mov	r0, r3
 8007946:	3708      	adds	r7, #8
 8007948:	46bd      	mov	sp, r7
 800794a:	bd80      	pop	{r7, pc}

0800794c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800794c:	b580      	push	{r7, lr}
 800794e:	b082      	sub	sp, #8
 8007950:	af00      	add	r7, sp, #0
 8007952:	6078      	str	r0, [r7, #4]
 8007954:	460b      	mov	r3, r1
 8007956:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	789b      	ldrb	r3, [r3, #2]
 800795c:	2b01      	cmp	r3, #1
 800795e:	d10f      	bne.n	8007980 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2202      	movs	r2, #2
 8007964:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2201      	movs	r2, #1
 800796a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007972:	78fb      	ldrb	r3, [r7, #3]
 8007974:	b29a      	uxth	r2, r3
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	2200      	movs	r2, #0
 800797e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007980:	2200      	movs	r2, #0
 8007982:	2100      	movs	r1, #0
 8007984:	6878      	ldr	r0, [r7, #4]
 8007986:	f000 f805 	bl	8007994 <USBH_CtlReq>
 800798a:	4603      	mov	r3, r0
}
 800798c:	4618      	mov	r0, r3
 800798e:	3708      	adds	r7, #8
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b086      	sub	sp, #24
 8007998:	af00      	add	r7, sp, #0
 800799a:	60f8      	str	r0, [r7, #12]
 800799c:	60b9      	str	r1, [r7, #8]
 800799e:	4613      	mov	r3, r2
 80079a0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80079a2:	2301      	movs	r3, #1
 80079a4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	789b      	ldrb	r3, [r3, #2]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d002      	beq.n	80079b4 <USBH_CtlReq+0x20>
 80079ae:	2b02      	cmp	r3, #2
 80079b0:	d00f      	beq.n	80079d2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80079b2:	e027      	b.n	8007a04 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	88fa      	ldrh	r2, [r7, #6]
 80079be:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2201      	movs	r2, #1
 80079c4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	2202      	movs	r2, #2
 80079ca:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80079cc:	2301      	movs	r3, #1
 80079ce:	75fb      	strb	r3, [r7, #23]
      break;
 80079d0:	e018      	b.n	8007a04 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 80079d2:	68f8      	ldr	r0, [r7, #12]
 80079d4:	f000 f81c 	bl	8007a10 <USBH_HandleControl>
 80079d8:	4603      	mov	r3, r0
 80079da:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80079dc:	7dfb      	ldrb	r3, [r7, #23]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <USBH_CtlReq+0x54>
 80079e2:	7dfb      	ldrb	r3, [r7, #23]
 80079e4:	2b03      	cmp	r3, #3
 80079e6:	d106      	bne.n	80079f6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	2201      	movs	r2, #1
 80079ec:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	761a      	strb	r2, [r3, #24]
      break;
 80079f4:	e005      	b.n	8007a02 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
 80079f8:	2b02      	cmp	r3, #2
 80079fa:	d102      	bne.n	8007a02 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2201      	movs	r2, #1
 8007a00:	709a      	strb	r2, [r3, #2]
      break;
 8007a02:	bf00      	nop
  }
  return status;
 8007a04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a06:	4618      	mov	r0, r3
 8007a08:	3718      	adds	r7, #24
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}
	...

08007a10 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007a10:	b580      	push	{r7, lr}
 8007a12:	b086      	sub	sp, #24
 8007a14:	af02      	add	r7, sp, #8
 8007a16:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007a18:	2301      	movs	r3, #1
 8007a1a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	7e1b      	ldrb	r3, [r3, #24]
 8007a24:	3b01      	subs	r3, #1
 8007a26:	2b0a      	cmp	r3, #10
 8007a28:	f200 8156 	bhi.w	8007cd8 <USBH_HandleControl+0x2c8>
 8007a2c:	a201      	add	r2, pc, #4	; (adr r2, 8007a34 <USBH_HandleControl+0x24>)
 8007a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a32:	bf00      	nop
 8007a34:	08007a61 	.word	0x08007a61
 8007a38:	08007a7b 	.word	0x08007a7b
 8007a3c:	08007ae5 	.word	0x08007ae5
 8007a40:	08007b0b 	.word	0x08007b0b
 8007a44:	08007b43 	.word	0x08007b43
 8007a48:	08007b6d 	.word	0x08007b6d
 8007a4c:	08007bbf 	.word	0x08007bbf
 8007a50:	08007be1 	.word	0x08007be1
 8007a54:	08007c1d 	.word	0x08007c1d
 8007a58:	08007c43 	.word	0x08007c43
 8007a5c:	08007c81 	.word	0x08007c81
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f103 0110 	add.w	r1, r3, #16
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	795b      	ldrb	r3, [r3, #5]
 8007a6a:	461a      	mov	r2, r3
 8007a6c:	6878      	ldr	r0, [r7, #4]
 8007a6e:	f000 f943 	bl	8007cf8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2202      	movs	r2, #2
 8007a76:	761a      	strb	r2, [r3, #24]
      break;
 8007a78:	e139      	b.n	8007cee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	795b      	ldrb	r3, [r3, #5]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f000 fc79 	bl	8008378 <USBH_LL_GetURBState>
 8007a86:	4603      	mov	r3, r0
 8007a88:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007a8a:	7bbb      	ldrb	r3, [r7, #14]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d11e      	bne.n	8007ace <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	7c1b      	ldrb	r3, [r3, #16]
 8007a94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007a98:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	8adb      	ldrh	r3, [r3, #22]
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d00a      	beq.n	8007ab8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007aa2:	7b7b      	ldrb	r3, [r7, #13]
 8007aa4:	2b80      	cmp	r3, #128	; 0x80
 8007aa6:	d103      	bne.n	8007ab0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2203      	movs	r2, #3
 8007aac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007aae:	e115      	b.n	8007cdc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2205      	movs	r2, #5
 8007ab4:	761a      	strb	r2, [r3, #24]
      break;
 8007ab6:	e111      	b.n	8007cdc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007ab8:	7b7b      	ldrb	r3, [r7, #13]
 8007aba:	2b80      	cmp	r3, #128	; 0x80
 8007abc:	d103      	bne.n	8007ac6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2209      	movs	r2, #9
 8007ac2:	761a      	strb	r2, [r3, #24]
      break;
 8007ac4:	e10a      	b.n	8007cdc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2207      	movs	r2, #7
 8007aca:	761a      	strb	r2, [r3, #24]
      break;
 8007acc:	e106      	b.n	8007cdc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007ace:	7bbb      	ldrb	r3, [r7, #14]
 8007ad0:	2b04      	cmp	r3, #4
 8007ad2:	d003      	beq.n	8007adc <USBH_HandleControl+0xcc>
 8007ad4:	7bbb      	ldrb	r3, [r7, #14]
 8007ad6:	2b02      	cmp	r3, #2
 8007ad8:	f040 8100 	bne.w	8007cdc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	220b      	movs	r2, #11
 8007ae0:	761a      	strb	r2, [r3, #24]
      break;
 8007ae2:	e0fb      	b.n	8007cdc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6899      	ldr	r1, [r3, #8]
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	899a      	ldrh	r2, [r3, #12]
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	791b      	ldrb	r3, [r3, #4]
 8007afc:	6878      	ldr	r0, [r7, #4]
 8007afe:	f000 f93a 	bl	8007d76 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2204      	movs	r2, #4
 8007b06:	761a      	strb	r2, [r3, #24]
      break;
 8007b08:	e0f1      	b.n	8007cee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	791b      	ldrb	r3, [r3, #4]
 8007b0e:	4619      	mov	r1, r3
 8007b10:	6878      	ldr	r0, [r7, #4]
 8007b12:	f000 fc31 	bl	8008378 <USBH_LL_GetURBState>
 8007b16:	4603      	mov	r3, r0
 8007b18:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b1a:	7bbb      	ldrb	r3, [r7, #14]
 8007b1c:	2b01      	cmp	r3, #1
 8007b1e:	d102      	bne.n	8007b26 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2209      	movs	r2, #9
 8007b24:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007b26:	7bbb      	ldrb	r3, [r7, #14]
 8007b28:	2b05      	cmp	r3, #5
 8007b2a:	d102      	bne.n	8007b32 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b30:	e0d6      	b.n	8007ce0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007b32:	7bbb      	ldrb	r3, [r7, #14]
 8007b34:	2b04      	cmp	r3, #4
 8007b36:	f040 80d3 	bne.w	8007ce0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	220b      	movs	r2, #11
 8007b3e:	761a      	strb	r2, [r3, #24]
      break;
 8007b40:	e0ce      	b.n	8007ce0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	6899      	ldr	r1, [r3, #8]
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	899a      	ldrh	r2, [r3, #12]
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	795b      	ldrb	r3, [r3, #5]
 8007b4e:	2001      	movs	r0, #1
 8007b50:	9000      	str	r0, [sp, #0]
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f000 f8ea 	bl	8007d2c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b5e:	b29a      	uxth	r2, r3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2206      	movs	r2, #6
 8007b68:	761a      	strb	r2, [r3, #24]
      break;
 8007b6a:	e0c0      	b.n	8007cee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	795b      	ldrb	r3, [r3, #5]
 8007b70:	4619      	mov	r1, r3
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fc00 	bl	8008378 <USBH_LL_GetURBState>
 8007b78:	4603      	mov	r3, r0
 8007b7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007b7c:	7bbb      	ldrb	r3, [r7, #14]
 8007b7e:	2b01      	cmp	r3, #1
 8007b80:	d103      	bne.n	8007b8a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2207      	movs	r2, #7
 8007b86:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b88:	e0ac      	b.n	8007ce4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
 8007b8c:	2b05      	cmp	r3, #5
 8007b8e:	d105      	bne.n	8007b9c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	220c      	movs	r2, #12
 8007b94:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007b96:	2303      	movs	r3, #3
 8007b98:	73fb      	strb	r3, [r7, #15]
      break;
 8007b9a:	e0a3      	b.n	8007ce4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007b9c:	7bbb      	ldrb	r3, [r7, #14]
 8007b9e:	2b02      	cmp	r3, #2
 8007ba0:	d103      	bne.n	8007baa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2205      	movs	r2, #5
 8007ba6:	761a      	strb	r2, [r3, #24]
      break;
 8007ba8:	e09c      	b.n	8007ce4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007baa:	7bbb      	ldrb	r3, [r7, #14]
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	f040 8099 	bne.w	8007ce4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	220b      	movs	r2, #11
 8007bb6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007bb8:	2302      	movs	r3, #2
 8007bba:	73fb      	strb	r3, [r7, #15]
      break;
 8007bbc:	e092      	b.n	8007ce4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	791b      	ldrb	r3, [r3, #4]
 8007bc2:	2200      	movs	r2, #0
 8007bc4:	2100      	movs	r1, #0
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 f8d5 	bl	8007d76 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007bd2:	b29a      	uxth	r2, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2208      	movs	r2, #8
 8007bdc:	761a      	strb	r2, [r3, #24]

      break;
 8007bde:	e086      	b.n	8007cee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	791b      	ldrb	r3, [r3, #4]
 8007be4:	4619      	mov	r1, r3
 8007be6:	6878      	ldr	r0, [r7, #4]
 8007be8:	f000 fbc6 	bl	8008378 <USBH_LL_GetURBState>
 8007bec:	4603      	mov	r3, r0
 8007bee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007bf0:	7bbb      	ldrb	r3, [r7, #14]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d105      	bne.n	8007c02 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	220d      	movs	r2, #13
 8007bfa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c00:	e072      	b.n	8007ce8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007c02:	7bbb      	ldrb	r3, [r7, #14]
 8007c04:	2b04      	cmp	r3, #4
 8007c06:	d103      	bne.n	8007c10 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	220b      	movs	r2, #11
 8007c0c:	761a      	strb	r2, [r3, #24]
      break;
 8007c0e:	e06b      	b.n	8007ce8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007c10:	7bbb      	ldrb	r3, [r7, #14]
 8007c12:	2b05      	cmp	r3, #5
 8007c14:	d168      	bne.n	8007ce8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007c16:	2303      	movs	r3, #3
 8007c18:	73fb      	strb	r3, [r7, #15]
      break;
 8007c1a:	e065      	b.n	8007ce8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	795b      	ldrb	r3, [r3, #5]
 8007c20:	2201      	movs	r2, #1
 8007c22:	9200      	str	r2, [sp, #0]
 8007c24:	2200      	movs	r2, #0
 8007c26:	2100      	movs	r1, #0
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f000 f87f 	bl	8007d2c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	220a      	movs	r2, #10
 8007c3e:	761a      	strb	r2, [r3, #24]
      break;
 8007c40:	e055      	b.n	8007cee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	795b      	ldrb	r3, [r3, #5]
 8007c46:	4619      	mov	r1, r3
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f000 fb95 	bl	8008378 <USBH_LL_GetURBState>
 8007c4e:	4603      	mov	r3, r0
 8007c50:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007c52:	7bbb      	ldrb	r3, [r7, #14]
 8007c54:	2b01      	cmp	r3, #1
 8007c56:	d105      	bne.n	8007c64 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007c58:	2300      	movs	r3, #0
 8007c5a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	220d      	movs	r2, #13
 8007c60:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c62:	e043      	b.n	8007cec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c64:	7bbb      	ldrb	r3, [r7, #14]
 8007c66:	2b02      	cmp	r3, #2
 8007c68:	d103      	bne.n	8007c72 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2209      	movs	r2, #9
 8007c6e:	761a      	strb	r2, [r3, #24]
      break;
 8007c70:	e03c      	b.n	8007cec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007c72:	7bbb      	ldrb	r3, [r7, #14]
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	d139      	bne.n	8007cec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	220b      	movs	r2, #11
 8007c7c:	761a      	strb	r2, [r3, #24]
      break;
 8007c7e:	e035      	b.n	8007cec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	7e5b      	ldrb	r3, [r3, #25]
 8007c84:	3301      	adds	r3, #1
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	765a      	strb	r2, [r3, #25]
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	7e5b      	ldrb	r3, [r3, #25]
 8007c90:	2b02      	cmp	r3, #2
 8007c92:	d806      	bhi.n	8007ca2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	2201      	movs	r2, #1
 8007c98:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2201      	movs	r2, #1
 8007c9e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007ca0:	e025      	b.n	8007cee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007ca8:	2106      	movs	r1, #6
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	795b      	ldrb	r3, [r3, #5]
 8007cb8:	4619      	mov	r1, r3
 8007cba:	6878      	ldr	r0, [r7, #4]
 8007cbc:	f000 f90c 	bl	8007ed8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	791b      	ldrb	r3, [r3, #4]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f906 	bl	8007ed8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007cd2:	2302      	movs	r3, #2
 8007cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8007cd6:	e00a      	b.n	8007cee <USBH_HandleControl+0x2de>

    default:
      break;
 8007cd8:	bf00      	nop
 8007cda:	e008      	b.n	8007cee <USBH_HandleControl+0x2de>
      break;
 8007cdc:	bf00      	nop
 8007cde:	e006      	b.n	8007cee <USBH_HandleControl+0x2de>
      break;
 8007ce0:	bf00      	nop
 8007ce2:	e004      	b.n	8007cee <USBH_HandleControl+0x2de>
      break;
 8007ce4:	bf00      	nop
 8007ce6:	e002      	b.n	8007cee <USBH_HandleControl+0x2de>
      break;
 8007ce8:	bf00      	nop
 8007cea:	e000      	b.n	8007cee <USBH_HandleControl+0x2de>
      break;
 8007cec:	bf00      	nop
  }

  return status;
 8007cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b088      	sub	sp, #32
 8007cfc:	af04      	add	r7, sp, #16
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	4613      	mov	r3, r2
 8007d04:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d06:	79f9      	ldrb	r1, [r7, #7]
 8007d08:	2300      	movs	r3, #0
 8007d0a:	9303      	str	r3, [sp, #12]
 8007d0c:	2308      	movs	r3, #8
 8007d0e:	9302      	str	r3, [sp, #8]
 8007d10:	68bb      	ldr	r3, [r7, #8]
 8007d12:	9301      	str	r3, [sp, #4]
 8007d14:	2300      	movs	r3, #0
 8007d16:	9300      	str	r3, [sp, #0]
 8007d18:	2300      	movs	r3, #0
 8007d1a:	2200      	movs	r2, #0
 8007d1c:	68f8      	ldr	r0, [r7, #12]
 8007d1e:	f000 fafa 	bl	8008316 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007d22:	2300      	movs	r3, #0
}
 8007d24:	4618      	mov	r0, r3
 8007d26:	3710      	adds	r7, #16
 8007d28:	46bd      	mov	sp, r7
 8007d2a:	bd80      	pop	{r7, pc}

08007d2c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007d2c:	b580      	push	{r7, lr}
 8007d2e:	b088      	sub	sp, #32
 8007d30:	af04      	add	r7, sp, #16
 8007d32:	60f8      	str	r0, [r7, #12]
 8007d34:	60b9      	str	r1, [r7, #8]
 8007d36:	4611      	mov	r1, r2
 8007d38:	461a      	mov	r2, r3
 8007d3a:	460b      	mov	r3, r1
 8007d3c:	80fb      	strh	r3, [r7, #6]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007d48:	2b00      	cmp	r3, #0
 8007d4a:	d001      	beq.n	8007d50 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007d4c:	2300      	movs	r3, #0
 8007d4e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d50:	7979      	ldrb	r1, [r7, #5]
 8007d52:	7e3b      	ldrb	r3, [r7, #24]
 8007d54:	9303      	str	r3, [sp, #12]
 8007d56:	88fb      	ldrh	r3, [r7, #6]
 8007d58:	9302      	str	r3, [sp, #8]
 8007d5a:	68bb      	ldr	r3, [r7, #8]
 8007d5c:	9301      	str	r3, [sp, #4]
 8007d5e:	2301      	movs	r3, #1
 8007d60:	9300      	str	r3, [sp, #0]
 8007d62:	2300      	movs	r3, #0
 8007d64:	2200      	movs	r2, #0
 8007d66:	68f8      	ldr	r0, [r7, #12]
 8007d68:	f000 fad5 	bl	8008316 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007d6c:	2300      	movs	r3, #0
}
 8007d6e:	4618      	mov	r0, r3
 8007d70:	3710      	adds	r7, #16
 8007d72:	46bd      	mov	sp, r7
 8007d74:	bd80      	pop	{r7, pc}

08007d76 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007d76:	b580      	push	{r7, lr}
 8007d78:	b088      	sub	sp, #32
 8007d7a:	af04      	add	r7, sp, #16
 8007d7c:	60f8      	str	r0, [r7, #12]
 8007d7e:	60b9      	str	r1, [r7, #8]
 8007d80:	4611      	mov	r1, r2
 8007d82:	461a      	mov	r2, r3
 8007d84:	460b      	mov	r3, r1
 8007d86:	80fb      	strh	r3, [r7, #6]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007d8c:	7979      	ldrb	r1, [r7, #5]
 8007d8e:	2300      	movs	r3, #0
 8007d90:	9303      	str	r3, [sp, #12]
 8007d92:	88fb      	ldrh	r3, [r7, #6]
 8007d94:	9302      	str	r3, [sp, #8]
 8007d96:	68bb      	ldr	r3, [r7, #8]
 8007d98:	9301      	str	r3, [sp, #4]
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	2300      	movs	r3, #0
 8007da0:	2201      	movs	r2, #1
 8007da2:	68f8      	ldr	r0, [r7, #12]
 8007da4:	f000 fab7 	bl	8008316 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007da8:	2300      	movs	r3, #0

}
 8007daa:	4618      	mov	r0, r3
 8007dac:	3710      	adds	r7, #16
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}

08007db2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007db2:	b580      	push	{r7, lr}
 8007db4:	b088      	sub	sp, #32
 8007db6:	af04      	add	r7, sp, #16
 8007db8:	60f8      	str	r0, [r7, #12]
 8007dba:	60b9      	str	r1, [r7, #8]
 8007dbc:	4611      	mov	r1, r2
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	460b      	mov	r3, r1
 8007dc2:	80fb      	strh	r3, [r7, #6]
 8007dc4:	4613      	mov	r3, r2
 8007dc6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d001      	beq.n	8007dd6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007dd6:	7979      	ldrb	r1, [r7, #5]
 8007dd8:	7e3b      	ldrb	r3, [r7, #24]
 8007dda:	9303      	str	r3, [sp, #12]
 8007ddc:	88fb      	ldrh	r3, [r7, #6]
 8007dde:	9302      	str	r3, [sp, #8]
 8007de0:	68bb      	ldr	r3, [r7, #8]
 8007de2:	9301      	str	r3, [sp, #4]
 8007de4:	2301      	movs	r3, #1
 8007de6:	9300      	str	r3, [sp, #0]
 8007de8:	2302      	movs	r3, #2
 8007dea:	2200      	movs	r2, #0
 8007dec:	68f8      	ldr	r0, [r7, #12]
 8007dee:	f000 fa92 	bl	8008316 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007df2:	2300      	movs	r3, #0
}
 8007df4:	4618      	mov	r0, r3
 8007df6:	3710      	adds	r7, #16
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	bd80      	pop	{r7, pc}

08007dfc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b088      	sub	sp, #32
 8007e00:	af04      	add	r7, sp, #16
 8007e02:	60f8      	str	r0, [r7, #12]
 8007e04:	60b9      	str	r1, [r7, #8]
 8007e06:	4611      	mov	r1, r2
 8007e08:	461a      	mov	r2, r3
 8007e0a:	460b      	mov	r3, r1
 8007e0c:	80fb      	strh	r3, [r7, #6]
 8007e0e:	4613      	mov	r3, r2
 8007e10:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007e12:	7979      	ldrb	r1, [r7, #5]
 8007e14:	2300      	movs	r3, #0
 8007e16:	9303      	str	r3, [sp, #12]
 8007e18:	88fb      	ldrh	r3, [r7, #6]
 8007e1a:	9302      	str	r3, [sp, #8]
 8007e1c:	68bb      	ldr	r3, [r7, #8]
 8007e1e:	9301      	str	r3, [sp, #4]
 8007e20:	2301      	movs	r3, #1
 8007e22:	9300      	str	r3, [sp, #0]
 8007e24:	2302      	movs	r3, #2
 8007e26:	2201      	movs	r2, #1
 8007e28:	68f8      	ldr	r0, [r7, #12]
 8007e2a:	f000 fa74 	bl	8008316 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007e2e:	2300      	movs	r3, #0
}
 8007e30:	4618      	mov	r0, r3
 8007e32:	3710      	adds	r7, #16
 8007e34:	46bd      	mov	sp, r7
 8007e36:	bd80      	pop	{r7, pc}

08007e38 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b086      	sub	sp, #24
 8007e3c:	af04      	add	r7, sp, #16
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	4608      	mov	r0, r1
 8007e42:	4611      	mov	r1, r2
 8007e44:	461a      	mov	r2, r3
 8007e46:	4603      	mov	r3, r0
 8007e48:	70fb      	strb	r3, [r7, #3]
 8007e4a:	460b      	mov	r3, r1
 8007e4c:	70bb      	strb	r3, [r7, #2]
 8007e4e:	4613      	mov	r3, r2
 8007e50:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007e52:	7878      	ldrb	r0, [r7, #1]
 8007e54:	78ba      	ldrb	r2, [r7, #2]
 8007e56:	78f9      	ldrb	r1, [r7, #3]
 8007e58:	8b3b      	ldrh	r3, [r7, #24]
 8007e5a:	9302      	str	r3, [sp, #8]
 8007e5c:	7d3b      	ldrb	r3, [r7, #20]
 8007e5e:	9301      	str	r3, [sp, #4]
 8007e60:	7c3b      	ldrb	r3, [r7, #16]
 8007e62:	9300      	str	r3, [sp, #0]
 8007e64:	4603      	mov	r3, r0
 8007e66:	6878      	ldr	r0, [r7, #4]
 8007e68:	f000 fa07 	bl	800827a <USBH_LL_OpenPipe>

  return USBH_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3708      	adds	r7, #8
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b082      	sub	sp, #8
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007e82:	78fb      	ldrb	r3, [r7, #3]
 8007e84:	4619      	mov	r1, r3
 8007e86:	6878      	ldr	r0, [r7, #4]
 8007e88:	f000 fa26 	bl	80082d8 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007e8c:	2300      	movs	r3, #0
}
 8007e8e:	4618      	mov	r0, r3
 8007e90:	3708      	adds	r7, #8
 8007e92:	46bd      	mov	sp, r7
 8007e94:	bd80      	pop	{r7, pc}

08007e96 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007e96:	b580      	push	{r7, lr}
 8007e98:	b084      	sub	sp, #16
 8007e9a:	af00      	add	r7, sp, #0
 8007e9c:	6078      	str	r0, [r7, #4]
 8007e9e:	460b      	mov	r3, r1
 8007ea0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f000 f836 	bl	8007f14 <USBH_GetFreePipe>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007eac:	89fb      	ldrh	r3, [r7, #14]
 8007eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007eb2:	4293      	cmp	r3, r2
 8007eb4:	d00a      	beq.n	8007ecc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007eb6:	78fa      	ldrb	r2, [r7, #3]
 8007eb8:	89fb      	ldrh	r3, [r7, #14]
 8007eba:	f003 030f 	and.w	r3, r3, #15
 8007ebe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007ec2:	6879      	ldr	r1, [r7, #4]
 8007ec4:	33e0      	adds	r3, #224	; 0xe0
 8007ec6:	009b      	lsls	r3, r3, #2
 8007ec8:	440b      	add	r3, r1
 8007eca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007ecc:	89fb      	ldrh	r3, [r7, #14]
 8007ece:	b2db      	uxtb	r3, r3
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b083      	sub	sp, #12
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007ee4:	78fb      	ldrb	r3, [r7, #3]
 8007ee6:	2b0f      	cmp	r3, #15
 8007ee8:	d80d      	bhi.n	8007f06 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007eea:	78fb      	ldrb	r3, [r7, #3]
 8007eec:	687a      	ldr	r2, [r7, #4]
 8007eee:	33e0      	adds	r3, #224	; 0xe0
 8007ef0:	009b      	lsls	r3, r3, #2
 8007ef2:	4413      	add	r3, r2
 8007ef4:	685a      	ldr	r2, [r3, #4]
 8007ef6:	78fb      	ldrb	r3, [r7, #3]
 8007ef8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007efc:	6879      	ldr	r1, [r7, #4]
 8007efe:	33e0      	adds	r3, #224	; 0xe0
 8007f00:	009b      	lsls	r3, r3, #2
 8007f02:	440b      	add	r3, r1
 8007f04:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007f06:	2300      	movs	r3, #0
}
 8007f08:	4618      	mov	r0, r3
 8007f0a:	370c      	adds	r7, #12
 8007f0c:	46bd      	mov	sp, r7
 8007f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f12:	4770      	bx	lr

08007f14 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b085      	sub	sp, #20
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007f1c:	2300      	movs	r3, #0
 8007f1e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007f20:	2300      	movs	r3, #0
 8007f22:	73fb      	strb	r3, [r7, #15]
 8007f24:	e00f      	b.n	8007f46 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007f26:	7bfb      	ldrb	r3, [r7, #15]
 8007f28:	687a      	ldr	r2, [r7, #4]
 8007f2a:	33e0      	adds	r3, #224	; 0xe0
 8007f2c:	009b      	lsls	r3, r3, #2
 8007f2e:	4413      	add	r3, r2
 8007f30:	685b      	ldr	r3, [r3, #4]
 8007f32:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d102      	bne.n	8007f40 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007f3a:	7bfb      	ldrb	r3, [r7, #15]
 8007f3c:	b29b      	uxth	r3, r3
 8007f3e:	e007      	b.n	8007f50 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007f40:	7bfb      	ldrb	r3, [r7, #15]
 8007f42:	3301      	adds	r3, #1
 8007f44:	73fb      	strb	r3, [r7, #15]
 8007f46:	7bfb      	ldrb	r3, [r7, #15]
 8007f48:	2b0f      	cmp	r3, #15
 8007f4a:	d9ec      	bls.n	8007f26 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007f4c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3714      	adds	r7, #20
 8007f54:	46bd      	mov	sp, r7
 8007f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f5a:	4770      	bx	lr

08007f5c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007f5c:	b580      	push	{r7, lr}
 8007f5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007f60:	2201      	movs	r2, #1
 8007f62:	490e      	ldr	r1, [pc, #56]	; (8007f9c <MX_USB_HOST_Init+0x40>)
 8007f64:	480e      	ldr	r0, [pc, #56]	; (8007fa0 <MX_USB_HOST_Init+0x44>)
 8007f66:	f7ff fb37 	bl	80075d8 <USBH_Init>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d001      	beq.n	8007f74 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007f70:	f7f9 fcc8 	bl	8001904 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007f74:	490b      	ldr	r1, [pc, #44]	; (8007fa4 <MX_USB_HOST_Init+0x48>)
 8007f76:	480a      	ldr	r0, [pc, #40]	; (8007fa0 <MX_USB_HOST_Init+0x44>)
 8007f78:	f7ff fbbc 	bl	80076f4 <USBH_RegisterClass>
 8007f7c:	4603      	mov	r3, r0
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d001      	beq.n	8007f86 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007f82:	f7f9 fcbf 	bl	8001904 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007f86:	4806      	ldr	r0, [pc, #24]	; (8007fa0 <MX_USB_HOST_Init+0x44>)
 8007f88:	f7ff fc40 	bl	800780c <USBH_Start>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d001      	beq.n	8007f96 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007f92:	f7f9 fcb7 	bl	8001904 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007f96:	bf00      	nop
 8007f98:	bd80      	pop	{r7, pc}
 8007f9a:	bf00      	nop
 8007f9c:	08007fa9 	.word	0x08007fa9
 8007fa0:	200003c0 	.word	0x200003c0
 8007fa4:	20000024 	.word	0x20000024

08007fa8 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007fa8:	b480      	push	{r7}
 8007faa:	b083      	sub	sp, #12
 8007fac:	af00      	add	r7, sp, #0
 8007fae:	6078      	str	r0, [r7, #4]
 8007fb0:	460b      	mov	r3, r1
 8007fb2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007fb4:	78fb      	ldrb	r3, [r7, #3]
 8007fb6:	3b01      	subs	r3, #1
 8007fb8:	2b04      	cmp	r3, #4
 8007fba:	d819      	bhi.n	8007ff0 <USBH_UserProcess+0x48>
 8007fbc:	a201      	add	r2, pc, #4	; (adr r2, 8007fc4 <USBH_UserProcess+0x1c>)
 8007fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fc2:	bf00      	nop
 8007fc4:	08007ff1 	.word	0x08007ff1
 8007fc8:	08007fe1 	.word	0x08007fe1
 8007fcc:	08007ff1 	.word	0x08007ff1
 8007fd0:	08007fe9 	.word	0x08007fe9
 8007fd4:	08007fd9 	.word	0x08007fd9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007fd8:	4b09      	ldr	r3, [pc, #36]	; (8008000 <USBH_UserProcess+0x58>)
 8007fda:	2203      	movs	r2, #3
 8007fdc:	701a      	strb	r2, [r3, #0]
  break;
 8007fde:	e008      	b.n	8007ff2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007fe0:	4b07      	ldr	r3, [pc, #28]	; (8008000 <USBH_UserProcess+0x58>)
 8007fe2:	2202      	movs	r2, #2
 8007fe4:	701a      	strb	r2, [r3, #0]
  break;
 8007fe6:	e004      	b.n	8007ff2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007fe8:	4b05      	ldr	r3, [pc, #20]	; (8008000 <USBH_UserProcess+0x58>)
 8007fea:	2201      	movs	r2, #1
 8007fec:	701a      	strb	r2, [r3, #0]
  break;
 8007fee:	e000      	b.n	8007ff2 <USBH_UserProcess+0x4a>

  default:
  break;
 8007ff0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007ff2:	bf00      	nop
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr
 8007ffe:	bf00      	nop
 8008000:	20000798 	.word	0x20000798

08008004 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008004:	b580      	push	{r7, lr}
 8008006:	b08a      	sub	sp, #40	; 0x28
 8008008:	af00      	add	r7, sp, #0
 800800a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800800c:	f107 0314 	add.w	r3, r7, #20
 8008010:	2200      	movs	r2, #0
 8008012:	601a      	str	r2, [r3, #0]
 8008014:	605a      	str	r2, [r3, #4]
 8008016:	609a      	str	r2, [r3, #8]
 8008018:	60da      	str	r2, [r3, #12]
 800801a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008024:	d147      	bne.n	80080b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008026:	2300      	movs	r3, #0
 8008028:	613b      	str	r3, [r7, #16]
 800802a:	4b25      	ldr	r3, [pc, #148]	; (80080c0 <HAL_HCD_MspInit+0xbc>)
 800802c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800802e:	4a24      	ldr	r2, [pc, #144]	; (80080c0 <HAL_HCD_MspInit+0xbc>)
 8008030:	f043 0301 	orr.w	r3, r3, #1
 8008034:	6313      	str	r3, [r2, #48]	; 0x30
 8008036:	4b22      	ldr	r3, [pc, #136]	; (80080c0 <HAL_HCD_MspInit+0xbc>)
 8008038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800803a:	f003 0301 	and.w	r3, r3, #1
 800803e:	613b      	str	r3, [r7, #16]
 8008040:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008042:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008046:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008048:	2300      	movs	r3, #0
 800804a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800804c:	2300      	movs	r3, #0
 800804e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008050:	f107 0314 	add.w	r3, r7, #20
 8008054:	4619      	mov	r1, r3
 8008056:	481b      	ldr	r0, [pc, #108]	; (80080c4 <HAL_HCD_MspInit+0xc0>)
 8008058:	f7fa fca2 	bl	80029a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800805c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008062:	2302      	movs	r3, #2
 8008064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008066:	2300      	movs	r3, #0
 8008068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800806a:	2300      	movs	r3, #0
 800806c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800806e:	230a      	movs	r3, #10
 8008070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008072:	f107 0314 	add.w	r3, r7, #20
 8008076:	4619      	mov	r1, r3
 8008078:	4812      	ldr	r0, [pc, #72]	; (80080c4 <HAL_HCD_MspInit+0xc0>)
 800807a:	f7fa fc91 	bl	80029a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800807e:	4b10      	ldr	r3, [pc, #64]	; (80080c0 <HAL_HCD_MspInit+0xbc>)
 8008080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008082:	4a0f      	ldr	r2, [pc, #60]	; (80080c0 <HAL_HCD_MspInit+0xbc>)
 8008084:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008088:	6353      	str	r3, [r2, #52]	; 0x34
 800808a:	2300      	movs	r3, #0
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	4b0c      	ldr	r3, [pc, #48]	; (80080c0 <HAL_HCD_MspInit+0xbc>)
 8008090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008092:	4a0b      	ldr	r2, [pc, #44]	; (80080c0 <HAL_HCD_MspInit+0xbc>)
 8008094:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008098:	6453      	str	r3, [r2, #68]	; 0x44
 800809a:	4b09      	ldr	r3, [pc, #36]	; (80080c0 <HAL_HCD_MspInit+0xbc>)
 800809c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800809e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80080a2:	60fb      	str	r3, [r7, #12]
 80080a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80080a6:	2200      	movs	r2, #0
 80080a8:	2100      	movs	r1, #0
 80080aa:	2043      	movs	r0, #67	; 0x43
 80080ac:	f7fa fc41 	bl	8002932 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80080b0:	2043      	movs	r0, #67	; 0x43
 80080b2:	f7fa fc5a 	bl	800296a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80080b6:	bf00      	nop
 80080b8:	3728      	adds	r7, #40	; 0x28
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}
 80080be:	bf00      	nop
 80080c0:	40023800 	.word	0x40023800
 80080c4:	40020000 	.word	0x40020000

080080c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b082      	sub	sp, #8
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080d6:	4618      	mov	r0, r3
 80080d8:	f7ff fbb7 	bl	800784a <USBH_LL_IncTimer>
}
 80080dc:	bf00      	nop
 80080de:	3708      	adds	r7, #8
 80080e0:	46bd      	mov	sp, r7
 80080e2:	bd80      	pop	{r7, pc}

080080e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b082      	sub	sp, #8
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80080f2:	4618      	mov	r0, r3
 80080f4:	f7ff fbef 	bl	80078d6 <USBH_LL_Connect>
}
 80080f8:	bf00      	nop
 80080fa:	3708      	adds	r7, #8
 80080fc:	46bd      	mov	sp, r7
 80080fe:	bd80      	pop	{r7, pc}

08008100 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008100:	b580      	push	{r7, lr}
 8008102:	b082      	sub	sp, #8
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800810e:	4618      	mov	r0, r3
 8008110:	f7ff fbf8 	bl	8007904 <USBH_LL_Disconnect>
}
 8008114:	bf00      	nop
 8008116:	3708      	adds	r7, #8
 8008118:	46bd      	mov	sp, r7
 800811a:	bd80      	pop	{r7, pc}

0800811c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800811c:	b480      	push	{r7}
 800811e:	b083      	sub	sp, #12
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
 8008124:	460b      	mov	r3, r1
 8008126:	70fb      	strb	r3, [r7, #3]
 8008128:	4613      	mov	r3, r2
 800812a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800812c:	bf00      	nop
 800812e:	370c      	adds	r7, #12
 8008130:	46bd      	mov	sp, r7
 8008132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008136:	4770      	bx	lr

08008138 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008138:	b580      	push	{r7, lr}
 800813a:	b082      	sub	sp, #8
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008146:	4618      	mov	r0, r3
 8008148:	f7ff fba9 	bl	800789e <USBH_LL_PortEnabled>
}
 800814c:	bf00      	nop
 800814e:	3708      	adds	r7, #8
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}

08008154 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008154:	b580      	push	{r7, lr}
 8008156:	b082      	sub	sp, #8
 8008158:	af00      	add	r7, sp, #0
 800815a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008162:	4618      	mov	r0, r3
 8008164:	f7ff fba9 	bl	80078ba <USBH_LL_PortDisabled>
}
 8008168:	bf00      	nop
 800816a:	3708      	adds	r7, #8
 800816c:	46bd      	mov	sp, r7
 800816e:	bd80      	pop	{r7, pc}

08008170 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800817e:	2b01      	cmp	r3, #1
 8008180:	d12a      	bne.n	80081d8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008182:	4a18      	ldr	r2, [pc, #96]	; (80081e4 <USBH_LL_Init+0x74>)
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a15      	ldr	r2, [pc, #84]	; (80081e4 <USBH_LL_Init+0x74>)
 800818e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008192:	4b14      	ldr	r3, [pc, #80]	; (80081e4 <USBH_LL_Init+0x74>)
 8008194:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008198:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800819a:	4b12      	ldr	r3, [pc, #72]	; (80081e4 <USBH_LL_Init+0x74>)
 800819c:	2208      	movs	r2, #8
 800819e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80081a0:	4b10      	ldr	r3, [pc, #64]	; (80081e4 <USBH_LL_Init+0x74>)
 80081a2:	2201      	movs	r2, #1
 80081a4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80081a6:	4b0f      	ldr	r3, [pc, #60]	; (80081e4 <USBH_LL_Init+0x74>)
 80081a8:	2200      	movs	r2, #0
 80081aa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80081ac:	4b0d      	ldr	r3, [pc, #52]	; (80081e4 <USBH_LL_Init+0x74>)
 80081ae:	2202      	movs	r2, #2
 80081b0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80081b2:	4b0c      	ldr	r3, [pc, #48]	; (80081e4 <USBH_LL_Init+0x74>)
 80081b4:	2200      	movs	r2, #0
 80081b6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80081b8:	480a      	ldr	r0, [pc, #40]	; (80081e4 <USBH_LL_Init+0x74>)
 80081ba:	f7fa fda6 	bl	8002d0a <HAL_HCD_Init>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80081c4:	f7f9 fb9e 	bl	8001904 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80081c8:	4806      	ldr	r0, [pc, #24]	; (80081e4 <USBH_LL_Init+0x74>)
 80081ca:	f7fb f97c 	bl	80034c6 <HAL_HCD_GetCurrentFrame>
 80081ce:	4603      	mov	r3, r0
 80081d0:	4619      	mov	r1, r3
 80081d2:	6878      	ldr	r0, [r7, #4]
 80081d4:	f7ff fb2a 	bl	800782c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80081d8:	2300      	movs	r3, #0
}
 80081da:	4618      	mov	r0, r3
 80081dc:	3708      	adds	r7, #8
 80081de:	46bd      	mov	sp, r7
 80081e0:	bd80      	pop	{r7, pc}
 80081e2:	bf00      	nop
 80081e4:	2000079c 	.word	0x2000079c

080081e8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80081e8:	b580      	push	{r7, lr}
 80081ea:	b084      	sub	sp, #16
 80081ec:	af00      	add	r7, sp, #0
 80081ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f0:	2300      	movs	r3, #0
 80081f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80081f4:	2300      	movs	r3, #0
 80081f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80081fe:	4618      	mov	r0, r3
 8008200:	f7fb f8f9 	bl	80033f6 <HAL_HCD_Start>
 8008204:	4603      	mov	r3, r0
 8008206:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008208:	7bfb      	ldrb	r3, [r7, #15]
 800820a:	4618      	mov	r0, r3
 800820c:	f000 f90e 	bl	800842c <USBH_Get_USB_Status>
 8008210:	4603      	mov	r3, r0
 8008212:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008214:	7bbb      	ldrb	r3, [r7, #14]
}
 8008216:	4618      	mov	r0, r3
 8008218:	3710      	adds	r7, #16
 800821a:	46bd      	mov	sp, r7
 800821c:	bd80      	pop	{r7, pc}

0800821e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800821e:	b580      	push	{r7, lr}
 8008220:	b084      	sub	sp, #16
 8008222:	af00      	add	r7, sp, #0
 8008224:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008226:	2300      	movs	r3, #0
 8008228:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800822a:	2300      	movs	r3, #0
 800822c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008234:	4618      	mov	r0, r3
 8008236:	f7fb f901 	bl	800343c <HAL_HCD_Stop>
 800823a:	4603      	mov	r3, r0
 800823c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800823e:	7bfb      	ldrb	r3, [r7, #15]
 8008240:	4618      	mov	r0, r3
 8008242:	f000 f8f3 	bl	800842c <USBH_Get_USB_Status>
 8008246:	4603      	mov	r3, r0
 8008248:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800824a:	7bbb      	ldrb	r3, [r7, #14]
}
 800824c:	4618      	mov	r0, r3
 800824e:	3710      	adds	r7, #16
 8008250:	46bd      	mov	sp, r7
 8008252:	bd80      	pop	{r7, pc}

08008254 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
 800825c:	460b      	mov	r3, r1
 800825e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008266:	78fa      	ldrb	r2, [r7, #3]
 8008268:	4611      	mov	r1, r2
 800826a:	4618      	mov	r0, r3
 800826c:	f7fb f917 	bl	800349e <HAL_HCD_HC_GetXferCount>
 8008270:	4603      	mov	r3, r0
}
 8008272:	4618      	mov	r0, r3
 8008274:	3708      	adds	r7, #8
 8008276:	46bd      	mov	sp, r7
 8008278:	bd80      	pop	{r7, pc}

0800827a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800827a:	b590      	push	{r4, r7, lr}
 800827c:	b089      	sub	sp, #36	; 0x24
 800827e:	af04      	add	r7, sp, #16
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	4608      	mov	r0, r1
 8008284:	4611      	mov	r1, r2
 8008286:	461a      	mov	r2, r3
 8008288:	4603      	mov	r3, r0
 800828a:	70fb      	strb	r3, [r7, #3]
 800828c:	460b      	mov	r3, r1
 800828e:	70bb      	strb	r3, [r7, #2]
 8008290:	4613      	mov	r3, r2
 8008292:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008294:	2300      	movs	r3, #0
 8008296:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008298:	2300      	movs	r3, #0
 800829a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80082a2:	787c      	ldrb	r4, [r7, #1]
 80082a4:	78ba      	ldrb	r2, [r7, #2]
 80082a6:	78f9      	ldrb	r1, [r7, #3]
 80082a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80082aa:	9302      	str	r3, [sp, #8]
 80082ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80082b0:	9301      	str	r3, [sp, #4]
 80082b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80082b6:	9300      	str	r3, [sp, #0]
 80082b8:	4623      	mov	r3, r4
 80082ba:	f7fa fd88 	bl	8002dce <HAL_HCD_HC_Init>
 80082be:	4603      	mov	r3, r0
 80082c0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80082c2:	7bfb      	ldrb	r3, [r7, #15]
 80082c4:	4618      	mov	r0, r3
 80082c6:	f000 f8b1 	bl	800842c <USBH_Get_USB_Status>
 80082ca:	4603      	mov	r3, r0
 80082cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3714      	adds	r7, #20
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd90      	pop	{r4, r7, pc}

080082d8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80082d8:	b580      	push	{r7, lr}
 80082da:	b084      	sub	sp, #16
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082e4:	2300      	movs	r3, #0
 80082e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082e8:	2300      	movs	r3, #0
 80082ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082f2:	78fa      	ldrb	r2, [r7, #3]
 80082f4:	4611      	mov	r1, r2
 80082f6:	4618      	mov	r0, r3
 80082f8:	f7fa fdf8 	bl	8002eec <HAL_HCD_HC_Halt>
 80082fc:	4603      	mov	r3, r0
 80082fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008300:	7bfb      	ldrb	r3, [r7, #15]
 8008302:	4618      	mov	r0, r3
 8008304:	f000 f892 	bl	800842c <USBH_Get_USB_Status>
 8008308:	4603      	mov	r3, r0
 800830a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800830c:	7bbb      	ldrb	r3, [r7, #14]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3710      	adds	r7, #16
 8008312:	46bd      	mov	sp, r7
 8008314:	bd80      	pop	{r7, pc}

08008316 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008316:	b590      	push	{r4, r7, lr}
 8008318:	b089      	sub	sp, #36	; 0x24
 800831a:	af04      	add	r7, sp, #16
 800831c:	6078      	str	r0, [r7, #4]
 800831e:	4608      	mov	r0, r1
 8008320:	4611      	mov	r1, r2
 8008322:	461a      	mov	r2, r3
 8008324:	4603      	mov	r3, r0
 8008326:	70fb      	strb	r3, [r7, #3]
 8008328:	460b      	mov	r3, r1
 800832a:	70bb      	strb	r3, [r7, #2]
 800832c:	4613      	mov	r3, r2
 800832e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008330:	2300      	movs	r3, #0
 8008332:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008334:	2300      	movs	r3, #0
 8008336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800833e:	787c      	ldrb	r4, [r7, #1]
 8008340:	78ba      	ldrb	r2, [r7, #2]
 8008342:	78f9      	ldrb	r1, [r7, #3]
 8008344:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008348:	9303      	str	r3, [sp, #12]
 800834a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800834c:	9302      	str	r3, [sp, #8]
 800834e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008350:	9301      	str	r3, [sp, #4]
 8008352:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008356:	9300      	str	r3, [sp, #0]
 8008358:	4623      	mov	r3, r4
 800835a:	f7fa fdeb 	bl	8002f34 <HAL_HCD_HC_SubmitRequest>
 800835e:	4603      	mov	r3, r0
 8008360:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008362:	7bfb      	ldrb	r3, [r7, #15]
 8008364:	4618      	mov	r0, r3
 8008366:	f000 f861 	bl	800842c <USBH_Get_USB_Status>
 800836a:	4603      	mov	r3, r0
 800836c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800836e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	bd90      	pop	{r4, r7, pc}

08008378 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b082      	sub	sp, #8
 800837c:	af00      	add	r7, sp, #0
 800837e:	6078      	str	r0, [r7, #4]
 8008380:	460b      	mov	r3, r1
 8008382:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800838a:	78fa      	ldrb	r2, [r7, #3]
 800838c:	4611      	mov	r1, r2
 800838e:	4618      	mov	r0, r3
 8008390:	f7fb f871 	bl	8003476 <HAL_HCD_HC_GetURBState>
 8008394:	4603      	mov	r3, r0
}
 8008396:	4618      	mov	r0, r3
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800839e:	b580      	push	{r7, lr}
 80083a0:	b082      	sub	sp, #8
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
 80083a6:	460b      	mov	r3, r1
 80083a8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80083b0:	2b01      	cmp	r3, #1
 80083b2:	d103      	bne.n	80083bc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80083b4:	78fb      	ldrb	r3, [r7, #3]
 80083b6:	4618      	mov	r0, r3
 80083b8:	f000 f864 	bl	8008484 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80083bc:	20c8      	movs	r0, #200	; 0xc8
 80083be:	f7f9 fded 	bl	8001f9c <HAL_Delay>
  return USBH_OK;
 80083c2:	2300      	movs	r3, #0
}
 80083c4:	4618      	mov	r0, r3
 80083c6:	3708      	adds	r7, #8
 80083c8:	46bd      	mov	sp, r7
 80083ca:	bd80      	pop	{r7, pc}

080083cc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b085      	sub	sp, #20
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
 80083d4:	460b      	mov	r3, r1
 80083d6:	70fb      	strb	r3, [r7, #3]
 80083d8:	4613      	mov	r3, r2
 80083da:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083e2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80083e4:	78fb      	ldrb	r3, [r7, #3]
 80083e6:	68fa      	ldr	r2, [r7, #12]
 80083e8:	212c      	movs	r1, #44	; 0x2c
 80083ea:	fb01 f303 	mul.w	r3, r1, r3
 80083ee:	4413      	add	r3, r2
 80083f0:	333b      	adds	r3, #59	; 0x3b
 80083f2:	781b      	ldrb	r3, [r3, #0]
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d009      	beq.n	800840c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80083f8:	78fb      	ldrb	r3, [r7, #3]
 80083fa:	68fa      	ldr	r2, [r7, #12]
 80083fc:	212c      	movs	r1, #44	; 0x2c
 80083fe:	fb01 f303 	mul.w	r3, r1, r3
 8008402:	4413      	add	r3, r2
 8008404:	3354      	adds	r3, #84	; 0x54
 8008406:	78ba      	ldrb	r2, [r7, #2]
 8008408:	701a      	strb	r2, [r3, #0]
 800840a:	e008      	b.n	800841e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800840c:	78fb      	ldrb	r3, [r7, #3]
 800840e:	68fa      	ldr	r2, [r7, #12]
 8008410:	212c      	movs	r1, #44	; 0x2c
 8008412:	fb01 f303 	mul.w	r3, r1, r3
 8008416:	4413      	add	r3, r2
 8008418:	3355      	adds	r3, #85	; 0x55
 800841a:	78ba      	ldrb	r2, [r7, #2]
 800841c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800841e:	2300      	movs	r3, #0
}
 8008420:	4618      	mov	r0, r3
 8008422:	3714      	adds	r7, #20
 8008424:	46bd      	mov	sp, r7
 8008426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842a:	4770      	bx	lr

0800842c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800842c:	b480      	push	{r7}
 800842e:	b085      	sub	sp, #20
 8008430:	af00      	add	r7, sp, #0
 8008432:	4603      	mov	r3, r0
 8008434:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008436:	2300      	movs	r3, #0
 8008438:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800843a:	79fb      	ldrb	r3, [r7, #7]
 800843c:	2b03      	cmp	r3, #3
 800843e:	d817      	bhi.n	8008470 <USBH_Get_USB_Status+0x44>
 8008440:	a201      	add	r2, pc, #4	; (adr r2, 8008448 <USBH_Get_USB_Status+0x1c>)
 8008442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008446:	bf00      	nop
 8008448:	08008459 	.word	0x08008459
 800844c:	0800845f 	.word	0x0800845f
 8008450:	08008465 	.word	0x08008465
 8008454:	0800846b 	.word	0x0800846b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008458:	2300      	movs	r3, #0
 800845a:	73fb      	strb	r3, [r7, #15]
    break;
 800845c:	e00b      	b.n	8008476 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800845e:	2302      	movs	r3, #2
 8008460:	73fb      	strb	r3, [r7, #15]
    break;
 8008462:	e008      	b.n	8008476 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008464:	2301      	movs	r3, #1
 8008466:	73fb      	strb	r3, [r7, #15]
    break;
 8008468:	e005      	b.n	8008476 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800846a:	2302      	movs	r3, #2
 800846c:	73fb      	strb	r3, [r7, #15]
    break;
 800846e:	e002      	b.n	8008476 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008470:	2302      	movs	r3, #2
 8008472:	73fb      	strb	r3, [r7, #15]
    break;
 8008474:	bf00      	nop
  }
  return usb_status;
 8008476:	7bfb      	ldrb	r3, [r7, #15]
}
 8008478:	4618      	mov	r0, r3
 800847a:	3714      	adds	r7, #20
 800847c:	46bd      	mov	sp, r7
 800847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008482:	4770      	bx	lr

08008484 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008484:	b580      	push	{r7, lr}
 8008486:	b084      	sub	sp, #16
 8008488:	af00      	add	r7, sp, #0
 800848a:	4603      	mov	r3, r0
 800848c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800848e:	79fb      	ldrb	r3, [r7, #7]
 8008490:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008492:	79fb      	ldrb	r3, [r7, #7]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d102      	bne.n	800849e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008498:	2300      	movs	r3, #0
 800849a:	73fb      	strb	r3, [r7, #15]
 800849c:	e001      	b.n	80084a2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800849e:	2301      	movs	r3, #1
 80084a0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
 80084a4:	461a      	mov	r2, r3
 80084a6:	2101      	movs	r1, #1
 80084a8:	4803      	ldr	r0, [pc, #12]	; (80084b8 <MX_DriverVbusFS+0x34>)
 80084aa:	f7fa fc15 	bl	8002cd8 <HAL_GPIO_WritePin>
}
 80084ae:	bf00      	nop
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}
 80084b6:	bf00      	nop
 80084b8:	40020800 	.word	0x40020800

080084bc <__errno>:
 80084bc:	4b01      	ldr	r3, [pc, #4]	; (80084c4 <__errno+0x8>)
 80084be:	6818      	ldr	r0, [r3, #0]
 80084c0:	4770      	bx	lr
 80084c2:	bf00      	nop
 80084c4:	20000044 	.word	0x20000044

080084c8 <__libc_init_array>:
 80084c8:	b570      	push	{r4, r5, r6, lr}
 80084ca:	4d0d      	ldr	r5, [pc, #52]	; (8008500 <__libc_init_array+0x38>)
 80084cc:	4c0d      	ldr	r4, [pc, #52]	; (8008504 <__libc_init_array+0x3c>)
 80084ce:	1b64      	subs	r4, r4, r5
 80084d0:	10a4      	asrs	r4, r4, #2
 80084d2:	2600      	movs	r6, #0
 80084d4:	42a6      	cmp	r6, r4
 80084d6:	d109      	bne.n	80084ec <__libc_init_array+0x24>
 80084d8:	4d0b      	ldr	r5, [pc, #44]	; (8008508 <__libc_init_array+0x40>)
 80084da:	4c0c      	ldr	r4, [pc, #48]	; (800850c <__libc_init_array+0x44>)
 80084dc:	f004 fc94 	bl	800ce08 <_init>
 80084e0:	1b64      	subs	r4, r4, r5
 80084e2:	10a4      	asrs	r4, r4, #2
 80084e4:	2600      	movs	r6, #0
 80084e6:	42a6      	cmp	r6, r4
 80084e8:	d105      	bne.n	80084f6 <__libc_init_array+0x2e>
 80084ea:	bd70      	pop	{r4, r5, r6, pc}
 80084ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f0:	4798      	blx	r3
 80084f2:	3601      	adds	r6, #1
 80084f4:	e7ee      	b.n	80084d4 <__libc_init_array+0xc>
 80084f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80084fa:	4798      	blx	r3
 80084fc:	3601      	adds	r6, #1
 80084fe:	e7f2      	b.n	80084e6 <__libc_init_array+0x1e>
 8008500:	0800d304 	.word	0x0800d304
 8008504:	0800d304 	.word	0x0800d304
 8008508:	0800d304 	.word	0x0800d304
 800850c:	0800d308 	.word	0x0800d308

08008510 <malloc>:
 8008510:	4b02      	ldr	r3, [pc, #8]	; (800851c <malloc+0xc>)
 8008512:	4601      	mov	r1, r0
 8008514:	6818      	ldr	r0, [r3, #0]
 8008516:	f000 b87f 	b.w	8008618 <_malloc_r>
 800851a:	bf00      	nop
 800851c:	20000044 	.word	0x20000044

08008520 <free>:
 8008520:	4b02      	ldr	r3, [pc, #8]	; (800852c <free+0xc>)
 8008522:	4601      	mov	r1, r0
 8008524:	6818      	ldr	r0, [r3, #0]
 8008526:	f000 b80b 	b.w	8008540 <_free_r>
 800852a:	bf00      	nop
 800852c:	20000044 	.word	0x20000044

08008530 <memset>:
 8008530:	4402      	add	r2, r0
 8008532:	4603      	mov	r3, r0
 8008534:	4293      	cmp	r3, r2
 8008536:	d100      	bne.n	800853a <memset+0xa>
 8008538:	4770      	bx	lr
 800853a:	f803 1b01 	strb.w	r1, [r3], #1
 800853e:	e7f9      	b.n	8008534 <memset+0x4>

08008540 <_free_r>:
 8008540:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008542:	2900      	cmp	r1, #0
 8008544:	d044      	beq.n	80085d0 <_free_r+0x90>
 8008546:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800854a:	9001      	str	r0, [sp, #4]
 800854c:	2b00      	cmp	r3, #0
 800854e:	f1a1 0404 	sub.w	r4, r1, #4
 8008552:	bfb8      	it	lt
 8008554:	18e4      	addlt	r4, r4, r3
 8008556:	f003 f83d 	bl	800b5d4 <__malloc_lock>
 800855a:	4a1e      	ldr	r2, [pc, #120]	; (80085d4 <_free_r+0x94>)
 800855c:	9801      	ldr	r0, [sp, #4]
 800855e:	6813      	ldr	r3, [r2, #0]
 8008560:	b933      	cbnz	r3, 8008570 <_free_r+0x30>
 8008562:	6063      	str	r3, [r4, #4]
 8008564:	6014      	str	r4, [r2, #0]
 8008566:	b003      	add	sp, #12
 8008568:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800856c:	f003 b838 	b.w	800b5e0 <__malloc_unlock>
 8008570:	42a3      	cmp	r3, r4
 8008572:	d908      	bls.n	8008586 <_free_r+0x46>
 8008574:	6825      	ldr	r5, [r4, #0]
 8008576:	1961      	adds	r1, r4, r5
 8008578:	428b      	cmp	r3, r1
 800857a:	bf01      	itttt	eq
 800857c:	6819      	ldreq	r1, [r3, #0]
 800857e:	685b      	ldreq	r3, [r3, #4]
 8008580:	1949      	addeq	r1, r1, r5
 8008582:	6021      	streq	r1, [r4, #0]
 8008584:	e7ed      	b.n	8008562 <_free_r+0x22>
 8008586:	461a      	mov	r2, r3
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	b10b      	cbz	r3, 8008590 <_free_r+0x50>
 800858c:	42a3      	cmp	r3, r4
 800858e:	d9fa      	bls.n	8008586 <_free_r+0x46>
 8008590:	6811      	ldr	r1, [r2, #0]
 8008592:	1855      	adds	r5, r2, r1
 8008594:	42a5      	cmp	r5, r4
 8008596:	d10b      	bne.n	80085b0 <_free_r+0x70>
 8008598:	6824      	ldr	r4, [r4, #0]
 800859a:	4421      	add	r1, r4
 800859c:	1854      	adds	r4, r2, r1
 800859e:	42a3      	cmp	r3, r4
 80085a0:	6011      	str	r1, [r2, #0]
 80085a2:	d1e0      	bne.n	8008566 <_free_r+0x26>
 80085a4:	681c      	ldr	r4, [r3, #0]
 80085a6:	685b      	ldr	r3, [r3, #4]
 80085a8:	6053      	str	r3, [r2, #4]
 80085aa:	4421      	add	r1, r4
 80085ac:	6011      	str	r1, [r2, #0]
 80085ae:	e7da      	b.n	8008566 <_free_r+0x26>
 80085b0:	d902      	bls.n	80085b8 <_free_r+0x78>
 80085b2:	230c      	movs	r3, #12
 80085b4:	6003      	str	r3, [r0, #0]
 80085b6:	e7d6      	b.n	8008566 <_free_r+0x26>
 80085b8:	6825      	ldr	r5, [r4, #0]
 80085ba:	1961      	adds	r1, r4, r5
 80085bc:	428b      	cmp	r3, r1
 80085be:	bf04      	itt	eq
 80085c0:	6819      	ldreq	r1, [r3, #0]
 80085c2:	685b      	ldreq	r3, [r3, #4]
 80085c4:	6063      	str	r3, [r4, #4]
 80085c6:	bf04      	itt	eq
 80085c8:	1949      	addeq	r1, r1, r5
 80085ca:	6021      	streq	r1, [r4, #0]
 80085cc:	6054      	str	r4, [r2, #4]
 80085ce:	e7ca      	b.n	8008566 <_free_r+0x26>
 80085d0:	b003      	add	sp, #12
 80085d2:	bd30      	pop	{r4, r5, pc}
 80085d4:	20000aa0 	.word	0x20000aa0

080085d8 <sbrk_aligned>:
 80085d8:	b570      	push	{r4, r5, r6, lr}
 80085da:	4e0e      	ldr	r6, [pc, #56]	; (8008614 <sbrk_aligned+0x3c>)
 80085dc:	460c      	mov	r4, r1
 80085de:	6831      	ldr	r1, [r6, #0]
 80085e0:	4605      	mov	r5, r0
 80085e2:	b911      	cbnz	r1, 80085ea <sbrk_aligned+0x12>
 80085e4:	f000 ff06 	bl	80093f4 <_sbrk_r>
 80085e8:	6030      	str	r0, [r6, #0]
 80085ea:	4621      	mov	r1, r4
 80085ec:	4628      	mov	r0, r5
 80085ee:	f000 ff01 	bl	80093f4 <_sbrk_r>
 80085f2:	1c43      	adds	r3, r0, #1
 80085f4:	d00a      	beq.n	800860c <sbrk_aligned+0x34>
 80085f6:	1cc4      	adds	r4, r0, #3
 80085f8:	f024 0403 	bic.w	r4, r4, #3
 80085fc:	42a0      	cmp	r0, r4
 80085fe:	d007      	beq.n	8008610 <sbrk_aligned+0x38>
 8008600:	1a21      	subs	r1, r4, r0
 8008602:	4628      	mov	r0, r5
 8008604:	f000 fef6 	bl	80093f4 <_sbrk_r>
 8008608:	3001      	adds	r0, #1
 800860a:	d101      	bne.n	8008610 <sbrk_aligned+0x38>
 800860c:	f04f 34ff 	mov.w	r4, #4294967295
 8008610:	4620      	mov	r0, r4
 8008612:	bd70      	pop	{r4, r5, r6, pc}
 8008614:	20000aa4 	.word	0x20000aa4

08008618 <_malloc_r>:
 8008618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800861c:	1ccd      	adds	r5, r1, #3
 800861e:	f025 0503 	bic.w	r5, r5, #3
 8008622:	3508      	adds	r5, #8
 8008624:	2d0c      	cmp	r5, #12
 8008626:	bf38      	it	cc
 8008628:	250c      	movcc	r5, #12
 800862a:	2d00      	cmp	r5, #0
 800862c:	4607      	mov	r7, r0
 800862e:	db01      	blt.n	8008634 <_malloc_r+0x1c>
 8008630:	42a9      	cmp	r1, r5
 8008632:	d905      	bls.n	8008640 <_malloc_r+0x28>
 8008634:	230c      	movs	r3, #12
 8008636:	603b      	str	r3, [r7, #0]
 8008638:	2600      	movs	r6, #0
 800863a:	4630      	mov	r0, r6
 800863c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008640:	4e2e      	ldr	r6, [pc, #184]	; (80086fc <_malloc_r+0xe4>)
 8008642:	f002 ffc7 	bl	800b5d4 <__malloc_lock>
 8008646:	6833      	ldr	r3, [r6, #0]
 8008648:	461c      	mov	r4, r3
 800864a:	bb34      	cbnz	r4, 800869a <_malloc_r+0x82>
 800864c:	4629      	mov	r1, r5
 800864e:	4638      	mov	r0, r7
 8008650:	f7ff ffc2 	bl	80085d8 <sbrk_aligned>
 8008654:	1c43      	adds	r3, r0, #1
 8008656:	4604      	mov	r4, r0
 8008658:	d14d      	bne.n	80086f6 <_malloc_r+0xde>
 800865a:	6834      	ldr	r4, [r6, #0]
 800865c:	4626      	mov	r6, r4
 800865e:	2e00      	cmp	r6, #0
 8008660:	d140      	bne.n	80086e4 <_malloc_r+0xcc>
 8008662:	6823      	ldr	r3, [r4, #0]
 8008664:	4631      	mov	r1, r6
 8008666:	4638      	mov	r0, r7
 8008668:	eb04 0803 	add.w	r8, r4, r3
 800866c:	f000 fec2 	bl	80093f4 <_sbrk_r>
 8008670:	4580      	cmp	r8, r0
 8008672:	d13a      	bne.n	80086ea <_malloc_r+0xd2>
 8008674:	6821      	ldr	r1, [r4, #0]
 8008676:	3503      	adds	r5, #3
 8008678:	1a6d      	subs	r5, r5, r1
 800867a:	f025 0503 	bic.w	r5, r5, #3
 800867e:	3508      	adds	r5, #8
 8008680:	2d0c      	cmp	r5, #12
 8008682:	bf38      	it	cc
 8008684:	250c      	movcc	r5, #12
 8008686:	4629      	mov	r1, r5
 8008688:	4638      	mov	r0, r7
 800868a:	f7ff ffa5 	bl	80085d8 <sbrk_aligned>
 800868e:	3001      	adds	r0, #1
 8008690:	d02b      	beq.n	80086ea <_malloc_r+0xd2>
 8008692:	6823      	ldr	r3, [r4, #0]
 8008694:	442b      	add	r3, r5
 8008696:	6023      	str	r3, [r4, #0]
 8008698:	e00e      	b.n	80086b8 <_malloc_r+0xa0>
 800869a:	6822      	ldr	r2, [r4, #0]
 800869c:	1b52      	subs	r2, r2, r5
 800869e:	d41e      	bmi.n	80086de <_malloc_r+0xc6>
 80086a0:	2a0b      	cmp	r2, #11
 80086a2:	d916      	bls.n	80086d2 <_malloc_r+0xba>
 80086a4:	1961      	adds	r1, r4, r5
 80086a6:	42a3      	cmp	r3, r4
 80086a8:	6025      	str	r5, [r4, #0]
 80086aa:	bf18      	it	ne
 80086ac:	6059      	strne	r1, [r3, #4]
 80086ae:	6863      	ldr	r3, [r4, #4]
 80086b0:	bf08      	it	eq
 80086b2:	6031      	streq	r1, [r6, #0]
 80086b4:	5162      	str	r2, [r4, r5]
 80086b6:	604b      	str	r3, [r1, #4]
 80086b8:	4638      	mov	r0, r7
 80086ba:	f104 060b 	add.w	r6, r4, #11
 80086be:	f002 ff8f 	bl	800b5e0 <__malloc_unlock>
 80086c2:	f026 0607 	bic.w	r6, r6, #7
 80086c6:	1d23      	adds	r3, r4, #4
 80086c8:	1af2      	subs	r2, r6, r3
 80086ca:	d0b6      	beq.n	800863a <_malloc_r+0x22>
 80086cc:	1b9b      	subs	r3, r3, r6
 80086ce:	50a3      	str	r3, [r4, r2]
 80086d0:	e7b3      	b.n	800863a <_malloc_r+0x22>
 80086d2:	6862      	ldr	r2, [r4, #4]
 80086d4:	42a3      	cmp	r3, r4
 80086d6:	bf0c      	ite	eq
 80086d8:	6032      	streq	r2, [r6, #0]
 80086da:	605a      	strne	r2, [r3, #4]
 80086dc:	e7ec      	b.n	80086b8 <_malloc_r+0xa0>
 80086de:	4623      	mov	r3, r4
 80086e0:	6864      	ldr	r4, [r4, #4]
 80086e2:	e7b2      	b.n	800864a <_malloc_r+0x32>
 80086e4:	4634      	mov	r4, r6
 80086e6:	6876      	ldr	r6, [r6, #4]
 80086e8:	e7b9      	b.n	800865e <_malloc_r+0x46>
 80086ea:	230c      	movs	r3, #12
 80086ec:	603b      	str	r3, [r7, #0]
 80086ee:	4638      	mov	r0, r7
 80086f0:	f002 ff76 	bl	800b5e0 <__malloc_unlock>
 80086f4:	e7a1      	b.n	800863a <_malloc_r+0x22>
 80086f6:	6025      	str	r5, [r4, #0]
 80086f8:	e7de      	b.n	80086b8 <_malloc_r+0xa0>
 80086fa:	bf00      	nop
 80086fc:	20000aa0 	.word	0x20000aa0

08008700 <__cvt>:
 8008700:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008704:	ec55 4b10 	vmov	r4, r5, d0
 8008708:	2d00      	cmp	r5, #0
 800870a:	460e      	mov	r6, r1
 800870c:	4619      	mov	r1, r3
 800870e:	462b      	mov	r3, r5
 8008710:	bfbb      	ittet	lt
 8008712:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008716:	461d      	movlt	r5, r3
 8008718:	2300      	movge	r3, #0
 800871a:	232d      	movlt	r3, #45	; 0x2d
 800871c:	700b      	strb	r3, [r1, #0]
 800871e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008720:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008724:	4691      	mov	r9, r2
 8008726:	f023 0820 	bic.w	r8, r3, #32
 800872a:	bfbc      	itt	lt
 800872c:	4622      	movlt	r2, r4
 800872e:	4614      	movlt	r4, r2
 8008730:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008734:	d005      	beq.n	8008742 <__cvt+0x42>
 8008736:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800873a:	d100      	bne.n	800873e <__cvt+0x3e>
 800873c:	3601      	adds	r6, #1
 800873e:	2102      	movs	r1, #2
 8008740:	e000      	b.n	8008744 <__cvt+0x44>
 8008742:	2103      	movs	r1, #3
 8008744:	ab03      	add	r3, sp, #12
 8008746:	9301      	str	r3, [sp, #4]
 8008748:	ab02      	add	r3, sp, #8
 800874a:	9300      	str	r3, [sp, #0]
 800874c:	ec45 4b10 	vmov	d0, r4, r5
 8008750:	4653      	mov	r3, sl
 8008752:	4632      	mov	r2, r6
 8008754:	f001 fdbc 	bl	800a2d0 <_dtoa_r>
 8008758:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800875c:	4607      	mov	r7, r0
 800875e:	d102      	bne.n	8008766 <__cvt+0x66>
 8008760:	f019 0f01 	tst.w	r9, #1
 8008764:	d022      	beq.n	80087ac <__cvt+0xac>
 8008766:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800876a:	eb07 0906 	add.w	r9, r7, r6
 800876e:	d110      	bne.n	8008792 <__cvt+0x92>
 8008770:	783b      	ldrb	r3, [r7, #0]
 8008772:	2b30      	cmp	r3, #48	; 0x30
 8008774:	d10a      	bne.n	800878c <__cvt+0x8c>
 8008776:	2200      	movs	r2, #0
 8008778:	2300      	movs	r3, #0
 800877a:	4620      	mov	r0, r4
 800877c:	4629      	mov	r1, r5
 800877e:	f7f8 f9a3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008782:	b918      	cbnz	r0, 800878c <__cvt+0x8c>
 8008784:	f1c6 0601 	rsb	r6, r6, #1
 8008788:	f8ca 6000 	str.w	r6, [sl]
 800878c:	f8da 3000 	ldr.w	r3, [sl]
 8008790:	4499      	add	r9, r3
 8008792:	2200      	movs	r2, #0
 8008794:	2300      	movs	r3, #0
 8008796:	4620      	mov	r0, r4
 8008798:	4629      	mov	r1, r5
 800879a:	f7f8 f995 	bl	8000ac8 <__aeabi_dcmpeq>
 800879e:	b108      	cbz	r0, 80087a4 <__cvt+0xa4>
 80087a0:	f8cd 900c 	str.w	r9, [sp, #12]
 80087a4:	2230      	movs	r2, #48	; 0x30
 80087a6:	9b03      	ldr	r3, [sp, #12]
 80087a8:	454b      	cmp	r3, r9
 80087aa:	d307      	bcc.n	80087bc <__cvt+0xbc>
 80087ac:	9b03      	ldr	r3, [sp, #12]
 80087ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80087b0:	1bdb      	subs	r3, r3, r7
 80087b2:	4638      	mov	r0, r7
 80087b4:	6013      	str	r3, [r2, #0]
 80087b6:	b004      	add	sp, #16
 80087b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087bc:	1c59      	adds	r1, r3, #1
 80087be:	9103      	str	r1, [sp, #12]
 80087c0:	701a      	strb	r2, [r3, #0]
 80087c2:	e7f0      	b.n	80087a6 <__cvt+0xa6>

080087c4 <__exponent>:
 80087c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087c6:	4603      	mov	r3, r0
 80087c8:	2900      	cmp	r1, #0
 80087ca:	bfb8      	it	lt
 80087cc:	4249      	neglt	r1, r1
 80087ce:	f803 2b02 	strb.w	r2, [r3], #2
 80087d2:	bfb4      	ite	lt
 80087d4:	222d      	movlt	r2, #45	; 0x2d
 80087d6:	222b      	movge	r2, #43	; 0x2b
 80087d8:	2909      	cmp	r1, #9
 80087da:	7042      	strb	r2, [r0, #1]
 80087dc:	dd2a      	ble.n	8008834 <__exponent+0x70>
 80087de:	f10d 0407 	add.w	r4, sp, #7
 80087e2:	46a4      	mov	ip, r4
 80087e4:	270a      	movs	r7, #10
 80087e6:	46a6      	mov	lr, r4
 80087e8:	460a      	mov	r2, r1
 80087ea:	fb91 f6f7 	sdiv	r6, r1, r7
 80087ee:	fb07 1516 	mls	r5, r7, r6, r1
 80087f2:	3530      	adds	r5, #48	; 0x30
 80087f4:	2a63      	cmp	r2, #99	; 0x63
 80087f6:	f104 34ff 	add.w	r4, r4, #4294967295
 80087fa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80087fe:	4631      	mov	r1, r6
 8008800:	dcf1      	bgt.n	80087e6 <__exponent+0x22>
 8008802:	3130      	adds	r1, #48	; 0x30
 8008804:	f1ae 0502 	sub.w	r5, lr, #2
 8008808:	f804 1c01 	strb.w	r1, [r4, #-1]
 800880c:	1c44      	adds	r4, r0, #1
 800880e:	4629      	mov	r1, r5
 8008810:	4561      	cmp	r1, ip
 8008812:	d30a      	bcc.n	800882a <__exponent+0x66>
 8008814:	f10d 0209 	add.w	r2, sp, #9
 8008818:	eba2 020e 	sub.w	r2, r2, lr
 800881c:	4565      	cmp	r5, ip
 800881e:	bf88      	it	hi
 8008820:	2200      	movhi	r2, #0
 8008822:	4413      	add	r3, r2
 8008824:	1a18      	subs	r0, r3, r0
 8008826:	b003      	add	sp, #12
 8008828:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800882a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800882e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008832:	e7ed      	b.n	8008810 <__exponent+0x4c>
 8008834:	2330      	movs	r3, #48	; 0x30
 8008836:	3130      	adds	r1, #48	; 0x30
 8008838:	7083      	strb	r3, [r0, #2]
 800883a:	70c1      	strb	r1, [r0, #3]
 800883c:	1d03      	adds	r3, r0, #4
 800883e:	e7f1      	b.n	8008824 <__exponent+0x60>

08008840 <_printf_float>:
 8008840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008844:	ed2d 8b02 	vpush	{d8}
 8008848:	b08d      	sub	sp, #52	; 0x34
 800884a:	460c      	mov	r4, r1
 800884c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008850:	4616      	mov	r6, r2
 8008852:	461f      	mov	r7, r3
 8008854:	4605      	mov	r5, r0
 8008856:	f002 fe99 	bl	800b58c <_localeconv_r>
 800885a:	f8d0 a000 	ldr.w	sl, [r0]
 800885e:	4650      	mov	r0, sl
 8008860:	f7f7 fcb6 	bl	80001d0 <strlen>
 8008864:	2300      	movs	r3, #0
 8008866:	930a      	str	r3, [sp, #40]	; 0x28
 8008868:	6823      	ldr	r3, [r4, #0]
 800886a:	9305      	str	r3, [sp, #20]
 800886c:	f8d8 3000 	ldr.w	r3, [r8]
 8008870:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008874:	3307      	adds	r3, #7
 8008876:	f023 0307 	bic.w	r3, r3, #7
 800887a:	f103 0208 	add.w	r2, r3, #8
 800887e:	f8c8 2000 	str.w	r2, [r8]
 8008882:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008886:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800888a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800888e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008892:	9307      	str	r3, [sp, #28]
 8008894:	f8cd 8018 	str.w	r8, [sp, #24]
 8008898:	ee08 0a10 	vmov	s16, r0
 800889c:	4b9f      	ldr	r3, [pc, #636]	; (8008b1c <_printf_float+0x2dc>)
 800889e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088a2:	f04f 32ff 	mov.w	r2, #4294967295
 80088a6:	f7f8 f941 	bl	8000b2c <__aeabi_dcmpun>
 80088aa:	bb88      	cbnz	r0, 8008910 <_printf_float+0xd0>
 80088ac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80088b0:	4b9a      	ldr	r3, [pc, #616]	; (8008b1c <_printf_float+0x2dc>)
 80088b2:	f04f 32ff 	mov.w	r2, #4294967295
 80088b6:	f7f8 f91b 	bl	8000af0 <__aeabi_dcmple>
 80088ba:	bb48      	cbnz	r0, 8008910 <_printf_float+0xd0>
 80088bc:	2200      	movs	r2, #0
 80088be:	2300      	movs	r3, #0
 80088c0:	4640      	mov	r0, r8
 80088c2:	4649      	mov	r1, r9
 80088c4:	f7f8 f90a 	bl	8000adc <__aeabi_dcmplt>
 80088c8:	b110      	cbz	r0, 80088d0 <_printf_float+0x90>
 80088ca:	232d      	movs	r3, #45	; 0x2d
 80088cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088d0:	4b93      	ldr	r3, [pc, #588]	; (8008b20 <_printf_float+0x2e0>)
 80088d2:	4894      	ldr	r0, [pc, #592]	; (8008b24 <_printf_float+0x2e4>)
 80088d4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80088d8:	bf94      	ite	ls
 80088da:	4698      	movls	r8, r3
 80088dc:	4680      	movhi	r8, r0
 80088de:	2303      	movs	r3, #3
 80088e0:	6123      	str	r3, [r4, #16]
 80088e2:	9b05      	ldr	r3, [sp, #20]
 80088e4:	f023 0204 	bic.w	r2, r3, #4
 80088e8:	6022      	str	r2, [r4, #0]
 80088ea:	f04f 0900 	mov.w	r9, #0
 80088ee:	9700      	str	r7, [sp, #0]
 80088f0:	4633      	mov	r3, r6
 80088f2:	aa0b      	add	r2, sp, #44	; 0x2c
 80088f4:	4621      	mov	r1, r4
 80088f6:	4628      	mov	r0, r5
 80088f8:	f000 f9d8 	bl	8008cac <_printf_common>
 80088fc:	3001      	adds	r0, #1
 80088fe:	f040 8090 	bne.w	8008a22 <_printf_float+0x1e2>
 8008902:	f04f 30ff 	mov.w	r0, #4294967295
 8008906:	b00d      	add	sp, #52	; 0x34
 8008908:	ecbd 8b02 	vpop	{d8}
 800890c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008910:	4642      	mov	r2, r8
 8008912:	464b      	mov	r3, r9
 8008914:	4640      	mov	r0, r8
 8008916:	4649      	mov	r1, r9
 8008918:	f7f8 f908 	bl	8000b2c <__aeabi_dcmpun>
 800891c:	b140      	cbz	r0, 8008930 <_printf_float+0xf0>
 800891e:	464b      	mov	r3, r9
 8008920:	2b00      	cmp	r3, #0
 8008922:	bfbc      	itt	lt
 8008924:	232d      	movlt	r3, #45	; 0x2d
 8008926:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800892a:	487f      	ldr	r0, [pc, #508]	; (8008b28 <_printf_float+0x2e8>)
 800892c:	4b7f      	ldr	r3, [pc, #508]	; (8008b2c <_printf_float+0x2ec>)
 800892e:	e7d1      	b.n	80088d4 <_printf_float+0x94>
 8008930:	6863      	ldr	r3, [r4, #4]
 8008932:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008936:	9206      	str	r2, [sp, #24]
 8008938:	1c5a      	adds	r2, r3, #1
 800893a:	d13f      	bne.n	80089bc <_printf_float+0x17c>
 800893c:	2306      	movs	r3, #6
 800893e:	6063      	str	r3, [r4, #4]
 8008940:	9b05      	ldr	r3, [sp, #20]
 8008942:	6861      	ldr	r1, [r4, #4]
 8008944:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008948:	2300      	movs	r3, #0
 800894a:	9303      	str	r3, [sp, #12]
 800894c:	ab0a      	add	r3, sp, #40	; 0x28
 800894e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008952:	ab09      	add	r3, sp, #36	; 0x24
 8008954:	ec49 8b10 	vmov	d0, r8, r9
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	6022      	str	r2, [r4, #0]
 800895c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008960:	4628      	mov	r0, r5
 8008962:	f7ff fecd 	bl	8008700 <__cvt>
 8008966:	9b06      	ldr	r3, [sp, #24]
 8008968:	9909      	ldr	r1, [sp, #36]	; 0x24
 800896a:	2b47      	cmp	r3, #71	; 0x47
 800896c:	4680      	mov	r8, r0
 800896e:	d108      	bne.n	8008982 <_printf_float+0x142>
 8008970:	1cc8      	adds	r0, r1, #3
 8008972:	db02      	blt.n	800897a <_printf_float+0x13a>
 8008974:	6863      	ldr	r3, [r4, #4]
 8008976:	4299      	cmp	r1, r3
 8008978:	dd41      	ble.n	80089fe <_printf_float+0x1be>
 800897a:	f1ab 0b02 	sub.w	fp, fp, #2
 800897e:	fa5f fb8b 	uxtb.w	fp, fp
 8008982:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008986:	d820      	bhi.n	80089ca <_printf_float+0x18a>
 8008988:	3901      	subs	r1, #1
 800898a:	465a      	mov	r2, fp
 800898c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008990:	9109      	str	r1, [sp, #36]	; 0x24
 8008992:	f7ff ff17 	bl	80087c4 <__exponent>
 8008996:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008998:	1813      	adds	r3, r2, r0
 800899a:	2a01      	cmp	r2, #1
 800899c:	4681      	mov	r9, r0
 800899e:	6123      	str	r3, [r4, #16]
 80089a0:	dc02      	bgt.n	80089a8 <_printf_float+0x168>
 80089a2:	6822      	ldr	r2, [r4, #0]
 80089a4:	07d2      	lsls	r2, r2, #31
 80089a6:	d501      	bpl.n	80089ac <_printf_float+0x16c>
 80089a8:	3301      	adds	r3, #1
 80089aa:	6123      	str	r3, [r4, #16]
 80089ac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d09c      	beq.n	80088ee <_printf_float+0xae>
 80089b4:	232d      	movs	r3, #45	; 0x2d
 80089b6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089ba:	e798      	b.n	80088ee <_printf_float+0xae>
 80089bc:	9a06      	ldr	r2, [sp, #24]
 80089be:	2a47      	cmp	r2, #71	; 0x47
 80089c0:	d1be      	bne.n	8008940 <_printf_float+0x100>
 80089c2:	2b00      	cmp	r3, #0
 80089c4:	d1bc      	bne.n	8008940 <_printf_float+0x100>
 80089c6:	2301      	movs	r3, #1
 80089c8:	e7b9      	b.n	800893e <_printf_float+0xfe>
 80089ca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80089ce:	d118      	bne.n	8008a02 <_printf_float+0x1c2>
 80089d0:	2900      	cmp	r1, #0
 80089d2:	6863      	ldr	r3, [r4, #4]
 80089d4:	dd0b      	ble.n	80089ee <_printf_float+0x1ae>
 80089d6:	6121      	str	r1, [r4, #16]
 80089d8:	b913      	cbnz	r3, 80089e0 <_printf_float+0x1a0>
 80089da:	6822      	ldr	r2, [r4, #0]
 80089dc:	07d0      	lsls	r0, r2, #31
 80089de:	d502      	bpl.n	80089e6 <_printf_float+0x1a6>
 80089e0:	3301      	adds	r3, #1
 80089e2:	440b      	add	r3, r1
 80089e4:	6123      	str	r3, [r4, #16]
 80089e6:	65a1      	str	r1, [r4, #88]	; 0x58
 80089e8:	f04f 0900 	mov.w	r9, #0
 80089ec:	e7de      	b.n	80089ac <_printf_float+0x16c>
 80089ee:	b913      	cbnz	r3, 80089f6 <_printf_float+0x1b6>
 80089f0:	6822      	ldr	r2, [r4, #0]
 80089f2:	07d2      	lsls	r2, r2, #31
 80089f4:	d501      	bpl.n	80089fa <_printf_float+0x1ba>
 80089f6:	3302      	adds	r3, #2
 80089f8:	e7f4      	b.n	80089e4 <_printf_float+0x1a4>
 80089fa:	2301      	movs	r3, #1
 80089fc:	e7f2      	b.n	80089e4 <_printf_float+0x1a4>
 80089fe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008a02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a04:	4299      	cmp	r1, r3
 8008a06:	db05      	blt.n	8008a14 <_printf_float+0x1d4>
 8008a08:	6823      	ldr	r3, [r4, #0]
 8008a0a:	6121      	str	r1, [r4, #16]
 8008a0c:	07d8      	lsls	r0, r3, #31
 8008a0e:	d5ea      	bpl.n	80089e6 <_printf_float+0x1a6>
 8008a10:	1c4b      	adds	r3, r1, #1
 8008a12:	e7e7      	b.n	80089e4 <_printf_float+0x1a4>
 8008a14:	2900      	cmp	r1, #0
 8008a16:	bfd4      	ite	le
 8008a18:	f1c1 0202 	rsble	r2, r1, #2
 8008a1c:	2201      	movgt	r2, #1
 8008a1e:	4413      	add	r3, r2
 8008a20:	e7e0      	b.n	80089e4 <_printf_float+0x1a4>
 8008a22:	6823      	ldr	r3, [r4, #0]
 8008a24:	055a      	lsls	r2, r3, #21
 8008a26:	d407      	bmi.n	8008a38 <_printf_float+0x1f8>
 8008a28:	6923      	ldr	r3, [r4, #16]
 8008a2a:	4642      	mov	r2, r8
 8008a2c:	4631      	mov	r1, r6
 8008a2e:	4628      	mov	r0, r5
 8008a30:	47b8      	blx	r7
 8008a32:	3001      	adds	r0, #1
 8008a34:	d12c      	bne.n	8008a90 <_printf_float+0x250>
 8008a36:	e764      	b.n	8008902 <_printf_float+0xc2>
 8008a38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008a3c:	f240 80e0 	bls.w	8008c00 <_printf_float+0x3c0>
 8008a40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008a44:	2200      	movs	r2, #0
 8008a46:	2300      	movs	r3, #0
 8008a48:	f7f8 f83e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d034      	beq.n	8008aba <_printf_float+0x27a>
 8008a50:	4a37      	ldr	r2, [pc, #220]	; (8008b30 <_printf_float+0x2f0>)
 8008a52:	2301      	movs	r3, #1
 8008a54:	4631      	mov	r1, r6
 8008a56:	4628      	mov	r0, r5
 8008a58:	47b8      	blx	r7
 8008a5a:	3001      	adds	r0, #1
 8008a5c:	f43f af51 	beq.w	8008902 <_printf_float+0xc2>
 8008a60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008a64:	429a      	cmp	r2, r3
 8008a66:	db02      	blt.n	8008a6e <_printf_float+0x22e>
 8008a68:	6823      	ldr	r3, [r4, #0]
 8008a6a:	07d8      	lsls	r0, r3, #31
 8008a6c:	d510      	bpl.n	8008a90 <_printf_float+0x250>
 8008a6e:	ee18 3a10 	vmov	r3, s16
 8008a72:	4652      	mov	r2, sl
 8008a74:	4631      	mov	r1, r6
 8008a76:	4628      	mov	r0, r5
 8008a78:	47b8      	blx	r7
 8008a7a:	3001      	adds	r0, #1
 8008a7c:	f43f af41 	beq.w	8008902 <_printf_float+0xc2>
 8008a80:	f04f 0800 	mov.w	r8, #0
 8008a84:	f104 091a 	add.w	r9, r4, #26
 8008a88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008a8a:	3b01      	subs	r3, #1
 8008a8c:	4543      	cmp	r3, r8
 8008a8e:	dc09      	bgt.n	8008aa4 <_printf_float+0x264>
 8008a90:	6823      	ldr	r3, [r4, #0]
 8008a92:	079b      	lsls	r3, r3, #30
 8008a94:	f100 8105 	bmi.w	8008ca2 <_printf_float+0x462>
 8008a98:	68e0      	ldr	r0, [r4, #12]
 8008a9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a9c:	4298      	cmp	r0, r3
 8008a9e:	bfb8      	it	lt
 8008aa0:	4618      	movlt	r0, r3
 8008aa2:	e730      	b.n	8008906 <_printf_float+0xc6>
 8008aa4:	2301      	movs	r3, #1
 8008aa6:	464a      	mov	r2, r9
 8008aa8:	4631      	mov	r1, r6
 8008aaa:	4628      	mov	r0, r5
 8008aac:	47b8      	blx	r7
 8008aae:	3001      	adds	r0, #1
 8008ab0:	f43f af27 	beq.w	8008902 <_printf_float+0xc2>
 8008ab4:	f108 0801 	add.w	r8, r8, #1
 8008ab8:	e7e6      	b.n	8008a88 <_printf_float+0x248>
 8008aba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	dc39      	bgt.n	8008b34 <_printf_float+0x2f4>
 8008ac0:	4a1b      	ldr	r2, [pc, #108]	; (8008b30 <_printf_float+0x2f0>)
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	4631      	mov	r1, r6
 8008ac6:	4628      	mov	r0, r5
 8008ac8:	47b8      	blx	r7
 8008aca:	3001      	adds	r0, #1
 8008acc:	f43f af19 	beq.w	8008902 <_printf_float+0xc2>
 8008ad0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ad4:	4313      	orrs	r3, r2
 8008ad6:	d102      	bne.n	8008ade <_printf_float+0x29e>
 8008ad8:	6823      	ldr	r3, [r4, #0]
 8008ada:	07d9      	lsls	r1, r3, #31
 8008adc:	d5d8      	bpl.n	8008a90 <_printf_float+0x250>
 8008ade:	ee18 3a10 	vmov	r3, s16
 8008ae2:	4652      	mov	r2, sl
 8008ae4:	4631      	mov	r1, r6
 8008ae6:	4628      	mov	r0, r5
 8008ae8:	47b8      	blx	r7
 8008aea:	3001      	adds	r0, #1
 8008aec:	f43f af09 	beq.w	8008902 <_printf_float+0xc2>
 8008af0:	f04f 0900 	mov.w	r9, #0
 8008af4:	f104 0a1a 	add.w	sl, r4, #26
 8008af8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008afa:	425b      	negs	r3, r3
 8008afc:	454b      	cmp	r3, r9
 8008afe:	dc01      	bgt.n	8008b04 <_printf_float+0x2c4>
 8008b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b02:	e792      	b.n	8008a2a <_printf_float+0x1ea>
 8008b04:	2301      	movs	r3, #1
 8008b06:	4652      	mov	r2, sl
 8008b08:	4631      	mov	r1, r6
 8008b0a:	4628      	mov	r0, r5
 8008b0c:	47b8      	blx	r7
 8008b0e:	3001      	adds	r0, #1
 8008b10:	f43f aef7 	beq.w	8008902 <_printf_float+0xc2>
 8008b14:	f109 0901 	add.w	r9, r9, #1
 8008b18:	e7ee      	b.n	8008af8 <_printf_float+0x2b8>
 8008b1a:	bf00      	nop
 8008b1c:	7fefffff 	.word	0x7fefffff
 8008b20:	0800ce5c 	.word	0x0800ce5c
 8008b24:	0800ce60 	.word	0x0800ce60
 8008b28:	0800ce68 	.word	0x0800ce68
 8008b2c:	0800ce64 	.word	0x0800ce64
 8008b30:	0800ce6c 	.word	0x0800ce6c
 8008b34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008b36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b38:	429a      	cmp	r2, r3
 8008b3a:	bfa8      	it	ge
 8008b3c:	461a      	movge	r2, r3
 8008b3e:	2a00      	cmp	r2, #0
 8008b40:	4691      	mov	r9, r2
 8008b42:	dc37      	bgt.n	8008bb4 <_printf_float+0x374>
 8008b44:	f04f 0b00 	mov.w	fp, #0
 8008b48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b4c:	f104 021a 	add.w	r2, r4, #26
 8008b50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008b52:	9305      	str	r3, [sp, #20]
 8008b54:	eba3 0309 	sub.w	r3, r3, r9
 8008b58:	455b      	cmp	r3, fp
 8008b5a:	dc33      	bgt.n	8008bc4 <_printf_float+0x384>
 8008b5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b60:	429a      	cmp	r2, r3
 8008b62:	db3b      	blt.n	8008bdc <_printf_float+0x39c>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	07da      	lsls	r2, r3, #31
 8008b68:	d438      	bmi.n	8008bdc <_printf_float+0x39c>
 8008b6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b6c:	9a05      	ldr	r2, [sp, #20]
 8008b6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008b70:	1a9a      	subs	r2, r3, r2
 8008b72:	eba3 0901 	sub.w	r9, r3, r1
 8008b76:	4591      	cmp	r9, r2
 8008b78:	bfa8      	it	ge
 8008b7a:	4691      	movge	r9, r2
 8008b7c:	f1b9 0f00 	cmp.w	r9, #0
 8008b80:	dc35      	bgt.n	8008bee <_printf_float+0x3ae>
 8008b82:	f04f 0800 	mov.w	r8, #0
 8008b86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b8a:	f104 0a1a 	add.w	sl, r4, #26
 8008b8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008b92:	1a9b      	subs	r3, r3, r2
 8008b94:	eba3 0309 	sub.w	r3, r3, r9
 8008b98:	4543      	cmp	r3, r8
 8008b9a:	f77f af79 	ble.w	8008a90 <_printf_float+0x250>
 8008b9e:	2301      	movs	r3, #1
 8008ba0:	4652      	mov	r2, sl
 8008ba2:	4631      	mov	r1, r6
 8008ba4:	4628      	mov	r0, r5
 8008ba6:	47b8      	blx	r7
 8008ba8:	3001      	adds	r0, #1
 8008baa:	f43f aeaa 	beq.w	8008902 <_printf_float+0xc2>
 8008bae:	f108 0801 	add.w	r8, r8, #1
 8008bb2:	e7ec      	b.n	8008b8e <_printf_float+0x34e>
 8008bb4:	4613      	mov	r3, r2
 8008bb6:	4631      	mov	r1, r6
 8008bb8:	4642      	mov	r2, r8
 8008bba:	4628      	mov	r0, r5
 8008bbc:	47b8      	blx	r7
 8008bbe:	3001      	adds	r0, #1
 8008bc0:	d1c0      	bne.n	8008b44 <_printf_float+0x304>
 8008bc2:	e69e      	b.n	8008902 <_printf_float+0xc2>
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	4631      	mov	r1, r6
 8008bc8:	4628      	mov	r0, r5
 8008bca:	9205      	str	r2, [sp, #20]
 8008bcc:	47b8      	blx	r7
 8008bce:	3001      	adds	r0, #1
 8008bd0:	f43f ae97 	beq.w	8008902 <_printf_float+0xc2>
 8008bd4:	9a05      	ldr	r2, [sp, #20]
 8008bd6:	f10b 0b01 	add.w	fp, fp, #1
 8008bda:	e7b9      	b.n	8008b50 <_printf_float+0x310>
 8008bdc:	ee18 3a10 	vmov	r3, s16
 8008be0:	4652      	mov	r2, sl
 8008be2:	4631      	mov	r1, r6
 8008be4:	4628      	mov	r0, r5
 8008be6:	47b8      	blx	r7
 8008be8:	3001      	adds	r0, #1
 8008bea:	d1be      	bne.n	8008b6a <_printf_float+0x32a>
 8008bec:	e689      	b.n	8008902 <_printf_float+0xc2>
 8008bee:	9a05      	ldr	r2, [sp, #20]
 8008bf0:	464b      	mov	r3, r9
 8008bf2:	4442      	add	r2, r8
 8008bf4:	4631      	mov	r1, r6
 8008bf6:	4628      	mov	r0, r5
 8008bf8:	47b8      	blx	r7
 8008bfa:	3001      	adds	r0, #1
 8008bfc:	d1c1      	bne.n	8008b82 <_printf_float+0x342>
 8008bfe:	e680      	b.n	8008902 <_printf_float+0xc2>
 8008c00:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c02:	2a01      	cmp	r2, #1
 8008c04:	dc01      	bgt.n	8008c0a <_printf_float+0x3ca>
 8008c06:	07db      	lsls	r3, r3, #31
 8008c08:	d538      	bpl.n	8008c7c <_printf_float+0x43c>
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	4642      	mov	r2, r8
 8008c0e:	4631      	mov	r1, r6
 8008c10:	4628      	mov	r0, r5
 8008c12:	47b8      	blx	r7
 8008c14:	3001      	adds	r0, #1
 8008c16:	f43f ae74 	beq.w	8008902 <_printf_float+0xc2>
 8008c1a:	ee18 3a10 	vmov	r3, s16
 8008c1e:	4652      	mov	r2, sl
 8008c20:	4631      	mov	r1, r6
 8008c22:	4628      	mov	r0, r5
 8008c24:	47b8      	blx	r7
 8008c26:	3001      	adds	r0, #1
 8008c28:	f43f ae6b 	beq.w	8008902 <_printf_float+0xc2>
 8008c2c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008c30:	2200      	movs	r2, #0
 8008c32:	2300      	movs	r3, #0
 8008c34:	f7f7 ff48 	bl	8000ac8 <__aeabi_dcmpeq>
 8008c38:	b9d8      	cbnz	r0, 8008c72 <_printf_float+0x432>
 8008c3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c3c:	f108 0201 	add.w	r2, r8, #1
 8008c40:	3b01      	subs	r3, #1
 8008c42:	4631      	mov	r1, r6
 8008c44:	4628      	mov	r0, r5
 8008c46:	47b8      	blx	r7
 8008c48:	3001      	adds	r0, #1
 8008c4a:	d10e      	bne.n	8008c6a <_printf_float+0x42a>
 8008c4c:	e659      	b.n	8008902 <_printf_float+0xc2>
 8008c4e:	2301      	movs	r3, #1
 8008c50:	4652      	mov	r2, sl
 8008c52:	4631      	mov	r1, r6
 8008c54:	4628      	mov	r0, r5
 8008c56:	47b8      	blx	r7
 8008c58:	3001      	adds	r0, #1
 8008c5a:	f43f ae52 	beq.w	8008902 <_printf_float+0xc2>
 8008c5e:	f108 0801 	add.w	r8, r8, #1
 8008c62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008c64:	3b01      	subs	r3, #1
 8008c66:	4543      	cmp	r3, r8
 8008c68:	dcf1      	bgt.n	8008c4e <_printf_float+0x40e>
 8008c6a:	464b      	mov	r3, r9
 8008c6c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008c70:	e6dc      	b.n	8008a2c <_printf_float+0x1ec>
 8008c72:	f04f 0800 	mov.w	r8, #0
 8008c76:	f104 0a1a 	add.w	sl, r4, #26
 8008c7a:	e7f2      	b.n	8008c62 <_printf_float+0x422>
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	4642      	mov	r2, r8
 8008c80:	e7df      	b.n	8008c42 <_printf_float+0x402>
 8008c82:	2301      	movs	r3, #1
 8008c84:	464a      	mov	r2, r9
 8008c86:	4631      	mov	r1, r6
 8008c88:	4628      	mov	r0, r5
 8008c8a:	47b8      	blx	r7
 8008c8c:	3001      	adds	r0, #1
 8008c8e:	f43f ae38 	beq.w	8008902 <_printf_float+0xc2>
 8008c92:	f108 0801 	add.w	r8, r8, #1
 8008c96:	68e3      	ldr	r3, [r4, #12]
 8008c98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008c9a:	1a5b      	subs	r3, r3, r1
 8008c9c:	4543      	cmp	r3, r8
 8008c9e:	dcf0      	bgt.n	8008c82 <_printf_float+0x442>
 8008ca0:	e6fa      	b.n	8008a98 <_printf_float+0x258>
 8008ca2:	f04f 0800 	mov.w	r8, #0
 8008ca6:	f104 0919 	add.w	r9, r4, #25
 8008caa:	e7f4      	b.n	8008c96 <_printf_float+0x456>

08008cac <_printf_common>:
 8008cac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008cb0:	4616      	mov	r6, r2
 8008cb2:	4699      	mov	r9, r3
 8008cb4:	688a      	ldr	r2, [r1, #8]
 8008cb6:	690b      	ldr	r3, [r1, #16]
 8008cb8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008cbc:	4293      	cmp	r3, r2
 8008cbe:	bfb8      	it	lt
 8008cc0:	4613      	movlt	r3, r2
 8008cc2:	6033      	str	r3, [r6, #0]
 8008cc4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008cc8:	4607      	mov	r7, r0
 8008cca:	460c      	mov	r4, r1
 8008ccc:	b10a      	cbz	r2, 8008cd2 <_printf_common+0x26>
 8008cce:	3301      	adds	r3, #1
 8008cd0:	6033      	str	r3, [r6, #0]
 8008cd2:	6823      	ldr	r3, [r4, #0]
 8008cd4:	0699      	lsls	r1, r3, #26
 8008cd6:	bf42      	ittt	mi
 8008cd8:	6833      	ldrmi	r3, [r6, #0]
 8008cda:	3302      	addmi	r3, #2
 8008cdc:	6033      	strmi	r3, [r6, #0]
 8008cde:	6825      	ldr	r5, [r4, #0]
 8008ce0:	f015 0506 	ands.w	r5, r5, #6
 8008ce4:	d106      	bne.n	8008cf4 <_printf_common+0x48>
 8008ce6:	f104 0a19 	add.w	sl, r4, #25
 8008cea:	68e3      	ldr	r3, [r4, #12]
 8008cec:	6832      	ldr	r2, [r6, #0]
 8008cee:	1a9b      	subs	r3, r3, r2
 8008cf0:	42ab      	cmp	r3, r5
 8008cf2:	dc26      	bgt.n	8008d42 <_printf_common+0x96>
 8008cf4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008cf8:	1e13      	subs	r3, r2, #0
 8008cfa:	6822      	ldr	r2, [r4, #0]
 8008cfc:	bf18      	it	ne
 8008cfe:	2301      	movne	r3, #1
 8008d00:	0692      	lsls	r2, r2, #26
 8008d02:	d42b      	bmi.n	8008d5c <_printf_common+0xb0>
 8008d04:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008d08:	4649      	mov	r1, r9
 8008d0a:	4638      	mov	r0, r7
 8008d0c:	47c0      	blx	r8
 8008d0e:	3001      	adds	r0, #1
 8008d10:	d01e      	beq.n	8008d50 <_printf_common+0xa4>
 8008d12:	6823      	ldr	r3, [r4, #0]
 8008d14:	68e5      	ldr	r5, [r4, #12]
 8008d16:	6832      	ldr	r2, [r6, #0]
 8008d18:	f003 0306 	and.w	r3, r3, #6
 8008d1c:	2b04      	cmp	r3, #4
 8008d1e:	bf08      	it	eq
 8008d20:	1aad      	subeq	r5, r5, r2
 8008d22:	68a3      	ldr	r3, [r4, #8]
 8008d24:	6922      	ldr	r2, [r4, #16]
 8008d26:	bf0c      	ite	eq
 8008d28:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008d2c:	2500      	movne	r5, #0
 8008d2e:	4293      	cmp	r3, r2
 8008d30:	bfc4      	itt	gt
 8008d32:	1a9b      	subgt	r3, r3, r2
 8008d34:	18ed      	addgt	r5, r5, r3
 8008d36:	2600      	movs	r6, #0
 8008d38:	341a      	adds	r4, #26
 8008d3a:	42b5      	cmp	r5, r6
 8008d3c:	d11a      	bne.n	8008d74 <_printf_common+0xc8>
 8008d3e:	2000      	movs	r0, #0
 8008d40:	e008      	b.n	8008d54 <_printf_common+0xa8>
 8008d42:	2301      	movs	r3, #1
 8008d44:	4652      	mov	r2, sl
 8008d46:	4649      	mov	r1, r9
 8008d48:	4638      	mov	r0, r7
 8008d4a:	47c0      	blx	r8
 8008d4c:	3001      	adds	r0, #1
 8008d4e:	d103      	bne.n	8008d58 <_printf_common+0xac>
 8008d50:	f04f 30ff 	mov.w	r0, #4294967295
 8008d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d58:	3501      	adds	r5, #1
 8008d5a:	e7c6      	b.n	8008cea <_printf_common+0x3e>
 8008d5c:	18e1      	adds	r1, r4, r3
 8008d5e:	1c5a      	adds	r2, r3, #1
 8008d60:	2030      	movs	r0, #48	; 0x30
 8008d62:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008d66:	4422      	add	r2, r4
 8008d68:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008d6c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008d70:	3302      	adds	r3, #2
 8008d72:	e7c7      	b.n	8008d04 <_printf_common+0x58>
 8008d74:	2301      	movs	r3, #1
 8008d76:	4622      	mov	r2, r4
 8008d78:	4649      	mov	r1, r9
 8008d7a:	4638      	mov	r0, r7
 8008d7c:	47c0      	blx	r8
 8008d7e:	3001      	adds	r0, #1
 8008d80:	d0e6      	beq.n	8008d50 <_printf_common+0xa4>
 8008d82:	3601      	adds	r6, #1
 8008d84:	e7d9      	b.n	8008d3a <_printf_common+0x8e>
	...

08008d88 <_printf_i>:
 8008d88:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d8c:	7e0f      	ldrb	r7, [r1, #24]
 8008d8e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008d90:	2f78      	cmp	r7, #120	; 0x78
 8008d92:	4691      	mov	r9, r2
 8008d94:	4680      	mov	r8, r0
 8008d96:	460c      	mov	r4, r1
 8008d98:	469a      	mov	sl, r3
 8008d9a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008d9e:	d807      	bhi.n	8008db0 <_printf_i+0x28>
 8008da0:	2f62      	cmp	r7, #98	; 0x62
 8008da2:	d80a      	bhi.n	8008dba <_printf_i+0x32>
 8008da4:	2f00      	cmp	r7, #0
 8008da6:	f000 80d8 	beq.w	8008f5a <_printf_i+0x1d2>
 8008daa:	2f58      	cmp	r7, #88	; 0x58
 8008dac:	f000 80a3 	beq.w	8008ef6 <_printf_i+0x16e>
 8008db0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008db4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008db8:	e03a      	b.n	8008e30 <_printf_i+0xa8>
 8008dba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008dbe:	2b15      	cmp	r3, #21
 8008dc0:	d8f6      	bhi.n	8008db0 <_printf_i+0x28>
 8008dc2:	a101      	add	r1, pc, #4	; (adr r1, 8008dc8 <_printf_i+0x40>)
 8008dc4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008dc8:	08008e21 	.word	0x08008e21
 8008dcc:	08008e35 	.word	0x08008e35
 8008dd0:	08008db1 	.word	0x08008db1
 8008dd4:	08008db1 	.word	0x08008db1
 8008dd8:	08008db1 	.word	0x08008db1
 8008ddc:	08008db1 	.word	0x08008db1
 8008de0:	08008e35 	.word	0x08008e35
 8008de4:	08008db1 	.word	0x08008db1
 8008de8:	08008db1 	.word	0x08008db1
 8008dec:	08008db1 	.word	0x08008db1
 8008df0:	08008db1 	.word	0x08008db1
 8008df4:	08008f41 	.word	0x08008f41
 8008df8:	08008e65 	.word	0x08008e65
 8008dfc:	08008f23 	.word	0x08008f23
 8008e00:	08008db1 	.word	0x08008db1
 8008e04:	08008db1 	.word	0x08008db1
 8008e08:	08008f63 	.word	0x08008f63
 8008e0c:	08008db1 	.word	0x08008db1
 8008e10:	08008e65 	.word	0x08008e65
 8008e14:	08008db1 	.word	0x08008db1
 8008e18:	08008db1 	.word	0x08008db1
 8008e1c:	08008f2b 	.word	0x08008f2b
 8008e20:	682b      	ldr	r3, [r5, #0]
 8008e22:	1d1a      	adds	r2, r3, #4
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	602a      	str	r2, [r5, #0]
 8008e28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008e2c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008e30:	2301      	movs	r3, #1
 8008e32:	e0a3      	b.n	8008f7c <_printf_i+0x1f4>
 8008e34:	6820      	ldr	r0, [r4, #0]
 8008e36:	6829      	ldr	r1, [r5, #0]
 8008e38:	0606      	lsls	r6, r0, #24
 8008e3a:	f101 0304 	add.w	r3, r1, #4
 8008e3e:	d50a      	bpl.n	8008e56 <_printf_i+0xce>
 8008e40:	680e      	ldr	r6, [r1, #0]
 8008e42:	602b      	str	r3, [r5, #0]
 8008e44:	2e00      	cmp	r6, #0
 8008e46:	da03      	bge.n	8008e50 <_printf_i+0xc8>
 8008e48:	232d      	movs	r3, #45	; 0x2d
 8008e4a:	4276      	negs	r6, r6
 8008e4c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e50:	485e      	ldr	r0, [pc, #376]	; (8008fcc <_printf_i+0x244>)
 8008e52:	230a      	movs	r3, #10
 8008e54:	e019      	b.n	8008e8a <_printf_i+0x102>
 8008e56:	680e      	ldr	r6, [r1, #0]
 8008e58:	602b      	str	r3, [r5, #0]
 8008e5a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008e5e:	bf18      	it	ne
 8008e60:	b236      	sxthne	r6, r6
 8008e62:	e7ef      	b.n	8008e44 <_printf_i+0xbc>
 8008e64:	682b      	ldr	r3, [r5, #0]
 8008e66:	6820      	ldr	r0, [r4, #0]
 8008e68:	1d19      	adds	r1, r3, #4
 8008e6a:	6029      	str	r1, [r5, #0]
 8008e6c:	0601      	lsls	r1, r0, #24
 8008e6e:	d501      	bpl.n	8008e74 <_printf_i+0xec>
 8008e70:	681e      	ldr	r6, [r3, #0]
 8008e72:	e002      	b.n	8008e7a <_printf_i+0xf2>
 8008e74:	0646      	lsls	r6, r0, #25
 8008e76:	d5fb      	bpl.n	8008e70 <_printf_i+0xe8>
 8008e78:	881e      	ldrh	r6, [r3, #0]
 8008e7a:	4854      	ldr	r0, [pc, #336]	; (8008fcc <_printf_i+0x244>)
 8008e7c:	2f6f      	cmp	r7, #111	; 0x6f
 8008e7e:	bf0c      	ite	eq
 8008e80:	2308      	moveq	r3, #8
 8008e82:	230a      	movne	r3, #10
 8008e84:	2100      	movs	r1, #0
 8008e86:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008e8a:	6865      	ldr	r5, [r4, #4]
 8008e8c:	60a5      	str	r5, [r4, #8]
 8008e8e:	2d00      	cmp	r5, #0
 8008e90:	bfa2      	ittt	ge
 8008e92:	6821      	ldrge	r1, [r4, #0]
 8008e94:	f021 0104 	bicge.w	r1, r1, #4
 8008e98:	6021      	strge	r1, [r4, #0]
 8008e9a:	b90e      	cbnz	r6, 8008ea0 <_printf_i+0x118>
 8008e9c:	2d00      	cmp	r5, #0
 8008e9e:	d04d      	beq.n	8008f3c <_printf_i+0x1b4>
 8008ea0:	4615      	mov	r5, r2
 8008ea2:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ea6:	fb03 6711 	mls	r7, r3, r1, r6
 8008eaa:	5dc7      	ldrb	r7, [r0, r7]
 8008eac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008eb0:	4637      	mov	r7, r6
 8008eb2:	42bb      	cmp	r3, r7
 8008eb4:	460e      	mov	r6, r1
 8008eb6:	d9f4      	bls.n	8008ea2 <_printf_i+0x11a>
 8008eb8:	2b08      	cmp	r3, #8
 8008eba:	d10b      	bne.n	8008ed4 <_printf_i+0x14c>
 8008ebc:	6823      	ldr	r3, [r4, #0]
 8008ebe:	07de      	lsls	r6, r3, #31
 8008ec0:	d508      	bpl.n	8008ed4 <_printf_i+0x14c>
 8008ec2:	6923      	ldr	r3, [r4, #16]
 8008ec4:	6861      	ldr	r1, [r4, #4]
 8008ec6:	4299      	cmp	r1, r3
 8008ec8:	bfde      	ittt	le
 8008eca:	2330      	movle	r3, #48	; 0x30
 8008ecc:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008ed0:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008ed4:	1b52      	subs	r2, r2, r5
 8008ed6:	6122      	str	r2, [r4, #16]
 8008ed8:	f8cd a000 	str.w	sl, [sp]
 8008edc:	464b      	mov	r3, r9
 8008ede:	aa03      	add	r2, sp, #12
 8008ee0:	4621      	mov	r1, r4
 8008ee2:	4640      	mov	r0, r8
 8008ee4:	f7ff fee2 	bl	8008cac <_printf_common>
 8008ee8:	3001      	adds	r0, #1
 8008eea:	d14c      	bne.n	8008f86 <_printf_i+0x1fe>
 8008eec:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef0:	b004      	add	sp, #16
 8008ef2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ef6:	4835      	ldr	r0, [pc, #212]	; (8008fcc <_printf_i+0x244>)
 8008ef8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008efc:	6829      	ldr	r1, [r5, #0]
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	f851 6b04 	ldr.w	r6, [r1], #4
 8008f04:	6029      	str	r1, [r5, #0]
 8008f06:	061d      	lsls	r5, r3, #24
 8008f08:	d514      	bpl.n	8008f34 <_printf_i+0x1ac>
 8008f0a:	07df      	lsls	r7, r3, #31
 8008f0c:	bf44      	itt	mi
 8008f0e:	f043 0320 	orrmi.w	r3, r3, #32
 8008f12:	6023      	strmi	r3, [r4, #0]
 8008f14:	b91e      	cbnz	r6, 8008f1e <_printf_i+0x196>
 8008f16:	6823      	ldr	r3, [r4, #0]
 8008f18:	f023 0320 	bic.w	r3, r3, #32
 8008f1c:	6023      	str	r3, [r4, #0]
 8008f1e:	2310      	movs	r3, #16
 8008f20:	e7b0      	b.n	8008e84 <_printf_i+0xfc>
 8008f22:	6823      	ldr	r3, [r4, #0]
 8008f24:	f043 0320 	orr.w	r3, r3, #32
 8008f28:	6023      	str	r3, [r4, #0]
 8008f2a:	2378      	movs	r3, #120	; 0x78
 8008f2c:	4828      	ldr	r0, [pc, #160]	; (8008fd0 <_printf_i+0x248>)
 8008f2e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008f32:	e7e3      	b.n	8008efc <_printf_i+0x174>
 8008f34:	0659      	lsls	r1, r3, #25
 8008f36:	bf48      	it	mi
 8008f38:	b2b6      	uxthmi	r6, r6
 8008f3a:	e7e6      	b.n	8008f0a <_printf_i+0x182>
 8008f3c:	4615      	mov	r5, r2
 8008f3e:	e7bb      	b.n	8008eb8 <_printf_i+0x130>
 8008f40:	682b      	ldr	r3, [r5, #0]
 8008f42:	6826      	ldr	r6, [r4, #0]
 8008f44:	6961      	ldr	r1, [r4, #20]
 8008f46:	1d18      	adds	r0, r3, #4
 8008f48:	6028      	str	r0, [r5, #0]
 8008f4a:	0635      	lsls	r5, r6, #24
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	d501      	bpl.n	8008f54 <_printf_i+0x1cc>
 8008f50:	6019      	str	r1, [r3, #0]
 8008f52:	e002      	b.n	8008f5a <_printf_i+0x1d2>
 8008f54:	0670      	lsls	r0, r6, #25
 8008f56:	d5fb      	bpl.n	8008f50 <_printf_i+0x1c8>
 8008f58:	8019      	strh	r1, [r3, #0]
 8008f5a:	2300      	movs	r3, #0
 8008f5c:	6123      	str	r3, [r4, #16]
 8008f5e:	4615      	mov	r5, r2
 8008f60:	e7ba      	b.n	8008ed8 <_printf_i+0x150>
 8008f62:	682b      	ldr	r3, [r5, #0]
 8008f64:	1d1a      	adds	r2, r3, #4
 8008f66:	602a      	str	r2, [r5, #0]
 8008f68:	681d      	ldr	r5, [r3, #0]
 8008f6a:	6862      	ldr	r2, [r4, #4]
 8008f6c:	2100      	movs	r1, #0
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f7f7 f936 	bl	80001e0 <memchr>
 8008f74:	b108      	cbz	r0, 8008f7a <_printf_i+0x1f2>
 8008f76:	1b40      	subs	r0, r0, r5
 8008f78:	6060      	str	r0, [r4, #4]
 8008f7a:	6863      	ldr	r3, [r4, #4]
 8008f7c:	6123      	str	r3, [r4, #16]
 8008f7e:	2300      	movs	r3, #0
 8008f80:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008f84:	e7a8      	b.n	8008ed8 <_printf_i+0x150>
 8008f86:	6923      	ldr	r3, [r4, #16]
 8008f88:	462a      	mov	r2, r5
 8008f8a:	4649      	mov	r1, r9
 8008f8c:	4640      	mov	r0, r8
 8008f8e:	47d0      	blx	sl
 8008f90:	3001      	adds	r0, #1
 8008f92:	d0ab      	beq.n	8008eec <_printf_i+0x164>
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	079b      	lsls	r3, r3, #30
 8008f98:	d413      	bmi.n	8008fc2 <_printf_i+0x23a>
 8008f9a:	68e0      	ldr	r0, [r4, #12]
 8008f9c:	9b03      	ldr	r3, [sp, #12]
 8008f9e:	4298      	cmp	r0, r3
 8008fa0:	bfb8      	it	lt
 8008fa2:	4618      	movlt	r0, r3
 8008fa4:	e7a4      	b.n	8008ef0 <_printf_i+0x168>
 8008fa6:	2301      	movs	r3, #1
 8008fa8:	4632      	mov	r2, r6
 8008faa:	4649      	mov	r1, r9
 8008fac:	4640      	mov	r0, r8
 8008fae:	47d0      	blx	sl
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d09b      	beq.n	8008eec <_printf_i+0x164>
 8008fb4:	3501      	adds	r5, #1
 8008fb6:	68e3      	ldr	r3, [r4, #12]
 8008fb8:	9903      	ldr	r1, [sp, #12]
 8008fba:	1a5b      	subs	r3, r3, r1
 8008fbc:	42ab      	cmp	r3, r5
 8008fbe:	dcf2      	bgt.n	8008fa6 <_printf_i+0x21e>
 8008fc0:	e7eb      	b.n	8008f9a <_printf_i+0x212>
 8008fc2:	2500      	movs	r5, #0
 8008fc4:	f104 0619 	add.w	r6, r4, #25
 8008fc8:	e7f5      	b.n	8008fb6 <_printf_i+0x22e>
 8008fca:	bf00      	nop
 8008fcc:	0800ce6e 	.word	0x0800ce6e
 8008fd0:	0800ce7f 	.word	0x0800ce7f

08008fd4 <_scanf_float>:
 8008fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd8:	b087      	sub	sp, #28
 8008fda:	4617      	mov	r7, r2
 8008fdc:	9303      	str	r3, [sp, #12]
 8008fde:	688b      	ldr	r3, [r1, #8]
 8008fe0:	1e5a      	subs	r2, r3, #1
 8008fe2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008fe6:	bf83      	ittte	hi
 8008fe8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008fec:	195b      	addhi	r3, r3, r5
 8008fee:	9302      	strhi	r3, [sp, #8]
 8008ff0:	2300      	movls	r3, #0
 8008ff2:	bf86      	itte	hi
 8008ff4:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008ff8:	608b      	strhi	r3, [r1, #8]
 8008ffa:	9302      	strls	r3, [sp, #8]
 8008ffc:	680b      	ldr	r3, [r1, #0]
 8008ffe:	468b      	mov	fp, r1
 8009000:	2500      	movs	r5, #0
 8009002:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009006:	f84b 3b1c 	str.w	r3, [fp], #28
 800900a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800900e:	4680      	mov	r8, r0
 8009010:	460c      	mov	r4, r1
 8009012:	465e      	mov	r6, fp
 8009014:	46aa      	mov	sl, r5
 8009016:	46a9      	mov	r9, r5
 8009018:	9501      	str	r5, [sp, #4]
 800901a:	68a2      	ldr	r2, [r4, #8]
 800901c:	b152      	cbz	r2, 8009034 <_scanf_float+0x60>
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	2b4e      	cmp	r3, #78	; 0x4e
 8009024:	d864      	bhi.n	80090f0 <_scanf_float+0x11c>
 8009026:	2b40      	cmp	r3, #64	; 0x40
 8009028:	d83c      	bhi.n	80090a4 <_scanf_float+0xd0>
 800902a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800902e:	b2c8      	uxtb	r0, r1
 8009030:	280e      	cmp	r0, #14
 8009032:	d93a      	bls.n	80090aa <_scanf_float+0xd6>
 8009034:	f1b9 0f00 	cmp.w	r9, #0
 8009038:	d003      	beq.n	8009042 <_scanf_float+0x6e>
 800903a:	6823      	ldr	r3, [r4, #0]
 800903c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009040:	6023      	str	r3, [r4, #0]
 8009042:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009046:	f1ba 0f01 	cmp.w	sl, #1
 800904a:	f200 8113 	bhi.w	8009274 <_scanf_float+0x2a0>
 800904e:	455e      	cmp	r6, fp
 8009050:	f200 8105 	bhi.w	800925e <_scanf_float+0x28a>
 8009054:	2501      	movs	r5, #1
 8009056:	4628      	mov	r0, r5
 8009058:	b007      	add	sp, #28
 800905a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009062:	2a0d      	cmp	r2, #13
 8009064:	d8e6      	bhi.n	8009034 <_scanf_float+0x60>
 8009066:	a101      	add	r1, pc, #4	; (adr r1, 800906c <_scanf_float+0x98>)
 8009068:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800906c:	080091ab 	.word	0x080091ab
 8009070:	08009035 	.word	0x08009035
 8009074:	08009035 	.word	0x08009035
 8009078:	08009035 	.word	0x08009035
 800907c:	0800920b 	.word	0x0800920b
 8009080:	080091e3 	.word	0x080091e3
 8009084:	08009035 	.word	0x08009035
 8009088:	08009035 	.word	0x08009035
 800908c:	080091b9 	.word	0x080091b9
 8009090:	08009035 	.word	0x08009035
 8009094:	08009035 	.word	0x08009035
 8009098:	08009035 	.word	0x08009035
 800909c:	08009035 	.word	0x08009035
 80090a0:	08009171 	.word	0x08009171
 80090a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80090a8:	e7db      	b.n	8009062 <_scanf_float+0x8e>
 80090aa:	290e      	cmp	r1, #14
 80090ac:	d8c2      	bhi.n	8009034 <_scanf_float+0x60>
 80090ae:	a001      	add	r0, pc, #4	; (adr r0, 80090b4 <_scanf_float+0xe0>)
 80090b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80090b4:	08009163 	.word	0x08009163
 80090b8:	08009035 	.word	0x08009035
 80090bc:	08009163 	.word	0x08009163
 80090c0:	080091f7 	.word	0x080091f7
 80090c4:	08009035 	.word	0x08009035
 80090c8:	08009111 	.word	0x08009111
 80090cc:	0800914d 	.word	0x0800914d
 80090d0:	0800914d 	.word	0x0800914d
 80090d4:	0800914d 	.word	0x0800914d
 80090d8:	0800914d 	.word	0x0800914d
 80090dc:	0800914d 	.word	0x0800914d
 80090e0:	0800914d 	.word	0x0800914d
 80090e4:	0800914d 	.word	0x0800914d
 80090e8:	0800914d 	.word	0x0800914d
 80090ec:	0800914d 	.word	0x0800914d
 80090f0:	2b6e      	cmp	r3, #110	; 0x6e
 80090f2:	d809      	bhi.n	8009108 <_scanf_float+0x134>
 80090f4:	2b60      	cmp	r3, #96	; 0x60
 80090f6:	d8b2      	bhi.n	800905e <_scanf_float+0x8a>
 80090f8:	2b54      	cmp	r3, #84	; 0x54
 80090fa:	d077      	beq.n	80091ec <_scanf_float+0x218>
 80090fc:	2b59      	cmp	r3, #89	; 0x59
 80090fe:	d199      	bne.n	8009034 <_scanf_float+0x60>
 8009100:	2d07      	cmp	r5, #7
 8009102:	d197      	bne.n	8009034 <_scanf_float+0x60>
 8009104:	2508      	movs	r5, #8
 8009106:	e029      	b.n	800915c <_scanf_float+0x188>
 8009108:	2b74      	cmp	r3, #116	; 0x74
 800910a:	d06f      	beq.n	80091ec <_scanf_float+0x218>
 800910c:	2b79      	cmp	r3, #121	; 0x79
 800910e:	e7f6      	b.n	80090fe <_scanf_float+0x12a>
 8009110:	6821      	ldr	r1, [r4, #0]
 8009112:	05c8      	lsls	r0, r1, #23
 8009114:	d51a      	bpl.n	800914c <_scanf_float+0x178>
 8009116:	9b02      	ldr	r3, [sp, #8]
 8009118:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800911c:	6021      	str	r1, [r4, #0]
 800911e:	f109 0901 	add.w	r9, r9, #1
 8009122:	b11b      	cbz	r3, 800912c <_scanf_float+0x158>
 8009124:	3b01      	subs	r3, #1
 8009126:	3201      	adds	r2, #1
 8009128:	9302      	str	r3, [sp, #8]
 800912a:	60a2      	str	r2, [r4, #8]
 800912c:	68a3      	ldr	r3, [r4, #8]
 800912e:	3b01      	subs	r3, #1
 8009130:	60a3      	str	r3, [r4, #8]
 8009132:	6923      	ldr	r3, [r4, #16]
 8009134:	3301      	adds	r3, #1
 8009136:	6123      	str	r3, [r4, #16]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	3b01      	subs	r3, #1
 800913c:	2b00      	cmp	r3, #0
 800913e:	607b      	str	r3, [r7, #4]
 8009140:	f340 8084 	ble.w	800924c <_scanf_float+0x278>
 8009144:	683b      	ldr	r3, [r7, #0]
 8009146:	3301      	adds	r3, #1
 8009148:	603b      	str	r3, [r7, #0]
 800914a:	e766      	b.n	800901a <_scanf_float+0x46>
 800914c:	eb1a 0f05 	cmn.w	sl, r5
 8009150:	f47f af70 	bne.w	8009034 <_scanf_float+0x60>
 8009154:	6822      	ldr	r2, [r4, #0]
 8009156:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800915a:	6022      	str	r2, [r4, #0]
 800915c:	f806 3b01 	strb.w	r3, [r6], #1
 8009160:	e7e4      	b.n	800912c <_scanf_float+0x158>
 8009162:	6822      	ldr	r2, [r4, #0]
 8009164:	0610      	lsls	r0, r2, #24
 8009166:	f57f af65 	bpl.w	8009034 <_scanf_float+0x60>
 800916a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800916e:	e7f4      	b.n	800915a <_scanf_float+0x186>
 8009170:	f1ba 0f00 	cmp.w	sl, #0
 8009174:	d10e      	bne.n	8009194 <_scanf_float+0x1c0>
 8009176:	f1b9 0f00 	cmp.w	r9, #0
 800917a:	d10e      	bne.n	800919a <_scanf_float+0x1c6>
 800917c:	6822      	ldr	r2, [r4, #0]
 800917e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009182:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009186:	d108      	bne.n	800919a <_scanf_float+0x1c6>
 8009188:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800918c:	6022      	str	r2, [r4, #0]
 800918e:	f04f 0a01 	mov.w	sl, #1
 8009192:	e7e3      	b.n	800915c <_scanf_float+0x188>
 8009194:	f1ba 0f02 	cmp.w	sl, #2
 8009198:	d055      	beq.n	8009246 <_scanf_float+0x272>
 800919a:	2d01      	cmp	r5, #1
 800919c:	d002      	beq.n	80091a4 <_scanf_float+0x1d0>
 800919e:	2d04      	cmp	r5, #4
 80091a0:	f47f af48 	bne.w	8009034 <_scanf_float+0x60>
 80091a4:	3501      	adds	r5, #1
 80091a6:	b2ed      	uxtb	r5, r5
 80091a8:	e7d8      	b.n	800915c <_scanf_float+0x188>
 80091aa:	f1ba 0f01 	cmp.w	sl, #1
 80091ae:	f47f af41 	bne.w	8009034 <_scanf_float+0x60>
 80091b2:	f04f 0a02 	mov.w	sl, #2
 80091b6:	e7d1      	b.n	800915c <_scanf_float+0x188>
 80091b8:	b97d      	cbnz	r5, 80091da <_scanf_float+0x206>
 80091ba:	f1b9 0f00 	cmp.w	r9, #0
 80091be:	f47f af3c 	bne.w	800903a <_scanf_float+0x66>
 80091c2:	6822      	ldr	r2, [r4, #0]
 80091c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80091c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80091cc:	f47f af39 	bne.w	8009042 <_scanf_float+0x6e>
 80091d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80091d4:	6022      	str	r2, [r4, #0]
 80091d6:	2501      	movs	r5, #1
 80091d8:	e7c0      	b.n	800915c <_scanf_float+0x188>
 80091da:	2d03      	cmp	r5, #3
 80091dc:	d0e2      	beq.n	80091a4 <_scanf_float+0x1d0>
 80091de:	2d05      	cmp	r5, #5
 80091e0:	e7de      	b.n	80091a0 <_scanf_float+0x1cc>
 80091e2:	2d02      	cmp	r5, #2
 80091e4:	f47f af26 	bne.w	8009034 <_scanf_float+0x60>
 80091e8:	2503      	movs	r5, #3
 80091ea:	e7b7      	b.n	800915c <_scanf_float+0x188>
 80091ec:	2d06      	cmp	r5, #6
 80091ee:	f47f af21 	bne.w	8009034 <_scanf_float+0x60>
 80091f2:	2507      	movs	r5, #7
 80091f4:	e7b2      	b.n	800915c <_scanf_float+0x188>
 80091f6:	6822      	ldr	r2, [r4, #0]
 80091f8:	0591      	lsls	r1, r2, #22
 80091fa:	f57f af1b 	bpl.w	8009034 <_scanf_float+0x60>
 80091fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009202:	6022      	str	r2, [r4, #0]
 8009204:	f8cd 9004 	str.w	r9, [sp, #4]
 8009208:	e7a8      	b.n	800915c <_scanf_float+0x188>
 800920a:	6822      	ldr	r2, [r4, #0]
 800920c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009210:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009214:	d006      	beq.n	8009224 <_scanf_float+0x250>
 8009216:	0550      	lsls	r0, r2, #21
 8009218:	f57f af0c 	bpl.w	8009034 <_scanf_float+0x60>
 800921c:	f1b9 0f00 	cmp.w	r9, #0
 8009220:	f43f af0f 	beq.w	8009042 <_scanf_float+0x6e>
 8009224:	0591      	lsls	r1, r2, #22
 8009226:	bf58      	it	pl
 8009228:	9901      	ldrpl	r1, [sp, #4]
 800922a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800922e:	bf58      	it	pl
 8009230:	eba9 0101 	subpl.w	r1, r9, r1
 8009234:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009238:	bf58      	it	pl
 800923a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800923e:	6022      	str	r2, [r4, #0]
 8009240:	f04f 0900 	mov.w	r9, #0
 8009244:	e78a      	b.n	800915c <_scanf_float+0x188>
 8009246:	f04f 0a03 	mov.w	sl, #3
 800924a:	e787      	b.n	800915c <_scanf_float+0x188>
 800924c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009250:	4639      	mov	r1, r7
 8009252:	4640      	mov	r0, r8
 8009254:	4798      	blx	r3
 8009256:	2800      	cmp	r0, #0
 8009258:	f43f aedf 	beq.w	800901a <_scanf_float+0x46>
 800925c:	e6ea      	b.n	8009034 <_scanf_float+0x60>
 800925e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009262:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009266:	463a      	mov	r2, r7
 8009268:	4640      	mov	r0, r8
 800926a:	4798      	blx	r3
 800926c:	6923      	ldr	r3, [r4, #16]
 800926e:	3b01      	subs	r3, #1
 8009270:	6123      	str	r3, [r4, #16]
 8009272:	e6ec      	b.n	800904e <_scanf_float+0x7a>
 8009274:	1e6b      	subs	r3, r5, #1
 8009276:	2b06      	cmp	r3, #6
 8009278:	d825      	bhi.n	80092c6 <_scanf_float+0x2f2>
 800927a:	2d02      	cmp	r5, #2
 800927c:	d836      	bhi.n	80092ec <_scanf_float+0x318>
 800927e:	455e      	cmp	r6, fp
 8009280:	f67f aee8 	bls.w	8009054 <_scanf_float+0x80>
 8009284:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009288:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800928c:	463a      	mov	r2, r7
 800928e:	4640      	mov	r0, r8
 8009290:	4798      	blx	r3
 8009292:	6923      	ldr	r3, [r4, #16]
 8009294:	3b01      	subs	r3, #1
 8009296:	6123      	str	r3, [r4, #16]
 8009298:	e7f1      	b.n	800927e <_scanf_float+0x2aa>
 800929a:	9802      	ldr	r0, [sp, #8]
 800929c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80092a4:	9002      	str	r0, [sp, #8]
 80092a6:	463a      	mov	r2, r7
 80092a8:	4640      	mov	r0, r8
 80092aa:	4798      	blx	r3
 80092ac:	6923      	ldr	r3, [r4, #16]
 80092ae:	3b01      	subs	r3, #1
 80092b0:	6123      	str	r3, [r4, #16]
 80092b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80092b6:	fa5f fa8a 	uxtb.w	sl, sl
 80092ba:	f1ba 0f02 	cmp.w	sl, #2
 80092be:	d1ec      	bne.n	800929a <_scanf_float+0x2c6>
 80092c0:	3d03      	subs	r5, #3
 80092c2:	b2ed      	uxtb	r5, r5
 80092c4:	1b76      	subs	r6, r6, r5
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	05da      	lsls	r2, r3, #23
 80092ca:	d52f      	bpl.n	800932c <_scanf_float+0x358>
 80092cc:	055b      	lsls	r3, r3, #21
 80092ce:	d510      	bpl.n	80092f2 <_scanf_float+0x31e>
 80092d0:	455e      	cmp	r6, fp
 80092d2:	f67f aebf 	bls.w	8009054 <_scanf_float+0x80>
 80092d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80092da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80092de:	463a      	mov	r2, r7
 80092e0:	4640      	mov	r0, r8
 80092e2:	4798      	blx	r3
 80092e4:	6923      	ldr	r3, [r4, #16]
 80092e6:	3b01      	subs	r3, #1
 80092e8:	6123      	str	r3, [r4, #16]
 80092ea:	e7f1      	b.n	80092d0 <_scanf_float+0x2fc>
 80092ec:	46aa      	mov	sl, r5
 80092ee:	9602      	str	r6, [sp, #8]
 80092f0:	e7df      	b.n	80092b2 <_scanf_float+0x2de>
 80092f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80092f6:	6923      	ldr	r3, [r4, #16]
 80092f8:	2965      	cmp	r1, #101	; 0x65
 80092fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80092fe:	f106 35ff 	add.w	r5, r6, #4294967295
 8009302:	6123      	str	r3, [r4, #16]
 8009304:	d00c      	beq.n	8009320 <_scanf_float+0x34c>
 8009306:	2945      	cmp	r1, #69	; 0x45
 8009308:	d00a      	beq.n	8009320 <_scanf_float+0x34c>
 800930a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800930e:	463a      	mov	r2, r7
 8009310:	4640      	mov	r0, r8
 8009312:	4798      	blx	r3
 8009314:	6923      	ldr	r3, [r4, #16]
 8009316:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800931a:	3b01      	subs	r3, #1
 800931c:	1eb5      	subs	r5, r6, #2
 800931e:	6123      	str	r3, [r4, #16]
 8009320:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009324:	463a      	mov	r2, r7
 8009326:	4640      	mov	r0, r8
 8009328:	4798      	blx	r3
 800932a:	462e      	mov	r6, r5
 800932c:	6825      	ldr	r5, [r4, #0]
 800932e:	f015 0510 	ands.w	r5, r5, #16
 8009332:	d159      	bne.n	80093e8 <_scanf_float+0x414>
 8009334:	7035      	strb	r5, [r6, #0]
 8009336:	6823      	ldr	r3, [r4, #0]
 8009338:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800933c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009340:	d11b      	bne.n	800937a <_scanf_float+0x3a6>
 8009342:	9b01      	ldr	r3, [sp, #4]
 8009344:	454b      	cmp	r3, r9
 8009346:	eba3 0209 	sub.w	r2, r3, r9
 800934a:	d123      	bne.n	8009394 <_scanf_float+0x3c0>
 800934c:	2200      	movs	r2, #0
 800934e:	4659      	mov	r1, fp
 8009350:	4640      	mov	r0, r8
 8009352:	f000 fea7 	bl	800a0a4 <_strtod_r>
 8009356:	6822      	ldr	r2, [r4, #0]
 8009358:	9b03      	ldr	r3, [sp, #12]
 800935a:	f012 0f02 	tst.w	r2, #2
 800935e:	ec57 6b10 	vmov	r6, r7, d0
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	d021      	beq.n	80093aa <_scanf_float+0x3d6>
 8009366:	9903      	ldr	r1, [sp, #12]
 8009368:	1d1a      	adds	r2, r3, #4
 800936a:	600a      	str	r2, [r1, #0]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	e9c3 6700 	strd	r6, r7, [r3]
 8009372:	68e3      	ldr	r3, [r4, #12]
 8009374:	3301      	adds	r3, #1
 8009376:	60e3      	str	r3, [r4, #12]
 8009378:	e66d      	b.n	8009056 <_scanf_float+0x82>
 800937a:	9b04      	ldr	r3, [sp, #16]
 800937c:	2b00      	cmp	r3, #0
 800937e:	d0e5      	beq.n	800934c <_scanf_float+0x378>
 8009380:	9905      	ldr	r1, [sp, #20]
 8009382:	230a      	movs	r3, #10
 8009384:	462a      	mov	r2, r5
 8009386:	3101      	adds	r1, #1
 8009388:	4640      	mov	r0, r8
 800938a:	f000 ff13 	bl	800a1b4 <_strtol_r>
 800938e:	9b04      	ldr	r3, [sp, #16]
 8009390:	9e05      	ldr	r6, [sp, #20]
 8009392:	1ac2      	subs	r2, r0, r3
 8009394:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009398:	429e      	cmp	r6, r3
 800939a:	bf28      	it	cs
 800939c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80093a0:	4912      	ldr	r1, [pc, #72]	; (80093ec <_scanf_float+0x418>)
 80093a2:	4630      	mov	r0, r6
 80093a4:	f000 f83c 	bl	8009420 <siprintf>
 80093a8:	e7d0      	b.n	800934c <_scanf_float+0x378>
 80093aa:	9903      	ldr	r1, [sp, #12]
 80093ac:	f012 0f04 	tst.w	r2, #4
 80093b0:	f103 0204 	add.w	r2, r3, #4
 80093b4:	600a      	str	r2, [r1, #0]
 80093b6:	d1d9      	bne.n	800936c <_scanf_float+0x398>
 80093b8:	f8d3 8000 	ldr.w	r8, [r3]
 80093bc:	ee10 2a10 	vmov	r2, s0
 80093c0:	ee10 0a10 	vmov	r0, s0
 80093c4:	463b      	mov	r3, r7
 80093c6:	4639      	mov	r1, r7
 80093c8:	f7f7 fbb0 	bl	8000b2c <__aeabi_dcmpun>
 80093cc:	b128      	cbz	r0, 80093da <_scanf_float+0x406>
 80093ce:	4808      	ldr	r0, [pc, #32]	; (80093f0 <_scanf_float+0x41c>)
 80093d0:	f000 f820 	bl	8009414 <nanf>
 80093d4:	ed88 0a00 	vstr	s0, [r8]
 80093d8:	e7cb      	b.n	8009372 <_scanf_float+0x39e>
 80093da:	4630      	mov	r0, r6
 80093dc:	4639      	mov	r1, r7
 80093de:	f7f7 fc03 	bl	8000be8 <__aeabi_d2f>
 80093e2:	f8c8 0000 	str.w	r0, [r8]
 80093e6:	e7c4      	b.n	8009372 <_scanf_float+0x39e>
 80093e8:	2500      	movs	r5, #0
 80093ea:	e634      	b.n	8009056 <_scanf_float+0x82>
 80093ec:	0800ce90 	.word	0x0800ce90
 80093f0:	0800d298 	.word	0x0800d298

080093f4 <_sbrk_r>:
 80093f4:	b538      	push	{r3, r4, r5, lr}
 80093f6:	4d06      	ldr	r5, [pc, #24]	; (8009410 <_sbrk_r+0x1c>)
 80093f8:	2300      	movs	r3, #0
 80093fa:	4604      	mov	r4, r0
 80093fc:	4608      	mov	r0, r1
 80093fe:	602b      	str	r3, [r5, #0]
 8009400:	f7f8 fce8 	bl	8001dd4 <_sbrk>
 8009404:	1c43      	adds	r3, r0, #1
 8009406:	d102      	bne.n	800940e <_sbrk_r+0x1a>
 8009408:	682b      	ldr	r3, [r5, #0]
 800940a:	b103      	cbz	r3, 800940e <_sbrk_r+0x1a>
 800940c:	6023      	str	r3, [r4, #0]
 800940e:	bd38      	pop	{r3, r4, r5, pc}
 8009410:	20000aa8 	.word	0x20000aa8

08009414 <nanf>:
 8009414:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800941c <nanf+0x8>
 8009418:	4770      	bx	lr
 800941a:	bf00      	nop
 800941c:	7fc00000 	.word	0x7fc00000

08009420 <siprintf>:
 8009420:	b40e      	push	{r1, r2, r3}
 8009422:	b500      	push	{lr}
 8009424:	b09c      	sub	sp, #112	; 0x70
 8009426:	ab1d      	add	r3, sp, #116	; 0x74
 8009428:	9002      	str	r0, [sp, #8]
 800942a:	9006      	str	r0, [sp, #24]
 800942c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009430:	4809      	ldr	r0, [pc, #36]	; (8009458 <siprintf+0x38>)
 8009432:	9107      	str	r1, [sp, #28]
 8009434:	9104      	str	r1, [sp, #16]
 8009436:	4909      	ldr	r1, [pc, #36]	; (800945c <siprintf+0x3c>)
 8009438:	f853 2b04 	ldr.w	r2, [r3], #4
 800943c:	9105      	str	r1, [sp, #20]
 800943e:	6800      	ldr	r0, [r0, #0]
 8009440:	9301      	str	r3, [sp, #4]
 8009442:	a902      	add	r1, sp, #8
 8009444:	f002 fe04 	bl	800c050 <_svfiprintf_r>
 8009448:	9b02      	ldr	r3, [sp, #8]
 800944a:	2200      	movs	r2, #0
 800944c:	701a      	strb	r2, [r3, #0]
 800944e:	b01c      	add	sp, #112	; 0x70
 8009450:	f85d eb04 	ldr.w	lr, [sp], #4
 8009454:	b003      	add	sp, #12
 8009456:	4770      	bx	lr
 8009458:	20000044 	.word	0x20000044
 800945c:	ffff0208 	.word	0xffff0208

08009460 <sulp>:
 8009460:	b570      	push	{r4, r5, r6, lr}
 8009462:	4604      	mov	r4, r0
 8009464:	460d      	mov	r5, r1
 8009466:	ec45 4b10 	vmov	d0, r4, r5
 800946a:	4616      	mov	r6, r2
 800946c:	f002 fc30 	bl	800bcd0 <__ulp>
 8009470:	ec51 0b10 	vmov	r0, r1, d0
 8009474:	b17e      	cbz	r6, 8009496 <sulp+0x36>
 8009476:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800947a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800947e:	2b00      	cmp	r3, #0
 8009480:	dd09      	ble.n	8009496 <sulp+0x36>
 8009482:	051b      	lsls	r3, r3, #20
 8009484:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009488:	2400      	movs	r4, #0
 800948a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800948e:	4622      	mov	r2, r4
 8009490:	462b      	mov	r3, r5
 8009492:	f7f7 f8b1 	bl	80005f8 <__aeabi_dmul>
 8009496:	bd70      	pop	{r4, r5, r6, pc}

08009498 <_strtod_l>:
 8009498:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800949c:	ed2d 8b02 	vpush	{d8}
 80094a0:	b09d      	sub	sp, #116	; 0x74
 80094a2:	461f      	mov	r7, r3
 80094a4:	2300      	movs	r3, #0
 80094a6:	9318      	str	r3, [sp, #96]	; 0x60
 80094a8:	4ba2      	ldr	r3, [pc, #648]	; (8009734 <_strtod_l+0x29c>)
 80094aa:	9213      	str	r2, [sp, #76]	; 0x4c
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	9305      	str	r3, [sp, #20]
 80094b0:	4604      	mov	r4, r0
 80094b2:	4618      	mov	r0, r3
 80094b4:	4688      	mov	r8, r1
 80094b6:	f7f6 fe8b 	bl	80001d0 <strlen>
 80094ba:	f04f 0a00 	mov.w	sl, #0
 80094be:	4605      	mov	r5, r0
 80094c0:	f04f 0b00 	mov.w	fp, #0
 80094c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80094c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80094ca:	781a      	ldrb	r2, [r3, #0]
 80094cc:	2a2b      	cmp	r2, #43	; 0x2b
 80094ce:	d04e      	beq.n	800956e <_strtod_l+0xd6>
 80094d0:	d83b      	bhi.n	800954a <_strtod_l+0xb2>
 80094d2:	2a0d      	cmp	r2, #13
 80094d4:	d834      	bhi.n	8009540 <_strtod_l+0xa8>
 80094d6:	2a08      	cmp	r2, #8
 80094d8:	d834      	bhi.n	8009544 <_strtod_l+0xac>
 80094da:	2a00      	cmp	r2, #0
 80094dc:	d03e      	beq.n	800955c <_strtod_l+0xc4>
 80094de:	2300      	movs	r3, #0
 80094e0:	930a      	str	r3, [sp, #40]	; 0x28
 80094e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80094e4:	7833      	ldrb	r3, [r6, #0]
 80094e6:	2b30      	cmp	r3, #48	; 0x30
 80094e8:	f040 80b0 	bne.w	800964c <_strtod_l+0x1b4>
 80094ec:	7873      	ldrb	r3, [r6, #1]
 80094ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80094f2:	2b58      	cmp	r3, #88	; 0x58
 80094f4:	d168      	bne.n	80095c8 <_strtod_l+0x130>
 80094f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80094f8:	9301      	str	r3, [sp, #4]
 80094fa:	ab18      	add	r3, sp, #96	; 0x60
 80094fc:	9702      	str	r7, [sp, #8]
 80094fe:	9300      	str	r3, [sp, #0]
 8009500:	4a8d      	ldr	r2, [pc, #564]	; (8009738 <_strtod_l+0x2a0>)
 8009502:	ab19      	add	r3, sp, #100	; 0x64
 8009504:	a917      	add	r1, sp, #92	; 0x5c
 8009506:	4620      	mov	r0, r4
 8009508:	f001 fd38 	bl	800af7c <__gethex>
 800950c:	f010 0707 	ands.w	r7, r0, #7
 8009510:	4605      	mov	r5, r0
 8009512:	d005      	beq.n	8009520 <_strtod_l+0x88>
 8009514:	2f06      	cmp	r7, #6
 8009516:	d12c      	bne.n	8009572 <_strtod_l+0xda>
 8009518:	3601      	adds	r6, #1
 800951a:	2300      	movs	r3, #0
 800951c:	9617      	str	r6, [sp, #92]	; 0x5c
 800951e:	930a      	str	r3, [sp, #40]	; 0x28
 8009520:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009522:	2b00      	cmp	r3, #0
 8009524:	f040 8590 	bne.w	800a048 <_strtod_l+0xbb0>
 8009528:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800952a:	b1eb      	cbz	r3, 8009568 <_strtod_l+0xd0>
 800952c:	4652      	mov	r2, sl
 800952e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009532:	ec43 2b10 	vmov	d0, r2, r3
 8009536:	b01d      	add	sp, #116	; 0x74
 8009538:	ecbd 8b02 	vpop	{d8}
 800953c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009540:	2a20      	cmp	r2, #32
 8009542:	d1cc      	bne.n	80094de <_strtod_l+0x46>
 8009544:	3301      	adds	r3, #1
 8009546:	9317      	str	r3, [sp, #92]	; 0x5c
 8009548:	e7be      	b.n	80094c8 <_strtod_l+0x30>
 800954a:	2a2d      	cmp	r2, #45	; 0x2d
 800954c:	d1c7      	bne.n	80094de <_strtod_l+0x46>
 800954e:	2201      	movs	r2, #1
 8009550:	920a      	str	r2, [sp, #40]	; 0x28
 8009552:	1c5a      	adds	r2, r3, #1
 8009554:	9217      	str	r2, [sp, #92]	; 0x5c
 8009556:	785b      	ldrb	r3, [r3, #1]
 8009558:	2b00      	cmp	r3, #0
 800955a:	d1c2      	bne.n	80094e2 <_strtod_l+0x4a>
 800955c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800955e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009562:	2b00      	cmp	r3, #0
 8009564:	f040 856e 	bne.w	800a044 <_strtod_l+0xbac>
 8009568:	4652      	mov	r2, sl
 800956a:	465b      	mov	r3, fp
 800956c:	e7e1      	b.n	8009532 <_strtod_l+0x9a>
 800956e:	2200      	movs	r2, #0
 8009570:	e7ee      	b.n	8009550 <_strtod_l+0xb8>
 8009572:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009574:	b13a      	cbz	r2, 8009586 <_strtod_l+0xee>
 8009576:	2135      	movs	r1, #53	; 0x35
 8009578:	a81a      	add	r0, sp, #104	; 0x68
 800957a:	f002 fcb4 	bl	800bee6 <__copybits>
 800957e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009580:	4620      	mov	r0, r4
 8009582:	f002 f873 	bl	800b66c <_Bfree>
 8009586:	3f01      	subs	r7, #1
 8009588:	2f04      	cmp	r7, #4
 800958a:	d806      	bhi.n	800959a <_strtod_l+0x102>
 800958c:	e8df f007 	tbb	[pc, r7]
 8009590:	1714030a 	.word	0x1714030a
 8009594:	0a          	.byte	0x0a
 8009595:	00          	.byte	0x00
 8009596:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800959a:	0728      	lsls	r0, r5, #28
 800959c:	d5c0      	bpl.n	8009520 <_strtod_l+0x88>
 800959e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80095a2:	e7bd      	b.n	8009520 <_strtod_l+0x88>
 80095a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80095a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80095aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80095ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80095b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80095b6:	e7f0      	b.n	800959a <_strtod_l+0x102>
 80095b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800973c <_strtod_l+0x2a4>
 80095bc:	e7ed      	b.n	800959a <_strtod_l+0x102>
 80095be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80095c2:	f04f 3aff 	mov.w	sl, #4294967295
 80095c6:	e7e8      	b.n	800959a <_strtod_l+0x102>
 80095c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095ca:	1c5a      	adds	r2, r3, #1
 80095cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80095ce:	785b      	ldrb	r3, [r3, #1]
 80095d0:	2b30      	cmp	r3, #48	; 0x30
 80095d2:	d0f9      	beq.n	80095c8 <_strtod_l+0x130>
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d0a3      	beq.n	8009520 <_strtod_l+0x88>
 80095d8:	2301      	movs	r3, #1
 80095da:	f04f 0900 	mov.w	r9, #0
 80095de:	9304      	str	r3, [sp, #16]
 80095e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80095e2:	9308      	str	r3, [sp, #32]
 80095e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80095e8:	464f      	mov	r7, r9
 80095ea:	220a      	movs	r2, #10
 80095ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80095ee:	7806      	ldrb	r6, [r0, #0]
 80095f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80095f4:	b2d9      	uxtb	r1, r3
 80095f6:	2909      	cmp	r1, #9
 80095f8:	d92a      	bls.n	8009650 <_strtod_l+0x1b8>
 80095fa:	9905      	ldr	r1, [sp, #20]
 80095fc:	462a      	mov	r2, r5
 80095fe:	f002 fe2f 	bl	800c260 <strncmp>
 8009602:	b398      	cbz	r0, 800966c <_strtod_l+0x1d4>
 8009604:	2000      	movs	r0, #0
 8009606:	4632      	mov	r2, r6
 8009608:	463d      	mov	r5, r7
 800960a:	9005      	str	r0, [sp, #20]
 800960c:	4603      	mov	r3, r0
 800960e:	2a65      	cmp	r2, #101	; 0x65
 8009610:	d001      	beq.n	8009616 <_strtod_l+0x17e>
 8009612:	2a45      	cmp	r2, #69	; 0x45
 8009614:	d118      	bne.n	8009648 <_strtod_l+0x1b0>
 8009616:	b91d      	cbnz	r5, 8009620 <_strtod_l+0x188>
 8009618:	9a04      	ldr	r2, [sp, #16]
 800961a:	4302      	orrs	r2, r0
 800961c:	d09e      	beq.n	800955c <_strtod_l+0xc4>
 800961e:	2500      	movs	r5, #0
 8009620:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009624:	f108 0201 	add.w	r2, r8, #1
 8009628:	9217      	str	r2, [sp, #92]	; 0x5c
 800962a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800962e:	2a2b      	cmp	r2, #43	; 0x2b
 8009630:	d075      	beq.n	800971e <_strtod_l+0x286>
 8009632:	2a2d      	cmp	r2, #45	; 0x2d
 8009634:	d07b      	beq.n	800972e <_strtod_l+0x296>
 8009636:	f04f 0c00 	mov.w	ip, #0
 800963a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800963e:	2909      	cmp	r1, #9
 8009640:	f240 8082 	bls.w	8009748 <_strtod_l+0x2b0>
 8009644:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009648:	2600      	movs	r6, #0
 800964a:	e09d      	b.n	8009788 <_strtod_l+0x2f0>
 800964c:	2300      	movs	r3, #0
 800964e:	e7c4      	b.n	80095da <_strtod_l+0x142>
 8009650:	2f08      	cmp	r7, #8
 8009652:	bfd8      	it	le
 8009654:	9907      	ldrle	r1, [sp, #28]
 8009656:	f100 0001 	add.w	r0, r0, #1
 800965a:	bfda      	itte	le
 800965c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009660:	9307      	strle	r3, [sp, #28]
 8009662:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009666:	3701      	adds	r7, #1
 8009668:	9017      	str	r0, [sp, #92]	; 0x5c
 800966a:	e7bf      	b.n	80095ec <_strtod_l+0x154>
 800966c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800966e:	195a      	adds	r2, r3, r5
 8009670:	9217      	str	r2, [sp, #92]	; 0x5c
 8009672:	5d5a      	ldrb	r2, [r3, r5]
 8009674:	2f00      	cmp	r7, #0
 8009676:	d037      	beq.n	80096e8 <_strtod_l+0x250>
 8009678:	9005      	str	r0, [sp, #20]
 800967a:	463d      	mov	r5, r7
 800967c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009680:	2b09      	cmp	r3, #9
 8009682:	d912      	bls.n	80096aa <_strtod_l+0x212>
 8009684:	2301      	movs	r3, #1
 8009686:	e7c2      	b.n	800960e <_strtod_l+0x176>
 8009688:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800968a:	1c5a      	adds	r2, r3, #1
 800968c:	9217      	str	r2, [sp, #92]	; 0x5c
 800968e:	785a      	ldrb	r2, [r3, #1]
 8009690:	3001      	adds	r0, #1
 8009692:	2a30      	cmp	r2, #48	; 0x30
 8009694:	d0f8      	beq.n	8009688 <_strtod_l+0x1f0>
 8009696:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800969a:	2b08      	cmp	r3, #8
 800969c:	f200 84d9 	bhi.w	800a052 <_strtod_l+0xbba>
 80096a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80096a2:	9005      	str	r0, [sp, #20]
 80096a4:	2000      	movs	r0, #0
 80096a6:	9308      	str	r3, [sp, #32]
 80096a8:	4605      	mov	r5, r0
 80096aa:	3a30      	subs	r2, #48	; 0x30
 80096ac:	f100 0301 	add.w	r3, r0, #1
 80096b0:	d014      	beq.n	80096dc <_strtod_l+0x244>
 80096b2:	9905      	ldr	r1, [sp, #20]
 80096b4:	4419      	add	r1, r3
 80096b6:	9105      	str	r1, [sp, #20]
 80096b8:	462b      	mov	r3, r5
 80096ba:	eb00 0e05 	add.w	lr, r0, r5
 80096be:	210a      	movs	r1, #10
 80096c0:	4573      	cmp	r3, lr
 80096c2:	d113      	bne.n	80096ec <_strtod_l+0x254>
 80096c4:	182b      	adds	r3, r5, r0
 80096c6:	2b08      	cmp	r3, #8
 80096c8:	f105 0501 	add.w	r5, r5, #1
 80096cc:	4405      	add	r5, r0
 80096ce:	dc1c      	bgt.n	800970a <_strtod_l+0x272>
 80096d0:	9907      	ldr	r1, [sp, #28]
 80096d2:	230a      	movs	r3, #10
 80096d4:	fb03 2301 	mla	r3, r3, r1, r2
 80096d8:	9307      	str	r3, [sp, #28]
 80096da:	2300      	movs	r3, #0
 80096dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80096de:	1c51      	adds	r1, r2, #1
 80096e0:	9117      	str	r1, [sp, #92]	; 0x5c
 80096e2:	7852      	ldrb	r2, [r2, #1]
 80096e4:	4618      	mov	r0, r3
 80096e6:	e7c9      	b.n	800967c <_strtod_l+0x1e4>
 80096e8:	4638      	mov	r0, r7
 80096ea:	e7d2      	b.n	8009692 <_strtod_l+0x1fa>
 80096ec:	2b08      	cmp	r3, #8
 80096ee:	dc04      	bgt.n	80096fa <_strtod_l+0x262>
 80096f0:	9e07      	ldr	r6, [sp, #28]
 80096f2:	434e      	muls	r6, r1
 80096f4:	9607      	str	r6, [sp, #28]
 80096f6:	3301      	adds	r3, #1
 80096f8:	e7e2      	b.n	80096c0 <_strtod_l+0x228>
 80096fa:	f103 0c01 	add.w	ip, r3, #1
 80096fe:	f1bc 0f10 	cmp.w	ip, #16
 8009702:	bfd8      	it	le
 8009704:	fb01 f909 	mulle.w	r9, r1, r9
 8009708:	e7f5      	b.n	80096f6 <_strtod_l+0x25e>
 800970a:	2d10      	cmp	r5, #16
 800970c:	bfdc      	itt	le
 800970e:	230a      	movle	r3, #10
 8009710:	fb03 2909 	mlale	r9, r3, r9, r2
 8009714:	e7e1      	b.n	80096da <_strtod_l+0x242>
 8009716:	2300      	movs	r3, #0
 8009718:	9305      	str	r3, [sp, #20]
 800971a:	2301      	movs	r3, #1
 800971c:	e77c      	b.n	8009618 <_strtod_l+0x180>
 800971e:	f04f 0c00 	mov.w	ip, #0
 8009722:	f108 0202 	add.w	r2, r8, #2
 8009726:	9217      	str	r2, [sp, #92]	; 0x5c
 8009728:	f898 2002 	ldrb.w	r2, [r8, #2]
 800972c:	e785      	b.n	800963a <_strtod_l+0x1a2>
 800972e:	f04f 0c01 	mov.w	ip, #1
 8009732:	e7f6      	b.n	8009722 <_strtod_l+0x28a>
 8009734:	0800d0e0 	.word	0x0800d0e0
 8009738:	0800ce98 	.word	0x0800ce98
 800973c:	7ff00000 	.word	0x7ff00000
 8009740:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009742:	1c51      	adds	r1, r2, #1
 8009744:	9117      	str	r1, [sp, #92]	; 0x5c
 8009746:	7852      	ldrb	r2, [r2, #1]
 8009748:	2a30      	cmp	r2, #48	; 0x30
 800974a:	d0f9      	beq.n	8009740 <_strtod_l+0x2a8>
 800974c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009750:	2908      	cmp	r1, #8
 8009752:	f63f af79 	bhi.w	8009648 <_strtod_l+0x1b0>
 8009756:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800975a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800975c:	9206      	str	r2, [sp, #24]
 800975e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009760:	1c51      	adds	r1, r2, #1
 8009762:	9117      	str	r1, [sp, #92]	; 0x5c
 8009764:	7852      	ldrb	r2, [r2, #1]
 8009766:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800976a:	2e09      	cmp	r6, #9
 800976c:	d937      	bls.n	80097de <_strtod_l+0x346>
 800976e:	9e06      	ldr	r6, [sp, #24]
 8009770:	1b89      	subs	r1, r1, r6
 8009772:	2908      	cmp	r1, #8
 8009774:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009778:	dc02      	bgt.n	8009780 <_strtod_l+0x2e8>
 800977a:	4576      	cmp	r6, lr
 800977c:	bfa8      	it	ge
 800977e:	4676      	movge	r6, lr
 8009780:	f1bc 0f00 	cmp.w	ip, #0
 8009784:	d000      	beq.n	8009788 <_strtod_l+0x2f0>
 8009786:	4276      	negs	r6, r6
 8009788:	2d00      	cmp	r5, #0
 800978a:	d14d      	bne.n	8009828 <_strtod_l+0x390>
 800978c:	9904      	ldr	r1, [sp, #16]
 800978e:	4301      	orrs	r1, r0
 8009790:	f47f aec6 	bne.w	8009520 <_strtod_l+0x88>
 8009794:	2b00      	cmp	r3, #0
 8009796:	f47f aee1 	bne.w	800955c <_strtod_l+0xc4>
 800979a:	2a69      	cmp	r2, #105	; 0x69
 800979c:	d027      	beq.n	80097ee <_strtod_l+0x356>
 800979e:	dc24      	bgt.n	80097ea <_strtod_l+0x352>
 80097a0:	2a49      	cmp	r2, #73	; 0x49
 80097a2:	d024      	beq.n	80097ee <_strtod_l+0x356>
 80097a4:	2a4e      	cmp	r2, #78	; 0x4e
 80097a6:	f47f aed9 	bne.w	800955c <_strtod_l+0xc4>
 80097aa:	499f      	ldr	r1, [pc, #636]	; (8009a28 <_strtod_l+0x590>)
 80097ac:	a817      	add	r0, sp, #92	; 0x5c
 80097ae:	f001 fe3d 	bl	800b42c <__match>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	f43f aed2 	beq.w	800955c <_strtod_l+0xc4>
 80097b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097ba:	781b      	ldrb	r3, [r3, #0]
 80097bc:	2b28      	cmp	r3, #40	; 0x28
 80097be:	d12d      	bne.n	800981c <_strtod_l+0x384>
 80097c0:	499a      	ldr	r1, [pc, #616]	; (8009a2c <_strtod_l+0x594>)
 80097c2:	aa1a      	add	r2, sp, #104	; 0x68
 80097c4:	a817      	add	r0, sp, #92	; 0x5c
 80097c6:	f001 fe45 	bl	800b454 <__hexnan>
 80097ca:	2805      	cmp	r0, #5
 80097cc:	d126      	bne.n	800981c <_strtod_l+0x384>
 80097ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 80097d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 80097d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 80097d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 80097dc:	e6a0      	b.n	8009520 <_strtod_l+0x88>
 80097de:	210a      	movs	r1, #10
 80097e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 80097e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 80097e8:	e7b9      	b.n	800975e <_strtod_l+0x2c6>
 80097ea:	2a6e      	cmp	r2, #110	; 0x6e
 80097ec:	e7db      	b.n	80097a6 <_strtod_l+0x30e>
 80097ee:	4990      	ldr	r1, [pc, #576]	; (8009a30 <_strtod_l+0x598>)
 80097f0:	a817      	add	r0, sp, #92	; 0x5c
 80097f2:	f001 fe1b 	bl	800b42c <__match>
 80097f6:	2800      	cmp	r0, #0
 80097f8:	f43f aeb0 	beq.w	800955c <_strtod_l+0xc4>
 80097fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80097fe:	498d      	ldr	r1, [pc, #564]	; (8009a34 <_strtod_l+0x59c>)
 8009800:	3b01      	subs	r3, #1
 8009802:	a817      	add	r0, sp, #92	; 0x5c
 8009804:	9317      	str	r3, [sp, #92]	; 0x5c
 8009806:	f001 fe11 	bl	800b42c <__match>
 800980a:	b910      	cbnz	r0, 8009812 <_strtod_l+0x37a>
 800980c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800980e:	3301      	adds	r3, #1
 8009810:	9317      	str	r3, [sp, #92]	; 0x5c
 8009812:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009a44 <_strtod_l+0x5ac>
 8009816:	f04f 0a00 	mov.w	sl, #0
 800981a:	e681      	b.n	8009520 <_strtod_l+0x88>
 800981c:	4886      	ldr	r0, [pc, #536]	; (8009a38 <_strtod_l+0x5a0>)
 800981e:	f002 fd17 	bl	800c250 <nan>
 8009822:	ec5b ab10 	vmov	sl, fp, d0
 8009826:	e67b      	b.n	8009520 <_strtod_l+0x88>
 8009828:	9b05      	ldr	r3, [sp, #20]
 800982a:	9807      	ldr	r0, [sp, #28]
 800982c:	1af3      	subs	r3, r6, r3
 800982e:	2f00      	cmp	r7, #0
 8009830:	bf08      	it	eq
 8009832:	462f      	moveq	r7, r5
 8009834:	2d10      	cmp	r5, #16
 8009836:	9306      	str	r3, [sp, #24]
 8009838:	46a8      	mov	r8, r5
 800983a:	bfa8      	it	ge
 800983c:	f04f 0810 	movge.w	r8, #16
 8009840:	f7f6 fe60 	bl	8000504 <__aeabi_ui2d>
 8009844:	2d09      	cmp	r5, #9
 8009846:	4682      	mov	sl, r0
 8009848:	468b      	mov	fp, r1
 800984a:	dd13      	ble.n	8009874 <_strtod_l+0x3dc>
 800984c:	4b7b      	ldr	r3, [pc, #492]	; (8009a3c <_strtod_l+0x5a4>)
 800984e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009852:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009856:	f7f6 fecf 	bl	80005f8 <__aeabi_dmul>
 800985a:	4682      	mov	sl, r0
 800985c:	4648      	mov	r0, r9
 800985e:	468b      	mov	fp, r1
 8009860:	f7f6 fe50 	bl	8000504 <__aeabi_ui2d>
 8009864:	4602      	mov	r2, r0
 8009866:	460b      	mov	r3, r1
 8009868:	4650      	mov	r0, sl
 800986a:	4659      	mov	r1, fp
 800986c:	f7f6 fd0e 	bl	800028c <__adddf3>
 8009870:	4682      	mov	sl, r0
 8009872:	468b      	mov	fp, r1
 8009874:	2d0f      	cmp	r5, #15
 8009876:	dc38      	bgt.n	80098ea <_strtod_l+0x452>
 8009878:	9b06      	ldr	r3, [sp, #24]
 800987a:	2b00      	cmp	r3, #0
 800987c:	f43f ae50 	beq.w	8009520 <_strtod_l+0x88>
 8009880:	dd24      	ble.n	80098cc <_strtod_l+0x434>
 8009882:	2b16      	cmp	r3, #22
 8009884:	dc0b      	bgt.n	800989e <_strtod_l+0x406>
 8009886:	496d      	ldr	r1, [pc, #436]	; (8009a3c <_strtod_l+0x5a4>)
 8009888:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800988c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009890:	4652      	mov	r2, sl
 8009892:	465b      	mov	r3, fp
 8009894:	f7f6 feb0 	bl	80005f8 <__aeabi_dmul>
 8009898:	4682      	mov	sl, r0
 800989a:	468b      	mov	fp, r1
 800989c:	e640      	b.n	8009520 <_strtod_l+0x88>
 800989e:	9a06      	ldr	r2, [sp, #24]
 80098a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80098a4:	4293      	cmp	r3, r2
 80098a6:	db20      	blt.n	80098ea <_strtod_l+0x452>
 80098a8:	4c64      	ldr	r4, [pc, #400]	; (8009a3c <_strtod_l+0x5a4>)
 80098aa:	f1c5 050f 	rsb	r5, r5, #15
 80098ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80098b2:	4652      	mov	r2, sl
 80098b4:	465b      	mov	r3, fp
 80098b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80098ba:	f7f6 fe9d 	bl	80005f8 <__aeabi_dmul>
 80098be:	9b06      	ldr	r3, [sp, #24]
 80098c0:	1b5d      	subs	r5, r3, r5
 80098c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80098c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 80098ca:	e7e3      	b.n	8009894 <_strtod_l+0x3fc>
 80098cc:	9b06      	ldr	r3, [sp, #24]
 80098ce:	3316      	adds	r3, #22
 80098d0:	db0b      	blt.n	80098ea <_strtod_l+0x452>
 80098d2:	9b05      	ldr	r3, [sp, #20]
 80098d4:	1b9e      	subs	r6, r3, r6
 80098d6:	4b59      	ldr	r3, [pc, #356]	; (8009a3c <_strtod_l+0x5a4>)
 80098d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80098dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80098e0:	4650      	mov	r0, sl
 80098e2:	4659      	mov	r1, fp
 80098e4:	f7f6 ffb2 	bl	800084c <__aeabi_ddiv>
 80098e8:	e7d6      	b.n	8009898 <_strtod_l+0x400>
 80098ea:	9b06      	ldr	r3, [sp, #24]
 80098ec:	eba5 0808 	sub.w	r8, r5, r8
 80098f0:	4498      	add	r8, r3
 80098f2:	f1b8 0f00 	cmp.w	r8, #0
 80098f6:	dd74      	ble.n	80099e2 <_strtod_l+0x54a>
 80098f8:	f018 030f 	ands.w	r3, r8, #15
 80098fc:	d00a      	beq.n	8009914 <_strtod_l+0x47c>
 80098fe:	494f      	ldr	r1, [pc, #316]	; (8009a3c <_strtod_l+0x5a4>)
 8009900:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009904:	4652      	mov	r2, sl
 8009906:	465b      	mov	r3, fp
 8009908:	e9d1 0100 	ldrd	r0, r1, [r1]
 800990c:	f7f6 fe74 	bl	80005f8 <__aeabi_dmul>
 8009910:	4682      	mov	sl, r0
 8009912:	468b      	mov	fp, r1
 8009914:	f038 080f 	bics.w	r8, r8, #15
 8009918:	d04f      	beq.n	80099ba <_strtod_l+0x522>
 800991a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800991e:	dd22      	ble.n	8009966 <_strtod_l+0x4ce>
 8009920:	2500      	movs	r5, #0
 8009922:	462e      	mov	r6, r5
 8009924:	9507      	str	r5, [sp, #28]
 8009926:	9505      	str	r5, [sp, #20]
 8009928:	2322      	movs	r3, #34	; 0x22
 800992a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009a44 <_strtod_l+0x5ac>
 800992e:	6023      	str	r3, [r4, #0]
 8009930:	f04f 0a00 	mov.w	sl, #0
 8009934:	9b07      	ldr	r3, [sp, #28]
 8009936:	2b00      	cmp	r3, #0
 8009938:	f43f adf2 	beq.w	8009520 <_strtod_l+0x88>
 800993c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800993e:	4620      	mov	r0, r4
 8009940:	f001 fe94 	bl	800b66c <_Bfree>
 8009944:	9905      	ldr	r1, [sp, #20]
 8009946:	4620      	mov	r0, r4
 8009948:	f001 fe90 	bl	800b66c <_Bfree>
 800994c:	4631      	mov	r1, r6
 800994e:	4620      	mov	r0, r4
 8009950:	f001 fe8c 	bl	800b66c <_Bfree>
 8009954:	9907      	ldr	r1, [sp, #28]
 8009956:	4620      	mov	r0, r4
 8009958:	f001 fe88 	bl	800b66c <_Bfree>
 800995c:	4629      	mov	r1, r5
 800995e:	4620      	mov	r0, r4
 8009960:	f001 fe84 	bl	800b66c <_Bfree>
 8009964:	e5dc      	b.n	8009520 <_strtod_l+0x88>
 8009966:	4b36      	ldr	r3, [pc, #216]	; (8009a40 <_strtod_l+0x5a8>)
 8009968:	9304      	str	r3, [sp, #16]
 800996a:	2300      	movs	r3, #0
 800996c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009970:	4650      	mov	r0, sl
 8009972:	4659      	mov	r1, fp
 8009974:	4699      	mov	r9, r3
 8009976:	f1b8 0f01 	cmp.w	r8, #1
 800997a:	dc21      	bgt.n	80099c0 <_strtod_l+0x528>
 800997c:	b10b      	cbz	r3, 8009982 <_strtod_l+0x4ea>
 800997e:	4682      	mov	sl, r0
 8009980:	468b      	mov	fp, r1
 8009982:	4b2f      	ldr	r3, [pc, #188]	; (8009a40 <_strtod_l+0x5a8>)
 8009984:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009988:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800998c:	4652      	mov	r2, sl
 800998e:	465b      	mov	r3, fp
 8009990:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009994:	f7f6 fe30 	bl	80005f8 <__aeabi_dmul>
 8009998:	4b2a      	ldr	r3, [pc, #168]	; (8009a44 <_strtod_l+0x5ac>)
 800999a:	460a      	mov	r2, r1
 800999c:	400b      	ands	r3, r1
 800999e:	492a      	ldr	r1, [pc, #168]	; (8009a48 <_strtod_l+0x5b0>)
 80099a0:	428b      	cmp	r3, r1
 80099a2:	4682      	mov	sl, r0
 80099a4:	d8bc      	bhi.n	8009920 <_strtod_l+0x488>
 80099a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80099aa:	428b      	cmp	r3, r1
 80099ac:	bf86      	itte	hi
 80099ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009a4c <_strtod_l+0x5b4>
 80099b2:	f04f 3aff 	movhi.w	sl, #4294967295
 80099b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80099ba:	2300      	movs	r3, #0
 80099bc:	9304      	str	r3, [sp, #16]
 80099be:	e084      	b.n	8009aca <_strtod_l+0x632>
 80099c0:	f018 0f01 	tst.w	r8, #1
 80099c4:	d005      	beq.n	80099d2 <_strtod_l+0x53a>
 80099c6:	9b04      	ldr	r3, [sp, #16]
 80099c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099cc:	f7f6 fe14 	bl	80005f8 <__aeabi_dmul>
 80099d0:	2301      	movs	r3, #1
 80099d2:	9a04      	ldr	r2, [sp, #16]
 80099d4:	3208      	adds	r2, #8
 80099d6:	f109 0901 	add.w	r9, r9, #1
 80099da:	ea4f 0868 	mov.w	r8, r8, asr #1
 80099de:	9204      	str	r2, [sp, #16]
 80099e0:	e7c9      	b.n	8009976 <_strtod_l+0x4de>
 80099e2:	d0ea      	beq.n	80099ba <_strtod_l+0x522>
 80099e4:	f1c8 0800 	rsb	r8, r8, #0
 80099e8:	f018 020f 	ands.w	r2, r8, #15
 80099ec:	d00a      	beq.n	8009a04 <_strtod_l+0x56c>
 80099ee:	4b13      	ldr	r3, [pc, #76]	; (8009a3c <_strtod_l+0x5a4>)
 80099f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80099f4:	4650      	mov	r0, sl
 80099f6:	4659      	mov	r1, fp
 80099f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099fc:	f7f6 ff26 	bl	800084c <__aeabi_ddiv>
 8009a00:	4682      	mov	sl, r0
 8009a02:	468b      	mov	fp, r1
 8009a04:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009a08:	d0d7      	beq.n	80099ba <_strtod_l+0x522>
 8009a0a:	f1b8 0f1f 	cmp.w	r8, #31
 8009a0e:	dd1f      	ble.n	8009a50 <_strtod_l+0x5b8>
 8009a10:	2500      	movs	r5, #0
 8009a12:	462e      	mov	r6, r5
 8009a14:	9507      	str	r5, [sp, #28]
 8009a16:	9505      	str	r5, [sp, #20]
 8009a18:	2322      	movs	r3, #34	; 0x22
 8009a1a:	f04f 0a00 	mov.w	sl, #0
 8009a1e:	f04f 0b00 	mov.w	fp, #0
 8009a22:	6023      	str	r3, [r4, #0]
 8009a24:	e786      	b.n	8009934 <_strtod_l+0x49c>
 8009a26:	bf00      	nop
 8009a28:	0800ce69 	.word	0x0800ce69
 8009a2c:	0800ceac 	.word	0x0800ceac
 8009a30:	0800ce61 	.word	0x0800ce61
 8009a34:	0800cfec 	.word	0x0800cfec
 8009a38:	0800d298 	.word	0x0800d298
 8009a3c:	0800d178 	.word	0x0800d178
 8009a40:	0800d150 	.word	0x0800d150
 8009a44:	7ff00000 	.word	0x7ff00000
 8009a48:	7ca00000 	.word	0x7ca00000
 8009a4c:	7fefffff 	.word	0x7fefffff
 8009a50:	f018 0310 	ands.w	r3, r8, #16
 8009a54:	bf18      	it	ne
 8009a56:	236a      	movne	r3, #106	; 0x6a
 8009a58:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009e08 <_strtod_l+0x970>
 8009a5c:	9304      	str	r3, [sp, #16]
 8009a5e:	4650      	mov	r0, sl
 8009a60:	4659      	mov	r1, fp
 8009a62:	2300      	movs	r3, #0
 8009a64:	f018 0f01 	tst.w	r8, #1
 8009a68:	d004      	beq.n	8009a74 <_strtod_l+0x5dc>
 8009a6a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009a6e:	f7f6 fdc3 	bl	80005f8 <__aeabi_dmul>
 8009a72:	2301      	movs	r3, #1
 8009a74:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009a78:	f109 0908 	add.w	r9, r9, #8
 8009a7c:	d1f2      	bne.n	8009a64 <_strtod_l+0x5cc>
 8009a7e:	b10b      	cbz	r3, 8009a84 <_strtod_l+0x5ec>
 8009a80:	4682      	mov	sl, r0
 8009a82:	468b      	mov	fp, r1
 8009a84:	9b04      	ldr	r3, [sp, #16]
 8009a86:	b1c3      	cbz	r3, 8009aba <_strtod_l+0x622>
 8009a88:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009a8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009a90:	2b00      	cmp	r3, #0
 8009a92:	4659      	mov	r1, fp
 8009a94:	dd11      	ble.n	8009aba <_strtod_l+0x622>
 8009a96:	2b1f      	cmp	r3, #31
 8009a98:	f340 8124 	ble.w	8009ce4 <_strtod_l+0x84c>
 8009a9c:	2b34      	cmp	r3, #52	; 0x34
 8009a9e:	bfde      	ittt	le
 8009aa0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009aa4:	f04f 33ff 	movle.w	r3, #4294967295
 8009aa8:	fa03 f202 	lslle.w	r2, r3, r2
 8009aac:	f04f 0a00 	mov.w	sl, #0
 8009ab0:	bfcc      	ite	gt
 8009ab2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009ab6:	ea02 0b01 	andle.w	fp, r2, r1
 8009aba:	2200      	movs	r2, #0
 8009abc:	2300      	movs	r3, #0
 8009abe:	4650      	mov	r0, sl
 8009ac0:	4659      	mov	r1, fp
 8009ac2:	f7f7 f801 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ac6:	2800      	cmp	r0, #0
 8009ac8:	d1a2      	bne.n	8009a10 <_strtod_l+0x578>
 8009aca:	9b07      	ldr	r3, [sp, #28]
 8009acc:	9300      	str	r3, [sp, #0]
 8009ace:	9908      	ldr	r1, [sp, #32]
 8009ad0:	462b      	mov	r3, r5
 8009ad2:	463a      	mov	r2, r7
 8009ad4:	4620      	mov	r0, r4
 8009ad6:	f001 fe31 	bl	800b73c <__s2b>
 8009ada:	9007      	str	r0, [sp, #28]
 8009adc:	2800      	cmp	r0, #0
 8009ade:	f43f af1f 	beq.w	8009920 <_strtod_l+0x488>
 8009ae2:	9b05      	ldr	r3, [sp, #20]
 8009ae4:	1b9e      	subs	r6, r3, r6
 8009ae6:	9b06      	ldr	r3, [sp, #24]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	bfb4      	ite	lt
 8009aec:	4633      	movlt	r3, r6
 8009aee:	2300      	movge	r3, #0
 8009af0:	930c      	str	r3, [sp, #48]	; 0x30
 8009af2:	9b06      	ldr	r3, [sp, #24]
 8009af4:	2500      	movs	r5, #0
 8009af6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009afa:	9312      	str	r3, [sp, #72]	; 0x48
 8009afc:	462e      	mov	r6, r5
 8009afe:	9b07      	ldr	r3, [sp, #28]
 8009b00:	4620      	mov	r0, r4
 8009b02:	6859      	ldr	r1, [r3, #4]
 8009b04:	f001 fd72 	bl	800b5ec <_Balloc>
 8009b08:	9005      	str	r0, [sp, #20]
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	f43f af0c 	beq.w	8009928 <_strtod_l+0x490>
 8009b10:	9b07      	ldr	r3, [sp, #28]
 8009b12:	691a      	ldr	r2, [r3, #16]
 8009b14:	3202      	adds	r2, #2
 8009b16:	f103 010c 	add.w	r1, r3, #12
 8009b1a:	0092      	lsls	r2, r2, #2
 8009b1c:	300c      	adds	r0, #12
 8009b1e:	f001 fd4b 	bl	800b5b8 <memcpy>
 8009b22:	ec4b ab10 	vmov	d0, sl, fp
 8009b26:	aa1a      	add	r2, sp, #104	; 0x68
 8009b28:	a919      	add	r1, sp, #100	; 0x64
 8009b2a:	4620      	mov	r0, r4
 8009b2c:	f002 f94c 	bl	800bdc8 <__d2b>
 8009b30:	ec4b ab18 	vmov	d8, sl, fp
 8009b34:	9018      	str	r0, [sp, #96]	; 0x60
 8009b36:	2800      	cmp	r0, #0
 8009b38:	f43f aef6 	beq.w	8009928 <_strtod_l+0x490>
 8009b3c:	2101      	movs	r1, #1
 8009b3e:	4620      	mov	r0, r4
 8009b40:	f001 fe96 	bl	800b870 <__i2b>
 8009b44:	4606      	mov	r6, r0
 8009b46:	2800      	cmp	r0, #0
 8009b48:	f43f aeee 	beq.w	8009928 <_strtod_l+0x490>
 8009b4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009b4e:	9904      	ldr	r1, [sp, #16]
 8009b50:	2b00      	cmp	r3, #0
 8009b52:	bfab      	itete	ge
 8009b54:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009b56:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009b58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009b5a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009b5e:	bfac      	ite	ge
 8009b60:	eb03 0902 	addge.w	r9, r3, r2
 8009b64:	1ad7      	sublt	r7, r2, r3
 8009b66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009b68:	eba3 0801 	sub.w	r8, r3, r1
 8009b6c:	4490      	add	r8, r2
 8009b6e:	4ba1      	ldr	r3, [pc, #644]	; (8009df4 <_strtod_l+0x95c>)
 8009b70:	f108 38ff 	add.w	r8, r8, #4294967295
 8009b74:	4598      	cmp	r8, r3
 8009b76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009b7a:	f280 80c7 	bge.w	8009d0c <_strtod_l+0x874>
 8009b7e:	eba3 0308 	sub.w	r3, r3, r8
 8009b82:	2b1f      	cmp	r3, #31
 8009b84:	eba2 0203 	sub.w	r2, r2, r3
 8009b88:	f04f 0101 	mov.w	r1, #1
 8009b8c:	f300 80b1 	bgt.w	8009cf2 <_strtod_l+0x85a>
 8009b90:	fa01 f303 	lsl.w	r3, r1, r3
 8009b94:	930d      	str	r3, [sp, #52]	; 0x34
 8009b96:	2300      	movs	r3, #0
 8009b98:	9308      	str	r3, [sp, #32]
 8009b9a:	eb09 0802 	add.w	r8, r9, r2
 8009b9e:	9b04      	ldr	r3, [sp, #16]
 8009ba0:	45c1      	cmp	r9, r8
 8009ba2:	4417      	add	r7, r2
 8009ba4:	441f      	add	r7, r3
 8009ba6:	464b      	mov	r3, r9
 8009ba8:	bfa8      	it	ge
 8009baa:	4643      	movge	r3, r8
 8009bac:	42bb      	cmp	r3, r7
 8009bae:	bfa8      	it	ge
 8009bb0:	463b      	movge	r3, r7
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	bfc2      	ittt	gt
 8009bb6:	eba8 0803 	subgt.w	r8, r8, r3
 8009bba:	1aff      	subgt	r7, r7, r3
 8009bbc:	eba9 0903 	subgt.w	r9, r9, r3
 8009bc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009bc2:	2b00      	cmp	r3, #0
 8009bc4:	dd17      	ble.n	8009bf6 <_strtod_l+0x75e>
 8009bc6:	4631      	mov	r1, r6
 8009bc8:	461a      	mov	r2, r3
 8009bca:	4620      	mov	r0, r4
 8009bcc:	f001 ff10 	bl	800b9f0 <__pow5mult>
 8009bd0:	4606      	mov	r6, r0
 8009bd2:	2800      	cmp	r0, #0
 8009bd4:	f43f aea8 	beq.w	8009928 <_strtod_l+0x490>
 8009bd8:	4601      	mov	r1, r0
 8009bda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009bdc:	4620      	mov	r0, r4
 8009bde:	f001 fe5d 	bl	800b89c <__multiply>
 8009be2:	900b      	str	r0, [sp, #44]	; 0x2c
 8009be4:	2800      	cmp	r0, #0
 8009be6:	f43f ae9f 	beq.w	8009928 <_strtod_l+0x490>
 8009bea:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009bec:	4620      	mov	r0, r4
 8009bee:	f001 fd3d 	bl	800b66c <_Bfree>
 8009bf2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009bf4:	9318      	str	r3, [sp, #96]	; 0x60
 8009bf6:	f1b8 0f00 	cmp.w	r8, #0
 8009bfa:	f300 808c 	bgt.w	8009d16 <_strtod_l+0x87e>
 8009bfe:	9b06      	ldr	r3, [sp, #24]
 8009c00:	2b00      	cmp	r3, #0
 8009c02:	dd08      	ble.n	8009c16 <_strtod_l+0x77e>
 8009c04:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009c06:	9905      	ldr	r1, [sp, #20]
 8009c08:	4620      	mov	r0, r4
 8009c0a:	f001 fef1 	bl	800b9f0 <__pow5mult>
 8009c0e:	9005      	str	r0, [sp, #20]
 8009c10:	2800      	cmp	r0, #0
 8009c12:	f43f ae89 	beq.w	8009928 <_strtod_l+0x490>
 8009c16:	2f00      	cmp	r7, #0
 8009c18:	dd08      	ble.n	8009c2c <_strtod_l+0x794>
 8009c1a:	9905      	ldr	r1, [sp, #20]
 8009c1c:	463a      	mov	r2, r7
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f001 ff40 	bl	800baa4 <__lshift>
 8009c24:	9005      	str	r0, [sp, #20]
 8009c26:	2800      	cmp	r0, #0
 8009c28:	f43f ae7e 	beq.w	8009928 <_strtod_l+0x490>
 8009c2c:	f1b9 0f00 	cmp.w	r9, #0
 8009c30:	dd08      	ble.n	8009c44 <_strtod_l+0x7ac>
 8009c32:	4631      	mov	r1, r6
 8009c34:	464a      	mov	r2, r9
 8009c36:	4620      	mov	r0, r4
 8009c38:	f001 ff34 	bl	800baa4 <__lshift>
 8009c3c:	4606      	mov	r6, r0
 8009c3e:	2800      	cmp	r0, #0
 8009c40:	f43f ae72 	beq.w	8009928 <_strtod_l+0x490>
 8009c44:	9a05      	ldr	r2, [sp, #20]
 8009c46:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009c48:	4620      	mov	r0, r4
 8009c4a:	f001 ffb7 	bl	800bbbc <__mdiff>
 8009c4e:	4605      	mov	r5, r0
 8009c50:	2800      	cmp	r0, #0
 8009c52:	f43f ae69 	beq.w	8009928 <_strtod_l+0x490>
 8009c56:	68c3      	ldr	r3, [r0, #12]
 8009c58:	930b      	str	r3, [sp, #44]	; 0x2c
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	60c3      	str	r3, [r0, #12]
 8009c5e:	4631      	mov	r1, r6
 8009c60:	f001 ff90 	bl	800bb84 <__mcmp>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	da60      	bge.n	8009d2a <_strtod_l+0x892>
 8009c68:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009c6a:	ea53 030a 	orrs.w	r3, r3, sl
 8009c6e:	f040 8082 	bne.w	8009d76 <_strtod_l+0x8de>
 8009c72:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d17d      	bne.n	8009d76 <_strtod_l+0x8de>
 8009c7a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c7e:	0d1b      	lsrs	r3, r3, #20
 8009c80:	051b      	lsls	r3, r3, #20
 8009c82:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009c86:	d976      	bls.n	8009d76 <_strtod_l+0x8de>
 8009c88:	696b      	ldr	r3, [r5, #20]
 8009c8a:	b913      	cbnz	r3, 8009c92 <_strtod_l+0x7fa>
 8009c8c:	692b      	ldr	r3, [r5, #16]
 8009c8e:	2b01      	cmp	r3, #1
 8009c90:	dd71      	ble.n	8009d76 <_strtod_l+0x8de>
 8009c92:	4629      	mov	r1, r5
 8009c94:	2201      	movs	r2, #1
 8009c96:	4620      	mov	r0, r4
 8009c98:	f001 ff04 	bl	800baa4 <__lshift>
 8009c9c:	4631      	mov	r1, r6
 8009c9e:	4605      	mov	r5, r0
 8009ca0:	f001 ff70 	bl	800bb84 <__mcmp>
 8009ca4:	2800      	cmp	r0, #0
 8009ca6:	dd66      	ble.n	8009d76 <_strtod_l+0x8de>
 8009ca8:	9904      	ldr	r1, [sp, #16]
 8009caa:	4a53      	ldr	r2, [pc, #332]	; (8009df8 <_strtod_l+0x960>)
 8009cac:	465b      	mov	r3, fp
 8009cae:	2900      	cmp	r1, #0
 8009cb0:	f000 8081 	beq.w	8009db6 <_strtod_l+0x91e>
 8009cb4:	ea02 010b 	and.w	r1, r2, fp
 8009cb8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009cbc:	dc7b      	bgt.n	8009db6 <_strtod_l+0x91e>
 8009cbe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009cc2:	f77f aea9 	ble.w	8009a18 <_strtod_l+0x580>
 8009cc6:	4b4d      	ldr	r3, [pc, #308]	; (8009dfc <_strtod_l+0x964>)
 8009cc8:	4650      	mov	r0, sl
 8009cca:	4659      	mov	r1, fp
 8009ccc:	2200      	movs	r2, #0
 8009cce:	f7f6 fc93 	bl	80005f8 <__aeabi_dmul>
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4303      	orrs	r3, r0
 8009cd6:	bf08      	it	eq
 8009cd8:	2322      	moveq	r3, #34	; 0x22
 8009cda:	4682      	mov	sl, r0
 8009cdc:	468b      	mov	fp, r1
 8009cde:	bf08      	it	eq
 8009ce0:	6023      	streq	r3, [r4, #0]
 8009ce2:	e62b      	b.n	800993c <_strtod_l+0x4a4>
 8009ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8009cec:	ea03 0a0a 	and.w	sl, r3, sl
 8009cf0:	e6e3      	b.n	8009aba <_strtod_l+0x622>
 8009cf2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009cf6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8009cfa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8009cfe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009d02:	fa01 f308 	lsl.w	r3, r1, r8
 8009d06:	9308      	str	r3, [sp, #32]
 8009d08:	910d      	str	r1, [sp, #52]	; 0x34
 8009d0a:	e746      	b.n	8009b9a <_strtod_l+0x702>
 8009d0c:	2300      	movs	r3, #0
 8009d0e:	9308      	str	r3, [sp, #32]
 8009d10:	2301      	movs	r3, #1
 8009d12:	930d      	str	r3, [sp, #52]	; 0x34
 8009d14:	e741      	b.n	8009b9a <_strtod_l+0x702>
 8009d16:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d18:	4642      	mov	r2, r8
 8009d1a:	4620      	mov	r0, r4
 8009d1c:	f001 fec2 	bl	800baa4 <__lshift>
 8009d20:	9018      	str	r0, [sp, #96]	; 0x60
 8009d22:	2800      	cmp	r0, #0
 8009d24:	f47f af6b 	bne.w	8009bfe <_strtod_l+0x766>
 8009d28:	e5fe      	b.n	8009928 <_strtod_l+0x490>
 8009d2a:	465f      	mov	r7, fp
 8009d2c:	d16e      	bne.n	8009e0c <_strtod_l+0x974>
 8009d2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009d30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009d34:	b342      	cbz	r2, 8009d88 <_strtod_l+0x8f0>
 8009d36:	4a32      	ldr	r2, [pc, #200]	; (8009e00 <_strtod_l+0x968>)
 8009d38:	4293      	cmp	r3, r2
 8009d3a:	d128      	bne.n	8009d8e <_strtod_l+0x8f6>
 8009d3c:	9b04      	ldr	r3, [sp, #16]
 8009d3e:	4651      	mov	r1, sl
 8009d40:	b1eb      	cbz	r3, 8009d7e <_strtod_l+0x8e6>
 8009d42:	4b2d      	ldr	r3, [pc, #180]	; (8009df8 <_strtod_l+0x960>)
 8009d44:	403b      	ands	r3, r7
 8009d46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8009d4e:	d819      	bhi.n	8009d84 <_strtod_l+0x8ec>
 8009d50:	0d1b      	lsrs	r3, r3, #20
 8009d52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009d56:	fa02 f303 	lsl.w	r3, r2, r3
 8009d5a:	4299      	cmp	r1, r3
 8009d5c:	d117      	bne.n	8009d8e <_strtod_l+0x8f6>
 8009d5e:	4b29      	ldr	r3, [pc, #164]	; (8009e04 <_strtod_l+0x96c>)
 8009d60:	429f      	cmp	r7, r3
 8009d62:	d102      	bne.n	8009d6a <_strtod_l+0x8d2>
 8009d64:	3101      	adds	r1, #1
 8009d66:	f43f addf 	beq.w	8009928 <_strtod_l+0x490>
 8009d6a:	4b23      	ldr	r3, [pc, #140]	; (8009df8 <_strtod_l+0x960>)
 8009d6c:	403b      	ands	r3, r7
 8009d6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009d72:	f04f 0a00 	mov.w	sl, #0
 8009d76:	9b04      	ldr	r3, [sp, #16]
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d1a4      	bne.n	8009cc6 <_strtod_l+0x82e>
 8009d7c:	e5de      	b.n	800993c <_strtod_l+0x4a4>
 8009d7e:	f04f 33ff 	mov.w	r3, #4294967295
 8009d82:	e7ea      	b.n	8009d5a <_strtod_l+0x8c2>
 8009d84:	4613      	mov	r3, r2
 8009d86:	e7e8      	b.n	8009d5a <_strtod_l+0x8c2>
 8009d88:	ea53 030a 	orrs.w	r3, r3, sl
 8009d8c:	d08c      	beq.n	8009ca8 <_strtod_l+0x810>
 8009d8e:	9b08      	ldr	r3, [sp, #32]
 8009d90:	b1db      	cbz	r3, 8009dca <_strtod_l+0x932>
 8009d92:	423b      	tst	r3, r7
 8009d94:	d0ef      	beq.n	8009d76 <_strtod_l+0x8de>
 8009d96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009d98:	9a04      	ldr	r2, [sp, #16]
 8009d9a:	4650      	mov	r0, sl
 8009d9c:	4659      	mov	r1, fp
 8009d9e:	b1c3      	cbz	r3, 8009dd2 <_strtod_l+0x93a>
 8009da0:	f7ff fb5e 	bl	8009460 <sulp>
 8009da4:	4602      	mov	r2, r0
 8009da6:	460b      	mov	r3, r1
 8009da8:	ec51 0b18 	vmov	r0, r1, d8
 8009dac:	f7f6 fa6e 	bl	800028c <__adddf3>
 8009db0:	4682      	mov	sl, r0
 8009db2:	468b      	mov	fp, r1
 8009db4:	e7df      	b.n	8009d76 <_strtod_l+0x8de>
 8009db6:	4013      	ands	r3, r2
 8009db8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8009dbc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009dc0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009dc4:	f04f 3aff 	mov.w	sl, #4294967295
 8009dc8:	e7d5      	b.n	8009d76 <_strtod_l+0x8de>
 8009dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009dcc:	ea13 0f0a 	tst.w	r3, sl
 8009dd0:	e7e0      	b.n	8009d94 <_strtod_l+0x8fc>
 8009dd2:	f7ff fb45 	bl	8009460 <sulp>
 8009dd6:	4602      	mov	r2, r0
 8009dd8:	460b      	mov	r3, r1
 8009dda:	ec51 0b18 	vmov	r0, r1, d8
 8009dde:	f7f6 fa53 	bl	8000288 <__aeabi_dsub>
 8009de2:	2200      	movs	r2, #0
 8009de4:	2300      	movs	r3, #0
 8009de6:	4682      	mov	sl, r0
 8009de8:	468b      	mov	fp, r1
 8009dea:	f7f6 fe6d 	bl	8000ac8 <__aeabi_dcmpeq>
 8009dee:	2800      	cmp	r0, #0
 8009df0:	d0c1      	beq.n	8009d76 <_strtod_l+0x8de>
 8009df2:	e611      	b.n	8009a18 <_strtod_l+0x580>
 8009df4:	fffffc02 	.word	0xfffffc02
 8009df8:	7ff00000 	.word	0x7ff00000
 8009dfc:	39500000 	.word	0x39500000
 8009e00:	000fffff 	.word	0x000fffff
 8009e04:	7fefffff 	.word	0x7fefffff
 8009e08:	0800cec0 	.word	0x0800cec0
 8009e0c:	4631      	mov	r1, r6
 8009e0e:	4628      	mov	r0, r5
 8009e10:	f002 f836 	bl	800be80 <__ratio>
 8009e14:	ec59 8b10 	vmov	r8, r9, d0
 8009e18:	ee10 0a10 	vmov	r0, s0
 8009e1c:	2200      	movs	r2, #0
 8009e1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009e22:	4649      	mov	r1, r9
 8009e24:	f7f6 fe64 	bl	8000af0 <__aeabi_dcmple>
 8009e28:	2800      	cmp	r0, #0
 8009e2a:	d07a      	beq.n	8009f22 <_strtod_l+0xa8a>
 8009e2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e2e:	2b00      	cmp	r3, #0
 8009e30:	d04a      	beq.n	8009ec8 <_strtod_l+0xa30>
 8009e32:	4b95      	ldr	r3, [pc, #596]	; (800a088 <_strtod_l+0xbf0>)
 8009e34:	2200      	movs	r2, #0
 8009e36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009e3a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a088 <_strtod_l+0xbf0>
 8009e3e:	f04f 0800 	mov.w	r8, #0
 8009e42:	4b92      	ldr	r3, [pc, #584]	; (800a08c <_strtod_l+0xbf4>)
 8009e44:	403b      	ands	r3, r7
 8009e46:	930d      	str	r3, [sp, #52]	; 0x34
 8009e48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009e4a:	4b91      	ldr	r3, [pc, #580]	; (800a090 <_strtod_l+0xbf8>)
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	f040 80b0 	bne.w	8009fb2 <_strtod_l+0xb1a>
 8009e52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e56:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009e5a:	ec4b ab10 	vmov	d0, sl, fp
 8009e5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8009e62:	f001 ff35 	bl	800bcd0 <__ulp>
 8009e66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009e6a:	ec53 2b10 	vmov	r2, r3, d0
 8009e6e:	f7f6 fbc3 	bl	80005f8 <__aeabi_dmul>
 8009e72:	4652      	mov	r2, sl
 8009e74:	465b      	mov	r3, fp
 8009e76:	f7f6 fa09 	bl	800028c <__adddf3>
 8009e7a:	460b      	mov	r3, r1
 8009e7c:	4983      	ldr	r1, [pc, #524]	; (800a08c <_strtod_l+0xbf4>)
 8009e7e:	4a85      	ldr	r2, [pc, #532]	; (800a094 <_strtod_l+0xbfc>)
 8009e80:	4019      	ands	r1, r3
 8009e82:	4291      	cmp	r1, r2
 8009e84:	4682      	mov	sl, r0
 8009e86:	d960      	bls.n	8009f4a <_strtod_l+0xab2>
 8009e88:	ee18 3a90 	vmov	r3, s17
 8009e8c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d104      	bne.n	8009e9e <_strtod_l+0xa06>
 8009e94:	ee18 3a10 	vmov	r3, s16
 8009e98:	3301      	adds	r3, #1
 8009e9a:	f43f ad45 	beq.w	8009928 <_strtod_l+0x490>
 8009e9e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a0a0 <_strtod_l+0xc08>
 8009ea2:	f04f 3aff 	mov.w	sl, #4294967295
 8009ea6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009ea8:	4620      	mov	r0, r4
 8009eaa:	f001 fbdf 	bl	800b66c <_Bfree>
 8009eae:	9905      	ldr	r1, [sp, #20]
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f001 fbdb 	bl	800b66c <_Bfree>
 8009eb6:	4631      	mov	r1, r6
 8009eb8:	4620      	mov	r0, r4
 8009eba:	f001 fbd7 	bl	800b66c <_Bfree>
 8009ebe:	4629      	mov	r1, r5
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f001 fbd3 	bl	800b66c <_Bfree>
 8009ec6:	e61a      	b.n	8009afe <_strtod_l+0x666>
 8009ec8:	f1ba 0f00 	cmp.w	sl, #0
 8009ecc:	d11b      	bne.n	8009f06 <_strtod_l+0xa6e>
 8009ece:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009ed2:	b9f3      	cbnz	r3, 8009f12 <_strtod_l+0xa7a>
 8009ed4:	4b6c      	ldr	r3, [pc, #432]	; (800a088 <_strtod_l+0xbf0>)
 8009ed6:	2200      	movs	r2, #0
 8009ed8:	4640      	mov	r0, r8
 8009eda:	4649      	mov	r1, r9
 8009edc:	f7f6 fdfe 	bl	8000adc <__aeabi_dcmplt>
 8009ee0:	b9d0      	cbnz	r0, 8009f18 <_strtod_l+0xa80>
 8009ee2:	4640      	mov	r0, r8
 8009ee4:	4649      	mov	r1, r9
 8009ee6:	4b6c      	ldr	r3, [pc, #432]	; (800a098 <_strtod_l+0xc00>)
 8009ee8:	2200      	movs	r2, #0
 8009eea:	f7f6 fb85 	bl	80005f8 <__aeabi_dmul>
 8009eee:	4680      	mov	r8, r0
 8009ef0:	4689      	mov	r9, r1
 8009ef2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009ef6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8009efa:	9315      	str	r3, [sp, #84]	; 0x54
 8009efc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009f00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009f04:	e79d      	b.n	8009e42 <_strtod_l+0x9aa>
 8009f06:	f1ba 0f01 	cmp.w	sl, #1
 8009f0a:	d102      	bne.n	8009f12 <_strtod_l+0xa7a>
 8009f0c:	2f00      	cmp	r7, #0
 8009f0e:	f43f ad83 	beq.w	8009a18 <_strtod_l+0x580>
 8009f12:	4b62      	ldr	r3, [pc, #392]	; (800a09c <_strtod_l+0xc04>)
 8009f14:	2200      	movs	r2, #0
 8009f16:	e78e      	b.n	8009e36 <_strtod_l+0x99e>
 8009f18:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a098 <_strtod_l+0xc00>
 8009f1c:	f04f 0800 	mov.w	r8, #0
 8009f20:	e7e7      	b.n	8009ef2 <_strtod_l+0xa5a>
 8009f22:	4b5d      	ldr	r3, [pc, #372]	; (800a098 <_strtod_l+0xc00>)
 8009f24:	4640      	mov	r0, r8
 8009f26:	4649      	mov	r1, r9
 8009f28:	2200      	movs	r2, #0
 8009f2a:	f7f6 fb65 	bl	80005f8 <__aeabi_dmul>
 8009f2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f30:	4680      	mov	r8, r0
 8009f32:	4689      	mov	r9, r1
 8009f34:	b933      	cbnz	r3, 8009f44 <_strtod_l+0xaac>
 8009f36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009f3a:	900e      	str	r0, [sp, #56]	; 0x38
 8009f3c:	930f      	str	r3, [sp, #60]	; 0x3c
 8009f3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8009f42:	e7dd      	b.n	8009f00 <_strtod_l+0xa68>
 8009f44:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8009f48:	e7f9      	b.n	8009f3e <_strtod_l+0xaa6>
 8009f4a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009f4e:	9b04      	ldr	r3, [sp, #16]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d1a8      	bne.n	8009ea6 <_strtod_l+0xa0e>
 8009f54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009f5a:	0d1b      	lsrs	r3, r3, #20
 8009f5c:	051b      	lsls	r3, r3, #20
 8009f5e:	429a      	cmp	r2, r3
 8009f60:	d1a1      	bne.n	8009ea6 <_strtod_l+0xa0e>
 8009f62:	4640      	mov	r0, r8
 8009f64:	4649      	mov	r1, r9
 8009f66:	f7f6 fea7 	bl	8000cb8 <__aeabi_d2lz>
 8009f6a:	f7f6 fb17 	bl	800059c <__aeabi_l2d>
 8009f6e:	4602      	mov	r2, r0
 8009f70:	460b      	mov	r3, r1
 8009f72:	4640      	mov	r0, r8
 8009f74:	4649      	mov	r1, r9
 8009f76:	f7f6 f987 	bl	8000288 <__aeabi_dsub>
 8009f7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f80:	ea43 030a 	orr.w	r3, r3, sl
 8009f84:	4313      	orrs	r3, r2
 8009f86:	4680      	mov	r8, r0
 8009f88:	4689      	mov	r9, r1
 8009f8a:	d055      	beq.n	800a038 <_strtod_l+0xba0>
 8009f8c:	a336      	add	r3, pc, #216	; (adr r3, 800a068 <_strtod_l+0xbd0>)
 8009f8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f92:	f7f6 fda3 	bl	8000adc <__aeabi_dcmplt>
 8009f96:	2800      	cmp	r0, #0
 8009f98:	f47f acd0 	bne.w	800993c <_strtod_l+0x4a4>
 8009f9c:	a334      	add	r3, pc, #208	; (adr r3, 800a070 <_strtod_l+0xbd8>)
 8009f9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fa2:	4640      	mov	r0, r8
 8009fa4:	4649      	mov	r1, r9
 8009fa6:	f7f6 fdb7 	bl	8000b18 <__aeabi_dcmpgt>
 8009faa:	2800      	cmp	r0, #0
 8009fac:	f43f af7b 	beq.w	8009ea6 <_strtod_l+0xa0e>
 8009fb0:	e4c4      	b.n	800993c <_strtod_l+0x4a4>
 8009fb2:	9b04      	ldr	r3, [sp, #16]
 8009fb4:	b333      	cbz	r3, 800a004 <_strtod_l+0xb6c>
 8009fb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fb8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009fbc:	d822      	bhi.n	800a004 <_strtod_l+0xb6c>
 8009fbe:	a32e      	add	r3, pc, #184	; (adr r3, 800a078 <_strtod_l+0xbe0>)
 8009fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009fc4:	4640      	mov	r0, r8
 8009fc6:	4649      	mov	r1, r9
 8009fc8:	f7f6 fd92 	bl	8000af0 <__aeabi_dcmple>
 8009fcc:	b1a0      	cbz	r0, 8009ff8 <_strtod_l+0xb60>
 8009fce:	4649      	mov	r1, r9
 8009fd0:	4640      	mov	r0, r8
 8009fd2:	f7f6 fde9 	bl	8000ba8 <__aeabi_d2uiz>
 8009fd6:	2801      	cmp	r0, #1
 8009fd8:	bf38      	it	cc
 8009fda:	2001      	movcc	r0, #1
 8009fdc:	f7f6 fa92 	bl	8000504 <__aeabi_ui2d>
 8009fe0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009fe2:	4680      	mov	r8, r0
 8009fe4:	4689      	mov	r9, r1
 8009fe6:	bb23      	cbnz	r3, 800a032 <_strtod_l+0xb9a>
 8009fe8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009fec:	9010      	str	r0, [sp, #64]	; 0x40
 8009fee:	9311      	str	r3, [sp, #68]	; 0x44
 8009ff0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009ff4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009ff8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009ffa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009ffc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a000:	1a9b      	subs	r3, r3, r2
 800a002:	9309      	str	r3, [sp, #36]	; 0x24
 800a004:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a008:	eeb0 0a48 	vmov.f32	s0, s16
 800a00c:	eef0 0a68 	vmov.f32	s1, s17
 800a010:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a014:	f001 fe5c 	bl	800bcd0 <__ulp>
 800a018:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a01c:	ec53 2b10 	vmov	r2, r3, d0
 800a020:	f7f6 faea 	bl	80005f8 <__aeabi_dmul>
 800a024:	ec53 2b18 	vmov	r2, r3, d8
 800a028:	f7f6 f930 	bl	800028c <__adddf3>
 800a02c:	4682      	mov	sl, r0
 800a02e:	468b      	mov	fp, r1
 800a030:	e78d      	b.n	8009f4e <_strtod_l+0xab6>
 800a032:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a036:	e7db      	b.n	8009ff0 <_strtod_l+0xb58>
 800a038:	a311      	add	r3, pc, #68	; (adr r3, 800a080 <_strtod_l+0xbe8>)
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	f7f6 fd4d 	bl	8000adc <__aeabi_dcmplt>
 800a042:	e7b2      	b.n	8009faa <_strtod_l+0xb12>
 800a044:	2300      	movs	r3, #0
 800a046:	930a      	str	r3, [sp, #40]	; 0x28
 800a048:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a04a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a04c:	6013      	str	r3, [r2, #0]
 800a04e:	f7ff ba6b 	b.w	8009528 <_strtod_l+0x90>
 800a052:	2a65      	cmp	r2, #101	; 0x65
 800a054:	f43f ab5f 	beq.w	8009716 <_strtod_l+0x27e>
 800a058:	2a45      	cmp	r2, #69	; 0x45
 800a05a:	f43f ab5c 	beq.w	8009716 <_strtod_l+0x27e>
 800a05e:	2301      	movs	r3, #1
 800a060:	f7ff bb94 	b.w	800978c <_strtod_l+0x2f4>
 800a064:	f3af 8000 	nop.w
 800a068:	94a03595 	.word	0x94a03595
 800a06c:	3fdfffff 	.word	0x3fdfffff
 800a070:	35afe535 	.word	0x35afe535
 800a074:	3fe00000 	.word	0x3fe00000
 800a078:	ffc00000 	.word	0xffc00000
 800a07c:	41dfffff 	.word	0x41dfffff
 800a080:	94a03595 	.word	0x94a03595
 800a084:	3fcfffff 	.word	0x3fcfffff
 800a088:	3ff00000 	.word	0x3ff00000
 800a08c:	7ff00000 	.word	0x7ff00000
 800a090:	7fe00000 	.word	0x7fe00000
 800a094:	7c9fffff 	.word	0x7c9fffff
 800a098:	3fe00000 	.word	0x3fe00000
 800a09c:	bff00000 	.word	0xbff00000
 800a0a0:	7fefffff 	.word	0x7fefffff

0800a0a4 <_strtod_r>:
 800a0a4:	4b01      	ldr	r3, [pc, #4]	; (800a0ac <_strtod_r+0x8>)
 800a0a6:	f7ff b9f7 	b.w	8009498 <_strtod_l>
 800a0aa:	bf00      	nop
 800a0ac:	200000ac 	.word	0x200000ac

0800a0b0 <_strtol_l.constprop.0>:
 800a0b0:	2b01      	cmp	r3, #1
 800a0b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a0b6:	d001      	beq.n	800a0bc <_strtol_l.constprop.0+0xc>
 800a0b8:	2b24      	cmp	r3, #36	; 0x24
 800a0ba:	d906      	bls.n	800a0ca <_strtol_l.constprop.0+0x1a>
 800a0bc:	f7fe f9fe 	bl	80084bc <__errno>
 800a0c0:	2316      	movs	r3, #22
 800a0c2:	6003      	str	r3, [r0, #0]
 800a0c4:	2000      	movs	r0, #0
 800a0c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a0ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a1b0 <_strtol_l.constprop.0+0x100>
 800a0ce:	460d      	mov	r5, r1
 800a0d0:	462e      	mov	r6, r5
 800a0d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a0d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a0da:	f017 0708 	ands.w	r7, r7, #8
 800a0de:	d1f7      	bne.n	800a0d0 <_strtol_l.constprop.0+0x20>
 800a0e0:	2c2d      	cmp	r4, #45	; 0x2d
 800a0e2:	d132      	bne.n	800a14a <_strtol_l.constprop.0+0x9a>
 800a0e4:	782c      	ldrb	r4, [r5, #0]
 800a0e6:	2701      	movs	r7, #1
 800a0e8:	1cb5      	adds	r5, r6, #2
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	d05b      	beq.n	800a1a6 <_strtol_l.constprop.0+0xf6>
 800a0ee:	2b10      	cmp	r3, #16
 800a0f0:	d109      	bne.n	800a106 <_strtol_l.constprop.0+0x56>
 800a0f2:	2c30      	cmp	r4, #48	; 0x30
 800a0f4:	d107      	bne.n	800a106 <_strtol_l.constprop.0+0x56>
 800a0f6:	782c      	ldrb	r4, [r5, #0]
 800a0f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a0fc:	2c58      	cmp	r4, #88	; 0x58
 800a0fe:	d14d      	bne.n	800a19c <_strtol_l.constprop.0+0xec>
 800a100:	786c      	ldrb	r4, [r5, #1]
 800a102:	2310      	movs	r3, #16
 800a104:	3502      	adds	r5, #2
 800a106:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a10a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a10e:	f04f 0c00 	mov.w	ip, #0
 800a112:	fbb8 f9f3 	udiv	r9, r8, r3
 800a116:	4666      	mov	r6, ip
 800a118:	fb03 8a19 	mls	sl, r3, r9, r8
 800a11c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a120:	f1be 0f09 	cmp.w	lr, #9
 800a124:	d816      	bhi.n	800a154 <_strtol_l.constprop.0+0xa4>
 800a126:	4674      	mov	r4, lr
 800a128:	42a3      	cmp	r3, r4
 800a12a:	dd24      	ble.n	800a176 <_strtol_l.constprop.0+0xc6>
 800a12c:	f1bc 0f00 	cmp.w	ip, #0
 800a130:	db1e      	blt.n	800a170 <_strtol_l.constprop.0+0xc0>
 800a132:	45b1      	cmp	r9, r6
 800a134:	d31c      	bcc.n	800a170 <_strtol_l.constprop.0+0xc0>
 800a136:	d101      	bne.n	800a13c <_strtol_l.constprop.0+0x8c>
 800a138:	45a2      	cmp	sl, r4
 800a13a:	db19      	blt.n	800a170 <_strtol_l.constprop.0+0xc0>
 800a13c:	fb06 4603 	mla	r6, r6, r3, r4
 800a140:	f04f 0c01 	mov.w	ip, #1
 800a144:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a148:	e7e8      	b.n	800a11c <_strtol_l.constprop.0+0x6c>
 800a14a:	2c2b      	cmp	r4, #43	; 0x2b
 800a14c:	bf04      	itt	eq
 800a14e:	782c      	ldrbeq	r4, [r5, #0]
 800a150:	1cb5      	addeq	r5, r6, #2
 800a152:	e7ca      	b.n	800a0ea <_strtol_l.constprop.0+0x3a>
 800a154:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a158:	f1be 0f19 	cmp.w	lr, #25
 800a15c:	d801      	bhi.n	800a162 <_strtol_l.constprop.0+0xb2>
 800a15e:	3c37      	subs	r4, #55	; 0x37
 800a160:	e7e2      	b.n	800a128 <_strtol_l.constprop.0+0x78>
 800a162:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a166:	f1be 0f19 	cmp.w	lr, #25
 800a16a:	d804      	bhi.n	800a176 <_strtol_l.constprop.0+0xc6>
 800a16c:	3c57      	subs	r4, #87	; 0x57
 800a16e:	e7db      	b.n	800a128 <_strtol_l.constprop.0+0x78>
 800a170:	f04f 3cff 	mov.w	ip, #4294967295
 800a174:	e7e6      	b.n	800a144 <_strtol_l.constprop.0+0x94>
 800a176:	f1bc 0f00 	cmp.w	ip, #0
 800a17a:	da05      	bge.n	800a188 <_strtol_l.constprop.0+0xd8>
 800a17c:	2322      	movs	r3, #34	; 0x22
 800a17e:	6003      	str	r3, [r0, #0]
 800a180:	4646      	mov	r6, r8
 800a182:	b942      	cbnz	r2, 800a196 <_strtol_l.constprop.0+0xe6>
 800a184:	4630      	mov	r0, r6
 800a186:	e79e      	b.n	800a0c6 <_strtol_l.constprop.0+0x16>
 800a188:	b107      	cbz	r7, 800a18c <_strtol_l.constprop.0+0xdc>
 800a18a:	4276      	negs	r6, r6
 800a18c:	2a00      	cmp	r2, #0
 800a18e:	d0f9      	beq.n	800a184 <_strtol_l.constprop.0+0xd4>
 800a190:	f1bc 0f00 	cmp.w	ip, #0
 800a194:	d000      	beq.n	800a198 <_strtol_l.constprop.0+0xe8>
 800a196:	1e69      	subs	r1, r5, #1
 800a198:	6011      	str	r1, [r2, #0]
 800a19a:	e7f3      	b.n	800a184 <_strtol_l.constprop.0+0xd4>
 800a19c:	2430      	movs	r4, #48	; 0x30
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1b1      	bne.n	800a106 <_strtol_l.constprop.0+0x56>
 800a1a2:	2308      	movs	r3, #8
 800a1a4:	e7af      	b.n	800a106 <_strtol_l.constprop.0+0x56>
 800a1a6:	2c30      	cmp	r4, #48	; 0x30
 800a1a8:	d0a5      	beq.n	800a0f6 <_strtol_l.constprop.0+0x46>
 800a1aa:	230a      	movs	r3, #10
 800a1ac:	e7ab      	b.n	800a106 <_strtol_l.constprop.0+0x56>
 800a1ae:	bf00      	nop
 800a1b0:	0800cee9 	.word	0x0800cee9

0800a1b4 <_strtol_r>:
 800a1b4:	f7ff bf7c 	b.w	800a0b0 <_strtol_l.constprop.0>

0800a1b8 <quorem>:
 800a1b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a1bc:	6903      	ldr	r3, [r0, #16]
 800a1be:	690c      	ldr	r4, [r1, #16]
 800a1c0:	42a3      	cmp	r3, r4
 800a1c2:	4607      	mov	r7, r0
 800a1c4:	f2c0 8081 	blt.w	800a2ca <quorem+0x112>
 800a1c8:	3c01      	subs	r4, #1
 800a1ca:	f101 0814 	add.w	r8, r1, #20
 800a1ce:	f100 0514 	add.w	r5, r0, #20
 800a1d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a1d6:	9301      	str	r3, [sp, #4]
 800a1d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a1dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a1e0:	3301      	adds	r3, #1
 800a1e2:	429a      	cmp	r2, r3
 800a1e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a1e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a1ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800a1f0:	d331      	bcc.n	800a256 <quorem+0x9e>
 800a1f2:	f04f 0e00 	mov.w	lr, #0
 800a1f6:	4640      	mov	r0, r8
 800a1f8:	46ac      	mov	ip, r5
 800a1fa:	46f2      	mov	sl, lr
 800a1fc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a200:	b293      	uxth	r3, r2
 800a202:	fb06 e303 	mla	r3, r6, r3, lr
 800a206:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a20a:	b29b      	uxth	r3, r3
 800a20c:	ebaa 0303 	sub.w	r3, sl, r3
 800a210:	f8dc a000 	ldr.w	sl, [ip]
 800a214:	0c12      	lsrs	r2, r2, #16
 800a216:	fa13 f38a 	uxtah	r3, r3, sl
 800a21a:	fb06 e202 	mla	r2, r6, r2, lr
 800a21e:	9300      	str	r3, [sp, #0]
 800a220:	9b00      	ldr	r3, [sp, #0]
 800a222:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a226:	b292      	uxth	r2, r2
 800a228:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a22c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a230:	f8bd 3000 	ldrh.w	r3, [sp]
 800a234:	4581      	cmp	r9, r0
 800a236:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a23a:	f84c 3b04 	str.w	r3, [ip], #4
 800a23e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a242:	d2db      	bcs.n	800a1fc <quorem+0x44>
 800a244:	f855 300b 	ldr.w	r3, [r5, fp]
 800a248:	b92b      	cbnz	r3, 800a256 <quorem+0x9e>
 800a24a:	9b01      	ldr	r3, [sp, #4]
 800a24c:	3b04      	subs	r3, #4
 800a24e:	429d      	cmp	r5, r3
 800a250:	461a      	mov	r2, r3
 800a252:	d32e      	bcc.n	800a2b2 <quorem+0xfa>
 800a254:	613c      	str	r4, [r7, #16]
 800a256:	4638      	mov	r0, r7
 800a258:	f001 fc94 	bl	800bb84 <__mcmp>
 800a25c:	2800      	cmp	r0, #0
 800a25e:	db24      	blt.n	800a2aa <quorem+0xf2>
 800a260:	3601      	adds	r6, #1
 800a262:	4628      	mov	r0, r5
 800a264:	f04f 0c00 	mov.w	ip, #0
 800a268:	f858 2b04 	ldr.w	r2, [r8], #4
 800a26c:	f8d0 e000 	ldr.w	lr, [r0]
 800a270:	b293      	uxth	r3, r2
 800a272:	ebac 0303 	sub.w	r3, ip, r3
 800a276:	0c12      	lsrs	r2, r2, #16
 800a278:	fa13 f38e 	uxtah	r3, r3, lr
 800a27c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a280:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a284:	b29b      	uxth	r3, r3
 800a286:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a28a:	45c1      	cmp	r9, r8
 800a28c:	f840 3b04 	str.w	r3, [r0], #4
 800a290:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a294:	d2e8      	bcs.n	800a268 <quorem+0xb0>
 800a296:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a29a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a29e:	b922      	cbnz	r2, 800a2aa <quorem+0xf2>
 800a2a0:	3b04      	subs	r3, #4
 800a2a2:	429d      	cmp	r5, r3
 800a2a4:	461a      	mov	r2, r3
 800a2a6:	d30a      	bcc.n	800a2be <quorem+0x106>
 800a2a8:	613c      	str	r4, [r7, #16]
 800a2aa:	4630      	mov	r0, r6
 800a2ac:	b003      	add	sp, #12
 800a2ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a2b2:	6812      	ldr	r2, [r2, #0]
 800a2b4:	3b04      	subs	r3, #4
 800a2b6:	2a00      	cmp	r2, #0
 800a2b8:	d1cc      	bne.n	800a254 <quorem+0x9c>
 800a2ba:	3c01      	subs	r4, #1
 800a2bc:	e7c7      	b.n	800a24e <quorem+0x96>
 800a2be:	6812      	ldr	r2, [r2, #0]
 800a2c0:	3b04      	subs	r3, #4
 800a2c2:	2a00      	cmp	r2, #0
 800a2c4:	d1f0      	bne.n	800a2a8 <quorem+0xf0>
 800a2c6:	3c01      	subs	r4, #1
 800a2c8:	e7eb      	b.n	800a2a2 <quorem+0xea>
 800a2ca:	2000      	movs	r0, #0
 800a2cc:	e7ee      	b.n	800a2ac <quorem+0xf4>
	...

0800a2d0 <_dtoa_r>:
 800a2d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2d4:	ed2d 8b04 	vpush	{d8-d9}
 800a2d8:	ec57 6b10 	vmov	r6, r7, d0
 800a2dc:	b093      	sub	sp, #76	; 0x4c
 800a2de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a2e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a2e4:	9106      	str	r1, [sp, #24]
 800a2e6:	ee10 aa10 	vmov	sl, s0
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a2ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a2f0:	46bb      	mov	fp, r7
 800a2f2:	b975      	cbnz	r5, 800a312 <_dtoa_r+0x42>
 800a2f4:	2010      	movs	r0, #16
 800a2f6:	f7fe f90b 	bl	8008510 <malloc>
 800a2fa:	4602      	mov	r2, r0
 800a2fc:	6260      	str	r0, [r4, #36]	; 0x24
 800a2fe:	b920      	cbnz	r0, 800a30a <_dtoa_r+0x3a>
 800a300:	4ba7      	ldr	r3, [pc, #668]	; (800a5a0 <_dtoa_r+0x2d0>)
 800a302:	21ea      	movs	r1, #234	; 0xea
 800a304:	48a7      	ldr	r0, [pc, #668]	; (800a5a4 <_dtoa_r+0x2d4>)
 800a306:	f001 ffcd 	bl	800c2a4 <__assert_func>
 800a30a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a30e:	6005      	str	r5, [r0, #0]
 800a310:	60c5      	str	r5, [r0, #12]
 800a312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a314:	6819      	ldr	r1, [r3, #0]
 800a316:	b151      	cbz	r1, 800a32e <_dtoa_r+0x5e>
 800a318:	685a      	ldr	r2, [r3, #4]
 800a31a:	604a      	str	r2, [r1, #4]
 800a31c:	2301      	movs	r3, #1
 800a31e:	4093      	lsls	r3, r2
 800a320:	608b      	str	r3, [r1, #8]
 800a322:	4620      	mov	r0, r4
 800a324:	f001 f9a2 	bl	800b66c <_Bfree>
 800a328:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a32a:	2200      	movs	r2, #0
 800a32c:	601a      	str	r2, [r3, #0]
 800a32e:	1e3b      	subs	r3, r7, #0
 800a330:	bfaa      	itet	ge
 800a332:	2300      	movge	r3, #0
 800a334:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a338:	f8c8 3000 	strge.w	r3, [r8]
 800a33c:	4b9a      	ldr	r3, [pc, #616]	; (800a5a8 <_dtoa_r+0x2d8>)
 800a33e:	bfbc      	itt	lt
 800a340:	2201      	movlt	r2, #1
 800a342:	f8c8 2000 	strlt.w	r2, [r8]
 800a346:	ea33 030b 	bics.w	r3, r3, fp
 800a34a:	d11b      	bne.n	800a384 <_dtoa_r+0xb4>
 800a34c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a34e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a352:	6013      	str	r3, [r2, #0]
 800a354:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a358:	4333      	orrs	r3, r6
 800a35a:	f000 8592 	beq.w	800ae82 <_dtoa_r+0xbb2>
 800a35e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a360:	b963      	cbnz	r3, 800a37c <_dtoa_r+0xac>
 800a362:	4b92      	ldr	r3, [pc, #584]	; (800a5ac <_dtoa_r+0x2dc>)
 800a364:	e022      	b.n	800a3ac <_dtoa_r+0xdc>
 800a366:	4b92      	ldr	r3, [pc, #584]	; (800a5b0 <_dtoa_r+0x2e0>)
 800a368:	9301      	str	r3, [sp, #4]
 800a36a:	3308      	adds	r3, #8
 800a36c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a36e:	6013      	str	r3, [r2, #0]
 800a370:	9801      	ldr	r0, [sp, #4]
 800a372:	b013      	add	sp, #76	; 0x4c
 800a374:	ecbd 8b04 	vpop	{d8-d9}
 800a378:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a37c:	4b8b      	ldr	r3, [pc, #556]	; (800a5ac <_dtoa_r+0x2dc>)
 800a37e:	9301      	str	r3, [sp, #4]
 800a380:	3303      	adds	r3, #3
 800a382:	e7f3      	b.n	800a36c <_dtoa_r+0x9c>
 800a384:	2200      	movs	r2, #0
 800a386:	2300      	movs	r3, #0
 800a388:	4650      	mov	r0, sl
 800a38a:	4659      	mov	r1, fp
 800a38c:	f7f6 fb9c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a390:	ec4b ab19 	vmov	d9, sl, fp
 800a394:	4680      	mov	r8, r0
 800a396:	b158      	cbz	r0, 800a3b0 <_dtoa_r+0xe0>
 800a398:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a39a:	2301      	movs	r3, #1
 800a39c:	6013      	str	r3, [r2, #0]
 800a39e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	f000 856b 	beq.w	800ae7c <_dtoa_r+0xbac>
 800a3a6:	4883      	ldr	r0, [pc, #524]	; (800a5b4 <_dtoa_r+0x2e4>)
 800a3a8:	6018      	str	r0, [r3, #0]
 800a3aa:	1e43      	subs	r3, r0, #1
 800a3ac:	9301      	str	r3, [sp, #4]
 800a3ae:	e7df      	b.n	800a370 <_dtoa_r+0xa0>
 800a3b0:	ec4b ab10 	vmov	d0, sl, fp
 800a3b4:	aa10      	add	r2, sp, #64	; 0x40
 800a3b6:	a911      	add	r1, sp, #68	; 0x44
 800a3b8:	4620      	mov	r0, r4
 800a3ba:	f001 fd05 	bl	800bdc8 <__d2b>
 800a3be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a3c2:	ee08 0a10 	vmov	s16, r0
 800a3c6:	2d00      	cmp	r5, #0
 800a3c8:	f000 8084 	beq.w	800a4d4 <_dtoa_r+0x204>
 800a3cc:	ee19 3a90 	vmov	r3, s19
 800a3d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a3d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a3d8:	4656      	mov	r6, sl
 800a3da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a3de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a3e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a3e6:	4b74      	ldr	r3, [pc, #464]	; (800a5b8 <_dtoa_r+0x2e8>)
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	4630      	mov	r0, r6
 800a3ec:	4639      	mov	r1, r7
 800a3ee:	f7f5 ff4b 	bl	8000288 <__aeabi_dsub>
 800a3f2:	a365      	add	r3, pc, #404	; (adr r3, 800a588 <_dtoa_r+0x2b8>)
 800a3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3f8:	f7f6 f8fe 	bl	80005f8 <__aeabi_dmul>
 800a3fc:	a364      	add	r3, pc, #400	; (adr r3, 800a590 <_dtoa_r+0x2c0>)
 800a3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a402:	f7f5 ff43 	bl	800028c <__adddf3>
 800a406:	4606      	mov	r6, r0
 800a408:	4628      	mov	r0, r5
 800a40a:	460f      	mov	r7, r1
 800a40c:	f7f6 f88a 	bl	8000524 <__aeabi_i2d>
 800a410:	a361      	add	r3, pc, #388	; (adr r3, 800a598 <_dtoa_r+0x2c8>)
 800a412:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a416:	f7f6 f8ef 	bl	80005f8 <__aeabi_dmul>
 800a41a:	4602      	mov	r2, r0
 800a41c:	460b      	mov	r3, r1
 800a41e:	4630      	mov	r0, r6
 800a420:	4639      	mov	r1, r7
 800a422:	f7f5 ff33 	bl	800028c <__adddf3>
 800a426:	4606      	mov	r6, r0
 800a428:	460f      	mov	r7, r1
 800a42a:	f7f6 fb95 	bl	8000b58 <__aeabi_d2iz>
 800a42e:	2200      	movs	r2, #0
 800a430:	9000      	str	r0, [sp, #0]
 800a432:	2300      	movs	r3, #0
 800a434:	4630      	mov	r0, r6
 800a436:	4639      	mov	r1, r7
 800a438:	f7f6 fb50 	bl	8000adc <__aeabi_dcmplt>
 800a43c:	b150      	cbz	r0, 800a454 <_dtoa_r+0x184>
 800a43e:	9800      	ldr	r0, [sp, #0]
 800a440:	f7f6 f870 	bl	8000524 <__aeabi_i2d>
 800a444:	4632      	mov	r2, r6
 800a446:	463b      	mov	r3, r7
 800a448:	f7f6 fb3e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a44c:	b910      	cbnz	r0, 800a454 <_dtoa_r+0x184>
 800a44e:	9b00      	ldr	r3, [sp, #0]
 800a450:	3b01      	subs	r3, #1
 800a452:	9300      	str	r3, [sp, #0]
 800a454:	9b00      	ldr	r3, [sp, #0]
 800a456:	2b16      	cmp	r3, #22
 800a458:	d85a      	bhi.n	800a510 <_dtoa_r+0x240>
 800a45a:	9a00      	ldr	r2, [sp, #0]
 800a45c:	4b57      	ldr	r3, [pc, #348]	; (800a5bc <_dtoa_r+0x2ec>)
 800a45e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a462:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a466:	ec51 0b19 	vmov	r0, r1, d9
 800a46a:	f7f6 fb37 	bl	8000adc <__aeabi_dcmplt>
 800a46e:	2800      	cmp	r0, #0
 800a470:	d050      	beq.n	800a514 <_dtoa_r+0x244>
 800a472:	9b00      	ldr	r3, [sp, #0]
 800a474:	3b01      	subs	r3, #1
 800a476:	9300      	str	r3, [sp, #0]
 800a478:	2300      	movs	r3, #0
 800a47a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a47c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a47e:	1b5d      	subs	r5, r3, r5
 800a480:	1e6b      	subs	r3, r5, #1
 800a482:	9305      	str	r3, [sp, #20]
 800a484:	bf45      	ittet	mi
 800a486:	f1c5 0301 	rsbmi	r3, r5, #1
 800a48a:	9304      	strmi	r3, [sp, #16]
 800a48c:	2300      	movpl	r3, #0
 800a48e:	2300      	movmi	r3, #0
 800a490:	bf4c      	ite	mi
 800a492:	9305      	strmi	r3, [sp, #20]
 800a494:	9304      	strpl	r3, [sp, #16]
 800a496:	9b00      	ldr	r3, [sp, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	db3d      	blt.n	800a518 <_dtoa_r+0x248>
 800a49c:	9b05      	ldr	r3, [sp, #20]
 800a49e:	9a00      	ldr	r2, [sp, #0]
 800a4a0:	920a      	str	r2, [sp, #40]	; 0x28
 800a4a2:	4413      	add	r3, r2
 800a4a4:	9305      	str	r3, [sp, #20]
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	9307      	str	r3, [sp, #28]
 800a4aa:	9b06      	ldr	r3, [sp, #24]
 800a4ac:	2b09      	cmp	r3, #9
 800a4ae:	f200 8089 	bhi.w	800a5c4 <_dtoa_r+0x2f4>
 800a4b2:	2b05      	cmp	r3, #5
 800a4b4:	bfc4      	itt	gt
 800a4b6:	3b04      	subgt	r3, #4
 800a4b8:	9306      	strgt	r3, [sp, #24]
 800a4ba:	9b06      	ldr	r3, [sp, #24]
 800a4bc:	f1a3 0302 	sub.w	r3, r3, #2
 800a4c0:	bfcc      	ite	gt
 800a4c2:	2500      	movgt	r5, #0
 800a4c4:	2501      	movle	r5, #1
 800a4c6:	2b03      	cmp	r3, #3
 800a4c8:	f200 8087 	bhi.w	800a5da <_dtoa_r+0x30a>
 800a4cc:	e8df f003 	tbb	[pc, r3]
 800a4d0:	59383a2d 	.word	0x59383a2d
 800a4d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a4d8:	441d      	add	r5, r3
 800a4da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a4de:	2b20      	cmp	r3, #32
 800a4e0:	bfc1      	itttt	gt
 800a4e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a4e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a4ea:	fa0b f303 	lslgt.w	r3, fp, r3
 800a4ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a4f2:	bfda      	itte	le
 800a4f4:	f1c3 0320 	rsble	r3, r3, #32
 800a4f8:	fa06 f003 	lslle.w	r0, r6, r3
 800a4fc:	4318      	orrgt	r0, r3
 800a4fe:	f7f6 f801 	bl	8000504 <__aeabi_ui2d>
 800a502:	2301      	movs	r3, #1
 800a504:	4606      	mov	r6, r0
 800a506:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a50a:	3d01      	subs	r5, #1
 800a50c:	930e      	str	r3, [sp, #56]	; 0x38
 800a50e:	e76a      	b.n	800a3e6 <_dtoa_r+0x116>
 800a510:	2301      	movs	r3, #1
 800a512:	e7b2      	b.n	800a47a <_dtoa_r+0x1aa>
 800a514:	900b      	str	r0, [sp, #44]	; 0x2c
 800a516:	e7b1      	b.n	800a47c <_dtoa_r+0x1ac>
 800a518:	9b04      	ldr	r3, [sp, #16]
 800a51a:	9a00      	ldr	r2, [sp, #0]
 800a51c:	1a9b      	subs	r3, r3, r2
 800a51e:	9304      	str	r3, [sp, #16]
 800a520:	4253      	negs	r3, r2
 800a522:	9307      	str	r3, [sp, #28]
 800a524:	2300      	movs	r3, #0
 800a526:	930a      	str	r3, [sp, #40]	; 0x28
 800a528:	e7bf      	b.n	800a4aa <_dtoa_r+0x1da>
 800a52a:	2300      	movs	r3, #0
 800a52c:	9308      	str	r3, [sp, #32]
 800a52e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a530:	2b00      	cmp	r3, #0
 800a532:	dc55      	bgt.n	800a5e0 <_dtoa_r+0x310>
 800a534:	2301      	movs	r3, #1
 800a536:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a53a:	461a      	mov	r2, r3
 800a53c:	9209      	str	r2, [sp, #36]	; 0x24
 800a53e:	e00c      	b.n	800a55a <_dtoa_r+0x28a>
 800a540:	2301      	movs	r3, #1
 800a542:	e7f3      	b.n	800a52c <_dtoa_r+0x25c>
 800a544:	2300      	movs	r3, #0
 800a546:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a548:	9308      	str	r3, [sp, #32]
 800a54a:	9b00      	ldr	r3, [sp, #0]
 800a54c:	4413      	add	r3, r2
 800a54e:	9302      	str	r3, [sp, #8]
 800a550:	3301      	adds	r3, #1
 800a552:	2b01      	cmp	r3, #1
 800a554:	9303      	str	r3, [sp, #12]
 800a556:	bfb8      	it	lt
 800a558:	2301      	movlt	r3, #1
 800a55a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a55c:	2200      	movs	r2, #0
 800a55e:	6042      	str	r2, [r0, #4]
 800a560:	2204      	movs	r2, #4
 800a562:	f102 0614 	add.w	r6, r2, #20
 800a566:	429e      	cmp	r6, r3
 800a568:	6841      	ldr	r1, [r0, #4]
 800a56a:	d93d      	bls.n	800a5e8 <_dtoa_r+0x318>
 800a56c:	4620      	mov	r0, r4
 800a56e:	f001 f83d 	bl	800b5ec <_Balloc>
 800a572:	9001      	str	r0, [sp, #4]
 800a574:	2800      	cmp	r0, #0
 800a576:	d13b      	bne.n	800a5f0 <_dtoa_r+0x320>
 800a578:	4b11      	ldr	r3, [pc, #68]	; (800a5c0 <_dtoa_r+0x2f0>)
 800a57a:	4602      	mov	r2, r0
 800a57c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a580:	e6c0      	b.n	800a304 <_dtoa_r+0x34>
 800a582:	2301      	movs	r3, #1
 800a584:	e7df      	b.n	800a546 <_dtoa_r+0x276>
 800a586:	bf00      	nop
 800a588:	636f4361 	.word	0x636f4361
 800a58c:	3fd287a7 	.word	0x3fd287a7
 800a590:	8b60c8b3 	.word	0x8b60c8b3
 800a594:	3fc68a28 	.word	0x3fc68a28
 800a598:	509f79fb 	.word	0x509f79fb
 800a59c:	3fd34413 	.word	0x3fd34413
 800a5a0:	0800cff6 	.word	0x0800cff6
 800a5a4:	0800d00d 	.word	0x0800d00d
 800a5a8:	7ff00000 	.word	0x7ff00000
 800a5ac:	0800cff2 	.word	0x0800cff2
 800a5b0:	0800cfe9 	.word	0x0800cfe9
 800a5b4:	0800ce6d 	.word	0x0800ce6d
 800a5b8:	3ff80000 	.word	0x3ff80000
 800a5bc:	0800d178 	.word	0x0800d178
 800a5c0:	0800d068 	.word	0x0800d068
 800a5c4:	2501      	movs	r5, #1
 800a5c6:	2300      	movs	r3, #0
 800a5c8:	9306      	str	r3, [sp, #24]
 800a5ca:	9508      	str	r5, [sp, #32]
 800a5cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a5d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a5d4:	2200      	movs	r2, #0
 800a5d6:	2312      	movs	r3, #18
 800a5d8:	e7b0      	b.n	800a53c <_dtoa_r+0x26c>
 800a5da:	2301      	movs	r3, #1
 800a5dc:	9308      	str	r3, [sp, #32]
 800a5de:	e7f5      	b.n	800a5cc <_dtoa_r+0x2fc>
 800a5e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a5e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a5e6:	e7b8      	b.n	800a55a <_dtoa_r+0x28a>
 800a5e8:	3101      	adds	r1, #1
 800a5ea:	6041      	str	r1, [r0, #4]
 800a5ec:	0052      	lsls	r2, r2, #1
 800a5ee:	e7b8      	b.n	800a562 <_dtoa_r+0x292>
 800a5f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a5f2:	9a01      	ldr	r2, [sp, #4]
 800a5f4:	601a      	str	r2, [r3, #0]
 800a5f6:	9b03      	ldr	r3, [sp, #12]
 800a5f8:	2b0e      	cmp	r3, #14
 800a5fa:	f200 809d 	bhi.w	800a738 <_dtoa_r+0x468>
 800a5fe:	2d00      	cmp	r5, #0
 800a600:	f000 809a 	beq.w	800a738 <_dtoa_r+0x468>
 800a604:	9b00      	ldr	r3, [sp, #0]
 800a606:	2b00      	cmp	r3, #0
 800a608:	dd32      	ble.n	800a670 <_dtoa_r+0x3a0>
 800a60a:	4ab7      	ldr	r2, [pc, #732]	; (800a8e8 <_dtoa_r+0x618>)
 800a60c:	f003 030f 	and.w	r3, r3, #15
 800a610:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800a614:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a618:	9b00      	ldr	r3, [sp, #0]
 800a61a:	05d8      	lsls	r0, r3, #23
 800a61c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800a620:	d516      	bpl.n	800a650 <_dtoa_r+0x380>
 800a622:	4bb2      	ldr	r3, [pc, #712]	; (800a8ec <_dtoa_r+0x61c>)
 800a624:	ec51 0b19 	vmov	r0, r1, d9
 800a628:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a62c:	f7f6 f90e 	bl	800084c <__aeabi_ddiv>
 800a630:	f007 070f 	and.w	r7, r7, #15
 800a634:	4682      	mov	sl, r0
 800a636:	468b      	mov	fp, r1
 800a638:	2503      	movs	r5, #3
 800a63a:	4eac      	ldr	r6, [pc, #688]	; (800a8ec <_dtoa_r+0x61c>)
 800a63c:	b957      	cbnz	r7, 800a654 <_dtoa_r+0x384>
 800a63e:	4642      	mov	r2, r8
 800a640:	464b      	mov	r3, r9
 800a642:	4650      	mov	r0, sl
 800a644:	4659      	mov	r1, fp
 800a646:	f7f6 f901 	bl	800084c <__aeabi_ddiv>
 800a64a:	4682      	mov	sl, r0
 800a64c:	468b      	mov	fp, r1
 800a64e:	e028      	b.n	800a6a2 <_dtoa_r+0x3d2>
 800a650:	2502      	movs	r5, #2
 800a652:	e7f2      	b.n	800a63a <_dtoa_r+0x36a>
 800a654:	07f9      	lsls	r1, r7, #31
 800a656:	d508      	bpl.n	800a66a <_dtoa_r+0x39a>
 800a658:	4640      	mov	r0, r8
 800a65a:	4649      	mov	r1, r9
 800a65c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a660:	f7f5 ffca 	bl	80005f8 <__aeabi_dmul>
 800a664:	3501      	adds	r5, #1
 800a666:	4680      	mov	r8, r0
 800a668:	4689      	mov	r9, r1
 800a66a:	107f      	asrs	r7, r7, #1
 800a66c:	3608      	adds	r6, #8
 800a66e:	e7e5      	b.n	800a63c <_dtoa_r+0x36c>
 800a670:	f000 809b 	beq.w	800a7aa <_dtoa_r+0x4da>
 800a674:	9b00      	ldr	r3, [sp, #0]
 800a676:	4f9d      	ldr	r7, [pc, #628]	; (800a8ec <_dtoa_r+0x61c>)
 800a678:	425e      	negs	r6, r3
 800a67a:	4b9b      	ldr	r3, [pc, #620]	; (800a8e8 <_dtoa_r+0x618>)
 800a67c:	f006 020f 	and.w	r2, r6, #15
 800a680:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a684:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a688:	ec51 0b19 	vmov	r0, r1, d9
 800a68c:	f7f5 ffb4 	bl	80005f8 <__aeabi_dmul>
 800a690:	1136      	asrs	r6, r6, #4
 800a692:	4682      	mov	sl, r0
 800a694:	468b      	mov	fp, r1
 800a696:	2300      	movs	r3, #0
 800a698:	2502      	movs	r5, #2
 800a69a:	2e00      	cmp	r6, #0
 800a69c:	d17a      	bne.n	800a794 <_dtoa_r+0x4c4>
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d1d3      	bne.n	800a64a <_dtoa_r+0x37a>
 800a6a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	f000 8082 	beq.w	800a7ae <_dtoa_r+0x4de>
 800a6aa:	4b91      	ldr	r3, [pc, #580]	; (800a8f0 <_dtoa_r+0x620>)
 800a6ac:	2200      	movs	r2, #0
 800a6ae:	4650      	mov	r0, sl
 800a6b0:	4659      	mov	r1, fp
 800a6b2:	f7f6 fa13 	bl	8000adc <__aeabi_dcmplt>
 800a6b6:	2800      	cmp	r0, #0
 800a6b8:	d079      	beq.n	800a7ae <_dtoa_r+0x4de>
 800a6ba:	9b03      	ldr	r3, [sp, #12]
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d076      	beq.n	800a7ae <_dtoa_r+0x4de>
 800a6c0:	9b02      	ldr	r3, [sp, #8]
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	dd36      	ble.n	800a734 <_dtoa_r+0x464>
 800a6c6:	9b00      	ldr	r3, [sp, #0]
 800a6c8:	4650      	mov	r0, sl
 800a6ca:	4659      	mov	r1, fp
 800a6cc:	1e5f      	subs	r7, r3, #1
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	4b88      	ldr	r3, [pc, #544]	; (800a8f4 <_dtoa_r+0x624>)
 800a6d2:	f7f5 ff91 	bl	80005f8 <__aeabi_dmul>
 800a6d6:	9e02      	ldr	r6, [sp, #8]
 800a6d8:	4682      	mov	sl, r0
 800a6da:	468b      	mov	fp, r1
 800a6dc:	3501      	adds	r5, #1
 800a6de:	4628      	mov	r0, r5
 800a6e0:	f7f5 ff20 	bl	8000524 <__aeabi_i2d>
 800a6e4:	4652      	mov	r2, sl
 800a6e6:	465b      	mov	r3, fp
 800a6e8:	f7f5 ff86 	bl	80005f8 <__aeabi_dmul>
 800a6ec:	4b82      	ldr	r3, [pc, #520]	; (800a8f8 <_dtoa_r+0x628>)
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	f7f5 fdcc 	bl	800028c <__adddf3>
 800a6f4:	46d0      	mov	r8, sl
 800a6f6:	46d9      	mov	r9, fp
 800a6f8:	4682      	mov	sl, r0
 800a6fa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800a6fe:	2e00      	cmp	r6, #0
 800a700:	d158      	bne.n	800a7b4 <_dtoa_r+0x4e4>
 800a702:	4b7e      	ldr	r3, [pc, #504]	; (800a8fc <_dtoa_r+0x62c>)
 800a704:	2200      	movs	r2, #0
 800a706:	4640      	mov	r0, r8
 800a708:	4649      	mov	r1, r9
 800a70a:	f7f5 fdbd 	bl	8000288 <__aeabi_dsub>
 800a70e:	4652      	mov	r2, sl
 800a710:	465b      	mov	r3, fp
 800a712:	4680      	mov	r8, r0
 800a714:	4689      	mov	r9, r1
 800a716:	f7f6 f9ff 	bl	8000b18 <__aeabi_dcmpgt>
 800a71a:	2800      	cmp	r0, #0
 800a71c:	f040 8295 	bne.w	800ac4a <_dtoa_r+0x97a>
 800a720:	4652      	mov	r2, sl
 800a722:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a726:	4640      	mov	r0, r8
 800a728:	4649      	mov	r1, r9
 800a72a:	f7f6 f9d7 	bl	8000adc <__aeabi_dcmplt>
 800a72e:	2800      	cmp	r0, #0
 800a730:	f040 8289 	bne.w	800ac46 <_dtoa_r+0x976>
 800a734:	ec5b ab19 	vmov	sl, fp, d9
 800a738:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	f2c0 8148 	blt.w	800a9d0 <_dtoa_r+0x700>
 800a740:	9a00      	ldr	r2, [sp, #0]
 800a742:	2a0e      	cmp	r2, #14
 800a744:	f300 8144 	bgt.w	800a9d0 <_dtoa_r+0x700>
 800a748:	4b67      	ldr	r3, [pc, #412]	; (800a8e8 <_dtoa_r+0x618>)
 800a74a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a74e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a752:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a754:	2b00      	cmp	r3, #0
 800a756:	f280 80d5 	bge.w	800a904 <_dtoa_r+0x634>
 800a75a:	9b03      	ldr	r3, [sp, #12]
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	f300 80d1 	bgt.w	800a904 <_dtoa_r+0x634>
 800a762:	f040 826f 	bne.w	800ac44 <_dtoa_r+0x974>
 800a766:	4b65      	ldr	r3, [pc, #404]	; (800a8fc <_dtoa_r+0x62c>)
 800a768:	2200      	movs	r2, #0
 800a76a:	4640      	mov	r0, r8
 800a76c:	4649      	mov	r1, r9
 800a76e:	f7f5 ff43 	bl	80005f8 <__aeabi_dmul>
 800a772:	4652      	mov	r2, sl
 800a774:	465b      	mov	r3, fp
 800a776:	f7f6 f9c5 	bl	8000b04 <__aeabi_dcmpge>
 800a77a:	9e03      	ldr	r6, [sp, #12]
 800a77c:	4637      	mov	r7, r6
 800a77e:	2800      	cmp	r0, #0
 800a780:	f040 8245 	bne.w	800ac0e <_dtoa_r+0x93e>
 800a784:	9d01      	ldr	r5, [sp, #4]
 800a786:	2331      	movs	r3, #49	; 0x31
 800a788:	f805 3b01 	strb.w	r3, [r5], #1
 800a78c:	9b00      	ldr	r3, [sp, #0]
 800a78e:	3301      	adds	r3, #1
 800a790:	9300      	str	r3, [sp, #0]
 800a792:	e240      	b.n	800ac16 <_dtoa_r+0x946>
 800a794:	07f2      	lsls	r2, r6, #31
 800a796:	d505      	bpl.n	800a7a4 <_dtoa_r+0x4d4>
 800a798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a79c:	f7f5 ff2c 	bl	80005f8 <__aeabi_dmul>
 800a7a0:	3501      	adds	r5, #1
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	1076      	asrs	r6, r6, #1
 800a7a6:	3708      	adds	r7, #8
 800a7a8:	e777      	b.n	800a69a <_dtoa_r+0x3ca>
 800a7aa:	2502      	movs	r5, #2
 800a7ac:	e779      	b.n	800a6a2 <_dtoa_r+0x3d2>
 800a7ae:	9f00      	ldr	r7, [sp, #0]
 800a7b0:	9e03      	ldr	r6, [sp, #12]
 800a7b2:	e794      	b.n	800a6de <_dtoa_r+0x40e>
 800a7b4:	9901      	ldr	r1, [sp, #4]
 800a7b6:	4b4c      	ldr	r3, [pc, #304]	; (800a8e8 <_dtoa_r+0x618>)
 800a7b8:	4431      	add	r1, r6
 800a7ba:	910d      	str	r1, [sp, #52]	; 0x34
 800a7bc:	9908      	ldr	r1, [sp, #32]
 800a7be:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a7c2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a7c6:	2900      	cmp	r1, #0
 800a7c8:	d043      	beq.n	800a852 <_dtoa_r+0x582>
 800a7ca:	494d      	ldr	r1, [pc, #308]	; (800a900 <_dtoa_r+0x630>)
 800a7cc:	2000      	movs	r0, #0
 800a7ce:	f7f6 f83d 	bl	800084c <__aeabi_ddiv>
 800a7d2:	4652      	mov	r2, sl
 800a7d4:	465b      	mov	r3, fp
 800a7d6:	f7f5 fd57 	bl	8000288 <__aeabi_dsub>
 800a7da:	9d01      	ldr	r5, [sp, #4]
 800a7dc:	4682      	mov	sl, r0
 800a7de:	468b      	mov	fp, r1
 800a7e0:	4649      	mov	r1, r9
 800a7e2:	4640      	mov	r0, r8
 800a7e4:	f7f6 f9b8 	bl	8000b58 <__aeabi_d2iz>
 800a7e8:	4606      	mov	r6, r0
 800a7ea:	f7f5 fe9b 	bl	8000524 <__aeabi_i2d>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	460b      	mov	r3, r1
 800a7f2:	4640      	mov	r0, r8
 800a7f4:	4649      	mov	r1, r9
 800a7f6:	f7f5 fd47 	bl	8000288 <__aeabi_dsub>
 800a7fa:	3630      	adds	r6, #48	; 0x30
 800a7fc:	f805 6b01 	strb.w	r6, [r5], #1
 800a800:	4652      	mov	r2, sl
 800a802:	465b      	mov	r3, fp
 800a804:	4680      	mov	r8, r0
 800a806:	4689      	mov	r9, r1
 800a808:	f7f6 f968 	bl	8000adc <__aeabi_dcmplt>
 800a80c:	2800      	cmp	r0, #0
 800a80e:	d163      	bne.n	800a8d8 <_dtoa_r+0x608>
 800a810:	4642      	mov	r2, r8
 800a812:	464b      	mov	r3, r9
 800a814:	4936      	ldr	r1, [pc, #216]	; (800a8f0 <_dtoa_r+0x620>)
 800a816:	2000      	movs	r0, #0
 800a818:	f7f5 fd36 	bl	8000288 <__aeabi_dsub>
 800a81c:	4652      	mov	r2, sl
 800a81e:	465b      	mov	r3, fp
 800a820:	f7f6 f95c 	bl	8000adc <__aeabi_dcmplt>
 800a824:	2800      	cmp	r0, #0
 800a826:	f040 80b5 	bne.w	800a994 <_dtoa_r+0x6c4>
 800a82a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a82c:	429d      	cmp	r5, r3
 800a82e:	d081      	beq.n	800a734 <_dtoa_r+0x464>
 800a830:	4b30      	ldr	r3, [pc, #192]	; (800a8f4 <_dtoa_r+0x624>)
 800a832:	2200      	movs	r2, #0
 800a834:	4650      	mov	r0, sl
 800a836:	4659      	mov	r1, fp
 800a838:	f7f5 fede 	bl	80005f8 <__aeabi_dmul>
 800a83c:	4b2d      	ldr	r3, [pc, #180]	; (800a8f4 <_dtoa_r+0x624>)
 800a83e:	4682      	mov	sl, r0
 800a840:	468b      	mov	fp, r1
 800a842:	4640      	mov	r0, r8
 800a844:	4649      	mov	r1, r9
 800a846:	2200      	movs	r2, #0
 800a848:	f7f5 fed6 	bl	80005f8 <__aeabi_dmul>
 800a84c:	4680      	mov	r8, r0
 800a84e:	4689      	mov	r9, r1
 800a850:	e7c6      	b.n	800a7e0 <_dtoa_r+0x510>
 800a852:	4650      	mov	r0, sl
 800a854:	4659      	mov	r1, fp
 800a856:	f7f5 fecf 	bl	80005f8 <__aeabi_dmul>
 800a85a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a85c:	9d01      	ldr	r5, [sp, #4]
 800a85e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a860:	4682      	mov	sl, r0
 800a862:	468b      	mov	fp, r1
 800a864:	4649      	mov	r1, r9
 800a866:	4640      	mov	r0, r8
 800a868:	f7f6 f976 	bl	8000b58 <__aeabi_d2iz>
 800a86c:	4606      	mov	r6, r0
 800a86e:	f7f5 fe59 	bl	8000524 <__aeabi_i2d>
 800a872:	3630      	adds	r6, #48	; 0x30
 800a874:	4602      	mov	r2, r0
 800a876:	460b      	mov	r3, r1
 800a878:	4640      	mov	r0, r8
 800a87a:	4649      	mov	r1, r9
 800a87c:	f7f5 fd04 	bl	8000288 <__aeabi_dsub>
 800a880:	f805 6b01 	strb.w	r6, [r5], #1
 800a884:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a886:	429d      	cmp	r5, r3
 800a888:	4680      	mov	r8, r0
 800a88a:	4689      	mov	r9, r1
 800a88c:	f04f 0200 	mov.w	r2, #0
 800a890:	d124      	bne.n	800a8dc <_dtoa_r+0x60c>
 800a892:	4b1b      	ldr	r3, [pc, #108]	; (800a900 <_dtoa_r+0x630>)
 800a894:	4650      	mov	r0, sl
 800a896:	4659      	mov	r1, fp
 800a898:	f7f5 fcf8 	bl	800028c <__adddf3>
 800a89c:	4602      	mov	r2, r0
 800a89e:	460b      	mov	r3, r1
 800a8a0:	4640      	mov	r0, r8
 800a8a2:	4649      	mov	r1, r9
 800a8a4:	f7f6 f938 	bl	8000b18 <__aeabi_dcmpgt>
 800a8a8:	2800      	cmp	r0, #0
 800a8aa:	d173      	bne.n	800a994 <_dtoa_r+0x6c4>
 800a8ac:	4652      	mov	r2, sl
 800a8ae:	465b      	mov	r3, fp
 800a8b0:	4913      	ldr	r1, [pc, #76]	; (800a900 <_dtoa_r+0x630>)
 800a8b2:	2000      	movs	r0, #0
 800a8b4:	f7f5 fce8 	bl	8000288 <__aeabi_dsub>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	4640      	mov	r0, r8
 800a8be:	4649      	mov	r1, r9
 800a8c0:	f7f6 f90c 	bl	8000adc <__aeabi_dcmplt>
 800a8c4:	2800      	cmp	r0, #0
 800a8c6:	f43f af35 	beq.w	800a734 <_dtoa_r+0x464>
 800a8ca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a8cc:	1e6b      	subs	r3, r5, #1
 800a8ce:	930f      	str	r3, [sp, #60]	; 0x3c
 800a8d0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a8d4:	2b30      	cmp	r3, #48	; 0x30
 800a8d6:	d0f8      	beq.n	800a8ca <_dtoa_r+0x5fa>
 800a8d8:	9700      	str	r7, [sp, #0]
 800a8da:	e049      	b.n	800a970 <_dtoa_r+0x6a0>
 800a8dc:	4b05      	ldr	r3, [pc, #20]	; (800a8f4 <_dtoa_r+0x624>)
 800a8de:	f7f5 fe8b 	bl	80005f8 <__aeabi_dmul>
 800a8e2:	4680      	mov	r8, r0
 800a8e4:	4689      	mov	r9, r1
 800a8e6:	e7bd      	b.n	800a864 <_dtoa_r+0x594>
 800a8e8:	0800d178 	.word	0x0800d178
 800a8ec:	0800d150 	.word	0x0800d150
 800a8f0:	3ff00000 	.word	0x3ff00000
 800a8f4:	40240000 	.word	0x40240000
 800a8f8:	401c0000 	.word	0x401c0000
 800a8fc:	40140000 	.word	0x40140000
 800a900:	3fe00000 	.word	0x3fe00000
 800a904:	9d01      	ldr	r5, [sp, #4]
 800a906:	4656      	mov	r6, sl
 800a908:	465f      	mov	r7, fp
 800a90a:	4642      	mov	r2, r8
 800a90c:	464b      	mov	r3, r9
 800a90e:	4630      	mov	r0, r6
 800a910:	4639      	mov	r1, r7
 800a912:	f7f5 ff9b 	bl	800084c <__aeabi_ddiv>
 800a916:	f7f6 f91f 	bl	8000b58 <__aeabi_d2iz>
 800a91a:	4682      	mov	sl, r0
 800a91c:	f7f5 fe02 	bl	8000524 <__aeabi_i2d>
 800a920:	4642      	mov	r2, r8
 800a922:	464b      	mov	r3, r9
 800a924:	f7f5 fe68 	bl	80005f8 <__aeabi_dmul>
 800a928:	4602      	mov	r2, r0
 800a92a:	460b      	mov	r3, r1
 800a92c:	4630      	mov	r0, r6
 800a92e:	4639      	mov	r1, r7
 800a930:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800a934:	f7f5 fca8 	bl	8000288 <__aeabi_dsub>
 800a938:	f805 6b01 	strb.w	r6, [r5], #1
 800a93c:	9e01      	ldr	r6, [sp, #4]
 800a93e:	9f03      	ldr	r7, [sp, #12]
 800a940:	1bae      	subs	r6, r5, r6
 800a942:	42b7      	cmp	r7, r6
 800a944:	4602      	mov	r2, r0
 800a946:	460b      	mov	r3, r1
 800a948:	d135      	bne.n	800a9b6 <_dtoa_r+0x6e6>
 800a94a:	f7f5 fc9f 	bl	800028c <__adddf3>
 800a94e:	4642      	mov	r2, r8
 800a950:	464b      	mov	r3, r9
 800a952:	4606      	mov	r6, r0
 800a954:	460f      	mov	r7, r1
 800a956:	f7f6 f8df 	bl	8000b18 <__aeabi_dcmpgt>
 800a95a:	b9d0      	cbnz	r0, 800a992 <_dtoa_r+0x6c2>
 800a95c:	4642      	mov	r2, r8
 800a95e:	464b      	mov	r3, r9
 800a960:	4630      	mov	r0, r6
 800a962:	4639      	mov	r1, r7
 800a964:	f7f6 f8b0 	bl	8000ac8 <__aeabi_dcmpeq>
 800a968:	b110      	cbz	r0, 800a970 <_dtoa_r+0x6a0>
 800a96a:	f01a 0f01 	tst.w	sl, #1
 800a96e:	d110      	bne.n	800a992 <_dtoa_r+0x6c2>
 800a970:	4620      	mov	r0, r4
 800a972:	ee18 1a10 	vmov	r1, s16
 800a976:	f000 fe79 	bl	800b66c <_Bfree>
 800a97a:	2300      	movs	r3, #0
 800a97c:	9800      	ldr	r0, [sp, #0]
 800a97e:	702b      	strb	r3, [r5, #0]
 800a980:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a982:	3001      	adds	r0, #1
 800a984:	6018      	str	r0, [r3, #0]
 800a986:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a988:	2b00      	cmp	r3, #0
 800a98a:	f43f acf1 	beq.w	800a370 <_dtoa_r+0xa0>
 800a98e:	601d      	str	r5, [r3, #0]
 800a990:	e4ee      	b.n	800a370 <_dtoa_r+0xa0>
 800a992:	9f00      	ldr	r7, [sp, #0]
 800a994:	462b      	mov	r3, r5
 800a996:	461d      	mov	r5, r3
 800a998:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a99c:	2a39      	cmp	r2, #57	; 0x39
 800a99e:	d106      	bne.n	800a9ae <_dtoa_r+0x6de>
 800a9a0:	9a01      	ldr	r2, [sp, #4]
 800a9a2:	429a      	cmp	r2, r3
 800a9a4:	d1f7      	bne.n	800a996 <_dtoa_r+0x6c6>
 800a9a6:	9901      	ldr	r1, [sp, #4]
 800a9a8:	2230      	movs	r2, #48	; 0x30
 800a9aa:	3701      	adds	r7, #1
 800a9ac:	700a      	strb	r2, [r1, #0]
 800a9ae:	781a      	ldrb	r2, [r3, #0]
 800a9b0:	3201      	adds	r2, #1
 800a9b2:	701a      	strb	r2, [r3, #0]
 800a9b4:	e790      	b.n	800a8d8 <_dtoa_r+0x608>
 800a9b6:	4ba6      	ldr	r3, [pc, #664]	; (800ac50 <_dtoa_r+0x980>)
 800a9b8:	2200      	movs	r2, #0
 800a9ba:	f7f5 fe1d 	bl	80005f8 <__aeabi_dmul>
 800a9be:	2200      	movs	r2, #0
 800a9c0:	2300      	movs	r3, #0
 800a9c2:	4606      	mov	r6, r0
 800a9c4:	460f      	mov	r7, r1
 800a9c6:	f7f6 f87f 	bl	8000ac8 <__aeabi_dcmpeq>
 800a9ca:	2800      	cmp	r0, #0
 800a9cc:	d09d      	beq.n	800a90a <_dtoa_r+0x63a>
 800a9ce:	e7cf      	b.n	800a970 <_dtoa_r+0x6a0>
 800a9d0:	9a08      	ldr	r2, [sp, #32]
 800a9d2:	2a00      	cmp	r2, #0
 800a9d4:	f000 80d7 	beq.w	800ab86 <_dtoa_r+0x8b6>
 800a9d8:	9a06      	ldr	r2, [sp, #24]
 800a9da:	2a01      	cmp	r2, #1
 800a9dc:	f300 80ba 	bgt.w	800ab54 <_dtoa_r+0x884>
 800a9e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a9e2:	2a00      	cmp	r2, #0
 800a9e4:	f000 80b2 	beq.w	800ab4c <_dtoa_r+0x87c>
 800a9e8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a9ec:	9e07      	ldr	r6, [sp, #28]
 800a9ee:	9d04      	ldr	r5, [sp, #16]
 800a9f0:	9a04      	ldr	r2, [sp, #16]
 800a9f2:	441a      	add	r2, r3
 800a9f4:	9204      	str	r2, [sp, #16]
 800a9f6:	9a05      	ldr	r2, [sp, #20]
 800a9f8:	2101      	movs	r1, #1
 800a9fa:	441a      	add	r2, r3
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	9205      	str	r2, [sp, #20]
 800aa00:	f000 ff36 	bl	800b870 <__i2b>
 800aa04:	4607      	mov	r7, r0
 800aa06:	2d00      	cmp	r5, #0
 800aa08:	dd0c      	ble.n	800aa24 <_dtoa_r+0x754>
 800aa0a:	9b05      	ldr	r3, [sp, #20]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	dd09      	ble.n	800aa24 <_dtoa_r+0x754>
 800aa10:	42ab      	cmp	r3, r5
 800aa12:	9a04      	ldr	r2, [sp, #16]
 800aa14:	bfa8      	it	ge
 800aa16:	462b      	movge	r3, r5
 800aa18:	1ad2      	subs	r2, r2, r3
 800aa1a:	9204      	str	r2, [sp, #16]
 800aa1c:	9a05      	ldr	r2, [sp, #20]
 800aa1e:	1aed      	subs	r5, r5, r3
 800aa20:	1ad3      	subs	r3, r2, r3
 800aa22:	9305      	str	r3, [sp, #20]
 800aa24:	9b07      	ldr	r3, [sp, #28]
 800aa26:	b31b      	cbz	r3, 800aa70 <_dtoa_r+0x7a0>
 800aa28:	9b08      	ldr	r3, [sp, #32]
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	f000 80af 	beq.w	800ab8e <_dtoa_r+0x8be>
 800aa30:	2e00      	cmp	r6, #0
 800aa32:	dd13      	ble.n	800aa5c <_dtoa_r+0x78c>
 800aa34:	4639      	mov	r1, r7
 800aa36:	4632      	mov	r2, r6
 800aa38:	4620      	mov	r0, r4
 800aa3a:	f000 ffd9 	bl	800b9f0 <__pow5mult>
 800aa3e:	ee18 2a10 	vmov	r2, s16
 800aa42:	4601      	mov	r1, r0
 800aa44:	4607      	mov	r7, r0
 800aa46:	4620      	mov	r0, r4
 800aa48:	f000 ff28 	bl	800b89c <__multiply>
 800aa4c:	ee18 1a10 	vmov	r1, s16
 800aa50:	4680      	mov	r8, r0
 800aa52:	4620      	mov	r0, r4
 800aa54:	f000 fe0a 	bl	800b66c <_Bfree>
 800aa58:	ee08 8a10 	vmov	s16, r8
 800aa5c:	9b07      	ldr	r3, [sp, #28]
 800aa5e:	1b9a      	subs	r2, r3, r6
 800aa60:	d006      	beq.n	800aa70 <_dtoa_r+0x7a0>
 800aa62:	ee18 1a10 	vmov	r1, s16
 800aa66:	4620      	mov	r0, r4
 800aa68:	f000 ffc2 	bl	800b9f0 <__pow5mult>
 800aa6c:	ee08 0a10 	vmov	s16, r0
 800aa70:	2101      	movs	r1, #1
 800aa72:	4620      	mov	r0, r4
 800aa74:	f000 fefc 	bl	800b870 <__i2b>
 800aa78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	4606      	mov	r6, r0
 800aa7e:	f340 8088 	ble.w	800ab92 <_dtoa_r+0x8c2>
 800aa82:	461a      	mov	r2, r3
 800aa84:	4601      	mov	r1, r0
 800aa86:	4620      	mov	r0, r4
 800aa88:	f000 ffb2 	bl	800b9f0 <__pow5mult>
 800aa8c:	9b06      	ldr	r3, [sp, #24]
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	4606      	mov	r6, r0
 800aa92:	f340 8081 	ble.w	800ab98 <_dtoa_r+0x8c8>
 800aa96:	f04f 0800 	mov.w	r8, #0
 800aa9a:	6933      	ldr	r3, [r6, #16]
 800aa9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aaa0:	6918      	ldr	r0, [r3, #16]
 800aaa2:	f000 fe95 	bl	800b7d0 <__hi0bits>
 800aaa6:	f1c0 0020 	rsb	r0, r0, #32
 800aaaa:	9b05      	ldr	r3, [sp, #20]
 800aaac:	4418      	add	r0, r3
 800aaae:	f010 001f 	ands.w	r0, r0, #31
 800aab2:	f000 8092 	beq.w	800abda <_dtoa_r+0x90a>
 800aab6:	f1c0 0320 	rsb	r3, r0, #32
 800aaba:	2b04      	cmp	r3, #4
 800aabc:	f340 808a 	ble.w	800abd4 <_dtoa_r+0x904>
 800aac0:	f1c0 001c 	rsb	r0, r0, #28
 800aac4:	9b04      	ldr	r3, [sp, #16]
 800aac6:	4403      	add	r3, r0
 800aac8:	9304      	str	r3, [sp, #16]
 800aaca:	9b05      	ldr	r3, [sp, #20]
 800aacc:	4403      	add	r3, r0
 800aace:	4405      	add	r5, r0
 800aad0:	9305      	str	r3, [sp, #20]
 800aad2:	9b04      	ldr	r3, [sp, #16]
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	dd07      	ble.n	800aae8 <_dtoa_r+0x818>
 800aad8:	ee18 1a10 	vmov	r1, s16
 800aadc:	461a      	mov	r2, r3
 800aade:	4620      	mov	r0, r4
 800aae0:	f000 ffe0 	bl	800baa4 <__lshift>
 800aae4:	ee08 0a10 	vmov	s16, r0
 800aae8:	9b05      	ldr	r3, [sp, #20]
 800aaea:	2b00      	cmp	r3, #0
 800aaec:	dd05      	ble.n	800aafa <_dtoa_r+0x82a>
 800aaee:	4631      	mov	r1, r6
 800aaf0:	461a      	mov	r2, r3
 800aaf2:	4620      	mov	r0, r4
 800aaf4:	f000 ffd6 	bl	800baa4 <__lshift>
 800aaf8:	4606      	mov	r6, r0
 800aafa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d06e      	beq.n	800abde <_dtoa_r+0x90e>
 800ab00:	ee18 0a10 	vmov	r0, s16
 800ab04:	4631      	mov	r1, r6
 800ab06:	f001 f83d 	bl	800bb84 <__mcmp>
 800ab0a:	2800      	cmp	r0, #0
 800ab0c:	da67      	bge.n	800abde <_dtoa_r+0x90e>
 800ab0e:	9b00      	ldr	r3, [sp, #0]
 800ab10:	3b01      	subs	r3, #1
 800ab12:	ee18 1a10 	vmov	r1, s16
 800ab16:	9300      	str	r3, [sp, #0]
 800ab18:	220a      	movs	r2, #10
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	4620      	mov	r0, r4
 800ab1e:	f000 fdc7 	bl	800b6b0 <__multadd>
 800ab22:	9b08      	ldr	r3, [sp, #32]
 800ab24:	ee08 0a10 	vmov	s16, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	f000 81b1 	beq.w	800ae90 <_dtoa_r+0xbc0>
 800ab2e:	2300      	movs	r3, #0
 800ab30:	4639      	mov	r1, r7
 800ab32:	220a      	movs	r2, #10
 800ab34:	4620      	mov	r0, r4
 800ab36:	f000 fdbb 	bl	800b6b0 <__multadd>
 800ab3a:	9b02      	ldr	r3, [sp, #8]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	4607      	mov	r7, r0
 800ab40:	f300 808e 	bgt.w	800ac60 <_dtoa_r+0x990>
 800ab44:	9b06      	ldr	r3, [sp, #24]
 800ab46:	2b02      	cmp	r3, #2
 800ab48:	dc51      	bgt.n	800abee <_dtoa_r+0x91e>
 800ab4a:	e089      	b.n	800ac60 <_dtoa_r+0x990>
 800ab4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800ab52:	e74b      	b.n	800a9ec <_dtoa_r+0x71c>
 800ab54:	9b03      	ldr	r3, [sp, #12]
 800ab56:	1e5e      	subs	r6, r3, #1
 800ab58:	9b07      	ldr	r3, [sp, #28]
 800ab5a:	42b3      	cmp	r3, r6
 800ab5c:	bfbf      	itttt	lt
 800ab5e:	9b07      	ldrlt	r3, [sp, #28]
 800ab60:	9607      	strlt	r6, [sp, #28]
 800ab62:	1af2      	sublt	r2, r6, r3
 800ab64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800ab66:	bfb6      	itet	lt
 800ab68:	189b      	addlt	r3, r3, r2
 800ab6a:	1b9e      	subge	r6, r3, r6
 800ab6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800ab6e:	9b03      	ldr	r3, [sp, #12]
 800ab70:	bfb8      	it	lt
 800ab72:	2600      	movlt	r6, #0
 800ab74:	2b00      	cmp	r3, #0
 800ab76:	bfb7      	itett	lt
 800ab78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800ab7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800ab80:	1a9d      	sublt	r5, r3, r2
 800ab82:	2300      	movlt	r3, #0
 800ab84:	e734      	b.n	800a9f0 <_dtoa_r+0x720>
 800ab86:	9e07      	ldr	r6, [sp, #28]
 800ab88:	9d04      	ldr	r5, [sp, #16]
 800ab8a:	9f08      	ldr	r7, [sp, #32]
 800ab8c:	e73b      	b.n	800aa06 <_dtoa_r+0x736>
 800ab8e:	9a07      	ldr	r2, [sp, #28]
 800ab90:	e767      	b.n	800aa62 <_dtoa_r+0x792>
 800ab92:	9b06      	ldr	r3, [sp, #24]
 800ab94:	2b01      	cmp	r3, #1
 800ab96:	dc18      	bgt.n	800abca <_dtoa_r+0x8fa>
 800ab98:	f1ba 0f00 	cmp.w	sl, #0
 800ab9c:	d115      	bne.n	800abca <_dtoa_r+0x8fa>
 800ab9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aba2:	b993      	cbnz	r3, 800abca <_dtoa_r+0x8fa>
 800aba4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aba8:	0d1b      	lsrs	r3, r3, #20
 800abaa:	051b      	lsls	r3, r3, #20
 800abac:	b183      	cbz	r3, 800abd0 <_dtoa_r+0x900>
 800abae:	9b04      	ldr	r3, [sp, #16]
 800abb0:	3301      	adds	r3, #1
 800abb2:	9304      	str	r3, [sp, #16]
 800abb4:	9b05      	ldr	r3, [sp, #20]
 800abb6:	3301      	adds	r3, #1
 800abb8:	9305      	str	r3, [sp, #20]
 800abba:	f04f 0801 	mov.w	r8, #1
 800abbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f47f af6a 	bne.w	800aa9a <_dtoa_r+0x7ca>
 800abc6:	2001      	movs	r0, #1
 800abc8:	e76f      	b.n	800aaaa <_dtoa_r+0x7da>
 800abca:	f04f 0800 	mov.w	r8, #0
 800abce:	e7f6      	b.n	800abbe <_dtoa_r+0x8ee>
 800abd0:	4698      	mov	r8, r3
 800abd2:	e7f4      	b.n	800abbe <_dtoa_r+0x8ee>
 800abd4:	f43f af7d 	beq.w	800aad2 <_dtoa_r+0x802>
 800abd8:	4618      	mov	r0, r3
 800abda:	301c      	adds	r0, #28
 800abdc:	e772      	b.n	800aac4 <_dtoa_r+0x7f4>
 800abde:	9b03      	ldr	r3, [sp, #12]
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	dc37      	bgt.n	800ac54 <_dtoa_r+0x984>
 800abe4:	9b06      	ldr	r3, [sp, #24]
 800abe6:	2b02      	cmp	r3, #2
 800abe8:	dd34      	ble.n	800ac54 <_dtoa_r+0x984>
 800abea:	9b03      	ldr	r3, [sp, #12]
 800abec:	9302      	str	r3, [sp, #8]
 800abee:	9b02      	ldr	r3, [sp, #8]
 800abf0:	b96b      	cbnz	r3, 800ac0e <_dtoa_r+0x93e>
 800abf2:	4631      	mov	r1, r6
 800abf4:	2205      	movs	r2, #5
 800abf6:	4620      	mov	r0, r4
 800abf8:	f000 fd5a 	bl	800b6b0 <__multadd>
 800abfc:	4601      	mov	r1, r0
 800abfe:	4606      	mov	r6, r0
 800ac00:	ee18 0a10 	vmov	r0, s16
 800ac04:	f000 ffbe 	bl	800bb84 <__mcmp>
 800ac08:	2800      	cmp	r0, #0
 800ac0a:	f73f adbb 	bgt.w	800a784 <_dtoa_r+0x4b4>
 800ac0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac10:	9d01      	ldr	r5, [sp, #4]
 800ac12:	43db      	mvns	r3, r3
 800ac14:	9300      	str	r3, [sp, #0]
 800ac16:	f04f 0800 	mov.w	r8, #0
 800ac1a:	4631      	mov	r1, r6
 800ac1c:	4620      	mov	r0, r4
 800ac1e:	f000 fd25 	bl	800b66c <_Bfree>
 800ac22:	2f00      	cmp	r7, #0
 800ac24:	f43f aea4 	beq.w	800a970 <_dtoa_r+0x6a0>
 800ac28:	f1b8 0f00 	cmp.w	r8, #0
 800ac2c:	d005      	beq.n	800ac3a <_dtoa_r+0x96a>
 800ac2e:	45b8      	cmp	r8, r7
 800ac30:	d003      	beq.n	800ac3a <_dtoa_r+0x96a>
 800ac32:	4641      	mov	r1, r8
 800ac34:	4620      	mov	r0, r4
 800ac36:	f000 fd19 	bl	800b66c <_Bfree>
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	f000 fd15 	bl	800b66c <_Bfree>
 800ac42:	e695      	b.n	800a970 <_dtoa_r+0x6a0>
 800ac44:	2600      	movs	r6, #0
 800ac46:	4637      	mov	r7, r6
 800ac48:	e7e1      	b.n	800ac0e <_dtoa_r+0x93e>
 800ac4a:	9700      	str	r7, [sp, #0]
 800ac4c:	4637      	mov	r7, r6
 800ac4e:	e599      	b.n	800a784 <_dtoa_r+0x4b4>
 800ac50:	40240000 	.word	0x40240000
 800ac54:	9b08      	ldr	r3, [sp, #32]
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	f000 80ca 	beq.w	800adf0 <_dtoa_r+0xb20>
 800ac5c:	9b03      	ldr	r3, [sp, #12]
 800ac5e:	9302      	str	r3, [sp, #8]
 800ac60:	2d00      	cmp	r5, #0
 800ac62:	dd05      	ble.n	800ac70 <_dtoa_r+0x9a0>
 800ac64:	4639      	mov	r1, r7
 800ac66:	462a      	mov	r2, r5
 800ac68:	4620      	mov	r0, r4
 800ac6a:	f000 ff1b 	bl	800baa4 <__lshift>
 800ac6e:	4607      	mov	r7, r0
 800ac70:	f1b8 0f00 	cmp.w	r8, #0
 800ac74:	d05b      	beq.n	800ad2e <_dtoa_r+0xa5e>
 800ac76:	6879      	ldr	r1, [r7, #4]
 800ac78:	4620      	mov	r0, r4
 800ac7a:	f000 fcb7 	bl	800b5ec <_Balloc>
 800ac7e:	4605      	mov	r5, r0
 800ac80:	b928      	cbnz	r0, 800ac8e <_dtoa_r+0x9be>
 800ac82:	4b87      	ldr	r3, [pc, #540]	; (800aea0 <_dtoa_r+0xbd0>)
 800ac84:	4602      	mov	r2, r0
 800ac86:	f240 21ea 	movw	r1, #746	; 0x2ea
 800ac8a:	f7ff bb3b 	b.w	800a304 <_dtoa_r+0x34>
 800ac8e:	693a      	ldr	r2, [r7, #16]
 800ac90:	3202      	adds	r2, #2
 800ac92:	0092      	lsls	r2, r2, #2
 800ac94:	f107 010c 	add.w	r1, r7, #12
 800ac98:	300c      	adds	r0, #12
 800ac9a:	f000 fc8d 	bl	800b5b8 <memcpy>
 800ac9e:	2201      	movs	r2, #1
 800aca0:	4629      	mov	r1, r5
 800aca2:	4620      	mov	r0, r4
 800aca4:	f000 fefe 	bl	800baa4 <__lshift>
 800aca8:	9b01      	ldr	r3, [sp, #4]
 800acaa:	f103 0901 	add.w	r9, r3, #1
 800acae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800acb2:	4413      	add	r3, r2
 800acb4:	9305      	str	r3, [sp, #20]
 800acb6:	f00a 0301 	and.w	r3, sl, #1
 800acba:	46b8      	mov	r8, r7
 800acbc:	9304      	str	r3, [sp, #16]
 800acbe:	4607      	mov	r7, r0
 800acc0:	4631      	mov	r1, r6
 800acc2:	ee18 0a10 	vmov	r0, s16
 800acc6:	f7ff fa77 	bl	800a1b8 <quorem>
 800acca:	4641      	mov	r1, r8
 800accc:	9002      	str	r0, [sp, #8]
 800acce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800acd2:	ee18 0a10 	vmov	r0, s16
 800acd6:	f000 ff55 	bl	800bb84 <__mcmp>
 800acda:	463a      	mov	r2, r7
 800acdc:	9003      	str	r0, [sp, #12]
 800acde:	4631      	mov	r1, r6
 800ace0:	4620      	mov	r0, r4
 800ace2:	f000 ff6b 	bl	800bbbc <__mdiff>
 800ace6:	68c2      	ldr	r2, [r0, #12]
 800ace8:	f109 3bff 	add.w	fp, r9, #4294967295
 800acec:	4605      	mov	r5, r0
 800acee:	bb02      	cbnz	r2, 800ad32 <_dtoa_r+0xa62>
 800acf0:	4601      	mov	r1, r0
 800acf2:	ee18 0a10 	vmov	r0, s16
 800acf6:	f000 ff45 	bl	800bb84 <__mcmp>
 800acfa:	4602      	mov	r2, r0
 800acfc:	4629      	mov	r1, r5
 800acfe:	4620      	mov	r0, r4
 800ad00:	9207      	str	r2, [sp, #28]
 800ad02:	f000 fcb3 	bl	800b66c <_Bfree>
 800ad06:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ad0a:	ea43 0102 	orr.w	r1, r3, r2
 800ad0e:	9b04      	ldr	r3, [sp, #16]
 800ad10:	430b      	orrs	r3, r1
 800ad12:	464d      	mov	r5, r9
 800ad14:	d10f      	bne.n	800ad36 <_dtoa_r+0xa66>
 800ad16:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad1a:	d02a      	beq.n	800ad72 <_dtoa_r+0xaa2>
 800ad1c:	9b03      	ldr	r3, [sp, #12]
 800ad1e:	2b00      	cmp	r3, #0
 800ad20:	dd02      	ble.n	800ad28 <_dtoa_r+0xa58>
 800ad22:	9b02      	ldr	r3, [sp, #8]
 800ad24:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ad28:	f88b a000 	strb.w	sl, [fp]
 800ad2c:	e775      	b.n	800ac1a <_dtoa_r+0x94a>
 800ad2e:	4638      	mov	r0, r7
 800ad30:	e7ba      	b.n	800aca8 <_dtoa_r+0x9d8>
 800ad32:	2201      	movs	r2, #1
 800ad34:	e7e2      	b.n	800acfc <_dtoa_r+0xa2c>
 800ad36:	9b03      	ldr	r3, [sp, #12]
 800ad38:	2b00      	cmp	r3, #0
 800ad3a:	db04      	blt.n	800ad46 <_dtoa_r+0xa76>
 800ad3c:	9906      	ldr	r1, [sp, #24]
 800ad3e:	430b      	orrs	r3, r1
 800ad40:	9904      	ldr	r1, [sp, #16]
 800ad42:	430b      	orrs	r3, r1
 800ad44:	d122      	bne.n	800ad8c <_dtoa_r+0xabc>
 800ad46:	2a00      	cmp	r2, #0
 800ad48:	ddee      	ble.n	800ad28 <_dtoa_r+0xa58>
 800ad4a:	ee18 1a10 	vmov	r1, s16
 800ad4e:	2201      	movs	r2, #1
 800ad50:	4620      	mov	r0, r4
 800ad52:	f000 fea7 	bl	800baa4 <__lshift>
 800ad56:	4631      	mov	r1, r6
 800ad58:	ee08 0a10 	vmov	s16, r0
 800ad5c:	f000 ff12 	bl	800bb84 <__mcmp>
 800ad60:	2800      	cmp	r0, #0
 800ad62:	dc03      	bgt.n	800ad6c <_dtoa_r+0xa9c>
 800ad64:	d1e0      	bne.n	800ad28 <_dtoa_r+0xa58>
 800ad66:	f01a 0f01 	tst.w	sl, #1
 800ad6a:	d0dd      	beq.n	800ad28 <_dtoa_r+0xa58>
 800ad6c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad70:	d1d7      	bne.n	800ad22 <_dtoa_r+0xa52>
 800ad72:	2339      	movs	r3, #57	; 0x39
 800ad74:	f88b 3000 	strb.w	r3, [fp]
 800ad78:	462b      	mov	r3, r5
 800ad7a:	461d      	mov	r5, r3
 800ad7c:	3b01      	subs	r3, #1
 800ad7e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ad82:	2a39      	cmp	r2, #57	; 0x39
 800ad84:	d071      	beq.n	800ae6a <_dtoa_r+0xb9a>
 800ad86:	3201      	adds	r2, #1
 800ad88:	701a      	strb	r2, [r3, #0]
 800ad8a:	e746      	b.n	800ac1a <_dtoa_r+0x94a>
 800ad8c:	2a00      	cmp	r2, #0
 800ad8e:	dd07      	ble.n	800ada0 <_dtoa_r+0xad0>
 800ad90:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ad94:	d0ed      	beq.n	800ad72 <_dtoa_r+0xaa2>
 800ad96:	f10a 0301 	add.w	r3, sl, #1
 800ad9a:	f88b 3000 	strb.w	r3, [fp]
 800ad9e:	e73c      	b.n	800ac1a <_dtoa_r+0x94a>
 800ada0:	9b05      	ldr	r3, [sp, #20]
 800ada2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ada6:	4599      	cmp	r9, r3
 800ada8:	d047      	beq.n	800ae3a <_dtoa_r+0xb6a>
 800adaa:	ee18 1a10 	vmov	r1, s16
 800adae:	2300      	movs	r3, #0
 800adb0:	220a      	movs	r2, #10
 800adb2:	4620      	mov	r0, r4
 800adb4:	f000 fc7c 	bl	800b6b0 <__multadd>
 800adb8:	45b8      	cmp	r8, r7
 800adba:	ee08 0a10 	vmov	s16, r0
 800adbe:	f04f 0300 	mov.w	r3, #0
 800adc2:	f04f 020a 	mov.w	r2, #10
 800adc6:	4641      	mov	r1, r8
 800adc8:	4620      	mov	r0, r4
 800adca:	d106      	bne.n	800adda <_dtoa_r+0xb0a>
 800adcc:	f000 fc70 	bl	800b6b0 <__multadd>
 800add0:	4680      	mov	r8, r0
 800add2:	4607      	mov	r7, r0
 800add4:	f109 0901 	add.w	r9, r9, #1
 800add8:	e772      	b.n	800acc0 <_dtoa_r+0x9f0>
 800adda:	f000 fc69 	bl	800b6b0 <__multadd>
 800adde:	4639      	mov	r1, r7
 800ade0:	4680      	mov	r8, r0
 800ade2:	2300      	movs	r3, #0
 800ade4:	220a      	movs	r2, #10
 800ade6:	4620      	mov	r0, r4
 800ade8:	f000 fc62 	bl	800b6b0 <__multadd>
 800adec:	4607      	mov	r7, r0
 800adee:	e7f1      	b.n	800add4 <_dtoa_r+0xb04>
 800adf0:	9b03      	ldr	r3, [sp, #12]
 800adf2:	9302      	str	r3, [sp, #8]
 800adf4:	9d01      	ldr	r5, [sp, #4]
 800adf6:	ee18 0a10 	vmov	r0, s16
 800adfa:	4631      	mov	r1, r6
 800adfc:	f7ff f9dc 	bl	800a1b8 <quorem>
 800ae00:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ae04:	9b01      	ldr	r3, [sp, #4]
 800ae06:	f805 ab01 	strb.w	sl, [r5], #1
 800ae0a:	1aea      	subs	r2, r5, r3
 800ae0c:	9b02      	ldr	r3, [sp, #8]
 800ae0e:	4293      	cmp	r3, r2
 800ae10:	dd09      	ble.n	800ae26 <_dtoa_r+0xb56>
 800ae12:	ee18 1a10 	vmov	r1, s16
 800ae16:	2300      	movs	r3, #0
 800ae18:	220a      	movs	r2, #10
 800ae1a:	4620      	mov	r0, r4
 800ae1c:	f000 fc48 	bl	800b6b0 <__multadd>
 800ae20:	ee08 0a10 	vmov	s16, r0
 800ae24:	e7e7      	b.n	800adf6 <_dtoa_r+0xb26>
 800ae26:	9b02      	ldr	r3, [sp, #8]
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	bfc8      	it	gt
 800ae2c:	461d      	movgt	r5, r3
 800ae2e:	9b01      	ldr	r3, [sp, #4]
 800ae30:	bfd8      	it	le
 800ae32:	2501      	movle	r5, #1
 800ae34:	441d      	add	r5, r3
 800ae36:	f04f 0800 	mov.w	r8, #0
 800ae3a:	ee18 1a10 	vmov	r1, s16
 800ae3e:	2201      	movs	r2, #1
 800ae40:	4620      	mov	r0, r4
 800ae42:	f000 fe2f 	bl	800baa4 <__lshift>
 800ae46:	4631      	mov	r1, r6
 800ae48:	ee08 0a10 	vmov	s16, r0
 800ae4c:	f000 fe9a 	bl	800bb84 <__mcmp>
 800ae50:	2800      	cmp	r0, #0
 800ae52:	dc91      	bgt.n	800ad78 <_dtoa_r+0xaa8>
 800ae54:	d102      	bne.n	800ae5c <_dtoa_r+0xb8c>
 800ae56:	f01a 0f01 	tst.w	sl, #1
 800ae5a:	d18d      	bne.n	800ad78 <_dtoa_r+0xaa8>
 800ae5c:	462b      	mov	r3, r5
 800ae5e:	461d      	mov	r5, r3
 800ae60:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae64:	2a30      	cmp	r2, #48	; 0x30
 800ae66:	d0fa      	beq.n	800ae5e <_dtoa_r+0xb8e>
 800ae68:	e6d7      	b.n	800ac1a <_dtoa_r+0x94a>
 800ae6a:	9a01      	ldr	r2, [sp, #4]
 800ae6c:	429a      	cmp	r2, r3
 800ae6e:	d184      	bne.n	800ad7a <_dtoa_r+0xaaa>
 800ae70:	9b00      	ldr	r3, [sp, #0]
 800ae72:	3301      	adds	r3, #1
 800ae74:	9300      	str	r3, [sp, #0]
 800ae76:	2331      	movs	r3, #49	; 0x31
 800ae78:	7013      	strb	r3, [r2, #0]
 800ae7a:	e6ce      	b.n	800ac1a <_dtoa_r+0x94a>
 800ae7c:	4b09      	ldr	r3, [pc, #36]	; (800aea4 <_dtoa_r+0xbd4>)
 800ae7e:	f7ff ba95 	b.w	800a3ac <_dtoa_r+0xdc>
 800ae82:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae84:	2b00      	cmp	r3, #0
 800ae86:	f47f aa6e 	bne.w	800a366 <_dtoa_r+0x96>
 800ae8a:	4b07      	ldr	r3, [pc, #28]	; (800aea8 <_dtoa_r+0xbd8>)
 800ae8c:	f7ff ba8e 	b.w	800a3ac <_dtoa_r+0xdc>
 800ae90:	9b02      	ldr	r3, [sp, #8]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	dcae      	bgt.n	800adf4 <_dtoa_r+0xb24>
 800ae96:	9b06      	ldr	r3, [sp, #24]
 800ae98:	2b02      	cmp	r3, #2
 800ae9a:	f73f aea8 	bgt.w	800abee <_dtoa_r+0x91e>
 800ae9e:	e7a9      	b.n	800adf4 <_dtoa_r+0xb24>
 800aea0:	0800d068 	.word	0x0800d068
 800aea4:	0800ce6c 	.word	0x0800ce6c
 800aea8:	0800cfe9 	.word	0x0800cfe9

0800aeac <rshift>:
 800aeac:	6903      	ldr	r3, [r0, #16]
 800aeae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800aeb2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aeb6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800aeba:	f100 0414 	add.w	r4, r0, #20
 800aebe:	dd45      	ble.n	800af4c <rshift+0xa0>
 800aec0:	f011 011f 	ands.w	r1, r1, #31
 800aec4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800aec8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800aecc:	d10c      	bne.n	800aee8 <rshift+0x3c>
 800aece:	f100 0710 	add.w	r7, r0, #16
 800aed2:	4629      	mov	r1, r5
 800aed4:	42b1      	cmp	r1, r6
 800aed6:	d334      	bcc.n	800af42 <rshift+0x96>
 800aed8:	1a9b      	subs	r3, r3, r2
 800aeda:	009b      	lsls	r3, r3, #2
 800aedc:	1eea      	subs	r2, r5, #3
 800aede:	4296      	cmp	r6, r2
 800aee0:	bf38      	it	cc
 800aee2:	2300      	movcc	r3, #0
 800aee4:	4423      	add	r3, r4
 800aee6:	e015      	b.n	800af14 <rshift+0x68>
 800aee8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800aeec:	f1c1 0820 	rsb	r8, r1, #32
 800aef0:	40cf      	lsrs	r7, r1
 800aef2:	f105 0e04 	add.w	lr, r5, #4
 800aef6:	46a1      	mov	r9, r4
 800aef8:	4576      	cmp	r6, lr
 800aefa:	46f4      	mov	ip, lr
 800aefc:	d815      	bhi.n	800af2a <rshift+0x7e>
 800aefe:	1a9a      	subs	r2, r3, r2
 800af00:	0092      	lsls	r2, r2, #2
 800af02:	3a04      	subs	r2, #4
 800af04:	3501      	adds	r5, #1
 800af06:	42ae      	cmp	r6, r5
 800af08:	bf38      	it	cc
 800af0a:	2200      	movcc	r2, #0
 800af0c:	18a3      	adds	r3, r4, r2
 800af0e:	50a7      	str	r7, [r4, r2]
 800af10:	b107      	cbz	r7, 800af14 <rshift+0x68>
 800af12:	3304      	adds	r3, #4
 800af14:	1b1a      	subs	r2, r3, r4
 800af16:	42a3      	cmp	r3, r4
 800af18:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800af1c:	bf08      	it	eq
 800af1e:	2300      	moveq	r3, #0
 800af20:	6102      	str	r2, [r0, #16]
 800af22:	bf08      	it	eq
 800af24:	6143      	streq	r3, [r0, #20]
 800af26:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800af2a:	f8dc c000 	ldr.w	ip, [ip]
 800af2e:	fa0c fc08 	lsl.w	ip, ip, r8
 800af32:	ea4c 0707 	orr.w	r7, ip, r7
 800af36:	f849 7b04 	str.w	r7, [r9], #4
 800af3a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800af3e:	40cf      	lsrs	r7, r1
 800af40:	e7da      	b.n	800aef8 <rshift+0x4c>
 800af42:	f851 cb04 	ldr.w	ip, [r1], #4
 800af46:	f847 cf04 	str.w	ip, [r7, #4]!
 800af4a:	e7c3      	b.n	800aed4 <rshift+0x28>
 800af4c:	4623      	mov	r3, r4
 800af4e:	e7e1      	b.n	800af14 <rshift+0x68>

0800af50 <__hexdig_fun>:
 800af50:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800af54:	2b09      	cmp	r3, #9
 800af56:	d802      	bhi.n	800af5e <__hexdig_fun+0xe>
 800af58:	3820      	subs	r0, #32
 800af5a:	b2c0      	uxtb	r0, r0
 800af5c:	4770      	bx	lr
 800af5e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800af62:	2b05      	cmp	r3, #5
 800af64:	d801      	bhi.n	800af6a <__hexdig_fun+0x1a>
 800af66:	3847      	subs	r0, #71	; 0x47
 800af68:	e7f7      	b.n	800af5a <__hexdig_fun+0xa>
 800af6a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800af6e:	2b05      	cmp	r3, #5
 800af70:	d801      	bhi.n	800af76 <__hexdig_fun+0x26>
 800af72:	3827      	subs	r0, #39	; 0x27
 800af74:	e7f1      	b.n	800af5a <__hexdig_fun+0xa>
 800af76:	2000      	movs	r0, #0
 800af78:	4770      	bx	lr
	...

0800af7c <__gethex>:
 800af7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af80:	ed2d 8b02 	vpush	{d8}
 800af84:	b089      	sub	sp, #36	; 0x24
 800af86:	ee08 0a10 	vmov	s16, r0
 800af8a:	9304      	str	r3, [sp, #16]
 800af8c:	4bb4      	ldr	r3, [pc, #720]	; (800b260 <__gethex+0x2e4>)
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	9301      	str	r3, [sp, #4]
 800af92:	4618      	mov	r0, r3
 800af94:	468b      	mov	fp, r1
 800af96:	4690      	mov	r8, r2
 800af98:	f7f5 f91a 	bl	80001d0 <strlen>
 800af9c:	9b01      	ldr	r3, [sp, #4]
 800af9e:	f8db 2000 	ldr.w	r2, [fp]
 800afa2:	4403      	add	r3, r0
 800afa4:	4682      	mov	sl, r0
 800afa6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800afaa:	9305      	str	r3, [sp, #20]
 800afac:	1c93      	adds	r3, r2, #2
 800afae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800afb2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800afb6:	32fe      	adds	r2, #254	; 0xfe
 800afb8:	18d1      	adds	r1, r2, r3
 800afba:	461f      	mov	r7, r3
 800afbc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800afc0:	9100      	str	r1, [sp, #0]
 800afc2:	2830      	cmp	r0, #48	; 0x30
 800afc4:	d0f8      	beq.n	800afb8 <__gethex+0x3c>
 800afc6:	f7ff ffc3 	bl	800af50 <__hexdig_fun>
 800afca:	4604      	mov	r4, r0
 800afcc:	2800      	cmp	r0, #0
 800afce:	d13a      	bne.n	800b046 <__gethex+0xca>
 800afd0:	9901      	ldr	r1, [sp, #4]
 800afd2:	4652      	mov	r2, sl
 800afd4:	4638      	mov	r0, r7
 800afd6:	f001 f943 	bl	800c260 <strncmp>
 800afda:	4605      	mov	r5, r0
 800afdc:	2800      	cmp	r0, #0
 800afde:	d168      	bne.n	800b0b2 <__gethex+0x136>
 800afe0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800afe4:	eb07 060a 	add.w	r6, r7, sl
 800afe8:	f7ff ffb2 	bl	800af50 <__hexdig_fun>
 800afec:	2800      	cmp	r0, #0
 800afee:	d062      	beq.n	800b0b6 <__gethex+0x13a>
 800aff0:	4633      	mov	r3, r6
 800aff2:	7818      	ldrb	r0, [r3, #0]
 800aff4:	2830      	cmp	r0, #48	; 0x30
 800aff6:	461f      	mov	r7, r3
 800aff8:	f103 0301 	add.w	r3, r3, #1
 800affc:	d0f9      	beq.n	800aff2 <__gethex+0x76>
 800affe:	f7ff ffa7 	bl	800af50 <__hexdig_fun>
 800b002:	2301      	movs	r3, #1
 800b004:	fab0 f480 	clz	r4, r0
 800b008:	0964      	lsrs	r4, r4, #5
 800b00a:	4635      	mov	r5, r6
 800b00c:	9300      	str	r3, [sp, #0]
 800b00e:	463a      	mov	r2, r7
 800b010:	4616      	mov	r6, r2
 800b012:	3201      	adds	r2, #1
 800b014:	7830      	ldrb	r0, [r6, #0]
 800b016:	f7ff ff9b 	bl	800af50 <__hexdig_fun>
 800b01a:	2800      	cmp	r0, #0
 800b01c:	d1f8      	bne.n	800b010 <__gethex+0x94>
 800b01e:	9901      	ldr	r1, [sp, #4]
 800b020:	4652      	mov	r2, sl
 800b022:	4630      	mov	r0, r6
 800b024:	f001 f91c 	bl	800c260 <strncmp>
 800b028:	b980      	cbnz	r0, 800b04c <__gethex+0xd0>
 800b02a:	b94d      	cbnz	r5, 800b040 <__gethex+0xc4>
 800b02c:	eb06 050a 	add.w	r5, r6, sl
 800b030:	462a      	mov	r2, r5
 800b032:	4616      	mov	r6, r2
 800b034:	3201      	adds	r2, #1
 800b036:	7830      	ldrb	r0, [r6, #0]
 800b038:	f7ff ff8a 	bl	800af50 <__hexdig_fun>
 800b03c:	2800      	cmp	r0, #0
 800b03e:	d1f8      	bne.n	800b032 <__gethex+0xb6>
 800b040:	1bad      	subs	r5, r5, r6
 800b042:	00ad      	lsls	r5, r5, #2
 800b044:	e004      	b.n	800b050 <__gethex+0xd4>
 800b046:	2400      	movs	r4, #0
 800b048:	4625      	mov	r5, r4
 800b04a:	e7e0      	b.n	800b00e <__gethex+0x92>
 800b04c:	2d00      	cmp	r5, #0
 800b04e:	d1f7      	bne.n	800b040 <__gethex+0xc4>
 800b050:	7833      	ldrb	r3, [r6, #0]
 800b052:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b056:	2b50      	cmp	r3, #80	; 0x50
 800b058:	d13b      	bne.n	800b0d2 <__gethex+0x156>
 800b05a:	7873      	ldrb	r3, [r6, #1]
 800b05c:	2b2b      	cmp	r3, #43	; 0x2b
 800b05e:	d02c      	beq.n	800b0ba <__gethex+0x13e>
 800b060:	2b2d      	cmp	r3, #45	; 0x2d
 800b062:	d02e      	beq.n	800b0c2 <__gethex+0x146>
 800b064:	1c71      	adds	r1, r6, #1
 800b066:	f04f 0900 	mov.w	r9, #0
 800b06a:	7808      	ldrb	r0, [r1, #0]
 800b06c:	f7ff ff70 	bl	800af50 <__hexdig_fun>
 800b070:	1e43      	subs	r3, r0, #1
 800b072:	b2db      	uxtb	r3, r3
 800b074:	2b18      	cmp	r3, #24
 800b076:	d82c      	bhi.n	800b0d2 <__gethex+0x156>
 800b078:	f1a0 0210 	sub.w	r2, r0, #16
 800b07c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b080:	f7ff ff66 	bl	800af50 <__hexdig_fun>
 800b084:	1e43      	subs	r3, r0, #1
 800b086:	b2db      	uxtb	r3, r3
 800b088:	2b18      	cmp	r3, #24
 800b08a:	d91d      	bls.n	800b0c8 <__gethex+0x14c>
 800b08c:	f1b9 0f00 	cmp.w	r9, #0
 800b090:	d000      	beq.n	800b094 <__gethex+0x118>
 800b092:	4252      	negs	r2, r2
 800b094:	4415      	add	r5, r2
 800b096:	f8cb 1000 	str.w	r1, [fp]
 800b09a:	b1e4      	cbz	r4, 800b0d6 <__gethex+0x15a>
 800b09c:	9b00      	ldr	r3, [sp, #0]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	bf14      	ite	ne
 800b0a2:	2700      	movne	r7, #0
 800b0a4:	2706      	moveq	r7, #6
 800b0a6:	4638      	mov	r0, r7
 800b0a8:	b009      	add	sp, #36	; 0x24
 800b0aa:	ecbd 8b02 	vpop	{d8}
 800b0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b0b2:	463e      	mov	r6, r7
 800b0b4:	4625      	mov	r5, r4
 800b0b6:	2401      	movs	r4, #1
 800b0b8:	e7ca      	b.n	800b050 <__gethex+0xd4>
 800b0ba:	f04f 0900 	mov.w	r9, #0
 800b0be:	1cb1      	adds	r1, r6, #2
 800b0c0:	e7d3      	b.n	800b06a <__gethex+0xee>
 800b0c2:	f04f 0901 	mov.w	r9, #1
 800b0c6:	e7fa      	b.n	800b0be <__gethex+0x142>
 800b0c8:	230a      	movs	r3, #10
 800b0ca:	fb03 0202 	mla	r2, r3, r2, r0
 800b0ce:	3a10      	subs	r2, #16
 800b0d0:	e7d4      	b.n	800b07c <__gethex+0x100>
 800b0d2:	4631      	mov	r1, r6
 800b0d4:	e7df      	b.n	800b096 <__gethex+0x11a>
 800b0d6:	1bf3      	subs	r3, r6, r7
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	4621      	mov	r1, r4
 800b0dc:	2b07      	cmp	r3, #7
 800b0de:	dc0b      	bgt.n	800b0f8 <__gethex+0x17c>
 800b0e0:	ee18 0a10 	vmov	r0, s16
 800b0e4:	f000 fa82 	bl	800b5ec <_Balloc>
 800b0e8:	4604      	mov	r4, r0
 800b0ea:	b940      	cbnz	r0, 800b0fe <__gethex+0x182>
 800b0ec:	4b5d      	ldr	r3, [pc, #372]	; (800b264 <__gethex+0x2e8>)
 800b0ee:	4602      	mov	r2, r0
 800b0f0:	21de      	movs	r1, #222	; 0xde
 800b0f2:	485d      	ldr	r0, [pc, #372]	; (800b268 <__gethex+0x2ec>)
 800b0f4:	f001 f8d6 	bl	800c2a4 <__assert_func>
 800b0f8:	3101      	adds	r1, #1
 800b0fa:	105b      	asrs	r3, r3, #1
 800b0fc:	e7ee      	b.n	800b0dc <__gethex+0x160>
 800b0fe:	f100 0914 	add.w	r9, r0, #20
 800b102:	f04f 0b00 	mov.w	fp, #0
 800b106:	f1ca 0301 	rsb	r3, sl, #1
 800b10a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b10e:	f8cd b000 	str.w	fp, [sp]
 800b112:	9306      	str	r3, [sp, #24]
 800b114:	42b7      	cmp	r7, r6
 800b116:	d340      	bcc.n	800b19a <__gethex+0x21e>
 800b118:	9802      	ldr	r0, [sp, #8]
 800b11a:	9b00      	ldr	r3, [sp, #0]
 800b11c:	f840 3b04 	str.w	r3, [r0], #4
 800b120:	eba0 0009 	sub.w	r0, r0, r9
 800b124:	1080      	asrs	r0, r0, #2
 800b126:	0146      	lsls	r6, r0, #5
 800b128:	6120      	str	r0, [r4, #16]
 800b12a:	4618      	mov	r0, r3
 800b12c:	f000 fb50 	bl	800b7d0 <__hi0bits>
 800b130:	1a30      	subs	r0, r6, r0
 800b132:	f8d8 6000 	ldr.w	r6, [r8]
 800b136:	42b0      	cmp	r0, r6
 800b138:	dd63      	ble.n	800b202 <__gethex+0x286>
 800b13a:	1b87      	subs	r7, r0, r6
 800b13c:	4639      	mov	r1, r7
 800b13e:	4620      	mov	r0, r4
 800b140:	f000 fef4 	bl	800bf2c <__any_on>
 800b144:	4682      	mov	sl, r0
 800b146:	b1a8      	cbz	r0, 800b174 <__gethex+0x1f8>
 800b148:	1e7b      	subs	r3, r7, #1
 800b14a:	1159      	asrs	r1, r3, #5
 800b14c:	f003 021f 	and.w	r2, r3, #31
 800b150:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b154:	f04f 0a01 	mov.w	sl, #1
 800b158:	fa0a f202 	lsl.w	r2, sl, r2
 800b15c:	420a      	tst	r2, r1
 800b15e:	d009      	beq.n	800b174 <__gethex+0x1f8>
 800b160:	4553      	cmp	r3, sl
 800b162:	dd05      	ble.n	800b170 <__gethex+0x1f4>
 800b164:	1eb9      	subs	r1, r7, #2
 800b166:	4620      	mov	r0, r4
 800b168:	f000 fee0 	bl	800bf2c <__any_on>
 800b16c:	2800      	cmp	r0, #0
 800b16e:	d145      	bne.n	800b1fc <__gethex+0x280>
 800b170:	f04f 0a02 	mov.w	sl, #2
 800b174:	4639      	mov	r1, r7
 800b176:	4620      	mov	r0, r4
 800b178:	f7ff fe98 	bl	800aeac <rshift>
 800b17c:	443d      	add	r5, r7
 800b17e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b182:	42ab      	cmp	r3, r5
 800b184:	da4c      	bge.n	800b220 <__gethex+0x2a4>
 800b186:	ee18 0a10 	vmov	r0, s16
 800b18a:	4621      	mov	r1, r4
 800b18c:	f000 fa6e 	bl	800b66c <_Bfree>
 800b190:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b192:	2300      	movs	r3, #0
 800b194:	6013      	str	r3, [r2, #0]
 800b196:	27a3      	movs	r7, #163	; 0xa3
 800b198:	e785      	b.n	800b0a6 <__gethex+0x12a>
 800b19a:	1e73      	subs	r3, r6, #1
 800b19c:	9a05      	ldr	r2, [sp, #20]
 800b19e:	9303      	str	r3, [sp, #12]
 800b1a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b1a4:	4293      	cmp	r3, r2
 800b1a6:	d019      	beq.n	800b1dc <__gethex+0x260>
 800b1a8:	f1bb 0f20 	cmp.w	fp, #32
 800b1ac:	d107      	bne.n	800b1be <__gethex+0x242>
 800b1ae:	9b02      	ldr	r3, [sp, #8]
 800b1b0:	9a00      	ldr	r2, [sp, #0]
 800b1b2:	f843 2b04 	str.w	r2, [r3], #4
 800b1b6:	9302      	str	r3, [sp, #8]
 800b1b8:	2300      	movs	r3, #0
 800b1ba:	9300      	str	r3, [sp, #0]
 800b1bc:	469b      	mov	fp, r3
 800b1be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b1c2:	f7ff fec5 	bl	800af50 <__hexdig_fun>
 800b1c6:	9b00      	ldr	r3, [sp, #0]
 800b1c8:	f000 000f 	and.w	r0, r0, #15
 800b1cc:	fa00 f00b 	lsl.w	r0, r0, fp
 800b1d0:	4303      	orrs	r3, r0
 800b1d2:	9300      	str	r3, [sp, #0]
 800b1d4:	f10b 0b04 	add.w	fp, fp, #4
 800b1d8:	9b03      	ldr	r3, [sp, #12]
 800b1da:	e00d      	b.n	800b1f8 <__gethex+0x27c>
 800b1dc:	9b03      	ldr	r3, [sp, #12]
 800b1de:	9a06      	ldr	r2, [sp, #24]
 800b1e0:	4413      	add	r3, r2
 800b1e2:	42bb      	cmp	r3, r7
 800b1e4:	d3e0      	bcc.n	800b1a8 <__gethex+0x22c>
 800b1e6:	4618      	mov	r0, r3
 800b1e8:	9901      	ldr	r1, [sp, #4]
 800b1ea:	9307      	str	r3, [sp, #28]
 800b1ec:	4652      	mov	r2, sl
 800b1ee:	f001 f837 	bl	800c260 <strncmp>
 800b1f2:	9b07      	ldr	r3, [sp, #28]
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	d1d7      	bne.n	800b1a8 <__gethex+0x22c>
 800b1f8:	461e      	mov	r6, r3
 800b1fa:	e78b      	b.n	800b114 <__gethex+0x198>
 800b1fc:	f04f 0a03 	mov.w	sl, #3
 800b200:	e7b8      	b.n	800b174 <__gethex+0x1f8>
 800b202:	da0a      	bge.n	800b21a <__gethex+0x29e>
 800b204:	1a37      	subs	r7, r6, r0
 800b206:	4621      	mov	r1, r4
 800b208:	ee18 0a10 	vmov	r0, s16
 800b20c:	463a      	mov	r2, r7
 800b20e:	f000 fc49 	bl	800baa4 <__lshift>
 800b212:	1bed      	subs	r5, r5, r7
 800b214:	4604      	mov	r4, r0
 800b216:	f100 0914 	add.w	r9, r0, #20
 800b21a:	f04f 0a00 	mov.w	sl, #0
 800b21e:	e7ae      	b.n	800b17e <__gethex+0x202>
 800b220:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b224:	42a8      	cmp	r0, r5
 800b226:	dd72      	ble.n	800b30e <__gethex+0x392>
 800b228:	1b45      	subs	r5, r0, r5
 800b22a:	42ae      	cmp	r6, r5
 800b22c:	dc36      	bgt.n	800b29c <__gethex+0x320>
 800b22e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b232:	2b02      	cmp	r3, #2
 800b234:	d02a      	beq.n	800b28c <__gethex+0x310>
 800b236:	2b03      	cmp	r3, #3
 800b238:	d02c      	beq.n	800b294 <__gethex+0x318>
 800b23a:	2b01      	cmp	r3, #1
 800b23c:	d11c      	bne.n	800b278 <__gethex+0x2fc>
 800b23e:	42ae      	cmp	r6, r5
 800b240:	d11a      	bne.n	800b278 <__gethex+0x2fc>
 800b242:	2e01      	cmp	r6, #1
 800b244:	d112      	bne.n	800b26c <__gethex+0x2f0>
 800b246:	9a04      	ldr	r2, [sp, #16]
 800b248:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b24c:	6013      	str	r3, [r2, #0]
 800b24e:	2301      	movs	r3, #1
 800b250:	6123      	str	r3, [r4, #16]
 800b252:	f8c9 3000 	str.w	r3, [r9]
 800b256:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b258:	2762      	movs	r7, #98	; 0x62
 800b25a:	601c      	str	r4, [r3, #0]
 800b25c:	e723      	b.n	800b0a6 <__gethex+0x12a>
 800b25e:	bf00      	nop
 800b260:	0800d0e0 	.word	0x0800d0e0
 800b264:	0800d068 	.word	0x0800d068
 800b268:	0800d079 	.word	0x0800d079
 800b26c:	1e71      	subs	r1, r6, #1
 800b26e:	4620      	mov	r0, r4
 800b270:	f000 fe5c 	bl	800bf2c <__any_on>
 800b274:	2800      	cmp	r0, #0
 800b276:	d1e6      	bne.n	800b246 <__gethex+0x2ca>
 800b278:	ee18 0a10 	vmov	r0, s16
 800b27c:	4621      	mov	r1, r4
 800b27e:	f000 f9f5 	bl	800b66c <_Bfree>
 800b282:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b284:	2300      	movs	r3, #0
 800b286:	6013      	str	r3, [r2, #0]
 800b288:	2750      	movs	r7, #80	; 0x50
 800b28a:	e70c      	b.n	800b0a6 <__gethex+0x12a>
 800b28c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d1f2      	bne.n	800b278 <__gethex+0x2fc>
 800b292:	e7d8      	b.n	800b246 <__gethex+0x2ca>
 800b294:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b296:	2b00      	cmp	r3, #0
 800b298:	d1d5      	bne.n	800b246 <__gethex+0x2ca>
 800b29a:	e7ed      	b.n	800b278 <__gethex+0x2fc>
 800b29c:	1e6f      	subs	r7, r5, #1
 800b29e:	f1ba 0f00 	cmp.w	sl, #0
 800b2a2:	d131      	bne.n	800b308 <__gethex+0x38c>
 800b2a4:	b127      	cbz	r7, 800b2b0 <__gethex+0x334>
 800b2a6:	4639      	mov	r1, r7
 800b2a8:	4620      	mov	r0, r4
 800b2aa:	f000 fe3f 	bl	800bf2c <__any_on>
 800b2ae:	4682      	mov	sl, r0
 800b2b0:	117b      	asrs	r3, r7, #5
 800b2b2:	2101      	movs	r1, #1
 800b2b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b2b8:	f007 071f 	and.w	r7, r7, #31
 800b2bc:	fa01 f707 	lsl.w	r7, r1, r7
 800b2c0:	421f      	tst	r7, r3
 800b2c2:	4629      	mov	r1, r5
 800b2c4:	4620      	mov	r0, r4
 800b2c6:	bf18      	it	ne
 800b2c8:	f04a 0a02 	orrne.w	sl, sl, #2
 800b2cc:	1b76      	subs	r6, r6, r5
 800b2ce:	f7ff fded 	bl	800aeac <rshift>
 800b2d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b2d6:	2702      	movs	r7, #2
 800b2d8:	f1ba 0f00 	cmp.w	sl, #0
 800b2dc:	d048      	beq.n	800b370 <__gethex+0x3f4>
 800b2de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b2e2:	2b02      	cmp	r3, #2
 800b2e4:	d015      	beq.n	800b312 <__gethex+0x396>
 800b2e6:	2b03      	cmp	r3, #3
 800b2e8:	d017      	beq.n	800b31a <__gethex+0x39e>
 800b2ea:	2b01      	cmp	r3, #1
 800b2ec:	d109      	bne.n	800b302 <__gethex+0x386>
 800b2ee:	f01a 0f02 	tst.w	sl, #2
 800b2f2:	d006      	beq.n	800b302 <__gethex+0x386>
 800b2f4:	f8d9 0000 	ldr.w	r0, [r9]
 800b2f8:	ea4a 0a00 	orr.w	sl, sl, r0
 800b2fc:	f01a 0f01 	tst.w	sl, #1
 800b300:	d10e      	bne.n	800b320 <__gethex+0x3a4>
 800b302:	f047 0710 	orr.w	r7, r7, #16
 800b306:	e033      	b.n	800b370 <__gethex+0x3f4>
 800b308:	f04f 0a01 	mov.w	sl, #1
 800b30c:	e7d0      	b.n	800b2b0 <__gethex+0x334>
 800b30e:	2701      	movs	r7, #1
 800b310:	e7e2      	b.n	800b2d8 <__gethex+0x35c>
 800b312:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b314:	f1c3 0301 	rsb	r3, r3, #1
 800b318:	9315      	str	r3, [sp, #84]	; 0x54
 800b31a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	d0f0      	beq.n	800b302 <__gethex+0x386>
 800b320:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b324:	f104 0314 	add.w	r3, r4, #20
 800b328:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b32c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b330:	f04f 0c00 	mov.w	ip, #0
 800b334:	4618      	mov	r0, r3
 800b336:	f853 2b04 	ldr.w	r2, [r3], #4
 800b33a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b33e:	d01c      	beq.n	800b37a <__gethex+0x3fe>
 800b340:	3201      	adds	r2, #1
 800b342:	6002      	str	r2, [r0, #0]
 800b344:	2f02      	cmp	r7, #2
 800b346:	f104 0314 	add.w	r3, r4, #20
 800b34a:	d13f      	bne.n	800b3cc <__gethex+0x450>
 800b34c:	f8d8 2000 	ldr.w	r2, [r8]
 800b350:	3a01      	subs	r2, #1
 800b352:	42b2      	cmp	r2, r6
 800b354:	d10a      	bne.n	800b36c <__gethex+0x3f0>
 800b356:	1171      	asrs	r1, r6, #5
 800b358:	2201      	movs	r2, #1
 800b35a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b35e:	f006 061f 	and.w	r6, r6, #31
 800b362:	fa02 f606 	lsl.w	r6, r2, r6
 800b366:	421e      	tst	r6, r3
 800b368:	bf18      	it	ne
 800b36a:	4617      	movne	r7, r2
 800b36c:	f047 0720 	orr.w	r7, r7, #32
 800b370:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b372:	601c      	str	r4, [r3, #0]
 800b374:	9b04      	ldr	r3, [sp, #16]
 800b376:	601d      	str	r5, [r3, #0]
 800b378:	e695      	b.n	800b0a6 <__gethex+0x12a>
 800b37a:	4299      	cmp	r1, r3
 800b37c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b380:	d8d8      	bhi.n	800b334 <__gethex+0x3b8>
 800b382:	68a3      	ldr	r3, [r4, #8]
 800b384:	459b      	cmp	fp, r3
 800b386:	db19      	blt.n	800b3bc <__gethex+0x440>
 800b388:	6861      	ldr	r1, [r4, #4]
 800b38a:	ee18 0a10 	vmov	r0, s16
 800b38e:	3101      	adds	r1, #1
 800b390:	f000 f92c 	bl	800b5ec <_Balloc>
 800b394:	4681      	mov	r9, r0
 800b396:	b918      	cbnz	r0, 800b3a0 <__gethex+0x424>
 800b398:	4b1a      	ldr	r3, [pc, #104]	; (800b404 <__gethex+0x488>)
 800b39a:	4602      	mov	r2, r0
 800b39c:	2184      	movs	r1, #132	; 0x84
 800b39e:	e6a8      	b.n	800b0f2 <__gethex+0x176>
 800b3a0:	6922      	ldr	r2, [r4, #16]
 800b3a2:	3202      	adds	r2, #2
 800b3a4:	f104 010c 	add.w	r1, r4, #12
 800b3a8:	0092      	lsls	r2, r2, #2
 800b3aa:	300c      	adds	r0, #12
 800b3ac:	f000 f904 	bl	800b5b8 <memcpy>
 800b3b0:	4621      	mov	r1, r4
 800b3b2:	ee18 0a10 	vmov	r0, s16
 800b3b6:	f000 f959 	bl	800b66c <_Bfree>
 800b3ba:	464c      	mov	r4, r9
 800b3bc:	6923      	ldr	r3, [r4, #16]
 800b3be:	1c5a      	adds	r2, r3, #1
 800b3c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b3c4:	6122      	str	r2, [r4, #16]
 800b3c6:	2201      	movs	r2, #1
 800b3c8:	615a      	str	r2, [r3, #20]
 800b3ca:	e7bb      	b.n	800b344 <__gethex+0x3c8>
 800b3cc:	6922      	ldr	r2, [r4, #16]
 800b3ce:	455a      	cmp	r2, fp
 800b3d0:	dd0b      	ble.n	800b3ea <__gethex+0x46e>
 800b3d2:	2101      	movs	r1, #1
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f7ff fd69 	bl	800aeac <rshift>
 800b3da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b3de:	3501      	adds	r5, #1
 800b3e0:	42ab      	cmp	r3, r5
 800b3e2:	f6ff aed0 	blt.w	800b186 <__gethex+0x20a>
 800b3e6:	2701      	movs	r7, #1
 800b3e8:	e7c0      	b.n	800b36c <__gethex+0x3f0>
 800b3ea:	f016 061f 	ands.w	r6, r6, #31
 800b3ee:	d0fa      	beq.n	800b3e6 <__gethex+0x46a>
 800b3f0:	4453      	add	r3, sl
 800b3f2:	f1c6 0620 	rsb	r6, r6, #32
 800b3f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b3fa:	f000 f9e9 	bl	800b7d0 <__hi0bits>
 800b3fe:	42b0      	cmp	r0, r6
 800b400:	dbe7      	blt.n	800b3d2 <__gethex+0x456>
 800b402:	e7f0      	b.n	800b3e6 <__gethex+0x46a>
 800b404:	0800d068 	.word	0x0800d068

0800b408 <L_shift>:
 800b408:	f1c2 0208 	rsb	r2, r2, #8
 800b40c:	0092      	lsls	r2, r2, #2
 800b40e:	b570      	push	{r4, r5, r6, lr}
 800b410:	f1c2 0620 	rsb	r6, r2, #32
 800b414:	6843      	ldr	r3, [r0, #4]
 800b416:	6804      	ldr	r4, [r0, #0]
 800b418:	fa03 f506 	lsl.w	r5, r3, r6
 800b41c:	432c      	orrs	r4, r5
 800b41e:	40d3      	lsrs	r3, r2
 800b420:	6004      	str	r4, [r0, #0]
 800b422:	f840 3f04 	str.w	r3, [r0, #4]!
 800b426:	4288      	cmp	r0, r1
 800b428:	d3f4      	bcc.n	800b414 <L_shift+0xc>
 800b42a:	bd70      	pop	{r4, r5, r6, pc}

0800b42c <__match>:
 800b42c:	b530      	push	{r4, r5, lr}
 800b42e:	6803      	ldr	r3, [r0, #0]
 800b430:	3301      	adds	r3, #1
 800b432:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b436:	b914      	cbnz	r4, 800b43e <__match+0x12>
 800b438:	6003      	str	r3, [r0, #0]
 800b43a:	2001      	movs	r0, #1
 800b43c:	bd30      	pop	{r4, r5, pc}
 800b43e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b442:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b446:	2d19      	cmp	r5, #25
 800b448:	bf98      	it	ls
 800b44a:	3220      	addls	r2, #32
 800b44c:	42a2      	cmp	r2, r4
 800b44e:	d0f0      	beq.n	800b432 <__match+0x6>
 800b450:	2000      	movs	r0, #0
 800b452:	e7f3      	b.n	800b43c <__match+0x10>

0800b454 <__hexnan>:
 800b454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b458:	680b      	ldr	r3, [r1, #0]
 800b45a:	115e      	asrs	r6, r3, #5
 800b45c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b460:	f013 031f 	ands.w	r3, r3, #31
 800b464:	b087      	sub	sp, #28
 800b466:	bf18      	it	ne
 800b468:	3604      	addne	r6, #4
 800b46a:	2500      	movs	r5, #0
 800b46c:	1f37      	subs	r7, r6, #4
 800b46e:	4690      	mov	r8, r2
 800b470:	6802      	ldr	r2, [r0, #0]
 800b472:	9301      	str	r3, [sp, #4]
 800b474:	4682      	mov	sl, r0
 800b476:	f846 5c04 	str.w	r5, [r6, #-4]
 800b47a:	46b9      	mov	r9, r7
 800b47c:	463c      	mov	r4, r7
 800b47e:	9502      	str	r5, [sp, #8]
 800b480:	46ab      	mov	fp, r5
 800b482:	7851      	ldrb	r1, [r2, #1]
 800b484:	1c53      	adds	r3, r2, #1
 800b486:	9303      	str	r3, [sp, #12]
 800b488:	b341      	cbz	r1, 800b4dc <__hexnan+0x88>
 800b48a:	4608      	mov	r0, r1
 800b48c:	9205      	str	r2, [sp, #20]
 800b48e:	9104      	str	r1, [sp, #16]
 800b490:	f7ff fd5e 	bl	800af50 <__hexdig_fun>
 800b494:	2800      	cmp	r0, #0
 800b496:	d14f      	bne.n	800b538 <__hexnan+0xe4>
 800b498:	9904      	ldr	r1, [sp, #16]
 800b49a:	9a05      	ldr	r2, [sp, #20]
 800b49c:	2920      	cmp	r1, #32
 800b49e:	d818      	bhi.n	800b4d2 <__hexnan+0x7e>
 800b4a0:	9b02      	ldr	r3, [sp, #8]
 800b4a2:	459b      	cmp	fp, r3
 800b4a4:	dd13      	ble.n	800b4ce <__hexnan+0x7a>
 800b4a6:	454c      	cmp	r4, r9
 800b4a8:	d206      	bcs.n	800b4b8 <__hexnan+0x64>
 800b4aa:	2d07      	cmp	r5, #7
 800b4ac:	dc04      	bgt.n	800b4b8 <__hexnan+0x64>
 800b4ae:	462a      	mov	r2, r5
 800b4b0:	4649      	mov	r1, r9
 800b4b2:	4620      	mov	r0, r4
 800b4b4:	f7ff ffa8 	bl	800b408 <L_shift>
 800b4b8:	4544      	cmp	r4, r8
 800b4ba:	d950      	bls.n	800b55e <__hexnan+0x10a>
 800b4bc:	2300      	movs	r3, #0
 800b4be:	f1a4 0904 	sub.w	r9, r4, #4
 800b4c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b4c6:	f8cd b008 	str.w	fp, [sp, #8]
 800b4ca:	464c      	mov	r4, r9
 800b4cc:	461d      	mov	r5, r3
 800b4ce:	9a03      	ldr	r2, [sp, #12]
 800b4d0:	e7d7      	b.n	800b482 <__hexnan+0x2e>
 800b4d2:	2929      	cmp	r1, #41	; 0x29
 800b4d4:	d156      	bne.n	800b584 <__hexnan+0x130>
 800b4d6:	3202      	adds	r2, #2
 800b4d8:	f8ca 2000 	str.w	r2, [sl]
 800b4dc:	f1bb 0f00 	cmp.w	fp, #0
 800b4e0:	d050      	beq.n	800b584 <__hexnan+0x130>
 800b4e2:	454c      	cmp	r4, r9
 800b4e4:	d206      	bcs.n	800b4f4 <__hexnan+0xa0>
 800b4e6:	2d07      	cmp	r5, #7
 800b4e8:	dc04      	bgt.n	800b4f4 <__hexnan+0xa0>
 800b4ea:	462a      	mov	r2, r5
 800b4ec:	4649      	mov	r1, r9
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f7ff ff8a 	bl	800b408 <L_shift>
 800b4f4:	4544      	cmp	r4, r8
 800b4f6:	d934      	bls.n	800b562 <__hexnan+0x10e>
 800b4f8:	f1a8 0204 	sub.w	r2, r8, #4
 800b4fc:	4623      	mov	r3, r4
 800b4fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800b502:	f842 1f04 	str.w	r1, [r2, #4]!
 800b506:	429f      	cmp	r7, r3
 800b508:	d2f9      	bcs.n	800b4fe <__hexnan+0xaa>
 800b50a:	1b3b      	subs	r3, r7, r4
 800b50c:	f023 0303 	bic.w	r3, r3, #3
 800b510:	3304      	adds	r3, #4
 800b512:	3401      	adds	r4, #1
 800b514:	3e03      	subs	r6, #3
 800b516:	42b4      	cmp	r4, r6
 800b518:	bf88      	it	hi
 800b51a:	2304      	movhi	r3, #4
 800b51c:	4443      	add	r3, r8
 800b51e:	2200      	movs	r2, #0
 800b520:	f843 2b04 	str.w	r2, [r3], #4
 800b524:	429f      	cmp	r7, r3
 800b526:	d2fb      	bcs.n	800b520 <__hexnan+0xcc>
 800b528:	683b      	ldr	r3, [r7, #0]
 800b52a:	b91b      	cbnz	r3, 800b534 <__hexnan+0xe0>
 800b52c:	4547      	cmp	r7, r8
 800b52e:	d127      	bne.n	800b580 <__hexnan+0x12c>
 800b530:	2301      	movs	r3, #1
 800b532:	603b      	str	r3, [r7, #0]
 800b534:	2005      	movs	r0, #5
 800b536:	e026      	b.n	800b586 <__hexnan+0x132>
 800b538:	3501      	adds	r5, #1
 800b53a:	2d08      	cmp	r5, #8
 800b53c:	f10b 0b01 	add.w	fp, fp, #1
 800b540:	dd06      	ble.n	800b550 <__hexnan+0xfc>
 800b542:	4544      	cmp	r4, r8
 800b544:	d9c3      	bls.n	800b4ce <__hexnan+0x7a>
 800b546:	2300      	movs	r3, #0
 800b548:	f844 3c04 	str.w	r3, [r4, #-4]
 800b54c:	2501      	movs	r5, #1
 800b54e:	3c04      	subs	r4, #4
 800b550:	6822      	ldr	r2, [r4, #0]
 800b552:	f000 000f 	and.w	r0, r0, #15
 800b556:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b55a:	6022      	str	r2, [r4, #0]
 800b55c:	e7b7      	b.n	800b4ce <__hexnan+0x7a>
 800b55e:	2508      	movs	r5, #8
 800b560:	e7b5      	b.n	800b4ce <__hexnan+0x7a>
 800b562:	9b01      	ldr	r3, [sp, #4]
 800b564:	2b00      	cmp	r3, #0
 800b566:	d0df      	beq.n	800b528 <__hexnan+0xd4>
 800b568:	f04f 32ff 	mov.w	r2, #4294967295
 800b56c:	f1c3 0320 	rsb	r3, r3, #32
 800b570:	fa22 f303 	lsr.w	r3, r2, r3
 800b574:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b578:	401a      	ands	r2, r3
 800b57a:	f846 2c04 	str.w	r2, [r6, #-4]
 800b57e:	e7d3      	b.n	800b528 <__hexnan+0xd4>
 800b580:	3f04      	subs	r7, #4
 800b582:	e7d1      	b.n	800b528 <__hexnan+0xd4>
 800b584:	2004      	movs	r0, #4
 800b586:	b007      	add	sp, #28
 800b588:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b58c <_localeconv_r>:
 800b58c:	4800      	ldr	r0, [pc, #0]	; (800b590 <_localeconv_r+0x4>)
 800b58e:	4770      	bx	lr
 800b590:	2000019c 	.word	0x2000019c

0800b594 <__ascii_mbtowc>:
 800b594:	b082      	sub	sp, #8
 800b596:	b901      	cbnz	r1, 800b59a <__ascii_mbtowc+0x6>
 800b598:	a901      	add	r1, sp, #4
 800b59a:	b142      	cbz	r2, 800b5ae <__ascii_mbtowc+0x1a>
 800b59c:	b14b      	cbz	r3, 800b5b2 <__ascii_mbtowc+0x1e>
 800b59e:	7813      	ldrb	r3, [r2, #0]
 800b5a0:	600b      	str	r3, [r1, #0]
 800b5a2:	7812      	ldrb	r2, [r2, #0]
 800b5a4:	1e10      	subs	r0, r2, #0
 800b5a6:	bf18      	it	ne
 800b5a8:	2001      	movne	r0, #1
 800b5aa:	b002      	add	sp, #8
 800b5ac:	4770      	bx	lr
 800b5ae:	4610      	mov	r0, r2
 800b5b0:	e7fb      	b.n	800b5aa <__ascii_mbtowc+0x16>
 800b5b2:	f06f 0001 	mvn.w	r0, #1
 800b5b6:	e7f8      	b.n	800b5aa <__ascii_mbtowc+0x16>

0800b5b8 <memcpy>:
 800b5b8:	440a      	add	r2, r1
 800b5ba:	4291      	cmp	r1, r2
 800b5bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b5c0:	d100      	bne.n	800b5c4 <memcpy+0xc>
 800b5c2:	4770      	bx	lr
 800b5c4:	b510      	push	{r4, lr}
 800b5c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b5ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b5ce:	4291      	cmp	r1, r2
 800b5d0:	d1f9      	bne.n	800b5c6 <memcpy+0xe>
 800b5d2:	bd10      	pop	{r4, pc}

0800b5d4 <__malloc_lock>:
 800b5d4:	4801      	ldr	r0, [pc, #4]	; (800b5dc <__malloc_lock+0x8>)
 800b5d6:	f000 be96 	b.w	800c306 <__retarget_lock_acquire_recursive>
 800b5da:	bf00      	nop
 800b5dc:	20000aac 	.word	0x20000aac

0800b5e0 <__malloc_unlock>:
 800b5e0:	4801      	ldr	r0, [pc, #4]	; (800b5e8 <__malloc_unlock+0x8>)
 800b5e2:	f000 be91 	b.w	800c308 <__retarget_lock_release_recursive>
 800b5e6:	bf00      	nop
 800b5e8:	20000aac 	.word	0x20000aac

0800b5ec <_Balloc>:
 800b5ec:	b570      	push	{r4, r5, r6, lr}
 800b5ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	460d      	mov	r5, r1
 800b5f4:	b976      	cbnz	r6, 800b614 <_Balloc+0x28>
 800b5f6:	2010      	movs	r0, #16
 800b5f8:	f7fc ff8a 	bl	8008510 <malloc>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	6260      	str	r0, [r4, #36]	; 0x24
 800b600:	b920      	cbnz	r0, 800b60c <_Balloc+0x20>
 800b602:	4b18      	ldr	r3, [pc, #96]	; (800b664 <_Balloc+0x78>)
 800b604:	4818      	ldr	r0, [pc, #96]	; (800b668 <_Balloc+0x7c>)
 800b606:	2166      	movs	r1, #102	; 0x66
 800b608:	f000 fe4c 	bl	800c2a4 <__assert_func>
 800b60c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b610:	6006      	str	r6, [r0, #0]
 800b612:	60c6      	str	r6, [r0, #12]
 800b614:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800b616:	68f3      	ldr	r3, [r6, #12]
 800b618:	b183      	cbz	r3, 800b63c <_Balloc+0x50>
 800b61a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b61c:	68db      	ldr	r3, [r3, #12]
 800b61e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b622:	b9b8      	cbnz	r0, 800b654 <_Balloc+0x68>
 800b624:	2101      	movs	r1, #1
 800b626:	fa01 f605 	lsl.w	r6, r1, r5
 800b62a:	1d72      	adds	r2, r6, #5
 800b62c:	0092      	lsls	r2, r2, #2
 800b62e:	4620      	mov	r0, r4
 800b630:	f000 fc9d 	bl	800bf6e <_calloc_r>
 800b634:	b160      	cbz	r0, 800b650 <_Balloc+0x64>
 800b636:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b63a:	e00e      	b.n	800b65a <_Balloc+0x6e>
 800b63c:	2221      	movs	r2, #33	; 0x21
 800b63e:	2104      	movs	r1, #4
 800b640:	4620      	mov	r0, r4
 800b642:	f000 fc94 	bl	800bf6e <_calloc_r>
 800b646:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b648:	60f0      	str	r0, [r6, #12]
 800b64a:	68db      	ldr	r3, [r3, #12]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d1e4      	bne.n	800b61a <_Balloc+0x2e>
 800b650:	2000      	movs	r0, #0
 800b652:	bd70      	pop	{r4, r5, r6, pc}
 800b654:	6802      	ldr	r2, [r0, #0]
 800b656:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b65a:	2300      	movs	r3, #0
 800b65c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b660:	e7f7      	b.n	800b652 <_Balloc+0x66>
 800b662:	bf00      	nop
 800b664:	0800cff6 	.word	0x0800cff6
 800b668:	0800d0f4 	.word	0x0800d0f4

0800b66c <_Bfree>:
 800b66c:	b570      	push	{r4, r5, r6, lr}
 800b66e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b670:	4605      	mov	r5, r0
 800b672:	460c      	mov	r4, r1
 800b674:	b976      	cbnz	r6, 800b694 <_Bfree+0x28>
 800b676:	2010      	movs	r0, #16
 800b678:	f7fc ff4a 	bl	8008510 <malloc>
 800b67c:	4602      	mov	r2, r0
 800b67e:	6268      	str	r0, [r5, #36]	; 0x24
 800b680:	b920      	cbnz	r0, 800b68c <_Bfree+0x20>
 800b682:	4b09      	ldr	r3, [pc, #36]	; (800b6a8 <_Bfree+0x3c>)
 800b684:	4809      	ldr	r0, [pc, #36]	; (800b6ac <_Bfree+0x40>)
 800b686:	218a      	movs	r1, #138	; 0x8a
 800b688:	f000 fe0c 	bl	800c2a4 <__assert_func>
 800b68c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b690:	6006      	str	r6, [r0, #0]
 800b692:	60c6      	str	r6, [r0, #12]
 800b694:	b13c      	cbz	r4, 800b6a6 <_Bfree+0x3a>
 800b696:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b698:	6862      	ldr	r2, [r4, #4]
 800b69a:	68db      	ldr	r3, [r3, #12]
 800b69c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b6a0:	6021      	str	r1, [r4, #0]
 800b6a2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b6a6:	bd70      	pop	{r4, r5, r6, pc}
 800b6a8:	0800cff6 	.word	0x0800cff6
 800b6ac:	0800d0f4 	.word	0x0800d0f4

0800b6b0 <__multadd>:
 800b6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6b4:	690d      	ldr	r5, [r1, #16]
 800b6b6:	4607      	mov	r7, r0
 800b6b8:	460c      	mov	r4, r1
 800b6ba:	461e      	mov	r6, r3
 800b6bc:	f101 0c14 	add.w	ip, r1, #20
 800b6c0:	2000      	movs	r0, #0
 800b6c2:	f8dc 3000 	ldr.w	r3, [ip]
 800b6c6:	b299      	uxth	r1, r3
 800b6c8:	fb02 6101 	mla	r1, r2, r1, r6
 800b6cc:	0c1e      	lsrs	r6, r3, #16
 800b6ce:	0c0b      	lsrs	r3, r1, #16
 800b6d0:	fb02 3306 	mla	r3, r2, r6, r3
 800b6d4:	b289      	uxth	r1, r1
 800b6d6:	3001      	adds	r0, #1
 800b6d8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b6dc:	4285      	cmp	r5, r0
 800b6de:	f84c 1b04 	str.w	r1, [ip], #4
 800b6e2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b6e6:	dcec      	bgt.n	800b6c2 <__multadd+0x12>
 800b6e8:	b30e      	cbz	r6, 800b72e <__multadd+0x7e>
 800b6ea:	68a3      	ldr	r3, [r4, #8]
 800b6ec:	42ab      	cmp	r3, r5
 800b6ee:	dc19      	bgt.n	800b724 <__multadd+0x74>
 800b6f0:	6861      	ldr	r1, [r4, #4]
 800b6f2:	4638      	mov	r0, r7
 800b6f4:	3101      	adds	r1, #1
 800b6f6:	f7ff ff79 	bl	800b5ec <_Balloc>
 800b6fa:	4680      	mov	r8, r0
 800b6fc:	b928      	cbnz	r0, 800b70a <__multadd+0x5a>
 800b6fe:	4602      	mov	r2, r0
 800b700:	4b0c      	ldr	r3, [pc, #48]	; (800b734 <__multadd+0x84>)
 800b702:	480d      	ldr	r0, [pc, #52]	; (800b738 <__multadd+0x88>)
 800b704:	21b5      	movs	r1, #181	; 0xb5
 800b706:	f000 fdcd 	bl	800c2a4 <__assert_func>
 800b70a:	6922      	ldr	r2, [r4, #16]
 800b70c:	3202      	adds	r2, #2
 800b70e:	f104 010c 	add.w	r1, r4, #12
 800b712:	0092      	lsls	r2, r2, #2
 800b714:	300c      	adds	r0, #12
 800b716:	f7ff ff4f 	bl	800b5b8 <memcpy>
 800b71a:	4621      	mov	r1, r4
 800b71c:	4638      	mov	r0, r7
 800b71e:	f7ff ffa5 	bl	800b66c <_Bfree>
 800b722:	4644      	mov	r4, r8
 800b724:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b728:	3501      	adds	r5, #1
 800b72a:	615e      	str	r6, [r3, #20]
 800b72c:	6125      	str	r5, [r4, #16]
 800b72e:	4620      	mov	r0, r4
 800b730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b734:	0800d068 	.word	0x0800d068
 800b738:	0800d0f4 	.word	0x0800d0f4

0800b73c <__s2b>:
 800b73c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b740:	460c      	mov	r4, r1
 800b742:	4615      	mov	r5, r2
 800b744:	461f      	mov	r7, r3
 800b746:	2209      	movs	r2, #9
 800b748:	3308      	adds	r3, #8
 800b74a:	4606      	mov	r6, r0
 800b74c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b750:	2100      	movs	r1, #0
 800b752:	2201      	movs	r2, #1
 800b754:	429a      	cmp	r2, r3
 800b756:	db09      	blt.n	800b76c <__s2b+0x30>
 800b758:	4630      	mov	r0, r6
 800b75a:	f7ff ff47 	bl	800b5ec <_Balloc>
 800b75e:	b940      	cbnz	r0, 800b772 <__s2b+0x36>
 800b760:	4602      	mov	r2, r0
 800b762:	4b19      	ldr	r3, [pc, #100]	; (800b7c8 <__s2b+0x8c>)
 800b764:	4819      	ldr	r0, [pc, #100]	; (800b7cc <__s2b+0x90>)
 800b766:	21ce      	movs	r1, #206	; 0xce
 800b768:	f000 fd9c 	bl	800c2a4 <__assert_func>
 800b76c:	0052      	lsls	r2, r2, #1
 800b76e:	3101      	adds	r1, #1
 800b770:	e7f0      	b.n	800b754 <__s2b+0x18>
 800b772:	9b08      	ldr	r3, [sp, #32]
 800b774:	6143      	str	r3, [r0, #20]
 800b776:	2d09      	cmp	r5, #9
 800b778:	f04f 0301 	mov.w	r3, #1
 800b77c:	6103      	str	r3, [r0, #16]
 800b77e:	dd16      	ble.n	800b7ae <__s2b+0x72>
 800b780:	f104 0909 	add.w	r9, r4, #9
 800b784:	46c8      	mov	r8, r9
 800b786:	442c      	add	r4, r5
 800b788:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b78c:	4601      	mov	r1, r0
 800b78e:	3b30      	subs	r3, #48	; 0x30
 800b790:	220a      	movs	r2, #10
 800b792:	4630      	mov	r0, r6
 800b794:	f7ff ff8c 	bl	800b6b0 <__multadd>
 800b798:	45a0      	cmp	r8, r4
 800b79a:	d1f5      	bne.n	800b788 <__s2b+0x4c>
 800b79c:	f1a5 0408 	sub.w	r4, r5, #8
 800b7a0:	444c      	add	r4, r9
 800b7a2:	1b2d      	subs	r5, r5, r4
 800b7a4:	1963      	adds	r3, r4, r5
 800b7a6:	42bb      	cmp	r3, r7
 800b7a8:	db04      	blt.n	800b7b4 <__s2b+0x78>
 800b7aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b7ae:	340a      	adds	r4, #10
 800b7b0:	2509      	movs	r5, #9
 800b7b2:	e7f6      	b.n	800b7a2 <__s2b+0x66>
 800b7b4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b7b8:	4601      	mov	r1, r0
 800b7ba:	3b30      	subs	r3, #48	; 0x30
 800b7bc:	220a      	movs	r2, #10
 800b7be:	4630      	mov	r0, r6
 800b7c0:	f7ff ff76 	bl	800b6b0 <__multadd>
 800b7c4:	e7ee      	b.n	800b7a4 <__s2b+0x68>
 800b7c6:	bf00      	nop
 800b7c8:	0800d068 	.word	0x0800d068
 800b7cc:	0800d0f4 	.word	0x0800d0f4

0800b7d0 <__hi0bits>:
 800b7d0:	0c03      	lsrs	r3, r0, #16
 800b7d2:	041b      	lsls	r3, r3, #16
 800b7d4:	b9d3      	cbnz	r3, 800b80c <__hi0bits+0x3c>
 800b7d6:	0400      	lsls	r0, r0, #16
 800b7d8:	2310      	movs	r3, #16
 800b7da:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b7de:	bf04      	itt	eq
 800b7e0:	0200      	lsleq	r0, r0, #8
 800b7e2:	3308      	addeq	r3, #8
 800b7e4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b7e8:	bf04      	itt	eq
 800b7ea:	0100      	lsleq	r0, r0, #4
 800b7ec:	3304      	addeq	r3, #4
 800b7ee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b7f2:	bf04      	itt	eq
 800b7f4:	0080      	lsleq	r0, r0, #2
 800b7f6:	3302      	addeq	r3, #2
 800b7f8:	2800      	cmp	r0, #0
 800b7fa:	db05      	blt.n	800b808 <__hi0bits+0x38>
 800b7fc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b800:	f103 0301 	add.w	r3, r3, #1
 800b804:	bf08      	it	eq
 800b806:	2320      	moveq	r3, #32
 800b808:	4618      	mov	r0, r3
 800b80a:	4770      	bx	lr
 800b80c:	2300      	movs	r3, #0
 800b80e:	e7e4      	b.n	800b7da <__hi0bits+0xa>

0800b810 <__lo0bits>:
 800b810:	6803      	ldr	r3, [r0, #0]
 800b812:	f013 0207 	ands.w	r2, r3, #7
 800b816:	4601      	mov	r1, r0
 800b818:	d00b      	beq.n	800b832 <__lo0bits+0x22>
 800b81a:	07da      	lsls	r2, r3, #31
 800b81c:	d423      	bmi.n	800b866 <__lo0bits+0x56>
 800b81e:	0798      	lsls	r0, r3, #30
 800b820:	bf49      	itett	mi
 800b822:	085b      	lsrmi	r3, r3, #1
 800b824:	089b      	lsrpl	r3, r3, #2
 800b826:	2001      	movmi	r0, #1
 800b828:	600b      	strmi	r3, [r1, #0]
 800b82a:	bf5c      	itt	pl
 800b82c:	600b      	strpl	r3, [r1, #0]
 800b82e:	2002      	movpl	r0, #2
 800b830:	4770      	bx	lr
 800b832:	b298      	uxth	r0, r3
 800b834:	b9a8      	cbnz	r0, 800b862 <__lo0bits+0x52>
 800b836:	0c1b      	lsrs	r3, r3, #16
 800b838:	2010      	movs	r0, #16
 800b83a:	b2da      	uxtb	r2, r3
 800b83c:	b90a      	cbnz	r2, 800b842 <__lo0bits+0x32>
 800b83e:	3008      	adds	r0, #8
 800b840:	0a1b      	lsrs	r3, r3, #8
 800b842:	071a      	lsls	r2, r3, #28
 800b844:	bf04      	itt	eq
 800b846:	091b      	lsreq	r3, r3, #4
 800b848:	3004      	addeq	r0, #4
 800b84a:	079a      	lsls	r2, r3, #30
 800b84c:	bf04      	itt	eq
 800b84e:	089b      	lsreq	r3, r3, #2
 800b850:	3002      	addeq	r0, #2
 800b852:	07da      	lsls	r2, r3, #31
 800b854:	d403      	bmi.n	800b85e <__lo0bits+0x4e>
 800b856:	085b      	lsrs	r3, r3, #1
 800b858:	f100 0001 	add.w	r0, r0, #1
 800b85c:	d005      	beq.n	800b86a <__lo0bits+0x5a>
 800b85e:	600b      	str	r3, [r1, #0]
 800b860:	4770      	bx	lr
 800b862:	4610      	mov	r0, r2
 800b864:	e7e9      	b.n	800b83a <__lo0bits+0x2a>
 800b866:	2000      	movs	r0, #0
 800b868:	4770      	bx	lr
 800b86a:	2020      	movs	r0, #32
 800b86c:	4770      	bx	lr
	...

0800b870 <__i2b>:
 800b870:	b510      	push	{r4, lr}
 800b872:	460c      	mov	r4, r1
 800b874:	2101      	movs	r1, #1
 800b876:	f7ff feb9 	bl	800b5ec <_Balloc>
 800b87a:	4602      	mov	r2, r0
 800b87c:	b928      	cbnz	r0, 800b88a <__i2b+0x1a>
 800b87e:	4b05      	ldr	r3, [pc, #20]	; (800b894 <__i2b+0x24>)
 800b880:	4805      	ldr	r0, [pc, #20]	; (800b898 <__i2b+0x28>)
 800b882:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800b886:	f000 fd0d 	bl	800c2a4 <__assert_func>
 800b88a:	2301      	movs	r3, #1
 800b88c:	6144      	str	r4, [r0, #20]
 800b88e:	6103      	str	r3, [r0, #16]
 800b890:	bd10      	pop	{r4, pc}
 800b892:	bf00      	nop
 800b894:	0800d068 	.word	0x0800d068
 800b898:	0800d0f4 	.word	0x0800d0f4

0800b89c <__multiply>:
 800b89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b8a0:	4691      	mov	r9, r2
 800b8a2:	690a      	ldr	r2, [r1, #16]
 800b8a4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b8a8:	429a      	cmp	r2, r3
 800b8aa:	bfb8      	it	lt
 800b8ac:	460b      	movlt	r3, r1
 800b8ae:	460c      	mov	r4, r1
 800b8b0:	bfbc      	itt	lt
 800b8b2:	464c      	movlt	r4, r9
 800b8b4:	4699      	movlt	r9, r3
 800b8b6:	6927      	ldr	r7, [r4, #16]
 800b8b8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b8bc:	68a3      	ldr	r3, [r4, #8]
 800b8be:	6861      	ldr	r1, [r4, #4]
 800b8c0:	eb07 060a 	add.w	r6, r7, sl
 800b8c4:	42b3      	cmp	r3, r6
 800b8c6:	b085      	sub	sp, #20
 800b8c8:	bfb8      	it	lt
 800b8ca:	3101      	addlt	r1, #1
 800b8cc:	f7ff fe8e 	bl	800b5ec <_Balloc>
 800b8d0:	b930      	cbnz	r0, 800b8e0 <__multiply+0x44>
 800b8d2:	4602      	mov	r2, r0
 800b8d4:	4b44      	ldr	r3, [pc, #272]	; (800b9e8 <__multiply+0x14c>)
 800b8d6:	4845      	ldr	r0, [pc, #276]	; (800b9ec <__multiply+0x150>)
 800b8d8:	f240 115d 	movw	r1, #349	; 0x15d
 800b8dc:	f000 fce2 	bl	800c2a4 <__assert_func>
 800b8e0:	f100 0514 	add.w	r5, r0, #20
 800b8e4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b8e8:	462b      	mov	r3, r5
 800b8ea:	2200      	movs	r2, #0
 800b8ec:	4543      	cmp	r3, r8
 800b8ee:	d321      	bcc.n	800b934 <__multiply+0x98>
 800b8f0:	f104 0314 	add.w	r3, r4, #20
 800b8f4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b8f8:	f109 0314 	add.w	r3, r9, #20
 800b8fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b900:	9202      	str	r2, [sp, #8]
 800b902:	1b3a      	subs	r2, r7, r4
 800b904:	3a15      	subs	r2, #21
 800b906:	f022 0203 	bic.w	r2, r2, #3
 800b90a:	3204      	adds	r2, #4
 800b90c:	f104 0115 	add.w	r1, r4, #21
 800b910:	428f      	cmp	r7, r1
 800b912:	bf38      	it	cc
 800b914:	2204      	movcc	r2, #4
 800b916:	9201      	str	r2, [sp, #4]
 800b918:	9a02      	ldr	r2, [sp, #8]
 800b91a:	9303      	str	r3, [sp, #12]
 800b91c:	429a      	cmp	r2, r3
 800b91e:	d80c      	bhi.n	800b93a <__multiply+0x9e>
 800b920:	2e00      	cmp	r6, #0
 800b922:	dd03      	ble.n	800b92c <__multiply+0x90>
 800b924:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d05a      	beq.n	800b9e2 <__multiply+0x146>
 800b92c:	6106      	str	r6, [r0, #16]
 800b92e:	b005      	add	sp, #20
 800b930:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b934:	f843 2b04 	str.w	r2, [r3], #4
 800b938:	e7d8      	b.n	800b8ec <__multiply+0x50>
 800b93a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b93e:	f1ba 0f00 	cmp.w	sl, #0
 800b942:	d024      	beq.n	800b98e <__multiply+0xf2>
 800b944:	f104 0e14 	add.w	lr, r4, #20
 800b948:	46a9      	mov	r9, r5
 800b94a:	f04f 0c00 	mov.w	ip, #0
 800b94e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b952:	f8d9 1000 	ldr.w	r1, [r9]
 800b956:	fa1f fb82 	uxth.w	fp, r2
 800b95a:	b289      	uxth	r1, r1
 800b95c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b960:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b964:	f8d9 2000 	ldr.w	r2, [r9]
 800b968:	4461      	add	r1, ip
 800b96a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b96e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b972:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b976:	b289      	uxth	r1, r1
 800b978:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b97c:	4577      	cmp	r7, lr
 800b97e:	f849 1b04 	str.w	r1, [r9], #4
 800b982:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b986:	d8e2      	bhi.n	800b94e <__multiply+0xb2>
 800b988:	9a01      	ldr	r2, [sp, #4]
 800b98a:	f845 c002 	str.w	ip, [r5, r2]
 800b98e:	9a03      	ldr	r2, [sp, #12]
 800b990:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b994:	3304      	adds	r3, #4
 800b996:	f1b9 0f00 	cmp.w	r9, #0
 800b99a:	d020      	beq.n	800b9de <__multiply+0x142>
 800b99c:	6829      	ldr	r1, [r5, #0]
 800b99e:	f104 0c14 	add.w	ip, r4, #20
 800b9a2:	46ae      	mov	lr, r5
 800b9a4:	f04f 0a00 	mov.w	sl, #0
 800b9a8:	f8bc b000 	ldrh.w	fp, [ip]
 800b9ac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b9b0:	fb09 220b 	mla	r2, r9, fp, r2
 800b9b4:	4492      	add	sl, r2
 800b9b6:	b289      	uxth	r1, r1
 800b9b8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800b9bc:	f84e 1b04 	str.w	r1, [lr], #4
 800b9c0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800b9c4:	f8be 1000 	ldrh.w	r1, [lr]
 800b9c8:	0c12      	lsrs	r2, r2, #16
 800b9ca:	fb09 1102 	mla	r1, r9, r2, r1
 800b9ce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800b9d2:	4567      	cmp	r7, ip
 800b9d4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b9d8:	d8e6      	bhi.n	800b9a8 <__multiply+0x10c>
 800b9da:	9a01      	ldr	r2, [sp, #4]
 800b9dc:	50a9      	str	r1, [r5, r2]
 800b9de:	3504      	adds	r5, #4
 800b9e0:	e79a      	b.n	800b918 <__multiply+0x7c>
 800b9e2:	3e01      	subs	r6, #1
 800b9e4:	e79c      	b.n	800b920 <__multiply+0x84>
 800b9e6:	bf00      	nop
 800b9e8:	0800d068 	.word	0x0800d068
 800b9ec:	0800d0f4 	.word	0x0800d0f4

0800b9f0 <__pow5mult>:
 800b9f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9f4:	4615      	mov	r5, r2
 800b9f6:	f012 0203 	ands.w	r2, r2, #3
 800b9fa:	4606      	mov	r6, r0
 800b9fc:	460f      	mov	r7, r1
 800b9fe:	d007      	beq.n	800ba10 <__pow5mult+0x20>
 800ba00:	4c25      	ldr	r4, [pc, #148]	; (800ba98 <__pow5mult+0xa8>)
 800ba02:	3a01      	subs	r2, #1
 800ba04:	2300      	movs	r3, #0
 800ba06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ba0a:	f7ff fe51 	bl	800b6b0 <__multadd>
 800ba0e:	4607      	mov	r7, r0
 800ba10:	10ad      	asrs	r5, r5, #2
 800ba12:	d03d      	beq.n	800ba90 <__pow5mult+0xa0>
 800ba14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ba16:	b97c      	cbnz	r4, 800ba38 <__pow5mult+0x48>
 800ba18:	2010      	movs	r0, #16
 800ba1a:	f7fc fd79 	bl	8008510 <malloc>
 800ba1e:	4602      	mov	r2, r0
 800ba20:	6270      	str	r0, [r6, #36]	; 0x24
 800ba22:	b928      	cbnz	r0, 800ba30 <__pow5mult+0x40>
 800ba24:	4b1d      	ldr	r3, [pc, #116]	; (800ba9c <__pow5mult+0xac>)
 800ba26:	481e      	ldr	r0, [pc, #120]	; (800baa0 <__pow5mult+0xb0>)
 800ba28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ba2c:	f000 fc3a 	bl	800c2a4 <__assert_func>
 800ba30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ba34:	6004      	str	r4, [r0, #0]
 800ba36:	60c4      	str	r4, [r0, #12]
 800ba38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800ba3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ba40:	b94c      	cbnz	r4, 800ba56 <__pow5mult+0x66>
 800ba42:	f240 2171 	movw	r1, #625	; 0x271
 800ba46:	4630      	mov	r0, r6
 800ba48:	f7ff ff12 	bl	800b870 <__i2b>
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ba52:	4604      	mov	r4, r0
 800ba54:	6003      	str	r3, [r0, #0]
 800ba56:	f04f 0900 	mov.w	r9, #0
 800ba5a:	07eb      	lsls	r3, r5, #31
 800ba5c:	d50a      	bpl.n	800ba74 <__pow5mult+0x84>
 800ba5e:	4639      	mov	r1, r7
 800ba60:	4622      	mov	r2, r4
 800ba62:	4630      	mov	r0, r6
 800ba64:	f7ff ff1a 	bl	800b89c <__multiply>
 800ba68:	4639      	mov	r1, r7
 800ba6a:	4680      	mov	r8, r0
 800ba6c:	4630      	mov	r0, r6
 800ba6e:	f7ff fdfd 	bl	800b66c <_Bfree>
 800ba72:	4647      	mov	r7, r8
 800ba74:	106d      	asrs	r5, r5, #1
 800ba76:	d00b      	beq.n	800ba90 <__pow5mult+0xa0>
 800ba78:	6820      	ldr	r0, [r4, #0]
 800ba7a:	b938      	cbnz	r0, 800ba8c <__pow5mult+0x9c>
 800ba7c:	4622      	mov	r2, r4
 800ba7e:	4621      	mov	r1, r4
 800ba80:	4630      	mov	r0, r6
 800ba82:	f7ff ff0b 	bl	800b89c <__multiply>
 800ba86:	6020      	str	r0, [r4, #0]
 800ba88:	f8c0 9000 	str.w	r9, [r0]
 800ba8c:	4604      	mov	r4, r0
 800ba8e:	e7e4      	b.n	800ba5a <__pow5mult+0x6a>
 800ba90:	4638      	mov	r0, r7
 800ba92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ba96:	bf00      	nop
 800ba98:	0800d240 	.word	0x0800d240
 800ba9c:	0800cff6 	.word	0x0800cff6
 800baa0:	0800d0f4 	.word	0x0800d0f4

0800baa4 <__lshift>:
 800baa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800baa8:	460c      	mov	r4, r1
 800baaa:	6849      	ldr	r1, [r1, #4]
 800baac:	6923      	ldr	r3, [r4, #16]
 800baae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bab2:	68a3      	ldr	r3, [r4, #8]
 800bab4:	4607      	mov	r7, r0
 800bab6:	4691      	mov	r9, r2
 800bab8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800babc:	f108 0601 	add.w	r6, r8, #1
 800bac0:	42b3      	cmp	r3, r6
 800bac2:	db0b      	blt.n	800badc <__lshift+0x38>
 800bac4:	4638      	mov	r0, r7
 800bac6:	f7ff fd91 	bl	800b5ec <_Balloc>
 800baca:	4605      	mov	r5, r0
 800bacc:	b948      	cbnz	r0, 800bae2 <__lshift+0x3e>
 800bace:	4602      	mov	r2, r0
 800bad0:	4b2a      	ldr	r3, [pc, #168]	; (800bb7c <__lshift+0xd8>)
 800bad2:	482b      	ldr	r0, [pc, #172]	; (800bb80 <__lshift+0xdc>)
 800bad4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bad8:	f000 fbe4 	bl	800c2a4 <__assert_func>
 800badc:	3101      	adds	r1, #1
 800bade:	005b      	lsls	r3, r3, #1
 800bae0:	e7ee      	b.n	800bac0 <__lshift+0x1c>
 800bae2:	2300      	movs	r3, #0
 800bae4:	f100 0114 	add.w	r1, r0, #20
 800bae8:	f100 0210 	add.w	r2, r0, #16
 800baec:	4618      	mov	r0, r3
 800baee:	4553      	cmp	r3, sl
 800baf0:	db37      	blt.n	800bb62 <__lshift+0xbe>
 800baf2:	6920      	ldr	r0, [r4, #16]
 800baf4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800baf8:	f104 0314 	add.w	r3, r4, #20
 800bafc:	f019 091f 	ands.w	r9, r9, #31
 800bb00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bb04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bb08:	d02f      	beq.n	800bb6a <__lshift+0xc6>
 800bb0a:	f1c9 0e20 	rsb	lr, r9, #32
 800bb0e:	468a      	mov	sl, r1
 800bb10:	f04f 0c00 	mov.w	ip, #0
 800bb14:	681a      	ldr	r2, [r3, #0]
 800bb16:	fa02 f209 	lsl.w	r2, r2, r9
 800bb1a:	ea42 020c 	orr.w	r2, r2, ip
 800bb1e:	f84a 2b04 	str.w	r2, [sl], #4
 800bb22:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb26:	4298      	cmp	r0, r3
 800bb28:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bb2c:	d8f2      	bhi.n	800bb14 <__lshift+0x70>
 800bb2e:	1b03      	subs	r3, r0, r4
 800bb30:	3b15      	subs	r3, #21
 800bb32:	f023 0303 	bic.w	r3, r3, #3
 800bb36:	3304      	adds	r3, #4
 800bb38:	f104 0215 	add.w	r2, r4, #21
 800bb3c:	4290      	cmp	r0, r2
 800bb3e:	bf38      	it	cc
 800bb40:	2304      	movcc	r3, #4
 800bb42:	f841 c003 	str.w	ip, [r1, r3]
 800bb46:	f1bc 0f00 	cmp.w	ip, #0
 800bb4a:	d001      	beq.n	800bb50 <__lshift+0xac>
 800bb4c:	f108 0602 	add.w	r6, r8, #2
 800bb50:	3e01      	subs	r6, #1
 800bb52:	4638      	mov	r0, r7
 800bb54:	612e      	str	r6, [r5, #16]
 800bb56:	4621      	mov	r1, r4
 800bb58:	f7ff fd88 	bl	800b66c <_Bfree>
 800bb5c:	4628      	mov	r0, r5
 800bb5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bb62:	f842 0f04 	str.w	r0, [r2, #4]!
 800bb66:	3301      	adds	r3, #1
 800bb68:	e7c1      	b.n	800baee <__lshift+0x4a>
 800bb6a:	3904      	subs	r1, #4
 800bb6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bb70:	f841 2f04 	str.w	r2, [r1, #4]!
 800bb74:	4298      	cmp	r0, r3
 800bb76:	d8f9      	bhi.n	800bb6c <__lshift+0xc8>
 800bb78:	e7ea      	b.n	800bb50 <__lshift+0xac>
 800bb7a:	bf00      	nop
 800bb7c:	0800d068 	.word	0x0800d068
 800bb80:	0800d0f4 	.word	0x0800d0f4

0800bb84 <__mcmp>:
 800bb84:	b530      	push	{r4, r5, lr}
 800bb86:	6902      	ldr	r2, [r0, #16]
 800bb88:	690c      	ldr	r4, [r1, #16]
 800bb8a:	1b12      	subs	r2, r2, r4
 800bb8c:	d10e      	bne.n	800bbac <__mcmp+0x28>
 800bb8e:	f100 0314 	add.w	r3, r0, #20
 800bb92:	3114      	adds	r1, #20
 800bb94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bb98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bb9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bba0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bba4:	42a5      	cmp	r5, r4
 800bba6:	d003      	beq.n	800bbb0 <__mcmp+0x2c>
 800bba8:	d305      	bcc.n	800bbb6 <__mcmp+0x32>
 800bbaa:	2201      	movs	r2, #1
 800bbac:	4610      	mov	r0, r2
 800bbae:	bd30      	pop	{r4, r5, pc}
 800bbb0:	4283      	cmp	r3, r0
 800bbb2:	d3f3      	bcc.n	800bb9c <__mcmp+0x18>
 800bbb4:	e7fa      	b.n	800bbac <__mcmp+0x28>
 800bbb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bbba:	e7f7      	b.n	800bbac <__mcmp+0x28>

0800bbbc <__mdiff>:
 800bbbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbc0:	460c      	mov	r4, r1
 800bbc2:	4606      	mov	r6, r0
 800bbc4:	4611      	mov	r1, r2
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	4690      	mov	r8, r2
 800bbca:	f7ff ffdb 	bl	800bb84 <__mcmp>
 800bbce:	1e05      	subs	r5, r0, #0
 800bbd0:	d110      	bne.n	800bbf4 <__mdiff+0x38>
 800bbd2:	4629      	mov	r1, r5
 800bbd4:	4630      	mov	r0, r6
 800bbd6:	f7ff fd09 	bl	800b5ec <_Balloc>
 800bbda:	b930      	cbnz	r0, 800bbea <__mdiff+0x2e>
 800bbdc:	4b3a      	ldr	r3, [pc, #232]	; (800bcc8 <__mdiff+0x10c>)
 800bbde:	4602      	mov	r2, r0
 800bbe0:	f240 2132 	movw	r1, #562	; 0x232
 800bbe4:	4839      	ldr	r0, [pc, #228]	; (800bccc <__mdiff+0x110>)
 800bbe6:	f000 fb5d 	bl	800c2a4 <__assert_func>
 800bbea:	2301      	movs	r3, #1
 800bbec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bbf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf4:	bfa4      	itt	ge
 800bbf6:	4643      	movge	r3, r8
 800bbf8:	46a0      	movge	r8, r4
 800bbfa:	4630      	mov	r0, r6
 800bbfc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bc00:	bfa6      	itte	ge
 800bc02:	461c      	movge	r4, r3
 800bc04:	2500      	movge	r5, #0
 800bc06:	2501      	movlt	r5, #1
 800bc08:	f7ff fcf0 	bl	800b5ec <_Balloc>
 800bc0c:	b920      	cbnz	r0, 800bc18 <__mdiff+0x5c>
 800bc0e:	4b2e      	ldr	r3, [pc, #184]	; (800bcc8 <__mdiff+0x10c>)
 800bc10:	4602      	mov	r2, r0
 800bc12:	f44f 7110 	mov.w	r1, #576	; 0x240
 800bc16:	e7e5      	b.n	800bbe4 <__mdiff+0x28>
 800bc18:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bc1c:	6926      	ldr	r6, [r4, #16]
 800bc1e:	60c5      	str	r5, [r0, #12]
 800bc20:	f104 0914 	add.w	r9, r4, #20
 800bc24:	f108 0514 	add.w	r5, r8, #20
 800bc28:	f100 0e14 	add.w	lr, r0, #20
 800bc2c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800bc30:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bc34:	f108 0210 	add.w	r2, r8, #16
 800bc38:	46f2      	mov	sl, lr
 800bc3a:	2100      	movs	r1, #0
 800bc3c:	f859 3b04 	ldr.w	r3, [r9], #4
 800bc40:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bc44:	fa1f f883 	uxth.w	r8, r3
 800bc48:	fa11 f18b 	uxtah	r1, r1, fp
 800bc4c:	0c1b      	lsrs	r3, r3, #16
 800bc4e:	eba1 0808 	sub.w	r8, r1, r8
 800bc52:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bc56:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bc5a:	fa1f f888 	uxth.w	r8, r8
 800bc5e:	1419      	asrs	r1, r3, #16
 800bc60:	454e      	cmp	r6, r9
 800bc62:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bc66:	f84a 3b04 	str.w	r3, [sl], #4
 800bc6a:	d8e7      	bhi.n	800bc3c <__mdiff+0x80>
 800bc6c:	1b33      	subs	r3, r6, r4
 800bc6e:	3b15      	subs	r3, #21
 800bc70:	f023 0303 	bic.w	r3, r3, #3
 800bc74:	3304      	adds	r3, #4
 800bc76:	3415      	adds	r4, #21
 800bc78:	42a6      	cmp	r6, r4
 800bc7a:	bf38      	it	cc
 800bc7c:	2304      	movcc	r3, #4
 800bc7e:	441d      	add	r5, r3
 800bc80:	4473      	add	r3, lr
 800bc82:	469e      	mov	lr, r3
 800bc84:	462e      	mov	r6, r5
 800bc86:	4566      	cmp	r6, ip
 800bc88:	d30e      	bcc.n	800bca8 <__mdiff+0xec>
 800bc8a:	f10c 0203 	add.w	r2, ip, #3
 800bc8e:	1b52      	subs	r2, r2, r5
 800bc90:	f022 0203 	bic.w	r2, r2, #3
 800bc94:	3d03      	subs	r5, #3
 800bc96:	45ac      	cmp	ip, r5
 800bc98:	bf38      	it	cc
 800bc9a:	2200      	movcc	r2, #0
 800bc9c:	441a      	add	r2, r3
 800bc9e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800bca2:	b17b      	cbz	r3, 800bcc4 <__mdiff+0x108>
 800bca4:	6107      	str	r7, [r0, #16]
 800bca6:	e7a3      	b.n	800bbf0 <__mdiff+0x34>
 800bca8:	f856 8b04 	ldr.w	r8, [r6], #4
 800bcac:	fa11 f288 	uxtah	r2, r1, r8
 800bcb0:	1414      	asrs	r4, r2, #16
 800bcb2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bcb6:	b292      	uxth	r2, r2
 800bcb8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bcbc:	f84e 2b04 	str.w	r2, [lr], #4
 800bcc0:	1421      	asrs	r1, r4, #16
 800bcc2:	e7e0      	b.n	800bc86 <__mdiff+0xca>
 800bcc4:	3f01      	subs	r7, #1
 800bcc6:	e7ea      	b.n	800bc9e <__mdiff+0xe2>
 800bcc8:	0800d068 	.word	0x0800d068
 800bccc:	0800d0f4 	.word	0x0800d0f4

0800bcd0 <__ulp>:
 800bcd0:	b082      	sub	sp, #8
 800bcd2:	ed8d 0b00 	vstr	d0, [sp]
 800bcd6:	9b01      	ldr	r3, [sp, #4]
 800bcd8:	4912      	ldr	r1, [pc, #72]	; (800bd24 <__ulp+0x54>)
 800bcda:	4019      	ands	r1, r3
 800bcdc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800bce0:	2900      	cmp	r1, #0
 800bce2:	dd05      	ble.n	800bcf0 <__ulp+0x20>
 800bce4:	2200      	movs	r2, #0
 800bce6:	460b      	mov	r3, r1
 800bce8:	ec43 2b10 	vmov	d0, r2, r3
 800bcec:	b002      	add	sp, #8
 800bcee:	4770      	bx	lr
 800bcf0:	4249      	negs	r1, r1
 800bcf2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800bcf6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800bcfa:	f04f 0200 	mov.w	r2, #0
 800bcfe:	f04f 0300 	mov.w	r3, #0
 800bd02:	da04      	bge.n	800bd0e <__ulp+0x3e>
 800bd04:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800bd08:	fa41 f300 	asr.w	r3, r1, r0
 800bd0c:	e7ec      	b.n	800bce8 <__ulp+0x18>
 800bd0e:	f1a0 0114 	sub.w	r1, r0, #20
 800bd12:	291e      	cmp	r1, #30
 800bd14:	bfda      	itte	le
 800bd16:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800bd1a:	fa20 f101 	lsrle.w	r1, r0, r1
 800bd1e:	2101      	movgt	r1, #1
 800bd20:	460a      	mov	r2, r1
 800bd22:	e7e1      	b.n	800bce8 <__ulp+0x18>
 800bd24:	7ff00000 	.word	0x7ff00000

0800bd28 <__b2d>:
 800bd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd2a:	6905      	ldr	r5, [r0, #16]
 800bd2c:	f100 0714 	add.w	r7, r0, #20
 800bd30:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800bd34:	1f2e      	subs	r6, r5, #4
 800bd36:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800bd3a:	4620      	mov	r0, r4
 800bd3c:	f7ff fd48 	bl	800b7d0 <__hi0bits>
 800bd40:	f1c0 0320 	rsb	r3, r0, #32
 800bd44:	280a      	cmp	r0, #10
 800bd46:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800bdc4 <__b2d+0x9c>
 800bd4a:	600b      	str	r3, [r1, #0]
 800bd4c:	dc14      	bgt.n	800bd78 <__b2d+0x50>
 800bd4e:	f1c0 0e0b 	rsb	lr, r0, #11
 800bd52:	fa24 f10e 	lsr.w	r1, r4, lr
 800bd56:	42b7      	cmp	r7, r6
 800bd58:	ea41 030c 	orr.w	r3, r1, ip
 800bd5c:	bf34      	ite	cc
 800bd5e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bd62:	2100      	movcs	r1, #0
 800bd64:	3015      	adds	r0, #21
 800bd66:	fa04 f000 	lsl.w	r0, r4, r0
 800bd6a:	fa21 f10e 	lsr.w	r1, r1, lr
 800bd6e:	ea40 0201 	orr.w	r2, r0, r1
 800bd72:	ec43 2b10 	vmov	d0, r2, r3
 800bd76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bd78:	42b7      	cmp	r7, r6
 800bd7a:	bf3a      	itte	cc
 800bd7c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800bd80:	f1a5 0608 	subcc.w	r6, r5, #8
 800bd84:	2100      	movcs	r1, #0
 800bd86:	380b      	subs	r0, #11
 800bd88:	d017      	beq.n	800bdba <__b2d+0x92>
 800bd8a:	f1c0 0c20 	rsb	ip, r0, #32
 800bd8e:	fa04 f500 	lsl.w	r5, r4, r0
 800bd92:	42be      	cmp	r6, r7
 800bd94:	fa21 f40c 	lsr.w	r4, r1, ip
 800bd98:	ea45 0504 	orr.w	r5, r5, r4
 800bd9c:	bf8c      	ite	hi
 800bd9e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800bda2:	2400      	movls	r4, #0
 800bda4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800bda8:	fa01 f000 	lsl.w	r0, r1, r0
 800bdac:	fa24 f40c 	lsr.w	r4, r4, ip
 800bdb0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800bdb4:	ea40 0204 	orr.w	r2, r0, r4
 800bdb8:	e7db      	b.n	800bd72 <__b2d+0x4a>
 800bdba:	ea44 030c 	orr.w	r3, r4, ip
 800bdbe:	460a      	mov	r2, r1
 800bdc0:	e7d7      	b.n	800bd72 <__b2d+0x4a>
 800bdc2:	bf00      	nop
 800bdc4:	3ff00000 	.word	0x3ff00000

0800bdc8 <__d2b>:
 800bdc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bdcc:	4689      	mov	r9, r1
 800bdce:	2101      	movs	r1, #1
 800bdd0:	ec57 6b10 	vmov	r6, r7, d0
 800bdd4:	4690      	mov	r8, r2
 800bdd6:	f7ff fc09 	bl	800b5ec <_Balloc>
 800bdda:	4604      	mov	r4, r0
 800bddc:	b930      	cbnz	r0, 800bdec <__d2b+0x24>
 800bdde:	4602      	mov	r2, r0
 800bde0:	4b25      	ldr	r3, [pc, #148]	; (800be78 <__d2b+0xb0>)
 800bde2:	4826      	ldr	r0, [pc, #152]	; (800be7c <__d2b+0xb4>)
 800bde4:	f240 310a 	movw	r1, #778	; 0x30a
 800bde8:	f000 fa5c 	bl	800c2a4 <__assert_func>
 800bdec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800bdf0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bdf4:	bb35      	cbnz	r5, 800be44 <__d2b+0x7c>
 800bdf6:	2e00      	cmp	r6, #0
 800bdf8:	9301      	str	r3, [sp, #4]
 800bdfa:	d028      	beq.n	800be4e <__d2b+0x86>
 800bdfc:	4668      	mov	r0, sp
 800bdfe:	9600      	str	r6, [sp, #0]
 800be00:	f7ff fd06 	bl	800b810 <__lo0bits>
 800be04:	9900      	ldr	r1, [sp, #0]
 800be06:	b300      	cbz	r0, 800be4a <__d2b+0x82>
 800be08:	9a01      	ldr	r2, [sp, #4]
 800be0a:	f1c0 0320 	rsb	r3, r0, #32
 800be0e:	fa02 f303 	lsl.w	r3, r2, r3
 800be12:	430b      	orrs	r3, r1
 800be14:	40c2      	lsrs	r2, r0
 800be16:	6163      	str	r3, [r4, #20]
 800be18:	9201      	str	r2, [sp, #4]
 800be1a:	9b01      	ldr	r3, [sp, #4]
 800be1c:	61a3      	str	r3, [r4, #24]
 800be1e:	2b00      	cmp	r3, #0
 800be20:	bf14      	ite	ne
 800be22:	2202      	movne	r2, #2
 800be24:	2201      	moveq	r2, #1
 800be26:	6122      	str	r2, [r4, #16]
 800be28:	b1d5      	cbz	r5, 800be60 <__d2b+0x98>
 800be2a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800be2e:	4405      	add	r5, r0
 800be30:	f8c9 5000 	str.w	r5, [r9]
 800be34:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800be38:	f8c8 0000 	str.w	r0, [r8]
 800be3c:	4620      	mov	r0, r4
 800be3e:	b003      	add	sp, #12
 800be40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800be44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800be48:	e7d5      	b.n	800bdf6 <__d2b+0x2e>
 800be4a:	6161      	str	r1, [r4, #20]
 800be4c:	e7e5      	b.n	800be1a <__d2b+0x52>
 800be4e:	a801      	add	r0, sp, #4
 800be50:	f7ff fcde 	bl	800b810 <__lo0bits>
 800be54:	9b01      	ldr	r3, [sp, #4]
 800be56:	6163      	str	r3, [r4, #20]
 800be58:	2201      	movs	r2, #1
 800be5a:	6122      	str	r2, [r4, #16]
 800be5c:	3020      	adds	r0, #32
 800be5e:	e7e3      	b.n	800be28 <__d2b+0x60>
 800be60:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800be64:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800be68:	f8c9 0000 	str.w	r0, [r9]
 800be6c:	6918      	ldr	r0, [r3, #16]
 800be6e:	f7ff fcaf 	bl	800b7d0 <__hi0bits>
 800be72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800be76:	e7df      	b.n	800be38 <__d2b+0x70>
 800be78:	0800d068 	.word	0x0800d068
 800be7c:	0800d0f4 	.word	0x0800d0f4

0800be80 <__ratio>:
 800be80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800be84:	4688      	mov	r8, r1
 800be86:	4669      	mov	r1, sp
 800be88:	4681      	mov	r9, r0
 800be8a:	f7ff ff4d 	bl	800bd28 <__b2d>
 800be8e:	a901      	add	r1, sp, #4
 800be90:	4640      	mov	r0, r8
 800be92:	ec55 4b10 	vmov	r4, r5, d0
 800be96:	f7ff ff47 	bl	800bd28 <__b2d>
 800be9a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800be9e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800bea2:	eba3 0c02 	sub.w	ip, r3, r2
 800bea6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800beaa:	1a9b      	subs	r3, r3, r2
 800beac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800beb0:	ec51 0b10 	vmov	r0, r1, d0
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	bfd6      	itet	le
 800beb8:	460a      	movle	r2, r1
 800beba:	462a      	movgt	r2, r5
 800bebc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800bec0:	468b      	mov	fp, r1
 800bec2:	462f      	mov	r7, r5
 800bec4:	bfd4      	ite	le
 800bec6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800beca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800bece:	4620      	mov	r0, r4
 800bed0:	ee10 2a10 	vmov	r2, s0
 800bed4:	465b      	mov	r3, fp
 800bed6:	4639      	mov	r1, r7
 800bed8:	f7f4 fcb8 	bl	800084c <__aeabi_ddiv>
 800bedc:	ec41 0b10 	vmov	d0, r0, r1
 800bee0:	b003      	add	sp, #12
 800bee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800bee6 <__copybits>:
 800bee6:	3901      	subs	r1, #1
 800bee8:	b570      	push	{r4, r5, r6, lr}
 800beea:	1149      	asrs	r1, r1, #5
 800beec:	6914      	ldr	r4, [r2, #16]
 800beee:	3101      	adds	r1, #1
 800bef0:	f102 0314 	add.w	r3, r2, #20
 800bef4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800bef8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800befc:	1f05      	subs	r5, r0, #4
 800befe:	42a3      	cmp	r3, r4
 800bf00:	d30c      	bcc.n	800bf1c <__copybits+0x36>
 800bf02:	1aa3      	subs	r3, r4, r2
 800bf04:	3b11      	subs	r3, #17
 800bf06:	f023 0303 	bic.w	r3, r3, #3
 800bf0a:	3211      	adds	r2, #17
 800bf0c:	42a2      	cmp	r2, r4
 800bf0e:	bf88      	it	hi
 800bf10:	2300      	movhi	r3, #0
 800bf12:	4418      	add	r0, r3
 800bf14:	2300      	movs	r3, #0
 800bf16:	4288      	cmp	r0, r1
 800bf18:	d305      	bcc.n	800bf26 <__copybits+0x40>
 800bf1a:	bd70      	pop	{r4, r5, r6, pc}
 800bf1c:	f853 6b04 	ldr.w	r6, [r3], #4
 800bf20:	f845 6f04 	str.w	r6, [r5, #4]!
 800bf24:	e7eb      	b.n	800befe <__copybits+0x18>
 800bf26:	f840 3b04 	str.w	r3, [r0], #4
 800bf2a:	e7f4      	b.n	800bf16 <__copybits+0x30>

0800bf2c <__any_on>:
 800bf2c:	f100 0214 	add.w	r2, r0, #20
 800bf30:	6900      	ldr	r0, [r0, #16]
 800bf32:	114b      	asrs	r3, r1, #5
 800bf34:	4298      	cmp	r0, r3
 800bf36:	b510      	push	{r4, lr}
 800bf38:	db11      	blt.n	800bf5e <__any_on+0x32>
 800bf3a:	dd0a      	ble.n	800bf52 <__any_on+0x26>
 800bf3c:	f011 011f 	ands.w	r1, r1, #31
 800bf40:	d007      	beq.n	800bf52 <__any_on+0x26>
 800bf42:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800bf46:	fa24 f001 	lsr.w	r0, r4, r1
 800bf4a:	fa00 f101 	lsl.w	r1, r0, r1
 800bf4e:	428c      	cmp	r4, r1
 800bf50:	d10b      	bne.n	800bf6a <__any_on+0x3e>
 800bf52:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bf56:	4293      	cmp	r3, r2
 800bf58:	d803      	bhi.n	800bf62 <__any_on+0x36>
 800bf5a:	2000      	movs	r0, #0
 800bf5c:	bd10      	pop	{r4, pc}
 800bf5e:	4603      	mov	r3, r0
 800bf60:	e7f7      	b.n	800bf52 <__any_on+0x26>
 800bf62:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bf66:	2900      	cmp	r1, #0
 800bf68:	d0f5      	beq.n	800bf56 <__any_on+0x2a>
 800bf6a:	2001      	movs	r0, #1
 800bf6c:	e7f6      	b.n	800bf5c <__any_on+0x30>

0800bf6e <_calloc_r>:
 800bf6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800bf70:	fba1 2402 	umull	r2, r4, r1, r2
 800bf74:	b94c      	cbnz	r4, 800bf8a <_calloc_r+0x1c>
 800bf76:	4611      	mov	r1, r2
 800bf78:	9201      	str	r2, [sp, #4]
 800bf7a:	f7fc fb4d 	bl	8008618 <_malloc_r>
 800bf7e:	9a01      	ldr	r2, [sp, #4]
 800bf80:	4605      	mov	r5, r0
 800bf82:	b930      	cbnz	r0, 800bf92 <_calloc_r+0x24>
 800bf84:	4628      	mov	r0, r5
 800bf86:	b003      	add	sp, #12
 800bf88:	bd30      	pop	{r4, r5, pc}
 800bf8a:	220c      	movs	r2, #12
 800bf8c:	6002      	str	r2, [r0, #0]
 800bf8e:	2500      	movs	r5, #0
 800bf90:	e7f8      	b.n	800bf84 <_calloc_r+0x16>
 800bf92:	4621      	mov	r1, r4
 800bf94:	f7fc facc 	bl	8008530 <memset>
 800bf98:	e7f4      	b.n	800bf84 <_calloc_r+0x16>

0800bf9a <__ssputs_r>:
 800bf9a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf9e:	688e      	ldr	r6, [r1, #8]
 800bfa0:	429e      	cmp	r6, r3
 800bfa2:	4682      	mov	sl, r0
 800bfa4:	460c      	mov	r4, r1
 800bfa6:	4690      	mov	r8, r2
 800bfa8:	461f      	mov	r7, r3
 800bfaa:	d838      	bhi.n	800c01e <__ssputs_r+0x84>
 800bfac:	898a      	ldrh	r2, [r1, #12]
 800bfae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bfb2:	d032      	beq.n	800c01a <__ssputs_r+0x80>
 800bfb4:	6825      	ldr	r5, [r4, #0]
 800bfb6:	6909      	ldr	r1, [r1, #16]
 800bfb8:	eba5 0901 	sub.w	r9, r5, r1
 800bfbc:	6965      	ldr	r5, [r4, #20]
 800bfbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bfc2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bfc6:	3301      	adds	r3, #1
 800bfc8:	444b      	add	r3, r9
 800bfca:	106d      	asrs	r5, r5, #1
 800bfcc:	429d      	cmp	r5, r3
 800bfce:	bf38      	it	cc
 800bfd0:	461d      	movcc	r5, r3
 800bfd2:	0553      	lsls	r3, r2, #21
 800bfd4:	d531      	bpl.n	800c03a <__ssputs_r+0xa0>
 800bfd6:	4629      	mov	r1, r5
 800bfd8:	f7fc fb1e 	bl	8008618 <_malloc_r>
 800bfdc:	4606      	mov	r6, r0
 800bfde:	b950      	cbnz	r0, 800bff6 <__ssputs_r+0x5c>
 800bfe0:	230c      	movs	r3, #12
 800bfe2:	f8ca 3000 	str.w	r3, [sl]
 800bfe6:	89a3      	ldrh	r3, [r4, #12]
 800bfe8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfec:	81a3      	strh	r3, [r4, #12]
 800bfee:	f04f 30ff 	mov.w	r0, #4294967295
 800bff2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bff6:	6921      	ldr	r1, [r4, #16]
 800bff8:	464a      	mov	r2, r9
 800bffa:	f7ff fadd 	bl	800b5b8 <memcpy>
 800bffe:	89a3      	ldrh	r3, [r4, #12]
 800c000:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c004:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c008:	81a3      	strh	r3, [r4, #12]
 800c00a:	6126      	str	r6, [r4, #16]
 800c00c:	6165      	str	r5, [r4, #20]
 800c00e:	444e      	add	r6, r9
 800c010:	eba5 0509 	sub.w	r5, r5, r9
 800c014:	6026      	str	r6, [r4, #0]
 800c016:	60a5      	str	r5, [r4, #8]
 800c018:	463e      	mov	r6, r7
 800c01a:	42be      	cmp	r6, r7
 800c01c:	d900      	bls.n	800c020 <__ssputs_r+0x86>
 800c01e:	463e      	mov	r6, r7
 800c020:	6820      	ldr	r0, [r4, #0]
 800c022:	4632      	mov	r2, r6
 800c024:	4641      	mov	r1, r8
 800c026:	f000 f970 	bl	800c30a <memmove>
 800c02a:	68a3      	ldr	r3, [r4, #8]
 800c02c:	1b9b      	subs	r3, r3, r6
 800c02e:	60a3      	str	r3, [r4, #8]
 800c030:	6823      	ldr	r3, [r4, #0]
 800c032:	4433      	add	r3, r6
 800c034:	6023      	str	r3, [r4, #0]
 800c036:	2000      	movs	r0, #0
 800c038:	e7db      	b.n	800bff2 <__ssputs_r+0x58>
 800c03a:	462a      	mov	r2, r5
 800c03c:	f000 f97f 	bl	800c33e <_realloc_r>
 800c040:	4606      	mov	r6, r0
 800c042:	2800      	cmp	r0, #0
 800c044:	d1e1      	bne.n	800c00a <__ssputs_r+0x70>
 800c046:	6921      	ldr	r1, [r4, #16]
 800c048:	4650      	mov	r0, sl
 800c04a:	f7fc fa79 	bl	8008540 <_free_r>
 800c04e:	e7c7      	b.n	800bfe0 <__ssputs_r+0x46>

0800c050 <_svfiprintf_r>:
 800c050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c054:	4698      	mov	r8, r3
 800c056:	898b      	ldrh	r3, [r1, #12]
 800c058:	061b      	lsls	r3, r3, #24
 800c05a:	b09d      	sub	sp, #116	; 0x74
 800c05c:	4607      	mov	r7, r0
 800c05e:	460d      	mov	r5, r1
 800c060:	4614      	mov	r4, r2
 800c062:	d50e      	bpl.n	800c082 <_svfiprintf_r+0x32>
 800c064:	690b      	ldr	r3, [r1, #16]
 800c066:	b963      	cbnz	r3, 800c082 <_svfiprintf_r+0x32>
 800c068:	2140      	movs	r1, #64	; 0x40
 800c06a:	f7fc fad5 	bl	8008618 <_malloc_r>
 800c06e:	6028      	str	r0, [r5, #0]
 800c070:	6128      	str	r0, [r5, #16]
 800c072:	b920      	cbnz	r0, 800c07e <_svfiprintf_r+0x2e>
 800c074:	230c      	movs	r3, #12
 800c076:	603b      	str	r3, [r7, #0]
 800c078:	f04f 30ff 	mov.w	r0, #4294967295
 800c07c:	e0d1      	b.n	800c222 <_svfiprintf_r+0x1d2>
 800c07e:	2340      	movs	r3, #64	; 0x40
 800c080:	616b      	str	r3, [r5, #20]
 800c082:	2300      	movs	r3, #0
 800c084:	9309      	str	r3, [sp, #36]	; 0x24
 800c086:	2320      	movs	r3, #32
 800c088:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c08c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c090:	2330      	movs	r3, #48	; 0x30
 800c092:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c23c <_svfiprintf_r+0x1ec>
 800c096:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c09a:	f04f 0901 	mov.w	r9, #1
 800c09e:	4623      	mov	r3, r4
 800c0a0:	469a      	mov	sl, r3
 800c0a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c0a6:	b10a      	cbz	r2, 800c0ac <_svfiprintf_r+0x5c>
 800c0a8:	2a25      	cmp	r2, #37	; 0x25
 800c0aa:	d1f9      	bne.n	800c0a0 <_svfiprintf_r+0x50>
 800c0ac:	ebba 0b04 	subs.w	fp, sl, r4
 800c0b0:	d00b      	beq.n	800c0ca <_svfiprintf_r+0x7a>
 800c0b2:	465b      	mov	r3, fp
 800c0b4:	4622      	mov	r2, r4
 800c0b6:	4629      	mov	r1, r5
 800c0b8:	4638      	mov	r0, r7
 800c0ba:	f7ff ff6e 	bl	800bf9a <__ssputs_r>
 800c0be:	3001      	adds	r0, #1
 800c0c0:	f000 80aa 	beq.w	800c218 <_svfiprintf_r+0x1c8>
 800c0c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c0c6:	445a      	add	r2, fp
 800c0c8:	9209      	str	r2, [sp, #36]	; 0x24
 800c0ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	f000 80a2 	beq.w	800c218 <_svfiprintf_r+0x1c8>
 800c0d4:	2300      	movs	r3, #0
 800c0d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c0da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c0de:	f10a 0a01 	add.w	sl, sl, #1
 800c0e2:	9304      	str	r3, [sp, #16]
 800c0e4:	9307      	str	r3, [sp, #28]
 800c0e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c0ea:	931a      	str	r3, [sp, #104]	; 0x68
 800c0ec:	4654      	mov	r4, sl
 800c0ee:	2205      	movs	r2, #5
 800c0f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c0f4:	4851      	ldr	r0, [pc, #324]	; (800c23c <_svfiprintf_r+0x1ec>)
 800c0f6:	f7f4 f873 	bl	80001e0 <memchr>
 800c0fa:	9a04      	ldr	r2, [sp, #16]
 800c0fc:	b9d8      	cbnz	r0, 800c136 <_svfiprintf_r+0xe6>
 800c0fe:	06d0      	lsls	r0, r2, #27
 800c100:	bf44      	itt	mi
 800c102:	2320      	movmi	r3, #32
 800c104:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c108:	0711      	lsls	r1, r2, #28
 800c10a:	bf44      	itt	mi
 800c10c:	232b      	movmi	r3, #43	; 0x2b
 800c10e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c112:	f89a 3000 	ldrb.w	r3, [sl]
 800c116:	2b2a      	cmp	r3, #42	; 0x2a
 800c118:	d015      	beq.n	800c146 <_svfiprintf_r+0xf6>
 800c11a:	9a07      	ldr	r2, [sp, #28]
 800c11c:	4654      	mov	r4, sl
 800c11e:	2000      	movs	r0, #0
 800c120:	f04f 0c0a 	mov.w	ip, #10
 800c124:	4621      	mov	r1, r4
 800c126:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c12a:	3b30      	subs	r3, #48	; 0x30
 800c12c:	2b09      	cmp	r3, #9
 800c12e:	d94e      	bls.n	800c1ce <_svfiprintf_r+0x17e>
 800c130:	b1b0      	cbz	r0, 800c160 <_svfiprintf_r+0x110>
 800c132:	9207      	str	r2, [sp, #28]
 800c134:	e014      	b.n	800c160 <_svfiprintf_r+0x110>
 800c136:	eba0 0308 	sub.w	r3, r0, r8
 800c13a:	fa09 f303 	lsl.w	r3, r9, r3
 800c13e:	4313      	orrs	r3, r2
 800c140:	9304      	str	r3, [sp, #16]
 800c142:	46a2      	mov	sl, r4
 800c144:	e7d2      	b.n	800c0ec <_svfiprintf_r+0x9c>
 800c146:	9b03      	ldr	r3, [sp, #12]
 800c148:	1d19      	adds	r1, r3, #4
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	9103      	str	r1, [sp, #12]
 800c14e:	2b00      	cmp	r3, #0
 800c150:	bfbb      	ittet	lt
 800c152:	425b      	neglt	r3, r3
 800c154:	f042 0202 	orrlt.w	r2, r2, #2
 800c158:	9307      	strge	r3, [sp, #28]
 800c15a:	9307      	strlt	r3, [sp, #28]
 800c15c:	bfb8      	it	lt
 800c15e:	9204      	strlt	r2, [sp, #16]
 800c160:	7823      	ldrb	r3, [r4, #0]
 800c162:	2b2e      	cmp	r3, #46	; 0x2e
 800c164:	d10c      	bne.n	800c180 <_svfiprintf_r+0x130>
 800c166:	7863      	ldrb	r3, [r4, #1]
 800c168:	2b2a      	cmp	r3, #42	; 0x2a
 800c16a:	d135      	bne.n	800c1d8 <_svfiprintf_r+0x188>
 800c16c:	9b03      	ldr	r3, [sp, #12]
 800c16e:	1d1a      	adds	r2, r3, #4
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	9203      	str	r2, [sp, #12]
 800c174:	2b00      	cmp	r3, #0
 800c176:	bfb8      	it	lt
 800c178:	f04f 33ff 	movlt.w	r3, #4294967295
 800c17c:	3402      	adds	r4, #2
 800c17e:	9305      	str	r3, [sp, #20]
 800c180:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c24c <_svfiprintf_r+0x1fc>
 800c184:	7821      	ldrb	r1, [r4, #0]
 800c186:	2203      	movs	r2, #3
 800c188:	4650      	mov	r0, sl
 800c18a:	f7f4 f829 	bl	80001e0 <memchr>
 800c18e:	b140      	cbz	r0, 800c1a2 <_svfiprintf_r+0x152>
 800c190:	2340      	movs	r3, #64	; 0x40
 800c192:	eba0 000a 	sub.w	r0, r0, sl
 800c196:	fa03 f000 	lsl.w	r0, r3, r0
 800c19a:	9b04      	ldr	r3, [sp, #16]
 800c19c:	4303      	orrs	r3, r0
 800c19e:	3401      	adds	r4, #1
 800c1a0:	9304      	str	r3, [sp, #16]
 800c1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c1a6:	4826      	ldr	r0, [pc, #152]	; (800c240 <_svfiprintf_r+0x1f0>)
 800c1a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c1ac:	2206      	movs	r2, #6
 800c1ae:	f7f4 f817 	bl	80001e0 <memchr>
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	d038      	beq.n	800c228 <_svfiprintf_r+0x1d8>
 800c1b6:	4b23      	ldr	r3, [pc, #140]	; (800c244 <_svfiprintf_r+0x1f4>)
 800c1b8:	bb1b      	cbnz	r3, 800c202 <_svfiprintf_r+0x1b2>
 800c1ba:	9b03      	ldr	r3, [sp, #12]
 800c1bc:	3307      	adds	r3, #7
 800c1be:	f023 0307 	bic.w	r3, r3, #7
 800c1c2:	3308      	adds	r3, #8
 800c1c4:	9303      	str	r3, [sp, #12]
 800c1c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1c8:	4433      	add	r3, r6
 800c1ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c1cc:	e767      	b.n	800c09e <_svfiprintf_r+0x4e>
 800c1ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800c1d2:	460c      	mov	r4, r1
 800c1d4:	2001      	movs	r0, #1
 800c1d6:	e7a5      	b.n	800c124 <_svfiprintf_r+0xd4>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	3401      	adds	r4, #1
 800c1dc:	9305      	str	r3, [sp, #20]
 800c1de:	4619      	mov	r1, r3
 800c1e0:	f04f 0c0a 	mov.w	ip, #10
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c1ea:	3a30      	subs	r2, #48	; 0x30
 800c1ec:	2a09      	cmp	r2, #9
 800c1ee:	d903      	bls.n	800c1f8 <_svfiprintf_r+0x1a8>
 800c1f0:	2b00      	cmp	r3, #0
 800c1f2:	d0c5      	beq.n	800c180 <_svfiprintf_r+0x130>
 800c1f4:	9105      	str	r1, [sp, #20]
 800c1f6:	e7c3      	b.n	800c180 <_svfiprintf_r+0x130>
 800c1f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c1fc:	4604      	mov	r4, r0
 800c1fe:	2301      	movs	r3, #1
 800c200:	e7f0      	b.n	800c1e4 <_svfiprintf_r+0x194>
 800c202:	ab03      	add	r3, sp, #12
 800c204:	9300      	str	r3, [sp, #0]
 800c206:	462a      	mov	r2, r5
 800c208:	4b0f      	ldr	r3, [pc, #60]	; (800c248 <_svfiprintf_r+0x1f8>)
 800c20a:	a904      	add	r1, sp, #16
 800c20c:	4638      	mov	r0, r7
 800c20e:	f7fc fb17 	bl	8008840 <_printf_float>
 800c212:	1c42      	adds	r2, r0, #1
 800c214:	4606      	mov	r6, r0
 800c216:	d1d6      	bne.n	800c1c6 <_svfiprintf_r+0x176>
 800c218:	89ab      	ldrh	r3, [r5, #12]
 800c21a:	065b      	lsls	r3, r3, #25
 800c21c:	f53f af2c 	bmi.w	800c078 <_svfiprintf_r+0x28>
 800c220:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c222:	b01d      	add	sp, #116	; 0x74
 800c224:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c228:	ab03      	add	r3, sp, #12
 800c22a:	9300      	str	r3, [sp, #0]
 800c22c:	462a      	mov	r2, r5
 800c22e:	4b06      	ldr	r3, [pc, #24]	; (800c248 <_svfiprintf_r+0x1f8>)
 800c230:	a904      	add	r1, sp, #16
 800c232:	4638      	mov	r0, r7
 800c234:	f7fc fda8 	bl	8008d88 <_printf_i>
 800c238:	e7eb      	b.n	800c212 <_svfiprintf_r+0x1c2>
 800c23a:	bf00      	nop
 800c23c:	0800d24c 	.word	0x0800d24c
 800c240:	0800d256 	.word	0x0800d256
 800c244:	08008841 	.word	0x08008841
 800c248:	0800bf9b 	.word	0x0800bf9b
 800c24c:	0800d252 	.word	0x0800d252

0800c250 <nan>:
 800c250:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c258 <nan+0x8>
 800c254:	4770      	bx	lr
 800c256:	bf00      	nop
 800c258:	00000000 	.word	0x00000000
 800c25c:	7ff80000 	.word	0x7ff80000

0800c260 <strncmp>:
 800c260:	b510      	push	{r4, lr}
 800c262:	b17a      	cbz	r2, 800c284 <strncmp+0x24>
 800c264:	4603      	mov	r3, r0
 800c266:	3901      	subs	r1, #1
 800c268:	1884      	adds	r4, r0, r2
 800c26a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c26e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c272:	4290      	cmp	r0, r2
 800c274:	d101      	bne.n	800c27a <strncmp+0x1a>
 800c276:	42a3      	cmp	r3, r4
 800c278:	d101      	bne.n	800c27e <strncmp+0x1e>
 800c27a:	1a80      	subs	r0, r0, r2
 800c27c:	bd10      	pop	{r4, pc}
 800c27e:	2800      	cmp	r0, #0
 800c280:	d1f3      	bne.n	800c26a <strncmp+0xa>
 800c282:	e7fa      	b.n	800c27a <strncmp+0x1a>
 800c284:	4610      	mov	r0, r2
 800c286:	e7f9      	b.n	800c27c <strncmp+0x1c>

0800c288 <__ascii_wctomb>:
 800c288:	b149      	cbz	r1, 800c29e <__ascii_wctomb+0x16>
 800c28a:	2aff      	cmp	r2, #255	; 0xff
 800c28c:	bf85      	ittet	hi
 800c28e:	238a      	movhi	r3, #138	; 0x8a
 800c290:	6003      	strhi	r3, [r0, #0]
 800c292:	700a      	strbls	r2, [r1, #0]
 800c294:	f04f 30ff 	movhi.w	r0, #4294967295
 800c298:	bf98      	it	ls
 800c29a:	2001      	movls	r0, #1
 800c29c:	4770      	bx	lr
 800c29e:	4608      	mov	r0, r1
 800c2a0:	4770      	bx	lr
	...

0800c2a4 <__assert_func>:
 800c2a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c2a6:	4614      	mov	r4, r2
 800c2a8:	461a      	mov	r2, r3
 800c2aa:	4b09      	ldr	r3, [pc, #36]	; (800c2d0 <__assert_func+0x2c>)
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	4605      	mov	r5, r0
 800c2b0:	68d8      	ldr	r0, [r3, #12]
 800c2b2:	b14c      	cbz	r4, 800c2c8 <__assert_func+0x24>
 800c2b4:	4b07      	ldr	r3, [pc, #28]	; (800c2d4 <__assert_func+0x30>)
 800c2b6:	9100      	str	r1, [sp, #0]
 800c2b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c2bc:	4906      	ldr	r1, [pc, #24]	; (800c2d8 <__assert_func+0x34>)
 800c2be:	462b      	mov	r3, r5
 800c2c0:	f000 f80e 	bl	800c2e0 <fiprintf>
 800c2c4:	f000 fa84 	bl	800c7d0 <abort>
 800c2c8:	4b04      	ldr	r3, [pc, #16]	; (800c2dc <__assert_func+0x38>)
 800c2ca:	461c      	mov	r4, r3
 800c2cc:	e7f3      	b.n	800c2b6 <__assert_func+0x12>
 800c2ce:	bf00      	nop
 800c2d0:	20000044 	.word	0x20000044
 800c2d4:	0800d25d 	.word	0x0800d25d
 800c2d8:	0800d26a 	.word	0x0800d26a
 800c2dc:	0800d298 	.word	0x0800d298

0800c2e0 <fiprintf>:
 800c2e0:	b40e      	push	{r1, r2, r3}
 800c2e2:	b503      	push	{r0, r1, lr}
 800c2e4:	4601      	mov	r1, r0
 800c2e6:	ab03      	add	r3, sp, #12
 800c2e8:	4805      	ldr	r0, [pc, #20]	; (800c300 <fiprintf+0x20>)
 800c2ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c2ee:	6800      	ldr	r0, [r0, #0]
 800c2f0:	9301      	str	r3, [sp, #4]
 800c2f2:	f000 f87d 	bl	800c3f0 <_vfiprintf_r>
 800c2f6:	b002      	add	sp, #8
 800c2f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c2fc:	b003      	add	sp, #12
 800c2fe:	4770      	bx	lr
 800c300:	20000044 	.word	0x20000044

0800c304 <__retarget_lock_init_recursive>:
 800c304:	4770      	bx	lr

0800c306 <__retarget_lock_acquire_recursive>:
 800c306:	4770      	bx	lr

0800c308 <__retarget_lock_release_recursive>:
 800c308:	4770      	bx	lr

0800c30a <memmove>:
 800c30a:	4288      	cmp	r0, r1
 800c30c:	b510      	push	{r4, lr}
 800c30e:	eb01 0402 	add.w	r4, r1, r2
 800c312:	d902      	bls.n	800c31a <memmove+0x10>
 800c314:	4284      	cmp	r4, r0
 800c316:	4623      	mov	r3, r4
 800c318:	d807      	bhi.n	800c32a <memmove+0x20>
 800c31a:	1e43      	subs	r3, r0, #1
 800c31c:	42a1      	cmp	r1, r4
 800c31e:	d008      	beq.n	800c332 <memmove+0x28>
 800c320:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c324:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c328:	e7f8      	b.n	800c31c <memmove+0x12>
 800c32a:	4402      	add	r2, r0
 800c32c:	4601      	mov	r1, r0
 800c32e:	428a      	cmp	r2, r1
 800c330:	d100      	bne.n	800c334 <memmove+0x2a>
 800c332:	bd10      	pop	{r4, pc}
 800c334:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c338:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c33c:	e7f7      	b.n	800c32e <memmove+0x24>

0800c33e <_realloc_r>:
 800c33e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c342:	4680      	mov	r8, r0
 800c344:	4614      	mov	r4, r2
 800c346:	460e      	mov	r6, r1
 800c348:	b921      	cbnz	r1, 800c354 <_realloc_r+0x16>
 800c34a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c34e:	4611      	mov	r1, r2
 800c350:	f7fc b962 	b.w	8008618 <_malloc_r>
 800c354:	b92a      	cbnz	r2, 800c362 <_realloc_r+0x24>
 800c356:	f7fc f8f3 	bl	8008540 <_free_r>
 800c35a:	4625      	mov	r5, r4
 800c35c:	4628      	mov	r0, r5
 800c35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c362:	f000 fc59 	bl	800cc18 <_malloc_usable_size_r>
 800c366:	4284      	cmp	r4, r0
 800c368:	4607      	mov	r7, r0
 800c36a:	d802      	bhi.n	800c372 <_realloc_r+0x34>
 800c36c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c370:	d812      	bhi.n	800c398 <_realloc_r+0x5a>
 800c372:	4621      	mov	r1, r4
 800c374:	4640      	mov	r0, r8
 800c376:	f7fc f94f 	bl	8008618 <_malloc_r>
 800c37a:	4605      	mov	r5, r0
 800c37c:	2800      	cmp	r0, #0
 800c37e:	d0ed      	beq.n	800c35c <_realloc_r+0x1e>
 800c380:	42bc      	cmp	r4, r7
 800c382:	4622      	mov	r2, r4
 800c384:	4631      	mov	r1, r6
 800c386:	bf28      	it	cs
 800c388:	463a      	movcs	r2, r7
 800c38a:	f7ff f915 	bl	800b5b8 <memcpy>
 800c38e:	4631      	mov	r1, r6
 800c390:	4640      	mov	r0, r8
 800c392:	f7fc f8d5 	bl	8008540 <_free_r>
 800c396:	e7e1      	b.n	800c35c <_realloc_r+0x1e>
 800c398:	4635      	mov	r5, r6
 800c39a:	e7df      	b.n	800c35c <_realloc_r+0x1e>

0800c39c <__sfputc_r>:
 800c39c:	6893      	ldr	r3, [r2, #8]
 800c39e:	3b01      	subs	r3, #1
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	b410      	push	{r4}
 800c3a4:	6093      	str	r3, [r2, #8]
 800c3a6:	da08      	bge.n	800c3ba <__sfputc_r+0x1e>
 800c3a8:	6994      	ldr	r4, [r2, #24]
 800c3aa:	42a3      	cmp	r3, r4
 800c3ac:	db01      	blt.n	800c3b2 <__sfputc_r+0x16>
 800c3ae:	290a      	cmp	r1, #10
 800c3b0:	d103      	bne.n	800c3ba <__sfputc_r+0x1e>
 800c3b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3b6:	f000 b94b 	b.w	800c650 <__swbuf_r>
 800c3ba:	6813      	ldr	r3, [r2, #0]
 800c3bc:	1c58      	adds	r0, r3, #1
 800c3be:	6010      	str	r0, [r2, #0]
 800c3c0:	7019      	strb	r1, [r3, #0]
 800c3c2:	4608      	mov	r0, r1
 800c3c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c3c8:	4770      	bx	lr

0800c3ca <__sfputs_r>:
 800c3ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c3cc:	4606      	mov	r6, r0
 800c3ce:	460f      	mov	r7, r1
 800c3d0:	4614      	mov	r4, r2
 800c3d2:	18d5      	adds	r5, r2, r3
 800c3d4:	42ac      	cmp	r4, r5
 800c3d6:	d101      	bne.n	800c3dc <__sfputs_r+0x12>
 800c3d8:	2000      	movs	r0, #0
 800c3da:	e007      	b.n	800c3ec <__sfputs_r+0x22>
 800c3dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3e0:	463a      	mov	r2, r7
 800c3e2:	4630      	mov	r0, r6
 800c3e4:	f7ff ffda 	bl	800c39c <__sfputc_r>
 800c3e8:	1c43      	adds	r3, r0, #1
 800c3ea:	d1f3      	bne.n	800c3d4 <__sfputs_r+0xa>
 800c3ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c3f0 <_vfiprintf_r>:
 800c3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3f4:	460d      	mov	r5, r1
 800c3f6:	b09d      	sub	sp, #116	; 0x74
 800c3f8:	4614      	mov	r4, r2
 800c3fa:	4698      	mov	r8, r3
 800c3fc:	4606      	mov	r6, r0
 800c3fe:	b118      	cbz	r0, 800c408 <_vfiprintf_r+0x18>
 800c400:	6983      	ldr	r3, [r0, #24]
 800c402:	b90b      	cbnz	r3, 800c408 <_vfiprintf_r+0x18>
 800c404:	f000 fb06 	bl	800ca14 <__sinit>
 800c408:	4b89      	ldr	r3, [pc, #548]	; (800c630 <_vfiprintf_r+0x240>)
 800c40a:	429d      	cmp	r5, r3
 800c40c:	d11b      	bne.n	800c446 <_vfiprintf_r+0x56>
 800c40e:	6875      	ldr	r5, [r6, #4]
 800c410:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c412:	07d9      	lsls	r1, r3, #31
 800c414:	d405      	bmi.n	800c422 <_vfiprintf_r+0x32>
 800c416:	89ab      	ldrh	r3, [r5, #12]
 800c418:	059a      	lsls	r2, r3, #22
 800c41a:	d402      	bmi.n	800c422 <_vfiprintf_r+0x32>
 800c41c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c41e:	f7ff ff72 	bl	800c306 <__retarget_lock_acquire_recursive>
 800c422:	89ab      	ldrh	r3, [r5, #12]
 800c424:	071b      	lsls	r3, r3, #28
 800c426:	d501      	bpl.n	800c42c <_vfiprintf_r+0x3c>
 800c428:	692b      	ldr	r3, [r5, #16]
 800c42a:	b9eb      	cbnz	r3, 800c468 <_vfiprintf_r+0x78>
 800c42c:	4629      	mov	r1, r5
 800c42e:	4630      	mov	r0, r6
 800c430:	f000 f960 	bl	800c6f4 <__swsetup_r>
 800c434:	b1c0      	cbz	r0, 800c468 <_vfiprintf_r+0x78>
 800c436:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c438:	07dc      	lsls	r4, r3, #31
 800c43a:	d50e      	bpl.n	800c45a <_vfiprintf_r+0x6a>
 800c43c:	f04f 30ff 	mov.w	r0, #4294967295
 800c440:	b01d      	add	sp, #116	; 0x74
 800c442:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c446:	4b7b      	ldr	r3, [pc, #492]	; (800c634 <_vfiprintf_r+0x244>)
 800c448:	429d      	cmp	r5, r3
 800c44a:	d101      	bne.n	800c450 <_vfiprintf_r+0x60>
 800c44c:	68b5      	ldr	r5, [r6, #8]
 800c44e:	e7df      	b.n	800c410 <_vfiprintf_r+0x20>
 800c450:	4b79      	ldr	r3, [pc, #484]	; (800c638 <_vfiprintf_r+0x248>)
 800c452:	429d      	cmp	r5, r3
 800c454:	bf08      	it	eq
 800c456:	68f5      	ldreq	r5, [r6, #12]
 800c458:	e7da      	b.n	800c410 <_vfiprintf_r+0x20>
 800c45a:	89ab      	ldrh	r3, [r5, #12]
 800c45c:	0598      	lsls	r0, r3, #22
 800c45e:	d4ed      	bmi.n	800c43c <_vfiprintf_r+0x4c>
 800c460:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c462:	f7ff ff51 	bl	800c308 <__retarget_lock_release_recursive>
 800c466:	e7e9      	b.n	800c43c <_vfiprintf_r+0x4c>
 800c468:	2300      	movs	r3, #0
 800c46a:	9309      	str	r3, [sp, #36]	; 0x24
 800c46c:	2320      	movs	r3, #32
 800c46e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c472:	f8cd 800c 	str.w	r8, [sp, #12]
 800c476:	2330      	movs	r3, #48	; 0x30
 800c478:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800c63c <_vfiprintf_r+0x24c>
 800c47c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c480:	f04f 0901 	mov.w	r9, #1
 800c484:	4623      	mov	r3, r4
 800c486:	469a      	mov	sl, r3
 800c488:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c48c:	b10a      	cbz	r2, 800c492 <_vfiprintf_r+0xa2>
 800c48e:	2a25      	cmp	r2, #37	; 0x25
 800c490:	d1f9      	bne.n	800c486 <_vfiprintf_r+0x96>
 800c492:	ebba 0b04 	subs.w	fp, sl, r4
 800c496:	d00b      	beq.n	800c4b0 <_vfiprintf_r+0xc0>
 800c498:	465b      	mov	r3, fp
 800c49a:	4622      	mov	r2, r4
 800c49c:	4629      	mov	r1, r5
 800c49e:	4630      	mov	r0, r6
 800c4a0:	f7ff ff93 	bl	800c3ca <__sfputs_r>
 800c4a4:	3001      	adds	r0, #1
 800c4a6:	f000 80aa 	beq.w	800c5fe <_vfiprintf_r+0x20e>
 800c4aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4ac:	445a      	add	r2, fp
 800c4ae:	9209      	str	r2, [sp, #36]	; 0x24
 800c4b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	f000 80a2 	beq.w	800c5fe <_vfiprintf_r+0x20e>
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c4c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4c4:	f10a 0a01 	add.w	sl, sl, #1
 800c4c8:	9304      	str	r3, [sp, #16]
 800c4ca:	9307      	str	r3, [sp, #28]
 800c4cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4d0:	931a      	str	r3, [sp, #104]	; 0x68
 800c4d2:	4654      	mov	r4, sl
 800c4d4:	2205      	movs	r2, #5
 800c4d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4da:	4858      	ldr	r0, [pc, #352]	; (800c63c <_vfiprintf_r+0x24c>)
 800c4dc:	f7f3 fe80 	bl	80001e0 <memchr>
 800c4e0:	9a04      	ldr	r2, [sp, #16]
 800c4e2:	b9d8      	cbnz	r0, 800c51c <_vfiprintf_r+0x12c>
 800c4e4:	06d1      	lsls	r1, r2, #27
 800c4e6:	bf44      	itt	mi
 800c4e8:	2320      	movmi	r3, #32
 800c4ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4ee:	0713      	lsls	r3, r2, #28
 800c4f0:	bf44      	itt	mi
 800c4f2:	232b      	movmi	r3, #43	; 0x2b
 800c4f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c4f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c4fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c4fe:	d015      	beq.n	800c52c <_vfiprintf_r+0x13c>
 800c500:	9a07      	ldr	r2, [sp, #28]
 800c502:	4654      	mov	r4, sl
 800c504:	2000      	movs	r0, #0
 800c506:	f04f 0c0a 	mov.w	ip, #10
 800c50a:	4621      	mov	r1, r4
 800c50c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c510:	3b30      	subs	r3, #48	; 0x30
 800c512:	2b09      	cmp	r3, #9
 800c514:	d94e      	bls.n	800c5b4 <_vfiprintf_r+0x1c4>
 800c516:	b1b0      	cbz	r0, 800c546 <_vfiprintf_r+0x156>
 800c518:	9207      	str	r2, [sp, #28]
 800c51a:	e014      	b.n	800c546 <_vfiprintf_r+0x156>
 800c51c:	eba0 0308 	sub.w	r3, r0, r8
 800c520:	fa09 f303 	lsl.w	r3, r9, r3
 800c524:	4313      	orrs	r3, r2
 800c526:	9304      	str	r3, [sp, #16]
 800c528:	46a2      	mov	sl, r4
 800c52a:	e7d2      	b.n	800c4d2 <_vfiprintf_r+0xe2>
 800c52c:	9b03      	ldr	r3, [sp, #12]
 800c52e:	1d19      	adds	r1, r3, #4
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	9103      	str	r1, [sp, #12]
 800c534:	2b00      	cmp	r3, #0
 800c536:	bfbb      	ittet	lt
 800c538:	425b      	neglt	r3, r3
 800c53a:	f042 0202 	orrlt.w	r2, r2, #2
 800c53e:	9307      	strge	r3, [sp, #28]
 800c540:	9307      	strlt	r3, [sp, #28]
 800c542:	bfb8      	it	lt
 800c544:	9204      	strlt	r2, [sp, #16]
 800c546:	7823      	ldrb	r3, [r4, #0]
 800c548:	2b2e      	cmp	r3, #46	; 0x2e
 800c54a:	d10c      	bne.n	800c566 <_vfiprintf_r+0x176>
 800c54c:	7863      	ldrb	r3, [r4, #1]
 800c54e:	2b2a      	cmp	r3, #42	; 0x2a
 800c550:	d135      	bne.n	800c5be <_vfiprintf_r+0x1ce>
 800c552:	9b03      	ldr	r3, [sp, #12]
 800c554:	1d1a      	adds	r2, r3, #4
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	9203      	str	r2, [sp, #12]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	bfb8      	it	lt
 800c55e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c562:	3402      	adds	r4, #2
 800c564:	9305      	str	r3, [sp, #20]
 800c566:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800c64c <_vfiprintf_r+0x25c>
 800c56a:	7821      	ldrb	r1, [r4, #0]
 800c56c:	2203      	movs	r2, #3
 800c56e:	4650      	mov	r0, sl
 800c570:	f7f3 fe36 	bl	80001e0 <memchr>
 800c574:	b140      	cbz	r0, 800c588 <_vfiprintf_r+0x198>
 800c576:	2340      	movs	r3, #64	; 0x40
 800c578:	eba0 000a 	sub.w	r0, r0, sl
 800c57c:	fa03 f000 	lsl.w	r0, r3, r0
 800c580:	9b04      	ldr	r3, [sp, #16]
 800c582:	4303      	orrs	r3, r0
 800c584:	3401      	adds	r4, #1
 800c586:	9304      	str	r3, [sp, #16]
 800c588:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c58c:	482c      	ldr	r0, [pc, #176]	; (800c640 <_vfiprintf_r+0x250>)
 800c58e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c592:	2206      	movs	r2, #6
 800c594:	f7f3 fe24 	bl	80001e0 <memchr>
 800c598:	2800      	cmp	r0, #0
 800c59a:	d03f      	beq.n	800c61c <_vfiprintf_r+0x22c>
 800c59c:	4b29      	ldr	r3, [pc, #164]	; (800c644 <_vfiprintf_r+0x254>)
 800c59e:	bb1b      	cbnz	r3, 800c5e8 <_vfiprintf_r+0x1f8>
 800c5a0:	9b03      	ldr	r3, [sp, #12]
 800c5a2:	3307      	adds	r3, #7
 800c5a4:	f023 0307 	bic.w	r3, r3, #7
 800c5a8:	3308      	adds	r3, #8
 800c5aa:	9303      	str	r3, [sp, #12]
 800c5ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ae:	443b      	add	r3, r7
 800c5b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c5b2:	e767      	b.n	800c484 <_vfiprintf_r+0x94>
 800c5b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5b8:	460c      	mov	r4, r1
 800c5ba:	2001      	movs	r0, #1
 800c5bc:	e7a5      	b.n	800c50a <_vfiprintf_r+0x11a>
 800c5be:	2300      	movs	r3, #0
 800c5c0:	3401      	adds	r4, #1
 800c5c2:	9305      	str	r3, [sp, #20]
 800c5c4:	4619      	mov	r1, r3
 800c5c6:	f04f 0c0a 	mov.w	ip, #10
 800c5ca:	4620      	mov	r0, r4
 800c5cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5d0:	3a30      	subs	r2, #48	; 0x30
 800c5d2:	2a09      	cmp	r2, #9
 800c5d4:	d903      	bls.n	800c5de <_vfiprintf_r+0x1ee>
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d0c5      	beq.n	800c566 <_vfiprintf_r+0x176>
 800c5da:	9105      	str	r1, [sp, #20]
 800c5dc:	e7c3      	b.n	800c566 <_vfiprintf_r+0x176>
 800c5de:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5e2:	4604      	mov	r4, r0
 800c5e4:	2301      	movs	r3, #1
 800c5e6:	e7f0      	b.n	800c5ca <_vfiprintf_r+0x1da>
 800c5e8:	ab03      	add	r3, sp, #12
 800c5ea:	9300      	str	r3, [sp, #0]
 800c5ec:	462a      	mov	r2, r5
 800c5ee:	4b16      	ldr	r3, [pc, #88]	; (800c648 <_vfiprintf_r+0x258>)
 800c5f0:	a904      	add	r1, sp, #16
 800c5f2:	4630      	mov	r0, r6
 800c5f4:	f7fc f924 	bl	8008840 <_printf_float>
 800c5f8:	4607      	mov	r7, r0
 800c5fa:	1c78      	adds	r0, r7, #1
 800c5fc:	d1d6      	bne.n	800c5ac <_vfiprintf_r+0x1bc>
 800c5fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c600:	07d9      	lsls	r1, r3, #31
 800c602:	d405      	bmi.n	800c610 <_vfiprintf_r+0x220>
 800c604:	89ab      	ldrh	r3, [r5, #12]
 800c606:	059a      	lsls	r2, r3, #22
 800c608:	d402      	bmi.n	800c610 <_vfiprintf_r+0x220>
 800c60a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c60c:	f7ff fe7c 	bl	800c308 <__retarget_lock_release_recursive>
 800c610:	89ab      	ldrh	r3, [r5, #12]
 800c612:	065b      	lsls	r3, r3, #25
 800c614:	f53f af12 	bmi.w	800c43c <_vfiprintf_r+0x4c>
 800c618:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c61a:	e711      	b.n	800c440 <_vfiprintf_r+0x50>
 800c61c:	ab03      	add	r3, sp, #12
 800c61e:	9300      	str	r3, [sp, #0]
 800c620:	462a      	mov	r2, r5
 800c622:	4b09      	ldr	r3, [pc, #36]	; (800c648 <_vfiprintf_r+0x258>)
 800c624:	a904      	add	r1, sp, #16
 800c626:	4630      	mov	r0, r6
 800c628:	f7fc fbae 	bl	8008d88 <_printf_i>
 800c62c:	e7e4      	b.n	800c5f8 <_vfiprintf_r+0x208>
 800c62e:	bf00      	nop
 800c630:	0800d2bc 	.word	0x0800d2bc
 800c634:	0800d2dc 	.word	0x0800d2dc
 800c638:	0800d29c 	.word	0x0800d29c
 800c63c:	0800d24c 	.word	0x0800d24c
 800c640:	0800d256 	.word	0x0800d256
 800c644:	08008841 	.word	0x08008841
 800c648:	0800c3cb 	.word	0x0800c3cb
 800c64c:	0800d252 	.word	0x0800d252

0800c650 <__swbuf_r>:
 800c650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c652:	460e      	mov	r6, r1
 800c654:	4614      	mov	r4, r2
 800c656:	4605      	mov	r5, r0
 800c658:	b118      	cbz	r0, 800c662 <__swbuf_r+0x12>
 800c65a:	6983      	ldr	r3, [r0, #24]
 800c65c:	b90b      	cbnz	r3, 800c662 <__swbuf_r+0x12>
 800c65e:	f000 f9d9 	bl	800ca14 <__sinit>
 800c662:	4b21      	ldr	r3, [pc, #132]	; (800c6e8 <__swbuf_r+0x98>)
 800c664:	429c      	cmp	r4, r3
 800c666:	d12b      	bne.n	800c6c0 <__swbuf_r+0x70>
 800c668:	686c      	ldr	r4, [r5, #4]
 800c66a:	69a3      	ldr	r3, [r4, #24]
 800c66c:	60a3      	str	r3, [r4, #8]
 800c66e:	89a3      	ldrh	r3, [r4, #12]
 800c670:	071a      	lsls	r2, r3, #28
 800c672:	d52f      	bpl.n	800c6d4 <__swbuf_r+0x84>
 800c674:	6923      	ldr	r3, [r4, #16]
 800c676:	b36b      	cbz	r3, 800c6d4 <__swbuf_r+0x84>
 800c678:	6923      	ldr	r3, [r4, #16]
 800c67a:	6820      	ldr	r0, [r4, #0]
 800c67c:	1ac0      	subs	r0, r0, r3
 800c67e:	6963      	ldr	r3, [r4, #20]
 800c680:	b2f6      	uxtb	r6, r6
 800c682:	4283      	cmp	r3, r0
 800c684:	4637      	mov	r7, r6
 800c686:	dc04      	bgt.n	800c692 <__swbuf_r+0x42>
 800c688:	4621      	mov	r1, r4
 800c68a:	4628      	mov	r0, r5
 800c68c:	f000 f92e 	bl	800c8ec <_fflush_r>
 800c690:	bb30      	cbnz	r0, 800c6e0 <__swbuf_r+0x90>
 800c692:	68a3      	ldr	r3, [r4, #8]
 800c694:	3b01      	subs	r3, #1
 800c696:	60a3      	str	r3, [r4, #8]
 800c698:	6823      	ldr	r3, [r4, #0]
 800c69a:	1c5a      	adds	r2, r3, #1
 800c69c:	6022      	str	r2, [r4, #0]
 800c69e:	701e      	strb	r6, [r3, #0]
 800c6a0:	6963      	ldr	r3, [r4, #20]
 800c6a2:	3001      	adds	r0, #1
 800c6a4:	4283      	cmp	r3, r0
 800c6a6:	d004      	beq.n	800c6b2 <__swbuf_r+0x62>
 800c6a8:	89a3      	ldrh	r3, [r4, #12]
 800c6aa:	07db      	lsls	r3, r3, #31
 800c6ac:	d506      	bpl.n	800c6bc <__swbuf_r+0x6c>
 800c6ae:	2e0a      	cmp	r6, #10
 800c6b0:	d104      	bne.n	800c6bc <__swbuf_r+0x6c>
 800c6b2:	4621      	mov	r1, r4
 800c6b4:	4628      	mov	r0, r5
 800c6b6:	f000 f919 	bl	800c8ec <_fflush_r>
 800c6ba:	b988      	cbnz	r0, 800c6e0 <__swbuf_r+0x90>
 800c6bc:	4638      	mov	r0, r7
 800c6be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c6c0:	4b0a      	ldr	r3, [pc, #40]	; (800c6ec <__swbuf_r+0x9c>)
 800c6c2:	429c      	cmp	r4, r3
 800c6c4:	d101      	bne.n	800c6ca <__swbuf_r+0x7a>
 800c6c6:	68ac      	ldr	r4, [r5, #8]
 800c6c8:	e7cf      	b.n	800c66a <__swbuf_r+0x1a>
 800c6ca:	4b09      	ldr	r3, [pc, #36]	; (800c6f0 <__swbuf_r+0xa0>)
 800c6cc:	429c      	cmp	r4, r3
 800c6ce:	bf08      	it	eq
 800c6d0:	68ec      	ldreq	r4, [r5, #12]
 800c6d2:	e7ca      	b.n	800c66a <__swbuf_r+0x1a>
 800c6d4:	4621      	mov	r1, r4
 800c6d6:	4628      	mov	r0, r5
 800c6d8:	f000 f80c 	bl	800c6f4 <__swsetup_r>
 800c6dc:	2800      	cmp	r0, #0
 800c6de:	d0cb      	beq.n	800c678 <__swbuf_r+0x28>
 800c6e0:	f04f 37ff 	mov.w	r7, #4294967295
 800c6e4:	e7ea      	b.n	800c6bc <__swbuf_r+0x6c>
 800c6e6:	bf00      	nop
 800c6e8:	0800d2bc 	.word	0x0800d2bc
 800c6ec:	0800d2dc 	.word	0x0800d2dc
 800c6f0:	0800d29c 	.word	0x0800d29c

0800c6f4 <__swsetup_r>:
 800c6f4:	4b32      	ldr	r3, [pc, #200]	; (800c7c0 <__swsetup_r+0xcc>)
 800c6f6:	b570      	push	{r4, r5, r6, lr}
 800c6f8:	681d      	ldr	r5, [r3, #0]
 800c6fa:	4606      	mov	r6, r0
 800c6fc:	460c      	mov	r4, r1
 800c6fe:	b125      	cbz	r5, 800c70a <__swsetup_r+0x16>
 800c700:	69ab      	ldr	r3, [r5, #24]
 800c702:	b913      	cbnz	r3, 800c70a <__swsetup_r+0x16>
 800c704:	4628      	mov	r0, r5
 800c706:	f000 f985 	bl	800ca14 <__sinit>
 800c70a:	4b2e      	ldr	r3, [pc, #184]	; (800c7c4 <__swsetup_r+0xd0>)
 800c70c:	429c      	cmp	r4, r3
 800c70e:	d10f      	bne.n	800c730 <__swsetup_r+0x3c>
 800c710:	686c      	ldr	r4, [r5, #4]
 800c712:	89a3      	ldrh	r3, [r4, #12]
 800c714:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c718:	0719      	lsls	r1, r3, #28
 800c71a:	d42c      	bmi.n	800c776 <__swsetup_r+0x82>
 800c71c:	06dd      	lsls	r5, r3, #27
 800c71e:	d411      	bmi.n	800c744 <__swsetup_r+0x50>
 800c720:	2309      	movs	r3, #9
 800c722:	6033      	str	r3, [r6, #0]
 800c724:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c728:	81a3      	strh	r3, [r4, #12]
 800c72a:	f04f 30ff 	mov.w	r0, #4294967295
 800c72e:	e03e      	b.n	800c7ae <__swsetup_r+0xba>
 800c730:	4b25      	ldr	r3, [pc, #148]	; (800c7c8 <__swsetup_r+0xd4>)
 800c732:	429c      	cmp	r4, r3
 800c734:	d101      	bne.n	800c73a <__swsetup_r+0x46>
 800c736:	68ac      	ldr	r4, [r5, #8]
 800c738:	e7eb      	b.n	800c712 <__swsetup_r+0x1e>
 800c73a:	4b24      	ldr	r3, [pc, #144]	; (800c7cc <__swsetup_r+0xd8>)
 800c73c:	429c      	cmp	r4, r3
 800c73e:	bf08      	it	eq
 800c740:	68ec      	ldreq	r4, [r5, #12]
 800c742:	e7e6      	b.n	800c712 <__swsetup_r+0x1e>
 800c744:	0758      	lsls	r0, r3, #29
 800c746:	d512      	bpl.n	800c76e <__swsetup_r+0x7a>
 800c748:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c74a:	b141      	cbz	r1, 800c75e <__swsetup_r+0x6a>
 800c74c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c750:	4299      	cmp	r1, r3
 800c752:	d002      	beq.n	800c75a <__swsetup_r+0x66>
 800c754:	4630      	mov	r0, r6
 800c756:	f7fb fef3 	bl	8008540 <_free_r>
 800c75a:	2300      	movs	r3, #0
 800c75c:	6363      	str	r3, [r4, #52]	; 0x34
 800c75e:	89a3      	ldrh	r3, [r4, #12]
 800c760:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c764:	81a3      	strh	r3, [r4, #12]
 800c766:	2300      	movs	r3, #0
 800c768:	6063      	str	r3, [r4, #4]
 800c76a:	6923      	ldr	r3, [r4, #16]
 800c76c:	6023      	str	r3, [r4, #0]
 800c76e:	89a3      	ldrh	r3, [r4, #12]
 800c770:	f043 0308 	orr.w	r3, r3, #8
 800c774:	81a3      	strh	r3, [r4, #12]
 800c776:	6923      	ldr	r3, [r4, #16]
 800c778:	b94b      	cbnz	r3, 800c78e <__swsetup_r+0x9a>
 800c77a:	89a3      	ldrh	r3, [r4, #12]
 800c77c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c780:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c784:	d003      	beq.n	800c78e <__swsetup_r+0x9a>
 800c786:	4621      	mov	r1, r4
 800c788:	4630      	mov	r0, r6
 800c78a:	f000 fa05 	bl	800cb98 <__smakebuf_r>
 800c78e:	89a0      	ldrh	r0, [r4, #12]
 800c790:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c794:	f010 0301 	ands.w	r3, r0, #1
 800c798:	d00a      	beq.n	800c7b0 <__swsetup_r+0xbc>
 800c79a:	2300      	movs	r3, #0
 800c79c:	60a3      	str	r3, [r4, #8]
 800c79e:	6963      	ldr	r3, [r4, #20]
 800c7a0:	425b      	negs	r3, r3
 800c7a2:	61a3      	str	r3, [r4, #24]
 800c7a4:	6923      	ldr	r3, [r4, #16]
 800c7a6:	b943      	cbnz	r3, 800c7ba <__swsetup_r+0xc6>
 800c7a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c7ac:	d1ba      	bne.n	800c724 <__swsetup_r+0x30>
 800c7ae:	bd70      	pop	{r4, r5, r6, pc}
 800c7b0:	0781      	lsls	r1, r0, #30
 800c7b2:	bf58      	it	pl
 800c7b4:	6963      	ldrpl	r3, [r4, #20]
 800c7b6:	60a3      	str	r3, [r4, #8]
 800c7b8:	e7f4      	b.n	800c7a4 <__swsetup_r+0xb0>
 800c7ba:	2000      	movs	r0, #0
 800c7bc:	e7f7      	b.n	800c7ae <__swsetup_r+0xba>
 800c7be:	bf00      	nop
 800c7c0:	20000044 	.word	0x20000044
 800c7c4:	0800d2bc 	.word	0x0800d2bc
 800c7c8:	0800d2dc 	.word	0x0800d2dc
 800c7cc:	0800d29c 	.word	0x0800d29c

0800c7d0 <abort>:
 800c7d0:	b508      	push	{r3, lr}
 800c7d2:	2006      	movs	r0, #6
 800c7d4:	f000 fa50 	bl	800cc78 <raise>
 800c7d8:	2001      	movs	r0, #1
 800c7da:	f7f5 fa83 	bl	8001ce4 <_exit>
	...

0800c7e0 <__sflush_r>:
 800c7e0:	898a      	ldrh	r2, [r1, #12]
 800c7e2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7e6:	4605      	mov	r5, r0
 800c7e8:	0710      	lsls	r0, r2, #28
 800c7ea:	460c      	mov	r4, r1
 800c7ec:	d458      	bmi.n	800c8a0 <__sflush_r+0xc0>
 800c7ee:	684b      	ldr	r3, [r1, #4]
 800c7f0:	2b00      	cmp	r3, #0
 800c7f2:	dc05      	bgt.n	800c800 <__sflush_r+0x20>
 800c7f4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c7f6:	2b00      	cmp	r3, #0
 800c7f8:	dc02      	bgt.n	800c800 <__sflush_r+0x20>
 800c7fa:	2000      	movs	r0, #0
 800c7fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c800:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c802:	2e00      	cmp	r6, #0
 800c804:	d0f9      	beq.n	800c7fa <__sflush_r+0x1a>
 800c806:	2300      	movs	r3, #0
 800c808:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c80c:	682f      	ldr	r7, [r5, #0]
 800c80e:	602b      	str	r3, [r5, #0]
 800c810:	d032      	beq.n	800c878 <__sflush_r+0x98>
 800c812:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c814:	89a3      	ldrh	r3, [r4, #12]
 800c816:	075a      	lsls	r2, r3, #29
 800c818:	d505      	bpl.n	800c826 <__sflush_r+0x46>
 800c81a:	6863      	ldr	r3, [r4, #4]
 800c81c:	1ac0      	subs	r0, r0, r3
 800c81e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c820:	b10b      	cbz	r3, 800c826 <__sflush_r+0x46>
 800c822:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c824:	1ac0      	subs	r0, r0, r3
 800c826:	2300      	movs	r3, #0
 800c828:	4602      	mov	r2, r0
 800c82a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c82c:	6a21      	ldr	r1, [r4, #32]
 800c82e:	4628      	mov	r0, r5
 800c830:	47b0      	blx	r6
 800c832:	1c43      	adds	r3, r0, #1
 800c834:	89a3      	ldrh	r3, [r4, #12]
 800c836:	d106      	bne.n	800c846 <__sflush_r+0x66>
 800c838:	6829      	ldr	r1, [r5, #0]
 800c83a:	291d      	cmp	r1, #29
 800c83c:	d82c      	bhi.n	800c898 <__sflush_r+0xb8>
 800c83e:	4a2a      	ldr	r2, [pc, #168]	; (800c8e8 <__sflush_r+0x108>)
 800c840:	40ca      	lsrs	r2, r1
 800c842:	07d6      	lsls	r6, r2, #31
 800c844:	d528      	bpl.n	800c898 <__sflush_r+0xb8>
 800c846:	2200      	movs	r2, #0
 800c848:	6062      	str	r2, [r4, #4]
 800c84a:	04d9      	lsls	r1, r3, #19
 800c84c:	6922      	ldr	r2, [r4, #16]
 800c84e:	6022      	str	r2, [r4, #0]
 800c850:	d504      	bpl.n	800c85c <__sflush_r+0x7c>
 800c852:	1c42      	adds	r2, r0, #1
 800c854:	d101      	bne.n	800c85a <__sflush_r+0x7a>
 800c856:	682b      	ldr	r3, [r5, #0]
 800c858:	b903      	cbnz	r3, 800c85c <__sflush_r+0x7c>
 800c85a:	6560      	str	r0, [r4, #84]	; 0x54
 800c85c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c85e:	602f      	str	r7, [r5, #0]
 800c860:	2900      	cmp	r1, #0
 800c862:	d0ca      	beq.n	800c7fa <__sflush_r+0x1a>
 800c864:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c868:	4299      	cmp	r1, r3
 800c86a:	d002      	beq.n	800c872 <__sflush_r+0x92>
 800c86c:	4628      	mov	r0, r5
 800c86e:	f7fb fe67 	bl	8008540 <_free_r>
 800c872:	2000      	movs	r0, #0
 800c874:	6360      	str	r0, [r4, #52]	; 0x34
 800c876:	e7c1      	b.n	800c7fc <__sflush_r+0x1c>
 800c878:	6a21      	ldr	r1, [r4, #32]
 800c87a:	2301      	movs	r3, #1
 800c87c:	4628      	mov	r0, r5
 800c87e:	47b0      	blx	r6
 800c880:	1c41      	adds	r1, r0, #1
 800c882:	d1c7      	bne.n	800c814 <__sflush_r+0x34>
 800c884:	682b      	ldr	r3, [r5, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d0c4      	beq.n	800c814 <__sflush_r+0x34>
 800c88a:	2b1d      	cmp	r3, #29
 800c88c:	d001      	beq.n	800c892 <__sflush_r+0xb2>
 800c88e:	2b16      	cmp	r3, #22
 800c890:	d101      	bne.n	800c896 <__sflush_r+0xb6>
 800c892:	602f      	str	r7, [r5, #0]
 800c894:	e7b1      	b.n	800c7fa <__sflush_r+0x1a>
 800c896:	89a3      	ldrh	r3, [r4, #12]
 800c898:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c89c:	81a3      	strh	r3, [r4, #12]
 800c89e:	e7ad      	b.n	800c7fc <__sflush_r+0x1c>
 800c8a0:	690f      	ldr	r7, [r1, #16]
 800c8a2:	2f00      	cmp	r7, #0
 800c8a4:	d0a9      	beq.n	800c7fa <__sflush_r+0x1a>
 800c8a6:	0793      	lsls	r3, r2, #30
 800c8a8:	680e      	ldr	r6, [r1, #0]
 800c8aa:	bf08      	it	eq
 800c8ac:	694b      	ldreq	r3, [r1, #20]
 800c8ae:	600f      	str	r7, [r1, #0]
 800c8b0:	bf18      	it	ne
 800c8b2:	2300      	movne	r3, #0
 800c8b4:	eba6 0807 	sub.w	r8, r6, r7
 800c8b8:	608b      	str	r3, [r1, #8]
 800c8ba:	f1b8 0f00 	cmp.w	r8, #0
 800c8be:	dd9c      	ble.n	800c7fa <__sflush_r+0x1a>
 800c8c0:	6a21      	ldr	r1, [r4, #32]
 800c8c2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8c4:	4643      	mov	r3, r8
 800c8c6:	463a      	mov	r2, r7
 800c8c8:	4628      	mov	r0, r5
 800c8ca:	47b0      	blx	r6
 800c8cc:	2800      	cmp	r0, #0
 800c8ce:	dc06      	bgt.n	800c8de <__sflush_r+0xfe>
 800c8d0:	89a3      	ldrh	r3, [r4, #12]
 800c8d2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8d6:	81a3      	strh	r3, [r4, #12]
 800c8d8:	f04f 30ff 	mov.w	r0, #4294967295
 800c8dc:	e78e      	b.n	800c7fc <__sflush_r+0x1c>
 800c8de:	4407      	add	r7, r0
 800c8e0:	eba8 0800 	sub.w	r8, r8, r0
 800c8e4:	e7e9      	b.n	800c8ba <__sflush_r+0xda>
 800c8e6:	bf00      	nop
 800c8e8:	20400001 	.word	0x20400001

0800c8ec <_fflush_r>:
 800c8ec:	b538      	push	{r3, r4, r5, lr}
 800c8ee:	690b      	ldr	r3, [r1, #16]
 800c8f0:	4605      	mov	r5, r0
 800c8f2:	460c      	mov	r4, r1
 800c8f4:	b913      	cbnz	r3, 800c8fc <_fflush_r+0x10>
 800c8f6:	2500      	movs	r5, #0
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	bd38      	pop	{r3, r4, r5, pc}
 800c8fc:	b118      	cbz	r0, 800c906 <_fflush_r+0x1a>
 800c8fe:	6983      	ldr	r3, [r0, #24]
 800c900:	b90b      	cbnz	r3, 800c906 <_fflush_r+0x1a>
 800c902:	f000 f887 	bl	800ca14 <__sinit>
 800c906:	4b14      	ldr	r3, [pc, #80]	; (800c958 <_fflush_r+0x6c>)
 800c908:	429c      	cmp	r4, r3
 800c90a:	d11b      	bne.n	800c944 <_fflush_r+0x58>
 800c90c:	686c      	ldr	r4, [r5, #4]
 800c90e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c912:	2b00      	cmp	r3, #0
 800c914:	d0ef      	beq.n	800c8f6 <_fflush_r+0xa>
 800c916:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c918:	07d0      	lsls	r0, r2, #31
 800c91a:	d404      	bmi.n	800c926 <_fflush_r+0x3a>
 800c91c:	0599      	lsls	r1, r3, #22
 800c91e:	d402      	bmi.n	800c926 <_fflush_r+0x3a>
 800c920:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c922:	f7ff fcf0 	bl	800c306 <__retarget_lock_acquire_recursive>
 800c926:	4628      	mov	r0, r5
 800c928:	4621      	mov	r1, r4
 800c92a:	f7ff ff59 	bl	800c7e0 <__sflush_r>
 800c92e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c930:	07da      	lsls	r2, r3, #31
 800c932:	4605      	mov	r5, r0
 800c934:	d4e0      	bmi.n	800c8f8 <_fflush_r+0xc>
 800c936:	89a3      	ldrh	r3, [r4, #12]
 800c938:	059b      	lsls	r3, r3, #22
 800c93a:	d4dd      	bmi.n	800c8f8 <_fflush_r+0xc>
 800c93c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c93e:	f7ff fce3 	bl	800c308 <__retarget_lock_release_recursive>
 800c942:	e7d9      	b.n	800c8f8 <_fflush_r+0xc>
 800c944:	4b05      	ldr	r3, [pc, #20]	; (800c95c <_fflush_r+0x70>)
 800c946:	429c      	cmp	r4, r3
 800c948:	d101      	bne.n	800c94e <_fflush_r+0x62>
 800c94a:	68ac      	ldr	r4, [r5, #8]
 800c94c:	e7df      	b.n	800c90e <_fflush_r+0x22>
 800c94e:	4b04      	ldr	r3, [pc, #16]	; (800c960 <_fflush_r+0x74>)
 800c950:	429c      	cmp	r4, r3
 800c952:	bf08      	it	eq
 800c954:	68ec      	ldreq	r4, [r5, #12]
 800c956:	e7da      	b.n	800c90e <_fflush_r+0x22>
 800c958:	0800d2bc 	.word	0x0800d2bc
 800c95c:	0800d2dc 	.word	0x0800d2dc
 800c960:	0800d29c 	.word	0x0800d29c

0800c964 <std>:
 800c964:	2300      	movs	r3, #0
 800c966:	b510      	push	{r4, lr}
 800c968:	4604      	mov	r4, r0
 800c96a:	e9c0 3300 	strd	r3, r3, [r0]
 800c96e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c972:	6083      	str	r3, [r0, #8]
 800c974:	8181      	strh	r1, [r0, #12]
 800c976:	6643      	str	r3, [r0, #100]	; 0x64
 800c978:	81c2      	strh	r2, [r0, #14]
 800c97a:	6183      	str	r3, [r0, #24]
 800c97c:	4619      	mov	r1, r3
 800c97e:	2208      	movs	r2, #8
 800c980:	305c      	adds	r0, #92	; 0x5c
 800c982:	f7fb fdd5 	bl	8008530 <memset>
 800c986:	4b05      	ldr	r3, [pc, #20]	; (800c99c <std+0x38>)
 800c988:	6263      	str	r3, [r4, #36]	; 0x24
 800c98a:	4b05      	ldr	r3, [pc, #20]	; (800c9a0 <std+0x3c>)
 800c98c:	62a3      	str	r3, [r4, #40]	; 0x28
 800c98e:	4b05      	ldr	r3, [pc, #20]	; (800c9a4 <std+0x40>)
 800c990:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c992:	4b05      	ldr	r3, [pc, #20]	; (800c9a8 <std+0x44>)
 800c994:	6224      	str	r4, [r4, #32]
 800c996:	6323      	str	r3, [r4, #48]	; 0x30
 800c998:	bd10      	pop	{r4, pc}
 800c99a:	bf00      	nop
 800c99c:	0800ccb1 	.word	0x0800ccb1
 800c9a0:	0800ccd3 	.word	0x0800ccd3
 800c9a4:	0800cd0b 	.word	0x0800cd0b
 800c9a8:	0800cd2f 	.word	0x0800cd2f

0800c9ac <_cleanup_r>:
 800c9ac:	4901      	ldr	r1, [pc, #4]	; (800c9b4 <_cleanup_r+0x8>)
 800c9ae:	f000 b8af 	b.w	800cb10 <_fwalk_reent>
 800c9b2:	bf00      	nop
 800c9b4:	0800c8ed 	.word	0x0800c8ed

0800c9b8 <__sfmoreglue>:
 800c9b8:	b570      	push	{r4, r5, r6, lr}
 800c9ba:	2268      	movs	r2, #104	; 0x68
 800c9bc:	1e4d      	subs	r5, r1, #1
 800c9be:	4355      	muls	r5, r2
 800c9c0:	460e      	mov	r6, r1
 800c9c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c9c6:	f7fb fe27 	bl	8008618 <_malloc_r>
 800c9ca:	4604      	mov	r4, r0
 800c9cc:	b140      	cbz	r0, 800c9e0 <__sfmoreglue+0x28>
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	e9c0 1600 	strd	r1, r6, [r0]
 800c9d4:	300c      	adds	r0, #12
 800c9d6:	60a0      	str	r0, [r4, #8]
 800c9d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c9dc:	f7fb fda8 	bl	8008530 <memset>
 800c9e0:	4620      	mov	r0, r4
 800c9e2:	bd70      	pop	{r4, r5, r6, pc}

0800c9e4 <__sfp_lock_acquire>:
 800c9e4:	4801      	ldr	r0, [pc, #4]	; (800c9ec <__sfp_lock_acquire+0x8>)
 800c9e6:	f7ff bc8e 	b.w	800c306 <__retarget_lock_acquire_recursive>
 800c9ea:	bf00      	nop
 800c9ec:	20000aad 	.word	0x20000aad

0800c9f0 <__sfp_lock_release>:
 800c9f0:	4801      	ldr	r0, [pc, #4]	; (800c9f8 <__sfp_lock_release+0x8>)
 800c9f2:	f7ff bc89 	b.w	800c308 <__retarget_lock_release_recursive>
 800c9f6:	bf00      	nop
 800c9f8:	20000aad 	.word	0x20000aad

0800c9fc <__sinit_lock_acquire>:
 800c9fc:	4801      	ldr	r0, [pc, #4]	; (800ca04 <__sinit_lock_acquire+0x8>)
 800c9fe:	f7ff bc82 	b.w	800c306 <__retarget_lock_acquire_recursive>
 800ca02:	bf00      	nop
 800ca04:	20000aae 	.word	0x20000aae

0800ca08 <__sinit_lock_release>:
 800ca08:	4801      	ldr	r0, [pc, #4]	; (800ca10 <__sinit_lock_release+0x8>)
 800ca0a:	f7ff bc7d 	b.w	800c308 <__retarget_lock_release_recursive>
 800ca0e:	bf00      	nop
 800ca10:	20000aae 	.word	0x20000aae

0800ca14 <__sinit>:
 800ca14:	b510      	push	{r4, lr}
 800ca16:	4604      	mov	r4, r0
 800ca18:	f7ff fff0 	bl	800c9fc <__sinit_lock_acquire>
 800ca1c:	69a3      	ldr	r3, [r4, #24]
 800ca1e:	b11b      	cbz	r3, 800ca28 <__sinit+0x14>
 800ca20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ca24:	f7ff bff0 	b.w	800ca08 <__sinit_lock_release>
 800ca28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ca2c:	6523      	str	r3, [r4, #80]	; 0x50
 800ca2e:	4b13      	ldr	r3, [pc, #76]	; (800ca7c <__sinit+0x68>)
 800ca30:	4a13      	ldr	r2, [pc, #76]	; (800ca80 <__sinit+0x6c>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	62a2      	str	r2, [r4, #40]	; 0x28
 800ca36:	42a3      	cmp	r3, r4
 800ca38:	bf04      	itt	eq
 800ca3a:	2301      	moveq	r3, #1
 800ca3c:	61a3      	streq	r3, [r4, #24]
 800ca3e:	4620      	mov	r0, r4
 800ca40:	f000 f820 	bl	800ca84 <__sfp>
 800ca44:	6060      	str	r0, [r4, #4]
 800ca46:	4620      	mov	r0, r4
 800ca48:	f000 f81c 	bl	800ca84 <__sfp>
 800ca4c:	60a0      	str	r0, [r4, #8]
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f000 f818 	bl	800ca84 <__sfp>
 800ca54:	2200      	movs	r2, #0
 800ca56:	60e0      	str	r0, [r4, #12]
 800ca58:	2104      	movs	r1, #4
 800ca5a:	6860      	ldr	r0, [r4, #4]
 800ca5c:	f7ff ff82 	bl	800c964 <std>
 800ca60:	68a0      	ldr	r0, [r4, #8]
 800ca62:	2201      	movs	r2, #1
 800ca64:	2109      	movs	r1, #9
 800ca66:	f7ff ff7d 	bl	800c964 <std>
 800ca6a:	68e0      	ldr	r0, [r4, #12]
 800ca6c:	2202      	movs	r2, #2
 800ca6e:	2112      	movs	r1, #18
 800ca70:	f7ff ff78 	bl	800c964 <std>
 800ca74:	2301      	movs	r3, #1
 800ca76:	61a3      	str	r3, [r4, #24]
 800ca78:	e7d2      	b.n	800ca20 <__sinit+0xc>
 800ca7a:	bf00      	nop
 800ca7c:	0800ce58 	.word	0x0800ce58
 800ca80:	0800c9ad 	.word	0x0800c9ad

0800ca84 <__sfp>:
 800ca84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca86:	4607      	mov	r7, r0
 800ca88:	f7ff ffac 	bl	800c9e4 <__sfp_lock_acquire>
 800ca8c:	4b1e      	ldr	r3, [pc, #120]	; (800cb08 <__sfp+0x84>)
 800ca8e:	681e      	ldr	r6, [r3, #0]
 800ca90:	69b3      	ldr	r3, [r6, #24]
 800ca92:	b913      	cbnz	r3, 800ca9a <__sfp+0x16>
 800ca94:	4630      	mov	r0, r6
 800ca96:	f7ff ffbd 	bl	800ca14 <__sinit>
 800ca9a:	3648      	adds	r6, #72	; 0x48
 800ca9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800caa0:	3b01      	subs	r3, #1
 800caa2:	d503      	bpl.n	800caac <__sfp+0x28>
 800caa4:	6833      	ldr	r3, [r6, #0]
 800caa6:	b30b      	cbz	r3, 800caec <__sfp+0x68>
 800caa8:	6836      	ldr	r6, [r6, #0]
 800caaa:	e7f7      	b.n	800ca9c <__sfp+0x18>
 800caac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800cab0:	b9d5      	cbnz	r5, 800cae8 <__sfp+0x64>
 800cab2:	4b16      	ldr	r3, [pc, #88]	; (800cb0c <__sfp+0x88>)
 800cab4:	60e3      	str	r3, [r4, #12]
 800cab6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800caba:	6665      	str	r5, [r4, #100]	; 0x64
 800cabc:	f7ff fc22 	bl	800c304 <__retarget_lock_init_recursive>
 800cac0:	f7ff ff96 	bl	800c9f0 <__sfp_lock_release>
 800cac4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cac8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cacc:	6025      	str	r5, [r4, #0]
 800cace:	61a5      	str	r5, [r4, #24]
 800cad0:	2208      	movs	r2, #8
 800cad2:	4629      	mov	r1, r5
 800cad4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800cad8:	f7fb fd2a 	bl	8008530 <memset>
 800cadc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cae0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cae4:	4620      	mov	r0, r4
 800cae6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cae8:	3468      	adds	r4, #104	; 0x68
 800caea:	e7d9      	b.n	800caa0 <__sfp+0x1c>
 800caec:	2104      	movs	r1, #4
 800caee:	4638      	mov	r0, r7
 800caf0:	f7ff ff62 	bl	800c9b8 <__sfmoreglue>
 800caf4:	4604      	mov	r4, r0
 800caf6:	6030      	str	r0, [r6, #0]
 800caf8:	2800      	cmp	r0, #0
 800cafa:	d1d5      	bne.n	800caa8 <__sfp+0x24>
 800cafc:	f7ff ff78 	bl	800c9f0 <__sfp_lock_release>
 800cb00:	230c      	movs	r3, #12
 800cb02:	603b      	str	r3, [r7, #0]
 800cb04:	e7ee      	b.n	800cae4 <__sfp+0x60>
 800cb06:	bf00      	nop
 800cb08:	0800ce58 	.word	0x0800ce58
 800cb0c:	ffff0001 	.word	0xffff0001

0800cb10 <_fwalk_reent>:
 800cb10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cb14:	4606      	mov	r6, r0
 800cb16:	4688      	mov	r8, r1
 800cb18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cb1c:	2700      	movs	r7, #0
 800cb1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cb22:	f1b9 0901 	subs.w	r9, r9, #1
 800cb26:	d505      	bpl.n	800cb34 <_fwalk_reent+0x24>
 800cb28:	6824      	ldr	r4, [r4, #0]
 800cb2a:	2c00      	cmp	r4, #0
 800cb2c:	d1f7      	bne.n	800cb1e <_fwalk_reent+0xe>
 800cb2e:	4638      	mov	r0, r7
 800cb30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb34:	89ab      	ldrh	r3, [r5, #12]
 800cb36:	2b01      	cmp	r3, #1
 800cb38:	d907      	bls.n	800cb4a <_fwalk_reent+0x3a>
 800cb3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cb3e:	3301      	adds	r3, #1
 800cb40:	d003      	beq.n	800cb4a <_fwalk_reent+0x3a>
 800cb42:	4629      	mov	r1, r5
 800cb44:	4630      	mov	r0, r6
 800cb46:	47c0      	blx	r8
 800cb48:	4307      	orrs	r7, r0
 800cb4a:	3568      	adds	r5, #104	; 0x68
 800cb4c:	e7e9      	b.n	800cb22 <_fwalk_reent+0x12>

0800cb4e <__swhatbuf_r>:
 800cb4e:	b570      	push	{r4, r5, r6, lr}
 800cb50:	460e      	mov	r6, r1
 800cb52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb56:	2900      	cmp	r1, #0
 800cb58:	b096      	sub	sp, #88	; 0x58
 800cb5a:	4614      	mov	r4, r2
 800cb5c:	461d      	mov	r5, r3
 800cb5e:	da08      	bge.n	800cb72 <__swhatbuf_r+0x24>
 800cb60:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cb64:	2200      	movs	r2, #0
 800cb66:	602a      	str	r2, [r5, #0]
 800cb68:	061a      	lsls	r2, r3, #24
 800cb6a:	d410      	bmi.n	800cb8e <__swhatbuf_r+0x40>
 800cb6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cb70:	e00e      	b.n	800cb90 <__swhatbuf_r+0x42>
 800cb72:	466a      	mov	r2, sp
 800cb74:	f000 f902 	bl	800cd7c <_fstat_r>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	dbf1      	blt.n	800cb60 <__swhatbuf_r+0x12>
 800cb7c:	9a01      	ldr	r2, [sp, #4]
 800cb7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cb82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cb86:	425a      	negs	r2, r3
 800cb88:	415a      	adcs	r2, r3
 800cb8a:	602a      	str	r2, [r5, #0]
 800cb8c:	e7ee      	b.n	800cb6c <__swhatbuf_r+0x1e>
 800cb8e:	2340      	movs	r3, #64	; 0x40
 800cb90:	2000      	movs	r0, #0
 800cb92:	6023      	str	r3, [r4, #0]
 800cb94:	b016      	add	sp, #88	; 0x58
 800cb96:	bd70      	pop	{r4, r5, r6, pc}

0800cb98 <__smakebuf_r>:
 800cb98:	898b      	ldrh	r3, [r1, #12]
 800cb9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb9c:	079d      	lsls	r5, r3, #30
 800cb9e:	4606      	mov	r6, r0
 800cba0:	460c      	mov	r4, r1
 800cba2:	d507      	bpl.n	800cbb4 <__smakebuf_r+0x1c>
 800cba4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cba8:	6023      	str	r3, [r4, #0]
 800cbaa:	6123      	str	r3, [r4, #16]
 800cbac:	2301      	movs	r3, #1
 800cbae:	6163      	str	r3, [r4, #20]
 800cbb0:	b002      	add	sp, #8
 800cbb2:	bd70      	pop	{r4, r5, r6, pc}
 800cbb4:	ab01      	add	r3, sp, #4
 800cbb6:	466a      	mov	r2, sp
 800cbb8:	f7ff ffc9 	bl	800cb4e <__swhatbuf_r>
 800cbbc:	9900      	ldr	r1, [sp, #0]
 800cbbe:	4605      	mov	r5, r0
 800cbc0:	4630      	mov	r0, r6
 800cbc2:	f7fb fd29 	bl	8008618 <_malloc_r>
 800cbc6:	b948      	cbnz	r0, 800cbdc <__smakebuf_r+0x44>
 800cbc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbcc:	059a      	lsls	r2, r3, #22
 800cbce:	d4ef      	bmi.n	800cbb0 <__smakebuf_r+0x18>
 800cbd0:	f023 0303 	bic.w	r3, r3, #3
 800cbd4:	f043 0302 	orr.w	r3, r3, #2
 800cbd8:	81a3      	strh	r3, [r4, #12]
 800cbda:	e7e3      	b.n	800cba4 <__smakebuf_r+0xc>
 800cbdc:	4b0d      	ldr	r3, [pc, #52]	; (800cc14 <__smakebuf_r+0x7c>)
 800cbde:	62b3      	str	r3, [r6, #40]	; 0x28
 800cbe0:	89a3      	ldrh	r3, [r4, #12]
 800cbe2:	6020      	str	r0, [r4, #0]
 800cbe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbe8:	81a3      	strh	r3, [r4, #12]
 800cbea:	9b00      	ldr	r3, [sp, #0]
 800cbec:	6163      	str	r3, [r4, #20]
 800cbee:	9b01      	ldr	r3, [sp, #4]
 800cbf0:	6120      	str	r0, [r4, #16]
 800cbf2:	b15b      	cbz	r3, 800cc0c <__smakebuf_r+0x74>
 800cbf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cbf8:	4630      	mov	r0, r6
 800cbfa:	f000 f8d1 	bl	800cda0 <_isatty_r>
 800cbfe:	b128      	cbz	r0, 800cc0c <__smakebuf_r+0x74>
 800cc00:	89a3      	ldrh	r3, [r4, #12]
 800cc02:	f023 0303 	bic.w	r3, r3, #3
 800cc06:	f043 0301 	orr.w	r3, r3, #1
 800cc0a:	81a3      	strh	r3, [r4, #12]
 800cc0c:	89a0      	ldrh	r0, [r4, #12]
 800cc0e:	4305      	orrs	r5, r0
 800cc10:	81a5      	strh	r5, [r4, #12]
 800cc12:	e7cd      	b.n	800cbb0 <__smakebuf_r+0x18>
 800cc14:	0800c9ad 	.word	0x0800c9ad

0800cc18 <_malloc_usable_size_r>:
 800cc18:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc1c:	1f18      	subs	r0, r3, #4
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	bfbc      	itt	lt
 800cc22:	580b      	ldrlt	r3, [r1, r0]
 800cc24:	18c0      	addlt	r0, r0, r3
 800cc26:	4770      	bx	lr

0800cc28 <_raise_r>:
 800cc28:	291f      	cmp	r1, #31
 800cc2a:	b538      	push	{r3, r4, r5, lr}
 800cc2c:	4604      	mov	r4, r0
 800cc2e:	460d      	mov	r5, r1
 800cc30:	d904      	bls.n	800cc3c <_raise_r+0x14>
 800cc32:	2316      	movs	r3, #22
 800cc34:	6003      	str	r3, [r0, #0]
 800cc36:	f04f 30ff 	mov.w	r0, #4294967295
 800cc3a:	bd38      	pop	{r3, r4, r5, pc}
 800cc3c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800cc3e:	b112      	cbz	r2, 800cc46 <_raise_r+0x1e>
 800cc40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cc44:	b94b      	cbnz	r3, 800cc5a <_raise_r+0x32>
 800cc46:	4620      	mov	r0, r4
 800cc48:	f000 f830 	bl	800ccac <_getpid_r>
 800cc4c:	462a      	mov	r2, r5
 800cc4e:	4601      	mov	r1, r0
 800cc50:	4620      	mov	r0, r4
 800cc52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cc56:	f000 b817 	b.w	800cc88 <_kill_r>
 800cc5a:	2b01      	cmp	r3, #1
 800cc5c:	d00a      	beq.n	800cc74 <_raise_r+0x4c>
 800cc5e:	1c59      	adds	r1, r3, #1
 800cc60:	d103      	bne.n	800cc6a <_raise_r+0x42>
 800cc62:	2316      	movs	r3, #22
 800cc64:	6003      	str	r3, [r0, #0]
 800cc66:	2001      	movs	r0, #1
 800cc68:	e7e7      	b.n	800cc3a <_raise_r+0x12>
 800cc6a:	2400      	movs	r4, #0
 800cc6c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cc70:	4628      	mov	r0, r5
 800cc72:	4798      	blx	r3
 800cc74:	2000      	movs	r0, #0
 800cc76:	e7e0      	b.n	800cc3a <_raise_r+0x12>

0800cc78 <raise>:
 800cc78:	4b02      	ldr	r3, [pc, #8]	; (800cc84 <raise+0xc>)
 800cc7a:	4601      	mov	r1, r0
 800cc7c:	6818      	ldr	r0, [r3, #0]
 800cc7e:	f7ff bfd3 	b.w	800cc28 <_raise_r>
 800cc82:	bf00      	nop
 800cc84:	20000044 	.word	0x20000044

0800cc88 <_kill_r>:
 800cc88:	b538      	push	{r3, r4, r5, lr}
 800cc8a:	4d07      	ldr	r5, [pc, #28]	; (800cca8 <_kill_r+0x20>)
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	4604      	mov	r4, r0
 800cc90:	4608      	mov	r0, r1
 800cc92:	4611      	mov	r1, r2
 800cc94:	602b      	str	r3, [r5, #0]
 800cc96:	f7f5 f815 	bl	8001cc4 <_kill>
 800cc9a:	1c43      	adds	r3, r0, #1
 800cc9c:	d102      	bne.n	800cca4 <_kill_r+0x1c>
 800cc9e:	682b      	ldr	r3, [r5, #0]
 800cca0:	b103      	cbz	r3, 800cca4 <_kill_r+0x1c>
 800cca2:	6023      	str	r3, [r4, #0]
 800cca4:	bd38      	pop	{r3, r4, r5, pc}
 800cca6:	bf00      	nop
 800cca8:	20000aa8 	.word	0x20000aa8

0800ccac <_getpid_r>:
 800ccac:	f7f5 b802 	b.w	8001cb4 <_getpid>

0800ccb0 <__sread>:
 800ccb0:	b510      	push	{r4, lr}
 800ccb2:	460c      	mov	r4, r1
 800ccb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ccb8:	f000 f894 	bl	800cde4 <_read_r>
 800ccbc:	2800      	cmp	r0, #0
 800ccbe:	bfab      	itete	ge
 800ccc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800ccc2:	89a3      	ldrhlt	r3, [r4, #12]
 800ccc4:	181b      	addge	r3, r3, r0
 800ccc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800ccca:	bfac      	ite	ge
 800cccc:	6563      	strge	r3, [r4, #84]	; 0x54
 800ccce:	81a3      	strhlt	r3, [r4, #12]
 800ccd0:	bd10      	pop	{r4, pc}

0800ccd2 <__swrite>:
 800ccd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ccd6:	461f      	mov	r7, r3
 800ccd8:	898b      	ldrh	r3, [r1, #12]
 800ccda:	05db      	lsls	r3, r3, #23
 800ccdc:	4605      	mov	r5, r0
 800ccde:	460c      	mov	r4, r1
 800cce0:	4616      	mov	r6, r2
 800cce2:	d505      	bpl.n	800ccf0 <__swrite+0x1e>
 800cce4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cce8:	2302      	movs	r3, #2
 800ccea:	2200      	movs	r2, #0
 800ccec:	f000 f868 	bl	800cdc0 <_lseek_r>
 800ccf0:	89a3      	ldrh	r3, [r4, #12]
 800ccf2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ccf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800ccfa:	81a3      	strh	r3, [r4, #12]
 800ccfc:	4632      	mov	r2, r6
 800ccfe:	463b      	mov	r3, r7
 800cd00:	4628      	mov	r0, r5
 800cd02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cd06:	f000 b817 	b.w	800cd38 <_write_r>

0800cd0a <__sseek>:
 800cd0a:	b510      	push	{r4, lr}
 800cd0c:	460c      	mov	r4, r1
 800cd0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd12:	f000 f855 	bl	800cdc0 <_lseek_r>
 800cd16:	1c43      	adds	r3, r0, #1
 800cd18:	89a3      	ldrh	r3, [r4, #12]
 800cd1a:	bf15      	itete	ne
 800cd1c:	6560      	strne	r0, [r4, #84]	; 0x54
 800cd1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800cd22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800cd26:	81a3      	strheq	r3, [r4, #12]
 800cd28:	bf18      	it	ne
 800cd2a:	81a3      	strhne	r3, [r4, #12]
 800cd2c:	bd10      	pop	{r4, pc}

0800cd2e <__sclose>:
 800cd2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cd32:	f000 b813 	b.w	800cd5c <_close_r>
	...

0800cd38 <_write_r>:
 800cd38:	b538      	push	{r3, r4, r5, lr}
 800cd3a:	4d07      	ldr	r5, [pc, #28]	; (800cd58 <_write_r+0x20>)
 800cd3c:	4604      	mov	r4, r0
 800cd3e:	4608      	mov	r0, r1
 800cd40:	4611      	mov	r1, r2
 800cd42:	2200      	movs	r2, #0
 800cd44:	602a      	str	r2, [r5, #0]
 800cd46:	461a      	mov	r2, r3
 800cd48:	f7f4 fff3 	bl	8001d32 <_write>
 800cd4c:	1c43      	adds	r3, r0, #1
 800cd4e:	d102      	bne.n	800cd56 <_write_r+0x1e>
 800cd50:	682b      	ldr	r3, [r5, #0]
 800cd52:	b103      	cbz	r3, 800cd56 <_write_r+0x1e>
 800cd54:	6023      	str	r3, [r4, #0]
 800cd56:	bd38      	pop	{r3, r4, r5, pc}
 800cd58:	20000aa8 	.word	0x20000aa8

0800cd5c <_close_r>:
 800cd5c:	b538      	push	{r3, r4, r5, lr}
 800cd5e:	4d06      	ldr	r5, [pc, #24]	; (800cd78 <_close_r+0x1c>)
 800cd60:	2300      	movs	r3, #0
 800cd62:	4604      	mov	r4, r0
 800cd64:	4608      	mov	r0, r1
 800cd66:	602b      	str	r3, [r5, #0]
 800cd68:	f7f4 ffff 	bl	8001d6a <_close>
 800cd6c:	1c43      	adds	r3, r0, #1
 800cd6e:	d102      	bne.n	800cd76 <_close_r+0x1a>
 800cd70:	682b      	ldr	r3, [r5, #0]
 800cd72:	b103      	cbz	r3, 800cd76 <_close_r+0x1a>
 800cd74:	6023      	str	r3, [r4, #0]
 800cd76:	bd38      	pop	{r3, r4, r5, pc}
 800cd78:	20000aa8 	.word	0x20000aa8

0800cd7c <_fstat_r>:
 800cd7c:	b538      	push	{r3, r4, r5, lr}
 800cd7e:	4d07      	ldr	r5, [pc, #28]	; (800cd9c <_fstat_r+0x20>)
 800cd80:	2300      	movs	r3, #0
 800cd82:	4604      	mov	r4, r0
 800cd84:	4608      	mov	r0, r1
 800cd86:	4611      	mov	r1, r2
 800cd88:	602b      	str	r3, [r5, #0]
 800cd8a:	f7f4 fffa 	bl	8001d82 <_fstat>
 800cd8e:	1c43      	adds	r3, r0, #1
 800cd90:	d102      	bne.n	800cd98 <_fstat_r+0x1c>
 800cd92:	682b      	ldr	r3, [r5, #0]
 800cd94:	b103      	cbz	r3, 800cd98 <_fstat_r+0x1c>
 800cd96:	6023      	str	r3, [r4, #0]
 800cd98:	bd38      	pop	{r3, r4, r5, pc}
 800cd9a:	bf00      	nop
 800cd9c:	20000aa8 	.word	0x20000aa8

0800cda0 <_isatty_r>:
 800cda0:	b538      	push	{r3, r4, r5, lr}
 800cda2:	4d06      	ldr	r5, [pc, #24]	; (800cdbc <_isatty_r+0x1c>)
 800cda4:	2300      	movs	r3, #0
 800cda6:	4604      	mov	r4, r0
 800cda8:	4608      	mov	r0, r1
 800cdaa:	602b      	str	r3, [r5, #0]
 800cdac:	f7f4 fff9 	bl	8001da2 <_isatty>
 800cdb0:	1c43      	adds	r3, r0, #1
 800cdb2:	d102      	bne.n	800cdba <_isatty_r+0x1a>
 800cdb4:	682b      	ldr	r3, [r5, #0]
 800cdb6:	b103      	cbz	r3, 800cdba <_isatty_r+0x1a>
 800cdb8:	6023      	str	r3, [r4, #0]
 800cdba:	bd38      	pop	{r3, r4, r5, pc}
 800cdbc:	20000aa8 	.word	0x20000aa8

0800cdc0 <_lseek_r>:
 800cdc0:	b538      	push	{r3, r4, r5, lr}
 800cdc2:	4d07      	ldr	r5, [pc, #28]	; (800cde0 <_lseek_r+0x20>)
 800cdc4:	4604      	mov	r4, r0
 800cdc6:	4608      	mov	r0, r1
 800cdc8:	4611      	mov	r1, r2
 800cdca:	2200      	movs	r2, #0
 800cdcc:	602a      	str	r2, [r5, #0]
 800cdce:	461a      	mov	r2, r3
 800cdd0:	f7f4 fff2 	bl	8001db8 <_lseek>
 800cdd4:	1c43      	adds	r3, r0, #1
 800cdd6:	d102      	bne.n	800cdde <_lseek_r+0x1e>
 800cdd8:	682b      	ldr	r3, [r5, #0]
 800cdda:	b103      	cbz	r3, 800cdde <_lseek_r+0x1e>
 800cddc:	6023      	str	r3, [r4, #0]
 800cdde:	bd38      	pop	{r3, r4, r5, pc}
 800cde0:	20000aa8 	.word	0x20000aa8

0800cde4 <_read_r>:
 800cde4:	b538      	push	{r3, r4, r5, lr}
 800cde6:	4d07      	ldr	r5, [pc, #28]	; (800ce04 <_read_r+0x20>)
 800cde8:	4604      	mov	r4, r0
 800cdea:	4608      	mov	r0, r1
 800cdec:	4611      	mov	r1, r2
 800cdee:	2200      	movs	r2, #0
 800cdf0:	602a      	str	r2, [r5, #0]
 800cdf2:	461a      	mov	r2, r3
 800cdf4:	f7f4 ff80 	bl	8001cf8 <_read>
 800cdf8:	1c43      	adds	r3, r0, #1
 800cdfa:	d102      	bne.n	800ce02 <_read_r+0x1e>
 800cdfc:	682b      	ldr	r3, [r5, #0]
 800cdfe:	b103      	cbz	r3, 800ce02 <_read_r+0x1e>
 800ce00:	6023      	str	r3, [r4, #0]
 800ce02:	bd38      	pop	{r3, r4, r5, pc}
 800ce04:	20000aa8 	.word	0x20000aa8

0800ce08 <_init>:
 800ce08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce0a:	bf00      	nop
 800ce0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce0e:	bc08      	pop	{r3}
 800ce10:	469e      	mov	lr, r3
 800ce12:	4770      	bx	lr

0800ce14 <_fini>:
 800ce14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce16:	bf00      	nop
 800ce18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ce1a:	bc08      	pop	{r3}
 800ce1c:	469e      	mov	lr, r3
 800ce1e:	4770      	bx	lr
