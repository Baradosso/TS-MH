
TEMP_SENS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070fc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08007284  08007284  00017284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072a0  080072a0  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  080072a0  080072a0  000172a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072a8  080072a8  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072a8  080072a8  000172a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072ac  080072ac  000172ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  080072b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000850  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200008e0  200008e0  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016c86  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003963  00000000  00000000  00036d46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001218  00000000  00000000  0003a6b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001098  00000000  00000000  0003b8c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026c40  00000000  00000000  0003c960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018c3a  00000000  00000000  000635a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8828  00000000  00000000  0007c1da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00154a02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004d44  00000000  00000000  00154a54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800726c 	.word	0x0800726c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	0800726c 	.word	0x0800726c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d0:	f000 fce4 	bl	8000e9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d4:	f000 f812 	bl	80004fc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d8:	f000 f984 	bl	80007e4 <_ZL12MX_GPIO_Initv>
  MX_ADC1_Init();
 80004dc:	f000 f882 	bl	80005e4 <_ZL12MX_ADC1_Initv>
  MX_I2C1_Init();
 80004e0:	f000 f8dc 	bl	800069c <_ZL12MX_I2C1_Initv>
  MX_I2S3_Init();
 80004e4:	f000 f90e 	bl	8000704 <_ZL12MX_I2S3_Initv>
  MX_SPI1_Init();
 80004e8:	f000 f940 	bl	800076c <_ZL12MX_SPI1_Initv>
  MX_USB_HOST_Init();
 80004ec:	f006 face 	bl	8006a8c <MX_USB_HOST_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  mainCpp();
 80004f0:	f000 faaf 	bl	8000a52 <_Z7mainCppv>
  /* USER CODE END WHILE */

  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
}
 80004f4:	2300      	movs	r3, #0
 80004f6:	4618      	mov	r0, r3
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b094      	sub	sp, #80	; 0x50
 8000500:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000502:	f107 0320 	add.w	r3, r7, #32
 8000506:	2230      	movs	r2, #48	; 0x30
 8000508:	2100      	movs	r1, #0
 800050a:	4618      	mov	r0, r3
 800050c:	f006 fda8 	bl	8007060 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000510:	f107 030c 	add.w	r3, r7, #12
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]
 8000518:	605a      	str	r2, [r3, #4]
 800051a:	609a      	str	r2, [r3, #8]
 800051c:	60da      	str	r2, [r3, #12]
 800051e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000520:	2300      	movs	r3, #0
 8000522:	60bb      	str	r3, [r7, #8]
 8000524:	4b2d      	ldr	r3, [pc, #180]	; (80005dc <_Z18SystemClock_Configv+0xe0>)
 8000526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000528:	4a2c      	ldr	r2, [pc, #176]	; (80005dc <_Z18SystemClock_Configv+0xe0>)
 800052a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800052e:	6413      	str	r3, [r2, #64]	; 0x40
 8000530:	4b2a      	ldr	r3, [pc, #168]	; (80005dc <_Z18SystemClock_Configv+0xe0>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000538:	60bb      	str	r3, [r7, #8]
 800053a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800053c:	2300      	movs	r3, #0
 800053e:	607b      	str	r3, [r7, #4]
 8000540:	4b27      	ldr	r3, [pc, #156]	; (80005e0 <_Z18SystemClock_Configv+0xe4>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4a26      	ldr	r2, [pc, #152]	; (80005e0 <_Z18SystemClock_Configv+0xe4>)
 8000546:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800054a:	6013      	str	r3, [r2, #0]
 800054c:	4b24      	ldr	r3, [pc, #144]	; (80005e0 <_Z18SystemClock_Configv+0xe4>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000554:	607b      	str	r3, [r7, #4]
 8000556:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000558:	2301      	movs	r3, #1
 800055a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800055c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000560:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000562:	2302      	movs	r3, #2
 8000564:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000566:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800056a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800056c:	2308      	movs	r3, #8
 800056e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000570:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000574:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000576:	2302      	movs	r3, #2
 8000578:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800057a:	2307      	movs	r3, #7
 800057c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	4618      	mov	r0, r3
 8000584:	f003 fc1c 	bl	8003dc0 <HAL_RCC_OscConfig>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	bf14      	ite	ne
 800058e:	2301      	movne	r3, #1
 8000590:	2300      	moveq	r3, #0
 8000592:	b2db      	uxtb	r3, r3
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <_Z18SystemClock_Configv+0xa0>
  {
    Error_Handler();
 8000598:	f000 fa56 	bl	8000a48 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2302      	movs	r3, #2
 80005a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005a8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005b2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b4:	f107 030c 	add.w	r3, r7, #12
 80005b8:	2105      	movs	r1, #5
 80005ba:	4618      	mov	r0, r3
 80005bc:	f003 fe78 	bl	80042b0 <HAL_RCC_ClockConfig>
 80005c0:	4603      	mov	r3, r0
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	bf14      	ite	ne
 80005c6:	2301      	movne	r3, #1
 80005c8:	2300      	moveq	r3, #0
 80005ca:	b2db      	uxtb	r3, r3
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d001      	beq.n	80005d4 <_Z18SystemClock_Configv+0xd8>
  {
    Error_Handler();
 80005d0:	f000 fa3a 	bl	8000a48 <Error_Handler>
  }
}
 80005d4:	bf00      	nop
 80005d6:	3750      	adds	r7, #80	; 0x50
 80005d8:	46bd      	mov	sp, r7
 80005da:	bd80      	pop	{r7, pc}
 80005dc:	40023800 	.word	0x40023800
 80005e0:	40007000 	.word	0x40007000

080005e4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	b084      	sub	sp, #16
 80005e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005ea:	463b      	mov	r3, r7
 80005ec:	2200      	movs	r2, #0
 80005ee:	601a      	str	r2, [r3, #0]
 80005f0:	605a      	str	r2, [r3, #4]
 80005f2:	609a      	str	r2, [r3, #8]
 80005f4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005f6:	4b26      	ldr	r3, [pc, #152]	; (8000690 <_ZL12MX_ADC1_Initv+0xac>)
 80005f8:	4a26      	ldr	r2, [pc, #152]	; (8000694 <_ZL12MX_ADC1_Initv+0xb0>)
 80005fa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005fc:	4b24      	ldr	r3, [pc, #144]	; (8000690 <_ZL12MX_ADC1_Initv+0xac>)
 80005fe:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000602:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000604:	4b22      	ldr	r3, [pc, #136]	; (8000690 <_ZL12MX_ADC1_Initv+0xac>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800060a:	4b21      	ldr	r3, [pc, #132]	; (8000690 <_ZL12MX_ADC1_Initv+0xac>)
 800060c:	2200      	movs	r2, #0
 800060e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000610:	4b1f      	ldr	r3, [pc, #124]	; (8000690 <_ZL12MX_ADC1_Initv+0xac>)
 8000612:	2200      	movs	r2, #0
 8000614:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000616:	4b1e      	ldr	r3, [pc, #120]	; (8000690 <_ZL12MX_ADC1_Initv+0xac>)
 8000618:	2200      	movs	r2, #0
 800061a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800061e:	4b1c      	ldr	r3, [pc, #112]	; (8000690 <_ZL12MX_ADC1_Initv+0xac>)
 8000620:	2200      	movs	r2, #0
 8000622:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000624:	4b1a      	ldr	r3, [pc, #104]	; (8000690 <_ZL12MX_ADC1_Initv+0xac>)
 8000626:	4a1c      	ldr	r2, [pc, #112]	; (8000698 <_ZL12MX_ADC1_Initv+0xb4>)
 8000628:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800062a:	4b19      	ldr	r3, [pc, #100]	; (8000690 <_ZL12MX_ADC1_Initv+0xac>)
 800062c:	2200      	movs	r2, #0
 800062e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000630:	4b17      	ldr	r3, [pc, #92]	; (8000690 <_ZL12MX_ADC1_Initv+0xac>)
 8000632:	2201      	movs	r2, #1
 8000634:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000636:	4b16      	ldr	r3, [pc, #88]	; (8000690 <_ZL12MX_ADC1_Initv+0xac>)
 8000638:	2200      	movs	r2, #0
 800063a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800063e:	4b14      	ldr	r3, [pc, #80]	; (8000690 <_ZL12MX_ADC1_Initv+0xac>)
 8000640:	2201      	movs	r2, #1
 8000642:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000644:	4812      	ldr	r0, [pc, #72]	; (8000690 <_ZL12MX_ADC1_Initv+0xac>)
 8000646:	f000 fcbf 	bl	8000fc8 <HAL_ADC_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	bf14      	ite	ne
 8000650:	2301      	movne	r3, #1
 8000652:	2300      	moveq	r3, #0
 8000654:	b2db      	uxtb	r3, r3
 8000656:	2b00      	cmp	r3, #0
 8000658:	d001      	beq.n	800065e <_ZL12MX_ADC1_Initv+0x7a>
  {
    Error_Handler();
 800065a:	f000 f9f5 	bl	8000a48 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800065e:	2309      	movs	r3, #9
 8000660:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000662:	2301      	movs	r3, #1
 8000664:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000666:	2300      	movs	r3, #0
 8000668:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800066a:	463b      	mov	r3, r7
 800066c:	4619      	mov	r1, r3
 800066e:	4808      	ldr	r0, [pc, #32]	; (8000690 <_ZL12MX_ADC1_Initv+0xac>)
 8000670:	f000 fcee 	bl	8001050 <HAL_ADC_ConfigChannel>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	bf14      	ite	ne
 800067a:	2301      	movne	r3, #1
 800067c:	2300      	moveq	r3, #0
 800067e:	b2db      	uxtb	r3, r3
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <_ZL12MX_ADC1_Initv+0xa4>
  {
    Error_Handler();
 8000684:	f000 f9e0 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	3710      	adds	r7, #16
 800068c:	46bd      	mov	sp, r7
 800068e:	bd80      	pop	{r7, pc}
 8000690:	200000ac 	.word	0x200000ac
 8000694:	40012000 	.word	0x40012000
 8000698:	0f000001 	.word	0x0f000001

0800069c <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006a0:	4b15      	ldr	r3, [pc, #84]	; (80006f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80006a2:	4a16      	ldr	r2, [pc, #88]	; (80006fc <_ZL12MX_I2C1_Initv+0x60>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80006a6:	4b14      	ldr	r3, [pc, #80]	; (80006f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80006a8:	4a15      	ldr	r2, [pc, #84]	; (8000700 <_ZL12MX_I2C1_Initv+0x64>)
 80006aa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80006ae:	2200      	movs	r2, #0
 80006b0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80006b2:	4b11      	ldr	r3, [pc, #68]	; (80006f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80006ba:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80006be:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006c0:	4b0d      	ldr	r3, [pc, #52]	; (80006f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80006c6:	4b0c      	ldr	r3, [pc, #48]	; (80006f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006cc:	4b0a      	ldr	r3, [pc, #40]	; (80006f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006d2:	4b09      	ldr	r3, [pc, #36]	; (80006f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80006d8:	4807      	ldr	r0, [pc, #28]	; (80006f8 <_ZL12MX_I2C1_Initv+0x5c>)
 80006da:	f002 fd8d 	bl	80031f8 <HAL_I2C_Init>
 80006de:	4603      	mov	r3, r0
 80006e0:	2b00      	cmp	r3, #0
 80006e2:	bf14      	ite	ne
 80006e4:	2301      	movne	r3, #1
 80006e6:	2300      	moveq	r3, #0
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 80006ee:	f000 f9ab 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80006f2:	bf00      	nop
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	200000f4 	.word	0x200000f4
 80006fc:	40005400 	.word	0x40005400
 8000700:	000186a0 	.word	0x000186a0

08000704 <_ZL12MX_I2S3_Initv>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000708:	4b15      	ldr	r3, [pc, #84]	; (8000760 <_ZL12MX_I2S3_Initv+0x5c>)
 800070a:	4a16      	ldr	r2, [pc, #88]	; (8000764 <_ZL12MX_I2S3_Initv+0x60>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 800070e:	4b14      	ldr	r3, [pc, #80]	; (8000760 <_ZL12MX_I2S3_Initv+0x5c>)
 8000710:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000714:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000716:	4b12      	ldr	r3, [pc, #72]	; (8000760 <_ZL12MX_I2S3_Initv+0x5c>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 800071c:	4b10      	ldr	r3, [pc, #64]	; (8000760 <_ZL12MX_I2S3_Initv+0x5c>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000722:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <_ZL12MX_I2S3_Initv+0x5c>)
 8000724:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000728:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 800072a:	4b0d      	ldr	r3, [pc, #52]	; (8000760 <_ZL12MX_I2S3_Initv+0x5c>)
 800072c:	4a0e      	ldr	r2, [pc, #56]	; (8000768 <_ZL12MX_I2S3_Initv+0x64>)
 800072e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000730:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <_ZL12MX_I2S3_Initv+0x5c>)
 8000732:	2200      	movs	r2, #0
 8000734:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000736:	4b0a      	ldr	r3, [pc, #40]	; (8000760 <_ZL12MX_I2S3_Initv+0x5c>)
 8000738:	2200      	movs	r2, #0
 800073a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 800073c:	4b08      	ldr	r3, [pc, #32]	; (8000760 <_ZL12MX_I2S3_Initv+0x5c>)
 800073e:	2200      	movs	r2, #0
 8000740:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000742:	4807      	ldr	r0, [pc, #28]	; (8000760 <_ZL12MX_I2S3_Initv+0x5c>)
 8000744:	f002 fe9c 	bl	8003480 <HAL_I2S_Init>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	bf14      	ite	ne
 800074e:	2301      	movne	r3, #1
 8000750:	2300      	moveq	r3, #0
 8000752:	b2db      	uxtb	r3, r3
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <_ZL12MX_I2S3_Initv+0x58>
  {
    Error_Handler();
 8000758:	f000 f976 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000148 	.word	0x20000148
 8000764:	40003c00 	.word	0x40003c00
 8000768:	00017700 	.word	0x00017700

0800076c <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000770:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <_ZL12MX_SPI1_Initv+0x70>)
 8000772:	4a1b      	ldr	r2, [pc, #108]	; (80007e0 <_ZL12MX_SPI1_Initv+0x74>)
 8000774:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000776:	4b19      	ldr	r3, [pc, #100]	; (80007dc <_ZL12MX_SPI1_Initv+0x70>)
 8000778:	f44f 7282 	mov.w	r2, #260	; 0x104
 800077c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800077e:	4b17      	ldr	r3, [pc, #92]	; (80007dc <_ZL12MX_SPI1_Initv+0x70>)
 8000780:	2200      	movs	r2, #0
 8000782:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000784:	4b15      	ldr	r3, [pc, #84]	; (80007dc <_ZL12MX_SPI1_Initv+0x70>)
 8000786:	2200      	movs	r2, #0
 8000788:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800078a:	4b14      	ldr	r3, [pc, #80]	; (80007dc <_ZL12MX_SPI1_Initv+0x70>)
 800078c:	2200      	movs	r2, #0
 800078e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000790:	4b12      	ldr	r3, [pc, #72]	; (80007dc <_ZL12MX_SPI1_Initv+0x70>)
 8000792:	2200      	movs	r2, #0
 8000794:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000796:	4b11      	ldr	r3, [pc, #68]	; (80007dc <_ZL12MX_SPI1_Initv+0x70>)
 8000798:	f44f 7200 	mov.w	r2, #512	; 0x200
 800079c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800079e:	4b0f      	ldr	r3, [pc, #60]	; (80007dc <_ZL12MX_SPI1_Initv+0x70>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007a4:	4b0d      	ldr	r3, [pc, #52]	; (80007dc <_ZL12MX_SPI1_Initv+0x70>)
 80007a6:	2200      	movs	r2, #0
 80007a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007aa:	4b0c      	ldr	r3, [pc, #48]	; (80007dc <_ZL12MX_SPI1_Initv+0x70>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007b0:	4b0a      	ldr	r3, [pc, #40]	; (80007dc <_ZL12MX_SPI1_Initv+0x70>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007b6:	4b09      	ldr	r3, [pc, #36]	; (80007dc <_ZL12MX_SPI1_Initv+0x70>)
 80007b8:	220a      	movs	r2, #10
 80007ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007bc:	4807      	ldr	r0, [pc, #28]	; (80007dc <_ZL12MX_SPI1_Initv+0x70>)
 80007be:	f004 f8c3 	bl	8004948 <HAL_SPI_Init>
 80007c2:	4603      	mov	r3, r0
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	bf14      	ite	ne
 80007c8:	2301      	movne	r3, #1
 80007ca:	2300      	moveq	r3, #0
 80007cc:	b2db      	uxtb	r3, r3
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d001      	beq.n	80007d6 <_ZL12MX_SPI1_Initv+0x6a>
  {
    Error_Handler();
 80007d2:	f000 f939 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	20000190 	.word	0x20000190
 80007e0:	40013000 	.word	0x40013000

080007e4 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08c      	sub	sp, #48	; 0x30
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 031c 	add.w	r3, r7, #28
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	61bb      	str	r3, [r7, #24]
 80007fe:	4b8c      	ldr	r3, [pc, #560]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	4a8b      	ldr	r2, [pc, #556]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 8000804:	f043 0310 	orr.w	r3, r3, #16
 8000808:	6313      	str	r3, [r2, #48]	; 0x30
 800080a:	4b89      	ldr	r3, [pc, #548]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080e:	f003 0310 	and.w	r3, r3, #16
 8000812:	61bb      	str	r3, [r7, #24]
 8000814:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	617b      	str	r3, [r7, #20]
 800081a:	4b85      	ldr	r3, [pc, #532]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a84      	ldr	r2, [pc, #528]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 8000820:	f043 0304 	orr.w	r3, r3, #4
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b82      	ldr	r3, [pc, #520]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0304 	and.w	r3, r3, #4
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
 8000836:	4b7e      	ldr	r3, [pc, #504]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a7d      	ldr	r2, [pc, #500]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 800083c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b7b      	ldr	r3, [pc, #492]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	60fb      	str	r3, [r7, #12]
 8000852:	4b77      	ldr	r3, [pc, #476]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000856:	4a76      	ldr	r2, [pc, #472]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 8000858:	f043 0301 	orr.w	r3, r3, #1
 800085c:	6313      	str	r3, [r2, #48]	; 0x30
 800085e:	4b74      	ldr	r3, [pc, #464]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000862:	f003 0301 	and.w	r3, r3, #1
 8000866:	60fb      	str	r3, [r7, #12]
 8000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60bb      	str	r3, [r7, #8]
 800086e:	4b70      	ldr	r3, [pc, #448]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000872:	4a6f      	ldr	r2, [pc, #444]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 8000874:	f043 0302 	orr.w	r3, r3, #2
 8000878:	6313      	str	r3, [r2, #48]	; 0x30
 800087a:	4b6d      	ldr	r3, [pc, #436]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	f003 0302 	and.w	r3, r3, #2
 8000882:	60bb      	str	r3, [r7, #8]
 8000884:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	4b69      	ldr	r3, [pc, #420]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a68      	ldr	r2, [pc, #416]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 8000890:	f043 0308 	orr.w	r3, r3, #8
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b66      	ldr	r3, [pc, #408]	; (8000a30 <_ZL12MX_GPIO_Initv+0x24c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0308 	and.w	r3, r3, #8
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|DISP_RS_Pin|DISP_RW_Pin|DISP_ENA_Pin
 80008a2:	2200      	movs	r2, #0
 80008a4:	f64f 4188 	movw	r1, #64648	; 0xfc88
 80008a8:	4862      	ldr	r0, [pc, #392]	; (8000a34 <_ZL12MX_GPIO_Initv+0x250>)
 80008aa:	f001 f89d 	bl	80019e8 <HAL_GPIO_WritePin>
                          |DISP_DB4_Pin|DISP_DB5_Pin|DISP_DB6_Pin|DISP_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80008ae:	2201      	movs	r2, #1
 80008b0:	2101      	movs	r1, #1
 80008b2:	4861      	ldr	r0, [pc, #388]	; (8000a38 <_ZL12MX_GPIO_Initv+0x254>)
 80008b4:	f001 f898 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80008b8:	2200      	movs	r2, #0
 80008ba:	f24f 0110 	movw	r1, #61456	; 0xf010
 80008be:	485f      	ldr	r0, [pc, #380]	; (8000a3c <_ZL12MX_GPIO_Initv+0x258>)
 80008c0:	f001 f892 	bl	80019e8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin, GPIO_PIN_RESET);
 80008c4:	2200      	movs	r2, #0
 80008c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ca:	485b      	ldr	r0, [pc, #364]	; (8000a38 <_ZL12MX_GPIO_Initv+0x254>)
 80008cc:	f001 f88c 	bl	80019e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin DISP_RS_Pin DISP_RW_Pin DISP_ENA_Pin
                           DISP_DB4_Pin DISP_DB5_Pin DISP_DB6_Pin DISP_DB7_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|DISP_RS_Pin|DISP_RW_Pin|DISP_ENA_Pin
 80008d0:	f64f 4388 	movw	r3, #64648	; 0xfc88
 80008d4:	61fb      	str	r3, [r7, #28]
                          |DISP_DB4_Pin|DISP_DB5_Pin|DISP_DB6_Pin|DISP_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d6:	2301      	movs	r3, #1
 80008d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008de:	2300      	movs	r3, #0
 80008e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	4852      	ldr	r0, [pc, #328]	; (8000a34 <_ZL12MX_GPIO_Initv+0x250>)
 80008ea:	f000 fee1 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin BTN_DOWN_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|BTN_DOWN_Pin;
 80008ee:	f240 1301 	movw	r3, #257	; 0x101
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008f4:	2301      	movs	r3, #1
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008fc:	2300      	movs	r3, #0
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000900:	f107 031c 	add.w	r3, r7, #28
 8000904:	4619      	mov	r1, r3
 8000906:	484c      	ldr	r0, [pc, #304]	; (8000a38 <_ZL12MX_GPIO_Initv+0x254>)
 8000908:	f000 fed2 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 800090c:	2308      	movs	r3, #8
 800090e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000910:	2302      	movs	r3, #2
 8000912:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000914:	2300      	movs	r3, #0
 8000916:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000918:	2300      	movs	r3, #0
 800091a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800091c:	2305      	movs	r3, #5
 800091e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000920:	f107 031c 	add.w	r3, r7, #28
 8000924:	4619      	mov	r1, r3
 8000926:	4844      	ldr	r0, [pc, #272]	; (8000a38 <_ZL12MX_GPIO_Initv+0x254>)
 8000928:	f000 fec2 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092c:	2301      	movs	r3, #1
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000930:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000934:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800093a:	f107 031c 	add.w	r3, r7, #28
 800093e:	4619      	mov	r1, r3
 8000940:	483f      	ldr	r0, [pc, #252]	; (8000a40 <_ZL12MX_GPIO_Initv+0x25c>)
 8000942:	f000 feb5 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000946:	2304      	movs	r3, #4
 8000948:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800094a:	2300      	movs	r3, #0
 800094c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 031c 	add.w	r3, r7, #28
 8000956:	4619      	mov	r1, r3
 8000958:	483a      	ldr	r0, [pc, #232]	; (8000a44 <_ZL12MX_GPIO_Initv+0x260>)
 800095a:	f000 fea9 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800095e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000962:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000964:	2302      	movs	r3, #2
 8000966:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000970:	2301      	movs	r3, #1
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000974:	f107 031c 	add.w	r3, r7, #28
 8000978:	4619      	mov	r1, r3
 800097a:	482e      	ldr	r0, [pc, #184]	; (8000a34 <_ZL12MX_GPIO_Initv+0x250>)
 800097c:	f000 fe98 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000980:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000984:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000986:	2302      	movs	r3, #2
 8000988:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098a:	2300      	movs	r3, #0
 800098c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098e:	2300      	movs	r3, #0
 8000990:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000992:	2305      	movs	r3, #5
 8000994:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000996:	f107 031c 	add.w	r3, r7, #28
 800099a:	4619      	mov	r1, r3
 800099c:	4829      	ldr	r0, [pc, #164]	; (8000a44 <_ZL12MX_GPIO_Initv+0x260>)
 800099e:	f000 fe87 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80009a2:	f24f 0310 	movw	r3, #61456	; 0xf010
 80009a6:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a8:	2301      	movs	r3, #1
 80009aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ac:	2300      	movs	r3, #0
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b4:	f107 031c 	add.w	r3, r7, #28
 80009b8:	4619      	mov	r1, r3
 80009ba:	4820      	ldr	r0, [pc, #128]	; (8000a3c <_ZL12MX_GPIO_Initv+0x258>)
 80009bc:	f000 fe78 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_LEFT_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 80009c0:	f44f 6324 	mov.w	r3, #2624	; 0xa40
 80009c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c6:	2300      	movs	r3, #0
 80009c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009ce:	f107 031c 	add.w	r3, r7, #28
 80009d2:	4619      	mov	r1, r3
 80009d4:	4818      	ldr	r0, [pc, #96]	; (8000a38 <_ZL12MX_GPIO_Initv+0x254>)
 80009d6:	f000 fe6b 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_MID_Pin */
  GPIO_InitStruct.Pin = BTN_MID_Pin;
 80009da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e0:	2300      	movs	r3, #0
 80009e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e4:	2300      	movs	r3, #0
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_MID_GPIO_Port, &GPIO_InitStruct);
 80009e8:	f107 031c 	add.w	r3, r7, #28
 80009ec:	4619      	mov	r1, r3
 80009ee:	4814      	ldr	r0, [pc, #80]	; (8000a40 <_ZL12MX_GPIO_Initv+0x25c>)
 80009f0:	f000 fe5e 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 80009f4:	2320      	movs	r3, #32
 80009f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f8:	2300      	movs	r3, #0
 80009fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a00:	f107 031c 	add.w	r3, r7, #28
 8000a04:	4619      	mov	r1, r3
 8000a06:	480d      	ldr	r0, [pc, #52]	; (8000a3c <_ZL12MX_GPIO_Initv+0x258>)
 8000a08:	f000 fe52 	bl	80016b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000a10:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a16:	2300      	movs	r3, #0
 8000a18:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000a1a:	f107 031c 	add.w	r3, r7, #28
 8000a1e:	4619      	mov	r1, r3
 8000a20:	4804      	ldr	r0, [pc, #16]	; (8000a34 <_ZL12MX_GPIO_Initv+0x250>)
 8000a22:	f000 fe45 	bl	80016b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a26:	bf00      	nop
 8000a28:	3730      	adds	r7, #48	; 0x30
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bd80      	pop	{r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800
 8000a34:	40021000 	.word	0x40021000
 8000a38:	40020800 	.word	0x40020800
 8000a3c:	40020c00 	.word	0x40020c00
 8000a40:	40020000 	.word	0x40020000
 8000a44:	40020400 	.word	0x40020400

08000a48 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a4c:	b672      	cpsid	i
}
 8000a4e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a50:	e7fe      	b.n	8000a50 <Error_Handler+0x8>

08000a52 <_Z7mainCppv>:
#include "main.c"

void mainCpp() {
 8000a52:	b480      	push	{r7}
 8000a54:	af00      	add	r7, sp, #0
	while(1) {
 8000a56:	e7fe      	b.n	8000a56 <_Z7mainCppv+0x4>

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	2300      	movs	r3, #0
 8000a60:	607b      	str	r3, [r7, #4]
 8000a62:	4b10      	ldr	r3, [pc, #64]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a66:	4a0f      	ldr	r2, [pc, #60]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a76:	607b      	str	r3, [r7, #4]
 8000a78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	603b      	str	r3, [r7, #0]
 8000a7e:	4b09      	ldr	r3, [pc, #36]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a82:	4a08      	ldr	r2, [pc, #32]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a88:	6413      	str	r3, [r2, #64]	; 0x40
 8000a8a:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a92:	603b      	str	r3, [r7, #0]
 8000a94:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a96:	2007      	movs	r0, #7
 8000a98:	f000 fdc8 	bl	800162c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9c:	bf00      	nop
 8000a9e:	3708      	adds	r7, #8
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	bd80      	pop	{r7, pc}
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08a      	sub	sp, #40	; 0x28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ab0:	f107 0314 	add.w	r3, r7, #20
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	601a      	str	r2, [r3, #0]
 8000ab8:	605a      	str	r2, [r3, #4]
 8000aba:	609a      	str	r2, [r3, #8]
 8000abc:	60da      	str	r2, [r3, #12]
 8000abe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	4a17      	ldr	r2, [pc, #92]	; (8000b24 <HAL_ADC_MspInit+0x7c>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d127      	bne.n	8000b1a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	4b16      	ldr	r3, [pc, #88]	; (8000b28 <HAL_ADC_MspInit+0x80>)
 8000ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ad2:	4a15      	ldr	r2, [pc, #84]	; (8000b28 <HAL_ADC_MspInit+0x80>)
 8000ad4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ad8:	6453      	str	r3, [r2, #68]	; 0x44
 8000ada:	4b13      	ldr	r3, [pc, #76]	; (8000b28 <HAL_ADC_MspInit+0x80>)
 8000adc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ade:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ae2:	613b      	str	r3, [r7, #16]
 8000ae4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	60fb      	str	r3, [r7, #12]
 8000aea:	4b0f      	ldr	r3, [pc, #60]	; (8000b28 <HAL_ADC_MspInit+0x80>)
 8000aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000aee:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <HAL_ADC_MspInit+0x80>)
 8000af0:	f043 0302 	orr.w	r3, r3, #2
 8000af4:	6313      	str	r3, [r2, #48]	; 0x30
 8000af6:	4b0c      	ldr	r3, [pc, #48]	; (8000b28 <HAL_ADC_MspInit+0x80>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	60fb      	str	r3, [r7, #12]
 8000b00:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = TEMP_SENS_Pin;
 8000b02:	2302      	movs	r3, #2
 8000b04:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b06:	2303      	movs	r3, #3
 8000b08:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TEMP_SENS_GPIO_Port, &GPIO_InitStruct);
 8000b0e:	f107 0314 	add.w	r3, r7, #20
 8000b12:	4619      	mov	r1, r3
 8000b14:	4805      	ldr	r0, [pc, #20]	; (8000b2c <HAL_ADC_MspInit+0x84>)
 8000b16:	f000 fdcb 	bl	80016b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b1a:	bf00      	nop
 8000b1c:	3728      	adds	r7, #40	; 0x28
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	40012000 	.word	0x40012000
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40020400 	.word	0x40020400

08000b30 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b08a      	sub	sp, #40	; 0x28
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	f107 0314 	add.w	r3, r7, #20
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	601a      	str	r2, [r3, #0]
 8000b40:	605a      	str	r2, [r3, #4]
 8000b42:	609a      	str	r2, [r3, #8]
 8000b44:	60da      	str	r2, [r3, #12]
 8000b46:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	4a19      	ldr	r2, [pc, #100]	; (8000bb4 <HAL_I2C_MspInit+0x84>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d12c      	bne.n	8000bac <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b52:	2300      	movs	r3, #0
 8000b54:	613b      	str	r3, [r7, #16]
 8000b56:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b5a:	4a17      	ldr	r2, [pc, #92]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b5c:	f043 0302 	orr.w	r3, r3, #2
 8000b60:	6313      	str	r3, [r2, #48]	; 0x30
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b66:	f003 0302 	and.w	r3, r3, #2
 8000b6a:	613b      	str	r3, [r7, #16]
 8000b6c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000b6e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000b72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b74:	2312      	movs	r3, #18
 8000b76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b80:	2304      	movs	r3, #4
 8000b82:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b84:	f107 0314 	add.w	r3, r7, #20
 8000b88:	4619      	mov	r1, r3
 8000b8a:	480c      	ldr	r0, [pc, #48]	; (8000bbc <HAL_I2C_MspInit+0x8c>)
 8000b8c:	f000 fd90 	bl	80016b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	4b08      	ldr	r3, [pc, #32]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000b9a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba0:	4b05      	ldr	r3, [pc, #20]	; (8000bb8 <HAL_I2C_MspInit+0x88>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000bac:	bf00      	nop
 8000bae:	3728      	adds	r7, #40	; 0x28
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	40005400 	.word	0x40005400
 8000bb8:	40023800 	.word	0x40023800
 8000bbc:	40020400 	.word	0x40020400

08000bc0 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b08e      	sub	sp, #56	; 0x38
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bd8:	f107 0314 	add.w	r3, r7, #20
 8000bdc:	2200      	movs	r2, #0
 8000bde:	601a      	str	r2, [r3, #0]
 8000be0:	605a      	str	r2, [r3, #4]
 8000be2:	609a      	str	r2, [r3, #8]
 8000be4:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	4a31      	ldr	r2, [pc, #196]	; (8000cb0 <HAL_I2S_MspInit+0xf0>)
 8000bec:	4293      	cmp	r3, r2
 8000bee:	d15a      	bne.n	8000ca6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000bf4:	23c0      	movs	r3, #192	; 0xc0
 8000bf6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bfc:	f107 0314 	add.w	r3, r7, #20
 8000c00:	4618      	mov	r0, r3
 8000c02:	f003 fd61 	bl	80046c8 <HAL_RCCEx_PeriphCLKConfig>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000c0c:	f7ff ff1c 	bl	8000a48 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
 8000c14:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c18:	4a26      	ldr	r2, [pc, #152]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000c20:	4b24      	ldr	r3, [pc, #144]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000c28:	613b      	str	r3, [r7, #16]
 8000c2a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c2c:	2300      	movs	r3, #0
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c34:	4a1f      	ldr	r2, [pc, #124]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3c:	4b1d      	ldr	r3, [pc, #116]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	60fb      	str	r3, [r7, #12]
 8000c46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c48:	2300      	movs	r3, #0
 8000c4a:	60bb      	str	r3, [r7, #8]
 8000c4c:	4b19      	ldr	r3, [pc, #100]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c50:	4a18      	ldr	r2, [pc, #96]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c52:	f043 0304 	orr.w	r3, r3, #4
 8000c56:	6313      	str	r3, [r2, #48]	; 0x30
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <HAL_I2S_MspInit+0xf4>)
 8000c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5c:	f003 0304 	and.w	r3, r3, #4
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000c64:	2310      	movs	r3, #16
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c68:	2302      	movs	r3, #2
 8000c6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c70:	2300      	movs	r3, #0
 8000c72:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c74:	2306      	movs	r3, #6
 8000c76:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000c78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	480e      	ldr	r0, [pc, #56]	; (8000cb8 <HAL_I2S_MspInit+0xf8>)
 8000c80:	f000 fd16 	bl	80016b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000c84:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8000c88:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c8a:	2302      	movs	r3, #2
 8000c8c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000c96:	2306      	movs	r3, #6
 8000c98:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c9a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4806      	ldr	r0, [pc, #24]	; (8000cbc <HAL_I2S_MspInit+0xfc>)
 8000ca2:	f000 fd05 	bl	80016b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ca6:	bf00      	nop
 8000ca8:	3738      	adds	r7, #56	; 0x38
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	40003c00 	.word	0x40003c00
 8000cb4:	40023800 	.word	0x40023800
 8000cb8:	40020000 	.word	0x40020000
 8000cbc:	40020800 	.word	0x40020800

08000cc0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b08a      	sub	sp, #40	; 0x28
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 0314 	add.w	r3, r7, #20
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a19      	ldr	r2, [pc, #100]	; (8000d44 <HAL_SPI_MspInit+0x84>)
 8000cde:	4293      	cmp	r3, r2
 8000ce0:	d12b      	bne.n	8000d3a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	613b      	str	r3, [r7, #16]
 8000ce6:	4b18      	ldr	r3, [pc, #96]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000ce8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cea:	4a17      	ldr	r2, [pc, #92]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000cec:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000cf0:	6453      	str	r3, [r2, #68]	; 0x44
 8000cf2:	4b15      	ldr	r3, [pc, #84]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000cf4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000cfa:	613b      	str	r3, [r7, #16]
 8000cfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	60fb      	str	r3, [r7, #12]
 8000d02:	4b11      	ldr	r3, [pc, #68]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a10      	ldr	r2, [pc, #64]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b0e      	ldr	r3, [pc, #56]	; (8000d48 <HAL_SPI_MspInit+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
 8000d18:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000d1a:	23e0      	movs	r3, #224	; 0xe0
 8000d1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d1e:	2302      	movs	r3, #2
 8000d20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000d2a:	2305      	movs	r3, #5
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <HAL_SPI_MspInit+0x8c>)
 8000d36:	f000 fcbb 	bl	80016b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d3a:	bf00      	nop
 8000d3c:	3728      	adds	r7, #40	; 0x28
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40013000 	.word	0x40013000
 8000d48:	40023800 	.word	0x40023800
 8000d4c:	40020000 	.word	0x40020000

08000d50 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <NMI_Handler+0x4>

08000d56 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5a:	e7fe      	b.n	8000d5a <HardFault_Handler+0x4>

08000d5c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d60:	e7fe      	b.n	8000d60 <MemManage_Handler+0x4>

08000d62 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d62:	b480      	push	{r7}
 8000d64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d66:	e7fe      	b.n	8000d66 <BusFault_Handler+0x4>

08000d68 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6c:	e7fe      	b.n	8000d6c <UsageFault_Handler+0x4>

08000d6e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d72:	bf00      	nop
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d80:	bf00      	nop
 8000d82:	46bd      	mov	sp, r7
 8000d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d88:	4770      	bx	lr

08000d8a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d8e:	bf00      	nop
 8000d90:	46bd      	mov	sp, r7
 8000d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d96:	4770      	bx	lr

08000d98 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9c:	f000 f8d0 	bl	8000f40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da0:	bf00      	nop
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000da8:	4802      	ldr	r0, [pc, #8]	; (8000db4 <OTG_FS_IRQHandler+0x10>)
 8000daa:	f001 f8a1 	bl	8001ef0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000dae:	bf00      	nop
 8000db0:	bd80      	pop	{r7, pc}
 8000db2:	bf00      	nop
 8000db4:	200005cc 	.word	0x200005cc

08000db8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b086      	sub	sp, #24
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc0:	4a14      	ldr	r2, [pc, #80]	; (8000e14 <_sbrk+0x5c>)
 8000dc2:	4b15      	ldr	r3, [pc, #84]	; (8000e18 <_sbrk+0x60>)
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dcc:	4b13      	ldr	r3, [pc, #76]	; (8000e1c <_sbrk+0x64>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d102      	bne.n	8000dda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dd4:	4b11      	ldr	r3, [pc, #68]	; (8000e1c <_sbrk+0x64>)
 8000dd6:	4a12      	ldr	r2, [pc, #72]	; (8000e20 <_sbrk+0x68>)
 8000dd8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dda:	4b10      	ldr	r3, [pc, #64]	; (8000e1c <_sbrk+0x64>)
 8000ddc:	681a      	ldr	r2, [r3, #0]
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	4413      	add	r3, r2
 8000de2:	693a      	ldr	r2, [r7, #16]
 8000de4:	429a      	cmp	r2, r3
 8000de6:	d207      	bcs.n	8000df8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000de8:	f006 f900 	bl	8006fec <__errno>
 8000dec:	4603      	mov	r3, r0
 8000dee:	220c      	movs	r2, #12
 8000df0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000df2:	f04f 33ff 	mov.w	r3, #4294967295
 8000df6:	e009      	b.n	8000e0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000df8:	4b08      	ldr	r3, [pc, #32]	; (8000e1c <_sbrk+0x64>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dfe:	4b07      	ldr	r3, [pc, #28]	; (8000e1c <_sbrk+0x64>)
 8000e00:	681a      	ldr	r2, [r3, #0]
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4413      	add	r3, r2
 8000e06:	4a05      	ldr	r2, [pc, #20]	; (8000e1c <_sbrk+0x64>)
 8000e08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e0a:	68fb      	ldr	r3, [r7, #12]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3718      	adds	r7, #24
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20020000 	.word	0x20020000
 8000e18:	00000400 	.word	0x00000400
 8000e1c:	200001e8 	.word	0x200001e8
 8000e20:	200008e0 	.word	0x200008e0

08000e24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <SystemInit+0x20>)
 8000e2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e2e:	4a05      	ldr	r2, [pc, #20]	; (8000e44 <SystemInit+0x20>)
 8000e30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr
 8000e42:	bf00      	nop
 8000e44:	e000ed00 	.word	0xe000ed00

08000e48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e4c:	480d      	ldr	r0, [pc, #52]	; (8000e84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e4e:	490e      	ldr	r1, [pc, #56]	; (8000e88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e50:	4a0e      	ldr	r2, [pc, #56]	; (8000e8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e54:	e002      	b.n	8000e5c <LoopCopyDataInit>

08000e56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e5a:	3304      	adds	r3, #4

08000e5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e60:	d3f9      	bcc.n	8000e56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e62:	4a0b      	ldr	r2, [pc, #44]	; (8000e90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e64:	4c0b      	ldr	r4, [pc, #44]	; (8000e94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e68:	e001      	b.n	8000e6e <LoopFillZerobss>

08000e6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e6c:	3204      	adds	r2, #4

08000e6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e70:	d3fb      	bcc.n	8000e6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e72:	f7ff ffd7 	bl	8000e24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e76:	f006 f8bf 	bl	8006ff8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e7a:	f7ff fb27 	bl	80004cc <main>
  bx  lr    
 8000e7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e80:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e88:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8000e8c:	080072b0 	.word	0x080072b0
  ldr r2, =_sbss
 8000e90:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8000e94:	200008e0 	.word	0x200008e0

08000e98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e98:	e7fe      	b.n	8000e98 <ADC_IRQHandler>
	...

08000e9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ea0:	4b0e      	ldr	r3, [pc, #56]	; (8000edc <HAL_Init+0x40>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a0d      	ldr	r2, [pc, #52]	; (8000edc <HAL_Init+0x40>)
 8000ea6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000eaa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000eac:	4b0b      	ldr	r3, [pc, #44]	; (8000edc <HAL_Init+0x40>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	4a0a      	ldr	r2, [pc, #40]	; (8000edc <HAL_Init+0x40>)
 8000eb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000eb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000eb8:	4b08      	ldr	r3, [pc, #32]	; (8000edc <HAL_Init+0x40>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	4a07      	ldr	r2, [pc, #28]	; (8000edc <HAL_Init+0x40>)
 8000ebe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ec2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ec4:	2003      	movs	r0, #3
 8000ec6:	f000 fbb1 	bl	800162c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000eca:	2000      	movs	r0, #0
 8000ecc:	f000 f808 	bl	8000ee0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ed0:	f7ff fdc2 	bl	8000a58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ed4:	2300      	movs	r3, #0
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	40023c00 	.word	0x40023c00

08000ee0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <HAL_InitTick+0x54>)
 8000eea:	681a      	ldr	r2, [r3, #0]
 8000eec:	4b12      	ldr	r3, [pc, #72]	; (8000f38 <HAL_InitTick+0x58>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ef6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000efa:	fbb2 f3f3 	udiv	r3, r2, r3
 8000efe:	4618      	mov	r0, r3
 8000f00:	f000 fbc9 	bl	8001696 <HAL_SYSTICK_Config>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e00e      	b.n	8000f2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2b0f      	cmp	r3, #15
 8000f12:	d80a      	bhi.n	8000f2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f14:	2200      	movs	r2, #0
 8000f16:	6879      	ldr	r1, [r7, #4]
 8000f18:	f04f 30ff 	mov.w	r0, #4294967295
 8000f1c:	f000 fb91 	bl	8001642 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f20:	4a06      	ldr	r2, [pc, #24]	; (8000f3c <HAL_InitTick+0x5c>)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f26:	2300      	movs	r3, #0
 8000f28:	e000      	b.n	8000f2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f2a:	2301      	movs	r3, #1
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000000 	.word	0x20000000
 8000f38:	20000008 	.word	0x20000008
 8000f3c:	20000004 	.word	0x20000004

08000f40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f44:	4b06      	ldr	r3, [pc, #24]	; (8000f60 <HAL_IncTick+0x20>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	461a      	mov	r2, r3
 8000f4a:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <HAL_IncTick+0x24>)
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	4413      	add	r3, r2
 8000f50:	4a04      	ldr	r2, [pc, #16]	; (8000f64 <HAL_IncTick+0x24>)
 8000f52:	6013      	str	r3, [r2, #0]
}
 8000f54:	bf00      	nop
 8000f56:	46bd      	mov	sp, r7
 8000f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5c:	4770      	bx	lr
 8000f5e:	bf00      	nop
 8000f60:	20000008 	.word	0x20000008
 8000f64:	200001ec 	.word	0x200001ec

08000f68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f6c:	4b03      	ldr	r3, [pc, #12]	; (8000f7c <HAL_GetTick+0x14>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
}
 8000f70:	4618      	mov	r0, r3
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	200001ec 	.word	0x200001ec

08000f80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f88:	f7ff ffee 	bl	8000f68 <HAL_GetTick>
 8000f8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f98:	d005      	beq.n	8000fa6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <HAL_Delay+0x44>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	461a      	mov	r2, r3
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000fa6:	bf00      	nop
 8000fa8:	f7ff ffde 	bl	8000f68 <HAL_GetTick>
 8000fac:	4602      	mov	r2, r0
 8000fae:	68bb      	ldr	r3, [r7, #8]
 8000fb0:	1ad3      	subs	r3, r2, r3
 8000fb2:	68fa      	ldr	r2, [r7, #12]
 8000fb4:	429a      	cmp	r2, r3
 8000fb6:	d8f7      	bhi.n	8000fa8 <HAL_Delay+0x28>
  {
  }
}
 8000fb8:	bf00      	nop
 8000fba:	bf00      	nop
 8000fbc:	3710      	adds	r7, #16
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000008 	.word	0x20000008

08000fc8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d101      	bne.n	8000fde <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	e033      	b.n	8001046 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d109      	bne.n	8000ffa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000fe6:	6878      	ldr	r0, [r7, #4]
 8000fe8:	f7ff fd5e 	bl	8000aa8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	2200      	movs	r2, #0
 8000ff0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 0310 	and.w	r3, r3, #16
 8001002:	2b00      	cmp	r3, #0
 8001004:	d118      	bne.n	8001038 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800100a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800100e:	f023 0302 	bic.w	r3, r3, #2
 8001012:	f043 0202 	orr.w	r2, r3, #2
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800101a:	6878      	ldr	r0, [r7, #4]
 800101c:	f000 f93a 	bl	8001294 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800102a:	f023 0303 	bic.w	r3, r3, #3
 800102e:	f043 0201 	orr.w	r2, r3, #1
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	641a      	str	r2, [r3, #64]	; 0x40
 8001036:	e001      	b.n	800103c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001038:	2301      	movs	r3, #1
 800103a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	2200      	movs	r2, #0
 8001040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001044:	7bfb      	ldrb	r3, [r7, #15]
}
 8001046:	4618      	mov	r0, r3
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
	...

08001050 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800105a:	2300      	movs	r3, #0
 800105c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001064:	2b01      	cmp	r3, #1
 8001066:	d101      	bne.n	800106c <HAL_ADC_ConfigChannel+0x1c>
 8001068:	2302      	movs	r3, #2
 800106a:	e105      	b.n	8001278 <HAL_ADC_ConfigChannel+0x228>
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	2201      	movs	r2, #1
 8001070:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b09      	cmp	r3, #9
 800107a:	d925      	bls.n	80010c8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	68d9      	ldr	r1, [r3, #12]
 8001082:	683b      	ldr	r3, [r7, #0]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	b29b      	uxth	r3, r3
 8001088:	461a      	mov	r2, r3
 800108a:	4613      	mov	r3, r2
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	4413      	add	r3, r2
 8001090:	3b1e      	subs	r3, #30
 8001092:	2207      	movs	r2, #7
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43da      	mvns	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	400a      	ands	r2, r1
 80010a0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	68d9      	ldr	r1, [r3, #12]
 80010a8:	683b      	ldr	r3, [r7, #0]
 80010aa:	689a      	ldr	r2, [r3, #8]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	4618      	mov	r0, r3
 80010b4:	4603      	mov	r3, r0
 80010b6:	005b      	lsls	r3, r3, #1
 80010b8:	4403      	add	r3, r0
 80010ba:	3b1e      	subs	r3, #30
 80010bc:	409a      	lsls	r2, r3
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	60da      	str	r2, [r3, #12]
 80010c6:	e022      	b.n	800110e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6919      	ldr	r1, [r3, #16]
 80010ce:	683b      	ldr	r3, [r7, #0]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	b29b      	uxth	r3, r3
 80010d4:	461a      	mov	r2, r3
 80010d6:	4613      	mov	r3, r2
 80010d8:	005b      	lsls	r3, r3, #1
 80010da:	4413      	add	r3, r2
 80010dc:	2207      	movs	r2, #7
 80010de:	fa02 f303 	lsl.w	r3, r2, r3
 80010e2:	43da      	mvns	r2, r3
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	400a      	ands	r2, r1
 80010ea:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	6919      	ldr	r1, [r3, #16]
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	689a      	ldr	r2, [r3, #8]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	4618      	mov	r0, r3
 80010fe:	4603      	mov	r3, r0
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4403      	add	r3, r0
 8001104:	409a      	lsls	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800110e:	683b      	ldr	r3, [r7, #0]
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	2b06      	cmp	r3, #6
 8001114:	d824      	bhi.n	8001160 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	3b05      	subs	r3, #5
 8001128:	221f      	movs	r2, #31
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43da      	mvns	r2, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	400a      	ands	r2, r1
 8001136:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	b29b      	uxth	r3, r3
 8001144:	4618      	mov	r0, r3
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	685a      	ldr	r2, [r3, #4]
 800114a:	4613      	mov	r3, r2
 800114c:	009b      	lsls	r3, r3, #2
 800114e:	4413      	add	r3, r2
 8001150:	3b05      	subs	r3, #5
 8001152:	fa00 f203 	lsl.w	r2, r0, r3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	430a      	orrs	r2, r1
 800115c:	635a      	str	r2, [r3, #52]	; 0x34
 800115e:	e04c      	b.n	80011fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001160:	683b      	ldr	r3, [r7, #0]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	2b0c      	cmp	r3, #12
 8001166:	d824      	bhi.n	80011b2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800116e:	683b      	ldr	r3, [r7, #0]
 8001170:	685a      	ldr	r2, [r3, #4]
 8001172:	4613      	mov	r3, r2
 8001174:	009b      	lsls	r3, r3, #2
 8001176:	4413      	add	r3, r2
 8001178:	3b23      	subs	r3, #35	; 0x23
 800117a:	221f      	movs	r2, #31
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	43da      	mvns	r2, r3
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	400a      	ands	r2, r1
 8001188:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	b29b      	uxth	r3, r3
 8001196:	4618      	mov	r0, r3
 8001198:	683b      	ldr	r3, [r7, #0]
 800119a:	685a      	ldr	r2, [r3, #4]
 800119c:	4613      	mov	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	4413      	add	r3, r2
 80011a2:	3b23      	subs	r3, #35	; 0x23
 80011a4:	fa00 f203 	lsl.w	r2, r0, r3
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	631a      	str	r2, [r3, #48]	; 0x30
 80011b0:	e023      	b.n	80011fa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	685a      	ldr	r2, [r3, #4]
 80011bc:	4613      	mov	r3, r2
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	3b41      	subs	r3, #65	; 0x41
 80011c4:	221f      	movs	r2, #31
 80011c6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ca:	43da      	mvns	r2, r3
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	400a      	ands	r2, r1
 80011d2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	b29b      	uxth	r3, r3
 80011e0:	4618      	mov	r0, r3
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	3b41      	subs	r3, #65	; 0x41
 80011ee:	fa00 f203 	lsl.w	r2, r0, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	430a      	orrs	r2, r1
 80011f8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80011fa:	4b22      	ldr	r3, [pc, #136]	; (8001284 <HAL_ADC_ConfigChannel+0x234>)
 80011fc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	4a21      	ldr	r2, [pc, #132]	; (8001288 <HAL_ADC_ConfigChannel+0x238>)
 8001204:	4293      	cmp	r3, r2
 8001206:	d109      	bne.n	800121c <HAL_ADC_ConfigChannel+0x1cc>
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2b12      	cmp	r3, #18
 800120e:	d105      	bne.n	800121c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	4a19      	ldr	r2, [pc, #100]	; (8001288 <HAL_ADC_ConfigChannel+0x238>)
 8001222:	4293      	cmp	r3, r2
 8001224:	d123      	bne.n	800126e <HAL_ADC_ConfigChannel+0x21e>
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2b10      	cmp	r3, #16
 800122c:	d003      	beq.n	8001236 <HAL_ADC_ConfigChannel+0x1e6>
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	2b11      	cmp	r3, #17
 8001234:	d11b      	bne.n	800126e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b10      	cmp	r3, #16
 8001248:	d111      	bne.n	800126e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800124a:	4b10      	ldr	r3, [pc, #64]	; (800128c <HAL_ADC_ConfigChannel+0x23c>)
 800124c:	681b      	ldr	r3, [r3, #0]
 800124e:	4a10      	ldr	r2, [pc, #64]	; (8001290 <HAL_ADC_ConfigChannel+0x240>)
 8001250:	fba2 2303 	umull	r2, r3, r2, r3
 8001254:	0c9a      	lsrs	r2, r3, #18
 8001256:	4613      	mov	r3, r2
 8001258:	009b      	lsls	r3, r3, #2
 800125a:	4413      	add	r3, r2
 800125c:	005b      	lsls	r3, r3, #1
 800125e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001260:	e002      	b.n	8001268 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001262:	68bb      	ldr	r3, [r7, #8]
 8001264:	3b01      	subs	r3, #1
 8001266:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001268:	68bb      	ldr	r3, [r7, #8]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1f9      	bne.n	8001262 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2200      	movs	r2, #0
 8001272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001276:	2300      	movs	r3, #0
}
 8001278:	4618      	mov	r0, r3
 800127a:	3714      	adds	r7, #20
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr
 8001284:	40012300 	.word	0x40012300
 8001288:	40012000 	.word	0x40012000
 800128c:	20000000 	.word	0x20000000
 8001290:	431bde83 	.word	0x431bde83

08001294 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001294:	b480      	push	{r7}
 8001296:	b085      	sub	sp, #20
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800129c:	4b79      	ldr	r3, [pc, #484]	; (8001484 <ADC_Init+0x1f0>)
 800129e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	685a      	ldr	r2, [r3, #4]
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	685b      	ldr	r3, [r3, #4]
 80012b4:	431a      	orrs	r2, r3
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	685a      	ldr	r2, [r3, #4]
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6859      	ldr	r1, [r3, #4]
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	021a      	lsls	r2, r3, #8
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	430a      	orrs	r2, r1
 80012dc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	685a      	ldr	r2, [r3, #4]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80012ec:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	681b      	ldr	r3, [r3, #0]
 80012f2:	6859      	ldr	r1, [r3, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	689a      	ldr	r2, [r3, #8]
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800130e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	6899      	ldr	r1, [r3, #8]
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	68da      	ldr	r2, [r3, #12]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	430a      	orrs	r2, r1
 8001320:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001326:	4a58      	ldr	r2, [pc, #352]	; (8001488 <ADC_Init+0x1f4>)
 8001328:	4293      	cmp	r3, r2
 800132a:	d022      	beq.n	8001372 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	689a      	ldr	r2, [r3, #8]
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800133a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	6899      	ldr	r1, [r3, #8]
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	430a      	orrs	r2, r1
 800134c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	689a      	ldr	r2, [r3, #8]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800135c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	6899      	ldr	r1, [r3, #8]
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	430a      	orrs	r2, r1
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	e00f      	b.n	8001392 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	689a      	ldr	r2, [r3, #8]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001380:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	689a      	ldr	r2, [r3, #8]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001390:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	689a      	ldr	r2, [r3, #8]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	f022 0202 	bic.w	r2, r2, #2
 80013a0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	6899      	ldr	r1, [r3, #8]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	7e1b      	ldrb	r3, [r3, #24]
 80013ac:	005a      	lsls	r2, r3, #1
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	430a      	orrs	r2, r1
 80013b4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d01b      	beq.n	80013f8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	685a      	ldr	r2, [r3, #4]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013ce:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	685a      	ldr	r2, [r3, #4]
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80013de:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	6859      	ldr	r1, [r3, #4]
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ea:	3b01      	subs	r3, #1
 80013ec:	035a      	lsls	r2, r3, #13
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	605a      	str	r2, [r3, #4]
 80013f6:	e007      	b.n	8001408 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	685a      	ldr	r2, [r3, #4]
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001406:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001416:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	69db      	ldr	r3, [r3, #28]
 8001422:	3b01      	subs	r3, #1
 8001424:	051a      	lsls	r2, r3, #20
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	689a      	ldr	r2, [r3, #8]
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800143c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	6899      	ldr	r1, [r3, #8]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800144a:	025a      	lsls	r2, r3, #9
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	430a      	orrs	r2, r1
 8001452:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	689a      	ldr	r2, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001462:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	6899      	ldr	r1, [r3, #8]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	695b      	ldr	r3, [r3, #20]
 800146e:	029a      	lsls	r2, r3, #10
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	430a      	orrs	r2, r1
 8001476:	609a      	str	r2, [r3, #8]
}
 8001478:	bf00      	nop
 800147a:	3714      	adds	r7, #20
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr
 8001484:	40012300 	.word	0x40012300
 8001488:	0f000001 	.word	0x0f000001

0800148c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800148c:	b480      	push	{r7}
 800148e:	b085      	sub	sp, #20
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	f003 0307 	and.w	r3, r3, #7
 800149a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800149c:	4b0c      	ldr	r3, [pc, #48]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 800149e:	68db      	ldr	r3, [r3, #12]
 80014a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014a2:	68ba      	ldr	r2, [r7, #8]
 80014a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a8:	4013      	ands	r3, r2
 80014aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b0:	68bb      	ldr	r3, [r7, #8]
 80014b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014be:	4a04      	ldr	r2, [pc, #16]	; (80014d0 <__NVIC_SetPriorityGrouping+0x44>)
 80014c0:	68bb      	ldr	r3, [r7, #8]
 80014c2:	60d3      	str	r3, [r2, #12]
}
 80014c4:	bf00      	nop
 80014c6:	3714      	adds	r7, #20
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d8:	4b04      	ldr	r3, [pc, #16]	; (80014ec <__NVIC_GetPriorityGrouping+0x18>)
 80014da:	68db      	ldr	r3, [r3, #12]
 80014dc:	0a1b      	lsrs	r3, r3, #8
 80014de:	f003 0307 	and.w	r3, r3, #7
}
 80014e2:	4618      	mov	r0, r3
 80014e4:	46bd      	mov	sp, r7
 80014e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ea:	4770      	bx	lr
 80014ec:	e000ed00 	.word	0xe000ed00

080014f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014f0:	b480      	push	{r7}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	4603      	mov	r3, r0
 80014f8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	db0b      	blt.n	800151a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001502:	79fb      	ldrb	r3, [r7, #7]
 8001504:	f003 021f 	and.w	r2, r3, #31
 8001508:	4907      	ldr	r1, [pc, #28]	; (8001528 <__NVIC_EnableIRQ+0x38>)
 800150a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150e:	095b      	lsrs	r3, r3, #5
 8001510:	2001      	movs	r0, #1
 8001512:	fa00 f202 	lsl.w	r2, r0, r2
 8001516:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800151a:	bf00      	nop
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
 8001526:	bf00      	nop
 8001528:	e000e100 	.word	0xe000e100

0800152c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	4603      	mov	r3, r0
 8001534:	6039      	str	r1, [r7, #0]
 8001536:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001538:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800153c:	2b00      	cmp	r3, #0
 800153e:	db0a      	blt.n	8001556 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001540:	683b      	ldr	r3, [r7, #0]
 8001542:	b2da      	uxtb	r2, r3
 8001544:	490c      	ldr	r1, [pc, #48]	; (8001578 <__NVIC_SetPriority+0x4c>)
 8001546:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800154a:	0112      	lsls	r2, r2, #4
 800154c:	b2d2      	uxtb	r2, r2
 800154e:	440b      	add	r3, r1
 8001550:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001554:	e00a      	b.n	800156c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	b2da      	uxtb	r2, r3
 800155a:	4908      	ldr	r1, [pc, #32]	; (800157c <__NVIC_SetPriority+0x50>)
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	3b04      	subs	r3, #4
 8001564:	0112      	lsls	r2, r2, #4
 8001566:	b2d2      	uxtb	r2, r2
 8001568:	440b      	add	r3, r1
 800156a:	761a      	strb	r2, [r3, #24]
}
 800156c:	bf00      	nop
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	e000e100 	.word	0xe000e100
 800157c:	e000ed00 	.word	0xe000ed00

08001580 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001580:	b480      	push	{r7}
 8001582:	b089      	sub	sp, #36	; 0x24
 8001584:	af00      	add	r7, sp, #0
 8001586:	60f8      	str	r0, [r7, #12]
 8001588:	60b9      	str	r1, [r7, #8]
 800158a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001594:	69fb      	ldr	r3, [r7, #28]
 8001596:	f1c3 0307 	rsb	r3, r3, #7
 800159a:	2b04      	cmp	r3, #4
 800159c:	bf28      	it	cs
 800159e:	2304      	movcs	r3, #4
 80015a0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3304      	adds	r3, #4
 80015a6:	2b06      	cmp	r3, #6
 80015a8:	d902      	bls.n	80015b0 <NVIC_EncodePriority+0x30>
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	3b03      	subs	r3, #3
 80015ae:	e000      	b.n	80015b2 <NVIC_EncodePriority+0x32>
 80015b0:	2300      	movs	r3, #0
 80015b2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	f04f 32ff 	mov.w	r2, #4294967295
 80015b8:	69bb      	ldr	r3, [r7, #24]
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	68bb      	ldr	r3, [r7, #8]
 80015c2:	401a      	ands	r2, r3
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c8:	f04f 31ff 	mov.w	r1, #4294967295
 80015cc:	697b      	ldr	r3, [r7, #20]
 80015ce:	fa01 f303 	lsl.w	r3, r1, r3
 80015d2:	43d9      	mvns	r1, r3
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d8:	4313      	orrs	r3, r2
         );
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3724      	adds	r7, #36	; 0x24
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
	...

080015e8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	3b01      	subs	r3, #1
 80015f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015f8:	d301      	bcc.n	80015fe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015fa:	2301      	movs	r3, #1
 80015fc:	e00f      	b.n	800161e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015fe:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <SysTick_Config+0x40>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3b01      	subs	r3, #1
 8001604:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001606:	210f      	movs	r1, #15
 8001608:	f04f 30ff 	mov.w	r0, #4294967295
 800160c:	f7ff ff8e 	bl	800152c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001610:	4b05      	ldr	r3, [pc, #20]	; (8001628 <SysTick_Config+0x40>)
 8001612:	2200      	movs	r2, #0
 8001614:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001616:	4b04      	ldr	r3, [pc, #16]	; (8001628 <SysTick_Config+0x40>)
 8001618:	2207      	movs	r2, #7
 800161a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800161c:	2300      	movs	r3, #0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}
 8001626:	bf00      	nop
 8001628:	e000e010 	.word	0xe000e010

0800162c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	f7ff ff29 	bl	800148c <__NVIC_SetPriorityGrouping>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}

08001642 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001642:	b580      	push	{r7, lr}
 8001644:	b086      	sub	sp, #24
 8001646:	af00      	add	r7, sp, #0
 8001648:	4603      	mov	r3, r0
 800164a:	60b9      	str	r1, [r7, #8]
 800164c:	607a      	str	r2, [r7, #4]
 800164e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001650:	2300      	movs	r3, #0
 8001652:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001654:	f7ff ff3e 	bl	80014d4 <__NVIC_GetPriorityGrouping>
 8001658:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800165a:	687a      	ldr	r2, [r7, #4]
 800165c:	68b9      	ldr	r1, [r7, #8]
 800165e:	6978      	ldr	r0, [r7, #20]
 8001660:	f7ff ff8e 	bl	8001580 <NVIC_EncodePriority>
 8001664:	4602      	mov	r2, r0
 8001666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166a:	4611      	mov	r1, r2
 800166c:	4618      	mov	r0, r3
 800166e:	f7ff ff5d 	bl	800152c <__NVIC_SetPriority>
}
 8001672:	bf00      	nop
 8001674:	3718      	adds	r7, #24
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}

0800167a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800167a:	b580      	push	{r7, lr}
 800167c:	b082      	sub	sp, #8
 800167e:	af00      	add	r7, sp, #0
 8001680:	4603      	mov	r3, r0
 8001682:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001688:	4618      	mov	r0, r3
 800168a:	f7ff ff31 	bl	80014f0 <__NVIC_EnableIRQ>
}
 800168e:	bf00      	nop
 8001690:	3708      	adds	r7, #8
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b082      	sub	sp, #8
 800169a:	af00      	add	r7, sp, #0
 800169c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800169e:	6878      	ldr	r0, [r7, #4]
 80016a0:	f7ff ffa2 	bl	80015e8 <SysTick_Config>
 80016a4:	4603      	mov	r3, r0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}
	...

080016b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b089      	sub	sp, #36	; 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
 80016b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80016be:	2300      	movs	r3, #0
 80016c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	61fb      	str	r3, [r7, #28]
 80016ca:	e16b      	b.n	80019a4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80016cc:	2201      	movs	r2, #1
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	697a      	ldr	r2, [r7, #20]
 80016dc:	4013      	ands	r3, r2
 80016de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f040 815a 	bne.w	800199e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685b      	ldr	r3, [r3, #4]
 80016ee:	f003 0303 	and.w	r3, r3, #3
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d005      	beq.n	8001702 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	685b      	ldr	r3, [r3, #4]
 80016fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016fe:	2b02      	cmp	r3, #2
 8001700:	d130      	bne.n	8001764 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	2203      	movs	r2, #3
 800170e:	fa02 f303 	lsl.w	r3, r2, r3
 8001712:	43db      	mvns	r3, r3
 8001714:	69ba      	ldr	r2, [r7, #24]
 8001716:	4013      	ands	r3, r2
 8001718:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800171a:	683b      	ldr	r3, [r7, #0]
 800171c:	68da      	ldr	r2, [r3, #12]
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	fa02 f303 	lsl.w	r3, r2, r3
 8001726:	69ba      	ldr	r2, [r7, #24]
 8001728:	4313      	orrs	r3, r2
 800172a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	69ba      	ldr	r2, [r7, #24]
 8001730:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	685b      	ldr	r3, [r3, #4]
 8001736:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001738:	2201      	movs	r2, #1
 800173a:	69fb      	ldr	r3, [r7, #28]
 800173c:	fa02 f303 	lsl.w	r3, r2, r3
 8001740:	43db      	mvns	r3, r3
 8001742:	69ba      	ldr	r2, [r7, #24]
 8001744:	4013      	ands	r3, r2
 8001746:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	091b      	lsrs	r3, r3, #4
 800174e:	f003 0201 	and.w	r2, r3, #1
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	fa02 f303 	lsl.w	r3, r2, r3
 8001758:	69ba      	ldr	r2, [r7, #24]
 800175a:	4313      	orrs	r3, r2
 800175c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	685b      	ldr	r3, [r3, #4]
 8001768:	f003 0303 	and.w	r3, r3, #3
 800176c:	2b03      	cmp	r3, #3
 800176e:	d017      	beq.n	80017a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	68db      	ldr	r3, [r3, #12]
 8001774:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	69fb      	ldr	r3, [r7, #28]
 800178e:	005b      	lsls	r3, r3, #1
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	69ba      	ldr	r2, [r7, #24]
 8001796:	4313      	orrs	r3, r2
 8001798:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	69ba      	ldr	r2, [r7, #24]
 800179e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f003 0303 	and.w	r3, r3, #3
 80017a8:	2b02      	cmp	r3, #2
 80017aa:	d123      	bne.n	80017f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	08da      	lsrs	r2, r3, #3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	3208      	adds	r2, #8
 80017b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80017ba:	69fb      	ldr	r3, [r7, #28]
 80017bc:	f003 0307 	and.w	r3, r3, #7
 80017c0:	009b      	lsls	r3, r3, #2
 80017c2:	220f      	movs	r2, #15
 80017c4:	fa02 f303 	lsl.w	r3, r2, r3
 80017c8:	43db      	mvns	r3, r3
 80017ca:	69ba      	ldr	r2, [r7, #24]
 80017cc:	4013      	ands	r3, r2
 80017ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	691a      	ldr	r2, [r3, #16]
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	f003 0307 	and.w	r3, r3, #7
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	fa02 f303 	lsl.w	r3, r2, r3
 80017e0:	69ba      	ldr	r2, [r7, #24]
 80017e2:	4313      	orrs	r3, r2
 80017e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	08da      	lsrs	r2, r3, #3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	3208      	adds	r2, #8
 80017ee:	69b9      	ldr	r1, [r7, #24]
 80017f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	2203      	movs	r2, #3
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43db      	mvns	r3, r3
 8001806:	69ba      	ldr	r2, [r7, #24]
 8001808:	4013      	ands	r3, r2
 800180a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	f003 0203 	and.w	r2, r3, #3
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	005b      	lsls	r3, r3, #1
 8001818:	fa02 f303 	lsl.w	r3, r2, r3
 800181c:	69ba      	ldr	r2, [r7, #24]
 800181e:	4313      	orrs	r3, r2
 8001820:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	69ba      	ldr	r2, [r7, #24]
 8001826:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001830:	2b00      	cmp	r3, #0
 8001832:	f000 80b4 	beq.w	800199e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001836:	2300      	movs	r3, #0
 8001838:	60fb      	str	r3, [r7, #12]
 800183a:	4b60      	ldr	r3, [pc, #384]	; (80019bc <HAL_GPIO_Init+0x30c>)
 800183c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183e:	4a5f      	ldr	r2, [pc, #380]	; (80019bc <HAL_GPIO_Init+0x30c>)
 8001840:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001844:	6453      	str	r3, [r2, #68]	; 0x44
 8001846:	4b5d      	ldr	r3, [pc, #372]	; (80019bc <HAL_GPIO_Init+0x30c>)
 8001848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001852:	4a5b      	ldr	r2, [pc, #364]	; (80019c0 <HAL_GPIO_Init+0x310>)
 8001854:	69fb      	ldr	r3, [r7, #28]
 8001856:	089b      	lsrs	r3, r3, #2
 8001858:	3302      	adds	r3, #2
 800185a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800185e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001860:	69fb      	ldr	r3, [r7, #28]
 8001862:	f003 0303 	and.w	r3, r3, #3
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	220f      	movs	r2, #15
 800186a:	fa02 f303 	lsl.w	r3, r2, r3
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	4a52      	ldr	r2, [pc, #328]	; (80019c4 <HAL_GPIO_Init+0x314>)
 800187a:	4293      	cmp	r3, r2
 800187c:	d02b      	beq.n	80018d6 <HAL_GPIO_Init+0x226>
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	4a51      	ldr	r2, [pc, #324]	; (80019c8 <HAL_GPIO_Init+0x318>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d025      	beq.n	80018d2 <HAL_GPIO_Init+0x222>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	4a50      	ldr	r2, [pc, #320]	; (80019cc <HAL_GPIO_Init+0x31c>)
 800188a:	4293      	cmp	r3, r2
 800188c:	d01f      	beq.n	80018ce <HAL_GPIO_Init+0x21e>
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	4a4f      	ldr	r2, [pc, #316]	; (80019d0 <HAL_GPIO_Init+0x320>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d019      	beq.n	80018ca <HAL_GPIO_Init+0x21a>
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	4a4e      	ldr	r2, [pc, #312]	; (80019d4 <HAL_GPIO_Init+0x324>)
 800189a:	4293      	cmp	r3, r2
 800189c:	d013      	beq.n	80018c6 <HAL_GPIO_Init+0x216>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a4d      	ldr	r2, [pc, #308]	; (80019d8 <HAL_GPIO_Init+0x328>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d00d      	beq.n	80018c2 <HAL_GPIO_Init+0x212>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a4c      	ldr	r2, [pc, #304]	; (80019dc <HAL_GPIO_Init+0x32c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d007      	beq.n	80018be <HAL_GPIO_Init+0x20e>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a4b      	ldr	r2, [pc, #300]	; (80019e0 <HAL_GPIO_Init+0x330>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d101      	bne.n	80018ba <HAL_GPIO_Init+0x20a>
 80018b6:	2307      	movs	r3, #7
 80018b8:	e00e      	b.n	80018d8 <HAL_GPIO_Init+0x228>
 80018ba:	2308      	movs	r3, #8
 80018bc:	e00c      	b.n	80018d8 <HAL_GPIO_Init+0x228>
 80018be:	2306      	movs	r3, #6
 80018c0:	e00a      	b.n	80018d8 <HAL_GPIO_Init+0x228>
 80018c2:	2305      	movs	r3, #5
 80018c4:	e008      	b.n	80018d8 <HAL_GPIO_Init+0x228>
 80018c6:	2304      	movs	r3, #4
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_Init+0x228>
 80018ca:	2303      	movs	r3, #3
 80018cc:	e004      	b.n	80018d8 <HAL_GPIO_Init+0x228>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e002      	b.n	80018d8 <HAL_GPIO_Init+0x228>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_Init+0x228>
 80018d6:	2300      	movs	r3, #0
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	f002 0203 	and.w	r2, r2, #3
 80018de:	0092      	lsls	r2, r2, #2
 80018e0:	4093      	lsls	r3, r2
 80018e2:	69ba      	ldr	r2, [r7, #24]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80018e8:	4935      	ldr	r1, [pc, #212]	; (80019c0 <HAL_GPIO_Init+0x310>)
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	089b      	lsrs	r3, r3, #2
 80018ee:	3302      	adds	r3, #2
 80018f0:	69ba      	ldr	r2, [r7, #24]
 80018f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80018f6:	4b3b      	ldr	r3, [pc, #236]	; (80019e4 <HAL_GPIO_Init+0x334>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	43db      	mvns	r3, r3
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	4013      	ands	r3, r2
 8001904:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001906:	683b      	ldr	r3, [r7, #0]
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d003      	beq.n	800191a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001912:	69ba      	ldr	r2, [r7, #24]
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800191a:	4a32      	ldr	r2, [pc, #200]	; (80019e4 <HAL_GPIO_Init+0x334>)
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001920:	4b30      	ldr	r3, [pc, #192]	; (80019e4 <HAL_GPIO_Init+0x334>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	43db      	mvns	r3, r3
 800192a:	69ba      	ldr	r2, [r7, #24]
 800192c:	4013      	ands	r3, r2
 800192e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001938:	2b00      	cmp	r3, #0
 800193a:	d003      	beq.n	8001944 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800193c:	69ba      	ldr	r2, [r7, #24]
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001944:	4a27      	ldr	r2, [pc, #156]	; (80019e4 <HAL_GPIO_Init+0x334>)
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800194a:	4b26      	ldr	r3, [pc, #152]	; (80019e4 <HAL_GPIO_Init+0x334>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	43db      	mvns	r3, r3
 8001954:	69ba      	ldr	r2, [r7, #24]
 8001956:	4013      	ands	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	685b      	ldr	r3, [r3, #4]
 800195e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001962:	2b00      	cmp	r3, #0
 8001964:	d003      	beq.n	800196e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001966:	69ba      	ldr	r2, [r7, #24]
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	4313      	orrs	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800196e:	4a1d      	ldr	r2, [pc, #116]	; (80019e4 <HAL_GPIO_Init+0x334>)
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001974:	4b1b      	ldr	r3, [pc, #108]	; (80019e4 <HAL_GPIO_Init+0x334>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197a:	693b      	ldr	r3, [r7, #16]
 800197c:	43db      	mvns	r3, r3
 800197e:	69ba      	ldr	r2, [r7, #24]
 8001980:	4013      	ands	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800198c:	2b00      	cmp	r3, #0
 800198e:	d003      	beq.n	8001998 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001990:	69ba      	ldr	r2, [r7, #24]
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001998:	4a12      	ldr	r2, [pc, #72]	; (80019e4 <HAL_GPIO_Init+0x334>)
 800199a:	69bb      	ldr	r3, [r7, #24]
 800199c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3301      	adds	r3, #1
 80019a2:	61fb      	str	r3, [r7, #28]
 80019a4:	69fb      	ldr	r3, [r7, #28]
 80019a6:	2b0f      	cmp	r3, #15
 80019a8:	f67f ae90 	bls.w	80016cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	3724      	adds	r7, #36	; 0x24
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40023800 	.word	0x40023800
 80019c0:	40013800 	.word	0x40013800
 80019c4:	40020000 	.word	0x40020000
 80019c8:	40020400 	.word	0x40020400
 80019cc:	40020800 	.word	0x40020800
 80019d0:	40020c00 	.word	0x40020c00
 80019d4:	40021000 	.word	0x40021000
 80019d8:	40021400 	.word	0x40021400
 80019dc:	40021800 	.word	0x40021800
 80019e0:	40021c00 	.word	0x40021c00
 80019e4:	40013c00 	.word	0x40013c00

080019e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b083      	sub	sp, #12
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	460b      	mov	r3, r1
 80019f2:	807b      	strh	r3, [r7, #2]
 80019f4:	4613      	mov	r3, r2
 80019f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019f8:	787b      	ldrb	r3, [r7, #1]
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80019fe:	887a      	ldrh	r2, [r7, #2]
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a04:	e003      	b.n	8001a0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a06:	887b      	ldrh	r3, [r7, #2]
 8001a08:	041a      	lsls	r2, r3, #16
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	619a      	str	r2, [r3, #24]
}
 8001a0e:	bf00      	nop
 8001a10:	370c      	adds	r7, #12
 8001a12:	46bd      	mov	sp, r7
 8001a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a18:	4770      	bx	lr

08001a1a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001a1a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a1c:	b08f      	sub	sp, #60	; 0x3c
 8001a1e:	af0a      	add	r7, sp, #40	; 0x28
 8001a20:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d101      	bne.n	8001a2c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a28:	2301      	movs	r3, #1
 8001a2a:	e054      	b.n	8001ad6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d106      	bne.n	8001a4c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001a46:	6878      	ldr	r0, [r7, #4]
 8001a48:	f005 f874 	bl	8006b34 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2203      	movs	r2, #3
 8001a50:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d102      	bne.n	8001a66 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	2200      	movs	r2, #0
 8001a64:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f003 f867 	bl	8004b3e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	603b      	str	r3, [r7, #0]
 8001a76:	687e      	ldr	r6, [r7, #4]
 8001a78:	466d      	mov	r5, sp
 8001a7a:	f106 0410 	add.w	r4, r6, #16
 8001a7e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a80:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a82:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001a84:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001a86:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001a8a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001a8e:	1d33      	adds	r3, r6, #4
 8001a90:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a92:	6838      	ldr	r0, [r7, #0]
 8001a94:	f002 ffe1 	bl	8004a5a <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2101      	movs	r1, #1
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f003 f85e 	bl	8004b60 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	603b      	str	r3, [r7, #0]
 8001aaa:	687e      	ldr	r6, [r7, #4]
 8001aac:	466d      	mov	r5, sp
 8001aae:	f106 0410 	add.w	r4, r6, #16
 8001ab2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ab6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ab8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aba:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001abe:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ac2:	1d33      	adds	r3, r6, #4
 8001ac4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ac6:	6838      	ldr	r0, [r7, #0]
 8001ac8:	f003 f9e6 	bl	8004e98 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2201      	movs	r2, #1
 8001ad0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001ad4:	2300      	movs	r3, #0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3714      	adds	r7, #20
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ade <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ade:	b590      	push	{r4, r7, lr}
 8001ae0:	b089      	sub	sp, #36	; 0x24
 8001ae2:	af04      	add	r7, sp, #16
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	4608      	mov	r0, r1
 8001ae8:	4611      	mov	r1, r2
 8001aea:	461a      	mov	r2, r3
 8001aec:	4603      	mov	r3, r0
 8001aee:	70fb      	strb	r3, [r7, #3]
 8001af0:	460b      	mov	r3, r1
 8001af2:	70bb      	strb	r3, [r7, #2]
 8001af4:	4613      	mov	r3, r2
 8001af6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_HCD_HC_Init+0x28>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e076      	b.n	8001bf4 <HAL_HCD_HC_Init+0x116>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001b0e:	78fb      	ldrb	r3, [r7, #3]
 8001b10:	687a      	ldr	r2, [r7, #4]
 8001b12:	212c      	movs	r1, #44	; 0x2c
 8001b14:	fb01 f303 	mul.w	r3, r1, r3
 8001b18:	4413      	add	r3, r2
 8001b1a:	333d      	adds	r3, #61	; 0x3d
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001b20:	78fb      	ldrb	r3, [r7, #3]
 8001b22:	687a      	ldr	r2, [r7, #4]
 8001b24:	212c      	movs	r1, #44	; 0x2c
 8001b26:	fb01 f303 	mul.w	r3, r1, r3
 8001b2a:	4413      	add	r3, r2
 8001b2c:	3338      	adds	r3, #56	; 0x38
 8001b2e:	787a      	ldrb	r2, [r7, #1]
 8001b30:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001b32:	78fb      	ldrb	r3, [r7, #3]
 8001b34:	687a      	ldr	r2, [r7, #4]
 8001b36:	212c      	movs	r1, #44	; 0x2c
 8001b38:	fb01 f303 	mul.w	r3, r1, r3
 8001b3c:	4413      	add	r3, r2
 8001b3e:	3340      	adds	r3, #64	; 0x40
 8001b40:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001b42:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001b44:	78fb      	ldrb	r3, [r7, #3]
 8001b46:	687a      	ldr	r2, [r7, #4]
 8001b48:	212c      	movs	r1, #44	; 0x2c
 8001b4a:	fb01 f303 	mul.w	r3, r1, r3
 8001b4e:	4413      	add	r3, r2
 8001b50:	3339      	adds	r3, #57	; 0x39
 8001b52:	78fa      	ldrb	r2, [r7, #3]
 8001b54:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001b56:	78fb      	ldrb	r3, [r7, #3]
 8001b58:	687a      	ldr	r2, [r7, #4]
 8001b5a:	212c      	movs	r1, #44	; 0x2c
 8001b5c:	fb01 f303 	mul.w	r3, r1, r3
 8001b60:	4413      	add	r3, r2
 8001b62:	333f      	adds	r3, #63	; 0x3f
 8001b64:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001b68:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001b6a:	78fb      	ldrb	r3, [r7, #3]
 8001b6c:	78ba      	ldrb	r2, [r7, #2]
 8001b6e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001b72:	b2d0      	uxtb	r0, r2
 8001b74:	687a      	ldr	r2, [r7, #4]
 8001b76:	212c      	movs	r1, #44	; 0x2c
 8001b78:	fb01 f303 	mul.w	r3, r1, r3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	333a      	adds	r3, #58	; 0x3a
 8001b80:	4602      	mov	r2, r0
 8001b82:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001b84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	da09      	bge.n	8001ba0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001b8c:	78fb      	ldrb	r3, [r7, #3]
 8001b8e:	687a      	ldr	r2, [r7, #4]
 8001b90:	212c      	movs	r1, #44	; 0x2c
 8001b92:	fb01 f303 	mul.w	r3, r1, r3
 8001b96:	4413      	add	r3, r2
 8001b98:	333b      	adds	r3, #59	; 0x3b
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	701a      	strb	r2, [r3, #0]
 8001b9e:	e008      	b.n	8001bb2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001ba0:	78fb      	ldrb	r3, [r7, #3]
 8001ba2:	687a      	ldr	r2, [r7, #4]
 8001ba4:	212c      	movs	r1, #44	; 0x2c
 8001ba6:	fb01 f303 	mul.w	r3, r1, r3
 8001baa:	4413      	add	r3, r2
 8001bac:	333b      	adds	r3, #59	; 0x3b
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001bb2:	78fb      	ldrb	r3, [r7, #3]
 8001bb4:	687a      	ldr	r2, [r7, #4]
 8001bb6:	212c      	movs	r1, #44	; 0x2c
 8001bb8:	fb01 f303 	mul.w	r3, r1, r3
 8001bbc:	4413      	add	r3, r2
 8001bbe:	333c      	adds	r3, #60	; 0x3c
 8001bc0:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001bc4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6818      	ldr	r0, [r3, #0]
 8001bca:	787c      	ldrb	r4, [r7, #1]
 8001bcc:	78ba      	ldrb	r2, [r7, #2]
 8001bce:	78f9      	ldrb	r1, [r7, #3]
 8001bd0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001bd2:	9302      	str	r3, [sp, #8]
 8001bd4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001bd8:	9301      	str	r3, [sp, #4]
 8001bda:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bde:	9300      	str	r3, [sp, #0]
 8001be0:	4623      	mov	r3, r4
 8001be2:	f003 fab5 	bl	8005150 <USB_HC_Init>
 8001be6:	4603      	mov	r3, r0
 8001be8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	2200      	movs	r2, #0
 8001bee:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001bf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bd90      	pop	{r4, r7, pc}

08001bfc <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	460b      	mov	r3, r1
 8001c06:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d101      	bne.n	8001c1a <HAL_HCD_HC_Halt+0x1e>
 8001c16:	2302      	movs	r3, #2
 8001c18:	e00f      	b.n	8001c3a <HAL_HCD_HC_Halt+0x3e>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	78fa      	ldrb	r2, [r7, #3]
 8001c28:	4611      	mov	r1, r2
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fd05 	bl	800563a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	3710      	adds	r7, #16
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b082      	sub	sp, #8
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
 8001c4c:	4608      	mov	r0, r1
 8001c4e:	4611      	mov	r1, r2
 8001c50:	461a      	mov	r2, r3
 8001c52:	4603      	mov	r3, r0
 8001c54:	70fb      	strb	r3, [r7, #3]
 8001c56:	460b      	mov	r3, r1
 8001c58:	70bb      	strb	r3, [r7, #2]
 8001c5a:	4613      	mov	r3, r2
 8001c5c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001c5e:	78fb      	ldrb	r3, [r7, #3]
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	212c      	movs	r1, #44	; 0x2c
 8001c64:	fb01 f303 	mul.w	r3, r1, r3
 8001c68:	4413      	add	r3, r2
 8001c6a:	333b      	adds	r3, #59	; 0x3b
 8001c6c:	78ba      	ldrb	r2, [r7, #2]
 8001c6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001c70:	78fb      	ldrb	r3, [r7, #3]
 8001c72:	687a      	ldr	r2, [r7, #4]
 8001c74:	212c      	movs	r1, #44	; 0x2c
 8001c76:	fb01 f303 	mul.w	r3, r1, r3
 8001c7a:	4413      	add	r3, r2
 8001c7c:	333f      	adds	r3, #63	; 0x3f
 8001c7e:	787a      	ldrb	r2, [r7, #1]
 8001c80:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001c82:	7c3b      	ldrb	r3, [r7, #16]
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d112      	bne.n	8001cae <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001c88:	78fb      	ldrb	r3, [r7, #3]
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	212c      	movs	r1, #44	; 0x2c
 8001c8e:	fb01 f303 	mul.w	r3, r1, r3
 8001c92:	4413      	add	r3, r2
 8001c94:	3342      	adds	r3, #66	; 0x42
 8001c96:	2203      	movs	r2, #3
 8001c98:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001c9a:	78fb      	ldrb	r3, [r7, #3]
 8001c9c:	687a      	ldr	r2, [r7, #4]
 8001c9e:	212c      	movs	r1, #44	; 0x2c
 8001ca0:	fb01 f303 	mul.w	r3, r1, r3
 8001ca4:	4413      	add	r3, r2
 8001ca6:	333d      	adds	r3, #61	; 0x3d
 8001ca8:	7f3a      	ldrb	r2, [r7, #28]
 8001caa:	701a      	strb	r2, [r3, #0]
 8001cac:	e008      	b.n	8001cc0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001cae:	78fb      	ldrb	r3, [r7, #3]
 8001cb0:	687a      	ldr	r2, [r7, #4]
 8001cb2:	212c      	movs	r1, #44	; 0x2c
 8001cb4:	fb01 f303 	mul.w	r3, r1, r3
 8001cb8:	4413      	add	r3, r2
 8001cba:	3342      	adds	r3, #66	; 0x42
 8001cbc:	2202      	movs	r2, #2
 8001cbe:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001cc0:	787b      	ldrb	r3, [r7, #1]
 8001cc2:	2b03      	cmp	r3, #3
 8001cc4:	f200 80c6 	bhi.w	8001e54 <HAL_HCD_HC_SubmitRequest+0x210>
 8001cc8:	a201      	add	r2, pc, #4	; (adr r2, 8001cd0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cce:	bf00      	nop
 8001cd0:	08001ce1 	.word	0x08001ce1
 8001cd4:	08001e41 	.word	0x08001e41
 8001cd8:	08001d45 	.word	0x08001d45
 8001cdc:	08001dc3 	.word	0x08001dc3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ce0:	7c3b      	ldrb	r3, [r7, #16]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	f040 80b8 	bne.w	8001e58 <HAL_HCD_HC_SubmitRequest+0x214>
 8001ce8:	78bb      	ldrb	r3, [r7, #2]
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	f040 80b4 	bne.w	8001e58 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001cf0:	8b3b      	ldrh	r3, [r7, #24]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d108      	bne.n	8001d08 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001cf6:	78fb      	ldrb	r3, [r7, #3]
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	212c      	movs	r1, #44	; 0x2c
 8001cfc:	fb01 f303 	mul.w	r3, r1, r3
 8001d00:	4413      	add	r3, r2
 8001d02:	3355      	adds	r3, #85	; 0x55
 8001d04:	2201      	movs	r2, #1
 8001d06:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	212c      	movs	r1, #44	; 0x2c
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	4413      	add	r3, r2
 8001d14:	3355      	adds	r3, #85	; 0x55
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d109      	bne.n	8001d30 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d1c:	78fb      	ldrb	r3, [r7, #3]
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	212c      	movs	r1, #44	; 0x2c
 8001d22:	fb01 f303 	mul.w	r3, r1, r3
 8001d26:	4413      	add	r3, r2
 8001d28:	3342      	adds	r3, #66	; 0x42
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001d2e:	e093      	b.n	8001e58 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d30:	78fb      	ldrb	r3, [r7, #3]
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	212c      	movs	r1, #44	; 0x2c
 8001d36:	fb01 f303 	mul.w	r3, r1, r3
 8001d3a:	4413      	add	r3, r2
 8001d3c:	3342      	adds	r3, #66	; 0x42
 8001d3e:	2202      	movs	r2, #2
 8001d40:	701a      	strb	r2, [r3, #0]
      break;
 8001d42:	e089      	b.n	8001e58 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001d44:	78bb      	ldrb	r3, [r7, #2]
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d11d      	bne.n	8001d86 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001d4a:	78fb      	ldrb	r3, [r7, #3]
 8001d4c:	687a      	ldr	r2, [r7, #4]
 8001d4e:	212c      	movs	r1, #44	; 0x2c
 8001d50:	fb01 f303 	mul.w	r3, r1, r3
 8001d54:	4413      	add	r3, r2
 8001d56:	3355      	adds	r3, #85	; 0x55
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d109      	bne.n	8001d72 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d5e:	78fb      	ldrb	r3, [r7, #3]
 8001d60:	687a      	ldr	r2, [r7, #4]
 8001d62:	212c      	movs	r1, #44	; 0x2c
 8001d64:	fb01 f303 	mul.w	r3, r1, r3
 8001d68:	4413      	add	r3, r2
 8001d6a:	3342      	adds	r3, #66	; 0x42
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001d70:	e073      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001d72:	78fb      	ldrb	r3, [r7, #3]
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	212c      	movs	r1, #44	; 0x2c
 8001d78:	fb01 f303 	mul.w	r3, r1, r3
 8001d7c:	4413      	add	r3, r2
 8001d7e:	3342      	adds	r3, #66	; 0x42
 8001d80:	2202      	movs	r2, #2
 8001d82:	701a      	strb	r2, [r3, #0]
      break;
 8001d84:	e069      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001d86:	78fb      	ldrb	r3, [r7, #3]
 8001d88:	687a      	ldr	r2, [r7, #4]
 8001d8a:	212c      	movs	r1, #44	; 0x2c
 8001d8c:	fb01 f303 	mul.w	r3, r1, r3
 8001d90:	4413      	add	r3, r2
 8001d92:	3354      	adds	r3, #84	; 0x54
 8001d94:	781b      	ldrb	r3, [r3, #0]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d109      	bne.n	8001dae <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001d9a:	78fb      	ldrb	r3, [r7, #3]
 8001d9c:	687a      	ldr	r2, [r7, #4]
 8001d9e:	212c      	movs	r1, #44	; 0x2c
 8001da0:	fb01 f303 	mul.w	r3, r1, r3
 8001da4:	4413      	add	r3, r2
 8001da6:	3342      	adds	r3, #66	; 0x42
 8001da8:	2200      	movs	r2, #0
 8001daa:	701a      	strb	r2, [r3, #0]
      break;
 8001dac:	e055      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001dae:	78fb      	ldrb	r3, [r7, #3]
 8001db0:	687a      	ldr	r2, [r7, #4]
 8001db2:	212c      	movs	r1, #44	; 0x2c
 8001db4:	fb01 f303 	mul.w	r3, r1, r3
 8001db8:	4413      	add	r3, r2
 8001dba:	3342      	adds	r3, #66	; 0x42
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	701a      	strb	r2, [r3, #0]
      break;
 8001dc0:	e04b      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001dc2:	78bb      	ldrb	r3, [r7, #2]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d11d      	bne.n	8001e04 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001dc8:	78fb      	ldrb	r3, [r7, #3]
 8001dca:	687a      	ldr	r2, [r7, #4]
 8001dcc:	212c      	movs	r1, #44	; 0x2c
 8001dce:	fb01 f303 	mul.w	r3, r1, r3
 8001dd2:	4413      	add	r3, r2
 8001dd4:	3355      	adds	r3, #85	; 0x55
 8001dd6:	781b      	ldrb	r3, [r3, #0]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d109      	bne.n	8001df0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001ddc:	78fb      	ldrb	r3, [r7, #3]
 8001dde:	687a      	ldr	r2, [r7, #4]
 8001de0:	212c      	movs	r1, #44	; 0x2c
 8001de2:	fb01 f303 	mul.w	r3, r1, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	3342      	adds	r3, #66	; 0x42
 8001dea:	2200      	movs	r2, #0
 8001dec:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001dee:	e034      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001df0:	78fb      	ldrb	r3, [r7, #3]
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	212c      	movs	r1, #44	; 0x2c
 8001df6:	fb01 f303 	mul.w	r3, r1, r3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	3342      	adds	r3, #66	; 0x42
 8001dfe:	2202      	movs	r2, #2
 8001e00:	701a      	strb	r2, [r3, #0]
      break;
 8001e02:	e02a      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001e04:	78fb      	ldrb	r3, [r7, #3]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	212c      	movs	r1, #44	; 0x2c
 8001e0a:	fb01 f303 	mul.w	r3, r1, r3
 8001e0e:	4413      	add	r3, r2
 8001e10:	3354      	adds	r3, #84	; 0x54
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d109      	bne.n	8001e2c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e18:	78fb      	ldrb	r3, [r7, #3]
 8001e1a:	687a      	ldr	r2, [r7, #4]
 8001e1c:	212c      	movs	r1, #44	; 0x2c
 8001e1e:	fb01 f303 	mul.w	r3, r1, r3
 8001e22:	4413      	add	r3, r2
 8001e24:	3342      	adds	r3, #66	; 0x42
 8001e26:	2200      	movs	r2, #0
 8001e28:	701a      	strb	r2, [r3, #0]
      break;
 8001e2a:	e016      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	687a      	ldr	r2, [r7, #4]
 8001e30:	212c      	movs	r1, #44	; 0x2c
 8001e32:	fb01 f303 	mul.w	r3, r1, r3
 8001e36:	4413      	add	r3, r2
 8001e38:	3342      	adds	r3, #66	; 0x42
 8001e3a:	2202      	movs	r2, #2
 8001e3c:	701a      	strb	r2, [r3, #0]
      break;
 8001e3e:	e00c      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001e40:	78fb      	ldrb	r3, [r7, #3]
 8001e42:	687a      	ldr	r2, [r7, #4]
 8001e44:	212c      	movs	r1, #44	; 0x2c
 8001e46:	fb01 f303 	mul.w	r3, r1, r3
 8001e4a:	4413      	add	r3, r2
 8001e4c:	3342      	adds	r3, #66	; 0x42
 8001e4e:	2200      	movs	r2, #0
 8001e50:	701a      	strb	r2, [r3, #0]
      break;
 8001e52:	e002      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8001e54:	bf00      	nop
 8001e56:	e000      	b.n	8001e5a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8001e58:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8001e5a:	78fb      	ldrb	r3, [r7, #3]
 8001e5c:	687a      	ldr	r2, [r7, #4]
 8001e5e:	212c      	movs	r1, #44	; 0x2c
 8001e60:	fb01 f303 	mul.w	r3, r1, r3
 8001e64:	4413      	add	r3, r2
 8001e66:	3344      	adds	r3, #68	; 0x44
 8001e68:	697a      	ldr	r2, [r7, #20]
 8001e6a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8001e6c:	78fb      	ldrb	r3, [r7, #3]
 8001e6e:	8b3a      	ldrh	r2, [r7, #24]
 8001e70:	6879      	ldr	r1, [r7, #4]
 8001e72:	202c      	movs	r0, #44	; 0x2c
 8001e74:	fb00 f303 	mul.w	r3, r0, r3
 8001e78:	440b      	add	r3, r1
 8001e7a:	334c      	adds	r3, #76	; 0x4c
 8001e7c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8001e7e:	78fb      	ldrb	r3, [r7, #3]
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	212c      	movs	r1, #44	; 0x2c
 8001e84:	fb01 f303 	mul.w	r3, r1, r3
 8001e88:	4413      	add	r3, r2
 8001e8a:	3360      	adds	r3, #96	; 0x60
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8001e90:	78fb      	ldrb	r3, [r7, #3]
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	212c      	movs	r1, #44	; 0x2c
 8001e96:	fb01 f303 	mul.w	r3, r1, r3
 8001e9a:	4413      	add	r3, r2
 8001e9c:	3350      	adds	r3, #80	; 0x50
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	212c      	movs	r1, #44	; 0x2c
 8001ea8:	fb01 f303 	mul.w	r3, r1, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	3339      	adds	r3, #57	; 0x39
 8001eb0:	78fa      	ldrb	r2, [r7, #3]
 8001eb2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8001eb4:	78fb      	ldrb	r3, [r7, #3]
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	212c      	movs	r1, #44	; 0x2c
 8001eba:	fb01 f303 	mul.w	r3, r1, r3
 8001ebe:	4413      	add	r3, r2
 8001ec0:	3361      	adds	r3, #97	; 0x61
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6818      	ldr	r0, [r3, #0]
 8001eca:	78fb      	ldrb	r3, [r7, #3]
 8001ecc:	222c      	movs	r2, #44	; 0x2c
 8001ece:	fb02 f303 	mul.w	r3, r2, r3
 8001ed2:	3338      	adds	r3, #56	; 0x38
 8001ed4:	687a      	ldr	r2, [r7, #4]
 8001ed6:	18d1      	adds	r1, r2, r3
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	691b      	ldr	r3, [r3, #16]
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	461a      	mov	r2, r3
 8001ee0:	f003 fa58 	bl	8005394 <USB_HC_StartXfer>
 8001ee4:	4603      	mov	r3, r0
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3708      	adds	r7, #8
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
 8001eee:	bf00      	nop

08001ef0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f002 ff83 	bl	8004e12 <USB_GetMode>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b01      	cmp	r3, #1
 8001f10:	f040 80f6 	bne.w	8002100 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f002 ff67 	bl	8004dec <USB_ReadInterrupts>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	f000 80ec 	beq.w	80020fe <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	f002 ff5e 	bl	8004dec <USB_ReadInterrupts>
 8001f30:	4603      	mov	r3, r0
 8001f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001f3a:	d104      	bne.n	8001f46 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001f44:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f002 ff4e 	bl	8004dec <USB_ReadInterrupts>
 8001f50:	4603      	mov	r3, r0
 8001f52:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001f5a:	d104      	bne.n	8001f66 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001f64:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f002 ff3e 	bl	8004dec <USB_ReadInterrupts>
 8001f70:	4603      	mov	r3, r0
 8001f72:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001f7a:	d104      	bne.n	8001f86 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001f84:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f002 ff2e 	bl	8004dec <USB_ReadInterrupts>
 8001f90:	4603      	mov	r3, r0
 8001f92:	f003 0302 	and.w	r3, r3, #2
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d103      	bne.n	8001fa2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2202      	movs	r2, #2
 8001fa0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f002 ff20 	bl	8004dec <USB_ReadInterrupts>
 8001fac:	4603      	mov	r3, r0
 8001fae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001fb2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001fb6:	d11c      	bne.n	8001ff2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8001fc0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0301 	and.w	r3, r3, #1
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10f      	bne.n	8001ff2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8001fd2:	2110      	movs	r1, #16
 8001fd4:	6938      	ldr	r0, [r7, #16]
 8001fd6:	f002 fe0f 	bl	8004bf8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8001fda:	6938      	ldr	r0, [r7, #16]
 8001fdc:	f002 fe40 	bl	8004c60 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f003 f816 	bl	8005018 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8001fec:	6878      	ldr	r0, [r7, #4]
 8001fee:	f004 fe1f 	bl	8006c30 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f002 fef8 	bl	8004dec <USB_ReadInterrupts>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002002:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002006:	d102      	bne.n	800200e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f001 f882 	bl	8003112 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4618      	mov	r0, r3
 8002014:	f002 feea 	bl	8004dec <USB_ReadInterrupts>
 8002018:	4603      	mov	r3, r0
 800201a:	f003 0308 	and.w	r3, r3, #8
 800201e:	2b08      	cmp	r3, #8
 8002020:	d106      	bne.n	8002030 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002022:	6878      	ldr	r0, [r7, #4]
 8002024:	f004 fde8 	bl	8006bf8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	2208      	movs	r2, #8
 800202e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	4618      	mov	r0, r3
 8002036:	f002 fed9 	bl	8004dec <USB_ReadInterrupts>
 800203a:	4603      	mov	r3, r0
 800203c:	f003 0310 	and.w	r3, r3, #16
 8002040:	2b10      	cmp	r3, #16
 8002042:	d101      	bne.n	8002048 <HAL_HCD_IRQHandler+0x158>
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_HCD_IRQHandler+0x15a>
 8002048:	2300      	movs	r3, #0
 800204a:	2b00      	cmp	r3, #0
 800204c:	d012      	beq.n	8002074 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	699a      	ldr	r2, [r3, #24]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 0210 	bic.w	r2, r2, #16
 800205c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800205e:	6878      	ldr	r0, [r7, #4]
 8002060:	f000 ff85 	bl	8002f6e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	699a      	ldr	r2, [r3, #24]
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f042 0210 	orr.w	r2, r2, #16
 8002072:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4618      	mov	r0, r3
 800207a:	f002 feb7 	bl	8004dec <USB_ReadInterrupts>
 800207e:	4603      	mov	r3, r0
 8002080:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002084:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002088:	d13a      	bne.n	8002100 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f003 fac2 	bl	8005618 <USB_HC_ReadInterrupt>
 8002094:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e025      	b.n	80020e8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	f003 030f 	and.w	r3, r3, #15
 80020a2:	68ba      	ldr	r2, [r7, #8]
 80020a4:	fa22 f303 	lsr.w	r3, r2, r3
 80020a8:	f003 0301 	and.w	r3, r3, #1
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d018      	beq.n	80020e2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	015a      	lsls	r2, r3, #5
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80020c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80020c6:	d106      	bne.n	80020d6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80020c8:	697b      	ldr	r3, [r7, #20]
 80020ca:	b2db      	uxtb	r3, r3
 80020cc:	4619      	mov	r1, r3
 80020ce:	6878      	ldr	r0, [r7, #4]
 80020d0:	f000 f88f 	bl	80021f2 <HCD_HC_IN_IRQHandler>
 80020d4:	e005      	b.n	80020e2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	b2db      	uxtb	r3, r3
 80020da:	4619      	mov	r1, r3
 80020dc:	6878      	ldr	r0, [r7, #4]
 80020de:	f000 fbdd 	bl	800289c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	3301      	adds	r3, #1
 80020e6:	617b      	str	r3, [r7, #20]
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	697a      	ldr	r2, [r7, #20]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d3d4      	bcc.n	800209c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80020fa:	615a      	str	r2, [r3, #20]
 80020fc:	e000      	b.n	8002100 <HAL_HCD_IRQHandler+0x210>
      return;
 80020fe:	bf00      	nop
    }
  }
}
 8002100:	3718      	adds	r7, #24
 8002102:	46bd      	mov	sp, r7
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002114:	2b01      	cmp	r3, #1
 8002116:	d101      	bne.n	800211c <HAL_HCD_Start+0x16>
 8002118:	2302      	movs	r3, #2
 800211a:	e013      	b.n	8002144 <HAL_HCD_Start+0x3e>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2201      	movs	r2, #1
 8002120:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2101      	movs	r1, #1
 800212a:	4618      	mov	r0, r3
 800212c:	f002 ffae 	bl	800508c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	f002 fcf1 	bl	8004b1c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3708      	adds	r7, #8
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b082      	sub	sp, #8
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800215a:	2b01      	cmp	r3, #1
 800215c:	d101      	bne.n	8002162 <HAL_HCD_Stop+0x16>
 800215e:	2302      	movs	r3, #2
 8002160:	e00d      	b.n	800217e <HAL_HCD_Stop+0x32>
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	4618      	mov	r0, r3
 8002170:	f003 fb9c 	bl	80058ac <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	2200      	movs	r2, #0
 8002178:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800217c:	2300      	movs	r3, #0
}
 800217e:	4618      	mov	r0, r3
 8002180:	3708      	adds	r7, #8
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}

08002186 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002186:	b480      	push	{r7}
 8002188:	b083      	sub	sp, #12
 800218a:	af00      	add	r7, sp, #0
 800218c:	6078      	str	r0, [r7, #4]
 800218e:	460b      	mov	r3, r1
 8002190:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8002192:	78fb      	ldrb	r3, [r7, #3]
 8002194:	687a      	ldr	r2, [r7, #4]
 8002196:	212c      	movs	r1, #44	; 0x2c
 8002198:	fb01 f303 	mul.w	r3, r1, r3
 800219c:	4413      	add	r3, r2
 800219e:	3360      	adds	r3, #96	; 0x60
 80021a0:	781b      	ldrb	r3, [r3, #0]
}
 80021a2:	4618      	mov	r0, r3
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr

080021ae <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021ae:	b480      	push	{r7}
 80021b0:	b083      	sub	sp, #12
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	6078      	str	r0, [r7, #4]
 80021b6:	460b      	mov	r3, r1
 80021b8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80021ba:	78fb      	ldrb	r3, [r7, #3]
 80021bc:	687a      	ldr	r2, [r7, #4]
 80021be:	212c      	movs	r1, #44	; 0x2c
 80021c0:	fb01 f303 	mul.w	r3, r1, r3
 80021c4:	4413      	add	r3, r2
 80021c6:	3350      	adds	r3, #80	; 0x50
 80021c8:	681b      	ldr	r3, [r3, #0]
}
 80021ca:	4618      	mov	r0, r3
 80021cc:	370c      	adds	r7, #12
 80021ce:	46bd      	mov	sp, r7
 80021d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d4:	4770      	bx	lr

080021d6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80021d6:	b580      	push	{r7, lr}
 80021d8:	b082      	sub	sp, #8
 80021da:	af00      	add	r7, sp, #0
 80021dc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f002 ffa2 	bl	800512c <USB_GetCurrentFrame>
 80021e8:	4603      	mov	r3, r0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	3708      	adds	r7, #8
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bd80      	pop	{r7, pc}

080021f2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80021f2:	b580      	push	{r7, lr}
 80021f4:	b086      	sub	sp, #24
 80021f6:	af00      	add	r7, sp, #0
 80021f8:	6078      	str	r0, [r7, #4]
 80021fa:	460b      	mov	r3, r1
 80021fc:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002208:	78fb      	ldrb	r3, [r7, #3]
 800220a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	015a      	lsls	r2, r3, #5
 8002210:	693b      	ldr	r3, [r7, #16]
 8002212:	4413      	add	r3, r2
 8002214:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002218:	689b      	ldr	r3, [r3, #8]
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	2b04      	cmp	r3, #4
 8002220:	d11a      	bne.n	8002258 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	015a      	lsls	r2, r3, #5
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	4413      	add	r3, r2
 800222a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800222e:	461a      	mov	r2, r3
 8002230:	2304      	movs	r3, #4
 8002232:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002234:	687a      	ldr	r2, [r7, #4]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	3361      	adds	r3, #97	; 0x61
 8002242:	2206      	movs	r2, #6
 8002244:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68fa      	ldr	r2, [r7, #12]
 800224c:	b2d2      	uxtb	r2, r2
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f003 f9f2 	bl	800563a <USB_HC_Halt>
 8002256:	e0af      	b.n	80023b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	015a      	lsls	r2, r3, #5
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	4413      	add	r3, r2
 8002260:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002264:	689b      	ldr	r3, [r3, #8]
 8002266:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800226a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800226e:	d11b      	bne.n	80022a8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	015a      	lsls	r2, r3, #5
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	4413      	add	r3, r2
 8002278:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800227c:	461a      	mov	r2, r3
 800227e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002282:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002284:	687a      	ldr	r2, [r7, #4]
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	3361      	adds	r3, #97	; 0x61
 8002292:	2207      	movs	r2, #7
 8002294:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	68fa      	ldr	r2, [r7, #12]
 800229c:	b2d2      	uxtb	r2, r2
 800229e:	4611      	mov	r1, r2
 80022a0:	4618      	mov	r0, r3
 80022a2:	f003 f9ca 	bl	800563a <USB_HC_Halt>
 80022a6:	e087      	b.n	80023b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	015a      	lsls	r2, r3, #5
 80022ac:	693b      	ldr	r3, [r7, #16]
 80022ae:	4413      	add	r3, r2
 80022b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	f003 0320 	and.w	r3, r3, #32
 80022ba:	2b20      	cmp	r3, #32
 80022bc:	d109      	bne.n	80022d2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015a      	lsls	r2, r3, #5
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	4413      	add	r3, r2
 80022c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022ca:	461a      	mov	r2, r3
 80022cc:	2320      	movs	r3, #32
 80022ce:	6093      	str	r3, [r2, #8]
 80022d0:	e072      	b.n	80023b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	015a      	lsls	r2, r3, #5
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	4413      	add	r3, r2
 80022da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	2b08      	cmp	r3, #8
 80022e6:	d11a      	bne.n	800231e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	015a      	lsls	r2, r3, #5
 80022ec:	693b      	ldr	r3, [r7, #16]
 80022ee:	4413      	add	r3, r2
 80022f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022f4:	461a      	mov	r2, r3
 80022f6:	2308      	movs	r3, #8
 80022f8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	212c      	movs	r1, #44	; 0x2c
 8002300:	fb01 f303 	mul.w	r3, r1, r3
 8002304:	4413      	add	r3, r2
 8002306:	3361      	adds	r3, #97	; 0x61
 8002308:	2205      	movs	r2, #5
 800230a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	68fa      	ldr	r2, [r7, #12]
 8002312:	b2d2      	uxtb	r2, r2
 8002314:	4611      	mov	r1, r2
 8002316:	4618      	mov	r0, r3
 8002318:	f003 f98f 	bl	800563a <USB_HC_Halt>
 800231c:	e04c      	b.n	80023b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	015a      	lsls	r2, r3, #5
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	4413      	add	r3, r2
 8002326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002330:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002334:	d11b      	bne.n	800236e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	015a      	lsls	r2, r3, #5
 800233a:	693b      	ldr	r3, [r7, #16]
 800233c:	4413      	add	r3, r2
 800233e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002342:	461a      	mov	r2, r3
 8002344:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002348:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800234a:	687a      	ldr	r2, [r7, #4]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	212c      	movs	r1, #44	; 0x2c
 8002350:	fb01 f303 	mul.w	r3, r1, r3
 8002354:	4413      	add	r3, r2
 8002356:	3361      	adds	r3, #97	; 0x61
 8002358:	2208      	movs	r2, #8
 800235a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	68fa      	ldr	r2, [r7, #12]
 8002362:	b2d2      	uxtb	r2, r2
 8002364:	4611      	mov	r1, r2
 8002366:	4618      	mov	r0, r3
 8002368:	f003 f967 	bl	800563a <USB_HC_Halt>
 800236c:	e024      	b.n	80023b8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	015a      	lsls	r2, r3, #5
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4413      	add	r3, r2
 8002376:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002380:	2b80      	cmp	r3, #128	; 0x80
 8002382:	d119      	bne.n	80023b8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	015a      	lsls	r2, r3, #5
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4413      	add	r3, r2
 800238c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002390:	461a      	mov	r2, r3
 8002392:	2380      	movs	r3, #128	; 0x80
 8002394:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002396:	687a      	ldr	r2, [r7, #4]
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	212c      	movs	r1, #44	; 0x2c
 800239c:	fb01 f303 	mul.w	r3, r1, r3
 80023a0:	4413      	add	r3, r2
 80023a2:	3361      	adds	r3, #97	; 0x61
 80023a4:	2206      	movs	r2, #6
 80023a6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	68fa      	ldr	r2, [r7, #12]
 80023ae:	b2d2      	uxtb	r2, r2
 80023b0:	4611      	mov	r1, r2
 80023b2:	4618      	mov	r0, r3
 80023b4:	f003 f941 	bl	800563a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	015a      	lsls	r2, r3, #5
 80023bc:	693b      	ldr	r3, [r7, #16]
 80023be:	4413      	add	r3, r2
 80023c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023c4:	689b      	ldr	r3, [r3, #8]
 80023c6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023ce:	d112      	bne.n	80023f6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68fa      	ldr	r2, [r7, #12]
 80023d6:	b2d2      	uxtb	r2, r2
 80023d8:	4611      	mov	r1, r2
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 f92d 	bl	800563a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	015a      	lsls	r2, r3, #5
 80023e4:	693b      	ldr	r3, [r7, #16]
 80023e6:	4413      	add	r3, r2
 80023e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80023ec:	461a      	mov	r2, r3
 80023ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80023f2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80023f4:	e24e      	b.n	8002894 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	015a      	lsls	r2, r3, #5
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4413      	add	r3, r2
 80023fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	f003 0301 	and.w	r3, r3, #1
 8002408:	2b01      	cmp	r3, #1
 800240a:	f040 80df 	bne.w	80025cc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	2b00      	cmp	r3, #0
 8002414:	d019      	beq.n	800244a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002416:	687a      	ldr	r2, [r7, #4]
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	212c      	movs	r1, #44	; 0x2c
 800241c:	fb01 f303 	mul.w	r3, r1, r3
 8002420:	4413      	add	r3, r2
 8002422:	3348      	adds	r3, #72	; 0x48
 8002424:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	0159      	lsls	r1, r3, #5
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	440b      	add	r3, r1
 800242e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002432:	691b      	ldr	r3, [r3, #16]
 8002434:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002438:	1ad2      	subs	r2, r2, r3
 800243a:	6879      	ldr	r1, [r7, #4]
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	202c      	movs	r0, #44	; 0x2c
 8002440:	fb00 f303 	mul.w	r3, r0, r3
 8002444:	440b      	add	r3, r1
 8002446:	3350      	adds	r3, #80	; 0x50
 8002448:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800244a:	687a      	ldr	r2, [r7, #4]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	212c      	movs	r1, #44	; 0x2c
 8002450:	fb01 f303 	mul.w	r3, r1, r3
 8002454:	4413      	add	r3, r2
 8002456:	3361      	adds	r3, #97	; 0x61
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800245c:	687a      	ldr	r2, [r7, #4]
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	212c      	movs	r1, #44	; 0x2c
 8002462:	fb01 f303 	mul.w	r3, r1, r3
 8002466:	4413      	add	r3, r2
 8002468:	335c      	adds	r3, #92	; 0x5c
 800246a:	2200      	movs	r2, #0
 800246c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	015a      	lsls	r2, r3, #5
 8002472:	693b      	ldr	r3, [r7, #16]
 8002474:	4413      	add	r3, r2
 8002476:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800247a:	461a      	mov	r2, r3
 800247c:	2301      	movs	r3, #1
 800247e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	212c      	movs	r1, #44	; 0x2c
 8002486:	fb01 f303 	mul.w	r3, r1, r3
 800248a:	4413      	add	r3, r2
 800248c:	333f      	adds	r3, #63	; 0x3f
 800248e:	781b      	ldrb	r3, [r3, #0]
 8002490:	2b00      	cmp	r3, #0
 8002492:	d009      	beq.n	80024a8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002494:	687a      	ldr	r2, [r7, #4]
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	212c      	movs	r1, #44	; 0x2c
 800249a:	fb01 f303 	mul.w	r3, r1, r3
 800249e:	4413      	add	r3, r2
 80024a0:	333f      	adds	r3, #63	; 0x3f
 80024a2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80024a4:	2b02      	cmp	r3, #2
 80024a6:	d111      	bne.n	80024cc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	68fa      	ldr	r2, [r7, #12]
 80024ae:	b2d2      	uxtb	r2, r2
 80024b0:	4611      	mov	r1, r2
 80024b2:	4618      	mov	r0, r3
 80024b4:	f003 f8c1 	bl	800563a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	015a      	lsls	r2, r3, #5
 80024bc:	693b      	ldr	r3, [r7, #16]
 80024be:	4413      	add	r3, r2
 80024c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024c4:	461a      	mov	r2, r3
 80024c6:	2310      	movs	r3, #16
 80024c8:	6093      	str	r3, [r2, #8]
 80024ca:	e03a      	b.n	8002542 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	212c      	movs	r1, #44	; 0x2c
 80024d2:	fb01 f303 	mul.w	r3, r1, r3
 80024d6:	4413      	add	r3, r2
 80024d8:	333f      	adds	r3, #63	; 0x3f
 80024da:	781b      	ldrb	r3, [r3, #0]
 80024dc:	2b03      	cmp	r3, #3
 80024de:	d009      	beq.n	80024f4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	212c      	movs	r1, #44	; 0x2c
 80024e6:	fb01 f303 	mul.w	r3, r1, r3
 80024ea:	4413      	add	r3, r2
 80024ec:	333f      	adds	r3, #63	; 0x3f
 80024ee:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d126      	bne.n	8002542 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	015a      	lsls	r2, r3, #5
 80024f8:	693b      	ldr	r3, [r7, #16]
 80024fa:	4413      	add	r3, r2
 80024fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	68fa      	ldr	r2, [r7, #12]
 8002504:	0151      	lsls	r1, r2, #5
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	440a      	add	r2, r1
 800250a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800250e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002512:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002514:	687a      	ldr	r2, [r7, #4]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	212c      	movs	r1, #44	; 0x2c
 800251a:	fb01 f303 	mul.w	r3, r1, r3
 800251e:	4413      	add	r3, r2
 8002520:	3360      	adds	r3, #96	; 0x60
 8002522:	2201      	movs	r2, #1
 8002524:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	b2d9      	uxtb	r1, r3
 800252a:	687a      	ldr	r2, [r7, #4]
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	202c      	movs	r0, #44	; 0x2c
 8002530:	fb00 f303 	mul.w	r3, r0, r3
 8002534:	4413      	add	r3, r2
 8002536:	3360      	adds	r3, #96	; 0x60
 8002538:	781b      	ldrb	r3, [r3, #0]
 800253a:	461a      	mov	r2, r3
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f004 fb85 	bl	8006c4c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	691b      	ldr	r3, [r3, #16]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d12b      	bne.n	80025a2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800254a:	687a      	ldr	r2, [r7, #4]
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	212c      	movs	r1, #44	; 0x2c
 8002550:	fb01 f303 	mul.w	r3, r1, r3
 8002554:	4413      	add	r3, r2
 8002556:	3348      	adds	r3, #72	; 0x48
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	6879      	ldr	r1, [r7, #4]
 800255c:	68fa      	ldr	r2, [r7, #12]
 800255e:	202c      	movs	r0, #44	; 0x2c
 8002560:	fb00 f202 	mul.w	r2, r0, r2
 8002564:	440a      	add	r2, r1
 8002566:	3240      	adds	r2, #64	; 0x40
 8002568:	8812      	ldrh	r2, [r2, #0]
 800256a:	fbb3 f3f2 	udiv	r3, r3, r2
 800256e:	f003 0301 	and.w	r3, r3, #1
 8002572:	2b00      	cmp	r3, #0
 8002574:	f000 818e 	beq.w	8002894 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	212c      	movs	r1, #44	; 0x2c
 800257e:	fb01 f303 	mul.w	r3, r1, r3
 8002582:	4413      	add	r3, r2
 8002584:	3354      	adds	r3, #84	; 0x54
 8002586:	781b      	ldrb	r3, [r3, #0]
 8002588:	f083 0301 	eor.w	r3, r3, #1
 800258c:	b2d8      	uxtb	r0, r3
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	212c      	movs	r1, #44	; 0x2c
 8002594:	fb01 f303 	mul.w	r3, r1, r3
 8002598:	4413      	add	r3, r2
 800259a:	3354      	adds	r3, #84	; 0x54
 800259c:	4602      	mov	r2, r0
 800259e:	701a      	strb	r2, [r3, #0]
}
 80025a0:	e178      	b.n	8002894 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	3354      	adds	r3, #84	; 0x54
 80025b0:	781b      	ldrb	r3, [r3, #0]
 80025b2:	f083 0301 	eor.w	r3, r3, #1
 80025b6:	b2d8      	uxtb	r0, r3
 80025b8:	687a      	ldr	r2, [r7, #4]
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	212c      	movs	r1, #44	; 0x2c
 80025be:	fb01 f303 	mul.w	r3, r1, r3
 80025c2:	4413      	add	r3, r2
 80025c4:	3354      	adds	r3, #84	; 0x54
 80025c6:	4602      	mov	r2, r0
 80025c8:	701a      	strb	r2, [r3, #0]
}
 80025ca:	e163      	b.n	8002894 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	f003 0302 	and.w	r3, r3, #2
 80025de:	2b02      	cmp	r3, #2
 80025e0:	f040 80f6 	bne.w	80027d0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80025e4:	687a      	ldr	r2, [r7, #4]
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	212c      	movs	r1, #44	; 0x2c
 80025ea:	fb01 f303 	mul.w	r3, r1, r3
 80025ee:	4413      	add	r3, r2
 80025f0:	3361      	adds	r3, #97	; 0x61
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d109      	bne.n	800260c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80025f8:	687a      	ldr	r2, [r7, #4]
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	212c      	movs	r1, #44	; 0x2c
 80025fe:	fb01 f303 	mul.w	r3, r1, r3
 8002602:	4413      	add	r3, r2
 8002604:	3360      	adds	r3, #96	; 0x60
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	e0c9      	b.n	80027a0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	3361      	adds	r3, #97	; 0x61
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b05      	cmp	r3, #5
 800261e:	d109      	bne.n	8002634 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002620:	687a      	ldr	r2, [r7, #4]
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	212c      	movs	r1, #44	; 0x2c
 8002626:	fb01 f303 	mul.w	r3, r1, r3
 800262a:	4413      	add	r3, r2
 800262c:	3360      	adds	r3, #96	; 0x60
 800262e:	2205      	movs	r2, #5
 8002630:	701a      	strb	r2, [r3, #0]
 8002632:	e0b5      	b.n	80027a0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	212c      	movs	r1, #44	; 0x2c
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	4413      	add	r3, r2
 8002640:	3361      	adds	r3, #97	; 0x61
 8002642:	781b      	ldrb	r3, [r3, #0]
 8002644:	2b06      	cmp	r3, #6
 8002646:	d009      	beq.n	800265c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002648:	687a      	ldr	r2, [r7, #4]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	212c      	movs	r1, #44	; 0x2c
 800264e:	fb01 f303 	mul.w	r3, r1, r3
 8002652:	4413      	add	r3, r2
 8002654:	3361      	adds	r3, #97	; 0x61
 8002656:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002658:	2b08      	cmp	r3, #8
 800265a:	d150      	bne.n	80026fe <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 800265c:	687a      	ldr	r2, [r7, #4]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	212c      	movs	r1, #44	; 0x2c
 8002662:	fb01 f303 	mul.w	r3, r1, r3
 8002666:	4413      	add	r3, r2
 8002668:	335c      	adds	r3, #92	; 0x5c
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	1c5a      	adds	r2, r3, #1
 800266e:	6879      	ldr	r1, [r7, #4]
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	202c      	movs	r0, #44	; 0x2c
 8002674:	fb00 f303 	mul.w	r3, r0, r3
 8002678:	440b      	add	r3, r1
 800267a:	335c      	adds	r3, #92	; 0x5c
 800267c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800267e:	687a      	ldr	r2, [r7, #4]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	212c      	movs	r1, #44	; 0x2c
 8002684:	fb01 f303 	mul.w	r3, r1, r3
 8002688:	4413      	add	r3, r2
 800268a:	335c      	adds	r3, #92	; 0x5c
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2b02      	cmp	r3, #2
 8002690:	d912      	bls.n	80026b8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002692:	687a      	ldr	r2, [r7, #4]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	212c      	movs	r1, #44	; 0x2c
 8002698:	fb01 f303 	mul.w	r3, r1, r3
 800269c:	4413      	add	r3, r2
 800269e:	335c      	adds	r3, #92	; 0x5c
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80026a4:	687a      	ldr	r2, [r7, #4]
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	212c      	movs	r1, #44	; 0x2c
 80026aa:	fb01 f303 	mul.w	r3, r1, r3
 80026ae:	4413      	add	r3, r2
 80026b0:	3360      	adds	r3, #96	; 0x60
 80026b2:	2204      	movs	r2, #4
 80026b4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026b6:	e073      	b.n	80027a0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80026b8:	687a      	ldr	r2, [r7, #4]
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	212c      	movs	r1, #44	; 0x2c
 80026be:	fb01 f303 	mul.w	r3, r1, r3
 80026c2:	4413      	add	r3, r2
 80026c4:	3360      	adds	r3, #96	; 0x60
 80026c6:	2202      	movs	r2, #2
 80026c8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	015a      	lsls	r2, r3, #5
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4413      	add	r3, r2
 80026d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80026da:	68bb      	ldr	r3, [r7, #8]
 80026dc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80026e0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80026e2:	68bb      	ldr	r3, [r7, #8]
 80026e4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80026e8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	461a      	mov	r2, r3
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80026fc:	e050      	b.n	80027a0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	212c      	movs	r1, #44	; 0x2c
 8002704:	fb01 f303 	mul.w	r3, r1, r3
 8002708:	4413      	add	r3, r2
 800270a:	3361      	adds	r3, #97	; 0x61
 800270c:	781b      	ldrb	r3, [r3, #0]
 800270e:	2b03      	cmp	r3, #3
 8002710:	d122      	bne.n	8002758 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	212c      	movs	r1, #44	; 0x2c
 8002718:	fb01 f303 	mul.w	r3, r1, r3
 800271c:	4413      	add	r3, r2
 800271e:	3360      	adds	r3, #96	; 0x60
 8002720:	2202      	movs	r2, #2
 8002722:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	015a      	lsls	r2, r3, #5
 8002728:	693b      	ldr	r3, [r7, #16]
 800272a:	4413      	add	r3, r2
 800272c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002734:	68bb      	ldr	r3, [r7, #8]
 8002736:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800273a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800273c:	68bb      	ldr	r3, [r7, #8]
 800273e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002742:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	015a      	lsls	r2, r3, #5
 8002748:	693b      	ldr	r3, [r7, #16]
 800274a:	4413      	add	r3, r2
 800274c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002750:	461a      	mov	r2, r3
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	6013      	str	r3, [r2, #0]
 8002756:	e023      	b.n	80027a0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002758:	687a      	ldr	r2, [r7, #4]
 800275a:	68fb      	ldr	r3, [r7, #12]
 800275c:	212c      	movs	r1, #44	; 0x2c
 800275e:	fb01 f303 	mul.w	r3, r1, r3
 8002762:	4413      	add	r3, r2
 8002764:	3361      	adds	r3, #97	; 0x61
 8002766:	781b      	ldrb	r3, [r3, #0]
 8002768:	2b07      	cmp	r3, #7
 800276a:	d119      	bne.n	80027a0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 800276c:	687a      	ldr	r2, [r7, #4]
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	212c      	movs	r1, #44	; 0x2c
 8002772:	fb01 f303 	mul.w	r3, r1, r3
 8002776:	4413      	add	r3, r2
 8002778:	335c      	adds	r3, #92	; 0x5c
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	1c5a      	adds	r2, r3, #1
 800277e:	6879      	ldr	r1, [r7, #4]
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	202c      	movs	r0, #44	; 0x2c
 8002784:	fb00 f303 	mul.w	r3, r0, r3
 8002788:	440b      	add	r3, r1
 800278a:	335c      	adds	r3, #92	; 0x5c
 800278c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800278e:	687a      	ldr	r2, [r7, #4]
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	212c      	movs	r1, #44	; 0x2c
 8002794:	fb01 f303 	mul.w	r3, r1, r3
 8002798:	4413      	add	r3, r2
 800279a:	3360      	adds	r3, #96	; 0x60
 800279c:	2204      	movs	r2, #4
 800279e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	015a      	lsls	r2, r3, #5
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	4413      	add	r3, r2
 80027a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027ac:	461a      	mov	r2, r3
 80027ae:	2302      	movs	r3, #2
 80027b0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	b2d9      	uxtb	r1, r3
 80027b6:	687a      	ldr	r2, [r7, #4]
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	202c      	movs	r0, #44	; 0x2c
 80027bc:	fb00 f303 	mul.w	r3, r0, r3
 80027c0:	4413      	add	r3, r2
 80027c2:	3360      	adds	r3, #96	; 0x60
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	461a      	mov	r2, r3
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f004 fa3f 	bl	8006c4c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 80027ce:	e061      	b.n	8002894 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	015a      	lsls	r2, r3, #5
 80027d4:	693b      	ldr	r3, [r7, #16]
 80027d6:	4413      	add	r3, r2
 80027d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027dc:	689b      	ldr	r3, [r3, #8]
 80027de:	f003 0310 	and.w	r3, r3, #16
 80027e2:	2b10      	cmp	r3, #16
 80027e4:	d156      	bne.n	8002894 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 80027e6:	687a      	ldr	r2, [r7, #4]
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	212c      	movs	r1, #44	; 0x2c
 80027ec:	fb01 f303 	mul.w	r3, r1, r3
 80027f0:	4413      	add	r3, r2
 80027f2:	333f      	adds	r3, #63	; 0x3f
 80027f4:	781b      	ldrb	r3, [r3, #0]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d111      	bne.n	800281e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	212c      	movs	r1, #44	; 0x2c
 8002800:	fb01 f303 	mul.w	r3, r1, r3
 8002804:	4413      	add	r3, r2
 8002806:	335c      	adds	r3, #92	; 0x5c
 8002808:	2200      	movs	r2, #0
 800280a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68fa      	ldr	r2, [r7, #12]
 8002812:	b2d2      	uxtb	r2, r2
 8002814:	4611      	mov	r1, r2
 8002816:	4618      	mov	r0, r3
 8002818:	f002 ff0f 	bl	800563a <USB_HC_Halt>
 800281c:	e031      	b.n	8002882 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800281e:	687a      	ldr	r2, [r7, #4]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	212c      	movs	r1, #44	; 0x2c
 8002824:	fb01 f303 	mul.w	r3, r1, r3
 8002828:	4413      	add	r3, r2
 800282a:	333f      	adds	r3, #63	; 0x3f
 800282c:	781b      	ldrb	r3, [r3, #0]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d009      	beq.n	8002846 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002832:	687a      	ldr	r2, [r7, #4]
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	212c      	movs	r1, #44	; 0x2c
 8002838:	fb01 f303 	mul.w	r3, r1, r3
 800283c:	4413      	add	r3, r2
 800283e:	333f      	adds	r3, #63	; 0x3f
 8002840:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002842:	2b02      	cmp	r3, #2
 8002844:	d11d      	bne.n	8002882 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002846:	687a      	ldr	r2, [r7, #4]
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	212c      	movs	r1, #44	; 0x2c
 800284c:	fb01 f303 	mul.w	r3, r1, r3
 8002850:	4413      	add	r3, r2
 8002852:	335c      	adds	r3, #92	; 0x5c
 8002854:	2200      	movs	r2, #0
 8002856:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	691b      	ldr	r3, [r3, #16]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d110      	bne.n	8002882 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	212c      	movs	r1, #44	; 0x2c
 8002866:	fb01 f303 	mul.w	r3, r1, r3
 800286a:	4413      	add	r3, r2
 800286c:	3361      	adds	r3, #97	; 0x61
 800286e:	2203      	movs	r2, #3
 8002870:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	68fa      	ldr	r2, [r7, #12]
 8002878:	b2d2      	uxtb	r2, r2
 800287a:	4611      	mov	r1, r2
 800287c:	4618      	mov	r0, r3
 800287e:	f002 fedc 	bl	800563a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	015a      	lsls	r2, r3, #5
 8002886:	693b      	ldr	r3, [r7, #16]
 8002888:	4413      	add	r3, r2
 800288a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800288e:	461a      	mov	r2, r3
 8002890:	2310      	movs	r3, #16
 8002892:	6093      	str	r3, [r2, #8]
}
 8002894:	bf00      	nop
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}

0800289c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b088      	sub	sp, #32
 80028a0:	af00      	add	r7, sp, #0
 80028a2:	6078      	str	r0, [r7, #4]
 80028a4:	460b      	mov	r3, r1
 80028a6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ae:	69fb      	ldr	r3, [r7, #28]
 80028b0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 80028b2:	78fb      	ldrb	r3, [r7, #3]
 80028b4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	015a      	lsls	r2, r3, #5
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	4413      	add	r3, r2
 80028be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	f003 0304 	and.w	r3, r3, #4
 80028c8:	2b04      	cmp	r3, #4
 80028ca:	d11a      	bne.n	8002902 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	015a      	lsls	r2, r3, #5
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	4413      	add	r3, r2
 80028d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028d8:	461a      	mov	r2, r3
 80028da:	2304      	movs	r3, #4
 80028dc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	212c      	movs	r1, #44	; 0x2c
 80028e4:	fb01 f303 	mul.w	r3, r1, r3
 80028e8:	4413      	add	r3, r2
 80028ea:	3361      	adds	r3, #97	; 0x61
 80028ec:	2206      	movs	r2, #6
 80028ee:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	697a      	ldr	r2, [r7, #20]
 80028f6:	b2d2      	uxtb	r2, r2
 80028f8:	4611      	mov	r1, r2
 80028fa:	4618      	mov	r0, r3
 80028fc:	f002 fe9d 	bl	800563a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002900:	e331      	b.n	8002f66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002902:	697b      	ldr	r3, [r7, #20]
 8002904:	015a      	lsls	r2, r3, #5
 8002906:	69bb      	ldr	r3, [r7, #24]
 8002908:	4413      	add	r3, r2
 800290a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 0320 	and.w	r3, r3, #32
 8002914:	2b20      	cmp	r3, #32
 8002916:	d12e      	bne.n	8002976 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002918:	697b      	ldr	r3, [r7, #20]
 800291a:	015a      	lsls	r2, r3, #5
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	4413      	add	r3, r2
 8002920:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002924:	461a      	mov	r2, r3
 8002926:	2320      	movs	r3, #32
 8002928:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800292a:	687a      	ldr	r2, [r7, #4]
 800292c:	697b      	ldr	r3, [r7, #20]
 800292e:	212c      	movs	r1, #44	; 0x2c
 8002930:	fb01 f303 	mul.w	r3, r1, r3
 8002934:	4413      	add	r3, r2
 8002936:	333d      	adds	r3, #61	; 0x3d
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b01      	cmp	r3, #1
 800293c:	f040 8313 	bne.w	8002f66 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	333d      	adds	r3, #61	; 0x3d
 800294e:	2200      	movs	r2, #0
 8002950:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002952:	687a      	ldr	r2, [r7, #4]
 8002954:	697b      	ldr	r3, [r7, #20]
 8002956:	212c      	movs	r1, #44	; 0x2c
 8002958:	fb01 f303 	mul.w	r3, r1, r3
 800295c:	4413      	add	r3, r2
 800295e:	3360      	adds	r3, #96	; 0x60
 8002960:	2202      	movs	r2, #2
 8002962:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	697a      	ldr	r2, [r7, #20]
 800296a:	b2d2      	uxtb	r2, r2
 800296c:	4611      	mov	r1, r2
 800296e:	4618      	mov	r0, r3
 8002970:	f002 fe63 	bl	800563a <USB_HC_Halt>
}
 8002974:	e2f7      	b.n	8002f66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002976:	697b      	ldr	r3, [r7, #20]
 8002978:	015a      	lsls	r2, r3, #5
 800297a:	69bb      	ldr	r3, [r7, #24]
 800297c:	4413      	add	r3, r2
 800297e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800298c:	d112      	bne.n	80029b4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800298e:	697b      	ldr	r3, [r7, #20]
 8002990:	015a      	lsls	r2, r3, #5
 8002992:	69bb      	ldr	r3, [r7, #24]
 8002994:	4413      	add	r3, r2
 8002996:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800299a:	461a      	mov	r2, r3
 800299c:	f44f 7300 	mov.w	r3, #512	; 0x200
 80029a0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	697a      	ldr	r2, [r7, #20]
 80029a8:	b2d2      	uxtb	r2, r2
 80029aa:	4611      	mov	r1, r2
 80029ac:	4618      	mov	r0, r3
 80029ae:	f002 fe44 	bl	800563a <USB_HC_Halt>
}
 80029b2:	e2d8      	b.n	8002f66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80029b4:	697b      	ldr	r3, [r7, #20]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029c0:	689b      	ldr	r3, [r3, #8]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b01      	cmp	r3, #1
 80029c8:	d140      	bne.n	8002a4c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80029ca:	687a      	ldr	r2, [r7, #4]
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	212c      	movs	r1, #44	; 0x2c
 80029d0:	fb01 f303 	mul.w	r3, r1, r3
 80029d4:	4413      	add	r3, r2
 80029d6:	335c      	adds	r3, #92	; 0x5c
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	015a      	lsls	r2, r3, #5
 80029e0:	69bb      	ldr	r3, [r7, #24]
 80029e2:	4413      	add	r3, r2
 80029e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80029ee:	2b40      	cmp	r3, #64	; 0x40
 80029f0:	d111      	bne.n	8002a16 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80029f2:	687a      	ldr	r2, [r7, #4]
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	212c      	movs	r1, #44	; 0x2c
 80029f8:	fb01 f303 	mul.w	r3, r1, r3
 80029fc:	4413      	add	r3, r2
 80029fe:	333d      	adds	r3, #61	; 0x3d
 8002a00:	2201      	movs	r2, #1
 8002a02:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002a04:	697b      	ldr	r3, [r7, #20]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a10:	461a      	mov	r2, r3
 8002a12:	2340      	movs	r3, #64	; 0x40
 8002a14:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	015a      	lsls	r2, r3, #5
 8002a1a:	69bb      	ldr	r3, [r7, #24]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a22:	461a      	mov	r2, r3
 8002a24:	2301      	movs	r3, #1
 8002a26:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002a28:	687a      	ldr	r2, [r7, #4]
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	212c      	movs	r1, #44	; 0x2c
 8002a2e:	fb01 f303 	mul.w	r3, r1, r3
 8002a32:	4413      	add	r3, r2
 8002a34:	3361      	adds	r3, #97	; 0x61
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	b2d2      	uxtb	r2, r2
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 fdf8 	bl	800563a <USB_HC_Halt>
}
 8002a4a:	e28c      	b.n	8002f66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	015a      	lsls	r2, r3, #5
 8002a50:	69bb      	ldr	r3, [r7, #24]
 8002a52:	4413      	add	r3, r2
 8002a54:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a5e:	2b40      	cmp	r3, #64	; 0x40
 8002a60:	d12c      	bne.n	8002abc <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002a62:	687a      	ldr	r2, [r7, #4]
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	212c      	movs	r1, #44	; 0x2c
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	3361      	adds	r3, #97	; 0x61
 8002a70:	2204      	movs	r2, #4
 8002a72:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	333d      	adds	r3, #61	; 0x3d
 8002a82:	2201      	movs	r2, #1
 8002a84:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	335c      	adds	r3, #92	; 0x5c
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f002 fdc9 	bl	800563a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	015a      	lsls	r2, r3, #5
 8002aac:	69bb      	ldr	r3, [r7, #24]
 8002aae:	4413      	add	r3, r2
 8002ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab4:	461a      	mov	r2, r3
 8002ab6:	2340      	movs	r3, #64	; 0x40
 8002ab8:	6093      	str	r3, [r2, #8]
}
 8002aba:	e254      	b.n	8002f66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002abc:	697b      	ldr	r3, [r7, #20]
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	69bb      	ldr	r3, [r7, #24]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	f003 0308 	and.w	r3, r3, #8
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d11a      	bne.n	8002b08 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	015a      	lsls	r2, r3, #5
 8002ad6:	69bb      	ldr	r3, [r7, #24]
 8002ad8:	4413      	add	r3, r2
 8002ada:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ade:	461a      	mov	r2, r3
 8002ae0:	2308      	movs	r3, #8
 8002ae2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	697b      	ldr	r3, [r7, #20]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	3361      	adds	r3, #97	; 0x61
 8002af2:	2205      	movs	r2, #5
 8002af4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	4611      	mov	r1, r2
 8002b00:	4618      	mov	r0, r3
 8002b02:	f002 fd9a 	bl	800563a <USB_HC_Halt>
}
 8002b06:	e22e      	b.n	8002f66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	015a      	lsls	r2, r3, #5
 8002b0c:	69bb      	ldr	r3, [r7, #24]
 8002b0e:	4413      	add	r3, r2
 8002b10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 0310 	and.w	r3, r3, #16
 8002b1a:	2b10      	cmp	r3, #16
 8002b1c:	d140      	bne.n	8002ba0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	212c      	movs	r1, #44	; 0x2c
 8002b24:	fb01 f303 	mul.w	r3, r1, r3
 8002b28:	4413      	add	r3, r2
 8002b2a:	335c      	adds	r3, #92	; 0x5c
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002b30:	687a      	ldr	r2, [r7, #4]
 8002b32:	697b      	ldr	r3, [r7, #20]
 8002b34:	212c      	movs	r1, #44	; 0x2c
 8002b36:	fb01 f303 	mul.w	r3, r1, r3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	3361      	adds	r3, #97	; 0x61
 8002b3e:	2203      	movs	r2, #3
 8002b40:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	212c      	movs	r1, #44	; 0x2c
 8002b48:	fb01 f303 	mul.w	r3, r1, r3
 8002b4c:	4413      	add	r3, r2
 8002b4e:	333d      	adds	r3, #61	; 0x3d
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d112      	bne.n	8002b7c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002b56:	687a      	ldr	r2, [r7, #4]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	212c      	movs	r1, #44	; 0x2c
 8002b5c:	fb01 f303 	mul.w	r3, r1, r3
 8002b60:	4413      	add	r3, r2
 8002b62:	333c      	adds	r3, #60	; 0x3c
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d108      	bne.n	8002b7c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	212c      	movs	r1, #44	; 0x2c
 8002b70:	fb01 f303 	mul.w	r3, r1, r3
 8002b74:	4413      	add	r3, r2
 8002b76:	333d      	adds	r3, #61	; 0x3d
 8002b78:	2201      	movs	r2, #1
 8002b7a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	697a      	ldr	r2, [r7, #20]
 8002b82:	b2d2      	uxtb	r2, r2
 8002b84:	4611      	mov	r1, r2
 8002b86:	4618      	mov	r0, r3
 8002b88:	f002 fd57 	bl	800563a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	015a      	lsls	r2, r3, #5
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	4413      	add	r3, r2
 8002b94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b98:	461a      	mov	r2, r3
 8002b9a:	2310      	movs	r3, #16
 8002b9c:	6093      	str	r3, [r2, #8]
}
 8002b9e:	e1e2      	b.n	8002f66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002ba0:	697b      	ldr	r3, [r7, #20]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bb2:	2b80      	cmp	r3, #128	; 0x80
 8002bb4:	d164      	bne.n	8002c80 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	691b      	ldr	r3, [r3, #16]
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d111      	bne.n	8002be2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002bbe:	687a      	ldr	r2, [r7, #4]
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	212c      	movs	r1, #44	; 0x2c
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	3361      	adds	r3, #97	; 0x61
 8002bcc:	2206      	movs	r2, #6
 8002bce:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	697a      	ldr	r2, [r7, #20]
 8002bd6:	b2d2      	uxtb	r2, r2
 8002bd8:	4611      	mov	r1, r2
 8002bda:	4618      	mov	r0, r3
 8002bdc:	f002 fd2d 	bl	800563a <USB_HC_Halt>
 8002be0:	e044      	b.n	8002c6c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	212c      	movs	r1, #44	; 0x2c
 8002be8:	fb01 f303 	mul.w	r3, r1, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	335c      	adds	r3, #92	; 0x5c
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	1c5a      	adds	r2, r3, #1
 8002bf4:	6879      	ldr	r1, [r7, #4]
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	202c      	movs	r0, #44	; 0x2c
 8002bfa:	fb00 f303 	mul.w	r3, r0, r3
 8002bfe:	440b      	add	r3, r1
 8002c00:	335c      	adds	r3, #92	; 0x5c
 8002c02:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002c04:	687a      	ldr	r2, [r7, #4]
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	212c      	movs	r1, #44	; 0x2c
 8002c0a:	fb01 f303 	mul.w	r3, r1, r3
 8002c0e:	4413      	add	r3, r2
 8002c10:	335c      	adds	r3, #92	; 0x5c
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d920      	bls.n	8002c5a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	212c      	movs	r1, #44	; 0x2c
 8002c1e:	fb01 f303 	mul.w	r3, r1, r3
 8002c22:	4413      	add	r3, r2
 8002c24:	335c      	adds	r3, #92	; 0x5c
 8002c26:	2200      	movs	r2, #0
 8002c28:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002c2a:	687a      	ldr	r2, [r7, #4]
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	212c      	movs	r1, #44	; 0x2c
 8002c30:	fb01 f303 	mul.w	r3, r1, r3
 8002c34:	4413      	add	r3, r2
 8002c36:	3360      	adds	r3, #96	; 0x60
 8002c38:	2204      	movs	r2, #4
 8002c3a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	b2d9      	uxtb	r1, r3
 8002c40:	687a      	ldr	r2, [r7, #4]
 8002c42:	697b      	ldr	r3, [r7, #20]
 8002c44:	202c      	movs	r0, #44	; 0x2c
 8002c46:	fb00 f303 	mul.w	r3, r0, r3
 8002c4a:	4413      	add	r3, r2
 8002c4c:	3360      	adds	r3, #96	; 0x60
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	461a      	mov	r2, r3
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f003 fffa 	bl	8006c4c <HAL_HCD_HC_NotifyURBChange_Callback>
 8002c58:	e008      	b.n	8002c6c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	212c      	movs	r1, #44	; 0x2c
 8002c60:	fb01 f303 	mul.w	r3, r1, r3
 8002c64:	4413      	add	r3, r2
 8002c66:	3360      	adds	r3, #96	; 0x60
 8002c68:	2202      	movs	r2, #2
 8002c6a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	015a      	lsls	r2, r3, #5
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	4413      	add	r3, r2
 8002c74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c78:	461a      	mov	r2, r3
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	6093      	str	r3, [r2, #8]
}
 8002c7e:	e172      	b.n	8002f66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	015a      	lsls	r2, r3, #5
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	4413      	add	r3, r2
 8002c88:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c8c:	689b      	ldr	r3, [r3, #8]
 8002c8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c96:	d11b      	bne.n	8002cd0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002c98:	687a      	ldr	r2, [r7, #4]
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	212c      	movs	r1, #44	; 0x2c
 8002c9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ca2:	4413      	add	r3, r2
 8002ca4:	3361      	adds	r3, #97	; 0x61
 8002ca6:	2208      	movs	r2, #8
 8002ca8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	4611      	mov	r1, r2
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f002 fcc0 	bl	800563a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	015a      	lsls	r2, r3, #5
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cc6:	461a      	mov	r2, r3
 8002cc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002ccc:	6093      	str	r3, [r2, #8]
}
 8002cce:	e14a      	b.n	8002f66 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	f040 813f 	bne.w	8002f66 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	212c      	movs	r1, #44	; 0x2c
 8002cee:	fb01 f303 	mul.w	r3, r1, r3
 8002cf2:	4413      	add	r3, r2
 8002cf4:	3361      	adds	r3, #97	; 0x61
 8002cf6:	781b      	ldrb	r3, [r3, #0]
 8002cf8:	2b01      	cmp	r3, #1
 8002cfa:	d17d      	bne.n	8002df8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	697b      	ldr	r3, [r7, #20]
 8002d00:	212c      	movs	r1, #44	; 0x2c
 8002d02:	fb01 f303 	mul.w	r3, r1, r3
 8002d06:	4413      	add	r3, r2
 8002d08:	3360      	adds	r3, #96	; 0x60
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d0e:	687a      	ldr	r2, [r7, #4]
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	212c      	movs	r1, #44	; 0x2c
 8002d14:	fb01 f303 	mul.w	r3, r1, r3
 8002d18:	4413      	add	r3, r2
 8002d1a:	333f      	adds	r3, #63	; 0x3f
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	2b02      	cmp	r3, #2
 8002d20:	d00a      	beq.n	8002d38 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	212c      	movs	r1, #44	; 0x2c
 8002d28:	fb01 f303 	mul.w	r3, r1, r3
 8002d2c:	4413      	add	r3, r2
 8002d2e:	333f      	adds	r3, #63	; 0x3f
 8002d30:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002d32:	2b03      	cmp	r3, #3
 8002d34:	f040 8100 	bne.w	8002f38 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	691b      	ldr	r3, [r3, #16]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d113      	bne.n	8002d68 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	697b      	ldr	r3, [r7, #20]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3355      	adds	r3, #85	; 0x55
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	f083 0301 	eor.w	r3, r3, #1
 8002d54:	b2d8      	uxtb	r0, r3
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	3355      	adds	r3, #85	; 0x55
 8002d64:	4602      	mov	r2, r0
 8002d66:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	691b      	ldr	r3, [r3, #16]
 8002d6c:	2b01      	cmp	r3, #1
 8002d6e:	f040 80e3 	bne.w	8002f38 <HCD_HC_OUT_IRQHandler+0x69c>
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	212c      	movs	r1, #44	; 0x2c
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	334c      	adds	r3, #76	; 0x4c
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	f000 80d8 	beq.w	8002f38 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	697b      	ldr	r3, [r7, #20]
 8002d8c:	212c      	movs	r1, #44	; 0x2c
 8002d8e:	fb01 f303 	mul.w	r3, r1, r3
 8002d92:	4413      	add	r3, r2
 8002d94:	334c      	adds	r3, #76	; 0x4c
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6879      	ldr	r1, [r7, #4]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	202c      	movs	r0, #44	; 0x2c
 8002d9e:	fb00 f202 	mul.w	r2, r0, r2
 8002da2:	440a      	add	r2, r1
 8002da4:	3240      	adds	r2, #64	; 0x40
 8002da6:	8812      	ldrh	r2, [r2, #0]
 8002da8:	4413      	add	r3, r2
 8002daa:	3b01      	subs	r3, #1
 8002dac:	6879      	ldr	r1, [r7, #4]
 8002dae:	697a      	ldr	r2, [r7, #20]
 8002db0:	202c      	movs	r0, #44	; 0x2c
 8002db2:	fb00 f202 	mul.w	r2, r0, r2
 8002db6:	440a      	add	r2, r1
 8002db8:	3240      	adds	r2, #64	; 0x40
 8002dba:	8812      	ldrh	r2, [r2, #0]
 8002dbc:	fbb3 f3f2 	udiv	r3, r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	f003 0301 	and.w	r3, r3, #1
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	f000 80b5 	beq.w	8002f38 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	697b      	ldr	r3, [r7, #20]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3355      	adds	r3, #85	; 0x55
 8002ddc:	781b      	ldrb	r3, [r3, #0]
 8002dde:	f083 0301 	eor.w	r3, r3, #1
 8002de2:	b2d8      	uxtb	r0, r3
 8002de4:	687a      	ldr	r2, [r7, #4]
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	212c      	movs	r1, #44	; 0x2c
 8002dea:	fb01 f303 	mul.w	r3, r1, r3
 8002dee:	4413      	add	r3, r2
 8002df0:	3355      	adds	r3, #85	; 0x55
 8002df2:	4602      	mov	r2, r0
 8002df4:	701a      	strb	r2, [r3, #0]
 8002df6:	e09f      	b.n	8002f38 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002df8:	687a      	ldr	r2, [r7, #4]
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	212c      	movs	r1, #44	; 0x2c
 8002dfe:	fb01 f303 	mul.w	r3, r1, r3
 8002e02:	4413      	add	r3, r2
 8002e04:	3361      	adds	r3, #97	; 0x61
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	2b03      	cmp	r3, #3
 8002e0a:	d109      	bne.n	8002e20 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002e0c:	687a      	ldr	r2, [r7, #4]
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	212c      	movs	r1, #44	; 0x2c
 8002e12:	fb01 f303 	mul.w	r3, r1, r3
 8002e16:	4413      	add	r3, r2
 8002e18:	3360      	adds	r3, #96	; 0x60
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	701a      	strb	r2, [r3, #0]
 8002e1e:	e08b      	b.n	8002f38 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002e20:	687a      	ldr	r2, [r7, #4]
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	212c      	movs	r1, #44	; 0x2c
 8002e26:	fb01 f303 	mul.w	r3, r1, r3
 8002e2a:	4413      	add	r3, r2
 8002e2c:	3361      	adds	r3, #97	; 0x61
 8002e2e:	781b      	ldrb	r3, [r3, #0]
 8002e30:	2b04      	cmp	r3, #4
 8002e32:	d109      	bne.n	8002e48 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	212c      	movs	r1, #44	; 0x2c
 8002e3a:	fb01 f303 	mul.w	r3, r1, r3
 8002e3e:	4413      	add	r3, r2
 8002e40:	3360      	adds	r3, #96	; 0x60
 8002e42:	2202      	movs	r2, #2
 8002e44:	701a      	strb	r2, [r3, #0]
 8002e46:	e077      	b.n	8002f38 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	212c      	movs	r1, #44	; 0x2c
 8002e4e:	fb01 f303 	mul.w	r3, r1, r3
 8002e52:	4413      	add	r3, r2
 8002e54:	3361      	adds	r3, #97	; 0x61
 8002e56:	781b      	ldrb	r3, [r3, #0]
 8002e58:	2b05      	cmp	r3, #5
 8002e5a:	d109      	bne.n	8002e70 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002e5c:	687a      	ldr	r2, [r7, #4]
 8002e5e:	697b      	ldr	r3, [r7, #20]
 8002e60:	212c      	movs	r1, #44	; 0x2c
 8002e62:	fb01 f303 	mul.w	r3, r1, r3
 8002e66:	4413      	add	r3, r2
 8002e68:	3360      	adds	r3, #96	; 0x60
 8002e6a:	2205      	movs	r2, #5
 8002e6c:	701a      	strb	r2, [r3, #0]
 8002e6e:	e063      	b.n	8002f38 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	697b      	ldr	r3, [r7, #20]
 8002e74:	212c      	movs	r1, #44	; 0x2c
 8002e76:	fb01 f303 	mul.w	r3, r1, r3
 8002e7a:	4413      	add	r3, r2
 8002e7c:	3361      	adds	r3, #97	; 0x61
 8002e7e:	781b      	ldrb	r3, [r3, #0]
 8002e80:	2b06      	cmp	r3, #6
 8002e82:	d009      	beq.n	8002e98 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002e84:	687a      	ldr	r2, [r7, #4]
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	212c      	movs	r1, #44	; 0x2c
 8002e8a:	fb01 f303 	mul.w	r3, r1, r3
 8002e8e:	4413      	add	r3, r2
 8002e90:	3361      	adds	r3, #97	; 0x61
 8002e92:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002e94:	2b08      	cmp	r3, #8
 8002e96:	d14f      	bne.n	8002f38 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	697b      	ldr	r3, [r7, #20]
 8002e9c:	212c      	movs	r1, #44	; 0x2c
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	335c      	adds	r3, #92	; 0x5c
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	1c5a      	adds	r2, r3, #1
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	202c      	movs	r0, #44	; 0x2c
 8002eb0:	fb00 f303 	mul.w	r3, r0, r3
 8002eb4:	440b      	add	r3, r1
 8002eb6:	335c      	adds	r3, #92	; 0x5c
 8002eb8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002eba:	687a      	ldr	r2, [r7, #4]
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	212c      	movs	r1, #44	; 0x2c
 8002ec0:	fb01 f303 	mul.w	r3, r1, r3
 8002ec4:	4413      	add	r3, r2
 8002ec6:	335c      	adds	r3, #92	; 0x5c
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2b02      	cmp	r3, #2
 8002ecc:	d912      	bls.n	8002ef4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002ece:	687a      	ldr	r2, [r7, #4]
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	212c      	movs	r1, #44	; 0x2c
 8002ed4:	fb01 f303 	mul.w	r3, r1, r3
 8002ed8:	4413      	add	r3, r2
 8002eda:	335c      	adds	r3, #92	; 0x5c
 8002edc:	2200      	movs	r2, #0
 8002ede:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ee0:	687a      	ldr	r2, [r7, #4]
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	212c      	movs	r1, #44	; 0x2c
 8002ee6:	fb01 f303 	mul.w	r3, r1, r3
 8002eea:	4413      	add	r3, r2
 8002eec:	3360      	adds	r3, #96	; 0x60
 8002eee:	2204      	movs	r2, #4
 8002ef0:	701a      	strb	r2, [r3, #0]
 8002ef2:	e021      	b.n	8002f38 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ef4:	687a      	ldr	r2, [r7, #4]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	212c      	movs	r1, #44	; 0x2c
 8002efa:	fb01 f303 	mul.w	r3, r1, r3
 8002efe:	4413      	add	r3, r2
 8002f00:	3360      	adds	r3, #96	; 0x60
 8002f02:	2202      	movs	r2, #2
 8002f04:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	015a      	lsls	r2, r3, #5
 8002f0a:	69bb      	ldr	r3, [r7, #24]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002f1c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002f24:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	015a      	lsls	r2, r3, #5
 8002f2a:	69bb      	ldr	r3, [r7, #24]
 8002f2c:	4413      	add	r3, r2
 8002f2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f32:	461a      	mov	r2, r3
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	015a      	lsls	r2, r3, #5
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	4413      	add	r3, r2
 8002f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f44:	461a      	mov	r2, r3
 8002f46:	2302      	movs	r3, #2
 8002f48:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002f4a:	697b      	ldr	r3, [r7, #20]
 8002f4c:	b2d9      	uxtb	r1, r3
 8002f4e:	687a      	ldr	r2, [r7, #4]
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	202c      	movs	r0, #44	; 0x2c
 8002f54:	fb00 f303 	mul.w	r3, r0, r3
 8002f58:	4413      	add	r3, r2
 8002f5a:	3360      	adds	r3, #96	; 0x60
 8002f5c:	781b      	ldrb	r3, [r3, #0]
 8002f5e:	461a      	mov	r2, r3
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f003 fe73 	bl	8006c4c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002f66:	bf00      	nop
 8002f68:	3720      	adds	r7, #32
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}

08002f6e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002f6e:	b580      	push	{r7, lr}
 8002f70:	b08a      	sub	sp, #40	; 0x28
 8002f72:	af00      	add	r7, sp, #0
 8002f74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002f7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f7e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8002f88:	69fb      	ldr	r3, [r7, #28]
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	0c5b      	lsrs	r3, r3, #17
 8002f94:	f003 030f 	and.w	r3, r3, #15
 8002f98:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	091b      	lsrs	r3, r3, #4
 8002f9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002fa2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2b02      	cmp	r3, #2
 8002fa8:	d004      	beq.n	8002fb4 <HCD_RXQLVL_IRQHandler+0x46>
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	2b05      	cmp	r3, #5
 8002fae:	f000 80a9 	beq.w	8003104 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8002fb2:	e0aa      	b.n	800310a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	f000 80a6 	beq.w	8003108 <HCD_RXQLVL_IRQHandler+0x19a>
 8002fbc:	687a      	ldr	r2, [r7, #4]
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	212c      	movs	r1, #44	; 0x2c
 8002fc2:	fb01 f303 	mul.w	r3, r1, r3
 8002fc6:	4413      	add	r3, r2
 8002fc8:	3344      	adds	r3, #68	; 0x44
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	f000 809b 	beq.w	8003108 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	69bb      	ldr	r3, [r7, #24]
 8002fd6:	212c      	movs	r1, #44	; 0x2c
 8002fd8:	fb01 f303 	mul.w	r3, r1, r3
 8002fdc:	4413      	add	r3, r2
 8002fde:	3350      	adds	r3, #80	; 0x50
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	441a      	add	r2, r3
 8002fe6:	6879      	ldr	r1, [r7, #4]
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	202c      	movs	r0, #44	; 0x2c
 8002fec:	fb00 f303 	mul.w	r3, r0, r3
 8002ff0:	440b      	add	r3, r1
 8002ff2:	334c      	adds	r3, #76	; 0x4c
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d87a      	bhi.n	80030f0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6818      	ldr	r0, [r3, #0]
 8002ffe:	687a      	ldr	r2, [r7, #4]
 8003000:	69bb      	ldr	r3, [r7, #24]
 8003002:	212c      	movs	r1, #44	; 0x2c
 8003004:	fb01 f303 	mul.w	r3, r1, r3
 8003008:	4413      	add	r3, r2
 800300a:	3344      	adds	r3, #68	; 0x44
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	b292      	uxth	r2, r2
 8003012:	4619      	mov	r1, r3
 8003014:	f001 fe92 	bl	8004d3c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003018:	687a      	ldr	r2, [r7, #4]
 800301a:	69bb      	ldr	r3, [r7, #24]
 800301c:	212c      	movs	r1, #44	; 0x2c
 800301e:	fb01 f303 	mul.w	r3, r1, r3
 8003022:	4413      	add	r3, r2
 8003024:	3344      	adds	r3, #68	; 0x44
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	441a      	add	r2, r3
 800302c:	6879      	ldr	r1, [r7, #4]
 800302e:	69bb      	ldr	r3, [r7, #24]
 8003030:	202c      	movs	r0, #44	; 0x2c
 8003032:	fb00 f303 	mul.w	r3, r0, r3
 8003036:	440b      	add	r3, r1
 8003038:	3344      	adds	r3, #68	; 0x44
 800303a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800303c:	687a      	ldr	r2, [r7, #4]
 800303e:	69bb      	ldr	r3, [r7, #24]
 8003040:	212c      	movs	r1, #44	; 0x2c
 8003042:	fb01 f303 	mul.w	r3, r1, r3
 8003046:	4413      	add	r3, r2
 8003048:	3350      	adds	r3, #80	; 0x50
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	441a      	add	r2, r3
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	202c      	movs	r0, #44	; 0x2c
 8003056:	fb00 f303 	mul.w	r3, r0, r3
 800305a:	440b      	add	r3, r1
 800305c:	3350      	adds	r3, #80	; 0x50
 800305e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	015a      	lsls	r2, r3, #5
 8003064:	6a3b      	ldr	r3, [r7, #32]
 8003066:	4413      	add	r3, r2
 8003068:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	0cdb      	lsrs	r3, r3, #19
 8003070:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003074:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	212c      	movs	r1, #44	; 0x2c
 800307c:	fb01 f303 	mul.w	r3, r1, r3
 8003080:	4413      	add	r3, r2
 8003082:	3340      	adds	r3, #64	; 0x40
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	461a      	mov	r2, r3
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	4293      	cmp	r3, r2
 800308c:	d13c      	bne.n	8003108 <HCD_RXQLVL_IRQHandler+0x19a>
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2b00      	cmp	r3, #0
 8003092:	d039      	beq.n	8003108 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	015a      	lsls	r2, r3, #5
 8003098:	6a3b      	ldr	r3, [r7, #32]
 800309a:	4413      	add	r3, r2
 800309c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80030aa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80030ac:	68bb      	ldr	r3, [r7, #8]
 80030ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80030b2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	015a      	lsls	r2, r3, #5
 80030b8:	6a3b      	ldr	r3, [r7, #32]
 80030ba:	4413      	add	r3, r2
 80030bc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030c0:	461a      	mov	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	212c      	movs	r1, #44	; 0x2c
 80030cc:	fb01 f303 	mul.w	r3, r1, r3
 80030d0:	4413      	add	r3, r2
 80030d2:	3354      	adds	r3, #84	; 0x54
 80030d4:	781b      	ldrb	r3, [r3, #0]
 80030d6:	f083 0301 	eor.w	r3, r3, #1
 80030da:	b2d8      	uxtb	r0, r3
 80030dc:	687a      	ldr	r2, [r7, #4]
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	212c      	movs	r1, #44	; 0x2c
 80030e2:	fb01 f303 	mul.w	r3, r1, r3
 80030e6:	4413      	add	r3, r2
 80030e8:	3354      	adds	r3, #84	; 0x54
 80030ea:	4602      	mov	r2, r0
 80030ec:	701a      	strb	r2, [r3, #0]
      break;
 80030ee:	e00b      	b.n	8003108 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	69bb      	ldr	r3, [r7, #24]
 80030f4:	212c      	movs	r1, #44	; 0x2c
 80030f6:	fb01 f303 	mul.w	r3, r1, r3
 80030fa:	4413      	add	r3, r2
 80030fc:	3360      	adds	r3, #96	; 0x60
 80030fe:	2204      	movs	r2, #4
 8003100:	701a      	strb	r2, [r3, #0]
      break;
 8003102:	e001      	b.n	8003108 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003104:	bf00      	nop
 8003106:	e000      	b.n	800310a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003108:	bf00      	nop
  }
}
 800310a:	bf00      	nop
 800310c:	3728      	adds	r7, #40	; 0x28
 800310e:	46bd      	mov	sp, r7
 8003110:	bd80      	pop	{r7, pc}

08003112 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003112:	b580      	push	{r7, lr}
 8003114:	b086      	sub	sp, #24
 8003116:	af00      	add	r7, sp, #0
 8003118:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003124:	693b      	ldr	r3, [r7, #16]
 8003126:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800313e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f003 0302 	and.w	r3, r3, #2
 8003146:	2b02      	cmp	r3, #2
 8003148:	d10b      	bne.n	8003162 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	f003 0301 	and.w	r3, r3, #1
 8003150:	2b01      	cmp	r3, #1
 8003152:	d102      	bne.n	800315a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f003 fd5d 	bl	8006c14 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	f043 0302 	orr.w	r3, r3, #2
 8003160:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	f003 0308 	and.w	r3, r3, #8
 8003168:	2b08      	cmp	r3, #8
 800316a:	d132      	bne.n	80031d2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f043 0308 	orr.w	r3, r3, #8
 8003172:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f003 0304 	and.w	r3, r3, #4
 800317a:	2b04      	cmp	r3, #4
 800317c:	d126      	bne.n	80031cc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	699b      	ldr	r3, [r3, #24]
 8003182:	2b02      	cmp	r3, #2
 8003184:	d113      	bne.n	80031ae <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800318c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003190:	d106      	bne.n	80031a0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2102      	movs	r1, #2
 8003198:	4618      	mov	r0, r3
 800319a:	f001 ff3d 	bl	8005018 <USB_InitFSLSPClkSel>
 800319e:	e011      	b.n	80031c4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2101      	movs	r1, #1
 80031a6:	4618      	mov	r0, r3
 80031a8:	f001 ff36 	bl	8005018 <USB_InitFSLSPClkSel>
 80031ac:	e00a      	b.n	80031c4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	68db      	ldr	r3, [r3, #12]
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d106      	bne.n	80031c4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80031bc:	461a      	mov	r2, r3
 80031be:	f64e 2360 	movw	r3, #60000	; 0xea60
 80031c2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80031c4:	6878      	ldr	r0, [r7, #4]
 80031c6:	f003 fd4f 	bl	8006c68 <HAL_HCD_PortEnabled_Callback>
 80031ca:	e002      	b.n	80031d2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80031cc:	6878      	ldr	r0, [r7, #4]
 80031ce:	f003 fd59 	bl	8006c84 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	f003 0320 	and.w	r3, r3, #32
 80031d8:	2b20      	cmp	r3, #32
 80031da:	d103      	bne.n	80031e4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	f043 0320 	orr.w	r3, r3, #32
 80031e2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80031ea:	461a      	mov	r2, r3
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	6013      	str	r3, [r2, #0]
}
 80031f0:	bf00      	nop
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d101      	bne.n	800320a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	e12b      	b.n	8003462 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003210:	b2db      	uxtb	r3, r3
 8003212:	2b00      	cmp	r3, #0
 8003214:	d106      	bne.n	8003224 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2200      	movs	r2, #0
 800321a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f7fd fc86 	bl	8000b30 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2224      	movs	r2, #36	; 0x24
 8003228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f022 0201 	bic.w	r2, r2, #1
 800323a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	681a      	ldr	r2, [r3, #0]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800324a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	681a      	ldr	r2, [r3, #0]
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800325a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800325c:	f001 fa20 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 8003260:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	4a81      	ldr	r2, [pc, #516]	; (800346c <HAL_I2C_Init+0x274>)
 8003268:	4293      	cmp	r3, r2
 800326a:	d807      	bhi.n	800327c <HAL_I2C_Init+0x84>
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	4a80      	ldr	r2, [pc, #512]	; (8003470 <HAL_I2C_Init+0x278>)
 8003270:	4293      	cmp	r3, r2
 8003272:	bf94      	ite	ls
 8003274:	2301      	movls	r3, #1
 8003276:	2300      	movhi	r3, #0
 8003278:	b2db      	uxtb	r3, r3
 800327a:	e006      	b.n	800328a <HAL_I2C_Init+0x92>
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	4a7d      	ldr	r2, [pc, #500]	; (8003474 <HAL_I2C_Init+0x27c>)
 8003280:	4293      	cmp	r3, r2
 8003282:	bf94      	ite	ls
 8003284:	2301      	movls	r3, #1
 8003286:	2300      	movhi	r3, #0
 8003288:	b2db      	uxtb	r3, r3
 800328a:	2b00      	cmp	r3, #0
 800328c:	d001      	beq.n	8003292 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e0e7      	b.n	8003462 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	4a78      	ldr	r2, [pc, #480]	; (8003478 <HAL_I2C_Init+0x280>)
 8003296:	fba2 2303 	umull	r2, r3, r2, r3
 800329a:	0c9b      	lsrs	r3, r3, #18
 800329c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68ba      	ldr	r2, [r7, #8]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6a1b      	ldr	r3, [r3, #32]
 80032b8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	4a6a      	ldr	r2, [pc, #424]	; (800346c <HAL_I2C_Init+0x274>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d802      	bhi.n	80032cc <HAL_I2C_Init+0xd4>
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	3301      	adds	r3, #1
 80032ca:	e009      	b.n	80032e0 <HAL_I2C_Init+0xe8>
 80032cc:	68bb      	ldr	r3, [r7, #8]
 80032ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80032d2:	fb02 f303 	mul.w	r3, r2, r3
 80032d6:	4a69      	ldr	r2, [pc, #420]	; (800347c <HAL_I2C_Init+0x284>)
 80032d8:	fba2 2303 	umull	r2, r3, r2, r3
 80032dc:	099b      	lsrs	r3, r3, #6
 80032de:	3301      	adds	r3, #1
 80032e0:	687a      	ldr	r2, [r7, #4]
 80032e2:	6812      	ldr	r2, [r2, #0]
 80032e4:	430b      	orrs	r3, r1
 80032e6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	69db      	ldr	r3, [r3, #28]
 80032ee:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80032f2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	495c      	ldr	r1, [pc, #368]	; (800346c <HAL_I2C_Init+0x274>)
 80032fc:	428b      	cmp	r3, r1
 80032fe:	d819      	bhi.n	8003334 <HAL_I2C_Init+0x13c>
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	1e59      	subs	r1, r3, #1
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	fbb1 f3f3 	udiv	r3, r1, r3
 800330e:	1c59      	adds	r1, r3, #1
 8003310:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003314:	400b      	ands	r3, r1
 8003316:	2b00      	cmp	r3, #0
 8003318:	d00a      	beq.n	8003330 <HAL_I2C_Init+0x138>
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	1e59      	subs	r1, r3, #1
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	685b      	ldr	r3, [r3, #4]
 8003322:	005b      	lsls	r3, r3, #1
 8003324:	fbb1 f3f3 	udiv	r3, r1, r3
 8003328:	3301      	adds	r3, #1
 800332a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800332e:	e051      	b.n	80033d4 <HAL_I2C_Init+0x1dc>
 8003330:	2304      	movs	r3, #4
 8003332:	e04f      	b.n	80033d4 <HAL_I2C_Init+0x1dc>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d111      	bne.n	8003360 <HAL_I2C_Init+0x168>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	1e58      	subs	r0, r3, #1
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6859      	ldr	r1, [r3, #4]
 8003344:	460b      	mov	r3, r1
 8003346:	005b      	lsls	r3, r3, #1
 8003348:	440b      	add	r3, r1
 800334a:	fbb0 f3f3 	udiv	r3, r0, r3
 800334e:	3301      	adds	r3, #1
 8003350:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003354:	2b00      	cmp	r3, #0
 8003356:	bf0c      	ite	eq
 8003358:	2301      	moveq	r3, #1
 800335a:	2300      	movne	r3, #0
 800335c:	b2db      	uxtb	r3, r3
 800335e:	e012      	b.n	8003386 <HAL_I2C_Init+0x18e>
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1e58      	subs	r0, r3, #1
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6859      	ldr	r1, [r3, #4]
 8003368:	460b      	mov	r3, r1
 800336a:	009b      	lsls	r3, r3, #2
 800336c:	440b      	add	r3, r1
 800336e:	0099      	lsls	r1, r3, #2
 8003370:	440b      	add	r3, r1
 8003372:	fbb0 f3f3 	udiv	r3, r0, r3
 8003376:	3301      	adds	r3, #1
 8003378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800337c:	2b00      	cmp	r3, #0
 800337e:	bf0c      	ite	eq
 8003380:	2301      	moveq	r3, #1
 8003382:	2300      	movne	r3, #0
 8003384:	b2db      	uxtb	r3, r3
 8003386:	2b00      	cmp	r3, #0
 8003388:	d001      	beq.n	800338e <HAL_I2C_Init+0x196>
 800338a:	2301      	movs	r3, #1
 800338c:	e022      	b.n	80033d4 <HAL_I2C_Init+0x1dc>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	689b      	ldr	r3, [r3, #8]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10e      	bne.n	80033b4 <HAL_I2C_Init+0x1bc>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1e58      	subs	r0, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	6859      	ldr	r1, [r3, #4]
 800339e:	460b      	mov	r3, r1
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	440b      	add	r3, r1
 80033a4:	fbb0 f3f3 	udiv	r3, r0, r3
 80033a8:	3301      	adds	r3, #1
 80033aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80033b2:	e00f      	b.n	80033d4 <HAL_I2C_Init+0x1dc>
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	1e58      	subs	r0, r3, #1
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6859      	ldr	r1, [r3, #4]
 80033bc:	460b      	mov	r3, r1
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	0099      	lsls	r1, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80033d4:	6879      	ldr	r1, [r7, #4]
 80033d6:	6809      	ldr	r1, [r1, #0]
 80033d8:	4313      	orrs	r3, r2
 80033da:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	69da      	ldr	r2, [r3, #28]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6a1b      	ldr	r3, [r3, #32]
 80033ee:	431a      	orrs	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	430a      	orrs	r2, r1
 80033f6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003402:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003406:	687a      	ldr	r2, [r7, #4]
 8003408:	6911      	ldr	r1, [r2, #16]
 800340a:	687a      	ldr	r2, [r7, #4]
 800340c:	68d2      	ldr	r2, [r2, #12]
 800340e:	4311      	orrs	r1, r2
 8003410:	687a      	ldr	r2, [r7, #4]
 8003412:	6812      	ldr	r2, [r2, #0]
 8003414:	430b      	orrs	r3, r1
 8003416:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	695a      	ldr	r2, [r3, #20]
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	699b      	ldr	r3, [r3, #24]
 800342a:	431a      	orrs	r2, r3
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	430a      	orrs	r2, r1
 8003432:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f042 0201 	orr.w	r2, r2, #1
 8003442:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2220      	movs	r2, #32
 800344e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	2200      	movs	r2, #0
 8003456:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003460:	2300      	movs	r3, #0
}
 8003462:	4618      	mov	r0, r3
 8003464:	3710      	adds	r7, #16
 8003466:	46bd      	mov	sp, r7
 8003468:	bd80      	pop	{r7, pc}
 800346a:	bf00      	nop
 800346c:	000186a0 	.word	0x000186a0
 8003470:	001e847f 	.word	0x001e847f
 8003474:	003d08ff 	.word	0x003d08ff
 8003478:	431bde83 	.word	0x431bde83
 800347c:	10624dd3 	.word	0x10624dd3

08003480 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8003480:	b580      	push	{r7, lr}
 8003482:	b088      	sub	sp, #32
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d101      	bne.n	8003492 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800348e:	2301      	movs	r3, #1
 8003490:	e128      	b.n	80036e4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b00      	cmp	r3, #0
 800349c:	d109      	bne.n	80034b2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a90      	ldr	r2, [pc, #576]	; (80036ec <HAL_I2S_Init+0x26c>)
 80034aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80034ac:	6878      	ldr	r0, [r7, #4]
 80034ae:	f7fd fb87 	bl	8000bc0 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2202      	movs	r2, #2
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69db      	ldr	r3, [r3, #28]
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80034c8:	f023 030f 	bic.w	r3, r3, #15
 80034cc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	2202      	movs	r2, #2
 80034d4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	695b      	ldr	r3, [r3, #20]
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d060      	beq.n	80035a0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d102      	bne.n	80034ec <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80034e6:	2310      	movs	r3, #16
 80034e8:	617b      	str	r3, [r7, #20]
 80034ea:	e001      	b.n	80034f0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80034ec:	2320      	movs	r3, #32
 80034ee:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	689b      	ldr	r3, [r3, #8]
 80034f4:	2b20      	cmp	r3, #32
 80034f6:	d802      	bhi.n	80034fe <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80034f8:	697b      	ldr	r3, [r7, #20]
 80034fa:	005b      	lsls	r3, r3, #1
 80034fc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80034fe:	2001      	movs	r0, #1
 8003500:	f001 f9c4 	bl	800488c <HAL_RCCEx_GetPeriphCLKFreq>
 8003504:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	691b      	ldr	r3, [r3, #16]
 800350a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800350e:	d125      	bne.n	800355c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	68db      	ldr	r3, [r3, #12]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d010      	beq.n	800353a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	68fa      	ldr	r2, [r7, #12]
 800351e:	fbb2 f2f3 	udiv	r2, r2, r3
 8003522:	4613      	mov	r3, r2
 8003524:	009b      	lsls	r3, r3, #2
 8003526:	4413      	add	r3, r2
 8003528:	005b      	lsls	r3, r3, #1
 800352a:	461a      	mov	r2, r3
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	695b      	ldr	r3, [r3, #20]
 8003530:	fbb2 f3f3 	udiv	r3, r2, r3
 8003534:	3305      	adds	r3, #5
 8003536:	613b      	str	r3, [r7, #16]
 8003538:	e01f      	b.n	800357a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800353a:	697b      	ldr	r3, [r7, #20]
 800353c:	00db      	lsls	r3, r3, #3
 800353e:	68fa      	ldr	r2, [r7, #12]
 8003540:	fbb2 f2f3 	udiv	r2, r2, r3
 8003544:	4613      	mov	r3, r2
 8003546:	009b      	lsls	r3, r3, #2
 8003548:	4413      	add	r3, r2
 800354a:	005b      	lsls	r3, r3, #1
 800354c:	461a      	mov	r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	695b      	ldr	r3, [r3, #20]
 8003552:	fbb2 f3f3 	udiv	r3, r2, r3
 8003556:	3305      	adds	r3, #5
 8003558:	613b      	str	r3, [r7, #16]
 800355a:	e00e      	b.n	800357a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800355c:	68fa      	ldr	r2, [r7, #12]
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	fbb2 f2f3 	udiv	r2, r2, r3
 8003564:	4613      	mov	r3, r2
 8003566:	009b      	lsls	r3, r3, #2
 8003568:	4413      	add	r3, r2
 800356a:	005b      	lsls	r3, r3, #1
 800356c:	461a      	mov	r2, r3
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	695b      	ldr	r3, [r3, #20]
 8003572:	fbb2 f3f3 	udiv	r3, r2, r3
 8003576:	3305      	adds	r3, #5
 8003578:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4a5c      	ldr	r2, [pc, #368]	; (80036f0 <HAL_I2S_Init+0x270>)
 800357e:	fba2 2303 	umull	r2, r3, r2, r3
 8003582:	08db      	lsrs	r3, r3, #3
 8003584:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	f003 0301 	and.w	r3, r3, #1
 800358c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	69bb      	ldr	r3, [r7, #24]
 8003592:	1ad3      	subs	r3, r2, r3
 8003594:	085b      	lsrs	r3, r3, #1
 8003596:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8003598:	69bb      	ldr	r3, [r7, #24]
 800359a:	021b      	lsls	r3, r3, #8
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e003      	b.n	80035a8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80035a0:	2302      	movs	r3, #2
 80035a2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80035a8:	69fb      	ldr	r3, [r7, #28]
 80035aa:	2b01      	cmp	r3, #1
 80035ac:	d902      	bls.n	80035b4 <HAL_I2S_Init+0x134>
 80035ae:	69fb      	ldr	r3, [r7, #28]
 80035b0:	2bff      	cmp	r3, #255	; 0xff
 80035b2:	d907      	bls.n	80035c4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035b8:	f043 0210 	orr.w	r2, r3, #16
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80035c0:	2301      	movs	r3, #1
 80035c2:	e08f      	b.n	80036e4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	691a      	ldr	r2, [r3, #16]
 80035c8:	69bb      	ldr	r3, [r7, #24]
 80035ca:	ea42 0103 	orr.w	r1, r2, r3
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	69db      	ldr	r3, [r3, #28]
 80035de:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80035e2:	f023 030f 	bic.w	r3, r3, #15
 80035e6:	687a      	ldr	r2, [r7, #4]
 80035e8:	6851      	ldr	r1, [r2, #4]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	6892      	ldr	r2, [r2, #8]
 80035ee:	4311      	orrs	r1, r2
 80035f0:	687a      	ldr	r2, [r7, #4]
 80035f2:	68d2      	ldr	r2, [r2, #12]
 80035f4:	4311      	orrs	r1, r2
 80035f6:	687a      	ldr	r2, [r7, #4]
 80035f8:	6992      	ldr	r2, [r2, #24]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	431a      	orrs	r2, r3
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003606:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6a1b      	ldr	r3, [r3, #32]
 800360c:	2b01      	cmp	r3, #1
 800360e:	d161      	bne.n	80036d4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	4a38      	ldr	r2, [pc, #224]	; (80036f4 <HAL_I2S_Init+0x274>)
 8003614:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4a37      	ldr	r2, [pc, #220]	; (80036f8 <HAL_I2S_Init+0x278>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d101      	bne.n	8003624 <HAL_I2S_Init+0x1a4>
 8003620:	4b36      	ldr	r3, [pc, #216]	; (80036fc <HAL_I2S_Init+0x27c>)
 8003622:	e001      	b.n	8003628 <HAL_I2S_Init+0x1a8>
 8003624:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	687a      	ldr	r2, [r7, #4]
 800362c:	6812      	ldr	r2, [r2, #0]
 800362e:	4932      	ldr	r1, [pc, #200]	; (80036f8 <HAL_I2S_Init+0x278>)
 8003630:	428a      	cmp	r2, r1
 8003632:	d101      	bne.n	8003638 <HAL_I2S_Init+0x1b8>
 8003634:	4a31      	ldr	r2, [pc, #196]	; (80036fc <HAL_I2S_Init+0x27c>)
 8003636:	e001      	b.n	800363c <HAL_I2S_Init+0x1bc>
 8003638:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800363c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003640:	f023 030f 	bic.w	r3, r3, #15
 8003644:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	4a2b      	ldr	r2, [pc, #172]	; (80036f8 <HAL_I2S_Init+0x278>)
 800364c:	4293      	cmp	r3, r2
 800364e:	d101      	bne.n	8003654 <HAL_I2S_Init+0x1d4>
 8003650:	4b2a      	ldr	r3, [pc, #168]	; (80036fc <HAL_I2S_Init+0x27c>)
 8003652:	e001      	b.n	8003658 <HAL_I2S_Init+0x1d8>
 8003654:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003658:	2202      	movs	r2, #2
 800365a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	4a25      	ldr	r2, [pc, #148]	; (80036f8 <HAL_I2S_Init+0x278>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d101      	bne.n	800366a <HAL_I2S_Init+0x1ea>
 8003666:	4b25      	ldr	r3, [pc, #148]	; (80036fc <HAL_I2S_Init+0x27c>)
 8003668:	e001      	b.n	800366e <HAL_I2S_Init+0x1ee>
 800366a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800366e:	69db      	ldr	r3, [r3, #28]
 8003670:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	685b      	ldr	r3, [r3, #4]
 8003676:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800367a:	d003      	beq.n	8003684 <HAL_I2S_Init+0x204>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d103      	bne.n	800368c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003684:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003688:	613b      	str	r3, [r7, #16]
 800368a:	e001      	b.n	8003690 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003690:	693b      	ldr	r3, [r7, #16]
 8003692:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800369a:	4313      	orrs	r3, r2
 800369c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036a4:	4313      	orrs	r3, r2
 80036a6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	699b      	ldr	r3, [r3, #24]
 80036ac:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80036ae:	4313      	orrs	r3, r2
 80036b0:	b29a      	uxth	r2, r3
 80036b2:	897b      	ldrh	r3, [r7, #10]
 80036b4:	4313      	orrs	r3, r2
 80036b6:	b29b      	uxth	r3, r3
 80036b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80036bc:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	4a0d      	ldr	r2, [pc, #52]	; (80036f8 <HAL_I2S_Init+0x278>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d101      	bne.n	80036cc <HAL_I2S_Init+0x24c>
 80036c8:	4b0c      	ldr	r3, [pc, #48]	; (80036fc <HAL_I2S_Init+0x27c>)
 80036ca:	e001      	b.n	80036d0 <HAL_I2S_Init+0x250>
 80036cc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80036d0:	897a      	ldrh	r2, [r7, #10]
 80036d2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2201      	movs	r2, #1
 80036de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3720      	adds	r7, #32
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	080037f7 	.word	0x080037f7
 80036f0:	cccccccd 	.word	0xcccccccd
 80036f4:	0800390d 	.word	0x0800390d
 80036f8:	40003800 	.word	0x40003800
 80036fc:	40003400 	.word	0x40003400

08003700 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003700:	b480      	push	{r7}
 8003702:	b083      	sub	sp, #12
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003708:	bf00      	nop
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003730:	bf00      	nop
 8003732:	370c      	adds	r7, #12
 8003734:	46bd      	mov	sp, r7
 8003736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373a:	4770      	bx	lr

0800373c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b082      	sub	sp, #8
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003748:	881a      	ldrh	r2, [r3, #0]
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003754:	1c9a      	adds	r2, r3, #2
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800375e:	b29b      	uxth	r3, r3
 8003760:	3b01      	subs	r3, #1
 8003762:	b29a      	uxth	r2, r3
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10e      	bne.n	8003790 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003780:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800378a:	6878      	ldr	r0, [r7, #4]
 800378c:	f7ff ffb8 	bl	8003700 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003790:	bf00      	nop
 8003792:	3708      	adds	r7, #8
 8003794:	46bd      	mov	sp, r7
 8003796:	bd80      	pop	{r7, pc}

08003798 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	68da      	ldr	r2, [r3, #12]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037aa:	b292      	uxth	r2, r2
 80037ac:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b2:	1c9a      	adds	r2, r3, #2
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037bc:	b29b      	uxth	r3, r3
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d10e      	bne.n	80037ee <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685a      	ldr	r2, [r3, #4]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80037de:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80037e8:	6878      	ldr	r0, [r7, #4]
 80037ea:	f7ff ff93 	bl	8003714 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80037ee:	bf00      	nop
 80037f0:	3708      	adds	r7, #8
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b086      	sub	sp, #24
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b04      	cmp	r3, #4
 8003810:	d13a      	bne.n	8003888 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003812:	697b      	ldr	r3, [r7, #20]
 8003814:	f003 0301 	and.w	r3, r3, #1
 8003818:	2b01      	cmp	r3, #1
 800381a:	d109      	bne.n	8003830 <I2S_IRQHandler+0x3a>
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003826:	2b40      	cmp	r3, #64	; 0x40
 8003828:	d102      	bne.n	8003830 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f7ff ffb4 	bl	8003798 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003836:	2b40      	cmp	r3, #64	; 0x40
 8003838:	d126      	bne.n	8003888 <I2S_IRQHandler+0x92>
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0320 	and.w	r3, r3, #32
 8003844:	2b20      	cmp	r3, #32
 8003846:	d11f      	bne.n	8003888 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	685a      	ldr	r2, [r3, #4]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003856:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003858:	2300      	movs	r3, #0
 800385a:	613b      	str	r3, [r7, #16]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	613b      	str	r3, [r7, #16]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	613b      	str	r3, [r7, #16]
 800386c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2201      	movs	r2, #1
 8003872:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800387a:	f043 0202 	orr.w	r2, r3, #2
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7ff ff50 	bl	8003728 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800388e:	b2db      	uxtb	r3, r3
 8003890:	2b03      	cmp	r3, #3
 8003892:	d136      	bne.n	8003902 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b02      	cmp	r3, #2
 800389c:	d109      	bne.n	80038b2 <I2S_IRQHandler+0xbc>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a8:	2b80      	cmp	r3, #128	; 0x80
 80038aa:	d102      	bne.n	80038b2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f7ff ff45 	bl	800373c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	f003 0308 	and.w	r3, r3, #8
 80038b8:	2b08      	cmp	r3, #8
 80038ba:	d122      	bne.n	8003902 <I2S_IRQHandler+0x10c>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	f003 0320 	and.w	r3, r3, #32
 80038c6:	2b20      	cmp	r3, #32
 80038c8:	d11b      	bne.n	8003902 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	685a      	ldr	r2, [r3, #4]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80038d8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80038da:	2300      	movs	r3, #0
 80038dc:	60fb      	str	r3, [r7, #12]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	60fb      	str	r3, [r7, #12]
 80038e6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038f4:	f043 0204 	orr.w	r2, r3, #4
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff13 	bl	8003728 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003902:	bf00      	nop
 8003904:	3718      	adds	r7, #24
 8003906:	46bd      	mov	sp, r7
 8003908:	bd80      	pop	{r7, pc}
	...

0800390c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b088      	sub	sp, #32
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4a92      	ldr	r2, [pc, #584]	; (8003b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d101      	bne.n	800392a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003926:	4b92      	ldr	r3, [pc, #584]	; (8003b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003928:	e001      	b.n	800392e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800392a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a8b      	ldr	r2, [pc, #556]	; (8003b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d101      	bne.n	8003948 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003944:	4b8a      	ldr	r3, [pc, #552]	; (8003b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003946:	e001      	b.n	800394c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003958:	d004      	beq.n	8003964 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	f040 8099 	bne.w	8003a96 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f003 0302 	and.w	r3, r3, #2
 800396a:	2b02      	cmp	r3, #2
 800396c:	d107      	bne.n	800397e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003974:	2b00      	cmp	r3, #0
 8003976:	d002      	beq.n	800397e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003978:	6878      	ldr	r0, [r7, #4]
 800397a:	f000 f925 	bl	8003bc8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800397e:	69bb      	ldr	r3, [r7, #24]
 8003980:	f003 0301 	and.w	r3, r3, #1
 8003984:	2b01      	cmp	r3, #1
 8003986:	d107      	bne.n	8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800398e:	2b00      	cmp	r3, #0
 8003990:	d002      	beq.n	8003998 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003992:	6878      	ldr	r0, [r7, #4]
 8003994:	f000 f9c8 	bl	8003d28 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003998:	69bb      	ldr	r3, [r7, #24]
 800399a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800399e:	2b40      	cmp	r3, #64	; 0x40
 80039a0:	d13a      	bne.n	8003a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80039a2:	693b      	ldr	r3, [r7, #16]
 80039a4:	f003 0320 	and.w	r3, r3, #32
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d035      	beq.n	8003a18 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	4a6e      	ldr	r2, [pc, #440]	; (8003b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d101      	bne.n	80039ba <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80039b6:	4b6e      	ldr	r3, [pc, #440]	; (8003b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039b8:	e001      	b.n	80039be <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80039ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4969      	ldr	r1, [pc, #420]	; (8003b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80039c6:	428b      	cmp	r3, r1
 80039c8:	d101      	bne.n	80039ce <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80039ca:	4b69      	ldr	r3, [pc, #420]	; (8003b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80039cc:	e001      	b.n	80039d2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80039ce:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80039d2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80039d6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685a      	ldr	r2, [r3, #4]
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80039e6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80039e8:	2300      	movs	r3, #0
 80039ea:	60fb      	str	r3, [r7, #12]
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	60fb      	str	r3, [r7, #12]
 80039fc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2201      	movs	r2, #1
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a0a:	f043 0202 	orr.w	r2, r3, #2
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f7ff fe88 	bl	8003728 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	f040 80c3 	bne.w	8003baa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	f003 0320 	and.w	r3, r3, #32
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	f000 80bd 	beq.w	8003baa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	685a      	ldr	r2, [r3, #4]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003a3e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	4a49      	ldr	r2, [pc, #292]	; (8003b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a46:	4293      	cmp	r3, r2
 8003a48:	d101      	bne.n	8003a4e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003a4a:	4b49      	ldr	r3, [pc, #292]	; (8003b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a4c:	e001      	b.n	8003a52 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003a4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	4944      	ldr	r1, [pc, #272]	; (8003b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003a5a:	428b      	cmp	r3, r1
 8003a5c:	d101      	bne.n	8003a62 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003a5e:	4b44      	ldr	r3, [pc, #272]	; (8003b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003a60:	e001      	b.n	8003a66 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003a62:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a66:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003a6a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003a6c:	2300      	movs	r3, #0
 8003a6e:	60bb      	str	r3, [r7, #8]
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60bb      	str	r3, [r7, #8]
 8003a78:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a86:	f043 0204 	orr.w	r2, r3, #4
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f7ff fe4a 	bl	8003728 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003a94:	e089      	b.n	8003baa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003a96:	69bb      	ldr	r3, [r7, #24]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	2b02      	cmp	r3, #2
 8003a9e:	d107      	bne.n	8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d002      	beq.n	8003ab0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003aaa:	6878      	ldr	r0, [r7, #4]
 8003aac:	f000 f8be 	bl	8003c2c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d107      	bne.n	8003aca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d002      	beq.n	8003aca <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f000 f8fd 	bl	8003cc4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003aca:	69fb      	ldr	r3, [r7, #28]
 8003acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ad0:	2b40      	cmp	r3, #64	; 0x40
 8003ad2:	d12f      	bne.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003ad4:	697b      	ldr	r3, [r7, #20]
 8003ad6:	f003 0320 	and.w	r3, r3, #32
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d02a      	beq.n	8003b34 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003aec:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1e      	ldr	r2, [pc, #120]	; (8003b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d101      	bne.n	8003afc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003af8:	4b1d      	ldr	r3, [pc, #116]	; (8003b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003afa:	e001      	b.n	8003b00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003afc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b00:	685a      	ldr	r2, [r3, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4919      	ldr	r1, [pc, #100]	; (8003b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b08:	428b      	cmp	r3, r1
 8003b0a:	d101      	bne.n	8003b10 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003b0c:	4b18      	ldr	r3, [pc, #96]	; (8003b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b0e:	e001      	b.n	8003b14 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003b10:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b14:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b18:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	2201      	movs	r2, #1
 8003b1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b26:	f043 0202 	orr.w	r2, r3, #2
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003b2e:	6878      	ldr	r0, [r7, #4]
 8003b30:	f7ff fdfa 	bl	8003728 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003b34:	69bb      	ldr	r3, [r7, #24]
 8003b36:	f003 0308 	and.w	r3, r3, #8
 8003b3a:	2b08      	cmp	r3, #8
 8003b3c:	d136      	bne.n	8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003b3e:	693b      	ldr	r3, [r7, #16]
 8003b40:	f003 0320 	and.w	r3, r3, #32
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d031      	beq.n	8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	4a07      	ldr	r2, [pc, #28]	; (8003b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d101      	bne.n	8003b56 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003b52:	4b07      	ldr	r3, [pc, #28]	; (8003b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b54:	e001      	b.n	8003b5a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003b56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b5a:	685a      	ldr	r2, [r3, #4]
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	4902      	ldr	r1, [pc, #8]	; (8003b6c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003b62:	428b      	cmp	r3, r1
 8003b64:	d106      	bne.n	8003b74 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003b66:	4b02      	ldr	r3, [pc, #8]	; (8003b70 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003b68:	e006      	b.n	8003b78 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003b6a:	bf00      	nop
 8003b6c:	40003800 	.word	0x40003800
 8003b70:	40003400 	.word	0x40003400
 8003b74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003b78:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003b7c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685a      	ldr	r2, [r3, #4]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003b8c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2201      	movs	r2, #1
 8003b92:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b9a:	f043 0204 	orr.w	r2, r3, #4
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f7ff fdc0 	bl	8003728 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003ba8:	e000      	b.n	8003bac <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003baa:	bf00      	nop
}
 8003bac:	bf00      	nop
 8003bae:	3720      	adds	r7, #32
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b082      	sub	sp, #8
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bd4:	1c99      	adds	r1, r3, #2
 8003bd6:	687a      	ldr	r2, [r7, #4]
 8003bd8:	6251      	str	r1, [r2, #36]	; 0x24
 8003bda:	881a      	ldrh	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003be6:	b29b      	uxth	r3, r3
 8003be8:	3b01      	subs	r3, #1
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bf4:	b29b      	uxth	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d113      	bne.n	8003c22 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c08:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c0e:	b29b      	uxth	r3, r3
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d106      	bne.n	8003c22 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f7ff ffc9 	bl	8003bb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003c22:	bf00      	nop
 8003c24:	3708      	adds	r7, #8
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
	...

08003c2c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c38:	1c99      	adds	r1, r3, #2
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	6251      	str	r1, [r2, #36]	; 0x24
 8003c3e:	8819      	ldrh	r1, [r3, #0]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	4a1d      	ldr	r2, [pc, #116]	; (8003cbc <I2SEx_TxISR_I2SExt+0x90>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d101      	bne.n	8003c4e <I2SEx_TxISR_I2SExt+0x22>
 8003c4a:	4b1d      	ldr	r3, [pc, #116]	; (8003cc0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c4c:	e001      	b.n	8003c52 <I2SEx_TxISR_I2SExt+0x26>
 8003c4e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c52:	460a      	mov	r2, r1
 8003c54:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c68:	b29b      	uxth	r3, r3
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d121      	bne.n	8003cb2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a12      	ldr	r2, [pc, #72]	; (8003cbc <I2SEx_TxISR_I2SExt+0x90>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d101      	bne.n	8003c7c <I2SEx_TxISR_I2SExt+0x50>
 8003c78:	4b11      	ldr	r3, [pc, #68]	; (8003cc0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c7a:	e001      	b.n	8003c80 <I2SEx_TxISR_I2SExt+0x54>
 8003c7c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c80:	685a      	ldr	r2, [r3, #4]
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	490d      	ldr	r1, [pc, #52]	; (8003cbc <I2SEx_TxISR_I2SExt+0x90>)
 8003c88:	428b      	cmp	r3, r1
 8003c8a:	d101      	bne.n	8003c90 <I2SEx_TxISR_I2SExt+0x64>
 8003c8c:	4b0c      	ldr	r3, [pc, #48]	; (8003cc0 <I2SEx_TxISR_I2SExt+0x94>)
 8003c8e:	e001      	b.n	8003c94 <I2SEx_TxISR_I2SExt+0x68>
 8003c90:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003c94:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003c98:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d106      	bne.n	8003cb2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003cac:	6878      	ldr	r0, [r7, #4]
 8003cae:	f7ff ff81 	bl	8003bb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003cb2:	bf00      	nop
 8003cb4:	3708      	adds	r7, #8
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	40003800 	.word	0x40003800
 8003cc0:	40003400 	.word	0x40003400

08003cc4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	68d8      	ldr	r0, [r3, #12]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cd6:	1c99      	adds	r1, r3, #2
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003cdc:	b282      	uxth	r2, r0
 8003cde:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	3b01      	subs	r3, #1
 8003ce8:	b29a      	uxth	r2, r3
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003cf2:	b29b      	uxth	r3, r3
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d113      	bne.n	8003d20 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	685a      	ldr	r2, [r3, #4]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d06:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d106      	bne.n	8003d20 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2201      	movs	r2, #1
 8003d16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003d1a:	6878      	ldr	r0, [r7, #4]
 8003d1c:	f7ff ff4a 	bl	8003bb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d20:	bf00      	nop
 8003d22:	3708      	adds	r7, #8
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b082      	sub	sp, #8
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	4a20      	ldr	r2, [pc, #128]	; (8003db8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d36:	4293      	cmp	r3, r2
 8003d38:	d101      	bne.n	8003d3e <I2SEx_RxISR_I2SExt+0x16>
 8003d3a:	4b20      	ldr	r3, [pc, #128]	; (8003dbc <I2SEx_RxISR_I2SExt+0x94>)
 8003d3c:	e001      	b.n	8003d42 <I2SEx_RxISR_I2SExt+0x1a>
 8003d3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d42:	68d8      	ldr	r0, [r3, #12]
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d48:	1c99      	adds	r1, r3, #2
 8003d4a:	687a      	ldr	r2, [r7, #4]
 8003d4c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003d4e:	b282      	uxth	r2, r0
 8003d50:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d56:	b29b      	uxth	r3, r3
 8003d58:	3b01      	subs	r3, #1
 8003d5a:	b29a      	uxth	r2, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003d64:	b29b      	uxth	r3, r3
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d121      	bne.n	8003dae <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4a12      	ldr	r2, [pc, #72]	; (8003db8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d101      	bne.n	8003d78 <I2SEx_RxISR_I2SExt+0x50>
 8003d74:	4b11      	ldr	r3, [pc, #68]	; (8003dbc <I2SEx_RxISR_I2SExt+0x94>)
 8003d76:	e001      	b.n	8003d7c <I2SEx_RxISR_I2SExt+0x54>
 8003d78:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d7c:	685a      	ldr	r2, [r3, #4]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	490d      	ldr	r1, [pc, #52]	; (8003db8 <I2SEx_RxISR_I2SExt+0x90>)
 8003d84:	428b      	cmp	r3, r1
 8003d86:	d101      	bne.n	8003d8c <I2SEx_RxISR_I2SExt+0x64>
 8003d88:	4b0c      	ldr	r3, [pc, #48]	; (8003dbc <I2SEx_RxISR_I2SExt+0x94>)
 8003d8a:	e001      	b.n	8003d90 <I2SEx_RxISR_I2SExt+0x68>
 8003d8c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d90:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003d94:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9a:	b29b      	uxth	r3, r3
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d106      	bne.n	8003dae <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2201      	movs	r2, #1
 8003da4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f7ff ff03 	bl	8003bb4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003dae:	bf00      	nop
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	40003800 	.word	0x40003800
 8003dbc:	40003400 	.word	0x40003400

08003dc0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e267      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d075      	beq.n	8003eca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003dde:	4b88      	ldr	r3, [pc, #544]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003de0:	689b      	ldr	r3, [r3, #8]
 8003de2:	f003 030c 	and.w	r3, r3, #12
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d00c      	beq.n	8003e04 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dea:	4b85      	ldr	r3, [pc, #532]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003df2:	2b08      	cmp	r3, #8
 8003df4:	d112      	bne.n	8003e1c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003df6:	4b82      	ldr	r3, [pc, #520]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003df8:	685b      	ldr	r3, [r3, #4]
 8003dfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e02:	d10b      	bne.n	8003e1c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e04:	4b7e      	ldr	r3, [pc, #504]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d05b      	beq.n	8003ec8 <HAL_RCC_OscConfig+0x108>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d157      	bne.n	8003ec8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	e242      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e24:	d106      	bne.n	8003e34 <HAL_RCC_OscConfig+0x74>
 8003e26:	4b76      	ldr	r3, [pc, #472]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a75      	ldr	r2, [pc, #468]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e01d      	b.n	8003e70 <HAL_RCC_OscConfig+0xb0>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e3c:	d10c      	bne.n	8003e58 <HAL_RCC_OscConfig+0x98>
 8003e3e:	4b70      	ldr	r3, [pc, #448]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a6f      	ldr	r2, [pc, #444]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e48:	6013      	str	r3, [r2, #0]
 8003e4a:	4b6d      	ldr	r3, [pc, #436]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	4a6c      	ldr	r2, [pc, #432]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e54:	6013      	str	r3, [r2, #0]
 8003e56:	e00b      	b.n	8003e70 <HAL_RCC_OscConfig+0xb0>
 8003e58:	4b69      	ldr	r3, [pc, #420]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a68      	ldr	r2, [pc, #416]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e62:	6013      	str	r3, [r2, #0]
 8003e64:	4b66      	ldr	r3, [pc, #408]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a65      	ldr	r2, [pc, #404]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e6e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	685b      	ldr	r3, [r3, #4]
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d013      	beq.n	8003ea0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e78:	f7fd f876 	bl	8000f68 <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e7e:	e008      	b.n	8003e92 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e80:	f7fd f872 	bl	8000f68 <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	2b64      	cmp	r3, #100	; 0x64
 8003e8c:	d901      	bls.n	8003e92 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e8e:	2303      	movs	r3, #3
 8003e90:	e207      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e92:	4b5b      	ldr	r3, [pc, #364]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d0f0      	beq.n	8003e80 <HAL_RCC_OscConfig+0xc0>
 8003e9e:	e014      	b.n	8003eca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ea0:	f7fd f862 	bl	8000f68 <HAL_GetTick>
 8003ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ea6:	e008      	b.n	8003eba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ea8:	f7fd f85e 	bl	8000f68 <HAL_GetTick>
 8003eac:	4602      	mov	r2, r0
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	1ad3      	subs	r3, r2, r3
 8003eb2:	2b64      	cmp	r3, #100	; 0x64
 8003eb4:	d901      	bls.n	8003eba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003eb6:	2303      	movs	r3, #3
 8003eb8:	e1f3      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003eba:	4b51      	ldr	r3, [pc, #324]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d1f0      	bne.n	8003ea8 <HAL_RCC_OscConfig+0xe8>
 8003ec6:	e000      	b.n	8003eca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ec8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d063      	beq.n	8003f9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003ed6:	4b4a      	ldr	r3, [pc, #296]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00b      	beq.n	8003efa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee2:	4b47      	ldr	r3, [pc, #284]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003eea:	2b08      	cmp	r3, #8
 8003eec:	d11c      	bne.n	8003f28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003eee:	4b44      	ldr	r3, [pc, #272]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003ef0:	685b      	ldr	r3, [r3, #4]
 8003ef2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d116      	bne.n	8003f28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003efa:	4b41      	ldr	r3, [pc, #260]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d005      	beq.n	8003f12 <HAL_RCC_OscConfig+0x152>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	68db      	ldr	r3, [r3, #12]
 8003f0a:	2b01      	cmp	r3, #1
 8003f0c:	d001      	beq.n	8003f12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e1c7      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f12:	4b3b      	ldr	r3, [pc, #236]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	691b      	ldr	r3, [r3, #16]
 8003f1e:	00db      	lsls	r3, r3, #3
 8003f20:	4937      	ldr	r1, [pc, #220]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f22:	4313      	orrs	r3, r2
 8003f24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f26:	e03a      	b.n	8003f9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	68db      	ldr	r3, [r3, #12]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d020      	beq.n	8003f72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f30:	4b34      	ldr	r3, [pc, #208]	; (8004004 <HAL_RCC_OscConfig+0x244>)
 8003f32:	2201      	movs	r2, #1
 8003f34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f36:	f7fd f817 	bl	8000f68 <HAL_GetTick>
 8003f3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f3c:	e008      	b.n	8003f50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f3e:	f7fd f813 	bl	8000f68 <HAL_GetTick>
 8003f42:	4602      	mov	r2, r0
 8003f44:	693b      	ldr	r3, [r7, #16]
 8003f46:	1ad3      	subs	r3, r2, r3
 8003f48:	2b02      	cmp	r3, #2
 8003f4a:	d901      	bls.n	8003f50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003f4c:	2303      	movs	r3, #3
 8003f4e:	e1a8      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f50:	4b2b      	ldr	r3, [pc, #172]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0302 	and.w	r3, r3, #2
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d0f0      	beq.n	8003f3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f5c:	4b28      	ldr	r3, [pc, #160]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	691b      	ldr	r3, [r3, #16]
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	4925      	ldr	r1, [pc, #148]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	4313      	orrs	r3, r2
 8003f6e:	600b      	str	r3, [r1, #0]
 8003f70:	e015      	b.n	8003f9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f72:	4b24      	ldr	r3, [pc, #144]	; (8004004 <HAL_RCC_OscConfig+0x244>)
 8003f74:	2200      	movs	r2, #0
 8003f76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f78:	f7fc fff6 	bl	8000f68 <HAL_GetTick>
 8003f7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f7e:	e008      	b.n	8003f92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f80:	f7fc fff2 	bl	8000f68 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	2b02      	cmp	r3, #2
 8003f8c:	d901      	bls.n	8003f92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003f8e:	2303      	movs	r3, #3
 8003f90:	e187      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f92:	4b1b      	ldr	r3, [pc, #108]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1f0      	bne.n	8003f80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0308 	and.w	r3, r3, #8
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d036      	beq.n	8004018 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d016      	beq.n	8003fe0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fb2:	4b15      	ldr	r3, [pc, #84]	; (8004008 <HAL_RCC_OscConfig+0x248>)
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fb8:	f7fc ffd6 	bl	8000f68 <HAL_GetTick>
 8003fbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fbe:	e008      	b.n	8003fd2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fc0:	f7fc ffd2 	bl	8000f68 <HAL_GetTick>
 8003fc4:	4602      	mov	r2, r0
 8003fc6:	693b      	ldr	r3, [r7, #16]
 8003fc8:	1ad3      	subs	r3, r2, r3
 8003fca:	2b02      	cmp	r3, #2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e167      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fd2:	4b0b      	ldr	r3, [pc, #44]	; (8004000 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fd6:	f003 0302 	and.w	r3, r3, #2
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d0f0      	beq.n	8003fc0 <HAL_RCC_OscConfig+0x200>
 8003fde:	e01b      	b.n	8004018 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fe0:	4b09      	ldr	r3, [pc, #36]	; (8004008 <HAL_RCC_OscConfig+0x248>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fe6:	f7fc ffbf 	bl	8000f68 <HAL_GetTick>
 8003fea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fec:	e00e      	b.n	800400c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fee:	f7fc ffbb 	bl	8000f68 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	693b      	ldr	r3, [r7, #16]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d907      	bls.n	800400c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003ffc:	2303      	movs	r3, #3
 8003ffe:	e150      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
 8004000:	40023800 	.word	0x40023800
 8004004:	42470000 	.word	0x42470000
 8004008:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800400c:	4b88      	ldr	r3, [pc, #544]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800400e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004010:	f003 0302 	and.w	r3, r3, #2
 8004014:	2b00      	cmp	r3, #0
 8004016:	d1ea      	bne.n	8003fee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	f000 8097 	beq.w	8004154 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004026:	2300      	movs	r3, #0
 8004028:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800402a:	4b81      	ldr	r3, [pc, #516]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800402c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800402e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d10f      	bne.n	8004056 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004036:	2300      	movs	r3, #0
 8004038:	60bb      	str	r3, [r7, #8]
 800403a:	4b7d      	ldr	r3, [pc, #500]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	4a7c      	ldr	r2, [pc, #496]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004040:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004044:	6413      	str	r3, [r2, #64]	; 0x40
 8004046:	4b7a      	ldr	r3, [pc, #488]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800404e:	60bb      	str	r3, [r7, #8]
 8004050:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004052:	2301      	movs	r3, #1
 8004054:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004056:	4b77      	ldr	r3, [pc, #476]	; (8004234 <HAL_RCC_OscConfig+0x474>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d118      	bne.n	8004094 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004062:	4b74      	ldr	r3, [pc, #464]	; (8004234 <HAL_RCC_OscConfig+0x474>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a73      	ldr	r2, [pc, #460]	; (8004234 <HAL_RCC_OscConfig+0x474>)
 8004068:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800406c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800406e:	f7fc ff7b 	bl	8000f68 <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004076:	f7fc ff77 	bl	8000f68 <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e10c      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004088:	4b6a      	ldr	r3, [pc, #424]	; (8004234 <HAL_RCC_OscConfig+0x474>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d106      	bne.n	80040aa <HAL_RCC_OscConfig+0x2ea>
 800409c:	4b64      	ldr	r3, [pc, #400]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800409e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a0:	4a63      	ldr	r2, [pc, #396]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040a2:	f043 0301 	orr.w	r3, r3, #1
 80040a6:	6713      	str	r3, [r2, #112]	; 0x70
 80040a8:	e01c      	b.n	80040e4 <HAL_RCC_OscConfig+0x324>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	2b05      	cmp	r3, #5
 80040b0:	d10c      	bne.n	80040cc <HAL_RCC_OscConfig+0x30c>
 80040b2:	4b5f      	ldr	r3, [pc, #380]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	4a5e      	ldr	r2, [pc, #376]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040b8:	f043 0304 	orr.w	r3, r3, #4
 80040bc:	6713      	str	r3, [r2, #112]	; 0x70
 80040be:	4b5c      	ldr	r3, [pc, #368]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c2:	4a5b      	ldr	r2, [pc, #364]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040c4:	f043 0301 	orr.w	r3, r3, #1
 80040c8:	6713      	str	r3, [r2, #112]	; 0x70
 80040ca:	e00b      	b.n	80040e4 <HAL_RCC_OscConfig+0x324>
 80040cc:	4b58      	ldr	r3, [pc, #352]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	4a57      	ldr	r2, [pc, #348]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040d2:	f023 0301 	bic.w	r3, r3, #1
 80040d6:	6713      	str	r3, [r2, #112]	; 0x70
 80040d8:	4b55      	ldr	r3, [pc, #340]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040dc:	4a54      	ldr	r2, [pc, #336]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80040de:	f023 0304 	bic.w	r3, r3, #4
 80040e2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	689b      	ldr	r3, [r3, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d015      	beq.n	8004118 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fc ff3c 	bl	8000f68 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040f2:	e00a      	b.n	800410a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040f4:	f7fc ff38 	bl	8000f68 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8004102:	4293      	cmp	r3, r2
 8004104:	d901      	bls.n	800410a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004106:	2303      	movs	r3, #3
 8004108:	e0cb      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800410a:	4b49      	ldr	r3, [pc, #292]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800410c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800410e:	f003 0302 	and.w	r3, r3, #2
 8004112:	2b00      	cmp	r3, #0
 8004114:	d0ee      	beq.n	80040f4 <HAL_RCC_OscConfig+0x334>
 8004116:	e014      	b.n	8004142 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004118:	f7fc ff26 	bl	8000f68 <HAL_GetTick>
 800411c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800411e:	e00a      	b.n	8004136 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004120:	f7fc ff22 	bl	8000f68 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	; 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e0b5      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004136:	4b3e      	ldr	r3, [pc, #248]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800413a:	f003 0302 	and.w	r3, r3, #2
 800413e:	2b00      	cmp	r3, #0
 8004140:	d1ee      	bne.n	8004120 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004142:	7dfb      	ldrb	r3, [r7, #23]
 8004144:	2b01      	cmp	r3, #1
 8004146:	d105      	bne.n	8004154 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004148:	4b39      	ldr	r3, [pc, #228]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800414a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800414c:	4a38      	ldr	r2, [pc, #224]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 800414e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004152:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	699b      	ldr	r3, [r3, #24]
 8004158:	2b00      	cmp	r3, #0
 800415a:	f000 80a1 	beq.w	80042a0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800415e:	4b34      	ldr	r3, [pc, #208]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004160:	689b      	ldr	r3, [r3, #8]
 8004162:	f003 030c 	and.w	r3, r3, #12
 8004166:	2b08      	cmp	r3, #8
 8004168:	d05c      	beq.n	8004224 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d141      	bne.n	80041f6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004172:	4b31      	ldr	r3, [pc, #196]	; (8004238 <HAL_RCC_OscConfig+0x478>)
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004178:	f7fc fef6 	bl	8000f68 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004180:	f7fc fef2 	bl	8000f68 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e087      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004192:	4b27      	ldr	r3, [pc, #156]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1f0      	bne.n	8004180 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	69da      	ldr	r2, [r3, #28]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a1b      	ldr	r3, [r3, #32]
 80041a6:	431a      	orrs	r2, r3
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ac:	019b      	lsls	r3, r3, #6
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041b4:	085b      	lsrs	r3, r3, #1
 80041b6:	3b01      	subs	r3, #1
 80041b8:	041b      	lsls	r3, r3, #16
 80041ba:	431a      	orrs	r2, r3
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041c0:	061b      	lsls	r3, r3, #24
 80041c2:	491b      	ldr	r1, [pc, #108]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80041c4:	4313      	orrs	r3, r2
 80041c6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c8:	4b1b      	ldr	r3, [pc, #108]	; (8004238 <HAL_RCC_OscConfig+0x478>)
 80041ca:	2201      	movs	r2, #1
 80041cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041ce:	f7fc fecb 	bl	8000f68 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d6:	f7fc fec7 	bl	8000f68 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e05c      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e8:	4b11      	ldr	r3, [pc, #68]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d0f0      	beq.n	80041d6 <HAL_RCC_OscConfig+0x416>
 80041f4:	e054      	b.n	80042a0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f6:	4b10      	ldr	r3, [pc, #64]	; (8004238 <HAL_RCC_OscConfig+0x478>)
 80041f8:	2200      	movs	r2, #0
 80041fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041fc:	f7fc feb4 	bl	8000f68 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004204:	f7fc feb0 	bl	8000f68 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e045      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004216:	4b06      	ldr	r3, [pc, #24]	; (8004230 <HAL_RCC_OscConfig+0x470>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1f0      	bne.n	8004204 <HAL_RCC_OscConfig+0x444>
 8004222:	e03d      	b.n	80042a0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	2b01      	cmp	r3, #1
 800422a:	d107      	bne.n	800423c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800422c:	2301      	movs	r3, #1
 800422e:	e038      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
 8004230:	40023800 	.word	0x40023800
 8004234:	40007000 	.word	0x40007000
 8004238:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800423c:	4b1b      	ldr	r3, [pc, #108]	; (80042ac <HAL_RCC_OscConfig+0x4ec>)
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	699b      	ldr	r3, [r3, #24]
 8004246:	2b01      	cmp	r3, #1
 8004248:	d028      	beq.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004254:	429a      	cmp	r2, r3
 8004256:	d121      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004262:	429a      	cmp	r2, r3
 8004264:	d11a      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004266:	68fa      	ldr	r2, [r7, #12]
 8004268:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800426c:	4013      	ands	r3, r2
 800426e:	687a      	ldr	r2, [r7, #4]
 8004270:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004272:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004274:	4293      	cmp	r3, r2
 8004276:	d111      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004282:	085b      	lsrs	r3, r3, #1
 8004284:	3b01      	subs	r3, #1
 8004286:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004288:	429a      	cmp	r2, r3
 800428a:	d107      	bne.n	800429c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004296:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004298:	429a      	cmp	r2, r3
 800429a:	d001      	beq.n	80042a0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	e000      	b.n	80042a2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3718      	adds	r7, #24
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
 80042aa:	bf00      	nop
 80042ac:	40023800 	.word	0x40023800

080042b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
 80042b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d101      	bne.n	80042c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e0cc      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80042c4:	4b68      	ldr	r3, [pc, #416]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	683a      	ldr	r2, [r7, #0]
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d90c      	bls.n	80042ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042d2:	4b65      	ldr	r3, [pc, #404]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042d4:	683a      	ldr	r2, [r7, #0]
 80042d6:	b2d2      	uxtb	r2, r2
 80042d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042da:	4b63      	ldr	r3, [pc, #396]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0307 	and.w	r3, r3, #7
 80042e2:	683a      	ldr	r2, [r7, #0]
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d001      	beq.n	80042ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e0b8      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	f003 0302 	and.w	r3, r3, #2
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d020      	beq.n	800433a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f003 0304 	and.w	r3, r3, #4
 8004300:	2b00      	cmp	r3, #0
 8004302:	d005      	beq.n	8004310 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004304:	4b59      	ldr	r3, [pc, #356]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004306:	689b      	ldr	r3, [r3, #8]
 8004308:	4a58      	ldr	r2, [pc, #352]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800430e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f003 0308 	and.w	r3, r3, #8
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800431c:	4b53      	ldr	r3, [pc, #332]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	4a52      	ldr	r2, [pc, #328]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004322:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004326:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004328:	4b50      	ldr	r3, [pc, #320]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800432a:	689b      	ldr	r3, [r3, #8]
 800432c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	689b      	ldr	r3, [r3, #8]
 8004334:	494d      	ldr	r1, [pc, #308]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d044      	beq.n	80043d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	2b01      	cmp	r3, #1
 800434c:	d107      	bne.n	800435e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800434e:	4b47      	ldr	r3, [pc, #284]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004356:	2b00      	cmp	r3, #0
 8004358:	d119      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e07f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	2b02      	cmp	r3, #2
 8004364:	d003      	beq.n	800436e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800436a:	2b03      	cmp	r3, #3
 800436c:	d107      	bne.n	800437e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800436e:	4b3f      	ldr	r3, [pc, #252]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800437a:	2301      	movs	r3, #1
 800437c:	e06f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437e:	4b3b      	ldr	r3, [pc, #236]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f003 0302 	and.w	r3, r3, #2
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e067      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800438e:	4b37      	ldr	r3, [pc, #220]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	f023 0203 	bic.w	r2, r3, #3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	685b      	ldr	r3, [r3, #4]
 800439a:	4934      	ldr	r1, [pc, #208]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800439c:	4313      	orrs	r3, r2
 800439e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80043a0:	f7fc fde2 	bl	8000f68 <HAL_GetTick>
 80043a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043a6:	e00a      	b.n	80043be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043a8:	f7fc fdde 	bl	8000f68 <HAL_GetTick>
 80043ac:	4602      	mov	r2, r0
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e04f      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043be:	4b2b      	ldr	r3, [pc, #172]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 80043c0:	689b      	ldr	r3, [r3, #8]
 80043c2:	f003 020c 	and.w	r2, r3, #12
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	685b      	ldr	r3, [r3, #4]
 80043ca:	009b      	lsls	r3, r3, #2
 80043cc:	429a      	cmp	r2, r3
 80043ce:	d1eb      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80043d0:	4b25      	ldr	r3, [pc, #148]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f003 0307 	and.w	r3, r3, #7
 80043d8:	683a      	ldr	r2, [r7, #0]
 80043da:	429a      	cmp	r2, r3
 80043dc:	d20c      	bcs.n	80043f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043de:	4b22      	ldr	r3, [pc, #136]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80043e6:	4b20      	ldr	r3, [pc, #128]	; (8004468 <HAL_RCC_ClockConfig+0x1b8>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 0307 	and.w	r3, r3, #7
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d001      	beq.n	80043f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e032      	b.n	800445e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 0304 	and.w	r3, r3, #4
 8004400:	2b00      	cmp	r3, #0
 8004402:	d008      	beq.n	8004416 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004404:	4b19      	ldr	r3, [pc, #100]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	68db      	ldr	r3, [r3, #12]
 8004410:	4916      	ldr	r1, [pc, #88]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004412:	4313      	orrs	r3, r2
 8004414:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	f003 0308 	and.w	r3, r3, #8
 800441e:	2b00      	cmp	r3, #0
 8004420:	d009      	beq.n	8004436 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004422:	4b12      	ldr	r3, [pc, #72]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	691b      	ldr	r3, [r3, #16]
 800442e:	00db      	lsls	r3, r3, #3
 8004430:	490e      	ldr	r1, [pc, #56]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 8004432:	4313      	orrs	r3, r2
 8004434:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004436:	f000 f821 	bl	800447c <HAL_RCC_GetSysClockFreq>
 800443a:	4602      	mov	r2, r0
 800443c:	4b0b      	ldr	r3, [pc, #44]	; (800446c <HAL_RCC_ClockConfig+0x1bc>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	091b      	lsrs	r3, r3, #4
 8004442:	f003 030f 	and.w	r3, r3, #15
 8004446:	490a      	ldr	r1, [pc, #40]	; (8004470 <HAL_RCC_ClockConfig+0x1c0>)
 8004448:	5ccb      	ldrb	r3, [r1, r3]
 800444a:	fa22 f303 	lsr.w	r3, r2, r3
 800444e:	4a09      	ldr	r2, [pc, #36]	; (8004474 <HAL_RCC_ClockConfig+0x1c4>)
 8004450:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004452:	4b09      	ldr	r3, [pc, #36]	; (8004478 <HAL_RCC_ClockConfig+0x1c8>)
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	4618      	mov	r0, r3
 8004458:	f7fc fd42 	bl	8000ee0 <HAL_InitTick>

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3710      	adds	r7, #16
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}
 8004466:	bf00      	nop
 8004468:	40023c00 	.word	0x40023c00
 800446c:	40023800 	.word	0x40023800
 8004470:	08007288 	.word	0x08007288
 8004474:	20000000 	.word	0x20000000
 8004478:	20000004 	.word	0x20000004

0800447c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800447c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004480:	b094      	sub	sp, #80	; 0x50
 8004482:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004484:	2300      	movs	r3, #0
 8004486:	647b      	str	r3, [r7, #68]	; 0x44
 8004488:	2300      	movs	r3, #0
 800448a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800448c:	2300      	movs	r3, #0
 800448e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004490:	2300      	movs	r3, #0
 8004492:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004494:	4b79      	ldr	r3, [pc, #484]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f003 030c 	and.w	r3, r3, #12
 800449c:	2b08      	cmp	r3, #8
 800449e:	d00d      	beq.n	80044bc <HAL_RCC_GetSysClockFreq+0x40>
 80044a0:	2b08      	cmp	r3, #8
 80044a2:	f200 80e1 	bhi.w	8004668 <HAL_RCC_GetSysClockFreq+0x1ec>
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_RCC_GetSysClockFreq+0x34>
 80044aa:	2b04      	cmp	r3, #4
 80044ac:	d003      	beq.n	80044b6 <HAL_RCC_GetSysClockFreq+0x3a>
 80044ae:	e0db      	b.n	8004668 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80044b0:	4b73      	ldr	r3, [pc, #460]	; (8004680 <HAL_RCC_GetSysClockFreq+0x204>)
 80044b2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80044b4:	e0db      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80044b6:	4b73      	ldr	r3, [pc, #460]	; (8004684 <HAL_RCC_GetSysClockFreq+0x208>)
 80044b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044ba:	e0d8      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80044bc:	4b6f      	ldr	r3, [pc, #444]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80044c4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80044c6:	4b6d      	ldr	r3, [pc, #436]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d063      	beq.n	800459a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80044d2:	4b6a      	ldr	r3, [pc, #424]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	099b      	lsrs	r3, r3, #6
 80044d8:	2200      	movs	r2, #0
 80044da:	63bb      	str	r3, [r7, #56]	; 0x38
 80044dc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80044de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80044e4:	633b      	str	r3, [r7, #48]	; 0x30
 80044e6:	2300      	movs	r3, #0
 80044e8:	637b      	str	r3, [r7, #52]	; 0x34
 80044ea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80044ee:	4622      	mov	r2, r4
 80044f0:	462b      	mov	r3, r5
 80044f2:	f04f 0000 	mov.w	r0, #0
 80044f6:	f04f 0100 	mov.w	r1, #0
 80044fa:	0159      	lsls	r1, r3, #5
 80044fc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004500:	0150      	lsls	r0, r2, #5
 8004502:	4602      	mov	r2, r0
 8004504:	460b      	mov	r3, r1
 8004506:	4621      	mov	r1, r4
 8004508:	1a51      	subs	r1, r2, r1
 800450a:	6139      	str	r1, [r7, #16]
 800450c:	4629      	mov	r1, r5
 800450e:	eb63 0301 	sbc.w	r3, r3, r1
 8004512:	617b      	str	r3, [r7, #20]
 8004514:	f04f 0200 	mov.w	r2, #0
 8004518:	f04f 0300 	mov.w	r3, #0
 800451c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004520:	4659      	mov	r1, fp
 8004522:	018b      	lsls	r3, r1, #6
 8004524:	4651      	mov	r1, sl
 8004526:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800452a:	4651      	mov	r1, sl
 800452c:	018a      	lsls	r2, r1, #6
 800452e:	4651      	mov	r1, sl
 8004530:	ebb2 0801 	subs.w	r8, r2, r1
 8004534:	4659      	mov	r1, fp
 8004536:	eb63 0901 	sbc.w	r9, r3, r1
 800453a:	f04f 0200 	mov.w	r2, #0
 800453e:	f04f 0300 	mov.w	r3, #0
 8004542:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004546:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800454a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800454e:	4690      	mov	r8, r2
 8004550:	4699      	mov	r9, r3
 8004552:	4623      	mov	r3, r4
 8004554:	eb18 0303 	adds.w	r3, r8, r3
 8004558:	60bb      	str	r3, [r7, #8]
 800455a:	462b      	mov	r3, r5
 800455c:	eb49 0303 	adc.w	r3, r9, r3
 8004560:	60fb      	str	r3, [r7, #12]
 8004562:	f04f 0200 	mov.w	r2, #0
 8004566:	f04f 0300 	mov.w	r3, #0
 800456a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800456e:	4629      	mov	r1, r5
 8004570:	024b      	lsls	r3, r1, #9
 8004572:	4621      	mov	r1, r4
 8004574:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004578:	4621      	mov	r1, r4
 800457a:	024a      	lsls	r2, r1, #9
 800457c:	4610      	mov	r0, r2
 800457e:	4619      	mov	r1, r3
 8004580:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004582:	2200      	movs	r2, #0
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
 8004586:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004588:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800458c:	f7fb fe1c 	bl	80001c8 <__aeabi_uldivmod>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	4613      	mov	r3, r2
 8004596:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004598:	e058      	b.n	800464c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800459a:	4b38      	ldr	r3, [pc, #224]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	099b      	lsrs	r3, r3, #6
 80045a0:	2200      	movs	r2, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	4611      	mov	r1, r2
 80045a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80045aa:	623b      	str	r3, [r7, #32]
 80045ac:	2300      	movs	r3, #0
 80045ae:	627b      	str	r3, [r7, #36]	; 0x24
 80045b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80045b4:	4642      	mov	r2, r8
 80045b6:	464b      	mov	r3, r9
 80045b8:	f04f 0000 	mov.w	r0, #0
 80045bc:	f04f 0100 	mov.w	r1, #0
 80045c0:	0159      	lsls	r1, r3, #5
 80045c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80045c6:	0150      	lsls	r0, r2, #5
 80045c8:	4602      	mov	r2, r0
 80045ca:	460b      	mov	r3, r1
 80045cc:	4641      	mov	r1, r8
 80045ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80045d2:	4649      	mov	r1, r9
 80045d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	f04f 0300 	mov.w	r3, #0
 80045e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80045e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80045e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80045ec:	ebb2 040a 	subs.w	r4, r2, sl
 80045f0:	eb63 050b 	sbc.w	r5, r3, fp
 80045f4:	f04f 0200 	mov.w	r2, #0
 80045f8:	f04f 0300 	mov.w	r3, #0
 80045fc:	00eb      	lsls	r3, r5, #3
 80045fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004602:	00e2      	lsls	r2, r4, #3
 8004604:	4614      	mov	r4, r2
 8004606:	461d      	mov	r5, r3
 8004608:	4643      	mov	r3, r8
 800460a:	18e3      	adds	r3, r4, r3
 800460c:	603b      	str	r3, [r7, #0]
 800460e:	464b      	mov	r3, r9
 8004610:	eb45 0303 	adc.w	r3, r5, r3
 8004614:	607b      	str	r3, [r7, #4]
 8004616:	f04f 0200 	mov.w	r2, #0
 800461a:	f04f 0300 	mov.w	r3, #0
 800461e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004622:	4629      	mov	r1, r5
 8004624:	028b      	lsls	r3, r1, #10
 8004626:	4621      	mov	r1, r4
 8004628:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800462c:	4621      	mov	r1, r4
 800462e:	028a      	lsls	r2, r1, #10
 8004630:	4610      	mov	r0, r2
 8004632:	4619      	mov	r1, r3
 8004634:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004636:	2200      	movs	r2, #0
 8004638:	61bb      	str	r3, [r7, #24]
 800463a:	61fa      	str	r2, [r7, #28]
 800463c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004640:	f7fb fdc2 	bl	80001c8 <__aeabi_uldivmod>
 8004644:	4602      	mov	r2, r0
 8004646:	460b      	mov	r3, r1
 8004648:	4613      	mov	r3, r2
 800464a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800464c:	4b0b      	ldr	r3, [pc, #44]	; (800467c <HAL_RCC_GetSysClockFreq+0x200>)
 800464e:	685b      	ldr	r3, [r3, #4]
 8004650:	0c1b      	lsrs	r3, r3, #16
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	3301      	adds	r3, #1
 8004658:	005b      	lsls	r3, r3, #1
 800465a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800465c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800465e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004660:	fbb2 f3f3 	udiv	r3, r2, r3
 8004664:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004666:	e002      	b.n	800466e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004668:	4b05      	ldr	r3, [pc, #20]	; (8004680 <HAL_RCC_GetSysClockFreq+0x204>)
 800466a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800466c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800466e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004670:	4618      	mov	r0, r3
 8004672:	3750      	adds	r7, #80	; 0x50
 8004674:	46bd      	mov	sp, r7
 8004676:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800467a:	bf00      	nop
 800467c:	40023800 	.word	0x40023800
 8004680:	00f42400 	.word	0x00f42400
 8004684:	007a1200 	.word	0x007a1200

08004688 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004688:	b480      	push	{r7}
 800468a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800468c:	4b03      	ldr	r3, [pc, #12]	; (800469c <HAL_RCC_GetHCLKFreq+0x14>)
 800468e:	681b      	ldr	r3, [r3, #0]
}
 8004690:	4618      	mov	r0, r3
 8004692:	46bd      	mov	sp, r7
 8004694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004698:	4770      	bx	lr
 800469a:	bf00      	nop
 800469c:	20000000 	.word	0x20000000

080046a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80046a4:	f7ff fff0 	bl	8004688 <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	0a9b      	lsrs	r3, r3, #10
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4903      	ldr	r1, [pc, #12]	; (80046c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40023800 	.word	0x40023800
 80046c4:	08007298 	.word	0x08007298

080046c8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b086      	sub	sp, #24
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80046d0:	2300      	movs	r3, #0
 80046d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80046d4:	2300      	movs	r3, #0
 80046d6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d105      	bne.n	80046f0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d035      	beq.n	800475c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80046f0:	4b62      	ldr	r3, [pc, #392]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80046f2:	2200      	movs	r2, #0
 80046f4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80046f6:	f7fc fc37 	bl	8000f68 <HAL_GetTick>
 80046fa:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80046fc:	e008      	b.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80046fe:	f7fc fc33 	bl	8000f68 <HAL_GetTick>
 8004702:	4602      	mov	r2, r0
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	2b02      	cmp	r3, #2
 800470a:	d901      	bls.n	8004710 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800470c:	2303      	movs	r3, #3
 800470e:	e0b0      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004710:	4b5b      	ldr	r3, [pc, #364]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004718:	2b00      	cmp	r3, #0
 800471a:	d1f0      	bne.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	019a      	lsls	r2, r3, #6
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	689b      	ldr	r3, [r3, #8]
 8004726:	071b      	lsls	r3, r3, #28
 8004728:	4955      	ldr	r1, [pc, #340]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800472a:	4313      	orrs	r3, r2
 800472c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004730:	4b52      	ldr	r3, [pc, #328]	; (800487c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004732:	2201      	movs	r2, #1
 8004734:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004736:	f7fc fc17 	bl	8000f68 <HAL_GetTick>
 800473a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800473c:	e008      	b.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800473e:	f7fc fc13 	bl	8000f68 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	2b02      	cmp	r3, #2
 800474a:	d901      	bls.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800474c:	2303      	movs	r3, #3
 800474e:	e090      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004750:	4b4b      	ldr	r3, [pc, #300]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004758:	2b00      	cmp	r3, #0
 800475a:	d0f0      	beq.n	800473e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f003 0302 	and.w	r3, r3, #2
 8004764:	2b00      	cmp	r3, #0
 8004766:	f000 8083 	beq.w	8004870 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800476a:	2300      	movs	r3, #0
 800476c:	60fb      	str	r3, [r7, #12]
 800476e:	4b44      	ldr	r3, [pc, #272]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004772:	4a43      	ldr	r2, [pc, #268]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004774:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004778:	6413      	str	r3, [r2, #64]	; 0x40
 800477a:	4b41      	ldr	r3, [pc, #260]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004782:	60fb      	str	r3, [r7, #12]
 8004784:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004786:	4b3f      	ldr	r3, [pc, #252]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a3e      	ldr	r2, [pc, #248]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800478c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004790:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004792:	f7fc fbe9 	bl	8000f68 <HAL_GetTick>
 8004796:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004798:	e008      	b.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800479a:	f7fc fbe5 	bl	8000f68 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	2b02      	cmp	r3, #2
 80047a6:	d901      	bls.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e062      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80047ac:	4b35      	ldr	r3, [pc, #212]	; (8004884 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d0f0      	beq.n	800479a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80047b8:	4b31      	ldr	r3, [pc, #196]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047c0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d02f      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	68db      	ldr	r3, [r3, #12]
 80047cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80047d0:	693a      	ldr	r2, [r7, #16]
 80047d2:	429a      	cmp	r2, r3
 80047d4:	d028      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80047d6:	4b2a      	ldr	r3, [pc, #168]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047de:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80047e0:	4b29      	ldr	r3, [pc, #164]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047e2:	2201      	movs	r2, #1
 80047e4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80047e6:	4b28      	ldr	r3, [pc, #160]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80047e8:	2200      	movs	r2, #0
 80047ea:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80047ec:	4a24      	ldr	r2, [pc, #144]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80047f2:	4b23      	ldr	r3, [pc, #140]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80047f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d114      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80047fe:	f7fc fbb3 	bl	8000f68 <HAL_GetTick>
 8004802:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004804:	e00a      	b.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004806:	f7fc fbaf 	bl	8000f68 <HAL_GetTick>
 800480a:	4602      	mov	r2, r0
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	1ad3      	subs	r3, r2, r3
 8004810:	f241 3288 	movw	r2, #5000	; 0x1388
 8004814:	4293      	cmp	r3, r2
 8004816:	d901      	bls.n	800481c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004818:	2303      	movs	r3, #3
 800481a:	e02a      	b.n	8004872 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800481c:	4b18      	ldr	r3, [pc, #96]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800481e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004820:	f003 0302 	and.w	r3, r3, #2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d0ee      	beq.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004830:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004834:	d10d      	bne.n	8004852 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004836:	4b12      	ldr	r3, [pc, #72]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004838:	689b      	ldr	r3, [r3, #8]
 800483a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	68db      	ldr	r3, [r3, #12]
 8004842:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004846:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800484a:	490d      	ldr	r1, [pc, #52]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800484c:	4313      	orrs	r3, r2
 800484e:	608b      	str	r3, [r1, #8]
 8004850:	e005      	b.n	800485e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004852:	4b0b      	ldr	r3, [pc, #44]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004854:	689b      	ldr	r3, [r3, #8]
 8004856:	4a0a      	ldr	r2, [pc, #40]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004858:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800485c:	6093      	str	r3, [r2, #8]
 800485e:	4b08      	ldr	r3, [pc, #32]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004860:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	68db      	ldr	r3, [r3, #12]
 8004866:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800486a:	4905      	ldr	r1, [pc, #20]	; (8004880 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800486c:	4313      	orrs	r3, r2
 800486e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004870:	2300      	movs	r3, #0
}
 8004872:	4618      	mov	r0, r3
 8004874:	3718      	adds	r7, #24
 8004876:	46bd      	mov	sp, r7
 8004878:	bd80      	pop	{r7, pc}
 800487a:	bf00      	nop
 800487c:	42470068 	.word	0x42470068
 8004880:	40023800 	.word	0x40023800
 8004884:	40007000 	.word	0x40007000
 8004888:	42470e40 	.word	0x42470e40

0800488c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800488c:	b480      	push	{r7}
 800488e:	b087      	sub	sp, #28
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004894:	2300      	movs	r3, #0
 8004896:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004898:	2300      	movs	r3, #0
 800489a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800489c:	2300      	movs	r3, #0
 800489e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80048a0:	2300      	movs	r3, #0
 80048a2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	d13e      	bne.n	8004928 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80048aa:	4b23      	ldr	r3, [pc, #140]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80048b2:	60fb      	str	r3, [r7, #12]
 80048b4:	68fb      	ldr	r3, [r7, #12]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d005      	beq.n	80048c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d12f      	bne.n	8004920 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80048c0:	4b1e      	ldr	r3, [pc, #120]	; (800493c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80048c2:	617b      	str	r3, [r7, #20]
          break;
 80048c4:	e02f      	b.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80048c6:	4b1c      	ldr	r3, [pc, #112]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048c8:	685b      	ldr	r3, [r3, #4]
 80048ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ce:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048d2:	d108      	bne.n	80048e6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048d4:	4b18      	ldr	r3, [pc, #96]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048dc:	4a18      	ldr	r2, [pc, #96]	; (8004940 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80048de:	fbb2 f3f3 	udiv	r3, r2, r3
 80048e2:	613b      	str	r3, [r7, #16]
 80048e4:	e007      	b.n	80048f6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80048e6:	4b14      	ldr	r3, [pc, #80]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ee:	4a15      	ldr	r2, [pc, #84]	; (8004944 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80048f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80048f4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80048f6:	4b10      	ldr	r3, [pc, #64]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80048f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80048fc:	099b      	lsrs	r3, r3, #6
 80048fe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004902:	693b      	ldr	r3, [r7, #16]
 8004904:	fb02 f303 	mul.w	r3, r2, r3
 8004908:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800490a:	4b0b      	ldr	r3, [pc, #44]	; (8004938 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800490c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004910:	0f1b      	lsrs	r3, r3, #28
 8004912:	f003 0307 	and.w	r3, r3, #7
 8004916:	68ba      	ldr	r2, [r7, #8]
 8004918:	fbb2 f3f3 	udiv	r3, r2, r3
 800491c:	617b      	str	r3, [r7, #20]
          break;
 800491e:	e002      	b.n	8004926 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
          break;
 8004924:	bf00      	nop
        }
      }
      break;
 8004926:	bf00      	nop
    }
  }
  return frequency;
 8004928:	697b      	ldr	r3, [r7, #20]
}
 800492a:	4618      	mov	r0, r3
 800492c:	371c      	adds	r7, #28
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr
 8004936:	bf00      	nop
 8004938:	40023800 	.word	0x40023800
 800493c:	00bb8000 	.word	0x00bb8000
 8004940:	007a1200 	.word	0x007a1200
 8004944:	00f42400 	.word	0x00f42400

08004948 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004948:	b580      	push	{r7, lr}
 800494a:	b082      	sub	sp, #8
 800494c:	af00      	add	r7, sp, #0
 800494e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e07b      	b.n	8004a52 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	2b00      	cmp	r3, #0
 8004960:	d108      	bne.n	8004974 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800496a:	d009      	beq.n	8004980 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	2200      	movs	r2, #0
 8004970:	61da      	str	r2, [r3, #28]
 8004972:	e005      	b.n	8004980 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2200      	movs	r2, #0
 8004978:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800498c:	b2db      	uxtb	r3, r3
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800499a:	6878      	ldr	r0, [r7, #4]
 800499c:	f7fc f990 	bl	8000cc0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	689b      	ldr	r3, [r3, #8]
 80049c4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049c8:	431a      	orrs	r2, r3
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d2:	431a      	orrs	r2, r3
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	f003 0302 	and.w	r3, r3, #2
 80049dc:	431a      	orrs	r2, r3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	695b      	ldr	r3, [r3, #20]
 80049e2:	f003 0301 	and.w	r3, r3, #1
 80049e6:	431a      	orrs	r2, r3
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	699b      	ldr	r3, [r3, #24]
 80049ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049f0:	431a      	orrs	r2, r3
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	69db      	ldr	r3, [r3, #28]
 80049f6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049fa:	431a      	orrs	r2, r3
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a04:	ea42 0103 	orr.w	r1, r2, r3
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a0c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	430a      	orrs	r2, r1
 8004a16:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	0c1b      	lsrs	r3, r3, #16
 8004a1e:	f003 0104 	and.w	r1, r3, #4
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	f003 0210 	and.w	r2, r3, #16
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	69da      	ldr	r2, [r3, #28]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a40:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2200      	movs	r2, #0
 8004a46:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2201      	movs	r2, #1
 8004a4c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a50:	2300      	movs	r3, #0
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3708      	adds	r7, #8
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}

08004a5a <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004a5a:	b084      	sub	sp, #16
 8004a5c:	b580      	push	{r7, lr}
 8004a5e:	b084      	sub	sp, #16
 8004a60:	af00      	add	r7, sp, #0
 8004a62:	6078      	str	r0, [r7, #4]
 8004a64:	f107 001c 	add.w	r0, r7, #28
 8004a68:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d122      	bne.n	8004ab8 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	68db      	ldr	r3, [r3, #12]
 8004a82:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004a86:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004a9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d105      	bne.n	8004aac <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	f000 f9bf 	bl	8004e30 <USB_CoreReset>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	73fb      	strb	r3, [r7, #15]
 8004ab6:	e01a      	b.n	8004aee <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004ac4:	6878      	ldr	r0, [r7, #4]
 8004ac6:	f000 f9b3 	bl	8004e30 <USB_CoreReset>
 8004aca:	4603      	mov	r3, r0
 8004acc:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004ace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d106      	bne.n	8004ae2 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	639a      	str	r2, [r3, #56]	; 0x38
 8004ae0:	e005      	b.n	8004aee <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af0:	2b01      	cmp	r3, #1
 8004af2:	d10b      	bne.n	8004b0c <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	f043 0206 	orr.w	r2, r3, #6
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	f043 0220 	orr.w	r2, r3, #32
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b0e:	4618      	mov	r0, r3
 8004b10:	3710      	adds	r7, #16
 8004b12:	46bd      	mov	sp, r7
 8004b14:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b18:	b004      	add	sp, #16
 8004b1a:	4770      	bx	lr

08004b1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	689b      	ldr	r3, [r3, #8]
 8004b28:	f043 0201 	orr.w	r2, r3, #1
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	370c      	adds	r7, #12
 8004b36:	46bd      	mov	sp, r7
 8004b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3c:	4770      	bx	lr

08004b3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b3e:	b480      	push	{r7}
 8004b40:	b083      	sub	sp, #12
 8004b42:	af00      	add	r7, sp, #0
 8004b44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	689b      	ldr	r3, [r3, #8]
 8004b4a:	f023 0201 	bic.w	r2, r3, #1
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	370c      	adds	r7, #12
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
 8004b68:	460b      	mov	r3, r1
 8004b6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	68db      	ldr	r3, [r3, #12]
 8004b74:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004b7c:	78fb      	ldrb	r3, [r7, #3]
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d115      	bne.n	8004bae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b8e:	2001      	movs	r0, #1
 8004b90:	f7fc f9f6 	bl	8000f80 <HAL_Delay>
      ms++;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	3301      	adds	r3, #1
 8004b98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f939 	bl	8004e12 <USB_GetMode>
 8004ba0:	4603      	mov	r3, r0
 8004ba2:	2b01      	cmp	r3, #1
 8004ba4:	d01e      	beq.n	8004be4 <USB_SetCurrentMode+0x84>
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	2b31      	cmp	r3, #49	; 0x31
 8004baa:	d9f0      	bls.n	8004b8e <USB_SetCurrentMode+0x2e>
 8004bac:	e01a      	b.n	8004be4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004bae:	78fb      	ldrb	r3, [r7, #3]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d115      	bne.n	8004be0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004bc0:	2001      	movs	r0, #1
 8004bc2:	f7fc f9dd 	bl	8000f80 <HAL_Delay>
      ms++;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f000 f920 	bl	8004e12 <USB_GetMode>
 8004bd2:	4603      	mov	r3, r0
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d005      	beq.n	8004be4 <USB_SetCurrentMode+0x84>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b31      	cmp	r3, #49	; 0x31
 8004bdc:	d9f0      	bls.n	8004bc0 <USB_SetCurrentMode+0x60>
 8004bde:	e001      	b.n	8004be4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	e005      	b.n	8004bf0 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b32      	cmp	r3, #50	; 0x32
 8004be8:	d101      	bne.n	8004bee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e000      	b.n	8004bf0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004bee:	2300      	movs	r3, #0
}
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	3710      	adds	r7, #16
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	bd80      	pop	{r7, pc}

08004bf8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004bf8:	b480      	push	{r7}
 8004bfa:	b085      	sub	sp, #20
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
 8004c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	3301      	adds	r3, #1
 8004c0a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	4a13      	ldr	r2, [pc, #76]	; (8004c5c <USB_FlushTxFifo+0x64>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d901      	bls.n	8004c18 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c14:	2303      	movs	r3, #3
 8004c16:	e01b      	b.n	8004c50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	daf2      	bge.n	8004c06 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c20:	2300      	movs	r3, #0
 8004c22:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c24:	683b      	ldr	r3, [r7, #0]
 8004c26:	019b      	lsls	r3, r3, #6
 8004c28:	f043 0220 	orr.w	r2, r3, #32
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	3301      	adds	r3, #1
 8004c34:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a08      	ldr	r2, [pc, #32]	; (8004c5c <USB_FlushTxFifo+0x64>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d901      	bls.n	8004c42 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c3e:	2303      	movs	r3, #3
 8004c40:	e006      	b.n	8004c50 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	691b      	ldr	r3, [r3, #16]
 8004c46:	f003 0320 	and.w	r3, r3, #32
 8004c4a:	2b20      	cmp	r3, #32
 8004c4c:	d0f0      	beq.n	8004c30 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c4e:	2300      	movs	r3, #0
}
 8004c50:	4618      	mov	r0, r3
 8004c52:	3714      	adds	r7, #20
 8004c54:	46bd      	mov	sp, r7
 8004c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5a:	4770      	bx	lr
 8004c5c:	00030d40 	.word	0x00030d40

08004c60 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b085      	sub	sp, #20
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004c68:	2300      	movs	r3, #0
 8004c6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	3301      	adds	r3, #1
 8004c70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a11      	ldr	r2, [pc, #68]	; (8004cbc <USB_FlushRxFifo+0x5c>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d901      	bls.n	8004c7e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004c7a:	2303      	movs	r3, #3
 8004c7c:	e018      	b.n	8004cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	daf2      	bge.n	8004c6c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004c86:	2300      	movs	r3, #0
 8004c88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	2210      	movs	r2, #16
 8004c8e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	3301      	adds	r3, #1
 8004c94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4a08      	ldr	r2, [pc, #32]	; (8004cbc <USB_FlushRxFifo+0x5c>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d901      	bls.n	8004ca2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004c9e:	2303      	movs	r3, #3
 8004ca0:	e006      	b.n	8004cb0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	f003 0310 	and.w	r3, r3, #16
 8004caa:	2b10      	cmp	r3, #16
 8004cac:	d0f0      	beq.n	8004c90 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004cae:	2300      	movs	r3, #0
}
 8004cb0:	4618      	mov	r0, r3
 8004cb2:	3714      	adds	r7, #20
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cba:	4770      	bx	lr
 8004cbc:	00030d40 	.word	0x00030d40

08004cc0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b089      	sub	sp, #36	; 0x24
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	60f8      	str	r0, [r7, #12]
 8004cc8:	60b9      	str	r1, [r7, #8]
 8004cca:	4611      	mov	r1, r2
 8004ccc:	461a      	mov	r2, r3
 8004cce:	460b      	mov	r3, r1
 8004cd0:	71fb      	strb	r3, [r7, #7]
 8004cd2:	4613      	mov	r3, r2
 8004cd4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004cde:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d123      	bne.n	8004d2e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004ce6:	88bb      	ldrh	r3, [r7, #4]
 8004ce8:	3303      	adds	r3, #3
 8004cea:	089b      	lsrs	r3, r3, #2
 8004cec:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004cee:	2300      	movs	r3, #0
 8004cf0:	61bb      	str	r3, [r7, #24]
 8004cf2:	e018      	b.n	8004d26 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	031a      	lsls	r2, r3, #12
 8004cf8:	697b      	ldr	r3, [r7, #20]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d00:	461a      	mov	r2, r3
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d0e:	69fb      	ldr	r3, [r7, #28]
 8004d10:	3301      	adds	r3, #1
 8004d12:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d14:	69fb      	ldr	r3, [r7, #28]
 8004d16:	3301      	adds	r3, #1
 8004d18:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004d1a:	69fb      	ldr	r3, [r7, #28]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004d20:	69bb      	ldr	r3, [r7, #24]
 8004d22:	3301      	adds	r3, #1
 8004d24:	61bb      	str	r3, [r7, #24]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	d3e2      	bcc.n	8004cf4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004d2e:	2300      	movs	r3, #0
}
 8004d30:	4618      	mov	r0, r3
 8004d32:	3724      	adds	r7, #36	; 0x24
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b08b      	sub	sp, #44	; 0x2c
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	60f8      	str	r0, [r7, #12]
 8004d44:	60b9      	str	r1, [r7, #8]
 8004d46:	4613      	mov	r3, r2
 8004d48:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004d4e:	68bb      	ldr	r3, [r7, #8]
 8004d50:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004d52:	88fb      	ldrh	r3, [r7, #6]
 8004d54:	089b      	lsrs	r3, r3, #2
 8004d56:	b29b      	uxth	r3, r3
 8004d58:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004d5a:	88fb      	ldrh	r3, [r7, #6]
 8004d5c:	f003 0303 	and.w	r3, r3, #3
 8004d60:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004d62:	2300      	movs	r3, #0
 8004d64:	623b      	str	r3, [r7, #32]
 8004d66:	e014      	b.n	8004d92 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004d68:	69bb      	ldr	r3, [r7, #24]
 8004d6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	601a      	str	r2, [r3, #0]
    pDest++;
 8004d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d76:	3301      	adds	r3, #1
 8004d78:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d82:	3301      	adds	r3, #1
 8004d84:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d88:	3301      	adds	r3, #1
 8004d8a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004d8c:	6a3b      	ldr	r3, [r7, #32]
 8004d8e:	3301      	adds	r3, #1
 8004d90:	623b      	str	r3, [r7, #32]
 8004d92:	6a3a      	ldr	r2, [r7, #32]
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	429a      	cmp	r2, r3
 8004d98:	d3e6      	bcc.n	8004d68 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004d9a:	8bfb      	ldrh	r3, [r7, #30]
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d01e      	beq.n	8004dde <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004da0:	2300      	movs	r3, #0
 8004da2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004daa:	461a      	mov	r2, r3
 8004dac:	f107 0310 	add.w	r3, r7, #16
 8004db0:	6812      	ldr	r2, [r2, #0]
 8004db2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004db4:	693a      	ldr	r2, [r7, #16]
 8004db6:	6a3b      	ldr	r3, [r7, #32]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	00db      	lsls	r3, r3, #3
 8004dbc:	fa22 f303 	lsr.w	r3, r2, r3
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc4:	701a      	strb	r2, [r3, #0]
      i++;
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	623b      	str	r3, [r7, #32]
      pDest++;
 8004dcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dce:	3301      	adds	r3, #1
 8004dd0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004dd2:	8bfb      	ldrh	r3, [r7, #30]
 8004dd4:	3b01      	subs	r3, #1
 8004dd6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004dd8:	8bfb      	ldrh	r3, [r7, #30]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d1ea      	bne.n	8004db4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004de0:	4618      	mov	r0, r3
 8004de2:	372c      	adds	r7, #44	; 0x2c
 8004de4:	46bd      	mov	sp, r7
 8004de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dea:	4770      	bx	lr

08004dec <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	695b      	ldr	r3, [r3, #20]
 8004df8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	699b      	ldr	r3, [r3, #24]
 8004dfe:	68fa      	ldr	r2, [r7, #12]
 8004e00:	4013      	ands	r3, r2
 8004e02:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004e04:	68fb      	ldr	r3, [r7, #12]
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr

08004e12 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e12:	b480      	push	{r7}
 8004e14:	b083      	sub	sp, #12
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
}
 8004e22:	4618      	mov	r0, r3
 8004e24:	370c      	adds	r7, #12
 8004e26:	46bd      	mov	sp, r7
 8004e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2c:	4770      	bx	lr
	...

08004e30 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b085      	sub	sp, #20
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	3301      	adds	r3, #1
 8004e40:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	4a13      	ldr	r2, [pc, #76]	; (8004e94 <USB_CoreReset+0x64>)
 8004e46:	4293      	cmp	r3, r2
 8004e48:	d901      	bls.n	8004e4e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	e01b      	b.n	8004e86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	691b      	ldr	r3, [r3, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	daf2      	bge.n	8004e3c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	691b      	ldr	r3, [r3, #16]
 8004e5e:	f043 0201 	orr.w	r2, r3, #1
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	3301      	adds	r3, #1
 8004e6a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	4a09      	ldr	r2, [pc, #36]	; (8004e94 <USB_CoreReset+0x64>)
 8004e70:	4293      	cmp	r3, r2
 8004e72:	d901      	bls.n	8004e78 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004e74:	2303      	movs	r3, #3
 8004e76:	e006      	b.n	8004e86 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	691b      	ldr	r3, [r3, #16]
 8004e7c:	f003 0301 	and.w	r3, r3, #1
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d0f0      	beq.n	8004e66 <USB_CoreReset+0x36>

  return HAL_OK;
 8004e84:	2300      	movs	r3, #0
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3714      	adds	r7, #20
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e90:	4770      	bx	lr
 8004e92:	bf00      	nop
 8004e94:	00030d40 	.word	0x00030d40

08004e98 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004e98:	b084      	sub	sp, #16
 8004e9a:	b580      	push	{r7, lr}
 8004e9c:	b086      	sub	sp, #24
 8004e9e:	af00      	add	r7, sp, #0
 8004ea0:	6078      	str	r0, [r7, #4]
 8004ea2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004ea6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004eb8:	461a      	mov	r2, r3
 8004eba:	2300      	movs	r3, #0
 8004ebc:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ec2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ece:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eda:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d018      	beq.n	8004f20 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ef0:	2b01      	cmp	r3, #1
 8004ef2:	d10a      	bne.n	8004f0a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f02:	f043 0304 	orr.w	r3, r3, #4
 8004f06:	6013      	str	r3, [r2, #0]
 8004f08:	e014      	b.n	8004f34 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f18:	f023 0304 	bic.w	r3, r3, #4
 8004f1c:	6013      	str	r3, [r2, #0]
 8004f1e:	e009      	b.n	8004f34 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68fa      	ldr	r2, [r7, #12]
 8004f2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004f2e:	f023 0304 	bic.w	r3, r3, #4
 8004f32:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004f34:	2110      	movs	r1, #16
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7ff fe5e 	bl	8004bf8 <USB_FlushTxFifo>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d001      	beq.n	8004f46 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f7ff fe8a 	bl	8004c60 <USB_FlushRxFifo>
 8004f4c:	4603      	mov	r3, r0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d001      	beq.n	8004f56 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8004f52:	2301      	movs	r3, #1
 8004f54:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f56:	2300      	movs	r3, #0
 8004f58:	613b      	str	r3, [r7, #16]
 8004f5a:	e015      	b.n	8004f88 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	015a      	lsls	r2, r3, #5
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	4413      	add	r3, r2
 8004f64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f68:	461a      	mov	r2, r3
 8004f6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004f6e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	015a      	lsls	r2, r3, #5
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	4413      	add	r3, r2
 8004f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	3301      	adds	r3, #1
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f8a:	693a      	ldr	r2, [r7, #16]
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d3e5      	bcc.n	8004f5c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2200      	movs	r2, #0
 8004f94:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f04f 32ff 	mov.w	r2, #4294967295
 8004f9c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d00b      	beq.n	8004fc2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	4a13      	ldr	r2, [pc, #76]	; (8005004 <USB_HostInit+0x16c>)
 8004fb6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	4a13      	ldr	r2, [pc, #76]	; (8005008 <USB_HostInit+0x170>)
 8004fbc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004fc0:	e009      	b.n	8004fd6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2280      	movs	r2, #128	; 0x80
 8004fc6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a10      	ldr	r2, [pc, #64]	; (800500c <USB_HostInit+0x174>)
 8004fcc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a0f      	ldr	r2, [pc, #60]	; (8005010 <USB_HostInit+0x178>)
 8004fd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d105      	bne.n	8004fe8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	f043 0210 	orr.w	r2, r3, #16
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	4b09      	ldr	r3, [pc, #36]	; (8005014 <USB_HostInit+0x17c>)
 8004fee:	4313      	orrs	r3, r2
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8004ff4:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ff6:	4618      	mov	r0, r3
 8004ff8:	3718      	adds	r7, #24
 8004ffa:	46bd      	mov	sp, r7
 8004ffc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005000:	b004      	add	sp, #16
 8005002:	4770      	bx	lr
 8005004:	01000200 	.word	0x01000200
 8005008:	00e00300 	.word	0x00e00300
 800500c:	00600080 	.word	0x00600080
 8005010:	004000e0 	.word	0x004000e0
 8005014:	a3200008 	.word	0xa3200008

08005018 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005018:	b480      	push	{r7}
 800501a:	b085      	sub	sp, #20
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
 8005020:	460b      	mov	r3, r1
 8005022:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005036:	f023 0303 	bic.w	r3, r3, #3
 800503a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005042:	681a      	ldr	r2, [r3, #0]
 8005044:	78fb      	ldrb	r3, [r7, #3]
 8005046:	f003 0303 	and.w	r3, r3, #3
 800504a:	68f9      	ldr	r1, [r7, #12]
 800504c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005050:	4313      	orrs	r3, r2
 8005052:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005054:	78fb      	ldrb	r3, [r7, #3]
 8005056:	2b01      	cmp	r3, #1
 8005058:	d107      	bne.n	800506a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005060:	461a      	mov	r2, r3
 8005062:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005066:	6053      	str	r3, [r2, #4]
 8005068:	e009      	b.n	800507e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800506a:	78fb      	ldrb	r3, [r7, #3]
 800506c:	2b02      	cmp	r3, #2
 800506e:	d106      	bne.n	800507e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005076:	461a      	mov	r2, r3
 8005078:	f241 7370 	movw	r3, #6000	; 0x1770
 800507c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800507e:	2300      	movs	r3, #0
}
 8005080:	4618      	mov	r0, r3
 8005082:	3714      	adds	r7, #20
 8005084:	46bd      	mov	sp, r7
 8005086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800508a:	4770      	bx	lr

0800508c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
 8005094:	460b      	mov	r3, r1
 8005096:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800509c:	2300      	movs	r3, #0
 800509e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80050b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80050b2:	68bb      	ldr	r3, [r7, #8]
 80050b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d109      	bne.n	80050d0 <USB_DriveVbus+0x44>
 80050bc:	78fb      	ldrb	r3, [r7, #3]
 80050be:	2b01      	cmp	r3, #1
 80050c0:	d106      	bne.n	80050d0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80050c2:	68bb      	ldr	r3, [r7, #8]
 80050c4:	68fa      	ldr	r2, [r7, #12]
 80050c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80050ce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80050d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050da:	d109      	bne.n	80050f0 <USB_DriveVbus+0x64>
 80050dc:	78fb      	ldrb	r3, [r7, #3]
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d106      	bne.n	80050f0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	68fa      	ldr	r2, [r7, #12]
 80050e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80050ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80050ee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80050fe:	b480      	push	{r7}
 8005100:	b085      	sub	sp, #20
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800510a:	2300      	movs	r3, #0
 800510c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	0c5b      	lsrs	r3, r3, #17
 800511c:	f003 0303 	and.w	r3, r3, #3
}
 8005120:	4618      	mov	r0, r3
 8005122:	3714      	adds	r7, #20
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800513e:	689b      	ldr	r3, [r3, #8]
 8005140:	b29b      	uxth	r3, r3
}
 8005142:	4618      	mov	r0, r3
 8005144:	3714      	adds	r7, #20
 8005146:	46bd      	mov	sp, r7
 8005148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514c:	4770      	bx	lr
	...

08005150 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b088      	sub	sp, #32
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
 8005158:	4608      	mov	r0, r1
 800515a:	4611      	mov	r1, r2
 800515c:	461a      	mov	r2, r3
 800515e:	4603      	mov	r3, r0
 8005160:	70fb      	strb	r3, [r7, #3]
 8005162:	460b      	mov	r3, r1
 8005164:	70bb      	strb	r3, [r7, #2]
 8005166:	4613      	mov	r3, r2
 8005168:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800516a:	2300      	movs	r3, #0
 800516c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8005172:	78fb      	ldrb	r3, [r7, #3]
 8005174:	015a      	lsls	r2, r3, #5
 8005176:	693b      	ldr	r3, [r7, #16]
 8005178:	4413      	add	r3, r2
 800517a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800517e:	461a      	mov	r2, r3
 8005180:	f04f 33ff 	mov.w	r3, #4294967295
 8005184:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8005186:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800518a:	2b03      	cmp	r3, #3
 800518c:	d87e      	bhi.n	800528c <USB_HC_Init+0x13c>
 800518e:	a201      	add	r2, pc, #4	; (adr r2, 8005194 <USB_HC_Init+0x44>)
 8005190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005194:	080051a5 	.word	0x080051a5
 8005198:	0800524f 	.word	0x0800524f
 800519c:	080051a5 	.word	0x080051a5
 80051a0:	08005211 	.word	0x08005211
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80051a4:	78fb      	ldrb	r3, [r7, #3]
 80051a6:	015a      	lsls	r2, r3, #5
 80051a8:	693b      	ldr	r3, [r7, #16]
 80051aa:	4413      	add	r3, r2
 80051ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051b0:	461a      	mov	r2, r3
 80051b2:	f240 439d 	movw	r3, #1181	; 0x49d
 80051b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80051b8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	da10      	bge.n	80051e2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80051c0:	78fb      	ldrb	r3, [r7, #3]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051cc:	68db      	ldr	r3, [r3, #12]
 80051ce:	78fa      	ldrb	r2, [r7, #3]
 80051d0:	0151      	lsls	r1, r2, #5
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	440a      	add	r2, r1
 80051d6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80051da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051de:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 80051e0:	e057      	b.n	8005292 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d051      	beq.n	8005292 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80051ee:	78fb      	ldrb	r3, [r7, #3]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	693b      	ldr	r3, [r7, #16]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	78fa      	ldrb	r2, [r7, #3]
 80051fe:	0151      	lsls	r1, r2, #5
 8005200:	693a      	ldr	r2, [r7, #16]
 8005202:	440a      	add	r2, r1
 8005204:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005208:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800520c:	60d3      	str	r3, [r2, #12]
      break;
 800520e:	e040      	b.n	8005292 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005210:	78fb      	ldrb	r3, [r7, #3]
 8005212:	015a      	lsls	r2, r3, #5
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	4413      	add	r3, r2
 8005218:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800521c:	461a      	mov	r2, r3
 800521e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005222:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005224:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005228:	2b00      	cmp	r3, #0
 800522a:	da34      	bge.n	8005296 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	015a      	lsls	r2, r3, #5
 8005230:	693b      	ldr	r3, [r7, #16]
 8005232:	4413      	add	r3, r2
 8005234:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005238:	68db      	ldr	r3, [r3, #12]
 800523a:	78fa      	ldrb	r2, [r7, #3]
 800523c:	0151      	lsls	r1, r2, #5
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	440a      	add	r2, r1
 8005242:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005246:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800524a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800524c:	e023      	b.n	8005296 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800524e:	78fb      	ldrb	r3, [r7, #3]
 8005250:	015a      	lsls	r2, r3, #5
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	4413      	add	r3, r2
 8005256:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800525a:	461a      	mov	r2, r3
 800525c:	f240 2325 	movw	r3, #549	; 0x225
 8005260:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005262:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005266:	2b00      	cmp	r3, #0
 8005268:	da17      	bge.n	800529a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800526a:	78fb      	ldrb	r3, [r7, #3]
 800526c:	015a      	lsls	r2, r3, #5
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	4413      	add	r3, r2
 8005272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	78fa      	ldrb	r2, [r7, #3]
 800527a:	0151      	lsls	r1, r2, #5
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	440a      	add	r2, r1
 8005280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005284:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8005288:	60d3      	str	r3, [r2, #12]
      }
      break;
 800528a:	e006      	b.n	800529a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	77fb      	strb	r3, [r7, #31]
      break;
 8005290:	e004      	b.n	800529c <USB_HC_Init+0x14c>
      break;
 8005292:	bf00      	nop
 8005294:	e002      	b.n	800529c <USB_HC_Init+0x14c>
      break;
 8005296:	bf00      	nop
 8005298:	e000      	b.n	800529c <USB_HC_Init+0x14c>
      break;
 800529a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	015a      	lsls	r2, r3, #5
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	4413      	add	r3, r2
 80052a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80052a8:	68db      	ldr	r3, [r3, #12]
 80052aa:	78fa      	ldrb	r2, [r7, #3]
 80052ac:	0151      	lsls	r1, r2, #5
 80052ae:	693a      	ldr	r2, [r7, #16]
 80052b0:	440a      	add	r2, r1
 80052b2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80052b6:	f043 0302 	orr.w	r3, r3, #2
 80052ba:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80052c2:	699a      	ldr	r2, [r3, #24]
 80052c4:	78fb      	ldrb	r3, [r7, #3]
 80052c6:	f003 030f 	and.w	r3, r3, #15
 80052ca:	2101      	movs	r1, #1
 80052cc:	fa01 f303 	lsl.w	r3, r1, r3
 80052d0:	6939      	ldr	r1, [r7, #16]
 80052d2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80052d6:	4313      	orrs	r3, r2
 80052d8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	699b      	ldr	r3, [r3, #24]
 80052de:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 80052e6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	da03      	bge.n	80052f6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 80052ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80052f2:	61bb      	str	r3, [r7, #24]
 80052f4:	e001      	b.n	80052fa <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 80052f6:	2300      	movs	r3, #0
 80052f8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 80052fa:	6878      	ldr	r0, [r7, #4]
 80052fc:	f7ff feff 	bl	80050fe <USB_GetHostSpeed>
 8005300:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005302:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005306:	2b02      	cmp	r3, #2
 8005308:	d106      	bne.n	8005318 <USB_HC_Init+0x1c8>
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2b02      	cmp	r3, #2
 800530e:	d003      	beq.n	8005318 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005310:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005314:	617b      	str	r3, [r7, #20]
 8005316:	e001      	b.n	800531c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005318:	2300      	movs	r3, #0
 800531a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800531c:	787b      	ldrb	r3, [r7, #1]
 800531e:	059b      	lsls	r3, r3, #22
 8005320:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005324:	78bb      	ldrb	r3, [r7, #2]
 8005326:	02db      	lsls	r3, r3, #11
 8005328:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800532c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800532e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005332:	049b      	lsls	r3, r3, #18
 8005334:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005338:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800533a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800533c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8005340:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005346:	78fb      	ldrb	r3, [r7, #3]
 8005348:	0159      	lsls	r1, r3, #5
 800534a:	693b      	ldr	r3, [r7, #16]
 800534c:	440b      	add	r3, r1
 800534e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005352:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8005358:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800535a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800535e:	2b03      	cmp	r3, #3
 8005360:	d003      	beq.n	800536a <USB_HC_Init+0x21a>
 8005362:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005366:	2b01      	cmp	r3, #1
 8005368:	d10f      	bne.n	800538a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800536a:	78fb      	ldrb	r3, [r7, #3]
 800536c:	015a      	lsls	r2, r3, #5
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	4413      	add	r3, r2
 8005372:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	78fa      	ldrb	r2, [r7, #3]
 800537a:	0151      	lsls	r1, r2, #5
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	440a      	add	r2, r1
 8005380:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005384:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005388:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800538a:	7ffb      	ldrb	r3, [r7, #31]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3720      	adds	r7, #32
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b08c      	sub	sp, #48	; 0x30
 8005398:	af02      	add	r7, sp, #8
 800539a:	60f8      	str	r0, [r7, #12]
 800539c:	60b9      	str	r1, [r7, #8]
 800539e:	4613      	mov	r3, r2
 80053a0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	785b      	ldrb	r3, [r3, #1]
 80053aa:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80053ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80053b0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80053b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d02d      	beq.n	800541a <USB_HC_StartXfer+0x86>
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	791b      	ldrb	r3, [r3, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d129      	bne.n	800541a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d117      	bne.n	80053fc <USB_HC_StartXfer+0x68>
 80053cc:	68bb      	ldr	r3, [r7, #8]
 80053ce:	79db      	ldrb	r3, [r3, #7]
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d003      	beq.n	80053dc <USB_HC_StartXfer+0x48>
 80053d4:	68bb      	ldr	r3, [r7, #8]
 80053d6:	79db      	ldrb	r3, [r3, #7]
 80053d8:	2b02      	cmp	r3, #2
 80053da:	d10f      	bne.n	80053fc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 80053dc:	69fb      	ldr	r3, [r7, #28]
 80053de:	015a      	lsls	r2, r3, #5
 80053e0:	6a3b      	ldr	r3, [r7, #32]
 80053e2:	4413      	add	r3, r2
 80053e4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	69fa      	ldr	r2, [r7, #28]
 80053ec:	0151      	lsls	r1, r2, #5
 80053ee:	6a3a      	ldr	r2, [r7, #32]
 80053f0:	440a      	add	r2, r1
 80053f2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80053f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053fa:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 80053fc:	79fb      	ldrb	r3, [r7, #7]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d10b      	bne.n	800541a <USB_HC_StartXfer+0x86>
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	795b      	ldrb	r3, [r3, #5]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d107      	bne.n	800541a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800540a:	68bb      	ldr	r3, [r7, #8]
 800540c:	785b      	ldrb	r3, [r3, #1]
 800540e:	4619      	mov	r1, r3
 8005410:	68f8      	ldr	r0, [r7, #12]
 8005412:	f000 fa0f 	bl	8005834 <USB_DoPing>
      return HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	e0f8      	b.n	800560c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800541a:	68bb      	ldr	r3, [r7, #8]
 800541c:	695b      	ldr	r3, [r3, #20]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d018      	beq.n	8005454 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	68ba      	ldr	r2, [r7, #8]
 8005428:	8912      	ldrh	r2, [r2, #8]
 800542a:	4413      	add	r3, r2
 800542c:	3b01      	subs	r3, #1
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	8912      	ldrh	r2, [r2, #8]
 8005432:	fbb3 f3f2 	udiv	r3, r3, r2
 8005436:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005438:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800543a:	8b7b      	ldrh	r3, [r7, #26]
 800543c:	429a      	cmp	r2, r3
 800543e:	d90b      	bls.n	8005458 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005440:	8b7b      	ldrh	r3, [r7, #26]
 8005442:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005444:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005446:	68ba      	ldr	r2, [r7, #8]
 8005448:	8912      	ldrh	r2, [r2, #8]
 800544a:	fb03 f202 	mul.w	r2, r3, r2
 800544e:	68bb      	ldr	r3, [r7, #8]
 8005450:	611a      	str	r2, [r3, #16]
 8005452:	e001      	b.n	8005458 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005454:	2301      	movs	r3, #1
 8005456:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	78db      	ldrb	r3, [r3, #3]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d007      	beq.n	8005470 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005460:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005462:	68ba      	ldr	r2, [r7, #8]
 8005464:	8912      	ldrh	r2, [r2, #8]
 8005466:	fb03 f202 	mul.w	r2, r3, r2
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	611a      	str	r2, [r3, #16]
 800546e:	e003      	b.n	8005478 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005470:	68bb      	ldr	r3, [r7, #8]
 8005472:	695a      	ldr	r2, [r3, #20]
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005480:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005482:	04d9      	lsls	r1, r3, #19
 8005484:	4b63      	ldr	r3, [pc, #396]	; (8005614 <USB_HC_StartXfer+0x280>)
 8005486:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005488:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 800548a:	68bb      	ldr	r3, [r7, #8]
 800548c:	7a9b      	ldrb	r3, [r3, #10]
 800548e:	075b      	lsls	r3, r3, #29
 8005490:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005494:	69f9      	ldr	r1, [r7, #28]
 8005496:	0148      	lsls	r0, r1, #5
 8005498:	6a39      	ldr	r1, [r7, #32]
 800549a:	4401      	add	r1, r0
 800549c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80054a0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80054a2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80054a4:	79fb      	ldrb	r3, [r7, #7]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d009      	beq.n	80054be <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	68d9      	ldr	r1, [r3, #12]
 80054ae:	69fb      	ldr	r3, [r7, #28]
 80054b0:	015a      	lsls	r2, r3, #5
 80054b2:	6a3b      	ldr	r3, [r7, #32]
 80054b4:	4413      	add	r3, r2
 80054b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054ba:	460a      	mov	r2, r1
 80054bc:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80054be:	6a3b      	ldr	r3, [r7, #32]
 80054c0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054c4:	689b      	ldr	r3, [r3, #8]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	bf0c      	ite	eq
 80054ce:	2301      	moveq	r3, #1
 80054d0:	2300      	movne	r3, #0
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	015a      	lsls	r2, r3, #5
 80054da:	6a3b      	ldr	r3, [r7, #32]
 80054dc:	4413      	add	r3, r2
 80054de:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	69fa      	ldr	r2, [r7, #28]
 80054e6:	0151      	lsls	r1, r2, #5
 80054e8:	6a3a      	ldr	r2, [r7, #32]
 80054ea:	440a      	add	r2, r1
 80054ec:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80054f0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80054f4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	015a      	lsls	r2, r3, #5
 80054fa:	6a3b      	ldr	r3, [r7, #32]
 80054fc:	4413      	add	r3, r2
 80054fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	7e7b      	ldrb	r3, [r7, #25]
 8005506:	075b      	lsls	r3, r3, #29
 8005508:	69f9      	ldr	r1, [r7, #28]
 800550a:	0148      	lsls	r0, r1, #5
 800550c:	6a39      	ldr	r1, [r7, #32]
 800550e:	4401      	add	r1, r0
 8005510:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005514:	4313      	orrs	r3, r2
 8005516:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005518:	69fb      	ldr	r3, [r7, #28]
 800551a:	015a      	lsls	r2, r3, #5
 800551c:	6a3b      	ldr	r3, [r7, #32]
 800551e:	4413      	add	r3, r2
 8005520:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800552e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005530:	68bb      	ldr	r3, [r7, #8]
 8005532:	78db      	ldrb	r3, [r3, #3]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d004      	beq.n	8005542 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005538:	693b      	ldr	r3, [r7, #16]
 800553a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553e:	613b      	str	r3, [r7, #16]
 8005540:	e003      	b.n	800554a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005548:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005550:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	015a      	lsls	r2, r3, #5
 8005556:	6a3b      	ldr	r3, [r7, #32]
 8005558:	4413      	add	r3, r2
 800555a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800555e:	461a      	mov	r2, r3
 8005560:	693b      	ldr	r3, [r7, #16]
 8005562:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005564:	79fb      	ldrb	r3, [r7, #7]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d001      	beq.n	800556e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800556a:	2300      	movs	r3, #0
 800556c:	e04e      	b.n	800560c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	78db      	ldrb	r3, [r3, #3]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d149      	bne.n	800560a <USB_HC_StartXfer+0x276>
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d045      	beq.n	800560a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	79db      	ldrb	r3, [r3, #7]
 8005582:	2b03      	cmp	r3, #3
 8005584:	d830      	bhi.n	80055e8 <USB_HC_StartXfer+0x254>
 8005586:	a201      	add	r2, pc, #4	; (adr r2, 800558c <USB_HC_StartXfer+0x1f8>)
 8005588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800558c:	0800559d 	.word	0x0800559d
 8005590:	080055c1 	.word	0x080055c1
 8005594:	0800559d 	.word	0x0800559d
 8005598:	080055c1 	.word	0x080055c1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	695b      	ldr	r3, [r3, #20]
 80055a0:	3303      	adds	r3, #3
 80055a2:	089b      	lsrs	r3, r3, #2
 80055a4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80055a6:	8afa      	ldrh	r2, [r7, #22]
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055ac:	b29b      	uxth	r3, r3
 80055ae:	429a      	cmp	r2, r3
 80055b0:	d91c      	bls.n	80055ec <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	f043 0220 	orr.w	r2, r3, #32
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	619a      	str	r2, [r3, #24]
        }
        break;
 80055be:	e015      	b.n	80055ec <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80055c0:	68bb      	ldr	r3, [r7, #8]
 80055c2:	695b      	ldr	r3, [r3, #20]
 80055c4:	3303      	adds	r3, #3
 80055c6:	089b      	lsrs	r3, r3, #2
 80055c8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80055ca:	8afa      	ldrh	r2, [r7, #22]
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	b29b      	uxth	r3, r3
 80055d6:	429a      	cmp	r2, r3
 80055d8:	d90a      	bls.n	80055f0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	699b      	ldr	r3, [r3, #24]
 80055de:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	619a      	str	r2, [r3, #24]
        }
        break;
 80055e6:	e003      	b.n	80055f0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 80055e8:	bf00      	nop
 80055ea:	e002      	b.n	80055f2 <USB_HC_StartXfer+0x25e>
        break;
 80055ec:	bf00      	nop
 80055ee:	e000      	b.n	80055f2 <USB_HC_StartXfer+0x25e>
        break;
 80055f0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	68d9      	ldr	r1, [r3, #12]
 80055f6:	68bb      	ldr	r3, [r7, #8]
 80055f8:	785a      	ldrb	r2, [r3, #1]
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	695b      	ldr	r3, [r3, #20]
 80055fe:	b29b      	uxth	r3, r3
 8005600:	2000      	movs	r0, #0
 8005602:	9000      	str	r0, [sp, #0]
 8005604:	68f8      	ldr	r0, [r7, #12]
 8005606:	f7ff fb5b 	bl	8004cc0 <USB_WritePacket>
  }

  return HAL_OK;
 800560a:	2300      	movs	r3, #0
}
 800560c:	4618      	mov	r0, r3
 800560e:	3728      	adds	r7, #40	; 0x28
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}
 8005614:	1ff80000 	.word	0x1ff80000

08005618 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005618:	b480      	push	{r7}
 800561a:	b085      	sub	sp, #20
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800562a:	695b      	ldr	r3, [r3, #20]
 800562c:	b29b      	uxth	r3, r3
}
 800562e:	4618      	mov	r0, r3
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800563a:	b480      	push	{r7}
 800563c:	b089      	sub	sp, #36	; 0x24
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	460b      	mov	r3, r1
 8005644:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800564a:	78fb      	ldrb	r3, [r7, #3]
 800564c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800564e:	2300      	movs	r3, #0
 8005650:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005652:	69bb      	ldr	r3, [r7, #24]
 8005654:	015a      	lsls	r2, r3, #5
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	4413      	add	r3, r2
 800565a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	0c9b      	lsrs	r3, r3, #18
 8005662:	f003 0303 	and.w	r3, r3, #3
 8005666:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	4413      	add	r3, r2
 8005670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	0fdb      	lsrs	r3, r3, #31
 8005678:	f003 0301 	and.w	r3, r3, #1
 800567c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	689b      	ldr	r3, [r3, #8]
 8005682:	f003 0320 	and.w	r3, r3, #32
 8005686:	2b20      	cmp	r3, #32
 8005688:	d104      	bne.n	8005694 <USB_HC_Halt+0x5a>
 800568a:	693b      	ldr	r3, [r7, #16]
 800568c:	2b00      	cmp	r3, #0
 800568e:	d101      	bne.n	8005694 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005690:	2300      	movs	r3, #0
 8005692:	e0c8      	b.n	8005826 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d002      	beq.n	80056a0 <USB_HC_Halt+0x66>
 800569a:	697b      	ldr	r3, [r7, #20]
 800569c:	2b02      	cmp	r3, #2
 800569e:	d163      	bne.n	8005768 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80056a0:	69bb      	ldr	r3, [r7, #24]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	69fb      	ldr	r3, [r7, #28]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	69ba      	ldr	r2, [r7, #24]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	69fa      	ldr	r2, [r7, #28]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056be:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f003 0320 	and.w	r3, r3, #32
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	f040 80ab 	bne.w	8005824 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d133      	bne.n	8005742 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80056da:	69bb      	ldr	r3, [r7, #24]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	69fb      	ldr	r3, [r7, #28]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	69ba      	ldr	r2, [r7, #24]
 80056ea:	0151      	lsls	r1, r2, #5
 80056ec:	69fa      	ldr	r2, [r7, #28]
 80056ee:	440a      	add	r2, r1
 80056f0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80056f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80056f8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	4413      	add	r3, r2
 8005702:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	69ba      	ldr	r2, [r7, #24]
 800570a:	0151      	lsls	r1, r2, #5
 800570c:	69fa      	ldr	r2, [r7, #28]
 800570e:	440a      	add	r2, r1
 8005710:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005714:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005718:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	3301      	adds	r3, #1
 800571e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005726:	d81d      	bhi.n	8005764 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005728:	69bb      	ldr	r3, [r7, #24]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	69fb      	ldr	r3, [r7, #28]
 800572e:	4413      	add	r3, r2
 8005730:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005734:	681b      	ldr	r3, [r3, #0]
 8005736:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800573a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800573e:	d0ec      	beq.n	800571a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005740:	e070      	b.n	8005824 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005742:	69bb      	ldr	r3, [r7, #24]
 8005744:	015a      	lsls	r2, r3, #5
 8005746:	69fb      	ldr	r3, [r7, #28]
 8005748:	4413      	add	r3, r2
 800574a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	69ba      	ldr	r2, [r7, #24]
 8005752:	0151      	lsls	r1, r2, #5
 8005754:	69fa      	ldr	r2, [r7, #28]
 8005756:	440a      	add	r2, r1
 8005758:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800575c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005760:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005762:	e05f      	b.n	8005824 <USB_HC_Halt+0x1ea>
            break;
 8005764:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005766:	e05d      	b.n	8005824 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005768:	69bb      	ldr	r3, [r7, #24]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	69fb      	ldr	r3, [r7, #28]
 800576e:	4413      	add	r3, r2
 8005770:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	69ba      	ldr	r2, [r7, #24]
 8005778:	0151      	lsls	r1, r2, #5
 800577a:	69fa      	ldr	r2, [r7, #28]
 800577c:	440a      	add	r2, r1
 800577e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005782:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005786:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005788:	69fb      	ldr	r3, [r7, #28]
 800578a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800578e:	691b      	ldr	r3, [r3, #16]
 8005790:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005794:	2b00      	cmp	r3, #0
 8005796:	d133      	bne.n	8005800 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005798:	69bb      	ldr	r3, [r7, #24]
 800579a:	015a      	lsls	r2, r3, #5
 800579c:	69fb      	ldr	r3, [r7, #28]
 800579e:	4413      	add	r3, r2
 80057a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057a4:	681b      	ldr	r3, [r3, #0]
 80057a6:	69ba      	ldr	r2, [r7, #24]
 80057a8:	0151      	lsls	r1, r2, #5
 80057aa:	69fa      	ldr	r2, [r7, #28]
 80057ac:	440a      	add	r2, r1
 80057ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057b2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80057b6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80057b8:	69bb      	ldr	r3, [r7, #24]
 80057ba:	015a      	lsls	r2, r3, #5
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	4413      	add	r3, r2
 80057c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	69ba      	ldr	r2, [r7, #24]
 80057c8:	0151      	lsls	r1, r2, #5
 80057ca:	69fa      	ldr	r2, [r7, #28]
 80057cc:	440a      	add	r2, r1
 80057ce:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80057d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80057d6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	3301      	adds	r3, #1
 80057dc:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80057e4:	d81d      	bhi.n	8005822 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80057e6:	69bb      	ldr	r3, [r7, #24]
 80057e8:	015a      	lsls	r2, r3, #5
 80057ea:	69fb      	ldr	r3, [r7, #28]
 80057ec:	4413      	add	r3, r2
 80057ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057fc:	d0ec      	beq.n	80057d8 <USB_HC_Halt+0x19e>
 80057fe:	e011      	b.n	8005824 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	015a      	lsls	r2, r3, #5
 8005804:	69fb      	ldr	r3, [r7, #28]
 8005806:	4413      	add	r3, r2
 8005808:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	69ba      	ldr	r2, [r7, #24]
 8005810:	0151      	lsls	r1, r2, #5
 8005812:	69fa      	ldr	r2, [r7, #28]
 8005814:	440a      	add	r2, r1
 8005816:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800581a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800581e:	6013      	str	r3, [r2, #0]
 8005820:	e000      	b.n	8005824 <USB_HC_Halt+0x1ea>
          break;
 8005822:	bf00      	nop
    }
  }

  return HAL_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	3724      	adds	r7, #36	; 0x24
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr
	...

08005834 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005834:	b480      	push	{r7}
 8005836:	b087      	sub	sp, #28
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
 800583c:	460b      	mov	r3, r1
 800583e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005844:	78fb      	ldrb	r3, [r7, #3]
 8005846:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005848:	2301      	movs	r3, #1
 800584a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	04da      	lsls	r2, r3, #19
 8005850:	4b15      	ldr	r3, [pc, #84]	; (80058a8 <USB_DoPing+0x74>)
 8005852:	4013      	ands	r3, r2
 8005854:	693a      	ldr	r2, [r7, #16]
 8005856:	0151      	lsls	r1, r2, #5
 8005858:	697a      	ldr	r2, [r7, #20]
 800585a:	440a      	add	r2, r1
 800585c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005860:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005864:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005866:	693b      	ldr	r3, [r7, #16]
 8005868:	015a      	lsls	r2, r3, #5
 800586a:	697b      	ldr	r3, [r7, #20]
 800586c:	4413      	add	r3, r2
 800586e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005876:	68bb      	ldr	r3, [r7, #8]
 8005878:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800587c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800587e:	68bb      	ldr	r3, [r7, #8]
 8005880:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005884:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005886:	693b      	ldr	r3, [r7, #16]
 8005888:	015a      	lsls	r2, r3, #5
 800588a:	697b      	ldr	r3, [r7, #20]
 800588c:	4413      	add	r3, r2
 800588e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005892:	461a      	mov	r2, r3
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005898:	2300      	movs	r3, #0
}
 800589a:	4618      	mov	r0, r3
 800589c:	371c      	adds	r7, #28
 800589e:	46bd      	mov	sp, r7
 80058a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	1ff80000 	.word	0x1ff80000

080058ac <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80058b4:	2300      	movs	r3, #0
 80058b6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80058bc:	2300      	movs	r3, #0
 80058be:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f7ff f93c 	bl	8004b3e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058c6:	2110      	movs	r1, #16
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	f7ff f995 	bl	8004bf8 <USB_FlushTxFifo>
 80058ce:	4603      	mov	r3, r0
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d001      	beq.n	80058d8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80058d4:	2301      	movs	r3, #1
 80058d6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f7ff f9c1 	bl	8004c60 <USB_FlushRxFifo>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80058e8:	2300      	movs	r3, #0
 80058ea:	61bb      	str	r3, [r7, #24]
 80058ec:	e01f      	b.n	800592e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	015a      	lsls	r2, r3, #5
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	4413      	add	r3, r2
 80058f6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005904:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005906:	693b      	ldr	r3, [r7, #16]
 8005908:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800590c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800590e:	693b      	ldr	r3, [r7, #16]
 8005910:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005914:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	015a      	lsls	r2, r3, #5
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	4413      	add	r3, r2
 800591e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005922:	461a      	mov	r2, r3
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005928:	69bb      	ldr	r3, [r7, #24]
 800592a:	3301      	adds	r3, #1
 800592c:	61bb      	str	r3, [r7, #24]
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	2b0f      	cmp	r3, #15
 8005932:	d9dc      	bls.n	80058ee <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005934:	2300      	movs	r3, #0
 8005936:	61bb      	str	r3, [r7, #24]
 8005938:	e034      	b.n	80059a4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800593a:	69bb      	ldr	r3, [r7, #24]
 800593c:	015a      	lsls	r2, r3, #5
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	4413      	add	r3, r2
 8005942:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005950:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005958:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800595a:	693b      	ldr	r3, [r7, #16]
 800595c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005960:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	4413      	add	r3, r2
 800596a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800596e:	461a      	mov	r2, r3
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	3301      	adds	r3, #1
 8005978:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005980:	d80c      	bhi.n	800599c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005982:	69bb      	ldr	r3, [r7, #24]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	697b      	ldr	r3, [r7, #20]
 8005988:	4413      	add	r3, r2
 800598a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005994:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005998:	d0ec      	beq.n	8005974 <USB_StopHost+0xc8>
 800599a:	e000      	b.n	800599e <USB_StopHost+0xf2>
        break;
 800599c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	3301      	adds	r3, #1
 80059a2:	61bb      	str	r3, [r7, #24]
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	2b0f      	cmp	r3, #15
 80059a8:	d9c7      	bls.n	800593a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80059b0:	461a      	mov	r2, r3
 80059b2:	f04f 33ff 	mov.w	r3, #4294967295
 80059b6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	f04f 32ff 	mov.w	r2, #4294967295
 80059be:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f7ff f8ab 	bl	8004b1c <USB_EnableGlobalInt>

  return ret;
 80059c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3720      	adds	r7, #32
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}

080059d0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80059d0:	b590      	push	{r4, r7, lr}
 80059d2:	b089      	sub	sp, #36	; 0x24
 80059d4:	af04      	add	r7, sp, #16
 80059d6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80059d8:	2301      	movs	r3, #1
 80059da:	2202      	movs	r2, #2
 80059dc:	2102      	movs	r1, #2
 80059de:	6878      	ldr	r0, [r7, #4]
 80059e0:	f000 fc66 	bl	80062b0 <USBH_FindInterface>
 80059e4:	4603      	mov	r3, r0
 80059e6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80059e8:	7bfb      	ldrb	r3, [r7, #15]
 80059ea:	2bff      	cmp	r3, #255	; 0xff
 80059ec:	d002      	beq.n	80059f4 <USBH_CDC_InterfaceInit+0x24>
 80059ee:	7bfb      	ldrb	r3, [r7, #15]
 80059f0:	2b01      	cmp	r3, #1
 80059f2:	d901      	bls.n	80059f8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80059f4:	2302      	movs	r3, #2
 80059f6:	e13d      	b.n	8005c74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80059f8:	7bfb      	ldrb	r3, [r7, #15]
 80059fa:	4619      	mov	r1, r3
 80059fc:	6878      	ldr	r0, [r7, #4]
 80059fe:	f000 fc3b 	bl	8006278 <USBH_SelectInterface>
 8005a02:	4603      	mov	r3, r0
 8005a04:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8005a06:	7bbb      	ldrb	r3, [r7, #14]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d001      	beq.n	8005a10 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8005a0c:	2302      	movs	r3, #2
 8005a0e:	e131      	b.n	8005c74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8005a16:	2050      	movs	r0, #80	; 0x50
 8005a18:	f001 fb12 	bl	8007040 <malloc>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005a26:	69db      	ldr	r3, [r3, #28]
 8005a28:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8005a2a:	68bb      	ldr	r3, [r7, #8]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8005a30:	2302      	movs	r3, #2
 8005a32:	e11f      	b.n	8005c74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8005a34:	2250      	movs	r2, #80	; 0x50
 8005a36:	2100      	movs	r1, #0
 8005a38:	68b8      	ldr	r0, [r7, #8]
 8005a3a:	f001 fb11 	bl	8007060 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005a3e:	7bfb      	ldrb	r3, [r7, #15]
 8005a40:	687a      	ldr	r2, [r7, #4]
 8005a42:	211a      	movs	r1, #26
 8005a44:	fb01 f303 	mul.w	r3, r1, r3
 8005a48:	4413      	add	r3, r2
 8005a4a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a4e:	781b      	ldrb	r3, [r3, #0]
 8005a50:	b25b      	sxtb	r3, r3
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	da15      	bge.n	8005a82 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005a56:	7bfb      	ldrb	r3, [r7, #15]
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	211a      	movs	r1, #26
 8005a5c:	fb01 f303 	mul.w	r3, r1, r3
 8005a60:	4413      	add	r3, r2
 8005a62:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005a66:	781a      	ldrb	r2, [r3, #0]
 8005a68:	68bb      	ldr	r3, [r7, #8]
 8005a6a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005a6c:	7bfb      	ldrb	r3, [r7, #15]
 8005a6e:	687a      	ldr	r2, [r7, #4]
 8005a70:	211a      	movs	r1, #26
 8005a72:	fb01 f303 	mul.w	r3, r1, r3
 8005a76:	4413      	add	r3, r2
 8005a78:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005a7c:	881a      	ldrh	r2, [r3, #0]
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	785b      	ldrb	r3, [r3, #1]
 8005a86:	4619      	mov	r1, r3
 8005a88:	6878      	ldr	r0, [r7, #4]
 8005a8a:	f000 ff9c 	bl	80069c6 <USBH_AllocPipe>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	461a      	mov	r2, r3
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	7819      	ldrb	r1, [r3, #0]
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	7858      	ldrb	r0, [r3, #1]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005aaa:	68ba      	ldr	r2, [r7, #8]
 8005aac:	8952      	ldrh	r2, [r2, #10]
 8005aae:	9202      	str	r2, [sp, #8]
 8005ab0:	2203      	movs	r2, #3
 8005ab2:	9201      	str	r2, [sp, #4]
 8005ab4:	9300      	str	r3, [sp, #0]
 8005ab6:	4623      	mov	r3, r4
 8005ab8:	4602      	mov	r2, r0
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f000 ff54 	bl	8006968 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8005ac0:	68bb      	ldr	r3, [r7, #8]
 8005ac2:	781b      	ldrb	r3, [r3, #0]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	4619      	mov	r1, r3
 8005ac8:	6878      	ldr	r0, [r7, #4]
 8005aca:	f001 fa17 	bl	8006efc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8005ace:	2300      	movs	r3, #0
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	210a      	movs	r1, #10
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fbeb 	bl	80062b0 <USBH_FindInterface>
 8005ada:	4603      	mov	r3, r0
 8005adc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8005ade:	7bfb      	ldrb	r3, [r7, #15]
 8005ae0:	2bff      	cmp	r3, #255	; 0xff
 8005ae2:	d002      	beq.n	8005aea <USBH_CDC_InterfaceInit+0x11a>
 8005ae4:	7bfb      	ldrb	r3, [r7, #15]
 8005ae6:	2b01      	cmp	r3, #1
 8005ae8:	d901      	bls.n	8005aee <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8005aea:	2302      	movs	r3, #2
 8005aec:	e0c2      	b.n	8005c74 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	211a      	movs	r1, #26
 8005af4:	fb01 f303 	mul.w	r3, r1, r3
 8005af8:	4413      	add	r3, r2
 8005afa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005afe:	781b      	ldrb	r3, [r3, #0]
 8005b00:	b25b      	sxtb	r3, r3
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	da16      	bge.n	8005b34 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	211a      	movs	r1, #26
 8005b0c:	fb01 f303 	mul.w	r3, r1, r3
 8005b10:	4413      	add	r3, r2
 8005b12:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b16:	781a      	ldrb	r2, [r3, #0]
 8005b18:	68bb      	ldr	r3, [r7, #8]
 8005b1a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005b1c:	7bfb      	ldrb	r3, [r7, #15]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	211a      	movs	r1, #26
 8005b22:	fb01 f303 	mul.w	r3, r1, r3
 8005b26:	4413      	add	r3, r2
 8005b28:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b2c:	881a      	ldrh	r2, [r3, #0]
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	835a      	strh	r2, [r3, #26]
 8005b32:	e015      	b.n	8005b60 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8005b34:	7bfb      	ldrb	r3, [r7, #15]
 8005b36:	687a      	ldr	r2, [r7, #4]
 8005b38:	211a      	movs	r1, #26
 8005b3a:	fb01 f303 	mul.w	r3, r1, r3
 8005b3e:	4413      	add	r3, r2
 8005b40:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8005b44:	781a      	ldrb	r2, [r3, #0]
 8005b46:	68bb      	ldr	r3, [r7, #8]
 8005b48:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8005b4a:	7bfb      	ldrb	r3, [r7, #15]
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	211a      	movs	r1, #26
 8005b50:	fb01 f303 	mul.w	r3, r1, r3
 8005b54:	4413      	add	r3, r2
 8005b56:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005b5a:	881a      	ldrh	r2, [r3, #0]
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8005b60:	7bfb      	ldrb	r3, [r7, #15]
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	211a      	movs	r1, #26
 8005b66:	fb01 f303 	mul.w	r3, r1, r3
 8005b6a:	4413      	add	r3, r2
 8005b6c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	b25b      	sxtb	r3, r3
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	da16      	bge.n	8005ba6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005b78:	7bfb      	ldrb	r3, [r7, #15]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	211a      	movs	r1, #26
 8005b7e:	fb01 f303 	mul.w	r3, r1, r3
 8005b82:	4413      	add	r3, r2
 8005b84:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005b88:	781a      	ldrb	r2, [r3, #0]
 8005b8a:	68bb      	ldr	r3, [r7, #8]
 8005b8c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005b8e:	7bfb      	ldrb	r3, [r7, #15]
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	211a      	movs	r1, #26
 8005b94:	fb01 f303 	mul.w	r3, r1, r3
 8005b98:	4413      	add	r3, r2
 8005b9a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005b9e:	881a      	ldrh	r2, [r3, #0]
 8005ba0:	68bb      	ldr	r3, [r7, #8]
 8005ba2:	835a      	strh	r2, [r3, #26]
 8005ba4:	e015      	b.n	8005bd2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8005ba6:	7bfb      	ldrb	r3, [r7, #15]
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	211a      	movs	r1, #26
 8005bac:	fb01 f303 	mul.w	r3, r1, r3
 8005bb0:	4413      	add	r3, r2
 8005bb2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8005bb6:	781a      	ldrb	r2, [r3, #0]
 8005bb8:	68bb      	ldr	r3, [r7, #8]
 8005bba:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8005bbc:	7bfb      	ldrb	r3, [r7, #15]
 8005bbe:	687a      	ldr	r2, [r7, #4]
 8005bc0:	211a      	movs	r1, #26
 8005bc2:	fb01 f303 	mul.w	r3, r1, r3
 8005bc6:	4413      	add	r3, r2
 8005bc8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8005bcc:	881a      	ldrh	r2, [r3, #0]
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	7b9b      	ldrb	r3, [r3, #14]
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 fef4 	bl	80069c6 <USBH_AllocPipe>
 8005bde:	4603      	mov	r3, r0
 8005be0:	461a      	mov	r2, r3
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8005be6:	68bb      	ldr	r3, [r7, #8]
 8005be8:	7bdb      	ldrb	r3, [r3, #15]
 8005bea:	4619      	mov	r1, r3
 8005bec:	6878      	ldr	r0, [r7, #4]
 8005bee:	f000 feea 	bl	80069c6 <USBH_AllocPipe>
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	461a      	mov	r2, r3
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	7b59      	ldrb	r1, [r3, #13]
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	7b98      	ldrb	r0, [r3, #14]
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c0e:	68ba      	ldr	r2, [r7, #8]
 8005c10:	8b12      	ldrh	r2, [r2, #24]
 8005c12:	9202      	str	r2, [sp, #8]
 8005c14:	2202      	movs	r2, #2
 8005c16:	9201      	str	r2, [sp, #4]
 8005c18:	9300      	str	r3, [sp, #0]
 8005c1a:	4623      	mov	r3, r4
 8005c1c:	4602      	mov	r2, r0
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	f000 fea2 	bl	8006968 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8005c24:	68bb      	ldr	r3, [r7, #8]
 8005c26:	7b19      	ldrb	r1, [r3, #12]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	7bd8      	ldrb	r0, [r3, #15]
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8005c38:	68ba      	ldr	r2, [r7, #8]
 8005c3a:	8b52      	ldrh	r2, [r2, #26]
 8005c3c:	9202      	str	r2, [sp, #8]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	9201      	str	r2, [sp, #4]
 8005c42:	9300      	str	r3, [sp, #0]
 8005c44:	4623      	mov	r3, r4
 8005c46:	4602      	mov	r2, r0
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fe8d 	bl	8006968 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	7b5b      	ldrb	r3, [r3, #13]
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f001 f94c 	bl	8006efc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8005c64:	68bb      	ldr	r3, [r7, #8]
 8005c66:	7b1b      	ldrb	r3, [r3, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f001 f945 	bl	8006efc <USBH_LL_SetToggle>

  return USBH_OK;
 8005c72:	2300      	movs	r3, #0
}
 8005c74:	4618      	mov	r0, r3
 8005c76:	3714      	adds	r7, #20
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd90      	pop	{r4, r7, pc}

08005c7c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b084      	sub	sp, #16
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005c8a:	69db      	ldr	r3, [r3, #28]
 8005c8c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	781b      	ldrb	r3, [r3, #0]
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d00e      	beq.n	8005cb4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	4619      	mov	r1, r3
 8005c9c:	6878      	ldr	r0, [r7, #4]
 8005c9e:	f000 fe82 	bl	80069a6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	781b      	ldrb	r3, [r3, #0]
 8005ca6:	4619      	mov	r1, r3
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	f000 fead 	bl	8006a08 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	7b1b      	ldrb	r3, [r3, #12]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d00e      	beq.n	8005cda <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	7b1b      	ldrb	r3, [r3, #12]
 8005cc0:	4619      	mov	r1, r3
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fe6f 	bl	80069a6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	7b1b      	ldrb	r3, [r3, #12]
 8005ccc:	4619      	mov	r1, r3
 8005cce:	6878      	ldr	r0, [r7, #4]
 8005cd0:	f000 fe9a 	bl	8006a08 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	7b5b      	ldrb	r3, [r3, #13]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d00e      	beq.n	8005d00 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	7b5b      	ldrb	r3, [r3, #13]
 8005ce6:	4619      	mov	r1, r3
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 fe5c 	bl	80069a6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	7b5b      	ldrb	r3, [r3, #13]
 8005cf2:	4619      	mov	r1, r3
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f000 fe87 	bl	8006a08 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d06:	69db      	ldr	r3, [r3, #28]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d00b      	beq.n	8005d24 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d12:	69db      	ldr	r3, [r3, #28]
 8005d14:	4618      	mov	r0, r3
 8005d16:	f001 f99b 	bl	8007050 <free>
    phost->pActiveClass->pData = 0U;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d20:	2200      	movs	r2, #0
 8005d22:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8005d24:	2300      	movs	r3, #0
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8005d2e:	b580      	push	{r7, lr}
 8005d30:	b084      	sub	sp, #16
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	3340      	adds	r3, #64	; 0x40
 8005d44:	4619      	mov	r1, r3
 8005d46:	6878      	ldr	r0, [r7, #4]
 8005d48:	f000 f8b1 	bl	8005eae <GetLineCoding>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8005d50:	7afb      	ldrb	r3, [r7, #11]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d105      	bne.n	8005d62 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8005d5c:	2102      	movs	r1, #2
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8005d62:	7afb      	ldrb	r3, [r7, #11]
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8005d74:	2301      	movs	r3, #1
 8005d76:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8005d78:	2300      	movs	r3, #0
 8005d7a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005d82:	69db      	ldr	r3, [r3, #28]
 8005d84:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8005d8c:	2b04      	cmp	r3, #4
 8005d8e:	d877      	bhi.n	8005e80 <USBH_CDC_Process+0x114>
 8005d90:	a201      	add	r2, pc, #4	; (adr r2, 8005d98 <USBH_CDC_Process+0x2c>)
 8005d92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d96:	bf00      	nop
 8005d98:	08005dad 	.word	0x08005dad
 8005d9c:	08005db3 	.word	0x08005db3
 8005da0:	08005de3 	.word	0x08005de3
 8005da4:	08005e57 	.word	0x08005e57
 8005da8:	08005e65 	.word	0x08005e65
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8005dac:	2300      	movs	r3, #0
 8005dae:	73fb      	strb	r3, [r7, #15]
      break;
 8005db0:	e06d      	b.n	8005e8e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db6:	4619      	mov	r1, r3
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 f897 	bl	8005eec <SetLineCoding>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005dc2:	7bbb      	ldrb	r3, [r7, #14]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d104      	bne.n	8005dd2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	2202      	movs	r2, #2
 8005dcc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005dd0:	e058      	b.n	8005e84 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8005dd2:	7bbb      	ldrb	r3, [r7, #14]
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d055      	beq.n	8005e84 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005dd8:	68bb      	ldr	r3, [r7, #8]
 8005dda:	2204      	movs	r2, #4
 8005ddc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005de0:	e050      	b.n	8005e84 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	3340      	adds	r3, #64	; 0x40
 8005de6:	4619      	mov	r1, r3
 8005de8:	6878      	ldr	r0, [r7, #4]
 8005dea:	f000 f860 	bl	8005eae <GetLineCoding>
 8005dee:	4603      	mov	r3, r0
 8005df0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005df2:	7bbb      	ldrb	r3, [r7, #14]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d126      	bne.n	8005e46 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8005df8:	68bb      	ldr	r3, [r7, #8]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005e00:	68bb      	ldr	r3, [r7, #8]
 8005e02:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8005e06:	68bb      	ldr	r3, [r7, #8]
 8005e08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e0a:	791b      	ldrb	r3, [r3, #4]
 8005e0c:	429a      	cmp	r2, r3
 8005e0e:	d13b      	bne.n	8005e88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005e10:	68bb      	ldr	r3, [r7, #8]
 8005e12:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8005e16:	68bb      	ldr	r3, [r7, #8]
 8005e18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e1a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8005e1c:	429a      	cmp	r2, r3
 8005e1e:	d133      	bne.n	8005e88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005e20:	68bb      	ldr	r3, [r7, #8]
 8005e22:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e2a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8005e2c:	429a      	cmp	r2, r3
 8005e2e:	d12b      	bne.n	8005e88 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e34:	68bb      	ldr	r3, [r7, #8]
 8005e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005e38:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8005e3a:	429a      	cmp	r2, r3
 8005e3c:	d124      	bne.n	8005e88 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 f958 	bl	80060f4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8005e44:	e020      	b.n	8005e88 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8005e46:	7bbb      	ldrb	r3, [r7, #14]
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d01d      	beq.n	8005e88 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8005e4c:	68bb      	ldr	r3, [r7, #8]
 8005e4e:	2204      	movs	r2, #4
 8005e50:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8005e54:	e018      	b.n	8005e88 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 f867 	bl	8005f2a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 f8da 	bl	8006016 <CDC_ProcessReception>
      break;
 8005e62:	e014      	b.n	8005e8e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8005e64:	2100      	movs	r1, #0
 8005e66:	6878      	ldr	r0, [r7, #4]
 8005e68:	f000 fb08 	bl	800647c <USBH_ClrFeature>
 8005e6c:	4603      	mov	r3, r0
 8005e6e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8005e70:	7bbb      	ldrb	r3, [r7, #14]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d10a      	bne.n	8005e8c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2200      	movs	r2, #0
 8005e7a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8005e7e:	e005      	b.n	8005e8c <USBH_CDC_Process+0x120>

    default:
      break;
 8005e80:	bf00      	nop
 8005e82:	e004      	b.n	8005e8e <USBH_CDC_Process+0x122>
      break;
 8005e84:	bf00      	nop
 8005e86:	e002      	b.n	8005e8e <USBH_CDC_Process+0x122>
      break;
 8005e88:	bf00      	nop
 8005e8a:	e000      	b.n	8005e8e <USBH_CDC_Process+0x122>
      break;
 8005e8c:	bf00      	nop

  }

  return status;
 8005e8e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3710      	adds	r7, #16
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}

08005e98 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b083      	sub	sp, #12
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8005ea0:	2300      	movs	r3, #0
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	370c      	adds	r7, #12
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eac:	4770      	bx	lr

08005eae <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8005eae:	b580      	push	{r7, lr}
 8005eb0:	b082      	sub	sp, #8
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	6078      	str	r0, [r7, #4]
 8005eb6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	22a1      	movs	r2, #161	; 0xa1
 8005ebc:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2221      	movs	r2, #33	; 0x21
 8005ec2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2200      	movs	r2, #0
 8005ec8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	2200      	movs	r2, #0
 8005ece:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2207      	movs	r2, #7
 8005ed4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	2207      	movs	r2, #7
 8005eda:	4619      	mov	r1, r3
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 faf1 	bl	80064c4 <USBH_CtlReq>
 8005ee2:	4603      	mov	r3, r0
}
 8005ee4:	4618      	mov	r0, r3
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
 8005ef4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2221      	movs	r2, #33	; 0x21
 8005efa:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2220      	movs	r2, #32
 8005f00:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2200      	movs	r2, #0
 8005f0c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2207      	movs	r2, #7
 8005f12:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8005f14:	683b      	ldr	r3, [r7, #0]
 8005f16:	2207      	movs	r2, #7
 8005f18:	4619      	mov	r1, r3
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fad2 	bl	80064c4 <USBH_CtlReq>
 8005f20:	4603      	mov	r3, r0
}
 8005f22:	4618      	mov	r0, r3
 8005f24:	3708      	adds	r7, #8
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}

08005f2a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b086      	sub	sp, #24
 8005f2e:	af02      	add	r7, sp, #8
 8005f30:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8005f3c:	2300      	movs	r3, #0
 8005f3e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8005f46:	2b01      	cmp	r3, #1
 8005f48:	d002      	beq.n	8005f50 <CDC_ProcessTransmission+0x26>
 8005f4a:	2b02      	cmp	r3, #2
 8005f4c:	d023      	beq.n	8005f96 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8005f4e:	e05e      	b.n	800600e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	68fa      	ldr	r2, [r7, #12]
 8005f56:	8b12      	ldrh	r2, [r2, #24]
 8005f58:	4293      	cmp	r3, r2
 8005f5a:	d90b      	bls.n	8005f74 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	69d9      	ldr	r1, [r3, #28]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	8b1a      	ldrh	r2, [r3, #24]
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	7b5b      	ldrb	r3, [r3, #13]
 8005f68:	2001      	movs	r0, #1
 8005f6a:	9000      	str	r0, [sp, #0]
 8005f6c:	6878      	ldr	r0, [r7, #4]
 8005f6e:	f000 fcb8 	bl	80068e2 <USBH_BulkSendData>
 8005f72:	e00b      	b.n	8005f8c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	7b5b      	ldrb	r3, [r3, #13]
 8005f82:	2001      	movs	r0, #1
 8005f84:	9000      	str	r0, [sp, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fcab 	bl	80068e2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	2202      	movs	r2, #2
 8005f90:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005f94:	e03b      	b.n	800600e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	7b5b      	ldrb	r3, [r3, #13]
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f000 ff83 	bl	8006ea8 <USBH_LL_GetURBState>
 8005fa2:	4603      	mov	r3, r0
 8005fa4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8005fa6:	7afb      	ldrb	r3, [r7, #11]
 8005fa8:	2b01      	cmp	r3, #1
 8005faa:	d128      	bne.n	8005ffe <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fb0:	68fa      	ldr	r2, [r7, #12]
 8005fb2:	8b12      	ldrh	r2, [r2, #24]
 8005fb4:	4293      	cmp	r3, r2
 8005fb6:	d90e      	bls.n	8005fd6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	8b12      	ldrh	r2, [r2, #24]
 8005fc0:	1a9a      	subs	r2, r3, r2
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	69db      	ldr	r3, [r3, #28]
 8005fca:	68fa      	ldr	r2, [r7, #12]
 8005fcc:	8b12      	ldrh	r2, [r2, #24]
 8005fce:	441a      	add	r2, r3
 8005fd0:	68fb      	ldr	r3, [r7, #12]
 8005fd2:	61da      	str	r2, [r3, #28]
 8005fd4:	e002      	b.n	8005fdc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d004      	beq.n	8005fee <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	2201      	movs	r2, #1
 8005fe8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8005fec:	e00e      	b.n	800600c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	2200      	movs	r2, #0
 8005ff2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 f868 	bl	80060cc <USBH_CDC_TransmitCallback>
      break;
 8005ffc:	e006      	b.n	800600c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8005ffe:	7afb      	ldrb	r3, [r7, #11]
 8006000:	2b02      	cmp	r3, #2
 8006002:	d103      	bne.n	800600c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2201      	movs	r2, #1
 8006008:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800600c:	bf00      	nop
  }
}
 800600e:	bf00      	nop
 8006010:	3710      	adds	r7, #16
 8006012:	46bd      	mov	sp, r7
 8006014:	bd80      	pop	{r7, pc}

08006016 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006016:	b580      	push	{r7, lr}
 8006018:	b086      	sub	sp, #24
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006028:	2300      	movs	r3, #0
 800602a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800602c:	697b      	ldr	r3, [r7, #20]
 800602e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006032:	2b03      	cmp	r3, #3
 8006034:	d002      	beq.n	800603c <CDC_ProcessReception+0x26>
 8006036:	2b04      	cmp	r3, #4
 8006038:	d00e      	beq.n	8006058 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800603a:	e043      	b.n	80060c4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	6a19      	ldr	r1, [r3, #32]
 8006040:	697b      	ldr	r3, [r7, #20]
 8006042:	8b5a      	ldrh	r2, [r3, #26]
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	7b1b      	ldrb	r3, [r3, #12]
 8006048:	6878      	ldr	r0, [r7, #4]
 800604a:	f000 fc6f 	bl	800692c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800604e:	697b      	ldr	r3, [r7, #20]
 8006050:	2204      	movs	r2, #4
 8006052:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006056:	e035      	b.n	80060c4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	7b1b      	ldrb	r3, [r3, #12]
 800605c:	4619      	mov	r1, r3
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f000 ff22 	bl	8006ea8 <USBH_LL_GetURBState>
 8006064:	4603      	mov	r3, r0
 8006066:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8006068:	7cfb      	ldrb	r3, [r7, #19]
 800606a:	2b01      	cmp	r3, #1
 800606c:	d129      	bne.n	80060c2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800606e:	697b      	ldr	r3, [r7, #20]
 8006070:	7b1b      	ldrb	r3, [r3, #12]
 8006072:	4619      	mov	r1, r3
 8006074:	6878      	ldr	r0, [r7, #4]
 8006076:	f000 fe85 	bl	8006d84 <USBH_LL_GetLastXferSize>
 800607a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800607c:	697b      	ldr	r3, [r7, #20]
 800607e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006080:	68fa      	ldr	r2, [r7, #12]
 8006082:	429a      	cmp	r2, r3
 8006084:	d016      	beq.n	80060b4 <CDC_ProcessReception+0x9e>
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	8b5b      	ldrh	r3, [r3, #26]
 800608a:	461a      	mov	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	4293      	cmp	r3, r2
 8006090:	d910      	bls.n	80060b4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8006092:	697b      	ldr	r3, [r7, #20]
 8006094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	1ad2      	subs	r2, r2, r3
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	6a1a      	ldr	r2, [r3, #32]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	441a      	add	r2, r3
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80060aa:	697b      	ldr	r3, [r7, #20]
 80060ac:	2203      	movs	r2, #3
 80060ae:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80060b2:	e006      	b.n	80060c2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80060b4:	697b      	ldr	r3, [r7, #20]
 80060b6:	2200      	movs	r2, #0
 80060b8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80060bc:	6878      	ldr	r0, [r7, #4]
 80060be:	f000 f80f 	bl	80060e0 <USBH_CDC_ReceiveCallback>
      break;
 80060c2:	bf00      	nop
  }
}
 80060c4:	bf00      	nop
 80060c6:	3718      	adds	r7, #24
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bd80      	pop	{r7, pc}

080060cc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80060cc:	b480      	push	{r7}
 80060ce:	b083      	sub	sp, #12
 80060d0:	af00      	add	r7, sp, #0
 80060d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80060d4:	bf00      	nop
 80060d6:	370c      	adds	r7, #12
 80060d8:	46bd      	mov	sp, r7
 80060da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060de:	4770      	bx	lr

080060e0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80060e0:	b480      	push	{r7}
 80060e2:	b083      	sub	sp, #12
 80060e4:	af00      	add	r7, sp, #0
 80060e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80060e8:	bf00      	nop
 80060ea:	370c      	adds	r7, #12
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr

080060f4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80060f4:	b480      	push	{r7}
 80060f6:	b083      	sub	sp, #12
 80060f8:	af00      	add	r7, sp, #0
 80060fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80060fc:	bf00      	nop
 80060fe:	370c      	adds	r7, #12
 8006100:	46bd      	mov	sp, r7
 8006102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006106:	4770      	bx	lr

08006108 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	4613      	mov	r3, r2
 8006114:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006116:	68fb      	ldr	r3, [r7, #12]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d101      	bne.n	8006120 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800611c:	2302      	movs	r3, #2
 800611e:	e029      	b.n	8006174 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	79fa      	ldrb	r2, [r7, #7]
 8006124:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2200      	movs	r2, #0
 800612c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2200      	movs	r2, #0
 8006134:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006138:	68f8      	ldr	r0, [r7, #12]
 800613a:	f000 f81f 	bl	800617c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2200      	movs	r2, #0
 8006142:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2200      	movs	r2, #0
 8006152:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b00      	cmp	r3, #0
 8006162:	d003      	beq.n	800616c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	68ba      	ldr	r2, [r7, #8]
 8006168:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800616c:	68f8      	ldr	r0, [r7, #12]
 800616e:	f000 fd97 	bl	8006ca0 <USBH_LL_Init>

  return USBH_OK;
 8006172:	2300      	movs	r3, #0
}
 8006174:	4618      	mov	r0, r3
 8006176:	3710      	adds	r7, #16
 8006178:	46bd      	mov	sp, r7
 800617a:	bd80      	pop	{r7, pc}

0800617c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 800617c:	b480      	push	{r7}
 800617e:	b085      	sub	sp, #20
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8006184:	2300      	movs	r3, #0
 8006186:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8006188:	2300      	movs	r3, #0
 800618a:	60fb      	str	r3, [r7, #12]
 800618c:	e009      	b.n	80061a2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	33e0      	adds	r3, #224	; 0xe0
 8006194:	009b      	lsls	r3, r3, #2
 8006196:	4413      	add	r3, r2
 8006198:	2200      	movs	r2, #0
 800619a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	3301      	adds	r3, #1
 80061a0:	60fb      	str	r3, [r7, #12]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	2b0f      	cmp	r3, #15
 80061a6:	d9f2      	bls.n	800618e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80061a8:	2300      	movs	r3, #0
 80061aa:	60fb      	str	r3, [r7, #12]
 80061ac:	e009      	b.n	80061c2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80061ae:	687a      	ldr	r2, [r7, #4]
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	4413      	add	r3, r2
 80061b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80061b8:	2200      	movs	r2, #0
 80061ba:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	3301      	adds	r3, #1
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80061c8:	d3f1      	bcc.n	80061ae <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	2200      	movs	r2, #0
 80061ce:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2200      	movs	r2, #0
 80061e0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2240      	movs	r2, #64	; 0x40
 80061ee:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2200      	movs	r2, #0
 8006212:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006216:	2300      	movs	r3, #0
}
 8006218:	4618      	mov	r0, r3
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr

08006224 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006224:	b480      	push	{r7}
 8006226:	b085      	sub	sp, #20
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
 800622c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800622e:	2300      	movs	r3, #0
 8006230:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d016      	beq.n	8006266 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800623e:	2b00      	cmp	r3, #0
 8006240:	d10e      	bne.n	8006260 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006248:	1c59      	adds	r1, r3, #1
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8006250:	687a      	ldr	r2, [r7, #4]
 8006252:	33de      	adds	r3, #222	; 0xde
 8006254:	6839      	ldr	r1, [r7, #0]
 8006256:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800625a:	2300      	movs	r3, #0
 800625c:	73fb      	strb	r3, [r7, #15]
 800625e:	e004      	b.n	800626a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8006260:	2302      	movs	r3, #2
 8006262:	73fb      	strb	r3, [r7, #15]
 8006264:	e001      	b.n	800626a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8006266:	2302      	movs	r3, #2
 8006268:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800626a:	7bfb      	ldrb	r3, [r7, #15]
}
 800626c:	4618      	mov	r0, r3
 800626e:	3714      	adds	r7, #20
 8006270:	46bd      	mov	sp, r7
 8006272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006276:	4770      	bx	lr

08006278 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8006278:	b480      	push	{r7}
 800627a:	b085      	sub	sp, #20
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
 8006280:	460b      	mov	r3, r1
 8006282:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8006284:	2300      	movs	r3, #0
 8006286:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 800628e:	78fa      	ldrb	r2, [r7, #3]
 8006290:	429a      	cmp	r2, r3
 8006292:	d204      	bcs.n	800629e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	78fa      	ldrb	r2, [r7, #3]
 8006298:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 800629c:	e001      	b.n	80062a2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800629e:	2302      	movs	r3, #2
 80062a0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80062a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a4:	4618      	mov	r0, r3
 80062a6:	3714      	adds	r7, #20
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	4608      	mov	r0, r1
 80062ba:	4611      	mov	r1, r2
 80062bc:	461a      	mov	r2, r3
 80062be:	4603      	mov	r3, r0
 80062c0:	70fb      	strb	r3, [r7, #3]
 80062c2:	460b      	mov	r3, r1
 80062c4:	70bb      	strb	r3, [r7, #2]
 80062c6:	4613      	mov	r3, r2
 80062c8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80062ca:	2300      	movs	r3, #0
 80062cc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 80062d8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80062da:	e025      	b.n	8006328 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 80062dc:	7dfb      	ldrb	r3, [r7, #23]
 80062de:	221a      	movs	r2, #26
 80062e0:	fb02 f303 	mul.w	r3, r2, r3
 80062e4:	3308      	adds	r3, #8
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4413      	add	r3, r2
 80062ea:	3302      	adds	r3, #2
 80062ec:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	795b      	ldrb	r3, [r3, #5]
 80062f2:	78fa      	ldrb	r2, [r7, #3]
 80062f4:	429a      	cmp	r2, r3
 80062f6:	d002      	beq.n	80062fe <USBH_FindInterface+0x4e>
 80062f8:	78fb      	ldrb	r3, [r7, #3]
 80062fa:	2bff      	cmp	r3, #255	; 0xff
 80062fc:	d111      	bne.n	8006322 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006302:	78ba      	ldrb	r2, [r7, #2]
 8006304:	429a      	cmp	r2, r3
 8006306:	d002      	beq.n	800630e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006308:	78bb      	ldrb	r3, [r7, #2]
 800630a:	2bff      	cmp	r3, #255	; 0xff
 800630c:	d109      	bne.n	8006322 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800630e:	693b      	ldr	r3, [r7, #16]
 8006310:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006312:	787a      	ldrb	r2, [r7, #1]
 8006314:	429a      	cmp	r2, r3
 8006316:	d002      	beq.n	800631e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006318:	787b      	ldrb	r3, [r7, #1]
 800631a:	2bff      	cmp	r3, #255	; 0xff
 800631c:	d101      	bne.n	8006322 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800631e:	7dfb      	ldrb	r3, [r7, #23]
 8006320:	e006      	b.n	8006330 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006322:	7dfb      	ldrb	r3, [r7, #23]
 8006324:	3301      	adds	r3, #1
 8006326:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006328:	7dfb      	ldrb	r3, [r7, #23]
 800632a:	2b01      	cmp	r3, #1
 800632c:	d9d6      	bls.n	80062dc <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800632e:	23ff      	movs	r3, #255	; 0xff
}
 8006330:	4618      	mov	r0, r3
 8006332:	371c      	adds	r7, #28
 8006334:	46bd      	mov	sp, r7
 8006336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633a:	4770      	bx	lr

0800633c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b082      	sub	sp, #8
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fce7 	bl	8006d18 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800634a:	2101      	movs	r1, #1
 800634c:	6878      	ldr	r0, [r7, #4]
 800634e:	f000 fdbe 	bl	8006ece <USBH_LL_DriverVBUS>

  return USBH_OK;
 8006352:	2300      	movs	r3, #0
}
 8006354:	4618      	mov	r0, r3
 8006356:	3708      	adds	r7, #8
 8006358:	46bd      	mov	sp, r7
 800635a:	bd80      	pop	{r7, pc}

0800635c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800635c:	b480      	push	{r7}
 800635e:	b083      	sub	sp, #12
 8006360:	af00      	add	r7, sp, #0
 8006362:	6078      	str	r0, [r7, #4]
 8006364:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	683a      	ldr	r2, [r7, #0]
 800636a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800636e:	bf00      	nop
 8006370:	370c      	adds	r7, #12
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr

0800637a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800637a:	b580      	push	{r7, lr}
 800637c:	b082      	sub	sp, #8
 800637e:	af00      	add	r7, sp, #0
 8006380:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006388:	1c5a      	adds	r2, r3, #1
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 f804 	bl	800639e <USBH_HandleSof>
}
 8006396:	bf00      	nop
 8006398:	3708      	adds	r7, #8
 800639a:	46bd      	mov	sp, r7
 800639c:	bd80      	pop	{r7, pc}

0800639e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800639e:	b580      	push	{r7, lr}
 80063a0:	b082      	sub	sp, #8
 80063a2:	af00      	add	r7, sp, #0
 80063a4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	781b      	ldrb	r3, [r3, #0]
 80063aa:	b2db      	uxtb	r3, r3
 80063ac:	2b0b      	cmp	r3, #11
 80063ae:	d10a      	bne.n	80063c6 <USBH_HandleSof+0x28>
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d005      	beq.n	80063c6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063c0:	699b      	ldr	r3, [r3, #24]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	4798      	blx	r3
  }
}
 80063c6:	bf00      	nop
 80063c8:	3708      	adds	r7, #8
 80063ca:	46bd      	mov	sp, r7
 80063cc:	bd80      	pop	{r7, pc}

080063ce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80063ce:	b480      	push	{r7}
 80063d0:	b083      	sub	sp, #12
 80063d2:	af00      	add	r7, sp, #0
 80063d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2201      	movs	r2, #1
 80063da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80063de:	bf00      	nop
}
 80063e0:	370c      	adds	r7, #12
 80063e2:	46bd      	mov	sp, r7
 80063e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063e8:	4770      	bx	lr

080063ea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2200      	movs	r2, #0
 80063f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80063fa:	bf00      	nop
}
 80063fc:	370c      	adds	r7, #12
 80063fe:	46bd      	mov	sp, r7
 8006400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006404:	4770      	bx	lr

08006406 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8006406:	b480      	push	{r7}
 8006408:	b083      	sub	sp, #12
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2200      	movs	r2, #0
 800641a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006426:	2300      	movs	r3, #0
}
 8006428:	4618      	mov	r0, r3
 800642a:	370c      	adds	r7, #12
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b082      	sub	sp, #8
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2201      	movs	r2, #1
 8006440:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2200      	movs	r2, #0
 8006450:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fc7a 	bl	8006d4e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	791b      	ldrb	r3, [r3, #4]
 800645e:	4619      	mov	r1, r3
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fad1 	bl	8006a08 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	795b      	ldrb	r3, [r3, #5]
 800646a:	4619      	mov	r1, r3
 800646c:	6878      	ldr	r0, [r7, #4]
 800646e:	f000 facb 	bl	8006a08 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8006472:	2300      	movs	r3, #0
}
 8006474:	4618      	mov	r0, r3
 8006476:	3708      	adds	r7, #8
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b082      	sub	sp, #8
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	460b      	mov	r3, r1
 8006486:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	789b      	ldrb	r3, [r3, #2]
 800648c:	2b01      	cmp	r3, #1
 800648e:	d10f      	bne.n	80064b0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2201      	movs	r2, #1
 800649a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80064a2:	78fb      	ldrb	r3, [r7, #3]
 80064a4:	b29a      	uxth	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2200      	movs	r2, #0
 80064ae:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80064b0:	2200      	movs	r2, #0
 80064b2:	2100      	movs	r1, #0
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f805 	bl	80064c4 <USBH_CtlReq>
 80064ba:	4603      	mov	r3, r0
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3708      	adds	r7, #8
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b086      	sub	sp, #24
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	4613      	mov	r3, r2
 80064d0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 80064d2:	2301      	movs	r3, #1
 80064d4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	789b      	ldrb	r3, [r3, #2]
 80064da:	2b01      	cmp	r3, #1
 80064dc:	d002      	beq.n	80064e4 <USBH_CtlReq+0x20>
 80064de:	2b02      	cmp	r3, #2
 80064e0:	d00f      	beq.n	8006502 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 80064e2:	e027      	b.n	8006534 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	68ba      	ldr	r2, [r7, #8]
 80064e8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	88fa      	ldrh	r2, [r7, #6]
 80064ee:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	2201      	movs	r2, #1
 80064f4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	2202      	movs	r2, #2
 80064fa:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 80064fc:	2301      	movs	r3, #1
 80064fe:	75fb      	strb	r3, [r7, #23]
      break;
 8006500:	e018      	b.n	8006534 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f000 f81c 	bl	8006540 <USBH_HandleControl>
 8006508:	4603      	mov	r3, r0
 800650a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800650c:	7dfb      	ldrb	r3, [r7, #23]
 800650e:	2b00      	cmp	r3, #0
 8006510:	d002      	beq.n	8006518 <USBH_CtlReq+0x54>
 8006512:	7dfb      	ldrb	r3, [r7, #23]
 8006514:	2b03      	cmp	r3, #3
 8006516:	d106      	bne.n	8006526 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	2201      	movs	r2, #1
 800651c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	2200      	movs	r2, #0
 8006522:	761a      	strb	r2, [r3, #24]
      break;
 8006524:	e005      	b.n	8006532 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8006526:	7dfb      	ldrb	r3, [r7, #23]
 8006528:	2b02      	cmp	r3, #2
 800652a:	d102      	bne.n	8006532 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2201      	movs	r2, #1
 8006530:	709a      	strb	r2, [r3, #2]
      break;
 8006532:	bf00      	nop
  }
  return status;
 8006534:	7dfb      	ldrb	r3, [r7, #23]
}
 8006536:	4618      	mov	r0, r3
 8006538:	3718      	adds	r7, #24
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
	...

08006540 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8006540:	b580      	push	{r7, lr}
 8006542:	b086      	sub	sp, #24
 8006544:	af02      	add	r7, sp, #8
 8006546:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8006548:	2301      	movs	r3, #1
 800654a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800654c:	2300      	movs	r3, #0
 800654e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	7e1b      	ldrb	r3, [r3, #24]
 8006554:	3b01      	subs	r3, #1
 8006556:	2b0a      	cmp	r3, #10
 8006558:	f200 8156 	bhi.w	8006808 <USBH_HandleControl+0x2c8>
 800655c:	a201      	add	r2, pc, #4	; (adr r2, 8006564 <USBH_HandleControl+0x24>)
 800655e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006562:	bf00      	nop
 8006564:	08006591 	.word	0x08006591
 8006568:	080065ab 	.word	0x080065ab
 800656c:	08006615 	.word	0x08006615
 8006570:	0800663b 	.word	0x0800663b
 8006574:	08006673 	.word	0x08006673
 8006578:	0800669d 	.word	0x0800669d
 800657c:	080066ef 	.word	0x080066ef
 8006580:	08006711 	.word	0x08006711
 8006584:	0800674d 	.word	0x0800674d
 8006588:	08006773 	.word	0x08006773
 800658c:	080067b1 	.word	0x080067b1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	f103 0110 	add.w	r1, r3, #16
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	795b      	ldrb	r3, [r3, #5]
 800659a:	461a      	mov	r2, r3
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f000 f943 	bl	8006828 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2202      	movs	r2, #2
 80065a6:	761a      	strb	r2, [r3, #24]
      break;
 80065a8:	e139      	b.n	800681e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	795b      	ldrb	r3, [r3, #5]
 80065ae:	4619      	mov	r1, r3
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 fc79 	bl	8006ea8 <USBH_LL_GetURBState>
 80065b6:	4603      	mov	r3, r0
 80065b8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80065ba:	7bbb      	ldrb	r3, [r7, #14]
 80065bc:	2b01      	cmp	r3, #1
 80065be:	d11e      	bne.n	80065fe <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	7c1b      	ldrb	r3, [r3, #16]
 80065c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80065c8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	8adb      	ldrh	r3, [r3, #22]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d00a      	beq.n	80065e8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80065d2:	7b7b      	ldrb	r3, [r7, #13]
 80065d4:	2b80      	cmp	r3, #128	; 0x80
 80065d6:	d103      	bne.n	80065e0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2203      	movs	r2, #3
 80065dc:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80065de:	e115      	b.n	800680c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	2205      	movs	r2, #5
 80065e4:	761a      	strb	r2, [r3, #24]
      break;
 80065e6:	e111      	b.n	800680c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 80065e8:	7b7b      	ldrb	r3, [r7, #13]
 80065ea:	2b80      	cmp	r3, #128	; 0x80
 80065ec:	d103      	bne.n	80065f6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	2209      	movs	r2, #9
 80065f2:	761a      	strb	r2, [r3, #24]
      break;
 80065f4:	e10a      	b.n	800680c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2207      	movs	r2, #7
 80065fa:	761a      	strb	r2, [r3, #24]
      break;
 80065fc:	e106      	b.n	800680c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 80065fe:	7bbb      	ldrb	r3, [r7, #14]
 8006600:	2b04      	cmp	r3, #4
 8006602:	d003      	beq.n	800660c <USBH_HandleControl+0xcc>
 8006604:	7bbb      	ldrb	r3, [r7, #14]
 8006606:	2b02      	cmp	r3, #2
 8006608:	f040 8100 	bne.w	800680c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	220b      	movs	r2, #11
 8006610:	761a      	strb	r2, [r3, #24]
      break;
 8006612:	e0fb      	b.n	800680c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800661a:	b29a      	uxth	r2, r3
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6899      	ldr	r1, [r3, #8]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	899a      	ldrh	r2, [r3, #12]
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	791b      	ldrb	r3, [r3, #4]
 800662c:	6878      	ldr	r0, [r7, #4]
 800662e:	f000 f93a 	bl	80068a6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2204      	movs	r2, #4
 8006636:	761a      	strb	r2, [r3, #24]
      break;
 8006638:	e0f1      	b.n	800681e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	791b      	ldrb	r3, [r3, #4]
 800663e:	4619      	mov	r1, r3
 8006640:	6878      	ldr	r0, [r7, #4]
 8006642:	f000 fc31 	bl	8006ea8 <USBH_LL_GetURBState>
 8006646:	4603      	mov	r3, r0
 8006648:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800664a:	7bbb      	ldrb	r3, [r7, #14]
 800664c:	2b01      	cmp	r3, #1
 800664e:	d102      	bne.n	8006656 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2209      	movs	r2, #9
 8006654:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8006656:	7bbb      	ldrb	r3, [r7, #14]
 8006658:	2b05      	cmp	r3, #5
 800665a:	d102      	bne.n	8006662 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800665c:	2303      	movs	r3, #3
 800665e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006660:	e0d6      	b.n	8006810 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8006662:	7bbb      	ldrb	r3, [r7, #14]
 8006664:	2b04      	cmp	r3, #4
 8006666:	f040 80d3 	bne.w	8006810 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	220b      	movs	r2, #11
 800666e:	761a      	strb	r2, [r3, #24]
      break;
 8006670:	e0ce      	b.n	8006810 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6899      	ldr	r1, [r3, #8]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	899a      	ldrh	r2, [r3, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	795b      	ldrb	r3, [r3, #5]
 800667e:	2001      	movs	r0, #1
 8006680:	9000      	str	r0, [sp, #0]
 8006682:	6878      	ldr	r0, [r7, #4]
 8006684:	f000 f8ea 	bl	800685c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800668e:	b29a      	uxth	r2, r3
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2206      	movs	r2, #6
 8006698:	761a      	strb	r2, [r3, #24]
      break;
 800669a:	e0c0      	b.n	800681e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	795b      	ldrb	r3, [r3, #5]
 80066a0:	4619      	mov	r1, r3
 80066a2:	6878      	ldr	r0, [r7, #4]
 80066a4:	f000 fc00 	bl	8006ea8 <USBH_LL_GetURBState>
 80066a8:	4603      	mov	r3, r0
 80066aa:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80066ac:	7bbb      	ldrb	r3, [r7, #14]
 80066ae:	2b01      	cmp	r3, #1
 80066b0:	d103      	bne.n	80066ba <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2207      	movs	r2, #7
 80066b6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80066b8:	e0ac      	b.n	8006814 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80066ba:	7bbb      	ldrb	r3, [r7, #14]
 80066bc:	2b05      	cmp	r3, #5
 80066be:	d105      	bne.n	80066cc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	220c      	movs	r2, #12
 80066c4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80066c6:	2303      	movs	r3, #3
 80066c8:	73fb      	strb	r3, [r7, #15]
      break;
 80066ca:	e0a3      	b.n	8006814 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80066cc:	7bbb      	ldrb	r3, [r7, #14]
 80066ce:	2b02      	cmp	r3, #2
 80066d0:	d103      	bne.n	80066da <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2205      	movs	r2, #5
 80066d6:	761a      	strb	r2, [r3, #24]
      break;
 80066d8:	e09c      	b.n	8006814 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80066da:	7bbb      	ldrb	r3, [r7, #14]
 80066dc:	2b04      	cmp	r3, #4
 80066de:	f040 8099 	bne.w	8006814 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	220b      	movs	r2, #11
 80066e6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 80066e8:	2302      	movs	r3, #2
 80066ea:	73fb      	strb	r3, [r7, #15]
      break;
 80066ec:	e092      	b.n	8006814 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	791b      	ldrb	r3, [r3, #4]
 80066f2:	2200      	movs	r2, #0
 80066f4:	2100      	movs	r1, #0
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f000 f8d5 	bl	80068a6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006702:	b29a      	uxth	r2, r3
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2208      	movs	r2, #8
 800670c:	761a      	strb	r2, [r3, #24]

      break;
 800670e:	e086      	b.n	800681e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	791b      	ldrb	r3, [r3, #4]
 8006714:	4619      	mov	r1, r3
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 fbc6 	bl	8006ea8 <USBH_LL_GetURBState>
 800671c:	4603      	mov	r3, r0
 800671e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	2b01      	cmp	r3, #1
 8006724:	d105      	bne.n	8006732 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	220d      	movs	r2, #13
 800672a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800672c:	2300      	movs	r3, #0
 800672e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006730:	e072      	b.n	8006818 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8006732:	7bbb      	ldrb	r3, [r7, #14]
 8006734:	2b04      	cmp	r3, #4
 8006736:	d103      	bne.n	8006740 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	220b      	movs	r2, #11
 800673c:	761a      	strb	r2, [r3, #24]
      break;
 800673e:	e06b      	b.n	8006818 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8006740:	7bbb      	ldrb	r3, [r7, #14]
 8006742:	2b05      	cmp	r3, #5
 8006744:	d168      	bne.n	8006818 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8006746:	2303      	movs	r3, #3
 8006748:	73fb      	strb	r3, [r7, #15]
      break;
 800674a:	e065      	b.n	8006818 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	795b      	ldrb	r3, [r3, #5]
 8006750:	2201      	movs	r2, #1
 8006752:	9200      	str	r2, [sp, #0]
 8006754:	2200      	movs	r2, #0
 8006756:	2100      	movs	r1, #0
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f87f 	bl	800685c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8006764:	b29a      	uxth	r2, r3
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	220a      	movs	r2, #10
 800676e:	761a      	strb	r2, [r3, #24]
      break;
 8006770:	e055      	b.n	800681e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	795b      	ldrb	r3, [r3, #5]
 8006776:	4619      	mov	r1, r3
 8006778:	6878      	ldr	r0, [r7, #4]
 800677a:	f000 fb95 	bl	8006ea8 <USBH_LL_GetURBState>
 800677e:	4603      	mov	r3, r0
 8006780:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8006782:	7bbb      	ldrb	r3, [r7, #14]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d105      	bne.n	8006794 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8006788:	2300      	movs	r3, #0
 800678a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	220d      	movs	r2, #13
 8006790:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8006792:	e043      	b.n	800681c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8006794:	7bbb      	ldrb	r3, [r7, #14]
 8006796:	2b02      	cmp	r3, #2
 8006798:	d103      	bne.n	80067a2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	2209      	movs	r2, #9
 800679e:	761a      	strb	r2, [r3, #24]
      break;
 80067a0:	e03c      	b.n	800681c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80067a2:	7bbb      	ldrb	r3, [r7, #14]
 80067a4:	2b04      	cmp	r3, #4
 80067a6:	d139      	bne.n	800681c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	220b      	movs	r2, #11
 80067ac:	761a      	strb	r2, [r3, #24]
      break;
 80067ae:	e035      	b.n	800681c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	7e5b      	ldrb	r3, [r3, #25]
 80067b4:	3301      	adds	r3, #1
 80067b6:	b2da      	uxtb	r2, r3
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	765a      	strb	r2, [r3, #25]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	7e5b      	ldrb	r3, [r3, #25]
 80067c0:	2b02      	cmp	r3, #2
 80067c2:	d806      	bhi.n	80067d2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2201      	movs	r2, #1
 80067c8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2201      	movs	r2, #1
 80067ce:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80067d0:	e025      	b.n	800681e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80067d8:	2106      	movs	r1, #6
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2200      	movs	r2, #0
 80067e2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	795b      	ldrb	r3, [r3, #5]
 80067e8:	4619      	mov	r1, r3
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f90c 	bl	8006a08 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	791b      	ldrb	r3, [r3, #4]
 80067f4:	4619      	mov	r1, r3
 80067f6:	6878      	ldr	r0, [r7, #4]
 80067f8:	f000 f906 	bl	8006a08 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2200      	movs	r2, #0
 8006800:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8006802:	2302      	movs	r3, #2
 8006804:	73fb      	strb	r3, [r7, #15]
      break;
 8006806:	e00a      	b.n	800681e <USBH_HandleControl+0x2de>

    default:
      break;
 8006808:	bf00      	nop
 800680a:	e008      	b.n	800681e <USBH_HandleControl+0x2de>
      break;
 800680c:	bf00      	nop
 800680e:	e006      	b.n	800681e <USBH_HandleControl+0x2de>
      break;
 8006810:	bf00      	nop
 8006812:	e004      	b.n	800681e <USBH_HandleControl+0x2de>
      break;
 8006814:	bf00      	nop
 8006816:	e002      	b.n	800681e <USBH_HandleControl+0x2de>
      break;
 8006818:	bf00      	nop
 800681a:	e000      	b.n	800681e <USBH_HandleControl+0x2de>
      break;
 800681c:	bf00      	nop
  }

  return status;
 800681e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006820:	4618      	mov	r0, r3
 8006822:	3710      	adds	r7, #16
 8006824:	46bd      	mov	sp, r7
 8006826:	bd80      	pop	{r7, pc}

08006828 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b088      	sub	sp, #32
 800682c:	af04      	add	r7, sp, #16
 800682e:	60f8      	str	r0, [r7, #12]
 8006830:	60b9      	str	r1, [r7, #8]
 8006832:	4613      	mov	r3, r2
 8006834:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006836:	79f9      	ldrb	r1, [r7, #7]
 8006838:	2300      	movs	r3, #0
 800683a:	9303      	str	r3, [sp, #12]
 800683c:	2308      	movs	r3, #8
 800683e:	9302      	str	r3, [sp, #8]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	9301      	str	r3, [sp, #4]
 8006844:	2300      	movs	r3, #0
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	2300      	movs	r3, #0
 800684a:	2200      	movs	r2, #0
 800684c:	68f8      	ldr	r0, [r7, #12]
 800684e:	f000 fafa 	bl	8006e46 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8006852:	2300      	movs	r3, #0
}
 8006854:	4618      	mov	r0, r3
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b088      	sub	sp, #32
 8006860:	af04      	add	r7, sp, #16
 8006862:	60f8      	str	r0, [r7, #12]
 8006864:	60b9      	str	r1, [r7, #8]
 8006866:	4611      	mov	r1, r2
 8006868:	461a      	mov	r2, r3
 800686a:	460b      	mov	r3, r1
 800686c:	80fb      	strh	r3, [r7, #6]
 800686e:	4613      	mov	r3, r2
 8006870:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006878:	2b00      	cmp	r3, #0
 800687a:	d001      	beq.n	8006880 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800687c:	2300      	movs	r3, #0
 800687e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006880:	7979      	ldrb	r1, [r7, #5]
 8006882:	7e3b      	ldrb	r3, [r7, #24]
 8006884:	9303      	str	r3, [sp, #12]
 8006886:	88fb      	ldrh	r3, [r7, #6]
 8006888:	9302      	str	r3, [sp, #8]
 800688a:	68bb      	ldr	r3, [r7, #8]
 800688c:	9301      	str	r3, [sp, #4]
 800688e:	2301      	movs	r3, #1
 8006890:	9300      	str	r3, [sp, #0]
 8006892:	2300      	movs	r3, #0
 8006894:	2200      	movs	r2, #0
 8006896:	68f8      	ldr	r0, [r7, #12]
 8006898:	f000 fad5 	bl	8006e46 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3710      	adds	r7, #16
 80068a2:	46bd      	mov	sp, r7
 80068a4:	bd80      	pop	{r7, pc}

080068a6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80068a6:	b580      	push	{r7, lr}
 80068a8:	b088      	sub	sp, #32
 80068aa:	af04      	add	r7, sp, #16
 80068ac:	60f8      	str	r0, [r7, #12]
 80068ae:	60b9      	str	r1, [r7, #8]
 80068b0:	4611      	mov	r1, r2
 80068b2:	461a      	mov	r2, r3
 80068b4:	460b      	mov	r3, r1
 80068b6:	80fb      	strh	r3, [r7, #6]
 80068b8:	4613      	mov	r3, r2
 80068ba:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80068bc:	7979      	ldrb	r1, [r7, #5]
 80068be:	2300      	movs	r3, #0
 80068c0:	9303      	str	r3, [sp, #12]
 80068c2:	88fb      	ldrh	r3, [r7, #6]
 80068c4:	9302      	str	r3, [sp, #8]
 80068c6:	68bb      	ldr	r3, [r7, #8]
 80068c8:	9301      	str	r3, [sp, #4]
 80068ca:	2301      	movs	r3, #1
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	2300      	movs	r3, #0
 80068d0:	2201      	movs	r2, #1
 80068d2:	68f8      	ldr	r0, [r7, #12]
 80068d4:	f000 fab7 	bl	8006e46 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80068d8:	2300      	movs	r3, #0

}
 80068da:	4618      	mov	r0, r3
 80068dc:	3710      	adds	r7, #16
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b088      	sub	sp, #32
 80068e6:	af04      	add	r7, sp, #16
 80068e8:	60f8      	str	r0, [r7, #12]
 80068ea:	60b9      	str	r1, [r7, #8]
 80068ec:	4611      	mov	r1, r2
 80068ee:	461a      	mov	r2, r3
 80068f0:	460b      	mov	r3, r1
 80068f2:	80fb      	strh	r3, [r7, #6]
 80068f4:	4613      	mov	r3, r2
 80068f6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d001      	beq.n	8006906 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8006902:	2300      	movs	r3, #0
 8006904:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006906:	7979      	ldrb	r1, [r7, #5]
 8006908:	7e3b      	ldrb	r3, [r7, #24]
 800690a:	9303      	str	r3, [sp, #12]
 800690c:	88fb      	ldrh	r3, [r7, #6]
 800690e:	9302      	str	r3, [sp, #8]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	9301      	str	r3, [sp, #4]
 8006914:	2301      	movs	r3, #1
 8006916:	9300      	str	r3, [sp, #0]
 8006918:	2302      	movs	r3, #2
 800691a:	2200      	movs	r2, #0
 800691c:	68f8      	ldr	r0, [r7, #12]
 800691e:	f000 fa92 	bl	8006e46 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3710      	adds	r7, #16
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}

0800692c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b088      	sub	sp, #32
 8006930:	af04      	add	r7, sp, #16
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	60b9      	str	r1, [r7, #8]
 8006936:	4611      	mov	r1, r2
 8006938:	461a      	mov	r2, r3
 800693a:	460b      	mov	r3, r1
 800693c:	80fb      	strh	r3, [r7, #6]
 800693e:	4613      	mov	r3, r2
 8006940:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8006942:	7979      	ldrb	r1, [r7, #5]
 8006944:	2300      	movs	r3, #0
 8006946:	9303      	str	r3, [sp, #12]
 8006948:	88fb      	ldrh	r3, [r7, #6]
 800694a:	9302      	str	r3, [sp, #8]
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	9301      	str	r3, [sp, #4]
 8006950:	2301      	movs	r3, #1
 8006952:	9300      	str	r3, [sp, #0]
 8006954:	2302      	movs	r3, #2
 8006956:	2201      	movs	r2, #1
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f000 fa74 	bl	8006e46 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800695e:	2300      	movs	r3, #0
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b086      	sub	sp, #24
 800696c:	af04      	add	r7, sp, #16
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	4608      	mov	r0, r1
 8006972:	4611      	mov	r1, r2
 8006974:	461a      	mov	r2, r3
 8006976:	4603      	mov	r3, r0
 8006978:	70fb      	strb	r3, [r7, #3]
 800697a:	460b      	mov	r3, r1
 800697c:	70bb      	strb	r3, [r7, #2]
 800697e:	4613      	mov	r3, r2
 8006980:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8006982:	7878      	ldrb	r0, [r7, #1]
 8006984:	78ba      	ldrb	r2, [r7, #2]
 8006986:	78f9      	ldrb	r1, [r7, #3]
 8006988:	8b3b      	ldrh	r3, [r7, #24]
 800698a:	9302      	str	r3, [sp, #8]
 800698c:	7d3b      	ldrb	r3, [r7, #20]
 800698e:	9301      	str	r3, [sp, #4]
 8006990:	7c3b      	ldrb	r3, [r7, #16]
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	4603      	mov	r3, r0
 8006996:	6878      	ldr	r0, [r7, #4]
 8006998:	f000 fa07 	bl	8006daa <USBH_LL_OpenPipe>

  return USBH_OK;
 800699c:	2300      	movs	r3, #0
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3708      	adds	r7, #8
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}

080069a6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80069a6:	b580      	push	{r7, lr}
 80069a8:	b082      	sub	sp, #8
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	6078      	str	r0, [r7, #4]
 80069ae:	460b      	mov	r3, r1
 80069b0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 80069b2:	78fb      	ldrb	r3, [r7, #3]
 80069b4:	4619      	mov	r1, r3
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 fa26 	bl	8006e08 <USBH_LL_ClosePipe>

  return USBH_OK;
 80069bc:	2300      	movs	r3, #0
}
 80069be:	4618      	mov	r0, r3
 80069c0:	3708      	adds	r7, #8
 80069c2:	46bd      	mov	sp, r7
 80069c4:	bd80      	pop	{r7, pc}

080069c6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80069c6:	b580      	push	{r7, lr}
 80069c8:	b084      	sub	sp, #16
 80069ca:	af00      	add	r7, sp, #0
 80069cc:	6078      	str	r0, [r7, #4]
 80069ce:	460b      	mov	r3, r1
 80069d0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f836 	bl	8006a44 <USBH_GetFreePipe>
 80069d8:	4603      	mov	r3, r0
 80069da:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80069dc:	89fb      	ldrh	r3, [r7, #14]
 80069de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069e2:	4293      	cmp	r3, r2
 80069e4:	d00a      	beq.n	80069fc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80069e6:	78fa      	ldrb	r2, [r7, #3]
 80069e8:	89fb      	ldrh	r3, [r7, #14]
 80069ea:	f003 030f 	and.w	r3, r3, #15
 80069ee:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80069f2:	6879      	ldr	r1, [r7, #4]
 80069f4:	33e0      	adds	r3, #224	; 0xe0
 80069f6:	009b      	lsls	r3, r3, #2
 80069f8:	440b      	add	r3, r1
 80069fa:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80069fc:	89fb      	ldrh	r3, [r7, #14]
 80069fe:	b2db      	uxtb	r3, r3
}
 8006a00:	4618      	mov	r0, r3
 8006a02:	3710      	adds	r7, #16
 8006a04:	46bd      	mov	sp, r7
 8006a06:	bd80      	pop	{r7, pc}

08006a08 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	460b      	mov	r3, r1
 8006a12:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8006a14:	78fb      	ldrb	r3, [r7, #3]
 8006a16:	2b0f      	cmp	r3, #15
 8006a18:	d80d      	bhi.n	8006a36 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8006a1a:	78fb      	ldrb	r3, [r7, #3]
 8006a1c:	687a      	ldr	r2, [r7, #4]
 8006a1e:	33e0      	adds	r3, #224	; 0xe0
 8006a20:	009b      	lsls	r3, r3, #2
 8006a22:	4413      	add	r3, r2
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	78fb      	ldrb	r3, [r7, #3]
 8006a28:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8006a2c:	6879      	ldr	r1, [r7, #4]
 8006a2e:	33e0      	adds	r3, #224	; 0xe0
 8006a30:	009b      	lsls	r3, r3, #2
 8006a32:	440b      	add	r3, r1
 8006a34:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8006a36:	2300      	movs	r3, #0
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b085      	sub	sp, #20
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8006a4c:	2300      	movs	r3, #0
 8006a4e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006a50:	2300      	movs	r3, #0
 8006a52:	73fb      	strb	r3, [r7, #15]
 8006a54:	e00f      	b.n	8006a76 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8006a56:	7bfb      	ldrb	r3, [r7, #15]
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	33e0      	adds	r3, #224	; 0xe0
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	685b      	ldr	r3, [r3, #4]
 8006a62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d102      	bne.n	8006a70 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8006a6a:	7bfb      	ldrb	r3, [r7, #15]
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	e007      	b.n	8006a80 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8006a70:	7bfb      	ldrb	r3, [r7, #15]
 8006a72:	3301      	adds	r3, #1
 8006a74:	73fb      	strb	r3, [r7, #15]
 8006a76:	7bfb      	ldrb	r3, [r7, #15]
 8006a78:	2b0f      	cmp	r3, #15
 8006a7a:	d9ec      	bls.n	8006a56 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8006a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8006a80:	4618      	mov	r0, r3
 8006a82:	3714      	adds	r7, #20
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr

08006a8c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8006a8c:	b580      	push	{r7, lr}
 8006a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8006a90:	2201      	movs	r2, #1
 8006a92:	490e      	ldr	r1, [pc, #56]	; (8006acc <MX_USB_HOST_Init+0x40>)
 8006a94:	480e      	ldr	r0, [pc, #56]	; (8006ad0 <MX_USB_HOST_Init+0x44>)
 8006a96:	f7ff fb37 	bl	8006108 <USBH_Init>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d001      	beq.n	8006aa4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8006aa0:	f7f9 ffd2 	bl	8000a48 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8006aa4:	490b      	ldr	r1, [pc, #44]	; (8006ad4 <MX_USB_HOST_Init+0x48>)
 8006aa6:	480a      	ldr	r0, [pc, #40]	; (8006ad0 <MX_USB_HOST_Init+0x44>)
 8006aa8:	f7ff fbbc 	bl	8006224 <USBH_RegisterClass>
 8006aac:	4603      	mov	r3, r0
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d001      	beq.n	8006ab6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8006ab2:	f7f9 ffc9 	bl	8000a48 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8006ab6:	4806      	ldr	r0, [pc, #24]	; (8006ad0 <MX_USB_HOST_Init+0x44>)
 8006ab8:	f7ff fc40 	bl	800633c <USBH_Start>
 8006abc:	4603      	mov	r3, r0
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8006ac2:	f7f9 ffc1 	bl	8000a48 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8006ac6:	bf00      	nop
 8006ac8:	bd80      	pop	{r7, pc}
 8006aca:	bf00      	nop
 8006acc:	08006ad9 	.word	0x08006ad9
 8006ad0:	200001f0 	.word	0x200001f0
 8006ad4:	2000000c 	.word	0x2000000c

08006ad8 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b083      	sub	sp, #12
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8006ae4:	78fb      	ldrb	r3, [r7, #3]
 8006ae6:	3b01      	subs	r3, #1
 8006ae8:	2b04      	cmp	r3, #4
 8006aea:	d819      	bhi.n	8006b20 <USBH_UserProcess+0x48>
 8006aec:	a201      	add	r2, pc, #4	; (adr r2, 8006af4 <USBH_UserProcess+0x1c>)
 8006aee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006af2:	bf00      	nop
 8006af4:	08006b21 	.word	0x08006b21
 8006af8:	08006b11 	.word	0x08006b11
 8006afc:	08006b21 	.word	0x08006b21
 8006b00:	08006b19 	.word	0x08006b19
 8006b04:	08006b09 	.word	0x08006b09
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8006b08:	4b09      	ldr	r3, [pc, #36]	; (8006b30 <USBH_UserProcess+0x58>)
 8006b0a:	2203      	movs	r2, #3
 8006b0c:	701a      	strb	r2, [r3, #0]
  break;
 8006b0e:	e008      	b.n	8006b22 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8006b10:	4b07      	ldr	r3, [pc, #28]	; (8006b30 <USBH_UserProcess+0x58>)
 8006b12:	2202      	movs	r2, #2
 8006b14:	701a      	strb	r2, [r3, #0]
  break;
 8006b16:	e004      	b.n	8006b22 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8006b18:	4b05      	ldr	r3, [pc, #20]	; (8006b30 <USBH_UserProcess+0x58>)
 8006b1a:	2201      	movs	r2, #1
 8006b1c:	701a      	strb	r2, [r3, #0]
  break;
 8006b1e:	e000      	b.n	8006b22 <USBH_UserProcess+0x4a>

  default:
  break;
 8006b20:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8006b22:	bf00      	nop
 8006b24:	370c      	adds	r7, #12
 8006b26:	46bd      	mov	sp, r7
 8006b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2c:	4770      	bx	lr
 8006b2e:	bf00      	nop
 8006b30:	200005c8 	.word	0x200005c8

08006b34 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8006b34:	b580      	push	{r7, lr}
 8006b36:	b08a      	sub	sp, #40	; 0x28
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b3c:	f107 0314 	add.w	r3, r7, #20
 8006b40:	2200      	movs	r2, #0
 8006b42:	601a      	str	r2, [r3, #0]
 8006b44:	605a      	str	r2, [r3, #4]
 8006b46:	609a      	str	r2, [r3, #8]
 8006b48:	60da      	str	r2, [r3, #12]
 8006b4a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006b54:	d147      	bne.n	8006be6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006b56:	2300      	movs	r3, #0
 8006b58:	613b      	str	r3, [r7, #16]
 8006b5a:	4b25      	ldr	r3, [pc, #148]	; (8006bf0 <HAL_HCD_MspInit+0xbc>)
 8006b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b5e:	4a24      	ldr	r2, [pc, #144]	; (8006bf0 <HAL_HCD_MspInit+0xbc>)
 8006b60:	f043 0301 	orr.w	r3, r3, #1
 8006b64:	6313      	str	r3, [r2, #48]	; 0x30
 8006b66:	4b22      	ldr	r3, [pc, #136]	; (8006bf0 <HAL_HCD_MspInit+0xbc>)
 8006b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b6a:	f003 0301 	and.w	r3, r3, #1
 8006b6e:	613b      	str	r3, [r7, #16]
 8006b70:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8006b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8006b80:	f107 0314 	add.w	r3, r7, #20
 8006b84:	4619      	mov	r1, r3
 8006b86:	481b      	ldr	r0, [pc, #108]	; (8006bf4 <HAL_HCD_MspInit+0xc0>)
 8006b88:	f7fa fd92 	bl	80016b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8006b8c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8006b90:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b92:	2302      	movs	r3, #2
 8006b94:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b96:	2300      	movs	r3, #0
 8006b98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b9e:	230a      	movs	r3, #10
 8006ba0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ba2:	f107 0314 	add.w	r3, r7, #20
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	4812      	ldr	r0, [pc, #72]	; (8006bf4 <HAL_HCD_MspInit+0xc0>)
 8006baa:	f7fa fd81 	bl	80016b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006bae:	4b10      	ldr	r3, [pc, #64]	; (8006bf0 <HAL_HCD_MspInit+0xbc>)
 8006bb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bb2:	4a0f      	ldr	r2, [pc, #60]	; (8006bf0 <HAL_HCD_MspInit+0xbc>)
 8006bb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bb8:	6353      	str	r3, [r2, #52]	; 0x34
 8006bba:	2300      	movs	r3, #0
 8006bbc:	60fb      	str	r3, [r7, #12]
 8006bbe:	4b0c      	ldr	r3, [pc, #48]	; (8006bf0 <HAL_HCD_MspInit+0xbc>)
 8006bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bc2:	4a0b      	ldr	r2, [pc, #44]	; (8006bf0 <HAL_HCD_MspInit+0xbc>)
 8006bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8006bca:	4b09      	ldr	r3, [pc, #36]	; (8006bf0 <HAL_HCD_MspInit+0xbc>)
 8006bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bd2:	60fb      	str	r3, [r7, #12]
 8006bd4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	2100      	movs	r1, #0
 8006bda:	2043      	movs	r0, #67	; 0x43
 8006bdc:	f7fa fd31 	bl	8001642 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006be0:	2043      	movs	r0, #67	; 0x43
 8006be2:	f7fa fd4a 	bl	800167a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006be6:	bf00      	nop
 8006be8:	3728      	adds	r7, #40	; 0x28
 8006bea:	46bd      	mov	sp, r7
 8006bec:	bd80      	pop	{r7, pc}
 8006bee:	bf00      	nop
 8006bf0:	40023800 	.word	0x40023800
 8006bf4:	40020000 	.word	0x40020000

08006bf8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8006bf8:	b580      	push	{r7, lr}
 8006bfa:	b082      	sub	sp, #8
 8006bfc:	af00      	add	r7, sp, #0
 8006bfe:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006c06:	4618      	mov	r0, r3
 8006c08:	f7ff fbb7 	bl	800637a <USBH_LL_IncTimer>
}
 8006c0c:	bf00      	nop
 8006c0e:	3708      	adds	r7, #8
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b082      	sub	sp, #8
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006c22:	4618      	mov	r0, r3
 8006c24:	f7ff fbef 	bl	8006406 <USBH_LL_Connect>
}
 8006c28:	bf00      	nop
 8006c2a:	3708      	adds	r7, #8
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}

08006c30 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c30:	b580      	push	{r7, lr}
 8006c32:	b082      	sub	sp, #8
 8006c34:	af00      	add	r7, sp, #0
 8006c36:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006c3e:	4618      	mov	r0, r3
 8006c40:	f7ff fbf8 	bl	8006434 <USBH_LL_Disconnect>
}
 8006c44:	bf00      	nop
 8006c46:	3708      	adds	r7, #8
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}

08006c4c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	70fb      	strb	r3, [r7, #3]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8006c5c:	bf00      	nop
 8006c5e:	370c      	adds	r7, #12
 8006c60:	46bd      	mov	sp, r7
 8006c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c66:	4770      	bx	lr

08006c68 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006c76:	4618      	mov	r0, r3
 8006c78:	f7ff fba9 	bl	80063ce <USBH_LL_PortEnabled>
}
 8006c7c:	bf00      	nop
 8006c7e:	3708      	adds	r7, #8
 8006c80:	46bd      	mov	sp, r7
 8006c82:	bd80      	pop	{r7, pc}

08006c84 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8006c84:	b580      	push	{r7, lr}
 8006c86:	b082      	sub	sp, #8
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8006c92:	4618      	mov	r0, r3
 8006c94:	f7ff fba9 	bl	80063ea <USBH_LL_PortDisabled>
}
 8006c98:	bf00      	nop
 8006c9a:	3708      	adds	r7, #8
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8006ca0:	b580      	push	{r7, lr}
 8006ca2:	b082      	sub	sp, #8
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d12a      	bne.n	8006d08 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8006cb2:	4a18      	ldr	r2, [pc, #96]	; (8006d14 <USBH_LL_Init+0x74>)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	4a15      	ldr	r2, [pc, #84]	; (8006d14 <USBH_LL_Init+0x74>)
 8006cbe:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006cc2:	4b14      	ldr	r3, [pc, #80]	; (8006d14 <USBH_LL_Init+0x74>)
 8006cc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006cc8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8006cca:	4b12      	ldr	r3, [pc, #72]	; (8006d14 <USBH_LL_Init+0x74>)
 8006ccc:	2208      	movs	r2, #8
 8006cce:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8006cd0:	4b10      	ldr	r3, [pc, #64]	; (8006d14 <USBH_LL_Init+0x74>)
 8006cd2:	2201      	movs	r2, #1
 8006cd4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006cd6:	4b0f      	ldr	r3, [pc, #60]	; (8006d14 <USBH_LL_Init+0x74>)
 8006cd8:	2200      	movs	r2, #0
 8006cda:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8006cdc:	4b0d      	ldr	r3, [pc, #52]	; (8006d14 <USBH_LL_Init+0x74>)
 8006cde:	2202      	movs	r2, #2
 8006ce0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006ce2:	4b0c      	ldr	r3, [pc, #48]	; (8006d14 <USBH_LL_Init+0x74>)
 8006ce4:	2200      	movs	r2, #0
 8006ce6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8006ce8:	480a      	ldr	r0, [pc, #40]	; (8006d14 <USBH_LL_Init+0x74>)
 8006cea:	f7fa fe96 	bl	8001a1a <HAL_HCD_Init>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d001      	beq.n	8006cf8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8006cf4:	f7f9 fea8 	bl	8000a48 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8006cf8:	4806      	ldr	r0, [pc, #24]	; (8006d14 <USBH_LL_Init+0x74>)
 8006cfa:	f7fb fa6c 	bl	80021d6 <HAL_HCD_GetCurrentFrame>
 8006cfe:	4603      	mov	r3, r0
 8006d00:	4619      	mov	r1, r3
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff fb2a 	bl	800635c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8006d08:	2300      	movs	r3, #0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}
 8006d12:	bf00      	nop
 8006d14:	200005cc 	.word	0x200005cc

08006d18 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d20:	2300      	movs	r3, #0
 8006d22:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006d24:	2300      	movs	r3, #0
 8006d26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006d2e:	4618      	mov	r0, r3
 8006d30:	f7fb f9e9 	bl	8002106 <HAL_HCD_Start>
 8006d34:	4603      	mov	r3, r0
 8006d36:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006d38:	7bfb      	ldrb	r3, [r7, #15]
 8006d3a:	4618      	mov	r0, r3
 8006d3c:	f000 f90e 	bl	8006f5c <USBH_Get_USB_Status>
 8006d40:	4603      	mov	r3, r0
 8006d42:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d44:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d46:	4618      	mov	r0, r3
 8006d48:	3710      	adds	r7, #16
 8006d4a:	46bd      	mov	sp, r7
 8006d4c:	bd80      	pop	{r7, pc}

08006d4e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8006d4e:	b580      	push	{r7, lr}
 8006d50:	b084      	sub	sp, #16
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d56:	2300      	movs	r3, #0
 8006d58:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fb f9f1 	bl	800214c <HAL_HCD_Stop>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006d6e:	7bfb      	ldrb	r3, [r7, #15]
 8006d70:	4618      	mov	r0, r3
 8006d72:	f000 f8f3 	bl	8006f5c <USBH_Get_USB_Status>
 8006d76:	4603      	mov	r3, r0
 8006d78:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d7a:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	3710      	adds	r7, #16
 8006d80:	46bd      	mov	sp, r7
 8006d82:	bd80      	pop	{r7, pc}

08006d84 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b082      	sub	sp, #8
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]
 8006d8c:	460b      	mov	r3, r1
 8006d8e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006d96:	78fa      	ldrb	r2, [r7, #3]
 8006d98:	4611      	mov	r1, r2
 8006d9a:	4618      	mov	r0, r3
 8006d9c:	f7fb fa07 	bl	80021ae <HAL_HCD_HC_GetXferCount>
 8006da0:	4603      	mov	r3, r0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	3708      	adds	r7, #8
 8006da6:	46bd      	mov	sp, r7
 8006da8:	bd80      	pop	{r7, pc}

08006daa <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8006daa:	b590      	push	{r4, r7, lr}
 8006dac:	b089      	sub	sp, #36	; 0x24
 8006dae:	af04      	add	r7, sp, #16
 8006db0:	6078      	str	r0, [r7, #4]
 8006db2:	4608      	mov	r0, r1
 8006db4:	4611      	mov	r1, r2
 8006db6:	461a      	mov	r2, r3
 8006db8:	4603      	mov	r3, r0
 8006dba:	70fb      	strb	r3, [r7, #3]
 8006dbc:	460b      	mov	r3, r1
 8006dbe:	70bb      	strb	r3, [r7, #2]
 8006dc0:	4613      	mov	r3, r2
 8006dc2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006dd2:	787c      	ldrb	r4, [r7, #1]
 8006dd4:	78ba      	ldrb	r2, [r7, #2]
 8006dd6:	78f9      	ldrb	r1, [r7, #3]
 8006dd8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006dda:	9302      	str	r3, [sp, #8]
 8006ddc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006de0:	9301      	str	r3, [sp, #4]
 8006de2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006de6:	9300      	str	r3, [sp, #0]
 8006de8:	4623      	mov	r3, r4
 8006dea:	f7fa fe78 	bl	8001ade <HAL_HCD_HC_Init>
 8006dee:	4603      	mov	r3, r0
 8006df0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8006df2:	7bfb      	ldrb	r3, [r7, #15]
 8006df4:	4618      	mov	r0, r3
 8006df6:	f000 f8b1 	bl	8006f5c <USBH_Get_USB_Status>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dfe:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	bd90      	pop	{r4, r7, pc}

08006e08 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006e08:	b580      	push	{r7, lr}
 8006e0a:	b084      	sub	sp, #16
 8006e0c:	af00      	add	r7, sp, #0
 8006e0e:	6078      	str	r0, [r7, #4]
 8006e10:	460b      	mov	r3, r1
 8006e12:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e14:	2300      	movs	r3, #0
 8006e16:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006e22:	78fa      	ldrb	r2, [r7, #3]
 8006e24:	4611      	mov	r1, r2
 8006e26:	4618      	mov	r0, r3
 8006e28:	f7fa fee8 	bl	8001bfc <HAL_HCD_HC_Halt>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8006e30:	7bfb      	ldrb	r3, [r7, #15]
 8006e32:	4618      	mov	r0, r3
 8006e34:	f000 f892 	bl	8006f5c <USBH_Get_USB_Status>
 8006e38:	4603      	mov	r3, r0
 8006e3a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3710      	adds	r7, #16
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8006e46:	b590      	push	{r4, r7, lr}
 8006e48:	b089      	sub	sp, #36	; 0x24
 8006e4a:	af04      	add	r7, sp, #16
 8006e4c:	6078      	str	r0, [r7, #4]
 8006e4e:	4608      	mov	r0, r1
 8006e50:	4611      	mov	r1, r2
 8006e52:	461a      	mov	r2, r3
 8006e54:	4603      	mov	r3, r0
 8006e56:	70fb      	strb	r3, [r7, #3]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	70bb      	strb	r3, [r7, #2]
 8006e5c:	4613      	mov	r3, r2
 8006e5e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e60:	2300      	movs	r3, #0
 8006e62:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006e64:	2300      	movs	r3, #0
 8006e66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8006e6e:	787c      	ldrb	r4, [r7, #1]
 8006e70:	78ba      	ldrb	r2, [r7, #2]
 8006e72:	78f9      	ldrb	r1, [r7, #3]
 8006e74:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006e78:	9303      	str	r3, [sp, #12]
 8006e7a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8006e7c:	9302      	str	r3, [sp, #8]
 8006e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e80:	9301      	str	r3, [sp, #4]
 8006e82:	f897 3020 	ldrb.w	r3, [r7, #32]
 8006e86:	9300      	str	r3, [sp, #0]
 8006e88:	4623      	mov	r3, r4
 8006e8a:	f7fa fedb 	bl	8001c44 <HAL_HCD_HC_SubmitRequest>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8006e92:	7bfb      	ldrb	r3, [r7, #15]
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 f861 	bl	8006f5c <USBH_Get_USB_Status>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3714      	adds	r7, #20
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd90      	pop	{r4, r7, pc}

08006ea8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b082      	sub	sp, #8
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]
 8006eb0:	460b      	mov	r3, r1
 8006eb2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006eba:	78fa      	ldrb	r2, [r7, #3]
 8006ebc:	4611      	mov	r1, r2
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f7fb f961 	bl	8002186 <HAL_HCD_HC_GetURBState>
 8006ec4:	4603      	mov	r3, r0
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	3708      	adds	r7, #8
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	bd80      	pop	{r7, pc}

08006ece <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8006ece:	b580      	push	{r7, lr}
 8006ed0:	b082      	sub	sp, #8
 8006ed2:	af00      	add	r7, sp, #0
 8006ed4:	6078      	str	r0, [r7, #4]
 8006ed6:	460b      	mov	r3, r1
 8006ed8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8006ee0:	2b01      	cmp	r3, #1
 8006ee2:	d103      	bne.n	8006eec <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8006ee4:	78fb      	ldrb	r3, [r7, #3]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 f864 	bl	8006fb4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8006eec:	20c8      	movs	r0, #200	; 0xc8
 8006eee:	f7fa f847 	bl	8000f80 <HAL_Delay>
  return USBH_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3708      	adds	r7, #8
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	6078      	str	r0, [r7, #4]
 8006f04:	460b      	mov	r3, r1
 8006f06:	70fb      	strb	r3, [r7, #3]
 8006f08:	4613      	mov	r3, r2
 8006f0a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8006f12:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8006f14:	78fb      	ldrb	r3, [r7, #3]
 8006f16:	68fa      	ldr	r2, [r7, #12]
 8006f18:	212c      	movs	r1, #44	; 0x2c
 8006f1a:	fb01 f303 	mul.w	r3, r1, r3
 8006f1e:	4413      	add	r3, r2
 8006f20:	333b      	adds	r3, #59	; 0x3b
 8006f22:	781b      	ldrb	r3, [r3, #0]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d009      	beq.n	8006f3c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8006f28:	78fb      	ldrb	r3, [r7, #3]
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	212c      	movs	r1, #44	; 0x2c
 8006f2e:	fb01 f303 	mul.w	r3, r1, r3
 8006f32:	4413      	add	r3, r2
 8006f34:	3354      	adds	r3, #84	; 0x54
 8006f36:	78ba      	ldrb	r2, [r7, #2]
 8006f38:	701a      	strb	r2, [r3, #0]
 8006f3a:	e008      	b.n	8006f4e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8006f3c:	78fb      	ldrb	r3, [r7, #3]
 8006f3e:	68fa      	ldr	r2, [r7, #12]
 8006f40:	212c      	movs	r1, #44	; 0x2c
 8006f42:	fb01 f303 	mul.w	r3, r1, r3
 8006f46:	4413      	add	r3, r2
 8006f48:	3355      	adds	r3, #85	; 0x55
 8006f4a:	78ba      	ldrb	r2, [r7, #2]
 8006f4c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8006f4e:	2300      	movs	r3, #0
}
 8006f50:	4618      	mov	r0, r3
 8006f52:	3714      	adds	r7, #20
 8006f54:	46bd      	mov	sp, r7
 8006f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5a:	4770      	bx	lr

08006f5c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006f5c:	b480      	push	{r7}
 8006f5e:	b085      	sub	sp, #20
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	4603      	mov	r3, r0
 8006f64:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8006f66:	2300      	movs	r3, #0
 8006f68:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006f6a:	79fb      	ldrb	r3, [r7, #7]
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d817      	bhi.n	8006fa0 <USBH_Get_USB_Status+0x44>
 8006f70:	a201      	add	r2, pc, #4	; (adr r2, 8006f78 <USBH_Get_USB_Status+0x1c>)
 8006f72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f76:	bf00      	nop
 8006f78:	08006f89 	.word	0x08006f89
 8006f7c:	08006f8f 	.word	0x08006f8f
 8006f80:	08006f95 	.word	0x08006f95
 8006f84:	08006f9b 	.word	0x08006f9b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	73fb      	strb	r3, [r7, #15]
    break;
 8006f8c:	e00b      	b.n	8006fa6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8006f8e:	2302      	movs	r3, #2
 8006f90:	73fb      	strb	r3, [r7, #15]
    break;
 8006f92:	e008      	b.n	8006fa6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8006f94:	2301      	movs	r3, #1
 8006f96:	73fb      	strb	r3, [r7, #15]
    break;
 8006f98:	e005      	b.n	8006fa6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8006f9a:	2302      	movs	r3, #2
 8006f9c:	73fb      	strb	r3, [r7, #15]
    break;
 8006f9e:	e002      	b.n	8006fa6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8006fa0:	2302      	movs	r3, #2
 8006fa2:	73fb      	strb	r3, [r7, #15]
    break;
 8006fa4:	bf00      	nop
  }
  return usb_status;
 8006fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	4603      	mov	r3, r0
 8006fbc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8006fbe:	79fb      	ldrb	r3, [r7, #7]
 8006fc0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8006fc2:	79fb      	ldrb	r3, [r7, #7]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d102      	bne.n	8006fce <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	73fb      	strb	r3, [r7, #15]
 8006fcc:	e001      	b.n	8006fd2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8006fd2:	7bfb      	ldrb	r3, [r7, #15]
 8006fd4:	461a      	mov	r2, r3
 8006fd6:	2101      	movs	r1, #1
 8006fd8:	4803      	ldr	r0, [pc, #12]	; (8006fe8 <MX_DriverVbusFS+0x34>)
 8006fda:	f7fa fd05 	bl	80019e8 <HAL_GPIO_WritePin>
}
 8006fde:	bf00      	nop
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
 8006fe6:	bf00      	nop
 8006fe8:	40020800 	.word	0x40020800

08006fec <__errno>:
 8006fec:	4b01      	ldr	r3, [pc, #4]	; (8006ff4 <__errno+0x8>)
 8006fee:	6818      	ldr	r0, [r3, #0]
 8006ff0:	4770      	bx	lr
 8006ff2:	bf00      	nop
 8006ff4:	2000002c 	.word	0x2000002c

08006ff8 <__libc_init_array>:
 8006ff8:	b570      	push	{r4, r5, r6, lr}
 8006ffa:	4d0d      	ldr	r5, [pc, #52]	; (8007030 <__libc_init_array+0x38>)
 8006ffc:	4c0d      	ldr	r4, [pc, #52]	; (8007034 <__libc_init_array+0x3c>)
 8006ffe:	1b64      	subs	r4, r4, r5
 8007000:	10a4      	asrs	r4, r4, #2
 8007002:	2600      	movs	r6, #0
 8007004:	42a6      	cmp	r6, r4
 8007006:	d109      	bne.n	800701c <__libc_init_array+0x24>
 8007008:	4d0b      	ldr	r5, [pc, #44]	; (8007038 <__libc_init_array+0x40>)
 800700a:	4c0c      	ldr	r4, [pc, #48]	; (800703c <__libc_init_array+0x44>)
 800700c:	f000 f92e 	bl	800726c <_init>
 8007010:	1b64      	subs	r4, r4, r5
 8007012:	10a4      	asrs	r4, r4, #2
 8007014:	2600      	movs	r6, #0
 8007016:	42a6      	cmp	r6, r4
 8007018:	d105      	bne.n	8007026 <__libc_init_array+0x2e>
 800701a:	bd70      	pop	{r4, r5, r6, pc}
 800701c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007020:	4798      	blx	r3
 8007022:	3601      	adds	r6, #1
 8007024:	e7ee      	b.n	8007004 <__libc_init_array+0xc>
 8007026:	f855 3b04 	ldr.w	r3, [r5], #4
 800702a:	4798      	blx	r3
 800702c:	3601      	adds	r6, #1
 800702e:	e7f2      	b.n	8007016 <__libc_init_array+0x1e>
 8007030:	080072a8 	.word	0x080072a8
 8007034:	080072a8 	.word	0x080072a8
 8007038:	080072a8 	.word	0x080072a8
 800703c:	080072ac 	.word	0x080072ac

08007040 <malloc>:
 8007040:	4b02      	ldr	r3, [pc, #8]	; (800704c <malloc+0xc>)
 8007042:	4601      	mov	r1, r0
 8007044:	6818      	ldr	r0, [r3, #0]
 8007046:	f000 b87f 	b.w	8007148 <_malloc_r>
 800704a:	bf00      	nop
 800704c:	2000002c 	.word	0x2000002c

08007050 <free>:
 8007050:	4b02      	ldr	r3, [pc, #8]	; (800705c <free+0xc>)
 8007052:	4601      	mov	r1, r0
 8007054:	6818      	ldr	r0, [r3, #0]
 8007056:	f000 b80b 	b.w	8007070 <_free_r>
 800705a:	bf00      	nop
 800705c:	2000002c 	.word	0x2000002c

08007060 <memset>:
 8007060:	4402      	add	r2, r0
 8007062:	4603      	mov	r3, r0
 8007064:	4293      	cmp	r3, r2
 8007066:	d100      	bne.n	800706a <memset+0xa>
 8007068:	4770      	bx	lr
 800706a:	f803 1b01 	strb.w	r1, [r3], #1
 800706e:	e7f9      	b.n	8007064 <memset+0x4>

08007070 <_free_r>:
 8007070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007072:	2900      	cmp	r1, #0
 8007074:	d044      	beq.n	8007100 <_free_r+0x90>
 8007076:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800707a:	9001      	str	r0, [sp, #4]
 800707c:	2b00      	cmp	r3, #0
 800707e:	f1a1 0404 	sub.w	r4, r1, #4
 8007082:	bfb8      	it	lt
 8007084:	18e4      	addlt	r4, r4, r3
 8007086:	f000 f8e3 	bl	8007250 <__malloc_lock>
 800708a:	4a1e      	ldr	r2, [pc, #120]	; (8007104 <_free_r+0x94>)
 800708c:	9801      	ldr	r0, [sp, #4]
 800708e:	6813      	ldr	r3, [r2, #0]
 8007090:	b933      	cbnz	r3, 80070a0 <_free_r+0x30>
 8007092:	6063      	str	r3, [r4, #4]
 8007094:	6014      	str	r4, [r2, #0]
 8007096:	b003      	add	sp, #12
 8007098:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800709c:	f000 b8de 	b.w	800725c <__malloc_unlock>
 80070a0:	42a3      	cmp	r3, r4
 80070a2:	d908      	bls.n	80070b6 <_free_r+0x46>
 80070a4:	6825      	ldr	r5, [r4, #0]
 80070a6:	1961      	adds	r1, r4, r5
 80070a8:	428b      	cmp	r3, r1
 80070aa:	bf01      	itttt	eq
 80070ac:	6819      	ldreq	r1, [r3, #0]
 80070ae:	685b      	ldreq	r3, [r3, #4]
 80070b0:	1949      	addeq	r1, r1, r5
 80070b2:	6021      	streq	r1, [r4, #0]
 80070b4:	e7ed      	b.n	8007092 <_free_r+0x22>
 80070b6:	461a      	mov	r2, r3
 80070b8:	685b      	ldr	r3, [r3, #4]
 80070ba:	b10b      	cbz	r3, 80070c0 <_free_r+0x50>
 80070bc:	42a3      	cmp	r3, r4
 80070be:	d9fa      	bls.n	80070b6 <_free_r+0x46>
 80070c0:	6811      	ldr	r1, [r2, #0]
 80070c2:	1855      	adds	r5, r2, r1
 80070c4:	42a5      	cmp	r5, r4
 80070c6:	d10b      	bne.n	80070e0 <_free_r+0x70>
 80070c8:	6824      	ldr	r4, [r4, #0]
 80070ca:	4421      	add	r1, r4
 80070cc:	1854      	adds	r4, r2, r1
 80070ce:	42a3      	cmp	r3, r4
 80070d0:	6011      	str	r1, [r2, #0]
 80070d2:	d1e0      	bne.n	8007096 <_free_r+0x26>
 80070d4:	681c      	ldr	r4, [r3, #0]
 80070d6:	685b      	ldr	r3, [r3, #4]
 80070d8:	6053      	str	r3, [r2, #4]
 80070da:	4421      	add	r1, r4
 80070dc:	6011      	str	r1, [r2, #0]
 80070de:	e7da      	b.n	8007096 <_free_r+0x26>
 80070e0:	d902      	bls.n	80070e8 <_free_r+0x78>
 80070e2:	230c      	movs	r3, #12
 80070e4:	6003      	str	r3, [r0, #0]
 80070e6:	e7d6      	b.n	8007096 <_free_r+0x26>
 80070e8:	6825      	ldr	r5, [r4, #0]
 80070ea:	1961      	adds	r1, r4, r5
 80070ec:	428b      	cmp	r3, r1
 80070ee:	bf04      	itt	eq
 80070f0:	6819      	ldreq	r1, [r3, #0]
 80070f2:	685b      	ldreq	r3, [r3, #4]
 80070f4:	6063      	str	r3, [r4, #4]
 80070f6:	bf04      	itt	eq
 80070f8:	1949      	addeq	r1, r1, r5
 80070fa:	6021      	streq	r1, [r4, #0]
 80070fc:	6054      	str	r4, [r2, #4]
 80070fe:	e7ca      	b.n	8007096 <_free_r+0x26>
 8007100:	b003      	add	sp, #12
 8007102:	bd30      	pop	{r4, r5, pc}
 8007104:	200008d0 	.word	0x200008d0

08007108 <sbrk_aligned>:
 8007108:	b570      	push	{r4, r5, r6, lr}
 800710a:	4e0e      	ldr	r6, [pc, #56]	; (8007144 <sbrk_aligned+0x3c>)
 800710c:	460c      	mov	r4, r1
 800710e:	6831      	ldr	r1, [r6, #0]
 8007110:	4605      	mov	r5, r0
 8007112:	b911      	cbnz	r1, 800711a <sbrk_aligned+0x12>
 8007114:	f000 f88c 	bl	8007230 <_sbrk_r>
 8007118:	6030      	str	r0, [r6, #0]
 800711a:	4621      	mov	r1, r4
 800711c:	4628      	mov	r0, r5
 800711e:	f000 f887 	bl	8007230 <_sbrk_r>
 8007122:	1c43      	adds	r3, r0, #1
 8007124:	d00a      	beq.n	800713c <sbrk_aligned+0x34>
 8007126:	1cc4      	adds	r4, r0, #3
 8007128:	f024 0403 	bic.w	r4, r4, #3
 800712c:	42a0      	cmp	r0, r4
 800712e:	d007      	beq.n	8007140 <sbrk_aligned+0x38>
 8007130:	1a21      	subs	r1, r4, r0
 8007132:	4628      	mov	r0, r5
 8007134:	f000 f87c 	bl	8007230 <_sbrk_r>
 8007138:	3001      	adds	r0, #1
 800713a:	d101      	bne.n	8007140 <sbrk_aligned+0x38>
 800713c:	f04f 34ff 	mov.w	r4, #4294967295
 8007140:	4620      	mov	r0, r4
 8007142:	bd70      	pop	{r4, r5, r6, pc}
 8007144:	200008d4 	.word	0x200008d4

08007148 <_malloc_r>:
 8007148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800714c:	1ccd      	adds	r5, r1, #3
 800714e:	f025 0503 	bic.w	r5, r5, #3
 8007152:	3508      	adds	r5, #8
 8007154:	2d0c      	cmp	r5, #12
 8007156:	bf38      	it	cc
 8007158:	250c      	movcc	r5, #12
 800715a:	2d00      	cmp	r5, #0
 800715c:	4607      	mov	r7, r0
 800715e:	db01      	blt.n	8007164 <_malloc_r+0x1c>
 8007160:	42a9      	cmp	r1, r5
 8007162:	d905      	bls.n	8007170 <_malloc_r+0x28>
 8007164:	230c      	movs	r3, #12
 8007166:	603b      	str	r3, [r7, #0]
 8007168:	2600      	movs	r6, #0
 800716a:	4630      	mov	r0, r6
 800716c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007170:	4e2e      	ldr	r6, [pc, #184]	; (800722c <_malloc_r+0xe4>)
 8007172:	f000 f86d 	bl	8007250 <__malloc_lock>
 8007176:	6833      	ldr	r3, [r6, #0]
 8007178:	461c      	mov	r4, r3
 800717a:	bb34      	cbnz	r4, 80071ca <_malloc_r+0x82>
 800717c:	4629      	mov	r1, r5
 800717e:	4638      	mov	r0, r7
 8007180:	f7ff ffc2 	bl	8007108 <sbrk_aligned>
 8007184:	1c43      	adds	r3, r0, #1
 8007186:	4604      	mov	r4, r0
 8007188:	d14d      	bne.n	8007226 <_malloc_r+0xde>
 800718a:	6834      	ldr	r4, [r6, #0]
 800718c:	4626      	mov	r6, r4
 800718e:	2e00      	cmp	r6, #0
 8007190:	d140      	bne.n	8007214 <_malloc_r+0xcc>
 8007192:	6823      	ldr	r3, [r4, #0]
 8007194:	4631      	mov	r1, r6
 8007196:	4638      	mov	r0, r7
 8007198:	eb04 0803 	add.w	r8, r4, r3
 800719c:	f000 f848 	bl	8007230 <_sbrk_r>
 80071a0:	4580      	cmp	r8, r0
 80071a2:	d13a      	bne.n	800721a <_malloc_r+0xd2>
 80071a4:	6821      	ldr	r1, [r4, #0]
 80071a6:	3503      	adds	r5, #3
 80071a8:	1a6d      	subs	r5, r5, r1
 80071aa:	f025 0503 	bic.w	r5, r5, #3
 80071ae:	3508      	adds	r5, #8
 80071b0:	2d0c      	cmp	r5, #12
 80071b2:	bf38      	it	cc
 80071b4:	250c      	movcc	r5, #12
 80071b6:	4629      	mov	r1, r5
 80071b8:	4638      	mov	r0, r7
 80071ba:	f7ff ffa5 	bl	8007108 <sbrk_aligned>
 80071be:	3001      	adds	r0, #1
 80071c0:	d02b      	beq.n	800721a <_malloc_r+0xd2>
 80071c2:	6823      	ldr	r3, [r4, #0]
 80071c4:	442b      	add	r3, r5
 80071c6:	6023      	str	r3, [r4, #0]
 80071c8:	e00e      	b.n	80071e8 <_malloc_r+0xa0>
 80071ca:	6822      	ldr	r2, [r4, #0]
 80071cc:	1b52      	subs	r2, r2, r5
 80071ce:	d41e      	bmi.n	800720e <_malloc_r+0xc6>
 80071d0:	2a0b      	cmp	r2, #11
 80071d2:	d916      	bls.n	8007202 <_malloc_r+0xba>
 80071d4:	1961      	adds	r1, r4, r5
 80071d6:	42a3      	cmp	r3, r4
 80071d8:	6025      	str	r5, [r4, #0]
 80071da:	bf18      	it	ne
 80071dc:	6059      	strne	r1, [r3, #4]
 80071de:	6863      	ldr	r3, [r4, #4]
 80071e0:	bf08      	it	eq
 80071e2:	6031      	streq	r1, [r6, #0]
 80071e4:	5162      	str	r2, [r4, r5]
 80071e6:	604b      	str	r3, [r1, #4]
 80071e8:	4638      	mov	r0, r7
 80071ea:	f104 060b 	add.w	r6, r4, #11
 80071ee:	f000 f835 	bl	800725c <__malloc_unlock>
 80071f2:	f026 0607 	bic.w	r6, r6, #7
 80071f6:	1d23      	adds	r3, r4, #4
 80071f8:	1af2      	subs	r2, r6, r3
 80071fa:	d0b6      	beq.n	800716a <_malloc_r+0x22>
 80071fc:	1b9b      	subs	r3, r3, r6
 80071fe:	50a3      	str	r3, [r4, r2]
 8007200:	e7b3      	b.n	800716a <_malloc_r+0x22>
 8007202:	6862      	ldr	r2, [r4, #4]
 8007204:	42a3      	cmp	r3, r4
 8007206:	bf0c      	ite	eq
 8007208:	6032      	streq	r2, [r6, #0]
 800720a:	605a      	strne	r2, [r3, #4]
 800720c:	e7ec      	b.n	80071e8 <_malloc_r+0xa0>
 800720e:	4623      	mov	r3, r4
 8007210:	6864      	ldr	r4, [r4, #4]
 8007212:	e7b2      	b.n	800717a <_malloc_r+0x32>
 8007214:	4634      	mov	r4, r6
 8007216:	6876      	ldr	r6, [r6, #4]
 8007218:	e7b9      	b.n	800718e <_malloc_r+0x46>
 800721a:	230c      	movs	r3, #12
 800721c:	603b      	str	r3, [r7, #0]
 800721e:	4638      	mov	r0, r7
 8007220:	f000 f81c 	bl	800725c <__malloc_unlock>
 8007224:	e7a1      	b.n	800716a <_malloc_r+0x22>
 8007226:	6025      	str	r5, [r4, #0]
 8007228:	e7de      	b.n	80071e8 <_malloc_r+0xa0>
 800722a:	bf00      	nop
 800722c:	200008d0 	.word	0x200008d0

08007230 <_sbrk_r>:
 8007230:	b538      	push	{r3, r4, r5, lr}
 8007232:	4d06      	ldr	r5, [pc, #24]	; (800724c <_sbrk_r+0x1c>)
 8007234:	2300      	movs	r3, #0
 8007236:	4604      	mov	r4, r0
 8007238:	4608      	mov	r0, r1
 800723a:	602b      	str	r3, [r5, #0]
 800723c:	f7f9 fdbc 	bl	8000db8 <_sbrk>
 8007240:	1c43      	adds	r3, r0, #1
 8007242:	d102      	bne.n	800724a <_sbrk_r+0x1a>
 8007244:	682b      	ldr	r3, [r5, #0]
 8007246:	b103      	cbz	r3, 800724a <_sbrk_r+0x1a>
 8007248:	6023      	str	r3, [r4, #0]
 800724a:	bd38      	pop	{r3, r4, r5, pc}
 800724c:	200008d8 	.word	0x200008d8

08007250 <__malloc_lock>:
 8007250:	4801      	ldr	r0, [pc, #4]	; (8007258 <__malloc_lock+0x8>)
 8007252:	f000 b809 	b.w	8007268 <__retarget_lock_acquire_recursive>
 8007256:	bf00      	nop
 8007258:	200008dc 	.word	0x200008dc

0800725c <__malloc_unlock>:
 800725c:	4801      	ldr	r0, [pc, #4]	; (8007264 <__malloc_unlock+0x8>)
 800725e:	f000 b804 	b.w	800726a <__retarget_lock_release_recursive>
 8007262:	bf00      	nop
 8007264:	200008dc 	.word	0x200008dc

08007268 <__retarget_lock_acquire_recursive>:
 8007268:	4770      	bx	lr

0800726a <__retarget_lock_release_recursive>:
 800726a:	4770      	bx	lr

0800726c <_init>:
 800726c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726e:	bf00      	nop
 8007270:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007272:	bc08      	pop	{r3}
 8007274:	469e      	mov	lr, r3
 8007276:	4770      	bx	lr

08007278 <_fini>:
 8007278:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800727a:	bf00      	nop
 800727c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800727e:	bc08      	pop	{r3}
 8007280:	469e      	mov	lr, r3
 8007282:	4770      	bx	lr
