
TEMP_SENS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008904  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08008a94  08008a94  00018a94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008afc  08008afc  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08008afc  08008afc  00018afc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b04  08008b04  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b04  08008b04  00018b04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008b08  08008b08  00018b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08008b0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00000898  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000940  20000940  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a68a  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ddd  00000000  00000000  0003a762  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  0003e540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014c0  00000000  00000000  0003fba0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d1b  00000000  00000000  00041060  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d641  00000000  00000000  00067d7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e0502  00000000  00000000  000853bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001658be  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006408  00000000  00000000  00165910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a7c 	.word	0x08008a7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	08008a7c 	.word	0x08008a7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2f>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a24:	bf24      	itt	cs
 8000a26:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a2a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a2e:	d90d      	bls.n	8000a4c <__aeabi_d2f+0x30>
 8000a30:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a34:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a38:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a3c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a40:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a44:	bf08      	it	eq
 8000a46:	f020 0001 	biceq.w	r0, r0, #1
 8000a4a:	4770      	bx	lr
 8000a4c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a50:	d121      	bne.n	8000a96 <__aeabi_d2f+0x7a>
 8000a52:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a56:	bfbc      	itt	lt
 8000a58:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	4770      	bxlt	lr
 8000a5e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a62:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a66:	f1c2 0218 	rsb	r2, r2, #24
 8000a6a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a6e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a72:	fa20 f002 	lsr.w	r0, r0, r2
 8000a76:	bf18      	it	ne
 8000a78:	f040 0001 	orrne.w	r0, r0, #1
 8000a7c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a80:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a84:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a88:	ea40 000c 	orr.w	r0, r0, ip
 8000a8c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a90:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a94:	e7cc      	b.n	8000a30 <__aeabi_d2f+0x14>
 8000a96:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a9a:	d107      	bne.n	8000aac <__aeabi_d2f+0x90>
 8000a9c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aa0:	bf1e      	ittt	ne
 8000aa2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000aa6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000aaa:	4770      	bxne	lr
 8000aac:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000ab0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ab4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_uldivmod>:
 8000abc:	b953      	cbnz	r3, 8000ad4 <__aeabi_uldivmod+0x18>
 8000abe:	b94a      	cbnz	r2, 8000ad4 <__aeabi_uldivmod+0x18>
 8000ac0:	2900      	cmp	r1, #0
 8000ac2:	bf08      	it	eq
 8000ac4:	2800      	cmpeq	r0, #0
 8000ac6:	bf1c      	itt	ne
 8000ac8:	f04f 31ff 	movne.w	r1, #4294967295
 8000acc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ad0:	f000 b974 	b.w	8000dbc <__aeabi_idiv0>
 8000ad4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000adc:	f000 f806 	bl	8000aec <__udivmoddi4>
 8000ae0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ae8:	b004      	add	sp, #16
 8000aea:	4770      	bx	lr

08000aec <__udivmoddi4>:
 8000aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000af0:	9d08      	ldr	r5, [sp, #32]
 8000af2:	4604      	mov	r4, r0
 8000af4:	468e      	mov	lr, r1
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d14d      	bne.n	8000b96 <__udivmoddi4+0xaa>
 8000afa:	428a      	cmp	r2, r1
 8000afc:	4694      	mov	ip, r2
 8000afe:	d969      	bls.n	8000bd4 <__udivmoddi4+0xe8>
 8000b00:	fab2 f282 	clz	r2, r2
 8000b04:	b152      	cbz	r2, 8000b1c <__udivmoddi4+0x30>
 8000b06:	fa01 f302 	lsl.w	r3, r1, r2
 8000b0a:	f1c2 0120 	rsb	r1, r2, #32
 8000b0e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b12:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b16:	ea41 0e03 	orr.w	lr, r1, r3
 8000b1a:	4094      	lsls	r4, r2
 8000b1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b20:	0c21      	lsrs	r1, r4, #16
 8000b22:	fbbe f6f8 	udiv	r6, lr, r8
 8000b26:	fa1f f78c 	uxth.w	r7, ip
 8000b2a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b2e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b32:	fb06 f107 	mul.w	r1, r6, r7
 8000b36:	4299      	cmp	r1, r3
 8000b38:	d90a      	bls.n	8000b50 <__udivmoddi4+0x64>
 8000b3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b3e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b42:	f080 811f 	bcs.w	8000d84 <__udivmoddi4+0x298>
 8000b46:	4299      	cmp	r1, r3
 8000b48:	f240 811c 	bls.w	8000d84 <__udivmoddi4+0x298>
 8000b4c:	3e02      	subs	r6, #2
 8000b4e:	4463      	add	r3, ip
 8000b50:	1a5b      	subs	r3, r3, r1
 8000b52:	b2a4      	uxth	r4, r4
 8000b54:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b58:	fb08 3310 	mls	r3, r8, r0, r3
 8000b5c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b60:	fb00 f707 	mul.w	r7, r0, r7
 8000b64:	42a7      	cmp	r7, r4
 8000b66:	d90a      	bls.n	8000b7e <__udivmoddi4+0x92>
 8000b68:	eb1c 0404 	adds.w	r4, ip, r4
 8000b6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b70:	f080 810a 	bcs.w	8000d88 <__udivmoddi4+0x29c>
 8000b74:	42a7      	cmp	r7, r4
 8000b76:	f240 8107 	bls.w	8000d88 <__udivmoddi4+0x29c>
 8000b7a:	4464      	add	r4, ip
 8000b7c:	3802      	subs	r0, #2
 8000b7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b82:	1be4      	subs	r4, r4, r7
 8000b84:	2600      	movs	r6, #0
 8000b86:	b11d      	cbz	r5, 8000b90 <__udivmoddi4+0xa4>
 8000b88:	40d4      	lsrs	r4, r2
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b90:	4631      	mov	r1, r6
 8000b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b96:	428b      	cmp	r3, r1
 8000b98:	d909      	bls.n	8000bae <__udivmoddi4+0xc2>
 8000b9a:	2d00      	cmp	r5, #0
 8000b9c:	f000 80ef 	beq.w	8000d7e <__udivmoddi4+0x292>
 8000ba0:	2600      	movs	r6, #0
 8000ba2:	e9c5 0100 	strd	r0, r1, [r5]
 8000ba6:	4630      	mov	r0, r6
 8000ba8:	4631      	mov	r1, r6
 8000baa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bae:	fab3 f683 	clz	r6, r3
 8000bb2:	2e00      	cmp	r6, #0
 8000bb4:	d14a      	bne.n	8000c4c <__udivmoddi4+0x160>
 8000bb6:	428b      	cmp	r3, r1
 8000bb8:	d302      	bcc.n	8000bc0 <__udivmoddi4+0xd4>
 8000bba:	4282      	cmp	r2, r0
 8000bbc:	f200 80f9 	bhi.w	8000db2 <__udivmoddi4+0x2c6>
 8000bc0:	1a84      	subs	r4, r0, r2
 8000bc2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	469e      	mov	lr, r3
 8000bca:	2d00      	cmp	r5, #0
 8000bcc:	d0e0      	beq.n	8000b90 <__udivmoddi4+0xa4>
 8000bce:	e9c5 4e00 	strd	r4, lr, [r5]
 8000bd2:	e7dd      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000bd4:	b902      	cbnz	r2, 8000bd8 <__udivmoddi4+0xec>
 8000bd6:	deff      	udf	#255	; 0xff
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	2a00      	cmp	r2, #0
 8000bde:	f040 8092 	bne.w	8000d06 <__udivmoddi4+0x21a>
 8000be2:	eba1 010c 	sub.w	r1, r1, ip
 8000be6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000bea:	fa1f fe8c 	uxth.w	lr, ip
 8000bee:	2601      	movs	r6, #1
 8000bf0:	0c20      	lsrs	r0, r4, #16
 8000bf2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000bf6:	fb07 1113 	mls	r1, r7, r3, r1
 8000bfa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bfe:	fb0e f003 	mul.w	r0, lr, r3
 8000c02:	4288      	cmp	r0, r1
 8000c04:	d908      	bls.n	8000c18 <__udivmoddi4+0x12c>
 8000c06:	eb1c 0101 	adds.w	r1, ip, r1
 8000c0a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c0e:	d202      	bcs.n	8000c16 <__udivmoddi4+0x12a>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f200 80cb 	bhi.w	8000dac <__udivmoddi4+0x2c0>
 8000c16:	4643      	mov	r3, r8
 8000c18:	1a09      	subs	r1, r1, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c20:	fb07 1110 	mls	r1, r7, r0, r1
 8000c24:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c28:	fb0e fe00 	mul.w	lr, lr, r0
 8000c2c:	45a6      	cmp	lr, r4
 8000c2e:	d908      	bls.n	8000c42 <__udivmoddi4+0x156>
 8000c30:	eb1c 0404 	adds.w	r4, ip, r4
 8000c34:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c38:	d202      	bcs.n	8000c40 <__udivmoddi4+0x154>
 8000c3a:	45a6      	cmp	lr, r4
 8000c3c:	f200 80bb 	bhi.w	8000db6 <__udivmoddi4+0x2ca>
 8000c40:	4608      	mov	r0, r1
 8000c42:	eba4 040e 	sub.w	r4, r4, lr
 8000c46:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c4a:	e79c      	b.n	8000b86 <__udivmoddi4+0x9a>
 8000c4c:	f1c6 0720 	rsb	r7, r6, #32
 8000c50:	40b3      	lsls	r3, r6
 8000c52:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c56:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c5a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c5e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c62:	431c      	orrs	r4, r3
 8000c64:	40f9      	lsrs	r1, r7
 8000c66:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c6a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c6e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c72:	0c20      	lsrs	r0, r4, #16
 8000c74:	fa1f fe8c 	uxth.w	lr, ip
 8000c78:	fb09 1118 	mls	r1, r9, r8, r1
 8000c7c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c80:	fb08 f00e 	mul.w	r0, r8, lr
 8000c84:	4288      	cmp	r0, r1
 8000c86:	fa02 f206 	lsl.w	r2, r2, r6
 8000c8a:	d90b      	bls.n	8000ca4 <__udivmoddi4+0x1b8>
 8000c8c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c90:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c94:	f080 8088 	bcs.w	8000da8 <__udivmoddi4+0x2bc>
 8000c98:	4288      	cmp	r0, r1
 8000c9a:	f240 8085 	bls.w	8000da8 <__udivmoddi4+0x2bc>
 8000c9e:	f1a8 0802 	sub.w	r8, r8, #2
 8000ca2:	4461      	add	r1, ip
 8000ca4:	1a09      	subs	r1, r1, r0
 8000ca6:	b2a4      	uxth	r4, r4
 8000ca8:	fbb1 f0f9 	udiv	r0, r1, r9
 8000cac:	fb09 1110 	mls	r1, r9, r0, r1
 8000cb0:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000cb4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cb8:	458e      	cmp	lr, r1
 8000cba:	d908      	bls.n	8000cce <__udivmoddi4+0x1e2>
 8000cbc:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc0:	f100 34ff 	add.w	r4, r0, #4294967295
 8000cc4:	d26c      	bcs.n	8000da0 <__udivmoddi4+0x2b4>
 8000cc6:	458e      	cmp	lr, r1
 8000cc8:	d96a      	bls.n	8000da0 <__udivmoddi4+0x2b4>
 8000cca:	3802      	subs	r0, #2
 8000ccc:	4461      	add	r1, ip
 8000cce:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cd2:	fba0 9402 	umull	r9, r4, r0, r2
 8000cd6:	eba1 010e 	sub.w	r1, r1, lr
 8000cda:	42a1      	cmp	r1, r4
 8000cdc:	46c8      	mov	r8, r9
 8000cde:	46a6      	mov	lr, r4
 8000ce0:	d356      	bcc.n	8000d90 <__udivmoddi4+0x2a4>
 8000ce2:	d053      	beq.n	8000d8c <__udivmoddi4+0x2a0>
 8000ce4:	b15d      	cbz	r5, 8000cfe <__udivmoddi4+0x212>
 8000ce6:	ebb3 0208 	subs.w	r2, r3, r8
 8000cea:	eb61 010e 	sbc.w	r1, r1, lr
 8000cee:	fa01 f707 	lsl.w	r7, r1, r7
 8000cf2:	fa22 f306 	lsr.w	r3, r2, r6
 8000cf6:	40f1      	lsrs	r1, r6
 8000cf8:	431f      	orrs	r7, r3
 8000cfa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cfe:	2600      	movs	r6, #0
 8000d00:	4631      	mov	r1, r6
 8000d02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d06:	f1c2 0320 	rsb	r3, r2, #32
 8000d0a:	40d8      	lsrs	r0, r3
 8000d0c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d10:	fa21 f303 	lsr.w	r3, r1, r3
 8000d14:	4091      	lsls	r1, r2
 8000d16:	4301      	orrs	r1, r0
 8000d18:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d1c:	fa1f fe8c 	uxth.w	lr, ip
 8000d20:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d24:	fb07 3610 	mls	r6, r7, r0, r3
 8000d28:	0c0b      	lsrs	r3, r1, #16
 8000d2a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d2e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d32:	429e      	cmp	r6, r3
 8000d34:	fa04 f402 	lsl.w	r4, r4, r2
 8000d38:	d908      	bls.n	8000d4c <__udivmoddi4+0x260>
 8000d3a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d3e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000d42:	d22f      	bcs.n	8000da4 <__udivmoddi4+0x2b8>
 8000d44:	429e      	cmp	r6, r3
 8000d46:	d92d      	bls.n	8000da4 <__udivmoddi4+0x2b8>
 8000d48:	3802      	subs	r0, #2
 8000d4a:	4463      	add	r3, ip
 8000d4c:	1b9b      	subs	r3, r3, r6
 8000d4e:	b289      	uxth	r1, r1
 8000d50:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d54:	fb07 3316 	mls	r3, r7, r6, r3
 8000d58:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d60:	428b      	cmp	r3, r1
 8000d62:	d908      	bls.n	8000d76 <__udivmoddi4+0x28a>
 8000d64:	eb1c 0101 	adds.w	r1, ip, r1
 8000d68:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d6c:	d216      	bcs.n	8000d9c <__udivmoddi4+0x2b0>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d914      	bls.n	8000d9c <__udivmoddi4+0x2b0>
 8000d72:	3e02      	subs	r6, #2
 8000d74:	4461      	add	r1, ip
 8000d76:	1ac9      	subs	r1, r1, r3
 8000d78:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d7c:	e738      	b.n	8000bf0 <__udivmoddi4+0x104>
 8000d7e:	462e      	mov	r6, r5
 8000d80:	4628      	mov	r0, r5
 8000d82:	e705      	b.n	8000b90 <__udivmoddi4+0xa4>
 8000d84:	4606      	mov	r6, r0
 8000d86:	e6e3      	b.n	8000b50 <__udivmoddi4+0x64>
 8000d88:	4618      	mov	r0, r3
 8000d8a:	e6f8      	b.n	8000b7e <__udivmoddi4+0x92>
 8000d8c:	454b      	cmp	r3, r9
 8000d8e:	d2a9      	bcs.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d90:	ebb9 0802 	subs.w	r8, r9, r2
 8000d94:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d98:	3801      	subs	r0, #1
 8000d9a:	e7a3      	b.n	8000ce4 <__udivmoddi4+0x1f8>
 8000d9c:	4646      	mov	r6, r8
 8000d9e:	e7ea      	b.n	8000d76 <__udivmoddi4+0x28a>
 8000da0:	4620      	mov	r0, r4
 8000da2:	e794      	b.n	8000cce <__udivmoddi4+0x1e2>
 8000da4:	4640      	mov	r0, r8
 8000da6:	e7d1      	b.n	8000d4c <__udivmoddi4+0x260>
 8000da8:	46d0      	mov	r8, sl
 8000daa:	e77b      	b.n	8000ca4 <__udivmoddi4+0x1b8>
 8000dac:	3b02      	subs	r3, #2
 8000dae:	4461      	add	r1, ip
 8000db0:	e732      	b.n	8000c18 <__udivmoddi4+0x12c>
 8000db2:	4630      	mov	r0, r6
 8000db4:	e709      	b.n	8000bca <__udivmoddi4+0xde>
 8000db6:	4464      	add	r4, ip
 8000db8:	3802      	subs	r0, #2
 8000dba:	e742      	b.n	8000c42 <__udivmoddi4+0x156>

08000dbc <__aeabi_idiv0>:
 8000dbc:	4770      	bx	lr
 8000dbe:	bf00      	nop

08000dc0 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000dc0:	b5b0      	push	{r4, r5, r7, lr}
 8000dc2:	b08a      	sub	sp, #40	; 0x28
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	60f8      	str	r0, [r7, #12]
 8000dc8:	60b9      	str	r1, [r7, #8]
 8000dca:	607a      	str	r2, [r7, #4]
 8000dcc:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000dce:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000dd2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 8000dd6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8000dda:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 8000ddc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8000dde:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 8000de0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8000de2:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 8000de4:	683b      	ldr	r3, [r7, #0]
 8000de6:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8000df0:	f107 0310 	add.w	r3, r7, #16
 8000df4:	4618      	mov	r0, r3
 8000df6:	f000 f80e 	bl	8000e16 <Lcd_init>

	return lcd;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	461d      	mov	r5, r3
 8000dfe:	f107 0410 	add.w	r4, r7, #16
 8000e02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000e04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000e06:	e894 0003 	ldmia.w	r4, {r0, r1}
 8000e0a:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	3728      	adds	r7, #40	; 0x28
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bdb0      	pop	{r4, r5, r7, pc}

08000e16 <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	7d9b      	ldrb	r3, [r3, #22]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d10c      	bne.n	8000e40 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 8000e26:	2133      	movs	r1, #51	; 0x33
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f000 f86f 	bl	8000f0c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8000e2e:	2132      	movs	r1, #50	; 0x32
 8000e30:	6878      	ldr	r0, [r7, #4]
 8000e32:	f000 f86b 	bl	8000f0c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 8000e36:	2128      	movs	r1, #40	; 0x28
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f000 f867 	bl	8000f0c <lcd_write_command>
 8000e3e:	e003      	b.n	8000e48 <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000e40:	2138      	movs	r1, #56	; 0x38
 8000e42:	6878      	ldr	r0, [r7, #4]
 8000e44:	f000 f862 	bl	8000f0c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 8000e48:	2101      	movs	r1, #1
 8000e4a:	6878      	ldr	r0, [r7, #4]
 8000e4c:	f000 f85e 	bl	8000f0c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000e50:	210c      	movs	r1, #12
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f000 f85a 	bl	8000f0c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 8000e58:	2106      	movs	r1, #6
 8000e5a:	6878      	ldr	r0, [r7, #4]
 8000e5c:	f000 f856 	bl	8000f0c <lcd_write_command>
}
 8000e60:	bf00      	nop
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b086      	sub	sp, #24
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
 8000e70:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000e72:	f107 030c 	add.w	r3, r7, #12
 8000e76:	683a      	ldr	r2, [r7, #0]
 8000e78:	4906      	ldr	r1, [pc, #24]	; (8000e94 <Lcd_int+0x2c>)
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	f007 fa80 	bl	8008380 <siprintf>

	Lcd_string(lcd, buffer);
 8000e80:	f107 030c 	add.w	r3, r7, #12
 8000e84:	4619      	mov	r1, r3
 8000e86:	6878      	ldr	r0, [r7, #4]
 8000e88:	f000 f806 	bl	8000e98 <Lcd_string>
}
 8000e8c:	bf00      	nop
 8000e8e:	3718      	adds	r7, #24
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	08008a94 	.word	0x08008a94

08000e98 <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 8000e98:	b590      	push	{r4, r7, lr}
 8000e9a:	b085      	sub	sp, #20
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	73fb      	strb	r3, [r7, #15]
 8000ea6:	e00a      	b.n	8000ebe <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 8000ea8:	7bfb      	ldrb	r3, [r7, #15]
 8000eaa:	683a      	ldr	r2, [r7, #0]
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	6878      	ldr	r0, [r7, #4]
 8000eb4:	f000 f858 	bl	8000f68 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 8000eb8:	7bfb      	ldrb	r3, [r7, #15]
 8000eba:	3301      	adds	r3, #1
 8000ebc:	73fb      	strb	r3, [r7, #15]
 8000ebe:	7bfc      	ldrb	r4, [r7, #15]
 8000ec0:	6838      	ldr	r0, [r7, #0]
 8000ec2:	f7ff f985 	bl	80001d0 <strlen>
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	429c      	cmp	r4, r3
 8000eca:	d3ed      	bcc.n	8000ea8 <Lcd_string+0x10>
	}
}
 8000ecc:	bf00      	nop
 8000ece:	bf00      	nop
 8000ed0:	3714      	adds	r7, #20
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd90      	pop	{r4, r7, pc}
	...

08000ed8 <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	4a07      	ldr	r2, [pc, #28]	; (8000f08 <Lcd_cursor+0x30>)
 8000eec:	5cd2      	ldrb	r2, [r2, r3]
 8000eee:	78bb      	ldrb	r3, [r7, #2]
 8000ef0:	4413      	add	r3, r2
 8000ef2:	b2db      	uxtb	r3, r3
 8000ef4:	3b80      	subs	r3, #128	; 0x80
 8000ef6:	b2db      	uxtb	r3, r3
 8000ef8:	4619      	mov	r1, r3
 8000efa:	6878      	ldr	r0, [r7, #4]
 8000efc:	f000 f806 	bl	8000f0c <lcd_write_command>
	#endif
}
 8000f00:	bf00      	nop
 8000f02:	3708      	adds	r7, #8
 8000f04:	46bd      	mov	sp, r7
 8000f06:	bd80      	pop	{r7, pc}
 8000f08:	08008aac 	.word	0x08008aac

08000f0c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	460b      	mov	r3, r1
 8000f16:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6898      	ldr	r0, [r3, #8]
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	899b      	ldrh	r3, [r3, #12]
 8000f20:	2200      	movs	r2, #0
 8000f22:	4619      	mov	r1, r3
 8000f24:	f001 fd08 	bl	8002938 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	7d9b      	ldrb	r3, [r3, #22]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d111      	bne.n	8000f54 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8000f30:	78fb      	ldrb	r3, [r7, #3]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	2204      	movs	r2, #4
 8000f38:	4619      	mov	r1, r3
 8000f3a:	6878      	ldr	r0, [r7, #4]
 8000f3c:	f000 f842 	bl	8000fc4 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	b2db      	uxtb	r3, r3
 8000f48:	2204      	movs	r2, #4
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	6878      	ldr	r0, [r7, #4]
 8000f4e:	f000 f839 	bl	8000fc4 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000f52:	e005      	b.n	8000f60 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000f54:	78fb      	ldrb	r3, [r7, #3]
 8000f56:	2208      	movs	r2, #8
 8000f58:	4619      	mov	r1, r3
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f000 f832 	bl	8000fc4 <lcd_write>
}
 8000f60:	bf00      	nop
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}

08000f68 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
 8000f70:	460b      	mov	r3, r1
 8000f72:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6898      	ldr	r0, [r3, #8]
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	899b      	ldrh	r3, [r3, #12]
 8000f7c:	2201      	movs	r2, #1
 8000f7e:	4619      	mov	r1, r3
 8000f80:	f001 fcda 	bl	8002938 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	7d9b      	ldrb	r3, [r3, #22]
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d111      	bne.n	8000fb0 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000f8c:	78fb      	ldrb	r3, [r7, #3]
 8000f8e:	091b      	lsrs	r3, r3, #4
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	2204      	movs	r2, #4
 8000f94:	4619      	mov	r1, r3
 8000f96:	6878      	ldr	r0, [r7, #4]
 8000f98:	f000 f814 	bl	8000fc4 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000f9c:	78fb      	ldrb	r3, [r7, #3]
 8000f9e:	f003 030f 	and.w	r3, r3, #15
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	2204      	movs	r2, #4
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f000 f80b 	bl	8000fc4 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000fae:	e005      	b.n	8000fbc <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000fb0:	78fb      	ldrb	r3, [r7, #3]
 8000fb2:	2208      	movs	r2, #8
 8000fb4:	4619      	mov	r1, r3
 8000fb6:	6878      	ldr	r0, [r7, #4]
 8000fb8:	f000 f804 	bl	8000fc4 <lcd_write>
}
 8000fbc:	bf00      	nop
 8000fbe:	3708      	adds	r7, #8
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}

08000fc4 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	70fb      	strb	r3, [r7, #3]
 8000fd0:	4613      	mov	r3, r2
 8000fd2:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	73fb      	strb	r3, [r7, #15]
 8000fd8:	e019      	b.n	800100e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681a      	ldr	r2, [r3, #0]
 8000fde:	7bfb      	ldrb	r3, [r7, #15]
 8000fe0:	009b      	lsls	r3, r3, #2
 8000fe2:	4413      	add	r3, r2
 8000fe4:	6818      	ldr	r0, [r3, #0]
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	685a      	ldr	r2, [r3, #4]
 8000fea:	7bfb      	ldrb	r3, [r7, #15]
 8000fec:	005b      	lsls	r3, r3, #1
 8000fee:	4413      	add	r3, r2
 8000ff0:	8819      	ldrh	r1, [r3, #0]
 8000ff2:	78fa      	ldrb	r2, [r7, #3]
 8000ff4:	7bfb      	ldrb	r3, [r7, #15]
 8000ff6:	fa42 f303 	asr.w	r3, r2, r3
 8000ffa:	b2db      	uxtb	r3, r3
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
 8001002:	461a      	mov	r2, r3
 8001004:	f001 fc98 	bl	8002938 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001008:	7bfb      	ldrb	r3, [r7, #15]
 800100a:	3301      	adds	r3, #1
 800100c:	73fb      	strb	r3, [r7, #15]
 800100e:	7bfa      	ldrb	r2, [r7, #15]
 8001010:	78bb      	ldrb	r3, [r7, #2]
 8001012:	429a      	cmp	r2, r3
 8001014:	d3e1      	bcc.n	8000fda <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6918      	ldr	r0, [r3, #16]
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	8a9b      	ldrh	r3, [r3, #20]
 800101e:	2201      	movs	r2, #1
 8001020:	4619      	mov	r1, r3
 8001022:	f001 fc89 	bl	8002938 <HAL_GPIO_WritePin>
	DELAY(1);
 8001026:	2001      	movs	r0, #1
 8001028:	f000 fde8 	bl	8001bfc <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	6918      	ldr	r0, [r3, #16]
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	8a9b      	ldrh	r3, [r3, #20]
 8001034:	2200      	movs	r2, #0
 8001036:	4619      	mov	r1, r3
 8001038:	f001 fc7e 	bl	8002938 <HAL_GPIO_WritePin>
}
 800103c:	bf00      	nop
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}

08001044 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800104a:	f000 fd65 	bl	8001b18 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800104e:	f000 f873 	bl	8001138 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001052:	f000 f9e5 	bl	8001420 <MX_GPIO_Init>
	MX_ADC1_Init();
 8001056:	f000 f8d9 	bl	800120c <MX_ADC1_Init>
	MX_I2C1_Init();
 800105a:	f000 f929 	bl	80012b0 <MX_I2C1_Init>
	MX_I2S3_Init();
 800105e:	f000 f955 	bl	800130c <MX_I2S3_Init>
	MX_SPI1_Init();
 8001062:	f000 f983 	bl	800136c <MX_SPI1_Init>
	MX_USB_HOST_Init();
 8001066:	f006 fda9 	bl	8007bbc <MX_USB_HOST_Init>
	MX_TIM11_Init();
 800106a:	f000 f9b5 	bl	80013d8 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */

	Lcd_HandleTypeDef lcd = Lcd_create(
 800106e:	4638      	mov	r0, r7
 8001070:	2300      	movs	r3, #0
 8001072:	9303      	str	r3, [sp, #12]
 8001074:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001078:	9302      	str	r3, [sp, #8]
 800107a:	4b27      	ldr	r3, [pc, #156]	; (8001118 <main+0xd4>)
 800107c:	9301      	str	r3, [sp, #4]
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	9300      	str	r3, [sp, #0]
 8001082:	4b25      	ldr	r3, [pc, #148]	; (8001118 <main+0xd4>)
 8001084:	4a25      	ldr	r2, [pc, #148]	; (800111c <main+0xd8>)
 8001086:	4926      	ldr	r1, [pc, #152]	; (8001120 <main+0xdc>)
 8001088:	f7ff fe9a 	bl	8000dc0 <Lcd_create>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while(1) {
		HAL_ADC_Start(&hadc1);
 800108c:	4825      	ldr	r0, [pc, #148]	; (8001124 <main+0xe0>)
 800108e:	f000 fe1d 	bl	8001ccc <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001092:	f04f 31ff 	mov.w	r1, #4294967295
 8001096:	4823      	ldr	r0, [pc, #140]	; (8001124 <main+0xe0>)
 8001098:	f000 feea 	bl	8001e70 <HAL_ADC_PollForConversion>

		uint32_t value = HAL_ADC_GetValue(&hadc1);
 800109c:	4821      	ldr	r0, [pc, #132]	; (8001124 <main+0xe0>)
 800109e:	f000 ff72 	bl	8001f86 <HAL_ADC_GetValue>
 80010a2:	61f8      	str	r0, [r7, #28]
		float voltage = 100.0 - ((value / 1024.0) * 49.0);
 80010a4:	69f8      	ldr	r0, [r7, #28]
 80010a6:	f7ff fa2d 	bl	8000504 <__aeabi_ui2d>
 80010aa:	f04f 0200 	mov.w	r2, #0
 80010ae:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <main+0xe4>)
 80010b0:	f7ff fbcc 	bl	800084c <__aeabi_ddiv>
 80010b4:	4602      	mov	r2, r0
 80010b6:	460b      	mov	r3, r1
 80010b8:	4610      	mov	r0, r2
 80010ba:	4619      	mov	r1, r3
 80010bc:	f04f 0200 	mov.w	r2, #0
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <main+0xe8>)
 80010c2:	f7ff fa99 	bl	80005f8 <__aeabi_dmul>
 80010c6:	4602      	mov	r2, r0
 80010c8:	460b      	mov	r3, r1
 80010ca:	f04f 0000 	mov.w	r0, #0
 80010ce:	4918      	ldr	r1, [pc, #96]	; (8001130 <main+0xec>)
 80010d0:	f7ff f8da 	bl	8000288 <__aeabi_dsub>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4610      	mov	r0, r2
 80010da:	4619      	mov	r1, r3
 80010dc:	f7ff fc9e 	bl	8000a1c <__aeabi_d2f>
 80010e0:	4603      	mov	r3, r0
 80010e2:	61bb      	str	r3, [r7, #24]

		Lcd_cursor(&lcd, 0, 0);
 80010e4:	463b      	mov	r3, r7
 80010e6:	2200      	movs	r2, #0
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f7ff fef4 	bl	8000ed8 <Lcd_cursor>
		Lcd_string(&lcd, "TEMPERATURA ");
 80010f0:	463b      	mov	r3, r7
 80010f2:	4910      	ldr	r1, [pc, #64]	; (8001134 <main+0xf0>)
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff fecf 	bl	8000e98 <Lcd_string>

		Lcd_int(&lcd, voltage);
 80010fa:	edd7 7a06 	vldr	s15, [r7, #24]
 80010fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001102:	463b      	mov	r3, r7
 8001104:	ee17 1a90 	vmov	r1, s15
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fead 	bl	8000e68 <Lcd_int>
		HAL_Delay(500);
 800110e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001112:	f000 fd73 	bl	8001bfc <HAL_Delay>
	while(1) {
 8001116:	e7b9      	b.n	800108c <main+0x48>
 8001118:	40021000 	.word	0x40021000
 800111c:	20000010 	.word	0x20000010
 8001120:	20000000 	.word	0x20000000
 8001124:	200000c4 	.word	0x200000c4
 8001128:	40900000 	.word	0x40900000
 800112c:	40488000 	.word	0x40488000
 8001130:	40590000 	.word	0x40590000
 8001134:	08008a98 	.word	0x08008a98

08001138 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	b094      	sub	sp, #80	; 0x50
 800113c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800113e:	f107 0320 	add.w	r3, r7, #32
 8001142:	2230      	movs	r2, #48	; 0x30
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f007 f822 	bl	8008190 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	2200      	movs	r2, #0
 8001152:	601a      	str	r2, [r3, #0]
 8001154:	605a      	str	r2, [r3, #4]
 8001156:	609a      	str	r2, [r3, #8]
 8001158:	60da      	str	r2, [r3, #12]
 800115a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
 8001160:	4b28      	ldr	r3, [pc, #160]	; (8001204 <SystemClock_Config+0xcc>)
 8001162:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001164:	4a27      	ldr	r2, [pc, #156]	; (8001204 <SystemClock_Config+0xcc>)
 8001166:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800116a:	6413      	str	r3, [r2, #64]	; 0x40
 800116c:	4b25      	ldr	r3, [pc, #148]	; (8001204 <SystemClock_Config+0xcc>)
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001178:	2300      	movs	r3, #0
 800117a:	607b      	str	r3, [r7, #4]
 800117c:	4b22      	ldr	r3, [pc, #136]	; (8001208 <SystemClock_Config+0xd0>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a21      	ldr	r2, [pc, #132]	; (8001208 <SystemClock_Config+0xd0>)
 8001182:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001186:	6013      	str	r3, [r2, #0]
 8001188:	4b1f      	ldr	r3, [pc, #124]	; (8001208 <SystemClock_Config+0xd0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001194:	2301      	movs	r3, #1
 8001196:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001198:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800119e:	2302      	movs	r3, #2
 80011a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80011a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80011a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011a8:	2308      	movs	r3, #8
 80011aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80011ac:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80011b0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011b2:	2302      	movs	r3, #2
 80011b4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80011b6:	2307      	movs	r3, #7
 80011b8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ba:	f107 0320 	add.w	r3, r7, #32
 80011be:	4618      	mov	r0, r3
 80011c0:	f003 fda6 	bl	8004d10 <HAL_RCC_OscConfig>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <SystemClock_Config+0x96>
  {
    Error_Handler();
 80011ca:	f000 fa5b 	bl	8001684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011ce:	230f      	movs	r3, #15
 80011d0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011d2:	2302      	movs	r3, #2
 80011d4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011d6:	2300      	movs	r3, #0
 80011d8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80011da:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80011de:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80011e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011e4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80011e6:	f107 030c 	add.w	r3, r7, #12
 80011ea:	2105      	movs	r1, #5
 80011ec:	4618      	mov	r0, r3
 80011ee:	f004 f807 	bl	8005200 <HAL_RCC_ClockConfig>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80011f8:	f000 fa44 	bl	8001684 <Error_Handler>
  }
}
 80011fc:	bf00      	nop
 80011fe:	3750      	adds	r7, #80	; 0x50
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}
 8001204:	40023800 	.word	0x40023800
 8001208:	40007000 	.word	0x40007000

0800120c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001212:	463b      	mov	r3, r7
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	605a      	str	r2, [r3, #4]
 800121a:	609a      	str	r2, [r3, #8]
 800121c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800121e:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001220:	4a21      	ldr	r2, [pc, #132]	; (80012a8 <MX_ADC1_Init+0x9c>)
 8001222:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001224:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001226:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800122a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800122c:	4b1d      	ldr	r3, [pc, #116]	; (80012a4 <MX_ADC1_Init+0x98>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001232:	4b1c      	ldr	r3, [pc, #112]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001238:	4b1a      	ldr	r3, [pc, #104]	; (80012a4 <MX_ADC1_Init+0x98>)
 800123a:	2200      	movs	r2, #0
 800123c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800123e:	4b19      	ldr	r3, [pc, #100]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001240:	2200      	movs	r2, #0
 8001242:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001246:	4b17      	ldr	r3, [pc, #92]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001248:	2200      	movs	r2, #0
 800124a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800124c:	4b15      	ldr	r3, [pc, #84]	; (80012a4 <MX_ADC1_Init+0x98>)
 800124e:	4a17      	ldr	r2, [pc, #92]	; (80012ac <MX_ADC1_Init+0xa0>)
 8001250:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001252:	4b14      	ldr	r3, [pc, #80]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001258:	4b12      	ldr	r3, [pc, #72]	; (80012a4 <MX_ADC1_Init+0x98>)
 800125a:	2201      	movs	r2, #1
 800125c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800125e:	4b11      	ldr	r3, [pc, #68]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001260:	2200      	movs	r2, #0
 8001262:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001266:	4b0f      	ldr	r3, [pc, #60]	; (80012a4 <MX_ADC1_Init+0x98>)
 8001268:	2201      	movs	r2, #1
 800126a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800126c:	480d      	ldr	r0, [pc, #52]	; (80012a4 <MX_ADC1_Init+0x98>)
 800126e:	f000 fce9 	bl	8001c44 <HAL_ADC_Init>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001278:	f000 fa04 	bl	8001684 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 800127c:	2309      	movs	r3, #9
 800127e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001280:	2301      	movs	r3, #1
 8001282:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001284:	2300      	movs	r3, #0
 8001286:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001288:	463b      	mov	r3, r7
 800128a:	4619      	mov	r1, r3
 800128c:	4805      	ldr	r0, [pc, #20]	; (80012a4 <MX_ADC1_Init+0x98>)
 800128e:	f000 fe87 	bl	8001fa0 <HAL_ADC_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001298:	f000 f9f4 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800129c:	bf00      	nop
 800129e:	3710      	adds	r7, #16
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	200000c4 	.word	0x200000c4
 80012a8:	40012000 	.word	0x40012000
 80012ac:	0f000001 	.word	0x0f000001

080012b0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012b4:	4b12      	ldr	r3, [pc, #72]	; (8001300 <MX_I2C1_Init+0x50>)
 80012b6:	4a13      	ldr	r2, [pc, #76]	; (8001304 <MX_I2C1_Init+0x54>)
 80012b8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012ba:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_I2C1_Init+0x50>)
 80012bc:	4a12      	ldr	r2, [pc, #72]	; (8001308 <MX_I2C1_Init+0x58>)
 80012be:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_I2C1_Init+0x50>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_I2C1_Init+0x50>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_I2C1_Init+0x50>)
 80012ce:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80012d2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012d4:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <MX_I2C1_Init+0x50>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80012da:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_I2C1_Init+0x50>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012e0:	4b07      	ldr	r3, [pc, #28]	; (8001300 <MX_I2C1_Init+0x50>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012e6:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_I2C1_Init+0x50>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012ec:	4804      	ldr	r0, [pc, #16]	; (8001300 <MX_I2C1_Init+0x50>)
 80012ee:	f002 ff2b 	bl	8004148 <HAL_I2C_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012f8:	f000 f9c4 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012fc:	bf00      	nop
 80012fe:	bd80      	pop	{r7, pc}
 8001300:	2000010c 	.word	0x2000010c
 8001304:	40005400 	.word	0x40005400
 8001308:	000186a0 	.word	0x000186a0

0800130c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001310:	4b13      	ldr	r3, [pc, #76]	; (8001360 <MX_I2S3_Init+0x54>)
 8001312:	4a14      	ldr	r2, [pc, #80]	; (8001364 <MX_I2S3_Init+0x58>)
 8001314:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001316:	4b12      	ldr	r3, [pc, #72]	; (8001360 <MX_I2S3_Init+0x54>)
 8001318:	f44f 7200 	mov.w	r2, #512	; 0x200
 800131c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <MX_I2S3_Init+0x54>)
 8001320:	2200      	movs	r2, #0
 8001322:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001324:	4b0e      	ldr	r3, [pc, #56]	; (8001360 <MX_I2S3_Init+0x54>)
 8001326:	2200      	movs	r2, #0
 8001328:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800132a:	4b0d      	ldr	r3, [pc, #52]	; (8001360 <MX_I2S3_Init+0x54>)
 800132c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001330:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_I2S3_Init+0x54>)
 8001334:	4a0c      	ldr	r2, [pc, #48]	; (8001368 <MX_I2S3_Init+0x5c>)
 8001336:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_I2S3_Init+0x54>)
 800133a:	2200      	movs	r2, #0
 800133c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800133e:	4b08      	ldr	r3, [pc, #32]	; (8001360 <MX_I2S3_Init+0x54>)
 8001340:	2200      	movs	r2, #0
 8001342:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <MX_I2S3_Init+0x54>)
 8001346:	2200      	movs	r2, #0
 8001348:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800134a:	4805      	ldr	r0, [pc, #20]	; (8001360 <MX_I2S3_Init+0x54>)
 800134c:	f003 f840 	bl	80043d0 <HAL_I2S_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8001356:	f000 f995 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800135a:	bf00      	nop
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	20000160 	.word	0x20000160
 8001364:	40003c00 	.word	0x40003c00
 8001368:	00017700 	.word	0x00017700

0800136c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800136c:	b580      	push	{r7, lr}
 800136e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001370:	4b17      	ldr	r3, [pc, #92]	; (80013d0 <MX_SPI1_Init+0x64>)
 8001372:	4a18      	ldr	r2, [pc, #96]	; (80013d4 <MX_SPI1_Init+0x68>)
 8001374:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001376:	4b16      	ldr	r3, [pc, #88]	; (80013d0 <MX_SPI1_Init+0x64>)
 8001378:	f44f 7282 	mov.w	r2, #260	; 0x104
 800137c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800137e:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <MX_SPI1_Init+0x64>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001384:	4b12      	ldr	r3, [pc, #72]	; (80013d0 <MX_SPI1_Init+0x64>)
 8001386:	2200      	movs	r2, #0
 8001388:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800138a:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <MX_SPI1_Init+0x64>)
 800138c:	2200      	movs	r2, #0
 800138e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001390:	4b0f      	ldr	r3, [pc, #60]	; (80013d0 <MX_SPI1_Init+0x64>)
 8001392:	2200      	movs	r2, #0
 8001394:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001396:	4b0e      	ldr	r3, [pc, #56]	; (80013d0 <MX_SPI1_Init+0x64>)
 8001398:	f44f 7200 	mov.w	r2, #512	; 0x200
 800139c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800139e:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <MX_SPI1_Init+0x64>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013a4:	4b0a      	ldr	r3, [pc, #40]	; (80013d0 <MX_SPI1_Init+0x64>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013aa:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <MX_SPI1_Init+0x64>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013b0:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <MX_SPI1_Init+0x64>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013b6:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <MX_SPI1_Init+0x64>)
 80013b8:	220a      	movs	r2, #10
 80013ba:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013bc:	4804      	ldr	r0, [pc, #16]	; (80013d0 <MX_SPI1_Init+0x64>)
 80013be:	f004 fa6b 	bl	8005898 <HAL_SPI_Init>
 80013c2:	4603      	mov	r3, r0
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d001      	beq.n	80013cc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013c8:	f000 f95c 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80013cc:	bf00      	nop
 80013ce:	bd80      	pop	{r7, pc}
 80013d0:	200001a8 	.word	0x200001a8
 80013d4:	40013000 	.word	0x40013000

080013d8 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <MX_TIM11_Init+0x40>)
 80013de:	4a0f      	ldr	r2, [pc, #60]	; (800141c <MX_TIM11_Init+0x44>)
 80013e0:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 80013e2:	4b0d      	ldr	r3, [pc, #52]	; (8001418 <MX_TIM11_Init+0x40>)
 80013e4:	2200      	movs	r2, #0
 80013e6:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	4b0b      	ldr	r3, [pc, #44]	; (8001418 <MX_TIM11_Init+0x40>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 80013ee:	4b0a      	ldr	r3, [pc, #40]	; (8001418 <MX_TIM11_Init+0x40>)
 80013f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013f4:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f6:	4b08      	ldr	r3, [pc, #32]	; (8001418 <MX_TIM11_Init+0x40>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013fc:	4b06      	ldr	r3, [pc, #24]	; (8001418 <MX_TIM11_Init+0x40>)
 80013fe:	2200      	movs	r2, #0
 8001400:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001402:	4805      	ldr	r0, [pc, #20]	; (8001418 <MX_TIM11_Init+0x40>)
 8001404:	f004 fad1 	bl	80059aa <HAL_TIM_Base_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 800140e:	f000 f939 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001412:	bf00      	nop
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000200 	.word	0x20000200
 800141c:	40014800 	.word	0x40014800

08001420 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b08c      	sub	sp, #48	; 0x30
 8001424:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001426:	f107 031c 	add.w	r3, r7, #28
 800142a:	2200      	movs	r2, #0
 800142c:	601a      	str	r2, [r3, #0]
 800142e:	605a      	str	r2, [r3, #4]
 8001430:	609a      	str	r2, [r3, #8]
 8001432:	60da      	str	r2, [r3, #12]
 8001434:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	61bb      	str	r3, [r7, #24]
 800143a:	4b8c      	ldr	r3, [pc, #560]	; (800166c <MX_GPIO_Init+0x24c>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a8b      	ldr	r2, [pc, #556]	; (800166c <MX_GPIO_Init+0x24c>)
 8001440:	f043 0310 	orr.w	r3, r3, #16
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b89      	ldr	r3, [pc, #548]	; (800166c <MX_GPIO_Init+0x24c>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0310 	and.w	r3, r3, #16
 800144e:	61bb      	str	r3, [r7, #24]
 8001450:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
 8001456:	4b85      	ldr	r3, [pc, #532]	; (800166c <MX_GPIO_Init+0x24c>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a84      	ldr	r2, [pc, #528]	; (800166c <MX_GPIO_Init+0x24c>)
 800145c:	f043 0304 	orr.w	r3, r3, #4
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b82      	ldr	r3, [pc, #520]	; (800166c <MX_GPIO_Init+0x24c>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0304 	and.w	r3, r3, #4
 800146a:	617b      	str	r3, [r7, #20]
 800146c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800146e:	2300      	movs	r3, #0
 8001470:	613b      	str	r3, [r7, #16]
 8001472:	4b7e      	ldr	r3, [pc, #504]	; (800166c <MX_GPIO_Init+0x24c>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001476:	4a7d      	ldr	r2, [pc, #500]	; (800166c <MX_GPIO_Init+0x24c>)
 8001478:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800147c:	6313      	str	r3, [r2, #48]	; 0x30
 800147e:	4b7b      	ldr	r3, [pc, #492]	; (800166c <MX_GPIO_Init+0x24c>)
 8001480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001482:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001486:	613b      	str	r3, [r7, #16]
 8001488:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	2300      	movs	r3, #0
 800148c:	60fb      	str	r3, [r7, #12]
 800148e:	4b77      	ldr	r3, [pc, #476]	; (800166c <MX_GPIO_Init+0x24c>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001492:	4a76      	ldr	r2, [pc, #472]	; (800166c <MX_GPIO_Init+0x24c>)
 8001494:	f043 0301 	orr.w	r3, r3, #1
 8001498:	6313      	str	r3, [r2, #48]	; 0x30
 800149a:	4b74      	ldr	r3, [pc, #464]	; (800166c <MX_GPIO_Init+0x24c>)
 800149c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	60fb      	str	r3, [r7, #12]
 80014a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]
 80014aa:	4b70      	ldr	r3, [pc, #448]	; (800166c <MX_GPIO_Init+0x24c>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a6f      	ldr	r2, [pc, #444]	; (800166c <MX_GPIO_Init+0x24c>)
 80014b0:	f043 0302 	orr.w	r3, r3, #2
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b6d      	ldr	r3, [pc, #436]	; (800166c <MX_GPIO_Init+0x24c>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0302 	and.w	r3, r3, #2
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014c2:	2300      	movs	r3, #0
 80014c4:	607b      	str	r3, [r7, #4]
 80014c6:	4b69      	ldr	r3, [pc, #420]	; (800166c <MX_GPIO_Init+0x24c>)
 80014c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ca:	4a68      	ldr	r2, [pc, #416]	; (800166c <MX_GPIO_Init+0x24c>)
 80014cc:	f043 0308 	orr.w	r3, r3, #8
 80014d0:	6313      	str	r3, [r2, #48]	; 0x30
 80014d2:	4b66      	ldr	r3, [pc, #408]	; (800166c <MX_GPIO_Init+0x24c>)
 80014d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d6:	f003 0308 	and.w	r3, r3, #8
 80014da:	607b      	str	r3, [r7, #4]
 80014dc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LCD_RS_Pin|LCD_RW_Pin|LCD_ENA_Pin
 80014de:	2200      	movs	r2, #0
 80014e0:	f64f 4188 	movw	r1, #64648	; 0xfc88
 80014e4:	4862      	ldr	r0, [pc, #392]	; (8001670 <MX_GPIO_Init+0x250>)
 80014e6:	f001 fa27 	bl	8002938 <HAL_GPIO_WritePin>
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2101      	movs	r1, #1
 80014ee:	4861      	ldr	r0, [pc, #388]	; (8001674 <MX_GPIO_Init+0x254>)
 80014f0:	f001 fa22 	bl	8002938 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80014f4:	2200      	movs	r2, #0
 80014f6:	f24f 0110 	movw	r1, #61456	; 0xf010
 80014fa:	485f      	ldr	r0, [pc, #380]	; (8001678 <MX_GPIO_Init+0x258>)
 80014fc:	f001 fa1c 	bl	8002938 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin, GPIO_PIN_RESET);
 8001500:	2200      	movs	r2, #0
 8001502:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001506:	485b      	ldr	r0, [pc, #364]	; (8001674 <MX_GPIO_Init+0x254>)
 8001508:	f001 fa16 	bl	8002938 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LCD_RS_Pin LCD_RW_Pin LCD_ENA_Pin
                           LCD_DB4_Pin LCD_DB5_Pin LCD_DB6_Pin LCD_DB7_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LCD_RS_Pin|LCD_RW_Pin|LCD_ENA_Pin
 800150c:	f64f 4388 	movw	r3, #64648	; 0xfc88
 8001510:	61fb      	str	r3, [r7, #28]
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800151a:	2300      	movs	r3, #0
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	4852      	ldr	r0, [pc, #328]	; (8001670 <MX_GPIO_Init+0x250>)
 8001526:	f001 f86b 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin BTN_DOWN_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|BTN_DOWN_Pin;
 800152a:	f240 1301 	movw	r3, #257	; 0x101
 800152e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001530:	2301      	movs	r3, #1
 8001532:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001534:	2300      	movs	r3, #0
 8001536:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001538:	2300      	movs	r3, #0
 800153a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153c:	f107 031c 	add.w	r3, r7, #28
 8001540:	4619      	mov	r1, r3
 8001542:	484c      	ldr	r0, [pc, #304]	; (8001674 <MX_GPIO_Init+0x254>)
 8001544:	f001 f85c 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001548:	2308      	movs	r3, #8
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001558:	2305      	movs	r3, #5
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	4619      	mov	r1, r3
 8001562:	4844      	ldr	r0, [pc, #272]	; (8001674 <MX_GPIO_Init+0x254>)
 8001564:	f001 f84c 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001568:	2301      	movs	r3, #1
 800156a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800156c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001570:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001576:	f107 031c 	add.w	r3, r7, #28
 800157a:	4619      	mov	r1, r3
 800157c:	483f      	ldr	r0, [pc, #252]	; (800167c <MX_GPIO_Init+0x25c>)
 800157e:	f001 f83f 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001582:	2304      	movs	r3, #4
 8001584:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001586:	2300      	movs	r3, #0
 8001588:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158a:	2300      	movs	r3, #0
 800158c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	483a      	ldr	r0, [pc, #232]	; (8001680 <MX_GPIO_Init+0x260>)
 8001596:	f001 f833 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800159a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800159e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a0:	2302      	movs	r3, #2
 80015a2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a4:	2300      	movs	r3, #0
 80015a6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a8:	2300      	movs	r3, #0
 80015aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80015ac:	2301      	movs	r3, #1
 80015ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80015b0:	f107 031c 	add.w	r3, r7, #28
 80015b4:	4619      	mov	r1, r3
 80015b6:	482e      	ldr	r0, [pc, #184]	; (8001670 <MX_GPIO_Init+0x250>)
 80015b8:	f001 f822 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80015bc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2300      	movs	r3, #0
 80015cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015ce:	2305      	movs	r3, #5
 80015d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 031c 	add.w	r3, r7, #28
 80015d6:	4619      	mov	r1, r3
 80015d8:	4829      	ldr	r0, [pc, #164]	; (8001680 <MX_GPIO_Init+0x260>)
 80015da:	f001 f811 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 80015de:	f24f 0310 	movw	r3, #61456	; 0xf010
 80015e2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e4:	2301      	movs	r3, #1
 80015e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ec:	2300      	movs	r3, #0
 80015ee:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80015f0:	f107 031c 	add.w	r3, r7, #28
 80015f4:	4619      	mov	r1, r3
 80015f6:	4820      	ldr	r0, [pc, #128]	; (8001678 <MX_GPIO_Init+0x258>)
 80015f8:	f001 f802 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_LEFT_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 80015fc:	f44f 6324 	mov.w	r3, #2624	; 0xa40
 8001600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001602:	2300      	movs	r3, #0
 8001604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	4818      	ldr	r0, [pc, #96]	; (8001674 <MX_GPIO_Init+0x254>)
 8001612:	f000 fff5 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_MID_Pin */
  GPIO_InitStruct.Pin = BTN_MID_Pin;
 8001616:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800161a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161c:	2300      	movs	r3, #0
 800161e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_MID_GPIO_Port, &GPIO_InitStruct);
 8001624:	f107 031c 	add.w	r3, r7, #28
 8001628:	4619      	mov	r1, r3
 800162a:	4814      	ldr	r0, [pc, #80]	; (800167c <MX_GPIO_Init+0x25c>)
 800162c:	f000 ffe8 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001630:	2320      	movs	r3, #32
 8001632:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001634:	2300      	movs	r3, #0
 8001636:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800163c:	f107 031c 	add.w	r3, r7, #28
 8001640:	4619      	mov	r1, r3
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <MX_GPIO_Init+0x258>)
 8001644:	f000 ffdc 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001648:	2302      	movs	r3, #2
 800164a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800164c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001650:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001652:	2300      	movs	r3, #0
 8001654:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001656:	f107 031c 	add.w	r3, r7, #28
 800165a:	4619      	mov	r1, r3
 800165c:	4804      	ldr	r0, [pc, #16]	; (8001670 <MX_GPIO_Init+0x250>)
 800165e:	f000 ffcf 	bl	8002600 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001662:	bf00      	nop
 8001664:	3730      	adds	r7, #48	; 0x30
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40021000 	.word	0x40021000
 8001674:	40020800 	.word	0x40020800
 8001678:	40020c00 	.word	0x40020c00
 800167c:	40020000 	.word	0x40020000
 8001680:	40020400 	.word	0x40020400

08001684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
}
 800168a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800168c:	e7fe      	b.n	800168c <Error_Handler+0x8>
	...

08001690 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b082      	sub	sp, #8
 8001694:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001696:	2300      	movs	r3, #0
 8001698:	607b      	str	r3, [r7, #4]
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <HAL_MspInit+0x4c>)
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800169e:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <HAL_MspInit+0x4c>)
 80016a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016a4:	6453      	str	r3, [r2, #68]	; 0x44
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <HAL_MspInit+0x4c>)
 80016a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016ae:	607b      	str	r3, [r7, #4]
 80016b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	2300      	movs	r3, #0
 80016b4:	603b      	str	r3, [r7, #0]
 80016b6:	4b09      	ldr	r3, [pc, #36]	; (80016dc <HAL_MspInit+0x4c>)
 80016b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ba:	4a08      	ldr	r2, [pc, #32]	; (80016dc <HAL_MspInit+0x4c>)
 80016bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c0:	6413      	str	r3, [r2, #64]	; 0x40
 80016c2:	4b06      	ldr	r3, [pc, #24]	; (80016dc <HAL_MspInit+0x4c>)
 80016c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ca:	603b      	str	r3, [r7, #0]
 80016cc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016ce:	2007      	movs	r0, #7
 80016d0:	f000 ff54 	bl	800257c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016d4:	bf00      	nop
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40023800 	.word	0x40023800

080016e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a17      	ldr	r2, [pc, #92]	; (800175c <HAL_ADC_MspInit+0x7c>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d127      	bne.n	8001752 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	4b16      	ldr	r3, [pc, #88]	; (8001760 <HAL_ADC_MspInit+0x80>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a15      	ldr	r2, [pc, #84]	; (8001760 <HAL_ADC_MspInit+0x80>)
 800170c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b13      	ldr	r3, [pc, #76]	; (8001760 <HAL_ADC_MspInit+0x80>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <HAL_ADC_MspInit+0x80>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a0e      	ldr	r2, [pc, #56]	; (8001760 <HAL_ADC_MspInit+0x80>)
 8001728:	f043 0302 	orr.w	r3, r3, #2
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <HAL_ADC_MspInit+0x80>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0302 	and.w	r3, r3, #2
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = TEMP_SENS_Pin;
 800173a:	2302      	movs	r3, #2
 800173c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800173e:	2303      	movs	r3, #3
 8001740:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TEMP_SENS_GPIO_Port, &GPIO_InitStruct);
 8001746:	f107 0314 	add.w	r3, r7, #20
 800174a:	4619      	mov	r1, r3
 800174c:	4805      	ldr	r0, [pc, #20]	; (8001764 <HAL_ADC_MspInit+0x84>)
 800174e:	f000 ff57 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001752:	bf00      	nop
 8001754:	3728      	adds	r7, #40	; 0x28
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40012000 	.word	0x40012000
 8001760:	40023800 	.word	0x40023800
 8001764:	40020400 	.word	0x40020400

08001768 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b08a      	sub	sp, #40	; 0x28
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	2200      	movs	r2, #0
 8001776:	601a      	str	r2, [r3, #0]
 8001778:	605a      	str	r2, [r3, #4]
 800177a:	609a      	str	r2, [r3, #8]
 800177c:	60da      	str	r2, [r3, #12]
 800177e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	4a19      	ldr	r2, [pc, #100]	; (80017ec <HAL_I2C_MspInit+0x84>)
 8001786:	4293      	cmp	r3, r2
 8001788:	d12c      	bne.n	80017e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <HAL_I2C_MspInit+0x88>)
 8001790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001792:	4a17      	ldr	r2, [pc, #92]	; (80017f0 <HAL_I2C_MspInit+0x88>)
 8001794:	f043 0302 	orr.w	r3, r3, #2
 8001798:	6313      	str	r3, [r2, #48]	; 0x30
 800179a:	4b15      	ldr	r3, [pc, #84]	; (80017f0 <HAL_I2C_MspInit+0x88>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	f003 0302 	and.w	r3, r3, #2
 80017a2:	613b      	str	r3, [r7, #16]
 80017a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 80017a6:	f44f 7310 	mov.w	r3, #576	; 0x240
 80017aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80017ac:	2312      	movs	r3, #18
 80017ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80017b0:	2301      	movs	r3, #1
 80017b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b4:	2300      	movs	r3, #0
 80017b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80017b8:	2304      	movs	r3, #4
 80017ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017bc:	f107 0314 	add.w	r3, r7, #20
 80017c0:	4619      	mov	r1, r3
 80017c2:	480c      	ldr	r0, [pc, #48]	; (80017f4 <HAL_I2C_MspInit+0x8c>)
 80017c4:	f000 ff1c 	bl	8002600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80017c8:	2300      	movs	r3, #0
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HAL_I2C_MspInit+0x88>)
 80017ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017d0:	4a07      	ldr	r2, [pc, #28]	; (80017f0 <HAL_I2C_MspInit+0x88>)
 80017d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017d6:	6413      	str	r3, [r2, #64]	; 0x40
 80017d8:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HAL_I2C_MspInit+0x88>)
 80017da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017e0:	60fb      	str	r3, [r7, #12]
 80017e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80017e4:	bf00      	nop
 80017e6:	3728      	adds	r7, #40	; 0x28
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd80      	pop	{r7, pc}
 80017ec:	40005400 	.word	0x40005400
 80017f0:	40023800 	.word	0x40023800
 80017f4:	40020400 	.word	0x40020400

080017f8 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b08e      	sub	sp, #56	; 0x38
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001810:	f107 0314 	add.w	r3, r7, #20
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4a31      	ldr	r2, [pc, #196]	; (80018e8 <HAL_I2S_MspInit+0xf0>)
 8001824:	4293      	cmp	r3, r2
 8001826:	d15a      	bne.n	80018de <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001828:	2301      	movs	r3, #1
 800182a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 800182c:	23c0      	movs	r3, #192	; 0xc0
 800182e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001830:	2302      	movs	r3, #2
 8001832:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001834:	f107 0314 	add.w	r3, r7, #20
 8001838:	4618      	mov	r0, r3
 800183a:	f003 feed 	bl	8005618 <HAL_RCCEx_PeriphCLKConfig>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001844:	f7ff ff1e 	bl	8001684 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HAL_I2S_MspInit+0xf4>)
 800184e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001850:	4a26      	ldr	r2, [pc, #152]	; (80018ec <HAL_I2S_MspInit+0xf4>)
 8001852:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001856:	6413      	str	r3, [r2, #64]	; 0x40
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <HAL_I2S_MspInit+0xf4>)
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001860:	613b      	str	r3, [r7, #16]
 8001862:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001864:	2300      	movs	r3, #0
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_I2S_MspInit+0xf4>)
 800186a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186c:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <HAL_I2S_MspInit+0xf4>)
 800186e:	f043 0301 	orr.w	r3, r3, #1
 8001872:	6313      	str	r3, [r2, #48]	; 0x30
 8001874:	4b1d      	ldr	r3, [pc, #116]	; (80018ec <HAL_I2S_MspInit+0xf4>)
 8001876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001878:	f003 0301 	and.w	r3, r3, #1
 800187c:	60fb      	str	r3, [r7, #12]
 800187e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001880:	2300      	movs	r3, #0
 8001882:	60bb      	str	r3, [r7, #8]
 8001884:	4b19      	ldr	r3, [pc, #100]	; (80018ec <HAL_I2S_MspInit+0xf4>)
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	4a18      	ldr	r2, [pc, #96]	; (80018ec <HAL_I2S_MspInit+0xf4>)
 800188a:	f043 0304 	orr.w	r3, r3, #4
 800188e:	6313      	str	r3, [r2, #48]	; 0x30
 8001890:	4b16      	ldr	r3, [pc, #88]	; (80018ec <HAL_I2S_MspInit+0xf4>)
 8001892:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	60bb      	str	r3, [r7, #8]
 800189a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 800189c:	2310      	movs	r3, #16
 800189e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a0:	2302      	movs	r3, #2
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a4:	2300      	movs	r3, #0
 80018a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a8:	2300      	movs	r3, #0
 80018aa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018ac:	2306      	movs	r3, #6
 80018ae:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 80018b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018b4:	4619      	mov	r1, r3
 80018b6:	480e      	ldr	r0, [pc, #56]	; (80018f0 <HAL_I2S_MspInit+0xf8>)
 80018b8:	f000 fea2 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 80018bc:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 80018c0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ca:	2300      	movs	r3, #0
 80018cc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80018ce:	2306      	movs	r3, #6
 80018d0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80018d6:	4619      	mov	r1, r3
 80018d8:	4806      	ldr	r0, [pc, #24]	; (80018f4 <HAL_I2S_MspInit+0xfc>)
 80018da:	f000 fe91 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80018de:	bf00      	nop
 80018e0:	3738      	adds	r7, #56	; 0x38
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40003c00 	.word	0x40003c00
 80018ec:	40023800 	.word	0x40023800
 80018f0:	40020000 	.word	0x40020000
 80018f4:	40020800 	.word	0x40020800

080018f8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001900:	f107 0314 	add.w	r3, r7, #20
 8001904:	2200      	movs	r2, #0
 8001906:	601a      	str	r2, [r3, #0]
 8001908:	605a      	str	r2, [r3, #4]
 800190a:	609a      	str	r2, [r3, #8]
 800190c:	60da      	str	r2, [r3, #12]
 800190e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a19      	ldr	r2, [pc, #100]	; (800197c <HAL_SPI_MspInit+0x84>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d12b      	bne.n	8001972 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800191a:	2300      	movs	r3, #0
 800191c:	613b      	str	r3, [r7, #16]
 800191e:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_SPI_MspInit+0x88>)
 8001920:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001922:	4a17      	ldr	r2, [pc, #92]	; (8001980 <HAL_SPI_MspInit+0x88>)
 8001924:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001928:	6453      	str	r3, [r2, #68]	; 0x44
 800192a:	4b15      	ldr	r3, [pc, #84]	; (8001980 <HAL_SPI_MspInit+0x88>)
 800192c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001932:	613b      	str	r3, [r7, #16]
 8001934:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	60fb      	str	r3, [r7, #12]
 800193a:	4b11      	ldr	r3, [pc, #68]	; (8001980 <HAL_SPI_MspInit+0x88>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a10      	ldr	r2, [pc, #64]	; (8001980 <HAL_SPI_MspInit+0x88>)
 8001940:	f043 0301 	orr.w	r3, r3, #1
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b0e      	ldr	r3, [pc, #56]	; (8001980 <HAL_SPI_MspInit+0x88>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f003 0301 	and.w	r3, r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
 8001950:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001952:	23e0      	movs	r3, #224	; 0xe0
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001962:	2305      	movs	r3, #5
 8001964:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	4805      	ldr	r0, [pc, #20]	; (8001984 <HAL_SPI_MspInit+0x8c>)
 800196e:	f000 fe47 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001972:	bf00      	nop
 8001974:	3728      	adds	r7, #40	; 0x28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40013000 	.word	0x40013000
 8001980:	40023800 	.word	0x40023800
 8001984:	40020000 	.word	0x40020000

08001988 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001988:	b480      	push	{r7}
 800198a:	b085      	sub	sp, #20
 800198c:	af00      	add	r7, sp, #0
 800198e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a0b      	ldr	r2, [pc, #44]	; (80019c4 <HAL_TIM_Base_MspInit+0x3c>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d10d      	bne.n	80019b6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_TIM_Base_MspInit+0x40>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <HAL_TIM_Base_MspInit+0x40>)
 80019a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_TIM_Base_MspInit+0x40>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	40014800 	.word	0x40014800
 80019c8:	40023800 	.word	0x40023800

080019cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80019d0:	e7fe      	b.n	80019d0 <NMI_Handler+0x4>

080019d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019d2:	b480      	push	{r7}
 80019d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019d6:	e7fe      	b.n	80019d6 <HardFault_Handler+0x4>

080019d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019dc:	e7fe      	b.n	80019dc <MemManage_Handler+0x4>

080019de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019de:	b480      	push	{r7}
 80019e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019e2:	e7fe      	b.n	80019e2 <BusFault_Handler+0x4>

080019e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019e8:	e7fe      	b.n	80019e8 <UsageFault_Handler+0x4>

080019ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019ea:	b480      	push	{r7}
 80019ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019ee:	bf00      	nop
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr

080019f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019fc:	bf00      	nop
 80019fe:	46bd      	mov	sp, r7
 8001a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a04:	4770      	bx	lr

08001a06 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a06:	b480      	push	{r7}
 8001a08:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a0a:	bf00      	nop
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a12:	4770      	bx	lr

08001a14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a18:	f000 f8d0 	bl	8001bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001a24:	4802      	ldr	r0, [pc, #8]	; (8001a30 <OTG_FS_IRQHandler+0x10>)
 8001a26:	f001 fa0b 	bl	8002e40 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001a2a:	bf00      	nop
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	2000062c 	.word	0x2000062c

08001a34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b086      	sub	sp, #24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a3c:	4a14      	ldr	r2, [pc, #80]	; (8001a90 <_sbrk+0x5c>)
 8001a3e:	4b15      	ldr	r3, [pc, #84]	; (8001a94 <_sbrk+0x60>)
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001a44:	697b      	ldr	r3, [r7, #20]
 8001a46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001a48:	4b13      	ldr	r3, [pc, #76]	; (8001a98 <_sbrk+0x64>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d102      	bne.n	8001a56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001a50:	4b11      	ldr	r3, [pc, #68]	; (8001a98 <_sbrk+0x64>)
 8001a52:	4a12      	ldr	r2, [pc, #72]	; (8001a9c <_sbrk+0x68>)
 8001a54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001a56:	4b10      	ldr	r3, [pc, #64]	; (8001a98 <_sbrk+0x64>)
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	4413      	add	r3, r2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d207      	bcs.n	8001a74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001a64:	f006 fb5a 	bl	800811c <__errno>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	220c      	movs	r2, #12
 8001a6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001a72:	e009      	b.n	8001a88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a74:	4b08      	ldr	r3, [pc, #32]	; (8001a98 <_sbrk+0x64>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a7a:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <_sbrk+0x64>)
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	4413      	add	r3, r2
 8001a82:	4a05      	ldr	r2, [pc, #20]	; (8001a98 <_sbrk+0x64>)
 8001a84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a86:	68fb      	ldr	r3, [r7, #12]
}
 8001a88:	4618      	mov	r0, r3
 8001a8a:	3718      	adds	r7, #24
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	bd80      	pop	{r7, pc}
 8001a90:	20020000 	.word	0x20020000
 8001a94:	00000400 	.word	0x00000400
 8001a98:	20000248 	.word	0x20000248
 8001a9c:	20000940 	.word	0x20000940

08001aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa4:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <SystemInit+0x20>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001aaa:	4a05      	ldr	r2, [pc, #20]	; (8001ac0 <SystemInit+0x20>)
 8001aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001afc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ac8:	480d      	ldr	r0, [pc, #52]	; (8001b00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aca:	490e      	ldr	r1, [pc, #56]	; (8001b04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001acc:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ad0:	e002      	b.n	8001ad8 <LoopCopyDataInit>

08001ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ad6:	3304      	adds	r3, #4

08001ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001adc:	d3f9      	bcc.n	8001ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ade:	4a0b      	ldr	r2, [pc, #44]	; (8001b0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ae0:	4c0b      	ldr	r4, [pc, #44]	; (8001b10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ae4:	e001      	b.n	8001aea <LoopFillZerobss>

08001ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ae8:	3204      	adds	r2, #4

08001aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001aec:	d3fb      	bcc.n	8001ae6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aee:	f7ff ffd7 	bl	8001aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001af2:	f006 fb19 	bl	8008128 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001af6:	f7ff faa5 	bl	8001044 <main>
  bx  lr    
 8001afa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001afc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b04:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8001b08:	08008b0c 	.word	0x08008b0c
  ldr r2, =_sbss
 8001b0c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8001b10:	20000940 	.word	0x20000940

08001b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b14:	e7fe      	b.n	8001b14 <ADC_IRQHandler>
	...

08001b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b1c:	4b0e      	ldr	r3, [pc, #56]	; (8001b58 <HAL_Init+0x40>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a0d      	ldr	r2, [pc, #52]	; (8001b58 <HAL_Init+0x40>)
 8001b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b28:	4b0b      	ldr	r3, [pc, #44]	; (8001b58 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0a      	ldr	r2, [pc, #40]	; (8001b58 <HAL_Init+0x40>)
 8001b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b34:	4b08      	ldr	r3, [pc, #32]	; (8001b58 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a07      	ldr	r2, [pc, #28]	; (8001b58 <HAL_Init+0x40>)
 8001b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b40:	2003      	movs	r0, #3
 8001b42:	f000 fd1b 	bl	800257c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b46:	2000      	movs	r0, #0
 8001b48:	f000 f808 	bl	8001b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b4c:	f7ff fda0 	bl	8001690 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b50:	2300      	movs	r3, #0
}
 8001b52:	4618      	mov	r0, r3
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	40023c00 	.word	0x40023c00

08001b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001b64:	4b12      	ldr	r3, [pc, #72]	; (8001bb0 <HAL_InitTick+0x54>)
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	4b12      	ldr	r3, [pc, #72]	; (8001bb4 <HAL_InitTick+0x58>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	4619      	mov	r1, r3
 8001b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8001b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	f000 fd33 	bl	80025e6 <HAL_SYSTICK_Config>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e00e      	b.n	8001ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2b0f      	cmp	r3, #15
 8001b8e:	d80a      	bhi.n	8001ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b90:	2200      	movs	r2, #0
 8001b92:	6879      	ldr	r1, [r7, #4]
 8001b94:	f04f 30ff 	mov.w	r0, #4294967295
 8001b98:	f000 fcfb 	bl	8002592 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b9c:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <HAL_InitTick+0x5c>)
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	e000      	b.n	8001ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
}
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	20000018 	.word	0x20000018
 8001bb4:	20000020 	.word	0x20000020
 8001bb8:	2000001c 	.word	0x2000001c

08001bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <HAL_IncTick+0x20>)
 8001bc2:	781b      	ldrb	r3, [r3, #0]
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <HAL_IncTick+0x24>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4413      	add	r3, r2
 8001bcc:	4a04      	ldr	r2, [pc, #16]	; (8001be0 <HAL_IncTick+0x24>)
 8001bce:	6013      	str	r3, [r2, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd8:	4770      	bx	lr
 8001bda:	bf00      	nop
 8001bdc:	20000020 	.word	0x20000020
 8001be0:	2000024c 	.word	0x2000024c

08001be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001be4:	b480      	push	{r7}
 8001be6:	af00      	add	r7, sp, #0
  return uwTick;
 8001be8:	4b03      	ldr	r3, [pc, #12]	; (8001bf8 <HAL_GetTick+0x14>)
 8001bea:	681b      	ldr	r3, [r3, #0]
}
 8001bec:	4618      	mov	r0, r3
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf4:	4770      	bx	lr
 8001bf6:	bf00      	nop
 8001bf8:	2000024c 	.word	0x2000024c

08001bfc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b084      	sub	sp, #16
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001c04:	f7ff ffee 	bl	8001be4 <HAL_GetTick>
 8001c08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c14:	d005      	beq.n	8001c22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c16:	4b0a      	ldr	r3, [pc, #40]	; (8001c40 <HAL_Delay+0x44>)
 8001c18:	781b      	ldrb	r3, [r3, #0]
 8001c1a:	461a      	mov	r2, r3
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	4413      	add	r3, r2
 8001c20:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001c22:	bf00      	nop
 8001c24:	f7ff ffde 	bl	8001be4 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	68bb      	ldr	r3, [r7, #8]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	d8f7      	bhi.n	8001c24 <HAL_Delay+0x28>
  {
  }
}
 8001c34:	bf00      	nop
 8001c36:	bf00      	nop
 8001c38:	3710      	adds	r7, #16
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	20000020 	.word	0x20000020

08001c44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d101      	bne.n	8001c5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
 8001c58:	e033      	b.n	8001cc2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d109      	bne.n	8001c76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c62:	6878      	ldr	r0, [r7, #4]
 8001c64:	f7ff fd3c 	bl	80016e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2200      	movs	r2, #0
 8001c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c7a:	f003 0310 	and.w	r3, r3, #16
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d118      	bne.n	8001cb4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001c8a:	f023 0302 	bic.w	r3, r3, #2
 8001c8e:	f043 0202 	orr.w	r2, r3, #2
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c96:	6878      	ldr	r0, [r7, #4]
 8001c98:	f000 faa4 	bl	80021e4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ca6:	f023 0303 	bic.w	r3, r3, #3
 8001caa:	f043 0201 	orr.w	r2, r3, #1
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	; 0x40
 8001cb2:	e001      	b.n	8001cb8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2200      	movs	r2, #0
 8001cbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	3710      	adds	r7, #16
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bd80      	pop	{r7, pc}
	...

08001ccc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	b085      	sub	sp, #20
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_ADC_Start+0x1a>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e0b2      	b.n	8001e4c <HAL_ADC_Start+0x180>
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d018      	beq.n	8001d2e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	689a      	ldr	r2, [r3, #8]
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001d0c:	4b52      	ldr	r3, [pc, #328]	; (8001e58 <HAL_ADC_Start+0x18c>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4a52      	ldr	r2, [pc, #328]	; (8001e5c <HAL_ADC_Start+0x190>)
 8001d12:	fba2 2303 	umull	r2, r3, r2, r3
 8001d16:	0c9a      	lsrs	r2, r3, #18
 8001d18:	4613      	mov	r3, r2
 8001d1a:	005b      	lsls	r3, r3, #1
 8001d1c:	4413      	add	r3, r2
 8001d1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d20:	e002      	b.n	8001d28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001d22:	68bb      	ldr	r3, [r7, #8]
 8001d24:	3b01      	subs	r3, #1
 8001d26:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8001d28:	68bb      	ldr	r3, [r7, #8]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1f9      	bne.n	8001d22 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0301 	and.w	r3, r3, #1
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d17a      	bne.n	8001e32 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001d44:	f023 0301 	bic.w	r3, r3, #1
 8001d48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d007      	beq.n	8001d6e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001d66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001d76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d7a:	d106      	bne.n	8001d8a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d80:	f023 0206 	bic.w	r2, r3, #6
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	645a      	str	r2, [r3, #68]	; 0x44
 8001d88:	e002      	b.n	8001d90 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2200      	movs	r2, #0
 8001d8e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001d98:	4b31      	ldr	r3, [pc, #196]	; (8001e60 <HAL_ADC_Start+0x194>)
 8001d9a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001da4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f003 031f 	and.w	r3, r3, #31
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d12a      	bne.n	8001e08 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a2b      	ldr	r2, [pc, #172]	; (8001e64 <HAL_ADC_Start+0x198>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d015      	beq.n	8001de8 <HAL_ADC_Start+0x11c>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	4a29      	ldr	r2, [pc, #164]	; (8001e68 <HAL_ADC_Start+0x19c>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d105      	bne.n	8001dd2 <HAL_ADC_Start+0x106>
 8001dc6:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <HAL_ADC_Start+0x194>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f003 031f 	and.w	r3, r3, #31
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00a      	beq.n	8001de8 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a25      	ldr	r2, [pc, #148]	; (8001e6c <HAL_ADC_Start+0x1a0>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d136      	bne.n	8001e4a <HAL_ADC_Start+0x17e>
 8001ddc:	4b20      	ldr	r3, [pc, #128]	; (8001e60 <HAL_ADC_Start+0x194>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0310 	and.w	r3, r3, #16
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d130      	bne.n	8001e4a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d129      	bne.n	8001e4a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	689a      	ldr	r2, [r3, #8]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e04:	609a      	str	r2, [r3, #8]
 8001e06:	e020      	b.n	8001e4a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a15      	ldr	r2, [pc, #84]	; (8001e64 <HAL_ADC_Start+0x198>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d11b      	bne.n	8001e4a <HAL_ADC_Start+0x17e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d114      	bne.n	8001e4a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	689a      	ldr	r2, [r3, #8]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001e2e:	609a      	str	r2, [r3, #8]
 8001e30:	e00b      	b.n	8001e4a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	f043 0210 	orr.w	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	f043 0201 	orr.w	r2, r3, #1
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001e4a:	2300      	movs	r3, #0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3714      	adds	r7, #20
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	20000018 	.word	0x20000018
 8001e5c:	431bde83 	.word	0x431bde83
 8001e60:	40012300 	.word	0x40012300
 8001e64:	40012000 	.word	0x40012000
 8001e68:	40012100 	.word	0x40012100
 8001e6c:	40012200 	.word	0x40012200

08001e70 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b084      	sub	sp, #16
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001e8c:	d113      	bne.n	8001eb6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e9c:	d10b      	bne.n	8001eb6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea2:	f043 0220 	orr.w	r2, r3, #32
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2200      	movs	r2, #0
 8001eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e063      	b.n	8001f7e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8001eb6:	f7ff fe95 	bl	8001be4 <HAL_GetTick>
 8001eba:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001ebc:	e021      	b.n	8001f02 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ec4:	d01d      	beq.n	8001f02 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001ec6:	683b      	ldr	r3, [r7, #0]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d007      	beq.n	8001edc <HAL_ADC_PollForConversion+0x6c>
 8001ecc:	f7ff fe8a 	bl	8001be4 <HAL_GetTick>
 8001ed0:	4602      	mov	r2, r0
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	683a      	ldr	r2, [r7, #0]
 8001ed8:	429a      	cmp	r2, r3
 8001eda:	d212      	bcs.n	8001f02 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b02      	cmp	r3, #2
 8001ee8:	d00b      	beq.n	8001f02 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eee:	f043 0204 	orr.w	r2, r3, #4
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001efe:	2303      	movs	r3, #3
 8001f00:	e03d      	b.n	8001f7e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0302 	and.w	r3, r3, #2
 8001f0c:	2b02      	cmp	r3, #2
 8001f0e:	d1d6      	bne.n	8001ebe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f06f 0212 	mvn.w	r2, #18
 8001f18:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d123      	bne.n	8001f7c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d11f      	bne.n	8001f7c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	689b      	ldr	r3, [r3, #8]
 8001f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d111      	bne.n	8001f7c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d105      	bne.n	8001f7c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f74:	f043 0201 	orr.w	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001f7c:	2300      	movs	r3, #0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3710      	adds	r7, #16
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001f86:	b480      	push	{r7}
 8001f88:	b083      	sub	sp, #12
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	370c      	adds	r7, #12
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr

08001fa0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
 8001fa8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001faa:	2300      	movs	r3, #0
 8001fac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_ADC_ConfigChannel+0x1c>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e105      	b.n	80021c8 <HAL_ADC_ConfigChannel+0x228>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	2b09      	cmp	r3, #9
 8001fca:	d925      	bls.n	8002018 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	68d9      	ldr	r1, [r3, #12]
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	b29b      	uxth	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	4613      	mov	r3, r2
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	4413      	add	r3, r2
 8001fe0:	3b1e      	subs	r3, #30
 8001fe2:	2207      	movs	r2, #7
 8001fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe8:	43da      	mvns	r2, r3
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	400a      	ands	r2, r1
 8001ff0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	68d9      	ldr	r1, [r3, #12]
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	689a      	ldr	r2, [r3, #8]
 8001ffc:	683b      	ldr	r3, [r7, #0]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	b29b      	uxth	r3, r3
 8002002:	4618      	mov	r0, r3
 8002004:	4603      	mov	r3, r0
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	4403      	add	r3, r0
 800200a:	3b1e      	subs	r3, #30
 800200c:	409a      	lsls	r2, r3
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	430a      	orrs	r2, r1
 8002014:	60da      	str	r2, [r3, #12]
 8002016:	e022      	b.n	800205e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6919      	ldr	r1, [r3, #16]
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	b29b      	uxth	r3, r3
 8002024:	461a      	mov	r2, r3
 8002026:	4613      	mov	r3, r2
 8002028:	005b      	lsls	r3, r3, #1
 800202a:	4413      	add	r3, r2
 800202c:	2207      	movs	r2, #7
 800202e:	fa02 f303 	lsl.w	r3, r2, r3
 8002032:	43da      	mvns	r2, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	400a      	ands	r2, r1
 800203a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	6919      	ldr	r1, [r3, #16]
 8002042:	683b      	ldr	r3, [r7, #0]
 8002044:	689a      	ldr	r2, [r3, #8]
 8002046:	683b      	ldr	r3, [r7, #0]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	b29b      	uxth	r3, r3
 800204c:	4618      	mov	r0, r3
 800204e:	4603      	mov	r3, r0
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	4403      	add	r3, r0
 8002054:	409a      	lsls	r2, r3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	430a      	orrs	r2, r1
 800205c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800205e:	683b      	ldr	r3, [r7, #0]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	2b06      	cmp	r3, #6
 8002064:	d824      	bhi.n	80020b0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	685a      	ldr	r2, [r3, #4]
 8002070:	4613      	mov	r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	3b05      	subs	r3, #5
 8002078:	221f      	movs	r2, #31
 800207a:	fa02 f303 	lsl.w	r3, r2, r3
 800207e:	43da      	mvns	r2, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	400a      	ands	r2, r1
 8002086:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	b29b      	uxth	r3, r3
 8002094:	4618      	mov	r0, r3
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	685a      	ldr	r2, [r3, #4]
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	3b05      	subs	r3, #5
 80020a2:	fa00 f203 	lsl.w	r2, r0, r3
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	430a      	orrs	r2, r1
 80020ac:	635a      	str	r2, [r3, #52]	; 0x34
 80020ae:	e04c      	b.n	800214a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	685b      	ldr	r3, [r3, #4]
 80020b4:	2b0c      	cmp	r3, #12
 80020b6:	d824      	bhi.n	8002102 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	4613      	mov	r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	4413      	add	r3, r2
 80020c8:	3b23      	subs	r3, #35	; 0x23
 80020ca:	221f      	movs	r2, #31
 80020cc:	fa02 f303 	lsl.w	r3, r2, r3
 80020d0:	43da      	mvns	r2, r3
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	400a      	ands	r2, r1
 80020d8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	4618      	mov	r0, r3
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	685a      	ldr	r2, [r3, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	009b      	lsls	r3, r3, #2
 80020f0:	4413      	add	r3, r2
 80020f2:	3b23      	subs	r3, #35	; 0x23
 80020f4:	fa00 f203 	lsl.w	r2, r0, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	631a      	str	r2, [r3, #48]	; 0x30
 8002100:	e023      	b.n	800214a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	685a      	ldr	r2, [r3, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	009b      	lsls	r3, r3, #2
 8002110:	4413      	add	r3, r2
 8002112:	3b41      	subs	r3, #65	; 0x41
 8002114:	221f      	movs	r2, #31
 8002116:	fa02 f303 	lsl.w	r3, r2, r3
 800211a:	43da      	mvns	r2, r3
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	400a      	ands	r2, r1
 8002122:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800212a:	683b      	ldr	r3, [r7, #0]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	b29b      	uxth	r3, r3
 8002130:	4618      	mov	r0, r3
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685a      	ldr	r2, [r3, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	4413      	add	r3, r2
 800213c:	3b41      	subs	r3, #65	; 0x41
 800213e:	fa00 f203 	lsl.w	r2, r0, r3
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	430a      	orrs	r2, r1
 8002148:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800214a:	4b22      	ldr	r3, [pc, #136]	; (80021d4 <HAL_ADC_ConfigChannel+0x234>)
 800214c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	4a21      	ldr	r2, [pc, #132]	; (80021d8 <HAL_ADC_ConfigChannel+0x238>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d109      	bne.n	800216c <HAL_ADC_ConfigChannel+0x1cc>
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	2b12      	cmp	r3, #18
 800215e:	d105      	bne.n	800216c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	685b      	ldr	r3, [r3, #4]
 8002164:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a19      	ldr	r2, [pc, #100]	; (80021d8 <HAL_ADC_ConfigChannel+0x238>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d123      	bne.n	80021be <HAL_ADC_ConfigChannel+0x21e>
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2b10      	cmp	r3, #16
 800217c:	d003      	beq.n	8002186 <HAL_ADC_ConfigChannel+0x1e6>
 800217e:	683b      	ldr	r3, [r7, #0]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b11      	cmp	r3, #17
 8002184:	d11b      	bne.n	80021be <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	2b10      	cmp	r3, #16
 8002198:	d111      	bne.n	80021be <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800219a:	4b10      	ldr	r3, [pc, #64]	; (80021dc <HAL_ADC_ConfigChannel+0x23c>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	4a10      	ldr	r2, [pc, #64]	; (80021e0 <HAL_ADC_ConfigChannel+0x240>)
 80021a0:	fba2 2303 	umull	r2, r3, r2, r3
 80021a4:	0c9a      	lsrs	r2, r3, #18
 80021a6:	4613      	mov	r3, r2
 80021a8:	009b      	lsls	r3, r3, #2
 80021aa:	4413      	add	r3, r2
 80021ac:	005b      	lsls	r3, r3, #1
 80021ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021b0:	e002      	b.n	80021b8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	3b01      	subs	r3, #1
 80021b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f9      	bne.n	80021b2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2200      	movs	r2, #0
 80021c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	3714      	adds	r7, #20
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr
 80021d4:	40012300 	.word	0x40012300
 80021d8:	40012000 	.word	0x40012000
 80021dc:	20000018 	.word	0x20000018
 80021e0:	431bde83 	.word	0x431bde83

080021e4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80021e4:	b480      	push	{r7}
 80021e6:	b085      	sub	sp, #20
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021ec:	4b79      	ldr	r3, [pc, #484]	; (80023d4 <ADC_Init+0x1f0>)
 80021ee:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	431a      	orrs	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002218:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	6859      	ldr	r1, [r3, #4]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	691b      	ldr	r3, [r3, #16]
 8002224:	021a      	lsls	r2, r3, #8
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	430a      	orrs	r2, r1
 800222c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	685a      	ldr	r2, [r3, #4]
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800223c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	6859      	ldr	r1, [r3, #4]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	689a      	ldr	r2, [r3, #8]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	430a      	orrs	r2, r1
 800224e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800225e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	6899      	ldr	r1, [r3, #8]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	68da      	ldr	r2, [r3, #12]
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	430a      	orrs	r2, r1
 8002270:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002276:	4a58      	ldr	r2, [pc, #352]	; (80023d8 <ADC_Init+0x1f4>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d022      	beq.n	80022c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	689a      	ldr	r2, [r3, #8]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800228a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	6899      	ldr	r1, [r3, #8]
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	430a      	orrs	r2, r1
 800229c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	689a      	ldr	r2, [r3, #8]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	6899      	ldr	r1, [r3, #8]
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	609a      	str	r2, [r3, #8]
 80022c0:	e00f      	b.n	80022e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	689a      	ldr	r2, [r3, #8]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80022d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	689a      	ldr	r2, [r3, #8]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80022e0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f022 0202 	bic.w	r2, r2, #2
 80022f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	6899      	ldr	r1, [r3, #8]
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	7e1b      	ldrb	r3, [r3, #24]
 80022fc:	005a      	lsls	r2, r3, #1
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	430a      	orrs	r2, r1
 8002304:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	f893 3020 	ldrb.w	r3, [r3, #32]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d01b      	beq.n	8002348 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	685a      	ldr	r2, [r3, #4]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800231e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	685a      	ldr	r2, [r3, #4]
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800232e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6859      	ldr	r1, [r3, #4]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800233a:	3b01      	subs	r3, #1
 800233c:	035a      	lsls	r2, r3, #13
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	e007      	b.n	8002358 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002356:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002366:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	69db      	ldr	r3, [r3, #28]
 8002372:	3b01      	subs	r3, #1
 8002374:	051a      	lsls	r2, r3, #20
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	430a      	orrs	r2, r1
 800237c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	689a      	ldr	r2, [r3, #8]
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800238c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	6899      	ldr	r1, [r3, #8]
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800239a:	025a      	lsls	r2, r3, #9
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	430a      	orrs	r2, r1
 80023a2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	689a      	ldr	r2, [r3, #8]
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80023b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	6899      	ldr	r1, [r3, #8]
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	029a      	lsls	r2, r3, #10
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	609a      	str	r2, [r3, #8]
}
 80023c8:	bf00      	nop
 80023ca:	3714      	adds	r7, #20
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr
 80023d4:	40012300 	.word	0x40012300
 80023d8:	0f000001 	.word	0x0f000001

080023dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023dc:	b480      	push	{r7}
 80023de:	b085      	sub	sp, #20
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	f003 0307 	and.w	r3, r3, #7
 80023ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023ec:	4b0c      	ldr	r3, [pc, #48]	; (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023f2:	68ba      	ldr	r2, [r7, #8]
 80023f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f8:	4013      	ands	r3, r2
 80023fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002400:	68bb      	ldr	r3, [r7, #8]
 8002402:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002404:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002408:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800240c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240e:	4a04      	ldr	r2, [pc, #16]	; (8002420 <__NVIC_SetPriorityGrouping+0x44>)
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	60d3      	str	r3, [r2, #12]
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr
 8002420:	e000ed00 	.word	0xe000ed00

08002424 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002428:	4b04      	ldr	r3, [pc, #16]	; (800243c <__NVIC_GetPriorityGrouping+0x18>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	f003 0307 	and.w	r3, r3, #7
}
 8002432:	4618      	mov	r0, r3
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	e000ed00 	.word	0xe000ed00

08002440 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002440:	b480      	push	{r7}
 8002442:	b083      	sub	sp, #12
 8002444:	af00      	add	r7, sp, #0
 8002446:	4603      	mov	r3, r0
 8002448:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800244a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244e:	2b00      	cmp	r3, #0
 8002450:	db0b      	blt.n	800246a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002452:	79fb      	ldrb	r3, [r7, #7]
 8002454:	f003 021f 	and.w	r2, r3, #31
 8002458:	4907      	ldr	r1, [pc, #28]	; (8002478 <__NVIC_EnableIRQ+0x38>)
 800245a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245e:	095b      	lsrs	r3, r3, #5
 8002460:	2001      	movs	r0, #1
 8002462:	fa00 f202 	lsl.w	r2, r0, r2
 8002466:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr
 8002476:	bf00      	nop
 8002478:	e000e100 	.word	0xe000e100

0800247c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800247c:	b480      	push	{r7}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	4603      	mov	r3, r0
 8002484:	6039      	str	r1, [r7, #0]
 8002486:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002488:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800248c:	2b00      	cmp	r3, #0
 800248e:	db0a      	blt.n	80024a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002490:	683b      	ldr	r3, [r7, #0]
 8002492:	b2da      	uxtb	r2, r3
 8002494:	490c      	ldr	r1, [pc, #48]	; (80024c8 <__NVIC_SetPriority+0x4c>)
 8002496:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800249a:	0112      	lsls	r2, r2, #4
 800249c:	b2d2      	uxtb	r2, r2
 800249e:	440b      	add	r3, r1
 80024a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024a4:	e00a      	b.n	80024bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024a6:	683b      	ldr	r3, [r7, #0]
 80024a8:	b2da      	uxtb	r2, r3
 80024aa:	4908      	ldr	r1, [pc, #32]	; (80024cc <__NVIC_SetPriority+0x50>)
 80024ac:	79fb      	ldrb	r3, [r7, #7]
 80024ae:	f003 030f 	and.w	r3, r3, #15
 80024b2:	3b04      	subs	r3, #4
 80024b4:	0112      	lsls	r2, r2, #4
 80024b6:	b2d2      	uxtb	r2, r2
 80024b8:	440b      	add	r3, r1
 80024ba:	761a      	strb	r2, [r3, #24]
}
 80024bc:	bf00      	nop
 80024be:	370c      	adds	r7, #12
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000e100 	.word	0xe000e100
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b089      	sub	sp, #36	; 0x24
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	60f8      	str	r0, [r7, #12]
 80024d8:	60b9      	str	r1, [r7, #8]
 80024da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	f003 0307 	and.w	r3, r3, #7
 80024e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024e4:	69fb      	ldr	r3, [r7, #28]
 80024e6:	f1c3 0307 	rsb	r3, r3, #7
 80024ea:	2b04      	cmp	r3, #4
 80024ec:	bf28      	it	cs
 80024ee:	2304      	movcs	r3, #4
 80024f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024f2:	69fb      	ldr	r3, [r7, #28]
 80024f4:	3304      	adds	r3, #4
 80024f6:	2b06      	cmp	r3, #6
 80024f8:	d902      	bls.n	8002500 <NVIC_EncodePriority+0x30>
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	3b03      	subs	r3, #3
 80024fe:	e000      	b.n	8002502 <NVIC_EncodePriority+0x32>
 8002500:	2300      	movs	r3, #0
 8002502:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002504:	f04f 32ff 	mov.w	r2, #4294967295
 8002508:	69bb      	ldr	r3, [r7, #24]
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43da      	mvns	r2, r3
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	401a      	ands	r2, r3
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002518:	f04f 31ff 	mov.w	r1, #4294967295
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	fa01 f303 	lsl.w	r3, r1, r3
 8002522:	43d9      	mvns	r1, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002528:	4313      	orrs	r3, r2
         );
}
 800252a:	4618      	mov	r0, r3
 800252c:	3724      	adds	r7, #36	; 0x24
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
	...

08002538 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	3b01      	subs	r3, #1
 8002544:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002548:	d301      	bcc.n	800254e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800254a:	2301      	movs	r3, #1
 800254c:	e00f      	b.n	800256e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800254e:	4a0a      	ldr	r2, [pc, #40]	; (8002578 <SysTick_Config+0x40>)
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3b01      	subs	r3, #1
 8002554:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002556:	210f      	movs	r1, #15
 8002558:	f04f 30ff 	mov.w	r0, #4294967295
 800255c:	f7ff ff8e 	bl	800247c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002560:	4b05      	ldr	r3, [pc, #20]	; (8002578 <SysTick_Config+0x40>)
 8002562:	2200      	movs	r2, #0
 8002564:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002566:	4b04      	ldr	r3, [pc, #16]	; (8002578 <SysTick_Config+0x40>)
 8002568:	2207      	movs	r2, #7
 800256a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3708      	adds	r7, #8
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	e000e010 	.word	0xe000e010

0800257c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002584:	6878      	ldr	r0, [r7, #4]
 8002586:	f7ff ff29 	bl	80023dc <__NVIC_SetPriorityGrouping>
}
 800258a:	bf00      	nop
 800258c:	3708      	adds	r7, #8
 800258e:	46bd      	mov	sp, r7
 8002590:	bd80      	pop	{r7, pc}

08002592 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002592:	b580      	push	{r7, lr}
 8002594:	b086      	sub	sp, #24
 8002596:	af00      	add	r7, sp, #0
 8002598:	4603      	mov	r3, r0
 800259a:	60b9      	str	r1, [r7, #8]
 800259c:	607a      	str	r2, [r7, #4]
 800259e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025a0:	2300      	movs	r3, #0
 80025a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025a4:	f7ff ff3e 	bl	8002424 <__NVIC_GetPriorityGrouping>
 80025a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025aa:	687a      	ldr	r2, [r7, #4]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	6978      	ldr	r0, [r7, #20]
 80025b0:	f7ff ff8e 	bl	80024d0 <NVIC_EncodePriority>
 80025b4:	4602      	mov	r2, r0
 80025b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80025ba:	4611      	mov	r1, r2
 80025bc:	4618      	mov	r0, r3
 80025be:	f7ff ff5d 	bl	800247c <__NVIC_SetPriority>
}
 80025c2:	bf00      	nop
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}

080025ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025ca:	b580      	push	{r7, lr}
 80025cc:	b082      	sub	sp, #8
 80025ce:	af00      	add	r7, sp, #0
 80025d0:	4603      	mov	r3, r0
 80025d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80025d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ff31 	bl	8002440 <__NVIC_EnableIRQ>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f7ff ffa2 	bl	8002538 <SysTick_Config>
 80025f4:	4603      	mov	r3, r0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	e16b      	b.n	80028f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800261c:	2201      	movs	r2, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	f040 815a 	bne.w	80028ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d005      	beq.n	8002652 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264e:	2b02      	cmp	r3, #2
 8002650:	d130      	bne.n	80026b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002688:	2201      	movs	r2, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 0201 	and.w	r2, r3, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d017      	beq.n	80026f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d123      	bne.n	8002744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	08da      	lsrs	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3208      	adds	r2, #8
 8002704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	220f      	movs	r2, #15
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	08da      	lsrs	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3208      	adds	r2, #8
 800273e:	69b9      	ldr	r1, [r7, #24]
 8002740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80b4 	beq.w	80028ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b60      	ldr	r3, [pc, #384]	; (800290c <HAL_GPIO_Init+0x30c>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	4a5f      	ldr	r2, [pc, #380]	; (800290c <HAL_GPIO_Init+0x30c>)
 8002790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002794:	6453      	str	r3, [r2, #68]	; 0x44
 8002796:	4b5d      	ldr	r3, [pc, #372]	; (800290c <HAL_GPIO_Init+0x30c>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a2:	4a5b      	ldr	r2, [pc, #364]	; (8002910 <HAL_GPIO_Init+0x310>)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	089b      	lsrs	r3, r3, #2
 80027a8:	3302      	adds	r3, #2
 80027aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a52      	ldr	r2, [pc, #328]	; (8002914 <HAL_GPIO_Init+0x314>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d02b      	beq.n	8002826 <HAL_GPIO_Init+0x226>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a51      	ldr	r2, [pc, #324]	; (8002918 <HAL_GPIO_Init+0x318>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d025      	beq.n	8002822 <HAL_GPIO_Init+0x222>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a50      	ldr	r2, [pc, #320]	; (800291c <HAL_GPIO_Init+0x31c>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d01f      	beq.n	800281e <HAL_GPIO_Init+0x21e>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a4f      	ldr	r2, [pc, #316]	; (8002920 <HAL_GPIO_Init+0x320>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d019      	beq.n	800281a <HAL_GPIO_Init+0x21a>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a4e      	ldr	r2, [pc, #312]	; (8002924 <HAL_GPIO_Init+0x324>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d013      	beq.n	8002816 <HAL_GPIO_Init+0x216>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a4d      	ldr	r2, [pc, #308]	; (8002928 <HAL_GPIO_Init+0x328>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d00d      	beq.n	8002812 <HAL_GPIO_Init+0x212>
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	4a4c      	ldr	r2, [pc, #304]	; (800292c <HAL_GPIO_Init+0x32c>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d007      	beq.n	800280e <HAL_GPIO_Init+0x20e>
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	4a4b      	ldr	r2, [pc, #300]	; (8002930 <HAL_GPIO_Init+0x330>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d101      	bne.n	800280a <HAL_GPIO_Init+0x20a>
 8002806:	2307      	movs	r3, #7
 8002808:	e00e      	b.n	8002828 <HAL_GPIO_Init+0x228>
 800280a:	2308      	movs	r3, #8
 800280c:	e00c      	b.n	8002828 <HAL_GPIO_Init+0x228>
 800280e:	2306      	movs	r3, #6
 8002810:	e00a      	b.n	8002828 <HAL_GPIO_Init+0x228>
 8002812:	2305      	movs	r3, #5
 8002814:	e008      	b.n	8002828 <HAL_GPIO_Init+0x228>
 8002816:	2304      	movs	r3, #4
 8002818:	e006      	b.n	8002828 <HAL_GPIO_Init+0x228>
 800281a:	2303      	movs	r3, #3
 800281c:	e004      	b.n	8002828 <HAL_GPIO_Init+0x228>
 800281e:	2302      	movs	r3, #2
 8002820:	e002      	b.n	8002828 <HAL_GPIO_Init+0x228>
 8002822:	2301      	movs	r3, #1
 8002824:	e000      	b.n	8002828 <HAL_GPIO_Init+0x228>
 8002826:	2300      	movs	r3, #0
 8002828:	69fa      	ldr	r2, [r7, #28]
 800282a:	f002 0203 	and.w	r2, r2, #3
 800282e:	0092      	lsls	r2, r2, #2
 8002830:	4093      	lsls	r3, r2
 8002832:	69ba      	ldr	r2, [r7, #24]
 8002834:	4313      	orrs	r3, r2
 8002836:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002838:	4935      	ldr	r1, [pc, #212]	; (8002910 <HAL_GPIO_Init+0x310>)
 800283a:	69fb      	ldr	r3, [r7, #28]
 800283c:	089b      	lsrs	r3, r3, #2
 800283e:	3302      	adds	r3, #2
 8002840:	69ba      	ldr	r2, [r7, #24]
 8002842:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002846:	4b3b      	ldr	r3, [pc, #236]	; (8002934 <HAL_GPIO_Init+0x334>)
 8002848:	689b      	ldr	r3, [r3, #8]
 800284a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	43db      	mvns	r3, r3
 8002850:	69ba      	ldr	r2, [r7, #24]
 8002852:	4013      	ands	r3, r2
 8002854:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800286a:	4a32      	ldr	r2, [pc, #200]	; (8002934 <HAL_GPIO_Init+0x334>)
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002870:	4b30      	ldr	r3, [pc, #192]	; (8002934 <HAL_GPIO_Init+0x334>)
 8002872:	68db      	ldr	r3, [r3, #12]
 8002874:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	43db      	mvns	r3, r3
 800287a:	69ba      	ldr	r2, [r7, #24]
 800287c:	4013      	ands	r3, r2
 800287e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d003      	beq.n	8002894 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800288c:	69ba      	ldr	r2, [r7, #24]
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	4313      	orrs	r3, r2
 8002892:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002894:	4a27      	ldr	r2, [pc, #156]	; (8002934 <HAL_GPIO_Init+0x334>)
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800289a:	4b26      	ldr	r3, [pc, #152]	; (8002934 <HAL_GPIO_Init+0x334>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a0:	693b      	ldr	r3, [r7, #16]
 80028a2:	43db      	mvns	r3, r3
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	4013      	ands	r3, r2
 80028a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685b      	ldr	r3, [r3, #4]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80028b6:	69ba      	ldr	r2, [r7, #24]
 80028b8:	693b      	ldr	r3, [r7, #16]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028be:	4a1d      	ldr	r2, [pc, #116]	; (8002934 <HAL_GPIO_Init+0x334>)
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028c4:	4b1b      	ldr	r3, [pc, #108]	; (8002934 <HAL_GPIO_Init+0x334>)
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	43db      	mvns	r3, r3
 80028ce:	69ba      	ldr	r2, [r7, #24]
 80028d0:	4013      	ands	r3, r2
 80028d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	685b      	ldr	r3, [r3, #4]
 80028d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d003      	beq.n	80028e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80028e0:	69ba      	ldr	r2, [r7, #24]
 80028e2:	693b      	ldr	r3, [r7, #16]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028e8:	4a12      	ldr	r2, [pc, #72]	; (8002934 <HAL_GPIO_Init+0x334>)
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ee:	69fb      	ldr	r3, [r7, #28]
 80028f0:	3301      	adds	r3, #1
 80028f2:	61fb      	str	r3, [r7, #28]
 80028f4:	69fb      	ldr	r3, [r7, #28]
 80028f6:	2b0f      	cmp	r3, #15
 80028f8:	f67f ae90 	bls.w	800261c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028fc:	bf00      	nop
 80028fe:	bf00      	nop
 8002900:	3724      	adds	r7, #36	; 0x24
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	40023800 	.word	0x40023800
 8002910:	40013800 	.word	0x40013800
 8002914:	40020000 	.word	0x40020000
 8002918:	40020400 	.word	0x40020400
 800291c:	40020800 	.word	0x40020800
 8002920:	40020c00 	.word	0x40020c00
 8002924:	40021000 	.word	0x40021000
 8002928:	40021400 	.word	0x40021400
 800292c:	40021800 	.word	0x40021800
 8002930:	40021c00 	.word	0x40021c00
 8002934:	40013c00 	.word	0x40013c00

08002938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]
 8002944:	4613      	mov	r3, r2
 8002946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002948:	787b      	ldrb	r3, [r7, #1]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800294e:	887a      	ldrh	r2, [r7, #2]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002954:	e003      	b.n	800295e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002956:	887b      	ldrh	r3, [r7, #2]
 8002958:	041a      	lsls	r2, r3, #16
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	619a      	str	r2, [r3, #24]
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800296a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800296c:	b08f      	sub	sp, #60	; 0x3c
 800296e:	af0a      	add	r7, sp, #40	; 0x28
 8002970:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d101      	bne.n	800297c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8002978:	2301      	movs	r3, #1
 800297a:	e054      	b.n	8002a26 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8002988:	b2db      	uxtb	r3, r3
 800298a:	2b00      	cmp	r3, #0
 800298c:	d106      	bne.n	800299c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8002996:	6878      	ldr	r0, [r7, #4]
 8002998:	f005 f964 	bl	8007c64 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2203      	movs	r2, #3
 80029a0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d102      	bne.n	80029b6 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4618      	mov	r0, r3
 80029bc:	f003 f956 	bl	8005c6c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	603b      	str	r3, [r7, #0]
 80029c6:	687e      	ldr	r6, [r7, #4]
 80029c8:	466d      	mov	r5, sp
 80029ca:	f106 0410 	add.w	r4, r6, #16
 80029ce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029d6:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029da:	e885 0003 	stmia.w	r5, {r0, r1}
 80029de:	1d33      	adds	r3, r6, #4
 80029e0:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029e2:	6838      	ldr	r0, [r7, #0]
 80029e4:	f003 f8d0 	bl	8005b88 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2101      	movs	r1, #1
 80029ee:	4618      	mov	r0, r3
 80029f0:	f003 f94d 	bl	8005c8e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	603b      	str	r3, [r7, #0]
 80029fa:	687e      	ldr	r6, [r7, #4]
 80029fc:	466d      	mov	r5, sp
 80029fe:	f106 0410 	add.w	r4, r6, #16
 8002a02:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a04:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a06:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a0a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a0e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a12:	1d33      	adds	r3, r6, #4
 8002a14:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a16:	6838      	ldr	r0, [r7, #0]
 8002a18:	f003 fad6 	bl	8005fc8 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8002a24:	2300      	movs	r3, #0
}
 8002a26:	4618      	mov	r0, r3
 8002a28:	3714      	adds	r7, #20
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a2e <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8002a2e:	b590      	push	{r4, r7, lr}
 8002a30:	b089      	sub	sp, #36	; 0x24
 8002a32:	af04      	add	r7, sp, #16
 8002a34:	6078      	str	r0, [r7, #4]
 8002a36:	4608      	mov	r0, r1
 8002a38:	4611      	mov	r1, r2
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	4603      	mov	r3, r0
 8002a3e:	70fb      	strb	r3, [r7, #3]
 8002a40:	460b      	mov	r3, r1
 8002a42:	70bb      	strb	r3, [r7, #2]
 8002a44:	4613      	mov	r3, r2
 8002a46:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d101      	bne.n	8002a56 <HAL_HCD_HC_Init+0x28>
 8002a52:	2302      	movs	r3, #2
 8002a54:	e076      	b.n	8002b44 <HAL_HCD_HC_Init+0x116>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8002a5e:	78fb      	ldrb	r3, [r7, #3]
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	212c      	movs	r1, #44	; 0x2c
 8002a64:	fb01 f303 	mul.w	r3, r1, r3
 8002a68:	4413      	add	r3, r2
 8002a6a:	333d      	adds	r3, #61	; 0x3d
 8002a6c:	2200      	movs	r2, #0
 8002a6e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002a70:	78fb      	ldrb	r3, [r7, #3]
 8002a72:	687a      	ldr	r2, [r7, #4]
 8002a74:	212c      	movs	r1, #44	; 0x2c
 8002a76:	fb01 f303 	mul.w	r3, r1, r3
 8002a7a:	4413      	add	r3, r2
 8002a7c:	3338      	adds	r3, #56	; 0x38
 8002a7e:	787a      	ldrb	r2, [r7, #1]
 8002a80:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	687a      	ldr	r2, [r7, #4]
 8002a86:	212c      	movs	r1, #44	; 0x2c
 8002a88:	fb01 f303 	mul.w	r3, r1, r3
 8002a8c:	4413      	add	r3, r2
 8002a8e:	3340      	adds	r3, #64	; 0x40
 8002a90:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8002a92:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002a94:	78fb      	ldrb	r3, [r7, #3]
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	212c      	movs	r1, #44	; 0x2c
 8002a9a:	fb01 f303 	mul.w	r3, r1, r3
 8002a9e:	4413      	add	r3, r2
 8002aa0:	3339      	adds	r3, #57	; 0x39
 8002aa2:	78fa      	ldrb	r2, [r7, #3]
 8002aa4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	212c      	movs	r1, #44	; 0x2c
 8002aac:	fb01 f303 	mul.w	r3, r1, r3
 8002ab0:	4413      	add	r3, r2
 8002ab2:	333f      	adds	r3, #63	; 0x3f
 8002ab4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8002ab8:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8002aba:	78fb      	ldrb	r3, [r7, #3]
 8002abc:	78ba      	ldrb	r2, [r7, #2]
 8002abe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002ac2:	b2d0      	uxtb	r0, r2
 8002ac4:	687a      	ldr	r2, [r7, #4]
 8002ac6:	212c      	movs	r1, #44	; 0x2c
 8002ac8:	fb01 f303 	mul.w	r3, r1, r3
 8002acc:	4413      	add	r3, r2
 8002ace:	333a      	adds	r3, #58	; 0x3a
 8002ad0:	4602      	mov	r2, r0
 8002ad2:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8002ad4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	da09      	bge.n	8002af0 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8002adc:	78fb      	ldrb	r3, [r7, #3]
 8002ade:	687a      	ldr	r2, [r7, #4]
 8002ae0:	212c      	movs	r1, #44	; 0x2c
 8002ae2:	fb01 f303 	mul.w	r3, r1, r3
 8002ae6:	4413      	add	r3, r2
 8002ae8:	333b      	adds	r3, #59	; 0x3b
 8002aea:	2201      	movs	r2, #1
 8002aec:	701a      	strb	r2, [r3, #0]
 8002aee:	e008      	b.n	8002b02 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8002af0:	78fb      	ldrb	r3, [r7, #3]
 8002af2:	687a      	ldr	r2, [r7, #4]
 8002af4:	212c      	movs	r1, #44	; 0x2c
 8002af6:	fb01 f303 	mul.w	r3, r1, r3
 8002afa:	4413      	add	r3, r2
 8002afc:	333b      	adds	r3, #59	; 0x3b
 8002afe:	2200      	movs	r2, #0
 8002b00:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8002b02:	78fb      	ldrb	r3, [r7, #3]
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	212c      	movs	r1, #44	; 0x2c
 8002b08:	fb01 f303 	mul.w	r3, r1, r3
 8002b0c:	4413      	add	r3, r2
 8002b0e:	333c      	adds	r3, #60	; 0x3c
 8002b10:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002b14:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	787c      	ldrb	r4, [r7, #1]
 8002b1c:	78ba      	ldrb	r2, [r7, #2]
 8002b1e:	78f9      	ldrb	r1, [r7, #3]
 8002b20:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002b22:	9302      	str	r3, [sp, #8]
 8002b24:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8002b28:	9301      	str	r3, [sp, #4]
 8002b2a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	4623      	mov	r3, r4
 8002b32:	f003 fba5 	bl	8006280 <USB_HC_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b44:	4618      	mov	r0, r3
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	bd90      	pop	{r4, r7, pc}

08002b4c <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b084      	sub	sp, #16
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	460b      	mov	r3, r1
 8002b56:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d101      	bne.n	8002b6a <HAL_HCD_HC_Halt+0x1e>
 8002b66:	2302      	movs	r3, #2
 8002b68:	e00f      	b.n	8002b8a <HAL_HCD_HC_Halt+0x3e>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2201      	movs	r2, #1
 8002b6e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	78fa      	ldrb	r2, [r7, #3]
 8002b78:	4611      	mov	r1, r2
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f003 fdf5 	bl	800676a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8002b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	3710      	adds	r7, #16
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	bd80      	pop	{r7, pc}
	...

08002b94 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002b94:	b580      	push	{r7, lr}
 8002b96:	b082      	sub	sp, #8
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	4608      	mov	r0, r1
 8002b9e:	4611      	mov	r1, r2
 8002ba0:	461a      	mov	r2, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	70fb      	strb	r3, [r7, #3]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	70bb      	strb	r3, [r7, #2]
 8002baa:	4613      	mov	r3, r2
 8002bac:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002bae:	78fb      	ldrb	r3, [r7, #3]
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	212c      	movs	r1, #44	; 0x2c
 8002bb4:	fb01 f303 	mul.w	r3, r1, r3
 8002bb8:	4413      	add	r3, r2
 8002bba:	333b      	adds	r3, #59	; 0x3b
 8002bbc:	78ba      	ldrb	r2, [r7, #2]
 8002bbe:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002bc0:	78fb      	ldrb	r3, [r7, #3]
 8002bc2:	687a      	ldr	r2, [r7, #4]
 8002bc4:	212c      	movs	r1, #44	; 0x2c
 8002bc6:	fb01 f303 	mul.w	r3, r1, r3
 8002bca:	4413      	add	r3, r2
 8002bcc:	333f      	adds	r3, #63	; 0x3f
 8002bce:	787a      	ldrb	r2, [r7, #1]
 8002bd0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002bd2:	7c3b      	ldrb	r3, [r7, #16]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d112      	bne.n	8002bfe <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	687a      	ldr	r2, [r7, #4]
 8002bdc:	212c      	movs	r1, #44	; 0x2c
 8002bde:	fb01 f303 	mul.w	r3, r1, r3
 8002be2:	4413      	add	r3, r2
 8002be4:	3342      	adds	r3, #66	; 0x42
 8002be6:	2203      	movs	r2, #3
 8002be8:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002bea:	78fb      	ldrb	r3, [r7, #3]
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	212c      	movs	r1, #44	; 0x2c
 8002bf0:	fb01 f303 	mul.w	r3, r1, r3
 8002bf4:	4413      	add	r3, r2
 8002bf6:	333d      	adds	r3, #61	; 0x3d
 8002bf8:	7f3a      	ldrb	r2, [r7, #28]
 8002bfa:	701a      	strb	r2, [r3, #0]
 8002bfc:	e008      	b.n	8002c10 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002bfe:	78fb      	ldrb	r3, [r7, #3]
 8002c00:	687a      	ldr	r2, [r7, #4]
 8002c02:	212c      	movs	r1, #44	; 0x2c
 8002c04:	fb01 f303 	mul.w	r3, r1, r3
 8002c08:	4413      	add	r3, r2
 8002c0a:	3342      	adds	r3, #66	; 0x42
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002c10:	787b      	ldrb	r3, [r7, #1]
 8002c12:	2b03      	cmp	r3, #3
 8002c14:	f200 80c6 	bhi.w	8002da4 <HAL_HCD_HC_SubmitRequest+0x210>
 8002c18:	a201      	add	r2, pc, #4	; (adr r2, 8002c20 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8002c1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c1e:	bf00      	nop
 8002c20:	08002c31 	.word	0x08002c31
 8002c24:	08002d91 	.word	0x08002d91
 8002c28:	08002c95 	.word	0x08002c95
 8002c2c:	08002d13 	.word	0x08002d13
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8002c30:	7c3b      	ldrb	r3, [r7, #16]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	f040 80b8 	bne.w	8002da8 <HAL_HCD_HC_SubmitRequest+0x214>
 8002c38:	78bb      	ldrb	r3, [r7, #2]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	f040 80b4 	bne.w	8002da8 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8002c40:	8b3b      	ldrh	r3, [r7, #24]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d108      	bne.n	8002c58 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8002c46:	78fb      	ldrb	r3, [r7, #3]
 8002c48:	687a      	ldr	r2, [r7, #4]
 8002c4a:	212c      	movs	r1, #44	; 0x2c
 8002c4c:	fb01 f303 	mul.w	r3, r1, r3
 8002c50:	4413      	add	r3, r2
 8002c52:	3355      	adds	r3, #85	; 0x55
 8002c54:	2201      	movs	r2, #1
 8002c56:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c58:	78fb      	ldrb	r3, [r7, #3]
 8002c5a:	687a      	ldr	r2, [r7, #4]
 8002c5c:	212c      	movs	r1, #44	; 0x2c
 8002c5e:	fb01 f303 	mul.w	r3, r1, r3
 8002c62:	4413      	add	r3, r2
 8002c64:	3355      	adds	r3, #85	; 0x55
 8002c66:	781b      	ldrb	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d109      	bne.n	8002c80 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002c6c:	78fb      	ldrb	r3, [r7, #3]
 8002c6e:	687a      	ldr	r2, [r7, #4]
 8002c70:	212c      	movs	r1, #44	; 0x2c
 8002c72:	fb01 f303 	mul.w	r3, r1, r3
 8002c76:	4413      	add	r3, r2
 8002c78:	3342      	adds	r3, #66	; 0x42
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002c7e:	e093      	b.n	8002da8 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002c80:	78fb      	ldrb	r3, [r7, #3]
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	212c      	movs	r1, #44	; 0x2c
 8002c86:	fb01 f303 	mul.w	r3, r1, r3
 8002c8a:	4413      	add	r3, r2
 8002c8c:	3342      	adds	r3, #66	; 0x42
 8002c8e:	2202      	movs	r2, #2
 8002c90:	701a      	strb	r2, [r3, #0]
      break;
 8002c92:	e089      	b.n	8002da8 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002c94:	78bb      	ldrb	r3, [r7, #2]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d11d      	bne.n	8002cd6 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002c9a:	78fb      	ldrb	r3, [r7, #3]
 8002c9c:	687a      	ldr	r2, [r7, #4]
 8002c9e:	212c      	movs	r1, #44	; 0x2c
 8002ca0:	fb01 f303 	mul.w	r3, r1, r3
 8002ca4:	4413      	add	r3, r2
 8002ca6:	3355      	adds	r3, #85	; 0x55
 8002ca8:	781b      	ldrb	r3, [r3, #0]
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d109      	bne.n	8002cc2 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cae:	78fb      	ldrb	r3, [r7, #3]
 8002cb0:	687a      	ldr	r2, [r7, #4]
 8002cb2:	212c      	movs	r1, #44	; 0x2c
 8002cb4:	fb01 f303 	mul.w	r3, r1, r3
 8002cb8:	4413      	add	r3, r2
 8002cba:	3342      	adds	r3, #66	; 0x42
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002cc0:	e073      	b.n	8002daa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cc2:	78fb      	ldrb	r3, [r7, #3]
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	212c      	movs	r1, #44	; 0x2c
 8002cc8:	fb01 f303 	mul.w	r3, r1, r3
 8002ccc:	4413      	add	r3, r2
 8002cce:	3342      	adds	r3, #66	; 0x42
 8002cd0:	2202      	movs	r2, #2
 8002cd2:	701a      	strb	r2, [r3, #0]
      break;
 8002cd4:	e069      	b.n	8002daa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002cd6:	78fb      	ldrb	r3, [r7, #3]
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	212c      	movs	r1, #44	; 0x2c
 8002cdc:	fb01 f303 	mul.w	r3, r1, r3
 8002ce0:	4413      	add	r3, r2
 8002ce2:	3354      	adds	r3, #84	; 0x54
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d109      	bne.n	8002cfe <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002cea:	78fb      	ldrb	r3, [r7, #3]
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	212c      	movs	r1, #44	; 0x2c
 8002cf0:	fb01 f303 	mul.w	r3, r1, r3
 8002cf4:	4413      	add	r3, r2
 8002cf6:	3342      	adds	r3, #66	; 0x42
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	701a      	strb	r2, [r3, #0]
      break;
 8002cfc:	e055      	b.n	8002daa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002cfe:	78fb      	ldrb	r3, [r7, #3]
 8002d00:	687a      	ldr	r2, [r7, #4]
 8002d02:	212c      	movs	r1, #44	; 0x2c
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	4413      	add	r3, r2
 8002d0a:	3342      	adds	r3, #66	; 0x42
 8002d0c:	2202      	movs	r2, #2
 8002d0e:	701a      	strb	r2, [r3, #0]
      break;
 8002d10:	e04b      	b.n	8002daa <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002d12:	78bb      	ldrb	r3, [r7, #2]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d11d      	bne.n	8002d54 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002d18:	78fb      	ldrb	r3, [r7, #3]
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	212c      	movs	r1, #44	; 0x2c
 8002d1e:	fb01 f303 	mul.w	r3, r1, r3
 8002d22:	4413      	add	r3, r2
 8002d24:	3355      	adds	r3, #85	; 0x55
 8002d26:	781b      	ldrb	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d109      	bne.n	8002d40 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d2c:	78fb      	ldrb	r3, [r7, #3]
 8002d2e:	687a      	ldr	r2, [r7, #4]
 8002d30:	212c      	movs	r1, #44	; 0x2c
 8002d32:	fb01 f303 	mul.w	r3, r1, r3
 8002d36:	4413      	add	r3, r2
 8002d38:	3342      	adds	r3, #66	; 0x42
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002d3e:	e034      	b.n	8002daa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d40:	78fb      	ldrb	r3, [r7, #3]
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	212c      	movs	r1, #44	; 0x2c
 8002d46:	fb01 f303 	mul.w	r3, r1, r3
 8002d4a:	4413      	add	r3, r2
 8002d4c:	3342      	adds	r3, #66	; 0x42
 8002d4e:	2202      	movs	r2, #2
 8002d50:	701a      	strb	r2, [r3, #0]
      break;
 8002d52:	e02a      	b.n	8002daa <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002d54:	78fb      	ldrb	r3, [r7, #3]
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	212c      	movs	r1, #44	; 0x2c
 8002d5a:	fb01 f303 	mul.w	r3, r1, r3
 8002d5e:	4413      	add	r3, r2
 8002d60:	3354      	adds	r3, #84	; 0x54
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d109      	bne.n	8002d7c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d68:	78fb      	ldrb	r3, [r7, #3]
 8002d6a:	687a      	ldr	r2, [r7, #4]
 8002d6c:	212c      	movs	r1, #44	; 0x2c
 8002d6e:	fb01 f303 	mul.w	r3, r1, r3
 8002d72:	4413      	add	r3, r2
 8002d74:	3342      	adds	r3, #66	; 0x42
 8002d76:	2200      	movs	r2, #0
 8002d78:	701a      	strb	r2, [r3, #0]
      break;
 8002d7a:	e016      	b.n	8002daa <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002d7c:	78fb      	ldrb	r3, [r7, #3]
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	212c      	movs	r1, #44	; 0x2c
 8002d82:	fb01 f303 	mul.w	r3, r1, r3
 8002d86:	4413      	add	r3, r2
 8002d88:	3342      	adds	r3, #66	; 0x42
 8002d8a:	2202      	movs	r2, #2
 8002d8c:	701a      	strb	r2, [r3, #0]
      break;
 8002d8e:	e00c      	b.n	8002daa <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002d90:	78fb      	ldrb	r3, [r7, #3]
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	212c      	movs	r1, #44	; 0x2c
 8002d96:	fb01 f303 	mul.w	r3, r1, r3
 8002d9a:	4413      	add	r3, r2
 8002d9c:	3342      	adds	r3, #66	; 0x42
 8002d9e:	2200      	movs	r2, #0
 8002da0:	701a      	strb	r2, [r3, #0]
      break;
 8002da2:	e002      	b.n	8002daa <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002da4:	bf00      	nop
 8002da6:	e000      	b.n	8002daa <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8002da8:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002daa:	78fb      	ldrb	r3, [r7, #3]
 8002dac:	687a      	ldr	r2, [r7, #4]
 8002dae:	212c      	movs	r1, #44	; 0x2c
 8002db0:	fb01 f303 	mul.w	r3, r1, r3
 8002db4:	4413      	add	r3, r2
 8002db6:	3344      	adds	r3, #68	; 0x44
 8002db8:	697a      	ldr	r2, [r7, #20]
 8002dba:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002dbc:	78fb      	ldrb	r3, [r7, #3]
 8002dbe:	8b3a      	ldrh	r2, [r7, #24]
 8002dc0:	6879      	ldr	r1, [r7, #4]
 8002dc2:	202c      	movs	r0, #44	; 0x2c
 8002dc4:	fb00 f303 	mul.w	r3, r0, r3
 8002dc8:	440b      	add	r3, r1
 8002dca:	334c      	adds	r3, #76	; 0x4c
 8002dcc:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002dce:	78fb      	ldrb	r3, [r7, #3]
 8002dd0:	687a      	ldr	r2, [r7, #4]
 8002dd2:	212c      	movs	r1, #44	; 0x2c
 8002dd4:	fb01 f303 	mul.w	r3, r1, r3
 8002dd8:	4413      	add	r3, r2
 8002dda:	3360      	adds	r3, #96	; 0x60
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002de0:	78fb      	ldrb	r3, [r7, #3]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	212c      	movs	r1, #44	; 0x2c
 8002de6:	fb01 f303 	mul.w	r3, r1, r3
 8002dea:	4413      	add	r3, r2
 8002dec:	3350      	adds	r3, #80	; 0x50
 8002dee:	2200      	movs	r2, #0
 8002df0:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002df2:	78fb      	ldrb	r3, [r7, #3]
 8002df4:	687a      	ldr	r2, [r7, #4]
 8002df6:	212c      	movs	r1, #44	; 0x2c
 8002df8:	fb01 f303 	mul.w	r3, r1, r3
 8002dfc:	4413      	add	r3, r2
 8002dfe:	3339      	adds	r3, #57	; 0x39
 8002e00:	78fa      	ldrb	r2, [r7, #3]
 8002e02:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 8002e04:	78fb      	ldrb	r3, [r7, #3]
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	212c      	movs	r1, #44	; 0x2c
 8002e0a:	fb01 f303 	mul.w	r3, r1, r3
 8002e0e:	4413      	add	r3, r2
 8002e10:	3361      	adds	r3, #97	; 0x61
 8002e12:	2200      	movs	r2, #0
 8002e14:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	78fb      	ldrb	r3, [r7, #3]
 8002e1c:	222c      	movs	r2, #44	; 0x2c
 8002e1e:	fb02 f303 	mul.w	r3, r2, r3
 8002e22:	3338      	adds	r3, #56	; 0x38
 8002e24:	687a      	ldr	r2, [r7, #4]
 8002e26:	18d1      	adds	r1, r2, r3
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	691b      	ldr	r3, [r3, #16]
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	461a      	mov	r2, r3
 8002e30:	f003 fb48 	bl	80064c4 <USB_HC_StartXfer>
 8002e34:	4603      	mov	r3, r0
}
 8002e36:	4618      	mov	r0, r3
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop

08002e40 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	4618      	mov	r0, r3
 8002e58:	f003 f873 	bl	8005f42 <USB_GetMode>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b01      	cmp	r3, #1
 8002e60:	f040 80f6 	bne.w	8003050 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f003 f857 	bl	8005f1c <USB_ReadInterrupts>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	f000 80ec 	beq.w	800304e <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4618      	mov	r0, r3
 8002e7c:	f003 f84e 	bl	8005f1c <USB_ReadInterrupts>
 8002e80:	4603      	mov	r3, r0
 8002e82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002e8a:	d104      	bne.n	8002e96 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002e94:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f003 f83e 	bl	8005f1c <USB_ReadInterrupts>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eaa:	d104      	bne.n	8002eb6 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002eb4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f003 f82e 	bl	8005f1c <USB_ReadInterrupts>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002ec6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002eca:	d104      	bne.n	8002ed6 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ed4:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f003 f81e 	bl	8005f1c <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f003 0302 	and.w	r3, r3, #2
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d103      	bne.n	8002ef2 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2202      	movs	r2, #2
 8002ef0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	f003 f810 	bl	8005f1c <USB_ReadInterrupts>
 8002efc:	4603      	mov	r3, r0
 8002efe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002f02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002f06:	d11c      	bne.n	8002f42 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8002f10:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10f      	bne.n	8002f42 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002f22:	2110      	movs	r1, #16
 8002f24:	6938      	ldr	r0, [r7, #16]
 8002f26:	f002 feff 	bl	8005d28 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 8002f2a:	6938      	ldr	r0, [r7, #16]
 8002f2c:	f002 ff30 	bl	8005d90 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	2101      	movs	r1, #1
 8002f36:	4618      	mov	r0, r3
 8002f38:	f003 f906 	bl	8006148 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f004 ff0f 	bl	8007d60 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f002 ffe8 	bl	8005f1c <USB_ReadInterrupts>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002f52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f56:	d102      	bne.n	8002f5e <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f001 f882 	bl	8004062 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f002 ffda 	bl	8005f1c <USB_ReadInterrupts>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	f003 0308 	and.w	r3, r3, #8
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d106      	bne.n	8002f80 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f004 fed8 	bl	8007d28 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4618      	mov	r0, r3
 8002f86:	f002 ffc9 	bl	8005f1c <USB_ReadInterrupts>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	f003 0310 	and.w	r3, r3, #16
 8002f90:	2b10      	cmp	r3, #16
 8002f92:	d101      	bne.n	8002f98 <HAL_HCD_IRQHandler+0x158>
 8002f94:	2301      	movs	r3, #1
 8002f96:	e000      	b.n	8002f9a <HAL_HCD_IRQHandler+0x15a>
 8002f98:	2300      	movs	r3, #0
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d012      	beq.n	8002fc4 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	699a      	ldr	r2, [r3, #24]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f022 0210 	bic.w	r2, r2, #16
 8002fac:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002fae:	6878      	ldr	r0, [r7, #4]
 8002fb0:	f000 ff85 	bl	8003ebe <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	699a      	ldr	r2, [r3, #24]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f042 0210 	orr.w	r2, r2, #16
 8002fc2:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f002 ffa7 	bl	8005f1c <USB_ReadInterrupts>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002fd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002fd8:	d13a      	bne.n	8003050 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4618      	mov	r0, r3
 8002fe0:	f003 fbb2 	bl	8006748 <USB_HC_ReadInterrupt>
 8002fe4:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
 8002fea:	e025      	b.n	8003038 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	68ba      	ldr	r2, [r7, #8]
 8002ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d018      	beq.n	8003032 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003016:	d106      	bne.n	8003026 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8003018:	697b      	ldr	r3, [r7, #20]
 800301a:	b2db      	uxtb	r3, r3
 800301c:	4619      	mov	r1, r3
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f000 f88f 	bl	8003142 <HCD_HC_IN_IRQHandler>
 8003024:	e005      	b.n	8003032 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	b2db      	uxtb	r3, r3
 800302a:	4619      	mov	r1, r3
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 fbdd 	bl	80037ec <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	3301      	adds	r3, #1
 8003036:	617b      	str	r3, [r7, #20]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	689b      	ldr	r3, [r3, #8]
 800303c:	697a      	ldr	r2, [r7, #20]
 800303e:	429a      	cmp	r2, r3
 8003040:	d3d4      	bcc.n	8002fec <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800304a:	615a      	str	r2, [r3, #20]
 800304c:	e000      	b.n	8003050 <HAL_HCD_IRQHandler+0x210>
      return;
 800304e:	bf00      	nop
    }
  }
}
 8003050:	3718      	adds	r7, #24
 8003052:	46bd      	mov	sp, r7
 8003054:	bd80      	pop	{r7, pc}

08003056 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8003056:	b580      	push	{r7, lr}
 8003058:	b082      	sub	sp, #8
 800305a:	af00      	add	r7, sp, #0
 800305c:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003064:	2b01      	cmp	r3, #1
 8003066:	d101      	bne.n	800306c <HAL_HCD_Start+0x16>
 8003068:	2302      	movs	r3, #2
 800306a:	e013      	b.n	8003094 <HAL_HCD_Start+0x3e>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2201      	movs	r2, #1
 8003070:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	2101      	movs	r1, #1
 800307a:	4618      	mov	r0, r3
 800307c:	f003 f89e 	bl	80061bc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f002 fde0 	bl	8005c4a <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003092:	2300      	movs	r3, #0
}
 8003094:	4618      	mov	r0, r3
 8003096:	3708      	adds	r7, #8
 8003098:	46bd      	mov	sp, r7
 800309a:	bd80      	pop	{r7, pc}

0800309c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0
 80030a2:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80030aa:	2b01      	cmp	r3, #1
 80030ac:	d101      	bne.n	80030b2 <HAL_HCD_Stop+0x16>
 80030ae:	2302      	movs	r3, #2
 80030b0:	e00d      	b.n	80030ce <HAL_HCD_Stop+0x32>
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2201      	movs	r2, #1
 80030b6:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	4618      	mov	r0, r3
 80030c0:	f003 fc8c 	bl	80069dc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2200      	movs	r2, #0
 80030c8:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030d6:	b480      	push	{r7}
 80030d8:	b083      	sub	sp, #12
 80030da:	af00      	add	r7, sp, #0
 80030dc:	6078      	str	r0, [r7, #4]
 80030de:	460b      	mov	r3, r1
 80030e0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80030e2:	78fb      	ldrb	r3, [r7, #3]
 80030e4:	687a      	ldr	r2, [r7, #4]
 80030e6:	212c      	movs	r1, #44	; 0x2c
 80030e8:	fb01 f303 	mul.w	r3, r1, r3
 80030ec:	4413      	add	r3, r2
 80030ee:	3360      	adds	r3, #96	; 0x60
 80030f0:	781b      	ldrb	r3, [r3, #0]
}
 80030f2:	4618      	mov	r0, r3
 80030f4:	370c      	adds	r7, #12
 80030f6:	46bd      	mov	sp, r7
 80030f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fc:	4770      	bx	lr

080030fe <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80030fe:	b480      	push	{r7}
 8003100:	b083      	sub	sp, #12
 8003102:	af00      	add	r7, sp, #0
 8003104:	6078      	str	r0, [r7, #4]
 8003106:	460b      	mov	r3, r1
 8003108:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	212c      	movs	r1, #44	; 0x2c
 8003110:	fb01 f303 	mul.w	r3, r1, r3
 8003114:	4413      	add	r3, r2
 8003116:	3350      	adds	r3, #80	; 0x50
 8003118:	681b      	ldr	r3, [r3, #0]
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b082      	sub	sp, #8
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4618      	mov	r0, r3
 8003134:	f003 f892 	bl	800625c <USB_GetCurrentFrame>
 8003138:	4603      	mov	r3, r0
}
 800313a:	4618      	mov	r0, r3
 800313c:	3708      	adds	r7, #8
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}

08003142 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003142:	b580      	push	{r7, lr}
 8003144:	b086      	sub	sp, #24
 8003146:	af00      	add	r7, sp, #0
 8003148:	6078      	str	r0, [r7, #4]
 800314a:	460b      	mov	r3, r1
 800314c:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8003158:	78fb      	ldrb	r3, [r7, #3]
 800315a:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	015a      	lsls	r2, r3, #5
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	4413      	add	r3, r2
 8003164:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003168:	689b      	ldr	r3, [r3, #8]
 800316a:	f003 0304 	and.w	r3, r3, #4
 800316e:	2b04      	cmp	r3, #4
 8003170:	d11a      	bne.n	80031a8 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	015a      	lsls	r2, r3, #5
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4413      	add	r3, r2
 800317a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317e:	461a      	mov	r2, r3
 8003180:	2304      	movs	r3, #4
 8003182:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	212c      	movs	r1, #44	; 0x2c
 800318a:	fb01 f303 	mul.w	r3, r1, r3
 800318e:	4413      	add	r3, r2
 8003190:	3361      	adds	r3, #97	; 0x61
 8003192:	2206      	movs	r2, #6
 8003194:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	68fa      	ldr	r2, [r7, #12]
 800319c:	b2d2      	uxtb	r2, r2
 800319e:	4611      	mov	r1, r2
 80031a0:	4618      	mov	r0, r3
 80031a2:	f003 fae2 	bl	800676a <USB_HC_Halt>
 80031a6:	e0af      	b.n	8003308 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031b4:	689b      	ldr	r3, [r3, #8]
 80031b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031be:	d11b      	bne.n	80031f8 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	015a      	lsls	r2, r3, #5
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	4413      	add	r3, r2
 80031c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80031cc:	461a      	mov	r2, r3
 80031ce:	f44f 7380 	mov.w	r3, #256	; 0x100
 80031d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80031d4:	687a      	ldr	r2, [r7, #4]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	212c      	movs	r1, #44	; 0x2c
 80031da:	fb01 f303 	mul.w	r3, r1, r3
 80031de:	4413      	add	r3, r2
 80031e0:	3361      	adds	r3, #97	; 0x61
 80031e2:	2207      	movs	r2, #7
 80031e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	68fa      	ldr	r2, [r7, #12]
 80031ec:	b2d2      	uxtb	r2, r2
 80031ee:	4611      	mov	r1, r2
 80031f0:	4618      	mov	r0, r3
 80031f2:	f003 faba 	bl	800676a <USB_HC_Halt>
 80031f6:	e087      	b.n	8003308 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	015a      	lsls	r2, r3, #5
 80031fc:	693b      	ldr	r3, [r7, #16]
 80031fe:	4413      	add	r3, r2
 8003200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	f003 0320 	and.w	r3, r3, #32
 800320a:	2b20      	cmp	r3, #32
 800320c:	d109      	bne.n	8003222 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	015a      	lsls	r2, r3, #5
 8003212:	693b      	ldr	r3, [r7, #16]
 8003214:	4413      	add	r3, r2
 8003216:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800321a:	461a      	mov	r2, r3
 800321c:	2320      	movs	r3, #32
 800321e:	6093      	str	r3, [r2, #8]
 8003220:	e072      	b.n	8003308 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	693b      	ldr	r3, [r7, #16]
 8003228:	4413      	add	r3, r2
 800322a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800322e:	689b      	ldr	r3, [r3, #8]
 8003230:	f003 0308 	and.w	r3, r3, #8
 8003234:	2b08      	cmp	r3, #8
 8003236:	d11a      	bne.n	800326e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	015a      	lsls	r2, r3, #5
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	4413      	add	r3, r2
 8003240:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003244:	461a      	mov	r2, r3
 8003246:	2308      	movs	r3, #8
 8003248:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 800324a:	687a      	ldr	r2, [r7, #4]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	212c      	movs	r1, #44	; 0x2c
 8003250:	fb01 f303 	mul.w	r3, r1, r3
 8003254:	4413      	add	r3, r2
 8003256:	3361      	adds	r3, #97	; 0x61
 8003258:	2205      	movs	r2, #5
 800325a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	68fa      	ldr	r2, [r7, #12]
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	4611      	mov	r1, r2
 8003266:	4618      	mov	r0, r3
 8003268:	f003 fa7f 	bl	800676a <USB_HC_Halt>
 800326c:	e04c      	b.n	8003308 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	015a      	lsls	r2, r3, #5
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	4413      	add	r3, r2
 8003276:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003280:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003284:	d11b      	bne.n	80032be <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	015a      	lsls	r2, r3, #5
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	4413      	add	r3, r2
 800328e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003292:	461a      	mov	r2, r3
 8003294:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003298:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	212c      	movs	r1, #44	; 0x2c
 80032a0:	fb01 f303 	mul.w	r3, r1, r3
 80032a4:	4413      	add	r3, r2
 80032a6:	3361      	adds	r3, #97	; 0x61
 80032a8:	2208      	movs	r2, #8
 80032aa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	b2d2      	uxtb	r2, r2
 80032b4:	4611      	mov	r1, r2
 80032b6:	4618      	mov	r0, r3
 80032b8:	f003 fa57 	bl	800676a <USB_HC_Halt>
 80032bc:	e024      	b.n	8003308 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032d0:	2b80      	cmp	r3, #128	; 0x80
 80032d2:	d119      	bne.n	8003308 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	015a      	lsls	r2, r3, #5
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	4413      	add	r3, r2
 80032dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80032e0:	461a      	mov	r2, r3
 80032e2:	2380      	movs	r3, #128	; 0x80
 80032e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	3361      	adds	r3, #97	; 0x61
 80032f4:	2206      	movs	r2, #6
 80032f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	b2d2      	uxtb	r2, r2
 8003300:	4611      	mov	r1, r2
 8003302:	4618      	mov	r0, r3
 8003304:	f003 fa31 	bl	800676a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	015a      	lsls	r2, r3, #5
 800330c:	693b      	ldr	r3, [r7, #16]
 800330e:	4413      	add	r3, r2
 8003310:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003314:	689b      	ldr	r3, [r3, #8]
 8003316:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800331a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800331e:	d112      	bne.n	8003346 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	68fa      	ldr	r2, [r7, #12]
 8003326:	b2d2      	uxtb	r2, r2
 8003328:	4611      	mov	r1, r2
 800332a:	4618      	mov	r0, r3
 800332c:	f003 fa1d 	bl	800676a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	015a      	lsls	r2, r3, #5
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	4413      	add	r3, r2
 8003338:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333c:	461a      	mov	r2, r3
 800333e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003342:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003344:	e24e      	b.n	80037e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	015a      	lsls	r2, r3, #5
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	4413      	add	r3, r2
 800334e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003352:	689b      	ldr	r3, [r3, #8]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	f040 80df 	bne.w	800351c <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d019      	beq.n	800339a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003366:	687a      	ldr	r2, [r7, #4]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	212c      	movs	r1, #44	; 0x2c
 800336c:	fb01 f303 	mul.w	r3, r1, r3
 8003370:	4413      	add	r3, r2
 8003372:	3348      	adds	r3, #72	; 0x48
 8003374:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	0159      	lsls	r1, r3, #5
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	440b      	add	r3, r1
 800337e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003382:	691b      	ldr	r3, [r3, #16]
 8003384:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003388:	1ad2      	subs	r2, r2, r3
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	202c      	movs	r0, #44	; 0x2c
 8003390:	fb00 f303 	mul.w	r3, r0, r3
 8003394:	440b      	add	r3, r1
 8003396:	3350      	adds	r3, #80	; 0x50
 8003398:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 800339a:	687a      	ldr	r2, [r7, #4]
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	212c      	movs	r1, #44	; 0x2c
 80033a0:	fb01 f303 	mul.w	r3, r1, r3
 80033a4:	4413      	add	r3, r2
 80033a6:	3361      	adds	r3, #97	; 0x61
 80033a8:	2201      	movs	r2, #1
 80033aa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	212c      	movs	r1, #44	; 0x2c
 80033b2:	fb01 f303 	mul.w	r3, r1, r3
 80033b6:	4413      	add	r3, r2
 80033b8:	335c      	adds	r3, #92	; 0x5c
 80033ba:	2200      	movs	r2, #0
 80033bc:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	015a      	lsls	r2, r3, #5
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	4413      	add	r3, r2
 80033c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80033ca:	461a      	mov	r2, r3
 80033cc:	2301      	movs	r3, #1
 80033ce:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033d0:	687a      	ldr	r2, [r7, #4]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	212c      	movs	r1, #44	; 0x2c
 80033d6:	fb01 f303 	mul.w	r3, r1, r3
 80033da:	4413      	add	r3, r2
 80033dc:	333f      	adds	r3, #63	; 0x3f
 80033de:	781b      	ldrb	r3, [r3, #0]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d009      	beq.n	80033f8 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	212c      	movs	r1, #44	; 0x2c
 80033ea:	fb01 f303 	mul.w	r3, r1, r3
 80033ee:	4413      	add	r3, r2
 80033f0:	333f      	adds	r3, #63	; 0x3f
 80033f2:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d111      	bne.n	800341c <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68fa      	ldr	r2, [r7, #12]
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	4611      	mov	r1, r2
 8003402:	4618      	mov	r0, r3
 8003404:	f003 f9b1 	bl	800676a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	015a      	lsls	r2, r3, #5
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	4413      	add	r3, r2
 8003410:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003414:	461a      	mov	r2, r3
 8003416:	2310      	movs	r3, #16
 8003418:	6093      	str	r3, [r2, #8]
 800341a:	e03a      	b.n	8003492 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	212c      	movs	r1, #44	; 0x2c
 8003422:	fb01 f303 	mul.w	r3, r1, r3
 8003426:	4413      	add	r3, r2
 8003428:	333f      	adds	r3, #63	; 0x3f
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	2b03      	cmp	r3, #3
 800342e:	d009      	beq.n	8003444 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	212c      	movs	r1, #44	; 0x2c
 8003436:	fb01 f303 	mul.w	r3, r1, r3
 800343a:	4413      	add	r3, r2
 800343c:	333f      	adds	r3, #63	; 0x3f
 800343e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003440:	2b01      	cmp	r3, #1
 8003442:	d126      	bne.n	8003492 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4413      	add	r3, r2
 800344c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	0151      	lsls	r1, r2, #5
 8003456:	693a      	ldr	r2, [r7, #16]
 8003458:	440a      	add	r2, r1
 800345a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800345e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003462:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	212c      	movs	r1, #44	; 0x2c
 800346a:	fb01 f303 	mul.w	r3, r1, r3
 800346e:	4413      	add	r3, r2
 8003470:	3360      	adds	r3, #96	; 0x60
 8003472:	2201      	movs	r2, #1
 8003474:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	b2d9      	uxtb	r1, r3
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	202c      	movs	r0, #44	; 0x2c
 8003480:	fb00 f303 	mul.w	r3, r0, r3
 8003484:	4413      	add	r3, r2
 8003486:	3360      	adds	r3, #96	; 0x60
 8003488:	781b      	ldrb	r3, [r3, #0]
 800348a:	461a      	mov	r2, r3
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f004 fc75 	bl	8007d7c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	2b01      	cmp	r3, #1
 8003498:	d12b      	bne.n	80034f2 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	212c      	movs	r1, #44	; 0x2c
 80034a0:	fb01 f303 	mul.w	r3, r1, r3
 80034a4:	4413      	add	r3, r2
 80034a6:	3348      	adds	r3, #72	; 0x48
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	6879      	ldr	r1, [r7, #4]
 80034ac:	68fa      	ldr	r2, [r7, #12]
 80034ae:	202c      	movs	r0, #44	; 0x2c
 80034b0:	fb00 f202 	mul.w	r2, r0, r2
 80034b4:	440a      	add	r2, r1
 80034b6:	3240      	adds	r2, #64	; 0x40
 80034b8:	8812      	ldrh	r2, [r2, #0]
 80034ba:	fbb3 f3f2 	udiv	r3, r3, r2
 80034be:	f003 0301 	and.w	r3, r3, #1
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	f000 818e 	beq.w	80037e4 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	212c      	movs	r1, #44	; 0x2c
 80034ce:	fb01 f303 	mul.w	r3, r1, r3
 80034d2:	4413      	add	r3, r2
 80034d4:	3354      	adds	r3, #84	; 0x54
 80034d6:	781b      	ldrb	r3, [r3, #0]
 80034d8:	f083 0301 	eor.w	r3, r3, #1
 80034dc:	b2d8      	uxtb	r0, r3
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	212c      	movs	r1, #44	; 0x2c
 80034e4:	fb01 f303 	mul.w	r3, r1, r3
 80034e8:	4413      	add	r3, r2
 80034ea:	3354      	adds	r3, #84	; 0x54
 80034ec:	4602      	mov	r2, r0
 80034ee:	701a      	strb	r2, [r3, #0]
}
 80034f0:	e178      	b.n	80037e4 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	3354      	adds	r3, #84	; 0x54
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	f083 0301 	eor.w	r3, r3, #1
 8003506:	b2d8      	uxtb	r0, r3
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	3354      	adds	r3, #84	; 0x54
 8003516:	4602      	mov	r2, r0
 8003518:	701a      	strb	r2, [r3, #0]
}
 800351a:	e163      	b.n	80037e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	015a      	lsls	r2, r3, #5
 8003520:	693b      	ldr	r3, [r7, #16]
 8003522:	4413      	add	r3, r2
 8003524:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b02      	cmp	r3, #2
 8003530:	f040 80f6 	bne.w	8003720 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003534:	687a      	ldr	r2, [r7, #4]
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	212c      	movs	r1, #44	; 0x2c
 800353a:	fb01 f303 	mul.w	r3, r1, r3
 800353e:	4413      	add	r3, r2
 8003540:	3361      	adds	r3, #97	; 0x61
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d109      	bne.n	800355c <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	212c      	movs	r1, #44	; 0x2c
 800354e:	fb01 f303 	mul.w	r3, r1, r3
 8003552:	4413      	add	r3, r2
 8003554:	3360      	adds	r3, #96	; 0x60
 8003556:	2201      	movs	r2, #1
 8003558:	701a      	strb	r2, [r3, #0]
 800355a:	e0c9      	b.n	80036f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 800355c:	687a      	ldr	r2, [r7, #4]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	212c      	movs	r1, #44	; 0x2c
 8003562:	fb01 f303 	mul.w	r3, r1, r3
 8003566:	4413      	add	r3, r2
 8003568:	3361      	adds	r3, #97	; 0x61
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b05      	cmp	r3, #5
 800356e:	d109      	bne.n	8003584 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	212c      	movs	r1, #44	; 0x2c
 8003576:	fb01 f303 	mul.w	r3, r1, r3
 800357a:	4413      	add	r3, r2
 800357c:	3360      	adds	r3, #96	; 0x60
 800357e:	2205      	movs	r2, #5
 8003580:	701a      	strb	r2, [r3, #0]
 8003582:	e0b5      	b.n	80036f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003584:	687a      	ldr	r2, [r7, #4]
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	212c      	movs	r1, #44	; 0x2c
 800358a:	fb01 f303 	mul.w	r3, r1, r3
 800358e:	4413      	add	r3, r2
 8003590:	3361      	adds	r3, #97	; 0x61
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b06      	cmp	r3, #6
 8003596:	d009      	beq.n	80035ac <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003598:	687a      	ldr	r2, [r7, #4]
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	212c      	movs	r1, #44	; 0x2c
 800359e:	fb01 f303 	mul.w	r3, r1, r3
 80035a2:	4413      	add	r3, r2
 80035a4:	3361      	adds	r3, #97	; 0x61
 80035a6:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d150      	bne.n	800364e <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 80035ac:	687a      	ldr	r2, [r7, #4]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	212c      	movs	r1, #44	; 0x2c
 80035b2:	fb01 f303 	mul.w	r3, r1, r3
 80035b6:	4413      	add	r3, r2
 80035b8:	335c      	adds	r3, #92	; 0x5c
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	1c5a      	adds	r2, r3, #1
 80035be:	6879      	ldr	r1, [r7, #4]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	202c      	movs	r0, #44	; 0x2c
 80035c4:	fb00 f303 	mul.w	r3, r0, r3
 80035c8:	440b      	add	r3, r1
 80035ca:	335c      	adds	r3, #92	; 0x5c
 80035cc:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	212c      	movs	r1, #44	; 0x2c
 80035d4:	fb01 f303 	mul.w	r3, r1, r3
 80035d8:	4413      	add	r3, r2
 80035da:	335c      	adds	r3, #92	; 0x5c
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	2b02      	cmp	r3, #2
 80035e0:	d912      	bls.n	8003608 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80035e2:	687a      	ldr	r2, [r7, #4]
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	212c      	movs	r1, #44	; 0x2c
 80035e8:	fb01 f303 	mul.w	r3, r1, r3
 80035ec:	4413      	add	r3, r2
 80035ee:	335c      	adds	r3, #92	; 0x5c
 80035f0:	2200      	movs	r2, #0
 80035f2:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	212c      	movs	r1, #44	; 0x2c
 80035fa:	fb01 f303 	mul.w	r3, r1, r3
 80035fe:	4413      	add	r3, r2
 8003600:	3360      	adds	r3, #96	; 0x60
 8003602:	2204      	movs	r2, #4
 8003604:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003606:	e073      	b.n	80036f0 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	212c      	movs	r1, #44	; 0x2c
 800360e:	fb01 f303 	mul.w	r3, r1, r3
 8003612:	4413      	add	r3, r2
 8003614:	3360      	adds	r3, #96	; 0x60
 8003616:	2202      	movs	r2, #2
 8003618:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	015a      	lsls	r2, r3, #5
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	4413      	add	r3, r2
 8003622:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003630:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003638:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	015a      	lsls	r2, r3, #5
 800363e:	693b      	ldr	r3, [r7, #16]
 8003640:	4413      	add	r3, r2
 8003642:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003646:	461a      	mov	r2, r3
 8003648:	68bb      	ldr	r3, [r7, #8]
 800364a:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800364c:	e050      	b.n	80036f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 800364e:	687a      	ldr	r2, [r7, #4]
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	212c      	movs	r1, #44	; 0x2c
 8003654:	fb01 f303 	mul.w	r3, r1, r3
 8003658:	4413      	add	r3, r2
 800365a:	3361      	adds	r3, #97	; 0x61
 800365c:	781b      	ldrb	r3, [r3, #0]
 800365e:	2b03      	cmp	r3, #3
 8003660:	d122      	bne.n	80036a8 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	212c      	movs	r1, #44	; 0x2c
 8003668:	fb01 f303 	mul.w	r3, r1, r3
 800366c:	4413      	add	r3, r2
 800366e:	3360      	adds	r3, #96	; 0x60
 8003670:	2202      	movs	r2, #2
 8003672:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	015a      	lsls	r2, r3, #5
 8003678:	693b      	ldr	r3, [r7, #16]
 800367a:	4413      	add	r3, r2
 800367c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800368a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 800368c:	68bb      	ldr	r3, [r7, #8]
 800368e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003692:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	4413      	add	r3, r2
 800369c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036a0:	461a      	mov	r2, r3
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	6013      	str	r3, [r2, #0]
 80036a6:	e023      	b.n	80036f0 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	212c      	movs	r1, #44	; 0x2c
 80036ae:	fb01 f303 	mul.w	r3, r1, r3
 80036b2:	4413      	add	r3, r2
 80036b4:	3361      	adds	r3, #97	; 0x61
 80036b6:	781b      	ldrb	r3, [r3, #0]
 80036b8:	2b07      	cmp	r3, #7
 80036ba:	d119      	bne.n	80036f0 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 80036bc:	687a      	ldr	r2, [r7, #4]
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	212c      	movs	r1, #44	; 0x2c
 80036c2:	fb01 f303 	mul.w	r3, r1, r3
 80036c6:	4413      	add	r3, r2
 80036c8:	335c      	adds	r3, #92	; 0x5c
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	1c5a      	adds	r2, r3, #1
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	202c      	movs	r0, #44	; 0x2c
 80036d4:	fb00 f303 	mul.w	r3, r0, r3
 80036d8:	440b      	add	r3, r1
 80036da:	335c      	adds	r3, #92	; 0x5c
 80036dc:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 80036de:	687a      	ldr	r2, [r7, #4]
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	212c      	movs	r1, #44	; 0x2c
 80036e4:	fb01 f303 	mul.w	r3, r1, r3
 80036e8:	4413      	add	r3, r2
 80036ea:	3360      	adds	r3, #96	; 0x60
 80036ec:	2204      	movs	r2, #4
 80036ee:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	015a      	lsls	r2, r3, #5
 80036f4:	693b      	ldr	r3, [r7, #16]
 80036f6:	4413      	add	r3, r2
 80036f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80036fc:	461a      	mov	r2, r3
 80036fe:	2302      	movs	r3, #2
 8003700:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	b2d9      	uxtb	r1, r3
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	202c      	movs	r0, #44	; 0x2c
 800370c:	fb00 f303 	mul.w	r3, r0, r3
 8003710:	4413      	add	r3, r2
 8003712:	3360      	adds	r3, #96	; 0x60
 8003714:	781b      	ldrb	r3, [r3, #0]
 8003716:	461a      	mov	r2, r3
 8003718:	6878      	ldr	r0, [r7, #4]
 800371a:	f004 fb2f 	bl	8007d7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800371e:	e061      	b.n	80037e4 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	015a      	lsls	r2, r3, #5
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	4413      	add	r3, r2
 8003728:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f003 0310 	and.w	r3, r3, #16
 8003732:	2b10      	cmp	r3, #16
 8003734:	d156      	bne.n	80037e4 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003736:	687a      	ldr	r2, [r7, #4]
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	212c      	movs	r1, #44	; 0x2c
 800373c:	fb01 f303 	mul.w	r3, r1, r3
 8003740:	4413      	add	r3, r2
 8003742:	333f      	adds	r3, #63	; 0x3f
 8003744:	781b      	ldrb	r3, [r3, #0]
 8003746:	2b03      	cmp	r3, #3
 8003748:	d111      	bne.n	800376e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	212c      	movs	r1, #44	; 0x2c
 8003750:	fb01 f303 	mul.w	r3, r1, r3
 8003754:	4413      	add	r3, r2
 8003756:	335c      	adds	r3, #92	; 0x5c
 8003758:	2200      	movs	r2, #0
 800375a:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	b2d2      	uxtb	r2, r2
 8003764:	4611      	mov	r1, r2
 8003766:	4618      	mov	r0, r3
 8003768:	f002 ffff 	bl	800676a <USB_HC_Halt>
 800376c:	e031      	b.n	80037d2 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 800376e:	687a      	ldr	r2, [r7, #4]
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	212c      	movs	r1, #44	; 0x2c
 8003774:	fb01 f303 	mul.w	r3, r1, r3
 8003778:	4413      	add	r3, r2
 800377a:	333f      	adds	r3, #63	; 0x3f
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003782:	687a      	ldr	r2, [r7, #4]
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	212c      	movs	r1, #44	; 0x2c
 8003788:	fb01 f303 	mul.w	r3, r1, r3
 800378c:	4413      	add	r3, r2
 800378e:	333f      	adds	r3, #63	; 0x3f
 8003790:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003792:	2b02      	cmp	r3, #2
 8003794:	d11d      	bne.n	80037d2 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	212c      	movs	r1, #44	; 0x2c
 800379c:	fb01 f303 	mul.w	r3, r1, r3
 80037a0:	4413      	add	r3, r2
 80037a2:	335c      	adds	r3, #92	; 0x5c
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	691b      	ldr	r3, [r3, #16]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d110      	bne.n	80037d2 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	212c      	movs	r1, #44	; 0x2c
 80037b6:	fb01 f303 	mul.w	r3, r1, r3
 80037ba:	4413      	add	r3, r2
 80037bc:	3361      	adds	r3, #97	; 0x61
 80037be:	2203      	movs	r2, #3
 80037c0:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	b2d2      	uxtb	r2, r2
 80037ca:	4611      	mov	r1, r2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f002 ffcc 	bl	800676a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037de:	461a      	mov	r2, r3
 80037e0:	2310      	movs	r3, #16
 80037e2:	6093      	str	r3, [r2, #8]
}
 80037e4:	bf00      	nop
 80037e6:	3718      	adds	r7, #24
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b088      	sub	sp, #32
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
 80037f4:	460b      	mov	r3, r1
 80037f6:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037fe:	69fb      	ldr	r3, [r7, #28]
 8003800:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003802:	78fb      	ldrb	r3, [r7, #3]
 8003804:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003806:	697b      	ldr	r3, [r7, #20]
 8003808:	015a      	lsls	r2, r3, #5
 800380a:	69bb      	ldr	r3, [r7, #24]
 800380c:	4413      	add	r3, r2
 800380e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	f003 0304 	and.w	r3, r3, #4
 8003818:	2b04      	cmp	r3, #4
 800381a:	d11a      	bne.n	8003852 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	4413      	add	r3, r2
 8003824:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003828:	461a      	mov	r2, r3
 800382a:	2304      	movs	r3, #4
 800382c:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	697b      	ldr	r3, [r7, #20]
 8003832:	212c      	movs	r1, #44	; 0x2c
 8003834:	fb01 f303 	mul.w	r3, r1, r3
 8003838:	4413      	add	r3, r2
 800383a:	3361      	adds	r3, #97	; 0x61
 800383c:	2206      	movs	r2, #6
 800383e:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	697a      	ldr	r2, [r7, #20]
 8003846:	b2d2      	uxtb	r2, r2
 8003848:	4611      	mov	r1, r2
 800384a:	4618      	mov	r0, r3
 800384c:	f002 ff8d 	bl	800676a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003850:	e331      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	015a      	lsls	r2, r3, #5
 8003856:	69bb      	ldr	r3, [r7, #24]
 8003858:	4413      	add	r3, r2
 800385a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f003 0320 	and.w	r3, r3, #32
 8003864:	2b20      	cmp	r3, #32
 8003866:	d12e      	bne.n	80038c6 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	015a      	lsls	r2, r3, #5
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	4413      	add	r3, r2
 8003870:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003874:	461a      	mov	r2, r3
 8003876:	2320      	movs	r3, #32
 8003878:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	212c      	movs	r1, #44	; 0x2c
 8003880:	fb01 f303 	mul.w	r3, r1, r3
 8003884:	4413      	add	r3, r2
 8003886:	333d      	adds	r3, #61	; 0x3d
 8003888:	781b      	ldrb	r3, [r3, #0]
 800388a:	2b01      	cmp	r3, #1
 800388c:	f040 8313 	bne.w	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8003890:	687a      	ldr	r2, [r7, #4]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	212c      	movs	r1, #44	; 0x2c
 8003896:	fb01 f303 	mul.w	r3, r1, r3
 800389a:	4413      	add	r3, r2
 800389c:	333d      	adds	r3, #61	; 0x3d
 800389e:	2200      	movs	r2, #0
 80038a0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80038a2:	687a      	ldr	r2, [r7, #4]
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	212c      	movs	r1, #44	; 0x2c
 80038a8:	fb01 f303 	mul.w	r3, r1, r3
 80038ac:	4413      	add	r3, r2
 80038ae:	3360      	adds	r3, #96	; 0x60
 80038b0:	2202      	movs	r2, #2
 80038b2:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	b2d2      	uxtb	r2, r2
 80038bc:	4611      	mov	r1, r2
 80038be:	4618      	mov	r0, r3
 80038c0:	f002 ff53 	bl	800676a <USB_HC_Halt>
}
 80038c4:	e2f7      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80038dc:	d112      	bne.n	8003904 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80038de:	697b      	ldr	r3, [r7, #20]
 80038e0:	015a      	lsls	r2, r3, #5
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	4413      	add	r3, r2
 80038e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80038ea:	461a      	mov	r2, r3
 80038ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038f0:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	697a      	ldr	r2, [r7, #20]
 80038f8:	b2d2      	uxtb	r2, r2
 80038fa:	4611      	mov	r1, r2
 80038fc:	4618      	mov	r0, r3
 80038fe:	f002 ff34 	bl	800676a <USB_HC_Halt>
}
 8003902:	e2d8      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003904:	697b      	ldr	r3, [r7, #20]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	69bb      	ldr	r3, [r7, #24]
 800390a:	4413      	add	r3, r2
 800390c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003910:	689b      	ldr	r3, [r3, #8]
 8003912:	f003 0301 	and.w	r3, r3, #1
 8003916:	2b01      	cmp	r3, #1
 8003918:	d140      	bne.n	800399c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	697b      	ldr	r3, [r7, #20]
 800391e:	212c      	movs	r1, #44	; 0x2c
 8003920:	fb01 f303 	mul.w	r3, r1, r3
 8003924:	4413      	add	r3, r2
 8003926:	335c      	adds	r3, #92	; 0x5c
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800392c:	697b      	ldr	r3, [r7, #20]
 800392e:	015a      	lsls	r2, r3, #5
 8003930:	69bb      	ldr	r3, [r7, #24]
 8003932:	4413      	add	r3, r2
 8003934:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800393e:	2b40      	cmp	r3, #64	; 0x40
 8003940:	d111      	bne.n	8003966 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8003942:	687a      	ldr	r2, [r7, #4]
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	212c      	movs	r1, #44	; 0x2c
 8003948:	fb01 f303 	mul.w	r3, r1, r3
 800394c:	4413      	add	r3, r2
 800394e:	333d      	adds	r3, #61	; 0x3d
 8003950:	2201      	movs	r2, #1
 8003952:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4413      	add	r3, r2
 800395c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003960:	461a      	mov	r2, r3
 8003962:	2340      	movs	r3, #64	; 0x40
 8003964:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	015a      	lsls	r2, r3, #5
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	4413      	add	r3, r2
 800396e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003972:	461a      	mov	r2, r3
 8003974:	2301      	movs	r3, #1
 8003976:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003978:	687a      	ldr	r2, [r7, #4]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	212c      	movs	r1, #44	; 0x2c
 800397e:	fb01 f303 	mul.w	r3, r1, r3
 8003982:	4413      	add	r3, r2
 8003984:	3361      	adds	r3, #97	; 0x61
 8003986:	2201      	movs	r2, #1
 8003988:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	697a      	ldr	r2, [r7, #20]
 8003990:	b2d2      	uxtb	r2, r2
 8003992:	4611      	mov	r1, r2
 8003994:	4618      	mov	r0, r3
 8003996:	f002 fee8 	bl	800676a <USB_HC_Halt>
}
 800399a:	e28c      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	015a      	lsls	r2, r3, #5
 80039a0:	69bb      	ldr	r3, [r7, #24]
 80039a2:	4413      	add	r3, r2
 80039a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039ae:	2b40      	cmp	r3, #64	; 0x40
 80039b0:	d12c      	bne.n	8003a0c <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	212c      	movs	r1, #44	; 0x2c
 80039b8:	fb01 f303 	mul.w	r3, r1, r3
 80039bc:	4413      	add	r3, r2
 80039be:	3361      	adds	r3, #97	; 0x61
 80039c0:	2204      	movs	r2, #4
 80039c2:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 80039c4:	687a      	ldr	r2, [r7, #4]
 80039c6:	697b      	ldr	r3, [r7, #20]
 80039c8:	212c      	movs	r1, #44	; 0x2c
 80039ca:	fb01 f303 	mul.w	r3, r1, r3
 80039ce:	4413      	add	r3, r2
 80039d0:	333d      	adds	r3, #61	; 0x3d
 80039d2:	2201      	movs	r2, #1
 80039d4:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	212c      	movs	r1, #44	; 0x2c
 80039dc:	fb01 f303 	mul.w	r3, r1, r3
 80039e0:	4413      	add	r3, r2
 80039e2:	335c      	adds	r3, #92	; 0x5c
 80039e4:	2200      	movs	r2, #0
 80039e6:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	697a      	ldr	r2, [r7, #20]
 80039ee:	b2d2      	uxtb	r2, r2
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f002 feb9 	bl	800676a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	015a      	lsls	r2, r3, #5
 80039fc:	69bb      	ldr	r3, [r7, #24]
 80039fe:	4413      	add	r3, r2
 8003a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a04:	461a      	mov	r2, r3
 8003a06:	2340      	movs	r3, #64	; 0x40
 8003a08:	6093      	str	r3, [r2, #8]
}
 8003a0a:	e254      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	015a      	lsls	r2, r3, #5
 8003a10:	69bb      	ldr	r3, [r7, #24]
 8003a12:	4413      	add	r3, r2
 8003a14:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	f003 0308 	and.w	r3, r3, #8
 8003a1e:	2b08      	cmp	r3, #8
 8003a20:	d11a      	bne.n	8003a58 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	015a      	lsls	r2, r3, #5
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	4413      	add	r3, r2
 8003a2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a2e:	461a      	mov	r2, r3
 8003a30:	2308      	movs	r3, #8
 8003a32:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8003a34:	687a      	ldr	r2, [r7, #4]
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	212c      	movs	r1, #44	; 0x2c
 8003a3a:	fb01 f303 	mul.w	r3, r1, r3
 8003a3e:	4413      	add	r3, r2
 8003a40:	3361      	adds	r3, #97	; 0x61
 8003a42:	2205      	movs	r2, #5
 8003a44:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	b2d2      	uxtb	r2, r2
 8003a4e:	4611      	mov	r1, r2
 8003a50:	4618      	mov	r0, r3
 8003a52:	f002 fe8a 	bl	800676a <USB_HC_Halt>
}
 8003a56:	e22e      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	015a      	lsls	r2, r3, #5
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	4413      	add	r3, r2
 8003a60:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f003 0310 	and.w	r3, r3, #16
 8003a6a:	2b10      	cmp	r3, #16
 8003a6c:	d140      	bne.n	8003af0 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	697b      	ldr	r3, [r7, #20]
 8003a72:	212c      	movs	r1, #44	; 0x2c
 8003a74:	fb01 f303 	mul.w	r3, r1, r3
 8003a78:	4413      	add	r3, r2
 8003a7a:	335c      	adds	r3, #92	; 0x5c
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	212c      	movs	r1, #44	; 0x2c
 8003a86:	fb01 f303 	mul.w	r3, r1, r3
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3361      	adds	r3, #97	; 0x61
 8003a8e:	2203      	movs	r2, #3
 8003a90:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	697b      	ldr	r3, [r7, #20]
 8003a96:	212c      	movs	r1, #44	; 0x2c
 8003a98:	fb01 f303 	mul.w	r3, r1, r3
 8003a9c:	4413      	add	r3, r2
 8003a9e:	333d      	adds	r3, #61	; 0x3d
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d112      	bne.n	8003acc <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	697b      	ldr	r3, [r7, #20]
 8003aaa:	212c      	movs	r1, #44	; 0x2c
 8003aac:	fb01 f303 	mul.w	r3, r1, r3
 8003ab0:	4413      	add	r3, r2
 8003ab2:	333c      	adds	r3, #60	; 0x3c
 8003ab4:	781b      	ldrb	r3, [r3, #0]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d108      	bne.n	8003acc <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	212c      	movs	r1, #44	; 0x2c
 8003ac0:	fb01 f303 	mul.w	r3, r1, r3
 8003ac4:	4413      	add	r3, r2
 8003ac6:	333d      	adds	r3, #61	; 0x3d
 8003ac8:	2201      	movs	r2, #1
 8003aca:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	697a      	ldr	r2, [r7, #20]
 8003ad2:	b2d2      	uxtb	r2, r2
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f002 fe47 	bl	800676a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003adc:	697b      	ldr	r3, [r7, #20]
 8003ade:	015a      	lsls	r2, r3, #5
 8003ae0:	69bb      	ldr	r3, [r7, #24]
 8003ae2:	4413      	add	r3, r2
 8003ae4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ae8:	461a      	mov	r2, r3
 8003aea:	2310      	movs	r3, #16
 8003aec:	6093      	str	r3, [r2, #8]
}
 8003aee:	e1e2      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	015a      	lsls	r2, r3, #5
 8003af4:	69bb      	ldr	r3, [r7, #24]
 8003af6:	4413      	add	r3, r2
 8003af8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b02:	2b80      	cmp	r3, #128	; 0x80
 8003b04:	d164      	bne.n	8003bd0 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	691b      	ldr	r3, [r3, #16]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d111      	bne.n	8003b32 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	212c      	movs	r1, #44	; 0x2c
 8003b14:	fb01 f303 	mul.w	r3, r1, r3
 8003b18:	4413      	add	r3, r2
 8003b1a:	3361      	adds	r3, #97	; 0x61
 8003b1c:	2206      	movs	r2, #6
 8003b1e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	b2d2      	uxtb	r2, r2
 8003b28:	4611      	mov	r1, r2
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f002 fe1d 	bl	800676a <USB_HC_Halt>
 8003b30:	e044      	b.n	8003bbc <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	212c      	movs	r1, #44	; 0x2c
 8003b38:	fb01 f303 	mul.w	r3, r1, r3
 8003b3c:	4413      	add	r3, r2
 8003b3e:	335c      	adds	r3, #92	; 0x5c
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	1c5a      	adds	r2, r3, #1
 8003b44:	6879      	ldr	r1, [r7, #4]
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	202c      	movs	r0, #44	; 0x2c
 8003b4a:	fb00 f303 	mul.w	r3, r0, r3
 8003b4e:	440b      	add	r3, r1
 8003b50:	335c      	adds	r3, #92	; 0x5c
 8003b52:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003b54:	687a      	ldr	r2, [r7, #4]
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	212c      	movs	r1, #44	; 0x2c
 8003b5a:	fb01 f303 	mul.w	r3, r1, r3
 8003b5e:	4413      	add	r3, r2
 8003b60:	335c      	adds	r3, #92	; 0x5c
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d920      	bls.n	8003baa <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	697b      	ldr	r3, [r7, #20]
 8003b6c:	212c      	movs	r1, #44	; 0x2c
 8003b6e:	fb01 f303 	mul.w	r3, r1, r3
 8003b72:	4413      	add	r3, r2
 8003b74:	335c      	adds	r3, #92	; 0x5c
 8003b76:	2200      	movs	r2, #0
 8003b78:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003b7a:	687a      	ldr	r2, [r7, #4]
 8003b7c:	697b      	ldr	r3, [r7, #20]
 8003b7e:	212c      	movs	r1, #44	; 0x2c
 8003b80:	fb01 f303 	mul.w	r3, r1, r3
 8003b84:	4413      	add	r3, r2
 8003b86:	3360      	adds	r3, #96	; 0x60
 8003b88:	2204      	movs	r2, #4
 8003b8a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	b2d9      	uxtb	r1, r3
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	697b      	ldr	r3, [r7, #20]
 8003b94:	202c      	movs	r0, #44	; 0x2c
 8003b96:	fb00 f303 	mul.w	r3, r0, r3
 8003b9a:	4413      	add	r3, r2
 8003b9c:	3360      	adds	r3, #96	; 0x60
 8003b9e:	781b      	ldrb	r3, [r3, #0]
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f004 f8ea 	bl	8007d7c <HAL_HCD_HC_NotifyURBChange_Callback>
 8003ba8:	e008      	b.n	8003bbc <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003baa:	687a      	ldr	r2, [r7, #4]
 8003bac:	697b      	ldr	r3, [r7, #20]
 8003bae:	212c      	movs	r1, #44	; 0x2c
 8003bb0:	fb01 f303 	mul.w	r3, r1, r3
 8003bb4:	4413      	add	r3, r2
 8003bb6:	3360      	adds	r3, #96	; 0x60
 8003bb8:	2202      	movs	r2, #2
 8003bba:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	015a      	lsls	r2, r3, #5
 8003bc0:	69bb      	ldr	r3, [r7, #24]
 8003bc2:	4413      	add	r3, r2
 8003bc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bc8:	461a      	mov	r2, r3
 8003bca:	2380      	movs	r3, #128	; 0x80
 8003bcc:	6093      	str	r3, [r2, #8]
}
 8003bce:	e172      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	015a      	lsls	r2, r3, #5
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	4413      	add	r3, r2
 8003bd8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bdc:	689b      	ldr	r3, [r3, #8]
 8003bde:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003be2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003be6:	d11b      	bne.n	8003c20 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003be8:	687a      	ldr	r2, [r7, #4]
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	212c      	movs	r1, #44	; 0x2c
 8003bee:	fb01 f303 	mul.w	r3, r1, r3
 8003bf2:	4413      	add	r3, r2
 8003bf4:	3361      	adds	r3, #97	; 0x61
 8003bf6:	2208      	movs	r2, #8
 8003bf8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	4611      	mov	r1, r2
 8003c04:	4618      	mov	r0, r3
 8003c06:	f002 fdb0 	bl	800676a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	015a      	lsls	r2, r3, #5
 8003c0e:	69bb      	ldr	r3, [r7, #24]
 8003c10:	4413      	add	r3, r2
 8003c12:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c16:	461a      	mov	r2, r3
 8003c18:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003c1c:	6093      	str	r3, [r2, #8]
}
 8003c1e:	e14a      	b.n	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	015a      	lsls	r2, r3, #5
 8003c24:	69bb      	ldr	r3, [r7, #24]
 8003c26:	4413      	add	r3, r2
 8003c28:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003c2c:	689b      	ldr	r3, [r3, #8]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b02      	cmp	r3, #2
 8003c34:	f040 813f 	bne.w	8003eb6 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003c38:	687a      	ldr	r2, [r7, #4]
 8003c3a:	697b      	ldr	r3, [r7, #20]
 8003c3c:	212c      	movs	r1, #44	; 0x2c
 8003c3e:	fb01 f303 	mul.w	r3, r1, r3
 8003c42:	4413      	add	r3, r2
 8003c44:	3361      	adds	r3, #97	; 0x61
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d17d      	bne.n	8003d48 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003c4c:	687a      	ldr	r2, [r7, #4]
 8003c4e:	697b      	ldr	r3, [r7, #20]
 8003c50:	212c      	movs	r1, #44	; 0x2c
 8003c52:	fb01 f303 	mul.w	r3, r1, r3
 8003c56:	4413      	add	r3, r2
 8003c58:	3360      	adds	r3, #96	; 0x60
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c5e:	687a      	ldr	r2, [r7, #4]
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	212c      	movs	r1, #44	; 0x2c
 8003c64:	fb01 f303 	mul.w	r3, r1, r3
 8003c68:	4413      	add	r3, r2
 8003c6a:	333f      	adds	r3, #63	; 0x3f
 8003c6c:	781b      	ldrb	r3, [r3, #0]
 8003c6e:	2b02      	cmp	r3, #2
 8003c70:	d00a      	beq.n	8003c88 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8003c72:	687a      	ldr	r2, [r7, #4]
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	212c      	movs	r1, #44	; 0x2c
 8003c78:	fb01 f303 	mul.w	r3, r1, r3
 8003c7c:	4413      	add	r3, r2
 8003c7e:	333f      	adds	r3, #63	; 0x3f
 8003c80:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8003c82:	2b03      	cmp	r3, #3
 8003c84:	f040 8100 	bne.w	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d113      	bne.n	8003cb8 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8003c90:	687a      	ldr	r2, [r7, #4]
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	212c      	movs	r1, #44	; 0x2c
 8003c96:	fb01 f303 	mul.w	r3, r1, r3
 8003c9a:	4413      	add	r3, r2
 8003c9c:	3355      	adds	r3, #85	; 0x55
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	f083 0301 	eor.w	r3, r3, #1
 8003ca4:	b2d8      	uxtb	r0, r3
 8003ca6:	687a      	ldr	r2, [r7, #4]
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	212c      	movs	r1, #44	; 0x2c
 8003cac:	fb01 f303 	mul.w	r3, r1, r3
 8003cb0:	4413      	add	r3, r2
 8003cb2:	3355      	adds	r3, #85	; 0x55
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	691b      	ldr	r3, [r3, #16]
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	f040 80e3 	bne.w	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
 8003cc2:	687a      	ldr	r2, [r7, #4]
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	212c      	movs	r1, #44	; 0x2c
 8003cc8:	fb01 f303 	mul.w	r3, r1, r3
 8003ccc:	4413      	add	r3, r2
 8003cce:	334c      	adds	r3, #76	; 0x4c
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2b00      	cmp	r3, #0
 8003cd4:	f000 80d8 	beq.w	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8003cd8:	687a      	ldr	r2, [r7, #4]
 8003cda:	697b      	ldr	r3, [r7, #20]
 8003cdc:	212c      	movs	r1, #44	; 0x2c
 8003cde:	fb01 f303 	mul.w	r3, r1, r3
 8003ce2:	4413      	add	r3, r2
 8003ce4:	334c      	adds	r3, #76	; 0x4c
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	697a      	ldr	r2, [r7, #20]
 8003cec:	202c      	movs	r0, #44	; 0x2c
 8003cee:	fb00 f202 	mul.w	r2, r0, r2
 8003cf2:	440a      	add	r2, r1
 8003cf4:	3240      	adds	r2, #64	; 0x40
 8003cf6:	8812      	ldrh	r2, [r2, #0]
 8003cf8:	4413      	add	r3, r2
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	6879      	ldr	r1, [r7, #4]
 8003cfe:	697a      	ldr	r2, [r7, #20]
 8003d00:	202c      	movs	r0, #44	; 0x2c
 8003d02:	fb00 f202 	mul.w	r2, r0, r2
 8003d06:	440a      	add	r2, r1
 8003d08:	3240      	adds	r2, #64	; 0x40
 8003d0a:	8812      	ldrh	r2, [r2, #0]
 8003d0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003d10:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	f003 0301 	and.w	r3, r3, #1
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 80b5 	beq.w	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8003d1e:	687a      	ldr	r2, [r7, #4]
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	212c      	movs	r1, #44	; 0x2c
 8003d24:	fb01 f303 	mul.w	r3, r1, r3
 8003d28:	4413      	add	r3, r2
 8003d2a:	3355      	adds	r3, #85	; 0x55
 8003d2c:	781b      	ldrb	r3, [r3, #0]
 8003d2e:	f083 0301 	eor.w	r3, r3, #1
 8003d32:	b2d8      	uxtb	r0, r3
 8003d34:	687a      	ldr	r2, [r7, #4]
 8003d36:	697b      	ldr	r3, [r7, #20]
 8003d38:	212c      	movs	r1, #44	; 0x2c
 8003d3a:	fb01 f303 	mul.w	r3, r1, r3
 8003d3e:	4413      	add	r3, r2
 8003d40:	3355      	adds	r3, #85	; 0x55
 8003d42:	4602      	mov	r2, r0
 8003d44:	701a      	strb	r2, [r3, #0]
 8003d46:	e09f      	b.n	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003d48:	687a      	ldr	r2, [r7, #4]
 8003d4a:	697b      	ldr	r3, [r7, #20]
 8003d4c:	212c      	movs	r1, #44	; 0x2c
 8003d4e:	fb01 f303 	mul.w	r3, r1, r3
 8003d52:	4413      	add	r3, r2
 8003d54:	3361      	adds	r3, #97	; 0x61
 8003d56:	781b      	ldrb	r3, [r3, #0]
 8003d58:	2b03      	cmp	r3, #3
 8003d5a:	d109      	bne.n	8003d70 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003d5c:	687a      	ldr	r2, [r7, #4]
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	212c      	movs	r1, #44	; 0x2c
 8003d62:	fb01 f303 	mul.w	r3, r1, r3
 8003d66:	4413      	add	r3, r2
 8003d68:	3360      	adds	r3, #96	; 0x60
 8003d6a:	2202      	movs	r2, #2
 8003d6c:	701a      	strb	r2, [r3, #0]
 8003d6e:	e08b      	b.n	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	697b      	ldr	r3, [r7, #20]
 8003d74:	212c      	movs	r1, #44	; 0x2c
 8003d76:	fb01 f303 	mul.w	r3, r1, r3
 8003d7a:	4413      	add	r3, r2
 8003d7c:	3361      	adds	r3, #97	; 0x61
 8003d7e:	781b      	ldrb	r3, [r3, #0]
 8003d80:	2b04      	cmp	r3, #4
 8003d82:	d109      	bne.n	8003d98 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003d84:	687a      	ldr	r2, [r7, #4]
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	212c      	movs	r1, #44	; 0x2c
 8003d8a:	fb01 f303 	mul.w	r3, r1, r3
 8003d8e:	4413      	add	r3, r2
 8003d90:	3360      	adds	r3, #96	; 0x60
 8003d92:	2202      	movs	r2, #2
 8003d94:	701a      	strb	r2, [r3, #0]
 8003d96:	e077      	b.n	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	212c      	movs	r1, #44	; 0x2c
 8003d9e:	fb01 f303 	mul.w	r3, r1, r3
 8003da2:	4413      	add	r3, r2
 8003da4:	3361      	adds	r3, #97	; 0x61
 8003da6:	781b      	ldrb	r3, [r3, #0]
 8003da8:	2b05      	cmp	r3, #5
 8003daa:	d109      	bne.n	8003dc0 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003dac:	687a      	ldr	r2, [r7, #4]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	212c      	movs	r1, #44	; 0x2c
 8003db2:	fb01 f303 	mul.w	r3, r1, r3
 8003db6:	4413      	add	r3, r2
 8003db8:	3360      	adds	r3, #96	; 0x60
 8003dba:	2205      	movs	r2, #5
 8003dbc:	701a      	strb	r2, [r3, #0]
 8003dbe:	e063      	b.n	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003dc0:	687a      	ldr	r2, [r7, #4]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	212c      	movs	r1, #44	; 0x2c
 8003dc6:	fb01 f303 	mul.w	r3, r1, r3
 8003dca:	4413      	add	r3, r2
 8003dcc:	3361      	adds	r3, #97	; 0x61
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	2b06      	cmp	r3, #6
 8003dd2:	d009      	beq.n	8003de8 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003dd4:	687a      	ldr	r2, [r7, #4]
 8003dd6:	697b      	ldr	r3, [r7, #20]
 8003dd8:	212c      	movs	r1, #44	; 0x2c
 8003dda:	fb01 f303 	mul.w	r3, r1, r3
 8003dde:	4413      	add	r3, r2
 8003de0:	3361      	adds	r3, #97	; 0x61
 8003de2:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003de4:	2b08      	cmp	r3, #8
 8003de6:	d14f      	bne.n	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8003de8:	687a      	ldr	r2, [r7, #4]
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	212c      	movs	r1, #44	; 0x2c
 8003dee:	fb01 f303 	mul.w	r3, r1, r3
 8003df2:	4413      	add	r3, r2
 8003df4:	335c      	adds	r3, #92	; 0x5c
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	6879      	ldr	r1, [r7, #4]
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	202c      	movs	r0, #44	; 0x2c
 8003e00:	fb00 f303 	mul.w	r3, r0, r3
 8003e04:	440b      	add	r3, r1
 8003e06:	335c      	adds	r3, #92	; 0x5c
 8003e08:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003e0a:	687a      	ldr	r2, [r7, #4]
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	212c      	movs	r1, #44	; 0x2c
 8003e10:	fb01 f303 	mul.w	r3, r1, r3
 8003e14:	4413      	add	r3, r2
 8003e16:	335c      	adds	r3, #92	; 0x5c
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d912      	bls.n	8003e44 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003e1e:	687a      	ldr	r2, [r7, #4]
 8003e20:	697b      	ldr	r3, [r7, #20]
 8003e22:	212c      	movs	r1, #44	; 0x2c
 8003e24:	fb01 f303 	mul.w	r3, r1, r3
 8003e28:	4413      	add	r3, r2
 8003e2a:	335c      	adds	r3, #92	; 0x5c
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	697b      	ldr	r3, [r7, #20]
 8003e34:	212c      	movs	r1, #44	; 0x2c
 8003e36:	fb01 f303 	mul.w	r3, r1, r3
 8003e3a:	4413      	add	r3, r2
 8003e3c:	3360      	adds	r3, #96	; 0x60
 8003e3e:	2204      	movs	r2, #4
 8003e40:	701a      	strb	r2, [r3, #0]
 8003e42:	e021      	b.n	8003e88 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003e44:	687a      	ldr	r2, [r7, #4]
 8003e46:	697b      	ldr	r3, [r7, #20]
 8003e48:	212c      	movs	r1, #44	; 0x2c
 8003e4a:	fb01 f303 	mul.w	r3, r1, r3
 8003e4e:	4413      	add	r3, r2
 8003e50:	3360      	adds	r3, #96	; 0x60
 8003e52:	2202      	movs	r2, #2
 8003e54:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e56:	697b      	ldr	r3, [r7, #20]
 8003e58:	015a      	lsls	r2, r3, #5
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	4413      	add	r3, r2
 8003e5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e6c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e74:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e76:	697b      	ldr	r3, [r7, #20]
 8003e78:	015a      	lsls	r2, r3, #5
 8003e7a:	69bb      	ldr	r3, [r7, #24]
 8003e7c:	4413      	add	r3, r2
 8003e7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e82:	461a      	mov	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e88:	697b      	ldr	r3, [r7, #20]
 8003e8a:	015a      	lsls	r2, r3, #5
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	4413      	add	r3, r2
 8003e90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e94:	461a      	mov	r2, r3
 8003e96:	2302      	movs	r3, #2
 8003e98:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003e9a:	697b      	ldr	r3, [r7, #20]
 8003e9c:	b2d9      	uxtb	r1, r3
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	202c      	movs	r0, #44	; 0x2c
 8003ea4:	fb00 f303 	mul.w	r3, r0, r3
 8003ea8:	4413      	add	r3, r2
 8003eaa:	3360      	adds	r3, #96	; 0x60
 8003eac:	781b      	ldrb	r3, [r3, #0]
 8003eae:	461a      	mov	r2, r3
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f003 ff63 	bl	8007d7c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003eb6:	bf00      	nop
 8003eb8:	3720      	adds	r7, #32
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b08a      	sub	sp, #40	; 0x28
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ece:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	6a1b      	ldr	r3, [r3, #32]
 8003ed6:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003ed8:	69fb      	ldr	r3, [r7, #28]
 8003eda:	f003 030f 	and.w	r3, r3, #15
 8003ede:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	0c5b      	lsrs	r3, r3, #17
 8003ee4:	f003 030f 	and.w	r3, r3, #15
 8003ee8:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003eea:	69fb      	ldr	r3, [r7, #28]
 8003eec:	091b      	lsrs	r3, r3, #4
 8003eee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003ef2:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	2b02      	cmp	r3, #2
 8003ef8:	d004      	beq.n	8003f04 <HCD_RXQLVL_IRQHandler+0x46>
 8003efa:	697b      	ldr	r3, [r7, #20]
 8003efc:	2b05      	cmp	r3, #5
 8003efe:	f000 80a9 	beq.w	8004054 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003f02:	e0aa      	b.n	800405a <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 8003f04:	693b      	ldr	r3, [r7, #16]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	f000 80a6 	beq.w	8004058 <HCD_RXQLVL_IRQHandler+0x19a>
 8003f0c:	687a      	ldr	r2, [r7, #4]
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	212c      	movs	r1, #44	; 0x2c
 8003f12:	fb01 f303 	mul.w	r3, r1, r3
 8003f16:	4413      	add	r3, r2
 8003f18:	3344      	adds	r3, #68	; 0x44
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	f000 809b 	beq.w	8004058 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	69bb      	ldr	r3, [r7, #24]
 8003f26:	212c      	movs	r1, #44	; 0x2c
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	3350      	adds	r3, #80	; 0x50
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	441a      	add	r2, r3
 8003f36:	6879      	ldr	r1, [r7, #4]
 8003f38:	69bb      	ldr	r3, [r7, #24]
 8003f3a:	202c      	movs	r0, #44	; 0x2c
 8003f3c:	fb00 f303 	mul.w	r3, r0, r3
 8003f40:	440b      	add	r3, r1
 8003f42:	334c      	adds	r3, #76	; 0x4c
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	429a      	cmp	r2, r3
 8003f48:	d87a      	bhi.n	8004040 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6818      	ldr	r0, [r3, #0]
 8003f4e:	687a      	ldr	r2, [r7, #4]
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	212c      	movs	r1, #44	; 0x2c
 8003f54:	fb01 f303 	mul.w	r3, r1, r3
 8003f58:	4413      	add	r3, r2
 8003f5a:	3344      	adds	r3, #68	; 0x44
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	693a      	ldr	r2, [r7, #16]
 8003f60:	b292      	uxth	r2, r2
 8003f62:	4619      	mov	r1, r3
 8003f64:	f001 ff82 	bl	8005e6c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003f68:	687a      	ldr	r2, [r7, #4]
 8003f6a:	69bb      	ldr	r3, [r7, #24]
 8003f6c:	212c      	movs	r1, #44	; 0x2c
 8003f6e:	fb01 f303 	mul.w	r3, r1, r3
 8003f72:	4413      	add	r3, r2
 8003f74:	3344      	adds	r3, #68	; 0x44
 8003f76:	681a      	ldr	r2, [r3, #0]
 8003f78:	693b      	ldr	r3, [r7, #16]
 8003f7a:	441a      	add	r2, r3
 8003f7c:	6879      	ldr	r1, [r7, #4]
 8003f7e:	69bb      	ldr	r3, [r7, #24]
 8003f80:	202c      	movs	r0, #44	; 0x2c
 8003f82:	fb00 f303 	mul.w	r3, r0, r3
 8003f86:	440b      	add	r3, r1
 8003f88:	3344      	adds	r3, #68	; 0x44
 8003f8a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	212c      	movs	r1, #44	; 0x2c
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	4413      	add	r3, r2
 8003f98:	3350      	adds	r3, #80	; 0x50
 8003f9a:	681a      	ldr	r2, [r3, #0]
 8003f9c:	693b      	ldr	r3, [r7, #16]
 8003f9e:	441a      	add	r2, r3
 8003fa0:	6879      	ldr	r1, [r7, #4]
 8003fa2:	69bb      	ldr	r3, [r7, #24]
 8003fa4:	202c      	movs	r0, #44	; 0x2c
 8003fa6:	fb00 f303 	mul.w	r3, r0, r3
 8003faa:	440b      	add	r3, r1
 8003fac:	3350      	adds	r3, #80	; 0x50
 8003fae:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003fb0:	69bb      	ldr	r3, [r7, #24]
 8003fb2:	015a      	lsls	r2, r3, #5
 8003fb4:	6a3b      	ldr	r3, [r7, #32]
 8003fb6:	4413      	add	r3, r2
 8003fb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fbc:	691b      	ldr	r3, [r3, #16]
 8003fbe:	0cdb      	lsrs	r3, r3, #19
 8003fc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003fc4:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003fc6:	687a      	ldr	r2, [r7, #4]
 8003fc8:	69bb      	ldr	r3, [r7, #24]
 8003fca:	212c      	movs	r1, #44	; 0x2c
 8003fcc:	fb01 f303 	mul.w	r3, r1, r3
 8003fd0:	4413      	add	r3, r2
 8003fd2:	3340      	adds	r3, #64	; 0x40
 8003fd4:	881b      	ldrh	r3, [r3, #0]
 8003fd6:	461a      	mov	r2, r3
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	4293      	cmp	r3, r2
 8003fdc:	d13c      	bne.n	8004058 <HCD_RXQLVL_IRQHandler+0x19a>
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d039      	beq.n	8004058 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003fe4:	69bb      	ldr	r3, [r7, #24]
 8003fe6:	015a      	lsls	r2, r3, #5
 8003fe8:	6a3b      	ldr	r3, [r7, #32]
 8003fea:	4413      	add	r3, r2
 8003fec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003ffa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004002:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	015a      	lsls	r2, r3, #5
 8004008:	6a3b      	ldr	r3, [r7, #32]
 800400a:	4413      	add	r3, r2
 800400c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004010:	461a      	mov	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 8004016:	687a      	ldr	r2, [r7, #4]
 8004018:	69bb      	ldr	r3, [r7, #24]
 800401a:	212c      	movs	r1, #44	; 0x2c
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	4413      	add	r3, r2
 8004022:	3354      	adds	r3, #84	; 0x54
 8004024:	781b      	ldrb	r3, [r3, #0]
 8004026:	f083 0301 	eor.w	r3, r3, #1
 800402a:	b2d8      	uxtb	r0, r3
 800402c:	687a      	ldr	r2, [r7, #4]
 800402e:	69bb      	ldr	r3, [r7, #24]
 8004030:	212c      	movs	r1, #44	; 0x2c
 8004032:	fb01 f303 	mul.w	r3, r1, r3
 8004036:	4413      	add	r3, r2
 8004038:	3354      	adds	r3, #84	; 0x54
 800403a:	4602      	mov	r2, r0
 800403c:	701a      	strb	r2, [r3, #0]
      break;
 800403e:	e00b      	b.n	8004058 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 8004040:	687a      	ldr	r2, [r7, #4]
 8004042:	69bb      	ldr	r3, [r7, #24]
 8004044:	212c      	movs	r1, #44	; 0x2c
 8004046:	fb01 f303 	mul.w	r3, r1, r3
 800404a:	4413      	add	r3, r2
 800404c:	3360      	adds	r3, #96	; 0x60
 800404e:	2204      	movs	r2, #4
 8004050:	701a      	strb	r2, [r3, #0]
      break;
 8004052:	e001      	b.n	8004058 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8004054:	bf00      	nop
 8004056:	e000      	b.n	800405a <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8004058:	bf00      	nop
  }
}
 800405a:	bf00      	nop
 800405c:	3728      	adds	r7, #40	; 0x28
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}

08004062 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004062:	b580      	push	{r7, lr}
 8004064:	b086      	sub	sp, #24
 8004066:	af00      	add	r7, sp, #0
 8004068:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800407e:	693b      	ldr	r3, [r7, #16]
 8004080:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800408e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 0302 	and.w	r3, r3, #2
 8004096:	2b02      	cmp	r3, #2
 8004098:	d10b      	bne.n	80040b2 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 0301 	and.w	r3, r3, #1
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d102      	bne.n	80040aa <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f003 fe4d 	bl	8007d44 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 80040aa:	68bb      	ldr	r3, [r7, #8]
 80040ac:	f043 0302 	orr.w	r3, r3, #2
 80040b0:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f003 0308 	and.w	r3, r3, #8
 80040b8:	2b08      	cmp	r3, #8
 80040ba:	d132      	bne.n	8004122 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 80040bc:	68bb      	ldr	r3, [r7, #8]
 80040be:	f043 0308 	orr.w	r3, r3, #8
 80040c2:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f003 0304 	and.w	r3, r3, #4
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d126      	bne.n	800411c <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	699b      	ldr	r3, [r3, #24]
 80040d2:	2b02      	cmp	r3, #2
 80040d4:	d113      	bne.n	80040fe <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80040dc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80040e0:	d106      	bne.n	80040f0 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2102      	movs	r1, #2
 80040e8:	4618      	mov	r0, r3
 80040ea:	f002 f82d 	bl	8006148 <USB_InitFSLSPClkSel>
 80040ee:	e011      	b.n	8004114 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2101      	movs	r1, #1
 80040f6:	4618      	mov	r0, r3
 80040f8:	f002 f826 	bl	8006148 <USB_InitFSLSPClkSel>
 80040fc:	e00a      	b.n	8004114 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	68db      	ldr	r3, [r3, #12]
 8004102:	2b01      	cmp	r3, #1
 8004104:	d106      	bne.n	8004114 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800410c:	461a      	mov	r2, r3
 800410e:	f64e 2360 	movw	r3, #60000	; 0xea60
 8004112:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 8004114:	6878      	ldr	r0, [r7, #4]
 8004116:	f003 fe3f 	bl	8007d98 <HAL_HCD_PortEnabled_Callback>
 800411a:	e002      	b.n	8004122 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 800411c:	6878      	ldr	r0, [r7, #4]
 800411e:	f003 fe49 	bl	8007db4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f003 0320 	and.w	r3, r3, #32
 8004128:	2b20      	cmp	r3, #32
 800412a:	d103      	bne.n	8004134 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 800412c:	68bb      	ldr	r3, [r7, #8]
 800412e:	f043 0320 	orr.w	r3, r3, #32
 8004132:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800413a:	461a      	mov	r2, r3
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	6013      	str	r3, [r2, #0]
}
 8004140:	bf00      	nop
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d101      	bne.n	800415a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004156:	2301      	movs	r3, #1
 8004158:	e12b      	b.n	80043b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004160:	b2db      	uxtb	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d106      	bne.n	8004174 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	2200      	movs	r2, #0
 800416a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	f7fd fafa 	bl	8001768 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2224      	movs	r2, #36	; 0x24
 8004178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681a      	ldr	r2, [r3, #0]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f022 0201 	bic.w	r2, r2, #1
 800418a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	681a      	ldr	r2, [r3, #0]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800419a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	681a      	ldr	r2, [r3, #0]
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80041aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80041ac:	f001 fa20 	bl	80055f0 <HAL_RCC_GetPCLK1Freq>
 80041b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	685b      	ldr	r3, [r3, #4]
 80041b6:	4a81      	ldr	r2, [pc, #516]	; (80043bc <HAL_I2C_Init+0x274>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d807      	bhi.n	80041cc <HAL_I2C_Init+0x84>
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	4a80      	ldr	r2, [pc, #512]	; (80043c0 <HAL_I2C_Init+0x278>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	bf94      	ite	ls
 80041c4:	2301      	movls	r3, #1
 80041c6:	2300      	movhi	r3, #0
 80041c8:	b2db      	uxtb	r3, r3
 80041ca:	e006      	b.n	80041da <HAL_I2C_Init+0x92>
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4a7d      	ldr	r2, [pc, #500]	; (80043c4 <HAL_I2C_Init+0x27c>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	bf94      	ite	ls
 80041d4:	2301      	movls	r3, #1
 80041d6:	2300      	movhi	r3, #0
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d001      	beq.n	80041e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e0e7      	b.n	80043b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	4a78      	ldr	r2, [pc, #480]	; (80043c8 <HAL_I2C_Init+0x280>)
 80041e6:	fba2 2303 	umull	r2, r3, r2, r3
 80041ea:	0c9b      	lsrs	r3, r3, #18
 80041ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	68ba      	ldr	r2, [r7, #8]
 80041fe:	430a      	orrs	r2, r1
 8004200:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6a1b      	ldr	r3, [r3, #32]
 8004208:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	685b      	ldr	r3, [r3, #4]
 8004210:	4a6a      	ldr	r2, [pc, #424]	; (80043bc <HAL_I2C_Init+0x274>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d802      	bhi.n	800421c <HAL_I2C_Init+0xd4>
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	3301      	adds	r3, #1
 800421a:	e009      	b.n	8004230 <HAL_I2C_Init+0xe8>
 800421c:	68bb      	ldr	r3, [r7, #8]
 800421e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004222:	fb02 f303 	mul.w	r3, r2, r3
 8004226:	4a69      	ldr	r2, [pc, #420]	; (80043cc <HAL_I2C_Init+0x284>)
 8004228:	fba2 2303 	umull	r2, r3, r2, r3
 800422c:	099b      	lsrs	r3, r3, #6
 800422e:	3301      	adds	r3, #1
 8004230:	687a      	ldr	r2, [r7, #4]
 8004232:	6812      	ldr	r2, [r2, #0]
 8004234:	430b      	orrs	r3, r1
 8004236:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	69db      	ldr	r3, [r3, #28]
 800423e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004242:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	495c      	ldr	r1, [pc, #368]	; (80043bc <HAL_I2C_Init+0x274>)
 800424c:	428b      	cmp	r3, r1
 800424e:	d819      	bhi.n	8004284 <HAL_I2C_Init+0x13c>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	1e59      	subs	r1, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	005b      	lsls	r3, r3, #1
 800425a:	fbb1 f3f3 	udiv	r3, r1, r3
 800425e:	1c59      	adds	r1, r3, #1
 8004260:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004264:	400b      	ands	r3, r1
 8004266:	2b00      	cmp	r3, #0
 8004268:	d00a      	beq.n	8004280 <HAL_I2C_Init+0x138>
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	1e59      	subs	r1, r3, #1
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	005b      	lsls	r3, r3, #1
 8004274:	fbb1 f3f3 	udiv	r3, r1, r3
 8004278:	3301      	adds	r3, #1
 800427a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800427e:	e051      	b.n	8004324 <HAL_I2C_Init+0x1dc>
 8004280:	2304      	movs	r3, #4
 8004282:	e04f      	b.n	8004324 <HAL_I2C_Init+0x1dc>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	2b00      	cmp	r3, #0
 800428a:	d111      	bne.n	80042b0 <HAL_I2C_Init+0x168>
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	1e58      	subs	r0, r3, #1
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6859      	ldr	r1, [r3, #4]
 8004294:	460b      	mov	r3, r1
 8004296:	005b      	lsls	r3, r3, #1
 8004298:	440b      	add	r3, r1
 800429a:	fbb0 f3f3 	udiv	r3, r0, r3
 800429e:	3301      	adds	r3, #1
 80042a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	bf0c      	ite	eq
 80042a8:	2301      	moveq	r3, #1
 80042aa:	2300      	movne	r3, #0
 80042ac:	b2db      	uxtb	r3, r3
 80042ae:	e012      	b.n	80042d6 <HAL_I2C_Init+0x18e>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	1e58      	subs	r0, r3, #1
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6859      	ldr	r1, [r3, #4]
 80042b8:	460b      	mov	r3, r1
 80042ba:	009b      	lsls	r3, r3, #2
 80042bc:	440b      	add	r3, r1
 80042be:	0099      	lsls	r1, r3, #2
 80042c0:	440b      	add	r3, r1
 80042c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80042c6:	3301      	adds	r3, #1
 80042c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	bf0c      	ite	eq
 80042d0:	2301      	moveq	r3, #1
 80042d2:	2300      	movne	r3, #0
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d001      	beq.n	80042de <HAL_I2C_Init+0x196>
 80042da:	2301      	movs	r3, #1
 80042dc:	e022      	b.n	8004324 <HAL_I2C_Init+0x1dc>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d10e      	bne.n	8004304 <HAL_I2C_Init+0x1bc>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	1e58      	subs	r0, r3, #1
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	6859      	ldr	r1, [r3, #4]
 80042ee:	460b      	mov	r3, r1
 80042f0:	005b      	lsls	r3, r3, #1
 80042f2:	440b      	add	r3, r1
 80042f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80042f8:	3301      	adds	r3, #1
 80042fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80042fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004302:	e00f      	b.n	8004324 <HAL_I2C_Init+0x1dc>
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	1e58      	subs	r0, r3, #1
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6859      	ldr	r1, [r3, #4]
 800430c:	460b      	mov	r3, r1
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	440b      	add	r3, r1
 8004312:	0099      	lsls	r1, r3, #2
 8004314:	440b      	add	r3, r1
 8004316:	fbb0 f3f3 	udiv	r3, r0, r3
 800431a:	3301      	adds	r3, #1
 800431c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004320:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004324:	6879      	ldr	r1, [r7, #4]
 8004326:	6809      	ldr	r1, [r1, #0]
 8004328:	4313      	orrs	r3, r2
 800432a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	69da      	ldr	r2, [r3, #28]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	431a      	orrs	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	430a      	orrs	r2, r1
 8004346:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004352:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004356:	687a      	ldr	r2, [r7, #4]
 8004358:	6911      	ldr	r1, [r2, #16]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	68d2      	ldr	r2, [r2, #12]
 800435e:	4311      	orrs	r1, r2
 8004360:	687a      	ldr	r2, [r7, #4]
 8004362:	6812      	ldr	r2, [r2, #0]
 8004364:	430b      	orrs	r3, r1
 8004366:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	695a      	ldr	r2, [r3, #20]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	430a      	orrs	r2, r1
 8004382:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f042 0201 	orr.w	r2, r2, #1
 8004392:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	2200      	movs	r2, #0
 8004398:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2220      	movs	r2, #32
 800439e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2200      	movs	r2, #0
 80043a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80043b0:	2300      	movs	r3, #0
}
 80043b2:	4618      	mov	r0, r3
 80043b4:	3710      	adds	r7, #16
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	000186a0 	.word	0x000186a0
 80043c0:	001e847f 	.word	0x001e847f
 80043c4:	003d08ff 	.word	0x003d08ff
 80043c8:	431bde83 	.word	0x431bde83
 80043cc:	10624dd3 	.word	0x10624dd3

080043d0 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80043d0:	b580      	push	{r7, lr}
 80043d2:	b088      	sub	sp, #32
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e128      	b.n	8004634 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d109      	bne.n	8004402 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	2200      	movs	r2, #0
 80043f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a90      	ldr	r2, [pc, #576]	; (800463c <HAL_I2S_Init+0x26c>)
 80043fa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fd f9fb 	bl	80017f8 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2202      	movs	r2, #2
 8004406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	69db      	ldr	r3, [r3, #28]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	6812      	ldr	r2, [r2, #0]
 8004414:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004418:	f023 030f 	bic.w	r3, r3, #15
 800441c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	2202      	movs	r2, #2
 8004424:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	695b      	ldr	r3, [r3, #20]
 800442a:	2b02      	cmp	r3, #2
 800442c:	d060      	beq.n	80044f0 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d102      	bne.n	800443c <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004436:	2310      	movs	r3, #16
 8004438:	617b      	str	r3, [r7, #20]
 800443a:	e001      	b.n	8004440 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800443c:	2320      	movs	r3, #32
 800443e:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	2b20      	cmp	r3, #32
 8004446:	d802      	bhi.n	800444e <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	005b      	lsls	r3, r3, #1
 800444c:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800444e:	2001      	movs	r0, #1
 8004450:	f001 f9c4 	bl	80057dc <HAL_RCCEx_GetPeriphCLKFreq>
 8004454:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800445e:	d125      	bne.n	80044ac <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	68db      	ldr	r3, [r3, #12]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d010      	beq.n	800448a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	009b      	lsls	r3, r3, #2
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004472:	4613      	mov	r3, r2
 8004474:	009b      	lsls	r3, r3, #2
 8004476:	4413      	add	r3, r2
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	461a      	mov	r2, r3
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	fbb2 f3f3 	udiv	r3, r2, r3
 8004484:	3305      	adds	r3, #5
 8004486:	613b      	str	r3, [r7, #16]
 8004488:	e01f      	b.n	80044ca <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	00db      	lsls	r3, r3, #3
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	fbb2 f2f3 	udiv	r2, r2, r3
 8004494:	4613      	mov	r3, r2
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	005b      	lsls	r3, r3, #1
 800449c:	461a      	mov	r2, r3
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a6:	3305      	adds	r3, #5
 80044a8:	613b      	str	r3, [r7, #16]
 80044aa:	e00e      	b.n	80044ca <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80044ac:	68fa      	ldr	r2, [r7, #12]
 80044ae:	697b      	ldr	r3, [r7, #20]
 80044b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80044b4:	4613      	mov	r3, r2
 80044b6:	009b      	lsls	r3, r3, #2
 80044b8:	4413      	add	r3, r2
 80044ba:	005b      	lsls	r3, r3, #1
 80044bc:	461a      	mov	r2, r3
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c6:	3305      	adds	r3, #5
 80044c8:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	4a5c      	ldr	r2, [pc, #368]	; (8004640 <HAL_I2S_Init+0x270>)
 80044ce:	fba2 2303 	umull	r2, r3, r2, r3
 80044d2:	08db      	lsrs	r3, r3, #3
 80044d4:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f003 0301 	and.w	r3, r3, #1
 80044dc:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	69bb      	ldr	r3, [r7, #24]
 80044e2:	1ad3      	subs	r3, r2, r3
 80044e4:	085b      	lsrs	r3, r3, #1
 80044e6:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	021b      	lsls	r3, r3, #8
 80044ec:	61bb      	str	r3, [r7, #24]
 80044ee:	e003      	b.n	80044f8 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80044f0:	2302      	movs	r3, #2
 80044f2:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80044f4:	2300      	movs	r3, #0
 80044f6:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80044f8:	69fb      	ldr	r3, [r7, #28]
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d902      	bls.n	8004504 <HAL_I2S_Init+0x134>
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	2bff      	cmp	r3, #255	; 0xff
 8004502:	d907      	bls.n	8004514 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004508:	f043 0210 	orr.w	r2, r3, #16
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	e08f      	b.n	8004634 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	69bb      	ldr	r3, [r7, #24]
 800451a:	ea42 0103 	orr.w	r1, r2, r3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	69fa      	ldr	r2, [r7, #28]
 8004524:	430a      	orrs	r2, r1
 8004526:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	69db      	ldr	r3, [r3, #28]
 800452e:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004532:	f023 030f 	bic.w	r3, r3, #15
 8004536:	687a      	ldr	r2, [r7, #4]
 8004538:	6851      	ldr	r1, [r2, #4]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6892      	ldr	r2, [r2, #8]
 800453e:	4311      	orrs	r1, r2
 8004540:	687a      	ldr	r2, [r7, #4]
 8004542:	68d2      	ldr	r2, [r2, #12]
 8004544:	4311      	orrs	r1, r2
 8004546:	687a      	ldr	r2, [r7, #4]
 8004548:	6992      	ldr	r2, [r2, #24]
 800454a:	430a      	orrs	r2, r1
 800454c:	431a      	orrs	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004556:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d161      	bne.n	8004624 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a38      	ldr	r2, [pc, #224]	; (8004644 <HAL_I2S_Init+0x274>)
 8004564:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a37      	ldr	r2, [pc, #220]	; (8004648 <HAL_I2S_Init+0x278>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d101      	bne.n	8004574 <HAL_I2S_Init+0x1a4>
 8004570:	4b36      	ldr	r3, [pc, #216]	; (800464c <HAL_I2S_Init+0x27c>)
 8004572:	e001      	b.n	8004578 <HAL_I2S_Init+0x1a8>
 8004574:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004578:	69db      	ldr	r3, [r3, #28]
 800457a:	687a      	ldr	r2, [r7, #4]
 800457c:	6812      	ldr	r2, [r2, #0]
 800457e:	4932      	ldr	r1, [pc, #200]	; (8004648 <HAL_I2S_Init+0x278>)
 8004580:	428a      	cmp	r2, r1
 8004582:	d101      	bne.n	8004588 <HAL_I2S_Init+0x1b8>
 8004584:	4a31      	ldr	r2, [pc, #196]	; (800464c <HAL_I2S_Init+0x27c>)
 8004586:	e001      	b.n	800458c <HAL_I2S_Init+0x1bc>
 8004588:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 800458c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004590:	f023 030f 	bic.w	r3, r3, #15
 8004594:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	4a2b      	ldr	r2, [pc, #172]	; (8004648 <HAL_I2S_Init+0x278>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d101      	bne.n	80045a4 <HAL_I2S_Init+0x1d4>
 80045a0:	4b2a      	ldr	r3, [pc, #168]	; (800464c <HAL_I2S_Init+0x27c>)
 80045a2:	e001      	b.n	80045a8 <HAL_I2S_Init+0x1d8>
 80045a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045a8:	2202      	movs	r2, #2
 80045aa:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	4a25      	ldr	r2, [pc, #148]	; (8004648 <HAL_I2S_Init+0x278>)
 80045b2:	4293      	cmp	r3, r2
 80045b4:	d101      	bne.n	80045ba <HAL_I2S_Init+0x1ea>
 80045b6:	4b25      	ldr	r3, [pc, #148]	; (800464c <HAL_I2S_Init+0x27c>)
 80045b8:	e001      	b.n	80045be <HAL_I2S_Init+0x1ee>
 80045ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80045be:	69db      	ldr	r3, [r3, #28]
 80045c0:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80045ca:	d003      	beq.n	80045d4 <HAL_I2S_Init+0x204>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	685b      	ldr	r3, [r3, #4]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d103      	bne.n	80045dc <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80045d4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80045d8:	613b      	str	r3, [r7, #16]
 80045da:	e001      	b.n	80045e0 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80045dc:	2300      	movs	r3, #0
 80045de:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045ea:	4313      	orrs	r3, r2
 80045ec:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	68db      	ldr	r3, [r3, #12]
 80045f2:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045f4:	4313      	orrs	r3, r2
 80045f6:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 80045fe:	4313      	orrs	r3, r2
 8004600:	b29a      	uxth	r2, r3
 8004602:	897b      	ldrh	r3, [r7, #10]
 8004604:	4313      	orrs	r3, r2
 8004606:	b29b      	uxth	r3, r3
 8004608:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800460c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	4a0d      	ldr	r2, [pc, #52]	; (8004648 <HAL_I2S_Init+0x278>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d101      	bne.n	800461c <HAL_I2S_Init+0x24c>
 8004618:	4b0c      	ldr	r3, [pc, #48]	; (800464c <HAL_I2S_Init+0x27c>)
 800461a:	e001      	b.n	8004620 <HAL_I2S_Init+0x250>
 800461c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004620:	897a      	ldrh	r2, [r7, #10]
 8004622:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2201      	movs	r2, #1
 800462e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004632:	2300      	movs	r3, #0
}
 8004634:	4618      	mov	r0, r3
 8004636:	3720      	adds	r7, #32
 8004638:	46bd      	mov	sp, r7
 800463a:	bd80      	pop	{r7, pc}
 800463c:	08004747 	.word	0x08004747
 8004640:	cccccccd 	.word	0xcccccccd
 8004644:	0800485d 	.word	0x0800485d
 8004648:	40003800 	.word	0x40003800
 800464c:	40003400 	.word	0x40003400

08004650 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004650:	b480      	push	{r7}
 8004652:	b083      	sub	sp, #12
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004658:	bf00      	nop
 800465a:	370c      	adds	r7, #12
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr

08004664 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004664:	b480      	push	{r7}
 8004666:	b083      	sub	sp, #12
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 800466c:	bf00      	nop
 800466e:	370c      	adds	r7, #12
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004678:	b480      	push	{r7}
 800467a:	b083      	sub	sp, #12
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004680:	bf00      	nop
 8004682:	370c      	adds	r7, #12
 8004684:	46bd      	mov	sp, r7
 8004686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468a:	4770      	bx	lr

0800468c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b082      	sub	sp, #8
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004698:	881a      	ldrh	r2, [r3, #0]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046a4:	1c9a      	adds	r2, r3, #2
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b29a      	uxth	r2, r3
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046bc:	b29b      	uxth	r3, r3
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d10e      	bne.n	80046e0 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	685a      	ldr	r2, [r3, #4]
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80046d0:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2201      	movs	r2, #1
 80046d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 80046da:	6878      	ldr	r0, [r7, #4]
 80046dc:	f7ff ffb8 	bl	8004650 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80046e0:	bf00      	nop
 80046e2:	3708      	adds	r7, #8
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fa:	b292      	uxth	r2, r2
 80046fc:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004702:	1c9a      	adds	r2, r3, #2
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800471a:	b29b      	uxth	r3, r3
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10e      	bne.n	800473e <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	685a      	ldr	r2, [r3, #4]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800472e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2201      	movs	r2, #1
 8004734:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff ff93 	bl	8004664 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800473e:	bf00      	nop
 8004740:	3708      	adds	r7, #8
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004746:	b580      	push	{r7, lr}
 8004748:	b086      	sub	sp, #24
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b04      	cmp	r3, #4
 8004760:	d13a      	bne.n	80047d8 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	f003 0301 	and.w	r3, r3, #1
 8004768:	2b01      	cmp	r3, #1
 800476a:	d109      	bne.n	8004780 <I2S_IRQHandler+0x3a>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	685b      	ldr	r3, [r3, #4]
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b40      	cmp	r3, #64	; 0x40
 8004778:	d102      	bne.n	8004780 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800477a:	6878      	ldr	r0, [r7, #4]
 800477c:	f7ff ffb4 	bl	80046e8 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004780:	697b      	ldr	r3, [r7, #20]
 8004782:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004786:	2b40      	cmp	r3, #64	; 0x40
 8004788:	d126      	bne.n	80047d8 <I2S_IRQHandler+0x92>
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f003 0320 	and.w	r3, r3, #32
 8004794:	2b20      	cmp	r3, #32
 8004796:	d11f      	bne.n	80047d8 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	685a      	ldr	r2, [r3, #4]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80047a6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80047a8:	2300      	movs	r3, #0
 80047aa:	613b      	str	r3, [r7, #16]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	68db      	ldr	r3, [r3, #12]
 80047b2:	613b      	str	r3, [r7, #16]
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	613b      	str	r3, [r7, #16]
 80047bc:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2201      	movs	r2, #1
 80047c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ca:	f043 0202 	orr.w	r2, r3, #2
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80047d2:	6878      	ldr	r0, [r7, #4]
 80047d4:	f7ff ff50 	bl	8004678 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b03      	cmp	r3, #3
 80047e2:	d136      	bne.n	8004852 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 80047e4:	697b      	ldr	r3, [r7, #20]
 80047e6:	f003 0302 	and.w	r3, r3, #2
 80047ea:	2b02      	cmp	r3, #2
 80047ec:	d109      	bne.n	8004802 <I2S_IRQHandler+0xbc>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	685b      	ldr	r3, [r3, #4]
 80047f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047f8:	2b80      	cmp	r3, #128	; 0x80
 80047fa:	d102      	bne.n	8004802 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 80047fc:	6878      	ldr	r0, [r7, #4]
 80047fe:	f7ff ff45 	bl	800468c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004802:	697b      	ldr	r3, [r7, #20]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b08      	cmp	r3, #8
 800480a:	d122      	bne.n	8004852 <I2S_IRQHandler+0x10c>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	685b      	ldr	r3, [r3, #4]
 8004812:	f003 0320 	and.w	r3, r3, #32
 8004816:	2b20      	cmp	r3, #32
 8004818:	d11b      	bne.n	8004852 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	685a      	ldr	r2, [r3, #4]
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004828:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800482a:	2300      	movs	r3, #0
 800482c:	60fb      	str	r3, [r7, #12]
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	60fb      	str	r3, [r7, #12]
 8004836:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2201      	movs	r2, #1
 800483c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004844:	f043 0204 	orr.w	r2, r3, #4
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff ff13 	bl	8004678 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004852:	bf00      	nop
 8004854:	3718      	adds	r7, #24
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}
	...

0800485c <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b088      	sub	sp, #32
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	4a92      	ldr	r2, [pc, #584]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d101      	bne.n	800487a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8004876:	4b92      	ldr	r3, [pc, #584]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004878:	e001      	b.n	800487e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800487a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a8b      	ldr	r2, [pc, #556]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004890:	4293      	cmp	r3, r2
 8004892:	d101      	bne.n	8004898 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004894:	4b8a      	ldr	r3, [pc, #552]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004896:	e001      	b.n	800489c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004898:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80048a8:	d004      	beq.n	80048b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f040 8099 	bne.w	80049e6 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	f003 0302 	and.w	r3, r3, #2
 80048ba:	2b02      	cmp	r3, #2
 80048bc:	d107      	bne.n	80048ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80048be:	697b      	ldr	r3, [r7, #20]
 80048c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d002      	beq.n	80048ce <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f925 	bl	8004b18 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80048ce:	69bb      	ldr	r3, [r7, #24]
 80048d0:	f003 0301 	and.w	r3, r3, #1
 80048d4:	2b01      	cmp	r3, #1
 80048d6:	d107      	bne.n	80048e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 80048e2:	6878      	ldr	r0, [r7, #4]
 80048e4:	f000 f9c8 	bl	8004c78 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048ee:	2b40      	cmp	r3, #64	; 0x40
 80048f0:	d13a      	bne.n	8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f003 0320 	and.w	r3, r3, #32
 80048f8:	2b00      	cmp	r3, #0
 80048fa:	d035      	beq.n	8004968 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a6e      	ldr	r2, [pc, #440]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d101      	bne.n	800490a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004906:	4b6e      	ldr	r3, [pc, #440]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004908:	e001      	b.n	800490e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800490a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800490e:	685a      	ldr	r2, [r3, #4]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4969      	ldr	r1, [pc, #420]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004916:	428b      	cmp	r3, r1
 8004918:	d101      	bne.n	800491e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800491a:	4b69      	ldr	r3, [pc, #420]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800491c:	e001      	b.n	8004922 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800491e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004922:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004926:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	685a      	ldr	r2, [r3, #4]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004936:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	68db      	ldr	r3, [r3, #12]
 8004942:	60fb      	str	r3, [r7, #12]
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	60fb      	str	r3, [r7, #12]
 800494c:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	2201      	movs	r2, #1
 8004952:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800495a:	f043 0202 	orr.w	r2, r3, #2
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff fe88 	bl	8004678 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b08      	cmp	r3, #8
 8004970:	f040 80c3 	bne.w	8004afa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	f003 0320 	and.w	r3, r3, #32
 800497a:	2b00      	cmp	r3, #0
 800497c:	f000 80bd 	beq.w	8004afa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	685a      	ldr	r2, [r3, #4]
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800498e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a49      	ldr	r2, [pc, #292]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d101      	bne.n	800499e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800499a:	4b49      	ldr	r3, [pc, #292]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800499c:	e001      	b.n	80049a2 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800499e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4944      	ldr	r1, [pc, #272]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049aa:	428b      	cmp	r3, r1
 80049ac:	d101      	bne.n	80049b2 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80049ae:	4b44      	ldr	r3, [pc, #272]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049b0:	e001      	b.n	80049b6 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80049b2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80049b6:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80049ba:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80049bc:	2300      	movs	r3, #0
 80049be:	60bb      	str	r3, [r7, #8]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	60bb      	str	r3, [r7, #8]
 80049c8:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2201      	movs	r2, #1
 80049ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049d6:	f043 0204 	orr.w	r2, r3, #4
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049de:	6878      	ldr	r0, [r7, #4]
 80049e0:	f7ff fe4a 	bl	8004678 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049e4:	e089      	b.n	8004afa <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	f003 0302 	and.w	r3, r3, #2
 80049ec:	2b02      	cmp	r3, #2
 80049ee:	d107      	bne.n	8004a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 80049fa:	6878      	ldr	r0, [r7, #4]
 80049fc:	f000 f8be 	bl	8004b7c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004a00:	69fb      	ldr	r3, [r7, #28]
 8004a02:	f003 0301 	and.w	r3, r3, #1
 8004a06:	2b01      	cmp	r3, #1
 8004a08:	d107      	bne.n	8004a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d002      	beq.n	8004a1a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004a14:	6878      	ldr	r0, [r7, #4]
 8004a16:	f000 f8fd 	bl	8004c14 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d12f      	bne.n	8004a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004a24:	697b      	ldr	r3, [r7, #20]
 8004a26:	f003 0320 	and.w	r3, r3, #32
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d02a      	beq.n	8004a84 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004a3c:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1e      	ldr	r2, [pc, #120]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d101      	bne.n	8004a4c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004a48:	4b1d      	ldr	r3, [pc, #116]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a4a:	e001      	b.n	8004a50 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004a4c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a50:	685a      	ldr	r2, [r3, #4]
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	4919      	ldr	r1, [pc, #100]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a58:	428b      	cmp	r3, r1
 8004a5a:	d101      	bne.n	8004a60 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004a5c:	4b18      	ldr	r3, [pc, #96]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a5e:	e001      	b.n	8004a64 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004a60:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004a64:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004a68:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a76:	f043 0202 	orr.w	r2, r3, #2
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a7e:	6878      	ldr	r0, [r7, #4]
 8004a80:	f7ff fdfa 	bl	8004678 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004a84:	69bb      	ldr	r3, [r7, #24]
 8004a86:	f003 0308 	and.w	r3, r3, #8
 8004a8a:	2b08      	cmp	r3, #8
 8004a8c:	d136      	bne.n	8004afc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004a8e:	693b      	ldr	r3, [r7, #16]
 8004a90:	f003 0320 	and.w	r3, r3, #32
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d031      	beq.n	8004afc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a07      	ldr	r2, [pc, #28]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d101      	bne.n	8004aa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004aa2:	4b07      	ldr	r3, [pc, #28]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004aa4:	e001      	b.n	8004aaa <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004aa6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004aaa:	685a      	ldr	r2, [r3, #4]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	4902      	ldr	r1, [pc, #8]	; (8004abc <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ab2:	428b      	cmp	r3, r1
 8004ab4:	d106      	bne.n	8004ac4 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004ab6:	4b02      	ldr	r3, [pc, #8]	; (8004ac0 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ab8:	e006      	b.n	8004ac8 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004aba:	bf00      	nop
 8004abc:	40003800 	.word	0x40003800
 8004ac0:	40003400 	.word	0x40003400
 8004ac4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ac8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004acc:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685a      	ldr	r2, [r3, #4]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004adc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aea:	f043 0204 	orr.w	r2, r3, #4
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004af2:	6878      	ldr	r0, [r7, #4]
 8004af4:	f7ff fdc0 	bl	8004678 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004af8:	e000      	b.n	8004afc <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004afa:	bf00      	nop
}
 8004afc:	bf00      	nop
 8004afe:	3720      	adds	r7, #32
 8004b00:	46bd      	mov	sp, r7
 8004b02:	bd80      	pop	{r7, pc}

08004b04 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b04:	b480      	push	{r7}
 8004b06:	b083      	sub	sp, #12
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b24:	1c99      	adds	r1, r3, #2
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	6251      	str	r1, [r2, #36]	; 0x24
 8004b2a:	881a      	ldrh	r2, [r3, #0]
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b36:	b29b      	uxth	r3, r3
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	b29a      	uxth	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d113      	bne.n	8004b72 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004b58:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d106      	bne.n	8004b72 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2201      	movs	r2, #1
 8004b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7ff ffc9 	bl	8004b04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b72:	bf00      	nop
 8004b74:	3708      	adds	r7, #8
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
	...

08004b7c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b082      	sub	sp, #8
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b88:	1c99      	adds	r1, r3, #2
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	6251      	str	r1, [r2, #36]	; 0x24
 8004b8e:	8819      	ldrh	r1, [r3, #0]
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	4a1d      	ldr	r2, [pc, #116]	; (8004c0c <I2SEx_TxISR_I2SExt+0x90>)
 8004b96:	4293      	cmp	r3, r2
 8004b98:	d101      	bne.n	8004b9e <I2SEx_TxISR_I2SExt+0x22>
 8004b9a:	4b1d      	ldr	r3, [pc, #116]	; (8004c10 <I2SEx_TxISR_I2SExt+0x94>)
 8004b9c:	e001      	b.n	8004ba2 <I2SEx_TxISR_I2SExt+0x26>
 8004b9e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ba2:	460a      	mov	r2, r1
 8004ba4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004baa:	b29b      	uxth	r3, r3
 8004bac:	3b01      	subs	r3, #1
 8004bae:	b29a      	uxth	r2, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d121      	bne.n	8004c02 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	4a12      	ldr	r2, [pc, #72]	; (8004c0c <I2SEx_TxISR_I2SExt+0x90>)
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d101      	bne.n	8004bcc <I2SEx_TxISR_I2SExt+0x50>
 8004bc8:	4b11      	ldr	r3, [pc, #68]	; (8004c10 <I2SEx_TxISR_I2SExt+0x94>)
 8004bca:	e001      	b.n	8004bd0 <I2SEx_TxISR_I2SExt+0x54>
 8004bcc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004bd0:	685a      	ldr	r2, [r3, #4]
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	490d      	ldr	r1, [pc, #52]	; (8004c0c <I2SEx_TxISR_I2SExt+0x90>)
 8004bd8:	428b      	cmp	r3, r1
 8004bda:	d101      	bne.n	8004be0 <I2SEx_TxISR_I2SExt+0x64>
 8004bdc:	4b0c      	ldr	r3, [pc, #48]	; (8004c10 <I2SEx_TxISR_I2SExt+0x94>)
 8004bde:	e001      	b.n	8004be4 <I2SEx_TxISR_I2SExt+0x68>
 8004be0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004be4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004be8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d106      	bne.n	8004c02 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7ff ff81 	bl	8004b04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c02:	bf00      	nop
 8004c04:	3708      	adds	r7, #8
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	40003800 	.word	0x40003800
 8004c10:	40003400 	.word	0x40003400

08004c14 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b082      	sub	sp, #8
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	68d8      	ldr	r0, [r3, #12]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c26:	1c99      	adds	r1, r3, #2
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004c2c:	b282      	uxth	r2, r0
 8004c2e:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c34:	b29b      	uxth	r3, r3
 8004c36:	3b01      	subs	r3, #1
 8004c38:	b29a      	uxth	r2, r3
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004c42:	b29b      	uxth	r3, r3
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d113      	bne.n	8004c70 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	685a      	ldr	r2, [r3, #4]
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004c56:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5c:	b29b      	uxth	r3, r3
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d106      	bne.n	8004c70 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2201      	movs	r2, #1
 8004c66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7ff ff4a 	bl	8004b04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c70:	bf00      	nop
 8004c72:	3708      	adds	r7, #8
 8004c74:	46bd      	mov	sp, r7
 8004c76:	bd80      	pop	{r7, pc}

08004c78 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a20      	ldr	r2, [pc, #128]	; (8004d08 <I2SEx_RxISR_I2SExt+0x90>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d101      	bne.n	8004c8e <I2SEx_RxISR_I2SExt+0x16>
 8004c8a:	4b20      	ldr	r3, [pc, #128]	; (8004d0c <I2SEx_RxISR_I2SExt+0x94>)
 8004c8c:	e001      	b.n	8004c92 <I2SEx_RxISR_I2SExt+0x1a>
 8004c8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004c92:	68d8      	ldr	r0, [r3, #12]
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	1c99      	adds	r1, r3, #2
 8004c9a:	687a      	ldr	r2, [r7, #4]
 8004c9c:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004c9e:	b282      	uxth	r2, r0
 8004ca0:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004cb4:	b29b      	uxth	r3, r3
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d121      	bne.n	8004cfe <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a12      	ldr	r2, [pc, #72]	; (8004d08 <I2SEx_RxISR_I2SExt+0x90>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d101      	bne.n	8004cc8 <I2SEx_RxISR_I2SExt+0x50>
 8004cc4:	4b11      	ldr	r3, [pc, #68]	; (8004d0c <I2SEx_RxISR_I2SExt+0x94>)
 8004cc6:	e001      	b.n	8004ccc <I2SEx_RxISR_I2SExt+0x54>
 8004cc8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ccc:	685a      	ldr	r2, [r3, #4]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	490d      	ldr	r1, [pc, #52]	; (8004d08 <I2SEx_RxISR_I2SExt+0x90>)
 8004cd4:	428b      	cmp	r3, r1
 8004cd6:	d101      	bne.n	8004cdc <I2SEx_RxISR_I2SExt+0x64>
 8004cd8:	4b0c      	ldr	r3, [pc, #48]	; (8004d0c <I2SEx_RxISR_I2SExt+0x94>)
 8004cda:	e001      	b.n	8004ce0 <I2SEx_RxISR_I2SExt+0x68>
 8004cdc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004ce0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ce4:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cea:	b29b      	uxth	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2201      	movs	r2, #1
 8004cf4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7ff ff03 	bl	8004b04 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004cfe:	bf00      	nop
 8004d00:	3708      	adds	r7, #8
 8004d02:	46bd      	mov	sp, r7
 8004d04:	bd80      	pop	{r7, pc}
 8004d06:	bf00      	nop
 8004d08:	40003800 	.word	0x40003800
 8004d0c:	40003400 	.word	0x40003400

08004d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d101      	bne.n	8004d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	e267      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0301 	and.w	r3, r3, #1
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d075      	beq.n	8004e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d2e:	4b88      	ldr	r3, [pc, #544]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
 8004d36:	2b04      	cmp	r3, #4
 8004d38:	d00c      	beq.n	8004d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d3a:	4b85      	ldr	r3, [pc, #532]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004d42:	2b08      	cmp	r3, #8
 8004d44:	d112      	bne.n	8004d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004d46:	4b82      	ldr	r3, [pc, #520]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004d52:	d10b      	bne.n	8004d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d54:	4b7e      	ldr	r3, [pc, #504]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d05b      	beq.n	8004e18 <HAL_RCC_OscConfig+0x108>
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	685b      	ldr	r3, [r3, #4]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d157      	bne.n	8004e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d68:	2301      	movs	r3, #1
 8004d6a:	e242      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d74:	d106      	bne.n	8004d84 <HAL_RCC_OscConfig+0x74>
 8004d76:	4b76      	ldr	r3, [pc, #472]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	4a75      	ldr	r2, [pc, #468]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d80:	6013      	str	r3, [r2, #0]
 8004d82:	e01d      	b.n	8004dc0 <HAL_RCC_OscConfig+0xb0>
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d8c:	d10c      	bne.n	8004da8 <HAL_RCC_OscConfig+0x98>
 8004d8e:	4b70      	ldr	r3, [pc, #448]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	4a6f      	ldr	r2, [pc, #444]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d98:	6013      	str	r3, [r2, #0]
 8004d9a:	4b6d      	ldr	r3, [pc, #436]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	4a6c      	ldr	r2, [pc, #432]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004da4:	6013      	str	r3, [r2, #0]
 8004da6:	e00b      	b.n	8004dc0 <HAL_RCC_OscConfig+0xb0>
 8004da8:	4b69      	ldr	r3, [pc, #420]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4a68      	ldr	r2, [pc, #416]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004db2:	6013      	str	r3, [r2, #0]
 8004db4:	4b66      	ldr	r3, [pc, #408]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a65      	ldr	r2, [pc, #404]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d013      	beq.n	8004df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc8:	f7fc ff0c 	bl	8001be4 <HAL_GetTick>
 8004dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dce:	e008      	b.n	8004de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004dd0:	f7fc ff08 	bl	8001be4 <HAL_GetTick>
 8004dd4:	4602      	mov	r2, r0
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	1ad3      	subs	r3, r2, r3
 8004dda:	2b64      	cmp	r3, #100	; 0x64
 8004ddc:	d901      	bls.n	8004de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e207      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004de2:	4b5b      	ldr	r3, [pc, #364]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d0f0      	beq.n	8004dd0 <HAL_RCC_OscConfig+0xc0>
 8004dee:	e014      	b.n	8004e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004df0:	f7fc fef8 	bl	8001be4 <HAL_GetTick>
 8004df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004df6:	e008      	b.n	8004e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004df8:	f7fc fef4 	bl	8001be4 <HAL_GetTick>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	693b      	ldr	r3, [r7, #16]
 8004e00:	1ad3      	subs	r3, r2, r3
 8004e02:	2b64      	cmp	r3, #100	; 0x64
 8004e04:	d901      	bls.n	8004e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e06:	2303      	movs	r3, #3
 8004e08:	e1f3      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e0a:	4b51      	ldr	r3, [pc, #324]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d1f0      	bne.n	8004df8 <HAL_RCC_OscConfig+0xe8>
 8004e16:	e000      	b.n	8004e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f003 0302 	and.w	r3, r3, #2
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d063      	beq.n	8004eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e26:	4b4a      	ldr	r3, [pc, #296]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 030c 	and.w	r3, r3, #12
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d00b      	beq.n	8004e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e32:	4b47      	ldr	r3, [pc, #284]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004e34:	689b      	ldr	r3, [r3, #8]
 8004e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e3a:	2b08      	cmp	r3, #8
 8004e3c:	d11c      	bne.n	8004e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e3e:	4b44      	ldr	r3, [pc, #272]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d116      	bne.n	8004e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e4a:	4b41      	ldr	r3, [pc, #260]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f003 0302 	and.w	r3, r3, #2
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d005      	beq.n	8004e62 <HAL_RCC_OscConfig+0x152>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b01      	cmp	r3, #1
 8004e5c:	d001      	beq.n	8004e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004e5e:	2301      	movs	r3, #1
 8004e60:	e1c7      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e62:	4b3b      	ldr	r3, [pc, #236]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	00db      	lsls	r3, r3, #3
 8004e70:	4937      	ldr	r1, [pc, #220]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004e72:	4313      	orrs	r3, r2
 8004e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004e76:	e03a      	b.n	8004eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	68db      	ldr	r3, [r3, #12]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d020      	beq.n	8004ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e80:	4b34      	ldr	r3, [pc, #208]	; (8004f54 <HAL_RCC_OscConfig+0x244>)
 8004e82:	2201      	movs	r2, #1
 8004e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e86:	f7fc fead 	bl	8001be4 <HAL_GetTick>
 8004e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e8c:	e008      	b.n	8004ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e8e:	f7fc fea9 	bl	8001be4 <HAL_GetTick>
 8004e92:	4602      	mov	r2, r0
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	1ad3      	subs	r3, r2, r3
 8004e98:	2b02      	cmp	r3, #2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e1a8      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea0:	4b2b      	ldr	r3, [pc, #172]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0f0      	beq.n	8004e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004eac:	4b28      	ldr	r3, [pc, #160]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	691b      	ldr	r3, [r3, #16]
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	4925      	ldr	r1, [pc, #148]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	4313      	orrs	r3, r2
 8004ebe:	600b      	str	r3, [r1, #0]
 8004ec0:	e015      	b.n	8004eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ec2:	4b24      	ldr	r3, [pc, #144]	; (8004f54 <HAL_RCC_OscConfig+0x244>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ec8:	f7fc fe8c 	bl	8001be4 <HAL_GetTick>
 8004ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ece:	e008      	b.n	8004ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ed0:	f7fc fe88 	bl	8001be4 <HAL_GetTick>
 8004ed4:	4602      	mov	r2, r0
 8004ed6:	693b      	ldr	r3, [r7, #16]
 8004ed8:	1ad3      	subs	r3, r2, r3
 8004eda:	2b02      	cmp	r3, #2
 8004edc:	d901      	bls.n	8004ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004ede:	2303      	movs	r3, #3
 8004ee0:	e187      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ee2:	4b1b      	ldr	r3, [pc, #108]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0302 	and.w	r3, r3, #2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d1f0      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	f003 0308 	and.w	r3, r3, #8
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d036      	beq.n	8004f68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d016      	beq.n	8004f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f02:	4b15      	ldr	r3, [pc, #84]	; (8004f58 <HAL_RCC_OscConfig+0x248>)
 8004f04:	2201      	movs	r2, #1
 8004f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f08:	f7fc fe6c 	bl	8001be4 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f10:	f7fc fe68 	bl	8001be4 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e167      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f22:	4b0b      	ldr	r3, [pc, #44]	; (8004f50 <HAL_RCC_OscConfig+0x240>)
 8004f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f26:	f003 0302 	and.w	r3, r3, #2
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d0f0      	beq.n	8004f10 <HAL_RCC_OscConfig+0x200>
 8004f2e:	e01b      	b.n	8004f68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f30:	4b09      	ldr	r3, [pc, #36]	; (8004f58 <HAL_RCC_OscConfig+0x248>)
 8004f32:	2200      	movs	r2, #0
 8004f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004f36:	f7fc fe55 	bl	8001be4 <HAL_GetTick>
 8004f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f3c:	e00e      	b.n	8004f5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f3e:	f7fc fe51 	bl	8001be4 <HAL_GetTick>
 8004f42:	4602      	mov	r2, r0
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	1ad3      	subs	r3, r2, r3
 8004f48:	2b02      	cmp	r3, #2
 8004f4a:	d907      	bls.n	8004f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004f4c:	2303      	movs	r3, #3
 8004f4e:	e150      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
 8004f50:	40023800 	.word	0x40023800
 8004f54:	42470000 	.word	0x42470000
 8004f58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004f5c:	4b88      	ldr	r3, [pc, #544]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8004f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f60:	f003 0302 	and.w	r3, r3, #2
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d1ea      	bne.n	8004f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f003 0304 	and.w	r3, r3, #4
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	f000 8097 	beq.w	80050a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f76:	2300      	movs	r3, #0
 8004f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004f7a:	4b81      	ldr	r3, [pc, #516]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8004f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d10f      	bne.n	8004fa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f86:	2300      	movs	r3, #0
 8004f88:	60bb      	str	r3, [r7, #8]
 8004f8a:	4b7d      	ldr	r3, [pc, #500]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	4a7c      	ldr	r2, [pc, #496]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8004f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f94:	6413      	str	r3, [r2, #64]	; 0x40
 8004f96:	4b7a      	ldr	r3, [pc, #488]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8004f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f9e:	60bb      	str	r3, [r7, #8]
 8004fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004fa2:	2301      	movs	r3, #1
 8004fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fa6:	4b77      	ldr	r3, [pc, #476]	; (8005184 <HAL_RCC_OscConfig+0x474>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d118      	bne.n	8004fe4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004fb2:	4b74      	ldr	r3, [pc, #464]	; (8005184 <HAL_RCC_OscConfig+0x474>)
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	4a73      	ldr	r2, [pc, #460]	; (8005184 <HAL_RCC_OscConfig+0x474>)
 8004fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fbe:	f7fc fe11 	bl	8001be4 <HAL_GetTick>
 8004fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fc4:	e008      	b.n	8004fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fc6:	f7fc fe0d 	bl	8001be4 <HAL_GetTick>
 8004fca:	4602      	mov	r2, r0
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	1ad3      	subs	r3, r2, r3
 8004fd0:	2b02      	cmp	r3, #2
 8004fd2:	d901      	bls.n	8004fd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004fd4:	2303      	movs	r3, #3
 8004fd6:	e10c      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004fd8:	4b6a      	ldr	r3, [pc, #424]	; (8005184 <HAL_RCC_OscConfig+0x474>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d0f0      	beq.n	8004fc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d106      	bne.n	8004ffa <HAL_RCC_OscConfig+0x2ea>
 8004fec:	4b64      	ldr	r3, [pc, #400]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8004fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ff0:	4a63      	ldr	r2, [pc, #396]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8004ff2:	f043 0301 	orr.w	r3, r3, #1
 8004ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8004ff8:	e01c      	b.n	8005034 <HAL_RCC_OscConfig+0x324>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	689b      	ldr	r3, [r3, #8]
 8004ffe:	2b05      	cmp	r3, #5
 8005000:	d10c      	bne.n	800501c <HAL_RCC_OscConfig+0x30c>
 8005002:	4b5f      	ldr	r3, [pc, #380]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8005004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005006:	4a5e      	ldr	r2, [pc, #376]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8005008:	f043 0304 	orr.w	r3, r3, #4
 800500c:	6713      	str	r3, [r2, #112]	; 0x70
 800500e:	4b5c      	ldr	r3, [pc, #368]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8005010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005012:	4a5b      	ldr	r2, [pc, #364]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8005014:	f043 0301 	orr.w	r3, r3, #1
 8005018:	6713      	str	r3, [r2, #112]	; 0x70
 800501a:	e00b      	b.n	8005034 <HAL_RCC_OscConfig+0x324>
 800501c:	4b58      	ldr	r3, [pc, #352]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 800501e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005020:	4a57      	ldr	r2, [pc, #348]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8005022:	f023 0301 	bic.w	r3, r3, #1
 8005026:	6713      	str	r3, [r2, #112]	; 0x70
 8005028:	4b55      	ldr	r3, [pc, #340]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 800502a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800502c:	4a54      	ldr	r2, [pc, #336]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 800502e:	f023 0304 	bic.w	r3, r3, #4
 8005032:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	2b00      	cmp	r3, #0
 800503a:	d015      	beq.n	8005068 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800503c:	f7fc fdd2 	bl	8001be4 <HAL_GetTick>
 8005040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005042:	e00a      	b.n	800505a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005044:	f7fc fdce 	bl	8001be4 <HAL_GetTick>
 8005048:	4602      	mov	r2, r0
 800504a:	693b      	ldr	r3, [r7, #16]
 800504c:	1ad3      	subs	r3, r2, r3
 800504e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005052:	4293      	cmp	r3, r2
 8005054:	d901      	bls.n	800505a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005056:	2303      	movs	r3, #3
 8005058:	e0cb      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800505a:	4b49      	ldr	r3, [pc, #292]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 800505c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800505e:	f003 0302 	and.w	r3, r3, #2
 8005062:	2b00      	cmp	r3, #0
 8005064:	d0ee      	beq.n	8005044 <HAL_RCC_OscConfig+0x334>
 8005066:	e014      	b.n	8005092 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005068:	f7fc fdbc 	bl	8001be4 <HAL_GetTick>
 800506c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800506e:	e00a      	b.n	8005086 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005070:	f7fc fdb8 	bl	8001be4 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	f241 3288 	movw	r2, #5000	; 0x1388
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005082:	2303      	movs	r3, #3
 8005084:	e0b5      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005086:	4b3e      	ldr	r3, [pc, #248]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8005088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1ee      	bne.n	8005070 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005092:	7dfb      	ldrb	r3, [r7, #23]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d105      	bne.n	80050a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005098:	4b39      	ldr	r3, [pc, #228]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 800509a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800509c:	4a38      	ldr	r2, [pc, #224]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 800509e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	f000 80a1 	beq.w	80051f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80050ae:	4b34      	ldr	r3, [pc, #208]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 80050b0:	689b      	ldr	r3, [r3, #8]
 80050b2:	f003 030c 	and.w	r3, r3, #12
 80050b6:	2b08      	cmp	r3, #8
 80050b8:	d05c      	beq.n	8005174 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	2b02      	cmp	r3, #2
 80050c0:	d141      	bne.n	8005146 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80050c2:	4b31      	ldr	r3, [pc, #196]	; (8005188 <HAL_RCC_OscConfig+0x478>)
 80050c4:	2200      	movs	r2, #0
 80050c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80050c8:	f7fc fd8c 	bl	8001be4 <HAL_GetTick>
 80050cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050ce:	e008      	b.n	80050e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80050d0:	f7fc fd88 	bl	8001be4 <HAL_GetTick>
 80050d4:	4602      	mov	r2, r0
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	1ad3      	subs	r3, r2, r3
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d901      	bls.n	80050e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80050de:	2303      	movs	r3, #3
 80050e0:	e087      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80050e2:	4b27      	ldr	r3, [pc, #156]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d1f0      	bne.n	80050d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	69da      	ldr	r2, [r3, #28]
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6a1b      	ldr	r3, [r3, #32]
 80050f6:	431a      	orrs	r2, r3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fc:	019b      	lsls	r3, r3, #6
 80050fe:	431a      	orrs	r2, r3
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005104:	085b      	lsrs	r3, r3, #1
 8005106:	3b01      	subs	r3, #1
 8005108:	041b      	lsls	r3, r3, #16
 800510a:	431a      	orrs	r2, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005110:	061b      	lsls	r3, r3, #24
 8005112:	491b      	ldr	r1, [pc, #108]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8005114:	4313      	orrs	r3, r2
 8005116:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005118:	4b1b      	ldr	r3, [pc, #108]	; (8005188 <HAL_RCC_OscConfig+0x478>)
 800511a:	2201      	movs	r2, #1
 800511c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800511e:	f7fc fd61 	bl	8001be4 <HAL_GetTick>
 8005122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005124:	e008      	b.n	8005138 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005126:	f7fc fd5d 	bl	8001be4 <HAL_GetTick>
 800512a:	4602      	mov	r2, r0
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	2b02      	cmp	r3, #2
 8005132:	d901      	bls.n	8005138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005134:	2303      	movs	r3, #3
 8005136:	e05c      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005138:	4b11      	ldr	r3, [pc, #68]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d0f0      	beq.n	8005126 <HAL_RCC_OscConfig+0x416>
 8005144:	e054      	b.n	80051f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005146:	4b10      	ldr	r3, [pc, #64]	; (8005188 <HAL_RCC_OscConfig+0x478>)
 8005148:	2200      	movs	r2, #0
 800514a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800514c:	f7fc fd4a 	bl	8001be4 <HAL_GetTick>
 8005150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005152:	e008      	b.n	8005166 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005154:	f7fc fd46 	bl	8001be4 <HAL_GetTick>
 8005158:	4602      	mov	r2, r0
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	1ad3      	subs	r3, r2, r3
 800515e:	2b02      	cmp	r3, #2
 8005160:	d901      	bls.n	8005166 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005162:	2303      	movs	r3, #3
 8005164:	e045      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005166:	4b06      	ldr	r3, [pc, #24]	; (8005180 <HAL_RCC_OscConfig+0x470>)
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800516e:	2b00      	cmp	r3, #0
 8005170:	d1f0      	bne.n	8005154 <HAL_RCC_OscConfig+0x444>
 8005172:	e03d      	b.n	80051f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	2b01      	cmp	r3, #1
 800517a:	d107      	bne.n	800518c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e038      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
 8005180:	40023800 	.word	0x40023800
 8005184:	40007000 	.word	0x40007000
 8005188:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800518c:	4b1b      	ldr	r3, [pc, #108]	; (80051fc <HAL_RCC_OscConfig+0x4ec>)
 800518e:	685b      	ldr	r3, [r3, #4]
 8005190:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	2b01      	cmp	r3, #1
 8005198:	d028      	beq.n	80051ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80051a4:	429a      	cmp	r2, r3
 80051a6:	d121      	bne.n	80051ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80051b2:	429a      	cmp	r2, r3
 80051b4:	d11a      	bne.n	80051ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80051bc:	4013      	ands	r3, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d111      	bne.n	80051ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	085b      	lsrs	r3, r3, #1
 80051d4:	3b01      	subs	r3, #1
 80051d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80051d8:	429a      	cmp	r2, r3
 80051da:	d107      	bne.n	80051ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80051e8:	429a      	cmp	r2, r3
 80051ea:	d001      	beq.n	80051f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80051ec:	2301      	movs	r3, #1
 80051ee:	e000      	b.n	80051f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80051f0:	2300      	movs	r3, #0
}
 80051f2:	4618      	mov	r0, r3
 80051f4:	3718      	adds	r7, #24
 80051f6:	46bd      	mov	sp, r7
 80051f8:	bd80      	pop	{r7, pc}
 80051fa:	bf00      	nop
 80051fc:	40023800 	.word	0x40023800

08005200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b084      	sub	sp, #16
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
 8005208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d101      	bne.n	8005214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e0cc      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005214:	4b68      	ldr	r3, [pc, #416]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0307 	and.w	r3, r3, #7
 800521c:	683a      	ldr	r2, [r7, #0]
 800521e:	429a      	cmp	r2, r3
 8005220:	d90c      	bls.n	800523c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005222:	4b65      	ldr	r3, [pc, #404]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005224:	683a      	ldr	r2, [r7, #0]
 8005226:	b2d2      	uxtb	r2, r2
 8005228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800522a:	4b63      	ldr	r3, [pc, #396]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f003 0307 	and.w	r3, r3, #7
 8005232:	683a      	ldr	r2, [r7, #0]
 8005234:	429a      	cmp	r2, r3
 8005236:	d001      	beq.n	800523c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005238:	2301      	movs	r3, #1
 800523a:	e0b8      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d020      	beq.n	800528a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d005      	beq.n	8005260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005254:	4b59      	ldr	r3, [pc, #356]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005256:	689b      	ldr	r3, [r3, #8]
 8005258:	4a58      	ldr	r2, [pc, #352]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 800525a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800525e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 0308 	and.w	r3, r3, #8
 8005268:	2b00      	cmp	r3, #0
 800526a:	d005      	beq.n	8005278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800526c:	4b53      	ldr	r3, [pc, #332]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	4a52      	ldr	r2, [pc, #328]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005278:	4b50      	ldr	r3, [pc, #320]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 800527a:	689b      	ldr	r3, [r3, #8]
 800527c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	494d      	ldr	r1, [pc, #308]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005286:	4313      	orrs	r3, r2
 8005288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f003 0301 	and.w	r3, r3, #1
 8005292:	2b00      	cmp	r3, #0
 8005294:	d044      	beq.n	8005320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2b01      	cmp	r3, #1
 800529c:	d107      	bne.n	80052ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800529e:	4b47      	ldr	r3, [pc, #284]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d119      	bne.n	80052de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052aa:	2301      	movs	r3, #1
 80052ac:	e07f      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	2b02      	cmp	r3, #2
 80052b4:	d003      	beq.n	80052be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80052ba:	2b03      	cmp	r3, #3
 80052bc:	d107      	bne.n	80052ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052be:	4b3f      	ldr	r3, [pc, #252]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d109      	bne.n	80052de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e06f      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052ce:	4b3b      	ldr	r3, [pc, #236]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f003 0302 	and.w	r3, r3, #2
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d101      	bne.n	80052de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80052da:	2301      	movs	r3, #1
 80052dc:	e067      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80052de:	4b37      	ldr	r3, [pc, #220]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	f023 0203 	bic.w	r2, r3, #3
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	685b      	ldr	r3, [r3, #4]
 80052ea:	4934      	ldr	r1, [pc, #208]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80052f0:	f7fc fc78 	bl	8001be4 <HAL_GetTick>
 80052f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052f6:	e00a      	b.n	800530e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052f8:	f7fc fc74 	bl	8001be4 <HAL_GetTick>
 80052fc:	4602      	mov	r2, r0
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	f241 3288 	movw	r2, #5000	; 0x1388
 8005306:	4293      	cmp	r3, r2
 8005308:	d901      	bls.n	800530e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800530a:	2303      	movs	r3, #3
 800530c:	e04f      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800530e:	4b2b      	ldr	r3, [pc, #172]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005310:	689b      	ldr	r3, [r3, #8]
 8005312:	f003 020c 	and.w	r2, r3, #12
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	685b      	ldr	r3, [r3, #4]
 800531a:	009b      	lsls	r3, r3, #2
 800531c:	429a      	cmp	r2, r3
 800531e:	d1eb      	bne.n	80052f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005320:	4b25      	ldr	r3, [pc, #148]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f003 0307 	and.w	r3, r3, #7
 8005328:	683a      	ldr	r2, [r7, #0]
 800532a:	429a      	cmp	r2, r3
 800532c:	d20c      	bcs.n	8005348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800532e:	4b22      	ldr	r3, [pc, #136]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005330:	683a      	ldr	r2, [r7, #0]
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005336:	4b20      	ldr	r3, [pc, #128]	; (80053b8 <HAL_RCC_ClockConfig+0x1b8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f003 0307 	and.w	r3, r3, #7
 800533e:	683a      	ldr	r2, [r7, #0]
 8005340:	429a      	cmp	r2, r3
 8005342:	d001      	beq.n	8005348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005344:	2301      	movs	r3, #1
 8005346:	e032      	b.n	80053ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 0304 	and.w	r3, r3, #4
 8005350:	2b00      	cmp	r3, #0
 8005352:	d008      	beq.n	8005366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005354:	4b19      	ldr	r3, [pc, #100]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005356:	689b      	ldr	r3, [r3, #8]
 8005358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	68db      	ldr	r3, [r3, #12]
 8005360:	4916      	ldr	r1, [pc, #88]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005362:	4313      	orrs	r3, r2
 8005364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 0308 	and.w	r3, r3, #8
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005372:	4b12      	ldr	r3, [pc, #72]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	00db      	lsls	r3, r3, #3
 8005380:	490e      	ldr	r1, [pc, #56]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 8005382:	4313      	orrs	r3, r2
 8005384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005386:	f000 f821 	bl	80053cc <HAL_RCC_GetSysClockFreq>
 800538a:	4602      	mov	r2, r0
 800538c:	4b0b      	ldr	r3, [pc, #44]	; (80053bc <HAL_RCC_ClockConfig+0x1bc>)
 800538e:	689b      	ldr	r3, [r3, #8]
 8005390:	091b      	lsrs	r3, r3, #4
 8005392:	f003 030f 	and.w	r3, r3, #15
 8005396:	490a      	ldr	r1, [pc, #40]	; (80053c0 <HAL_RCC_ClockConfig+0x1c0>)
 8005398:	5ccb      	ldrb	r3, [r1, r3]
 800539a:	fa22 f303 	lsr.w	r3, r2, r3
 800539e:	4a09      	ldr	r2, [pc, #36]	; (80053c4 <HAL_RCC_ClockConfig+0x1c4>)
 80053a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80053a2:	4b09      	ldr	r3, [pc, #36]	; (80053c8 <HAL_RCC_ClockConfig+0x1c8>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	4618      	mov	r0, r3
 80053a8:	f7fc fbd8 	bl	8001b5c <HAL_InitTick>

  return HAL_OK;
 80053ac:	2300      	movs	r3, #0
}
 80053ae:	4618      	mov	r0, r3
 80053b0:	3710      	adds	r7, #16
 80053b2:	46bd      	mov	sp, r7
 80053b4:	bd80      	pop	{r7, pc}
 80053b6:	bf00      	nop
 80053b8:	40023c00 	.word	0x40023c00
 80053bc:	40023800 	.word	0x40023800
 80053c0:	08008ab0 	.word	0x08008ab0
 80053c4:	20000018 	.word	0x20000018
 80053c8:	2000001c 	.word	0x2000001c

080053cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80053cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80053d0:	b094      	sub	sp, #80	; 0x50
 80053d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80053d4:	2300      	movs	r3, #0
 80053d6:	647b      	str	r3, [r7, #68]	; 0x44
 80053d8:	2300      	movs	r3, #0
 80053da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053dc:	2300      	movs	r3, #0
 80053de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80053e0:	2300      	movs	r3, #0
 80053e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80053e4:	4b79      	ldr	r3, [pc, #484]	; (80055cc <HAL_RCC_GetSysClockFreq+0x200>)
 80053e6:	689b      	ldr	r3, [r3, #8]
 80053e8:	f003 030c 	and.w	r3, r3, #12
 80053ec:	2b08      	cmp	r3, #8
 80053ee:	d00d      	beq.n	800540c <HAL_RCC_GetSysClockFreq+0x40>
 80053f0:	2b08      	cmp	r3, #8
 80053f2:	f200 80e1 	bhi.w	80055b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <HAL_RCC_GetSysClockFreq+0x34>
 80053fa:	2b04      	cmp	r3, #4
 80053fc:	d003      	beq.n	8005406 <HAL_RCC_GetSysClockFreq+0x3a>
 80053fe:	e0db      	b.n	80055b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005400:	4b73      	ldr	r3, [pc, #460]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8005402:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005404:	e0db      	b.n	80055be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005406:	4b73      	ldr	r3, [pc, #460]	; (80055d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8005408:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800540a:	e0d8      	b.n	80055be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800540c:	4b6f      	ldr	r3, [pc, #444]	; (80055cc <HAL_RCC_GetSysClockFreq+0x200>)
 800540e:	685b      	ldr	r3, [r3, #4]
 8005410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005414:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005416:	4b6d      	ldr	r3, [pc, #436]	; (80055cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005418:	685b      	ldr	r3, [r3, #4]
 800541a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800541e:	2b00      	cmp	r3, #0
 8005420:	d063      	beq.n	80054ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005422:	4b6a      	ldr	r3, [pc, #424]	; (80055cc <HAL_RCC_GetSysClockFreq+0x200>)
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	099b      	lsrs	r3, r3, #6
 8005428:	2200      	movs	r2, #0
 800542a:	63bb      	str	r3, [r7, #56]	; 0x38
 800542c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800542e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005434:	633b      	str	r3, [r7, #48]	; 0x30
 8005436:	2300      	movs	r3, #0
 8005438:	637b      	str	r3, [r7, #52]	; 0x34
 800543a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800543e:	4622      	mov	r2, r4
 8005440:	462b      	mov	r3, r5
 8005442:	f04f 0000 	mov.w	r0, #0
 8005446:	f04f 0100 	mov.w	r1, #0
 800544a:	0159      	lsls	r1, r3, #5
 800544c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005450:	0150      	lsls	r0, r2, #5
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	4621      	mov	r1, r4
 8005458:	1a51      	subs	r1, r2, r1
 800545a:	6139      	str	r1, [r7, #16]
 800545c:	4629      	mov	r1, r5
 800545e:	eb63 0301 	sbc.w	r3, r3, r1
 8005462:	617b      	str	r3, [r7, #20]
 8005464:	f04f 0200 	mov.w	r2, #0
 8005468:	f04f 0300 	mov.w	r3, #0
 800546c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005470:	4659      	mov	r1, fp
 8005472:	018b      	lsls	r3, r1, #6
 8005474:	4651      	mov	r1, sl
 8005476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800547a:	4651      	mov	r1, sl
 800547c:	018a      	lsls	r2, r1, #6
 800547e:	4651      	mov	r1, sl
 8005480:	ebb2 0801 	subs.w	r8, r2, r1
 8005484:	4659      	mov	r1, fp
 8005486:	eb63 0901 	sbc.w	r9, r3, r1
 800548a:	f04f 0200 	mov.w	r2, #0
 800548e:	f04f 0300 	mov.w	r3, #0
 8005492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800549a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800549e:	4690      	mov	r8, r2
 80054a0:	4699      	mov	r9, r3
 80054a2:	4623      	mov	r3, r4
 80054a4:	eb18 0303 	adds.w	r3, r8, r3
 80054a8:	60bb      	str	r3, [r7, #8]
 80054aa:	462b      	mov	r3, r5
 80054ac:	eb49 0303 	adc.w	r3, r9, r3
 80054b0:	60fb      	str	r3, [r7, #12]
 80054b2:	f04f 0200 	mov.w	r2, #0
 80054b6:	f04f 0300 	mov.w	r3, #0
 80054ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80054be:	4629      	mov	r1, r5
 80054c0:	024b      	lsls	r3, r1, #9
 80054c2:	4621      	mov	r1, r4
 80054c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80054c8:	4621      	mov	r1, r4
 80054ca:	024a      	lsls	r2, r1, #9
 80054cc:	4610      	mov	r0, r2
 80054ce:	4619      	mov	r1, r3
 80054d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d2:	2200      	movs	r2, #0
 80054d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80054d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80054dc:	f7fb faee 	bl	8000abc <__aeabi_uldivmod>
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4613      	mov	r3, r2
 80054e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054e8:	e058      	b.n	800559c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ea:	4b38      	ldr	r3, [pc, #224]	; (80055cc <HAL_RCC_GetSysClockFreq+0x200>)
 80054ec:	685b      	ldr	r3, [r3, #4]
 80054ee:	099b      	lsrs	r3, r3, #6
 80054f0:	2200      	movs	r2, #0
 80054f2:	4618      	mov	r0, r3
 80054f4:	4611      	mov	r1, r2
 80054f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80054fa:	623b      	str	r3, [r7, #32]
 80054fc:	2300      	movs	r3, #0
 80054fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005500:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005504:	4642      	mov	r2, r8
 8005506:	464b      	mov	r3, r9
 8005508:	f04f 0000 	mov.w	r0, #0
 800550c:	f04f 0100 	mov.w	r1, #0
 8005510:	0159      	lsls	r1, r3, #5
 8005512:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005516:	0150      	lsls	r0, r2, #5
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4641      	mov	r1, r8
 800551e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005522:	4649      	mov	r1, r9
 8005524:	eb63 0b01 	sbc.w	fp, r3, r1
 8005528:	f04f 0200 	mov.w	r2, #0
 800552c:	f04f 0300 	mov.w	r3, #0
 8005530:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005534:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005538:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800553c:	ebb2 040a 	subs.w	r4, r2, sl
 8005540:	eb63 050b 	sbc.w	r5, r3, fp
 8005544:	f04f 0200 	mov.w	r2, #0
 8005548:	f04f 0300 	mov.w	r3, #0
 800554c:	00eb      	lsls	r3, r5, #3
 800554e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005552:	00e2      	lsls	r2, r4, #3
 8005554:	4614      	mov	r4, r2
 8005556:	461d      	mov	r5, r3
 8005558:	4643      	mov	r3, r8
 800555a:	18e3      	adds	r3, r4, r3
 800555c:	603b      	str	r3, [r7, #0]
 800555e:	464b      	mov	r3, r9
 8005560:	eb45 0303 	adc.w	r3, r5, r3
 8005564:	607b      	str	r3, [r7, #4]
 8005566:	f04f 0200 	mov.w	r2, #0
 800556a:	f04f 0300 	mov.w	r3, #0
 800556e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005572:	4629      	mov	r1, r5
 8005574:	028b      	lsls	r3, r1, #10
 8005576:	4621      	mov	r1, r4
 8005578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800557c:	4621      	mov	r1, r4
 800557e:	028a      	lsls	r2, r1, #10
 8005580:	4610      	mov	r0, r2
 8005582:	4619      	mov	r1, r3
 8005584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005586:	2200      	movs	r2, #0
 8005588:	61bb      	str	r3, [r7, #24]
 800558a:	61fa      	str	r2, [r7, #28]
 800558c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005590:	f7fb fa94 	bl	8000abc <__aeabi_uldivmod>
 8005594:	4602      	mov	r2, r0
 8005596:	460b      	mov	r3, r1
 8005598:	4613      	mov	r3, r2
 800559a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800559c:	4b0b      	ldr	r3, [pc, #44]	; (80055cc <HAL_RCC_GetSysClockFreq+0x200>)
 800559e:	685b      	ldr	r3, [r3, #4]
 80055a0:	0c1b      	lsrs	r3, r3, #16
 80055a2:	f003 0303 	and.w	r3, r3, #3
 80055a6:	3301      	adds	r3, #1
 80055a8:	005b      	lsls	r3, r3, #1
 80055aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80055ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80055ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80055b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055b6:	e002      	b.n	80055be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80055b8:	4b05      	ldr	r3, [pc, #20]	; (80055d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80055ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80055bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80055be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3750      	adds	r7, #80	; 0x50
 80055c4:	46bd      	mov	sp, r7
 80055c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055ca:	bf00      	nop
 80055cc:	40023800 	.word	0x40023800
 80055d0:	00f42400 	.word	0x00f42400
 80055d4:	007a1200 	.word	0x007a1200

080055d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80055d8:	b480      	push	{r7}
 80055da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80055dc:	4b03      	ldr	r3, [pc, #12]	; (80055ec <HAL_RCC_GetHCLKFreq+0x14>)
 80055de:	681b      	ldr	r3, [r3, #0]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	20000018 	.word	0x20000018

080055f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80055f0:	b580      	push	{r7, lr}
 80055f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80055f4:	f7ff fff0 	bl	80055d8 <HAL_RCC_GetHCLKFreq>
 80055f8:	4602      	mov	r2, r0
 80055fa:	4b05      	ldr	r3, [pc, #20]	; (8005610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	0a9b      	lsrs	r3, r3, #10
 8005600:	f003 0307 	and.w	r3, r3, #7
 8005604:	4903      	ldr	r1, [pc, #12]	; (8005614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005606:	5ccb      	ldrb	r3, [r1, r3]
 8005608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800560c:	4618      	mov	r0, r3
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40023800 	.word	0x40023800
 8005614:	08008ac0 	.word	0x08008ac0

08005618 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005618:	b580      	push	{r7, lr}
 800561a:	b086      	sub	sp, #24
 800561c:	af00      	add	r7, sp, #0
 800561e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005620:	2300      	movs	r3, #0
 8005622:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005624:	2300      	movs	r3, #0
 8005626:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b00      	cmp	r3, #0
 8005632:	d105      	bne.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800563c:	2b00      	cmp	r3, #0
 800563e:	d035      	beq.n	80056ac <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005640:	4b62      	ldr	r3, [pc, #392]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005642:	2200      	movs	r2, #0
 8005644:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005646:	f7fc facd 	bl	8001be4 <HAL_GetTick>
 800564a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800564c:	e008      	b.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800564e:	f7fc fac9 	bl	8001be4 <HAL_GetTick>
 8005652:	4602      	mov	r2, r0
 8005654:	697b      	ldr	r3, [r7, #20]
 8005656:	1ad3      	subs	r3, r2, r3
 8005658:	2b02      	cmp	r3, #2
 800565a:	d901      	bls.n	8005660 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800565c:	2303      	movs	r3, #3
 800565e:	e0b0      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005660:	4b5b      	ldr	r3, [pc, #364]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005668:	2b00      	cmp	r3, #0
 800566a:	d1f0      	bne.n	800564e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	685b      	ldr	r3, [r3, #4]
 8005670:	019a      	lsls	r2, r3, #6
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	071b      	lsls	r3, r3, #28
 8005678:	4955      	ldr	r1, [pc, #340]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800567a:	4313      	orrs	r3, r2
 800567c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005680:	4b52      	ldr	r3, [pc, #328]	; (80057cc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005686:	f7fc faad 	bl	8001be4 <HAL_GetTick>
 800568a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800568c:	e008      	b.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800568e:	f7fc faa9 	bl	8001be4 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	1ad3      	subs	r3, r2, r3
 8005698:	2b02      	cmp	r3, #2
 800569a:	d901      	bls.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800569c:	2303      	movs	r3, #3
 800569e:	e090      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80056a0:	4b4b      	ldr	r3, [pc, #300]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d0f0      	beq.n	800568e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	f000 8083 	beq.w	80057c0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80056ba:	2300      	movs	r3, #0
 80056bc:	60fb      	str	r3, [r7, #12]
 80056be:	4b44      	ldr	r3, [pc, #272]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056c2:	4a43      	ldr	r2, [pc, #268]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056c8:	6413      	str	r3, [r2, #64]	; 0x40
 80056ca:	4b41      	ldr	r3, [pc, #260]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80056d2:	60fb      	str	r3, [r7, #12]
 80056d4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80056d6:	4b3f      	ldr	r3, [pc, #252]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a3e      	ldr	r2, [pc, #248]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056e0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80056e2:	f7fc fa7f 	bl	8001be4 <HAL_GetTick>
 80056e6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80056e8:	e008      	b.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80056ea:	f7fc fa7b 	bl	8001be4 <HAL_GetTick>
 80056ee:	4602      	mov	r2, r0
 80056f0:	697b      	ldr	r3, [r7, #20]
 80056f2:	1ad3      	subs	r3, r2, r3
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d901      	bls.n	80056fc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80056f8:	2303      	movs	r3, #3
 80056fa:	e062      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80056fc:	4b35      	ldr	r3, [pc, #212]	; (80057d4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005704:	2b00      	cmp	r3, #0
 8005706:	d0f0      	beq.n	80056ea <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005708:	4b31      	ldr	r3, [pc, #196]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800570a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800570c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005710:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d02f      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	429a      	cmp	r2, r3
 8005724:	d028      	beq.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005726:	4b2a      	ldr	r3, [pc, #168]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800572a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800572e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005730:	4b29      	ldr	r3, [pc, #164]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005732:	2201      	movs	r2, #1
 8005734:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005736:	4b28      	ldr	r3, [pc, #160]	; (80057d8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005738:	2200      	movs	r2, #0
 800573a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800573c:	4a24      	ldr	r2, [pc, #144]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005742:	4b23      	ldr	r3, [pc, #140]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005746:	f003 0301 	and.w	r3, r3, #1
 800574a:	2b01      	cmp	r3, #1
 800574c:	d114      	bne.n	8005778 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800574e:	f7fc fa49 	bl	8001be4 <HAL_GetTick>
 8005752:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005754:	e00a      	b.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005756:	f7fc fa45 	bl	8001be4 <HAL_GetTick>
 800575a:	4602      	mov	r2, r0
 800575c:	697b      	ldr	r3, [r7, #20]
 800575e:	1ad3      	subs	r3, r2, r3
 8005760:	f241 3288 	movw	r2, #5000	; 0x1388
 8005764:	4293      	cmp	r3, r2
 8005766:	d901      	bls.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005768:	2303      	movs	r3, #3
 800576a:	e02a      	b.n	80057c2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800576c:	4b18      	ldr	r3, [pc, #96]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800576e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005770:	f003 0302 	and.w	r3, r3, #2
 8005774:	2b00      	cmp	r3, #0
 8005776:	d0ee      	beq.n	8005756 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005780:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005784:	d10d      	bne.n	80057a2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005786:	4b12      	ldr	r3, [pc, #72]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005788:	689b      	ldr	r3, [r3, #8]
 800578a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005796:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800579a:	490d      	ldr	r1, [pc, #52]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800579c:	4313      	orrs	r3, r2
 800579e:	608b      	str	r3, [r1, #8]
 80057a0:	e005      	b.n	80057ae <HAL_RCCEx_PeriphCLKConfig+0x196>
 80057a2:	4b0b      	ldr	r3, [pc, #44]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057a4:	689b      	ldr	r3, [r3, #8]
 80057a6:	4a0a      	ldr	r2, [pc, #40]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057a8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80057ac:	6093      	str	r3, [r2, #8]
 80057ae:	4b08      	ldr	r3, [pc, #32]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057b0:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	68db      	ldr	r3, [r3, #12]
 80057b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057ba:	4905      	ldr	r1, [pc, #20]	; (80057d0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057bc:	4313      	orrs	r3, r2
 80057be:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3718      	adds	r7, #24
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	42470068 	.word	0x42470068
 80057d0:	40023800 	.word	0x40023800
 80057d4:	40007000 	.word	0x40007000
 80057d8:	42470e40 	.word	0x42470e40

080057dc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80057dc:	b480      	push	{r7}
 80057de:	b087      	sub	sp, #28
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 80057e4:	2300      	movs	r3, #0
 80057e6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 80057ec:	2300      	movs	r3, #0
 80057ee:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	2b01      	cmp	r3, #1
 80057f8:	d13e      	bne.n	8005878 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80057fa:	4b23      	ldr	r3, [pc, #140]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005802:	60fb      	str	r3, [r7, #12]
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d005      	beq.n	8005816 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b01      	cmp	r3, #1
 800580e:	d12f      	bne.n	8005870 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005810:	4b1e      	ldr	r3, [pc, #120]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005812:	617b      	str	r3, [r7, #20]
          break;
 8005814:	e02f      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005816:	4b1c      	ldr	r3, [pc, #112]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800581e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005822:	d108      	bne.n	8005836 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005824:	4b18      	ldr	r3, [pc, #96]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800582c:	4a18      	ldr	r2, [pc, #96]	; (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800582e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005832:	613b      	str	r3, [r7, #16]
 8005834:	e007      	b.n	8005846 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005836:	4b14      	ldr	r3, [pc, #80]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005838:	685b      	ldr	r3, [r3, #4]
 800583a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800583e:	4a15      	ldr	r2, [pc, #84]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005840:	fbb2 f3f3 	udiv	r3, r2, r3
 8005844:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005846:	4b10      	ldr	r3, [pc, #64]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005848:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800584c:	099b      	lsrs	r3, r3, #6
 800584e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	fb02 f303 	mul.w	r3, r2, r3
 8005858:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 800585a:	4b0b      	ldr	r3, [pc, #44]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800585c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005860:	0f1b      	lsrs	r3, r3, #28
 8005862:	f003 0307 	and.w	r3, r3, #7
 8005866:	68ba      	ldr	r2, [r7, #8]
 8005868:	fbb2 f3f3 	udiv	r3, r2, r3
 800586c:	617b      	str	r3, [r7, #20]
          break;
 800586e:	e002      	b.n	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8005870:	2300      	movs	r3, #0
 8005872:	617b      	str	r3, [r7, #20]
          break;
 8005874:	bf00      	nop
        }
      }
      break;
 8005876:	bf00      	nop
    }
  }
  return frequency;
 8005878:	697b      	ldr	r3, [r7, #20]
}
 800587a:	4618      	mov	r0, r3
 800587c:	371c      	adds	r7, #28
 800587e:	46bd      	mov	sp, r7
 8005880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005884:	4770      	bx	lr
 8005886:	bf00      	nop
 8005888:	40023800 	.word	0x40023800
 800588c:	00bb8000 	.word	0x00bb8000
 8005890:	007a1200 	.word	0x007a1200
 8005894:	00f42400 	.word	0x00f42400

08005898 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e07b      	b.n	80059a2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d108      	bne.n	80058c4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	685b      	ldr	r3, [r3, #4]
 80058b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80058ba:	d009      	beq.n	80058d0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2200      	movs	r2, #0
 80058c0:	61da      	str	r2, [r3, #28]
 80058c2:	e005      	b.n	80058d0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2200      	movs	r2, #0
 80058c8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80058dc:	b2db      	uxtb	r3, r3
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d106      	bne.n	80058f0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2200      	movs	r2, #0
 80058e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80058ea:	6878      	ldr	r0, [r7, #4]
 80058ec:	f7fc f804 	bl	80018f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	2202      	movs	r2, #2
 80058f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005906:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005918:	431a      	orrs	r2, r3
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	68db      	ldr	r3, [r3, #12]
 800591e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005922:	431a      	orrs	r2, r3
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	691b      	ldr	r3, [r3, #16]
 8005928:	f003 0302 	and.w	r3, r3, #2
 800592c:	431a      	orrs	r2, r3
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	f003 0301 	and.w	r3, r3, #1
 8005936:	431a      	orrs	r2, r3
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	699b      	ldr	r3, [r3, #24]
 800593c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005940:	431a      	orrs	r2, r3
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	69db      	ldr	r3, [r3, #28]
 8005946:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800594a:	431a      	orrs	r2, r3
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005954:	ea42 0103 	orr.w	r1, r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800595c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	430a      	orrs	r2, r1
 8005966:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	699b      	ldr	r3, [r3, #24]
 800596c:	0c1b      	lsrs	r3, r3, #16
 800596e:	f003 0104 	and.w	r1, r3, #4
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005976:	f003 0210 	and.w	r2, r3, #16
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	430a      	orrs	r2, r1
 8005980:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	69da      	ldr	r2, [r3, #28]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005990:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2200      	movs	r2, #0
 8005996:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2201      	movs	r2, #1
 800599c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3708      	adds	r7, #8
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bd80      	pop	{r7, pc}

080059aa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059aa:	b580      	push	{r7, lr}
 80059ac:	b082      	sub	sp, #8
 80059ae:	af00      	add	r7, sp, #0
 80059b0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d101      	bne.n	80059bc <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059b8:	2301      	movs	r3, #1
 80059ba:	e041      	b.n	8005a40 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d106      	bne.n	80059d6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	2200      	movs	r2, #0
 80059cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f7fb ffd9 	bl	8001988 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2202      	movs	r2, #2
 80059da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681a      	ldr	r2, [r3, #0]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	3304      	adds	r3, #4
 80059e6:	4619      	mov	r1, r3
 80059e8:	4610      	mov	r0, r2
 80059ea:	f000 f82d 	bl	8005a48 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2201      	movs	r2, #1
 80059f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2201      	movs	r2, #1
 80059fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2201      	movs	r2, #1
 8005a02:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2201      	movs	r2, #1
 8005a0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2201      	movs	r2, #1
 8005a12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	2201      	movs	r2, #1
 8005a22:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2201      	movs	r2, #1
 8005a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	2201      	movs	r2, #1
 8005a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3708      	adds	r7, #8
 8005a44:	46bd      	mov	sp, r7
 8005a46:	bd80      	pop	{r7, pc}

08005a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
 8005a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	4a40      	ldr	r2, [pc, #256]	; (8005b5c <TIM_Base_SetConfig+0x114>)
 8005a5c:	4293      	cmp	r3, r2
 8005a5e:	d013      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a66:	d00f      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	4a3d      	ldr	r2, [pc, #244]	; (8005b60 <TIM_Base_SetConfig+0x118>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d00b      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	4a3c      	ldr	r2, [pc, #240]	; (8005b64 <TIM_Base_SetConfig+0x11c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d007      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	4a3b      	ldr	r2, [pc, #236]	; (8005b68 <TIM_Base_SetConfig+0x120>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d003      	beq.n	8005a88 <TIM_Base_SetConfig+0x40>
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	4a3a      	ldr	r2, [pc, #232]	; (8005b6c <TIM_Base_SetConfig+0x124>)
 8005a84:	4293      	cmp	r3, r2
 8005a86:	d108      	bne.n	8005a9a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	685b      	ldr	r3, [r3, #4]
 8005a94:	68fa      	ldr	r2, [r7, #12]
 8005a96:	4313      	orrs	r3, r2
 8005a98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	4a2f      	ldr	r2, [pc, #188]	; (8005b5c <TIM_Base_SetConfig+0x114>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d02b      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005aa8:	d027      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	4a2c      	ldr	r2, [pc, #176]	; (8005b60 <TIM_Base_SetConfig+0x118>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d023      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	4a2b      	ldr	r2, [pc, #172]	; (8005b64 <TIM_Base_SetConfig+0x11c>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d01f      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	4a2a      	ldr	r2, [pc, #168]	; (8005b68 <TIM_Base_SetConfig+0x120>)
 8005abe:	4293      	cmp	r3, r2
 8005ac0:	d01b      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	4a29      	ldr	r2, [pc, #164]	; (8005b6c <TIM_Base_SetConfig+0x124>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d017      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	4a28      	ldr	r2, [pc, #160]	; (8005b70 <TIM_Base_SetConfig+0x128>)
 8005ace:	4293      	cmp	r3, r2
 8005ad0:	d013      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a27      	ldr	r2, [pc, #156]	; (8005b74 <TIM_Base_SetConfig+0x12c>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00f      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a26      	ldr	r2, [pc, #152]	; (8005b78 <TIM_Base_SetConfig+0x130>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d00b      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a25      	ldr	r2, [pc, #148]	; (8005b7c <TIM_Base_SetConfig+0x134>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d007      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a24      	ldr	r2, [pc, #144]	; (8005b80 <TIM_Base_SetConfig+0x138>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d003      	beq.n	8005afa <TIM_Base_SetConfig+0xb2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a23      	ldr	r2, [pc, #140]	; (8005b84 <TIM_Base_SetConfig+0x13c>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d108      	bne.n	8005b0c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b00:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	68fa      	ldr	r2, [r7, #12]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	695b      	ldr	r3, [r3, #20]
 8005b16:	4313      	orrs	r3, r2
 8005b18:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	68fa      	ldr	r2, [r7, #12]
 8005b1e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	689a      	ldr	r2, [r3, #8]
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005b28:	683b      	ldr	r3, [r7, #0]
 8005b2a:	681a      	ldr	r2, [r3, #0]
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	4a0a      	ldr	r2, [pc, #40]	; (8005b5c <TIM_Base_SetConfig+0x114>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d003      	beq.n	8005b40 <TIM_Base_SetConfig+0xf8>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	4a0c      	ldr	r2, [pc, #48]	; (8005b6c <TIM_Base_SetConfig+0x124>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d103      	bne.n	8005b48 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	691a      	ldr	r2, [r3, #16]
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	615a      	str	r2, [r3, #20]
}
 8005b4e:	bf00      	nop
 8005b50:	3714      	adds	r7, #20
 8005b52:	46bd      	mov	sp, r7
 8005b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b58:	4770      	bx	lr
 8005b5a:	bf00      	nop
 8005b5c:	40010000 	.word	0x40010000
 8005b60:	40000400 	.word	0x40000400
 8005b64:	40000800 	.word	0x40000800
 8005b68:	40000c00 	.word	0x40000c00
 8005b6c:	40010400 	.word	0x40010400
 8005b70:	40014000 	.word	0x40014000
 8005b74:	40014400 	.word	0x40014400
 8005b78:	40014800 	.word	0x40014800
 8005b7c:	40001800 	.word	0x40001800
 8005b80:	40001c00 	.word	0x40001c00
 8005b84:	40002000 	.word	0x40002000

08005b88 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005b88:	b084      	sub	sp, #16
 8005b8a:	b580      	push	{r7, lr}
 8005b8c:	b084      	sub	sp, #16
 8005b8e:	af00      	add	r7, sp, #0
 8005b90:	6078      	str	r0, [r7, #4]
 8005b92:	f107 001c 	add.w	r0, r7, #28
 8005b96:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b9c:	2b01      	cmp	r3, #1
 8005b9e:	d122      	bne.n	8005be6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ba4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	68db      	ldr	r3, [r3, #12]
 8005bb0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005bb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bb8:	687a      	ldr	r2, [r7, #4]
 8005bba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005bc8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bca:	2b01      	cmp	r3, #1
 8005bcc:	d105      	bne.n	8005bda <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	68db      	ldr	r3, [r3, #12]
 8005bd2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 f9c0 	bl	8005f60 <USB_CoreReset>
 8005be0:	4603      	mov	r3, r0
 8005be2:	73fb      	strb	r3, [r7, #15]
 8005be4:	e01a      	b.n	8005c1c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005bf2:	6878      	ldr	r0, [r7, #4]
 8005bf4:	f000 f9b4 	bl	8005f60 <USB_CoreReset>
 8005bf8:	4603      	mov	r3, r0
 8005bfa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005bfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d106      	bne.n	8005c10 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c06:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	639a      	str	r2, [r3, #56]	; 0x38
 8005c0e:	e005      	b.n	8005c1c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c1e:	2b01      	cmp	r3, #1
 8005c20:	d10b      	bne.n	8005c3a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	f043 0206 	orr.w	r2, r3, #6
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	f043 0220 	orr.w	r2, r3, #32
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005c3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c3c:	4618      	mov	r0, r3
 8005c3e:	3710      	adds	r7, #16
 8005c40:	46bd      	mov	sp, r7
 8005c42:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005c46:	b004      	add	sp, #16
 8005c48:	4770      	bx	lr

08005c4a <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c4a:	b480      	push	{r7}
 8005c4c:	b083      	sub	sp, #12
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f043 0201 	orr.w	r2, r3, #1
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c5e:	2300      	movs	r3, #0
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	370c      	adds	r7, #12
 8005c64:	46bd      	mov	sp, r7
 8005c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6a:	4770      	bx	lr

08005c6c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c6c:	b480      	push	{r7}
 8005c6e:	b083      	sub	sp, #12
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f023 0201 	bic.w	r2, r3, #1
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b084      	sub	sp, #16
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
 8005c96:	460b      	mov	r3, r1
 8005c98:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	68db      	ldr	r3, [r3, #12]
 8005ca2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005caa:	78fb      	ldrb	r3, [r7, #3]
 8005cac:	2b01      	cmp	r3, #1
 8005cae:	d115      	bne.n	8005cdc <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	68db      	ldr	r3, [r3, #12]
 8005cb4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cbc:	2001      	movs	r0, #1
 8005cbe:	f7fb ff9d 	bl	8001bfc <HAL_Delay>
      ms++;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 f93a 	bl	8005f42 <USB_GetMode>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d01e      	beq.n	8005d12 <USB_SetCurrentMode+0x84>
 8005cd4:	68fb      	ldr	r3, [r7, #12]
 8005cd6:	2b31      	cmp	r3, #49	; 0x31
 8005cd8:	d9f0      	bls.n	8005cbc <USB_SetCurrentMode+0x2e>
 8005cda:	e01a      	b.n	8005d12 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005cdc:	78fb      	ldrb	r3, [r7, #3]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d115      	bne.n	8005d0e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005cee:	2001      	movs	r0, #1
 8005cf0:	f7fb ff84 	bl	8001bfc <HAL_Delay>
      ms++;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	3301      	adds	r3, #1
 8005cf8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005cfa:	6878      	ldr	r0, [r7, #4]
 8005cfc:	f000 f921 	bl	8005f42 <USB_GetMode>
 8005d00:	4603      	mov	r3, r0
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d005      	beq.n	8005d12 <USB_SetCurrentMode+0x84>
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	2b31      	cmp	r3, #49	; 0x31
 8005d0a:	d9f0      	bls.n	8005cee <USB_SetCurrentMode+0x60>
 8005d0c:	e001      	b.n	8005d12 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e005      	b.n	8005d1e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	2b32      	cmp	r3, #50	; 0x32
 8005d16:	d101      	bne.n	8005d1c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e000      	b.n	8005d1e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
	...

08005d28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d28:	b480      	push	{r7}
 8005d2a:	b085      	sub	sp, #20
 8005d2c:	af00      	add	r7, sp, #0
 8005d2e:	6078      	str	r0, [r7, #4]
 8005d30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d32:	2300      	movs	r3, #0
 8005d34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	3301      	adds	r3, #1
 8005d3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	4a13      	ldr	r2, [pc, #76]	; (8005d8c <USB_FlushTxFifo+0x64>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d901      	bls.n	8005d48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d44:	2303      	movs	r3, #3
 8005d46:	e01b      	b.n	8005d80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	daf2      	bge.n	8005d36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d50:	2300      	movs	r3, #0
 8005d52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	019b      	lsls	r3, r3, #6
 8005d58:	f043 0220 	orr.w	r2, r3, #32
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	3301      	adds	r3, #1
 8005d64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	4a08      	ldr	r2, [pc, #32]	; (8005d8c <USB_FlushTxFifo+0x64>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d901      	bls.n	8005d72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005d6e:	2303      	movs	r3, #3
 8005d70:	e006      	b.n	8005d80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	691b      	ldr	r3, [r3, #16]
 8005d76:	f003 0320 	and.w	r3, r3, #32
 8005d7a:	2b20      	cmp	r3, #32
 8005d7c:	d0f0      	beq.n	8005d60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005d7e:	2300      	movs	r3, #0
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3714      	adds	r7, #20
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	00030d40 	.word	0x00030d40

08005d90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005d90:	b480      	push	{r7}
 8005d92:	b085      	sub	sp, #20
 8005d94:	af00      	add	r7, sp, #0
 8005d96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d98:	2300      	movs	r3, #0
 8005d9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	3301      	adds	r3, #1
 8005da0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	4a11      	ldr	r2, [pc, #68]	; (8005dec <USB_FlushRxFifo+0x5c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e018      	b.n	8005de0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	daf2      	bge.n	8005d9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2210      	movs	r2, #16
 8005dbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	3301      	adds	r3, #1
 8005dc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	4a08      	ldr	r2, [pc, #32]	; (8005dec <USB_FlushRxFifo+0x5c>)
 8005dca:	4293      	cmp	r3, r2
 8005dcc:	d901      	bls.n	8005dd2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005dce:	2303      	movs	r3, #3
 8005dd0:	e006      	b.n	8005de0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	691b      	ldr	r3, [r3, #16]
 8005dd6:	f003 0310 	and.w	r3, r3, #16
 8005dda:	2b10      	cmp	r3, #16
 8005ddc:	d0f0      	beq.n	8005dc0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	00030d40 	.word	0x00030d40

08005df0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b089      	sub	sp, #36	; 0x24
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	60f8      	str	r0, [r7, #12]
 8005df8:	60b9      	str	r1, [r7, #8]
 8005dfa:	4611      	mov	r1, r2
 8005dfc:	461a      	mov	r2, r3
 8005dfe:	460b      	mov	r3, r1
 8005e00:	71fb      	strb	r3, [r7, #7]
 8005e02:	4613      	mov	r3, r2
 8005e04:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005e0a:	68bb      	ldr	r3, [r7, #8]
 8005e0c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005e0e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d123      	bne.n	8005e5e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005e16:	88bb      	ldrh	r3, [r7, #4]
 8005e18:	3303      	adds	r3, #3
 8005e1a:	089b      	lsrs	r3, r3, #2
 8005e1c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005e1e:	2300      	movs	r3, #0
 8005e20:	61bb      	str	r3, [r7, #24]
 8005e22:	e018      	b.n	8005e56 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005e24:	79fb      	ldrb	r3, [r7, #7]
 8005e26:	031a      	lsls	r2, r3, #12
 8005e28:	697b      	ldr	r3, [r7, #20]
 8005e2a:	4413      	add	r3, r2
 8005e2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e30:	461a      	mov	r2, r3
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005e38:	69fb      	ldr	r3, [r7, #28]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e3e:	69fb      	ldr	r3, [r7, #28]
 8005e40:	3301      	adds	r3, #1
 8005e42:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	3301      	adds	r3, #1
 8005e48:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	3301      	adds	r3, #1
 8005e4e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005e50:	69bb      	ldr	r3, [r7, #24]
 8005e52:	3301      	adds	r3, #1
 8005e54:	61bb      	str	r3, [r7, #24]
 8005e56:	69ba      	ldr	r2, [r7, #24]
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d3e2      	bcc.n	8005e24 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005e5e:	2300      	movs	r3, #0
}
 8005e60:	4618      	mov	r0, r3
 8005e62:	3724      	adds	r7, #36	; 0x24
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b08b      	sub	sp, #44	; 0x2c
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	4613      	mov	r3, r2
 8005e78:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005e7e:	68bb      	ldr	r3, [r7, #8]
 8005e80:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005e82:	88fb      	ldrh	r3, [r7, #6]
 8005e84:	089b      	lsrs	r3, r3, #2
 8005e86:	b29b      	uxth	r3, r3
 8005e88:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005e8a:	88fb      	ldrh	r3, [r7, #6]
 8005e8c:	f003 0303 	and.w	r3, r3, #3
 8005e90:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005e92:	2300      	movs	r3, #0
 8005e94:	623b      	str	r3, [r7, #32]
 8005e96:	e014      	b.n	8005ec2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005e98:	69bb      	ldr	r3, [r7, #24]
 8005e9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005e9e:	681a      	ldr	r2, [r3, #0]
 8005ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea2:	601a      	str	r2, [r3, #0]
    pDest++;
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ea6:	3301      	adds	r3, #1
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eac:	3301      	adds	r3, #1
 8005eae:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eb8:	3301      	adds	r3, #1
 8005eba:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005ebc:	6a3b      	ldr	r3, [r7, #32]
 8005ebe:	3301      	adds	r3, #1
 8005ec0:	623b      	str	r3, [r7, #32]
 8005ec2:	6a3a      	ldr	r2, [r7, #32]
 8005ec4:	697b      	ldr	r3, [r7, #20]
 8005ec6:	429a      	cmp	r2, r3
 8005ec8:	d3e6      	bcc.n	8005e98 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005eca:	8bfb      	ldrh	r3, [r7, #30]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d01e      	beq.n	8005f0e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005ed4:	69bb      	ldr	r3, [r7, #24]
 8005ed6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005eda:	461a      	mov	r2, r3
 8005edc:	f107 0310 	add.w	r3, r7, #16
 8005ee0:	6812      	ldr	r2, [r2, #0]
 8005ee2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005ee4:	693a      	ldr	r2, [r7, #16]
 8005ee6:	6a3b      	ldr	r3, [r7, #32]
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	00db      	lsls	r3, r3, #3
 8005eec:	fa22 f303 	lsr.w	r3, r2, r3
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ef4:	701a      	strb	r2, [r3, #0]
      i++;
 8005ef6:	6a3b      	ldr	r3, [r7, #32]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	623b      	str	r3, [r7, #32]
      pDest++;
 8005efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005efe:	3301      	adds	r3, #1
 8005f00:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005f02:	8bfb      	ldrh	r3, [r7, #30]
 8005f04:	3b01      	subs	r3, #1
 8005f06:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005f08:	8bfb      	ldrh	r3, [r7, #30]
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d1ea      	bne.n	8005ee4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	372c      	adds	r7, #44	; 0x2c
 8005f14:	46bd      	mov	sp, r7
 8005f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1a:	4770      	bx	lr

08005f1c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	695b      	ldr	r3, [r3, #20]
 8005f28:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	699b      	ldr	r3, [r3, #24]
 8005f2e:	68fa      	ldr	r2, [r7, #12]
 8005f30:	4013      	ands	r3, r2
 8005f32:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005f34:	68fb      	ldr	r3, [r7, #12]
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3714      	adds	r7, #20
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f42:	b480      	push	{r7}
 8005f44:	b083      	sub	sp, #12
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	695b      	ldr	r3, [r3, #20]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	370c      	adds	r7, #12
 8005f56:	46bd      	mov	sp, r7
 8005f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5c:	4770      	bx	lr
	...

08005f60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005f60:	b480      	push	{r7}
 8005f62:	b085      	sub	sp, #20
 8005f64:	af00      	add	r7, sp, #0
 8005f66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	3301      	adds	r3, #1
 8005f70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4a13      	ldr	r2, [pc, #76]	; (8005fc4 <USB_CoreReset+0x64>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d901      	bls.n	8005f7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e01b      	b.n	8005fb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	691b      	ldr	r3, [r3, #16]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	daf2      	bge.n	8005f6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005f86:	2300      	movs	r3, #0
 8005f88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	691b      	ldr	r3, [r3, #16]
 8005f8e:	f043 0201 	orr.w	r2, r3, #1
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	3301      	adds	r3, #1
 8005f9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	4a09      	ldr	r2, [pc, #36]	; (8005fc4 <USB_CoreReset+0x64>)
 8005fa0:	4293      	cmp	r3, r2
 8005fa2:	d901      	bls.n	8005fa8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e006      	b.n	8005fb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	691b      	ldr	r3, [r3, #16]
 8005fac:	f003 0301 	and.w	r3, r3, #1
 8005fb0:	2b01      	cmp	r3, #1
 8005fb2:	d0f0      	beq.n	8005f96 <USB_CoreReset+0x36>

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3714      	adds	r7, #20
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc0:	4770      	bx	lr
 8005fc2:	bf00      	nop
 8005fc4:	00030d40 	.word	0x00030d40

08005fc8 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005fc8:	b084      	sub	sp, #16
 8005fca:	b580      	push	{r7, lr}
 8005fcc:	b086      	sub	sp, #24
 8005fce:	af00      	add	r7, sp, #0
 8005fd0:	6078      	str	r0, [r7, #4]
 8005fd2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005fd6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005fda:	2300      	movs	r3, #0
 8005fdc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005fe8:	461a      	mov	r2, r3
 8005fea:	2300      	movs	r3, #0
 8005fec:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff2:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ffe:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800600a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006016:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800601a:	2b00      	cmp	r3, #0
 800601c:	d018      	beq.n	8006050 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 800601e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006020:	2b01      	cmp	r3, #1
 8006022:	d10a      	bne.n	800603a <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	68fa      	ldr	r2, [r7, #12]
 800602e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006032:	f043 0304 	orr.w	r3, r3, #4
 8006036:	6013      	str	r3, [r2, #0]
 8006038:	e014      	b.n	8006064 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006048:	f023 0304 	bic.w	r3, r3, #4
 800604c:	6013      	str	r3, [r2, #0]
 800604e:	e009      	b.n	8006064 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68fa      	ldr	r2, [r7, #12]
 800605a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800605e:	f023 0304 	bic.w	r3, r3, #4
 8006062:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006064:	2110      	movs	r1, #16
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f7ff fe5e 	bl	8005d28 <USB_FlushTxFifo>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7ff fe8a 	bl	8005d90 <USB_FlushRxFifo>
 800607c:	4603      	mov	r3, r0
 800607e:	2b00      	cmp	r3, #0
 8006080:	d001      	beq.n	8006086 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006082:	2301      	movs	r3, #1
 8006084:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006086:	2300      	movs	r3, #0
 8006088:	613b      	str	r3, [r7, #16]
 800608a:	e015      	b.n	80060b8 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800608c:	693b      	ldr	r3, [r7, #16]
 800608e:	015a      	lsls	r2, r3, #5
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4413      	add	r3, r2
 8006094:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006098:	461a      	mov	r2, r3
 800609a:	f04f 33ff 	mov.w	r3, #4294967295
 800609e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80060a0:	693b      	ldr	r3, [r7, #16]
 80060a2:	015a      	lsls	r2, r3, #5
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	4413      	add	r3, r2
 80060a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80060ac:	461a      	mov	r2, r3
 80060ae:	2300      	movs	r3, #0
 80060b0:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	3301      	adds	r3, #1
 80060b6:	613b      	str	r3, [r7, #16]
 80060b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	429a      	cmp	r2, r3
 80060be:	d3e5      	bcc.n	800608c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	2200      	movs	r2, #0
 80060c4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f04f 32ff 	mov.w	r2, #4294967295
 80060cc:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00b      	beq.n	80060f2 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060e0:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	4a13      	ldr	r2, [pc, #76]	; (8006134 <USB_HostInit+0x16c>)
 80060e6:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	4a13      	ldr	r2, [pc, #76]	; (8006138 <USB_HostInit+0x170>)
 80060ec:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80060f0:	e009      	b.n	8006106 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2280      	movs	r2, #128	; 0x80
 80060f6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	4a10      	ldr	r2, [pc, #64]	; (800613c <USB_HostInit+0x174>)
 80060fc:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	4a0f      	ldr	r2, [pc, #60]	; (8006140 <USB_HostInit+0x178>)
 8006102:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006106:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006108:	2b00      	cmp	r3, #0
 800610a:	d105      	bne.n	8006118 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	699b      	ldr	r3, [r3, #24]
 8006110:	f043 0210 	orr.w	r2, r3, #16
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	699a      	ldr	r2, [r3, #24]
 800611c:	4b09      	ldr	r3, [pc, #36]	; (8006144 <USB_HostInit+0x17c>)
 800611e:	4313      	orrs	r3, r2
 8006120:	687a      	ldr	r2, [r7, #4]
 8006122:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006124:	7dfb      	ldrb	r3, [r7, #23]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3718      	adds	r7, #24
 800612a:	46bd      	mov	sp, r7
 800612c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006130:	b004      	add	sp, #16
 8006132:	4770      	bx	lr
 8006134:	01000200 	.word	0x01000200
 8006138:	00e00300 	.word	0x00e00300
 800613c:	00600080 	.word	0x00600080
 8006140:	004000e0 	.word	0x004000e0
 8006144:	a3200008 	.word	0xa3200008

08006148 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006148:	b480      	push	{r7}
 800614a:	b085      	sub	sp, #20
 800614c:	af00      	add	r7, sp, #0
 800614e:	6078      	str	r0, [r7, #4]
 8006150:	460b      	mov	r3, r1
 8006152:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	68fa      	ldr	r2, [r7, #12]
 8006162:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	f003 0303 	and.w	r3, r3, #3
 800617a:	68f9      	ldr	r1, [r7, #12]
 800617c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006180:	4313      	orrs	r3, r2
 8006182:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006184:	78fb      	ldrb	r3, [r7, #3]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d107      	bne.n	800619a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006190:	461a      	mov	r2, r3
 8006192:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006196:	6053      	str	r3, [r2, #4]
 8006198:	e009      	b.n	80061ae <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800619a:	78fb      	ldrb	r3, [r7, #3]
 800619c:	2b02      	cmp	r3, #2
 800619e:	d106      	bne.n	80061ae <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80061a6:	461a      	mov	r2, r3
 80061a8:	f241 7370 	movw	r3, #6000	; 0x1770
 80061ac:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 80061ae:	2300      	movs	r3, #0
}
 80061b0:	4618      	mov	r0, r3
 80061b2:	3714      	adds	r7, #20
 80061b4:	46bd      	mov	sp, r7
 80061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061ba:	4770      	bx	lr

080061bc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80061bc:	b480      	push	{r7}
 80061be:	b085      	sub	sp, #20
 80061c0:	af00      	add	r7, sp, #0
 80061c2:	6078      	str	r0, [r7, #4]
 80061c4:	460b      	mov	r3, r1
 80061c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80061da:	68bb      	ldr	r3, [r7, #8]
 80061dc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80061e0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d109      	bne.n	8006200 <USB_DriveVbus+0x44>
 80061ec:	78fb      	ldrb	r3, [r7, #3]
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d106      	bne.n	8006200 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80061f2:	68bb      	ldr	r3, [r7, #8]
 80061f4:	68fa      	ldr	r2, [r7, #12]
 80061f6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80061fa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80061fe:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620a:	d109      	bne.n	8006220 <USB_DriveVbus+0x64>
 800620c:	78fb      	ldrb	r3, [r7, #3]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d106      	bne.n	8006220 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006212:	68bb      	ldr	r3, [r7, #8]
 8006214:	68fa      	ldr	r2, [r7, #12]
 8006216:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800621a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800621e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006220:	2300      	movs	r3, #0
}
 8006222:	4618      	mov	r0, r3
 8006224:	3714      	adds	r7, #20
 8006226:	46bd      	mov	sp, r7
 8006228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622c:	4770      	bx	lr

0800622e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800622e:	b480      	push	{r7}
 8006230:	b085      	sub	sp, #20
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800623a:	2300      	movs	r3, #0
 800623c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006248:	68bb      	ldr	r3, [r7, #8]
 800624a:	0c5b      	lsrs	r3, r3, #17
 800624c:	f003 0303 	and.w	r3, r3, #3
}
 8006250:	4618      	mov	r0, r3
 8006252:	3714      	adds	r7, #20
 8006254:	46bd      	mov	sp, r7
 8006256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625a:	4770      	bx	lr

0800625c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800625c:	b480      	push	{r7}
 800625e:	b085      	sub	sp, #20
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800626e:	689b      	ldr	r3, [r3, #8]
 8006270:	b29b      	uxth	r3, r3
}
 8006272:	4618      	mov	r0, r3
 8006274:	3714      	adds	r7, #20
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
	...

08006280 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b088      	sub	sp, #32
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	4608      	mov	r0, r1
 800628a:	4611      	mov	r1, r2
 800628c:	461a      	mov	r2, r3
 800628e:	4603      	mov	r3, r0
 8006290:	70fb      	strb	r3, [r7, #3]
 8006292:	460b      	mov	r3, r1
 8006294:	70bb      	strb	r3, [r7, #2]
 8006296:	4613      	mov	r3, r2
 8006298:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800629a:	2300      	movs	r3, #0
 800629c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80062a2:	78fb      	ldrb	r3, [r7, #3]
 80062a4:	015a      	lsls	r2, r3, #5
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	4413      	add	r3, r2
 80062aa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062ae:	461a      	mov	r2, r3
 80062b0:	f04f 33ff 	mov.w	r3, #4294967295
 80062b4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80062b6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80062ba:	2b03      	cmp	r3, #3
 80062bc:	d87e      	bhi.n	80063bc <USB_HC_Init+0x13c>
 80062be:	a201      	add	r2, pc, #4	; (adr r2, 80062c4 <USB_HC_Init+0x44>)
 80062c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062c4:	080062d5 	.word	0x080062d5
 80062c8:	0800637f 	.word	0x0800637f
 80062cc:	080062d5 	.word	0x080062d5
 80062d0:	08006341 	.word	0x08006341
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80062d4:	78fb      	ldrb	r3, [r7, #3]
 80062d6:	015a      	lsls	r2, r3, #5
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4413      	add	r3, r2
 80062dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062e0:	461a      	mov	r2, r3
 80062e2:	f240 439d 	movw	r3, #1181	; 0x49d
 80062e6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80062e8:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	da10      	bge.n	8006312 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80062f0:	78fb      	ldrb	r3, [r7, #3]
 80062f2:	015a      	lsls	r2, r3, #5
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	4413      	add	r3, r2
 80062f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80062fc:	68db      	ldr	r3, [r3, #12]
 80062fe:	78fa      	ldrb	r2, [r7, #3]
 8006300:	0151      	lsls	r1, r2, #5
 8006302:	693a      	ldr	r2, [r7, #16]
 8006304:	440a      	add	r2, r1
 8006306:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800630a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800630e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006310:	e057      	b.n	80063c2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800631a:	2b00      	cmp	r3, #0
 800631c:	d051      	beq.n	80063c2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800631e:	78fb      	ldrb	r3, [r7, #3]
 8006320:	015a      	lsls	r2, r3, #5
 8006322:	693b      	ldr	r3, [r7, #16]
 8006324:	4413      	add	r3, r2
 8006326:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	78fa      	ldrb	r2, [r7, #3]
 800632e:	0151      	lsls	r1, r2, #5
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	440a      	add	r2, r1
 8006334:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006338:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800633c:	60d3      	str	r3, [r2, #12]
      break;
 800633e:	e040      	b.n	80063c2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006340:	78fb      	ldrb	r3, [r7, #3]
 8006342:	015a      	lsls	r2, r3, #5
 8006344:	693b      	ldr	r3, [r7, #16]
 8006346:	4413      	add	r3, r2
 8006348:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800634c:	461a      	mov	r2, r3
 800634e:	f240 639d 	movw	r3, #1693	; 0x69d
 8006352:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006354:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006358:	2b00      	cmp	r3, #0
 800635a:	da34      	bge.n	80063c6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800635c:	78fb      	ldrb	r3, [r7, #3]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	4413      	add	r3, r2
 8006364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006368:	68db      	ldr	r3, [r3, #12]
 800636a:	78fa      	ldrb	r2, [r7, #3]
 800636c:	0151      	lsls	r1, r2, #5
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	440a      	add	r2, r1
 8006372:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006376:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800637a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800637c:	e023      	b.n	80063c6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800637e:	78fb      	ldrb	r3, [r7, #3]
 8006380:	015a      	lsls	r2, r3, #5
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	4413      	add	r3, r2
 8006386:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800638a:	461a      	mov	r2, r3
 800638c:	f240 2325 	movw	r3, #549	; 0x225
 8006390:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006392:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006396:	2b00      	cmp	r3, #0
 8006398:	da17      	bge.n	80063ca <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800639a:	78fb      	ldrb	r3, [r7, #3]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	693b      	ldr	r3, [r7, #16]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	78fa      	ldrb	r2, [r7, #3]
 80063aa:	0151      	lsls	r1, r2, #5
 80063ac:	693a      	ldr	r2, [r7, #16]
 80063ae:	440a      	add	r2, r1
 80063b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063b4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80063b8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80063ba:	e006      	b.n	80063ca <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80063bc:	2301      	movs	r3, #1
 80063be:	77fb      	strb	r3, [r7, #31]
      break;
 80063c0:	e004      	b.n	80063cc <USB_HC_Init+0x14c>
      break;
 80063c2:	bf00      	nop
 80063c4:	e002      	b.n	80063cc <USB_HC_Init+0x14c>
      break;
 80063c6:	bf00      	nop
 80063c8:	e000      	b.n	80063cc <USB_HC_Init+0x14c>
      break;
 80063ca:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80063cc:	78fb      	ldrb	r3, [r7, #3]
 80063ce:	015a      	lsls	r2, r3, #5
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	4413      	add	r3, r2
 80063d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80063d8:	68db      	ldr	r3, [r3, #12]
 80063da:	78fa      	ldrb	r2, [r7, #3]
 80063dc:	0151      	lsls	r1, r2, #5
 80063de:	693a      	ldr	r2, [r7, #16]
 80063e0:	440a      	add	r2, r1
 80063e2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80063e6:	f043 0302 	orr.w	r3, r3, #2
 80063ea:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80063f2:	699a      	ldr	r2, [r3, #24]
 80063f4:	78fb      	ldrb	r3, [r7, #3]
 80063f6:	f003 030f 	and.w	r3, r3, #15
 80063fa:	2101      	movs	r1, #1
 80063fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006400:	6939      	ldr	r1, [r7, #16]
 8006402:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006406:	4313      	orrs	r3, r2
 8006408:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	699b      	ldr	r3, [r3, #24]
 800640e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006416:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800641a:	2b00      	cmp	r3, #0
 800641c:	da03      	bge.n	8006426 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800641e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006422:	61bb      	str	r3, [r7, #24]
 8006424:	e001      	b.n	800642a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006426:	2300      	movs	r3, #0
 8006428:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff feff 	bl	800622e <USB_GetHostSpeed>
 8006430:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006432:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006436:	2b02      	cmp	r3, #2
 8006438:	d106      	bne.n	8006448 <USB_HC_Init+0x1c8>
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	2b02      	cmp	r3, #2
 800643e:	d003      	beq.n	8006448 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	e001      	b.n	800644c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006448:	2300      	movs	r3, #0
 800644a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800644c:	787b      	ldrb	r3, [r7, #1]
 800644e:	059b      	lsls	r3, r3, #22
 8006450:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006454:	78bb      	ldrb	r3, [r7, #2]
 8006456:	02db      	lsls	r3, r3, #11
 8006458:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800645c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800645e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006462:	049b      	lsls	r3, r3, #18
 8006464:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006468:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800646a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800646c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006470:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006472:	69bb      	ldr	r3, [r7, #24]
 8006474:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006476:	78fb      	ldrb	r3, [r7, #3]
 8006478:	0159      	lsls	r1, r3, #5
 800647a:	693b      	ldr	r3, [r7, #16]
 800647c:	440b      	add	r3, r1
 800647e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006482:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006488:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800648a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800648e:	2b03      	cmp	r3, #3
 8006490:	d003      	beq.n	800649a <USB_HC_Init+0x21a>
 8006492:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006496:	2b01      	cmp	r3, #1
 8006498:	d10f      	bne.n	80064ba <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	78fa      	ldrb	r2, [r7, #3]
 80064aa:	0151      	lsls	r1, r2, #5
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	440a      	add	r2, r1
 80064b0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80064b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80064b8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80064ba:	7ffb      	ldrb	r3, [r7, #31]
}
 80064bc:	4618      	mov	r0, r3
 80064be:	3720      	adds	r7, #32
 80064c0:	46bd      	mov	sp, r7
 80064c2:	bd80      	pop	{r7, pc}

080064c4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80064c4:	b580      	push	{r7, lr}
 80064c6:	b08c      	sub	sp, #48	; 0x30
 80064c8:	af02      	add	r7, sp, #8
 80064ca:	60f8      	str	r0, [r7, #12]
 80064cc:	60b9      	str	r1, [r7, #8]
 80064ce:	4613      	mov	r3, r2
 80064d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	785b      	ldrb	r3, [r3, #1]
 80064da:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 80064dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80064e0:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d02d      	beq.n	800654a <USB_HC_StartXfer+0x86>
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	791b      	ldrb	r3, [r3, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d129      	bne.n	800654a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 80064f6:	79fb      	ldrb	r3, [r7, #7]
 80064f8:	2b01      	cmp	r3, #1
 80064fa:	d117      	bne.n	800652c <USB_HC_StartXfer+0x68>
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	79db      	ldrb	r3, [r3, #7]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <USB_HC_StartXfer+0x48>
 8006504:	68bb      	ldr	r3, [r7, #8]
 8006506:	79db      	ldrb	r3, [r3, #7]
 8006508:	2b02      	cmp	r3, #2
 800650a:	d10f      	bne.n	800652c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	6a3b      	ldr	r3, [r7, #32]
 8006512:	4413      	add	r3, r2
 8006514:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006518:	68db      	ldr	r3, [r3, #12]
 800651a:	69fa      	ldr	r2, [r7, #28]
 800651c:	0151      	lsls	r1, r2, #5
 800651e:	6a3a      	ldr	r2, [r7, #32]
 8006520:	440a      	add	r2, r1
 8006522:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006526:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800652a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 800652c:	79fb      	ldrb	r3, [r7, #7]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d10b      	bne.n	800654a <USB_HC_StartXfer+0x86>
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	795b      	ldrb	r3, [r3, #5]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d107      	bne.n	800654a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	785b      	ldrb	r3, [r3, #1]
 800653e:	4619      	mov	r1, r3
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 fa0f 	bl	8006964 <USB_DoPing>
      return HAL_OK;
 8006546:	2300      	movs	r3, #0
 8006548:	e0f8      	b.n	800673c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	695b      	ldr	r3, [r3, #20]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d018      	beq.n	8006584 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006552:	68bb      	ldr	r3, [r7, #8]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	8912      	ldrh	r2, [r2, #8]
 800655a:	4413      	add	r3, r2
 800655c:	3b01      	subs	r3, #1
 800655e:	68ba      	ldr	r2, [r7, #8]
 8006560:	8912      	ldrh	r2, [r2, #8]
 8006562:	fbb3 f3f2 	udiv	r3, r3, r2
 8006566:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006568:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800656a:	8b7b      	ldrh	r3, [r7, #26]
 800656c:	429a      	cmp	r2, r3
 800656e:	d90b      	bls.n	8006588 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006570:	8b7b      	ldrh	r3, [r7, #26]
 8006572:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006574:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006576:	68ba      	ldr	r2, [r7, #8]
 8006578:	8912      	ldrh	r2, [r2, #8]
 800657a:	fb03 f202 	mul.w	r2, r3, r2
 800657e:	68bb      	ldr	r3, [r7, #8]
 8006580:	611a      	str	r2, [r3, #16]
 8006582:	e001      	b.n	8006588 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006584:	2301      	movs	r3, #1
 8006586:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	78db      	ldrb	r3, [r3, #3]
 800658c:	2b00      	cmp	r3, #0
 800658e:	d007      	beq.n	80065a0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006590:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	8912      	ldrh	r2, [r2, #8]
 8006596:	fb03 f202 	mul.w	r2, r3, r2
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	611a      	str	r2, [r3, #16]
 800659e:	e003      	b.n	80065a8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 80065a0:	68bb      	ldr	r3, [r7, #8]
 80065a2:	695a      	ldr	r2, [r3, #20]
 80065a4:	68bb      	ldr	r3, [r7, #8]
 80065a6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065a8:	68bb      	ldr	r3, [r7, #8]
 80065aa:	691b      	ldr	r3, [r3, #16]
 80065ac:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80065b2:	04d9      	lsls	r1, r3, #19
 80065b4:	4b63      	ldr	r3, [pc, #396]	; (8006744 <USB_HC_StartXfer+0x280>)
 80065b6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065b8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80065ba:	68bb      	ldr	r3, [r7, #8]
 80065bc:	7a9b      	ldrb	r3, [r3, #10]
 80065be:	075b      	lsls	r3, r3, #29
 80065c0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065c4:	69f9      	ldr	r1, [r7, #28]
 80065c6:	0148      	lsls	r0, r1, #5
 80065c8:	6a39      	ldr	r1, [r7, #32]
 80065ca:	4401      	add	r1, r0
 80065cc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80065d0:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80065d2:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80065d4:	79fb      	ldrb	r3, [r7, #7]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d009      	beq.n	80065ee <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 80065da:	68bb      	ldr	r3, [r7, #8]
 80065dc:	68d9      	ldr	r1, [r3, #12]
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	015a      	lsls	r2, r3, #5
 80065e2:	6a3b      	ldr	r3, [r7, #32]
 80065e4:	4413      	add	r3, r2
 80065e6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80065ea:	460a      	mov	r2, r1
 80065ec:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 80065ee:	6a3b      	ldr	r3, [r7, #32]
 80065f0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065f4:	689b      	ldr	r3, [r3, #8]
 80065f6:	f003 0301 	and.w	r3, r3, #1
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	bf0c      	ite	eq
 80065fe:	2301      	moveq	r3, #1
 8006600:	2300      	movne	r3, #0
 8006602:	b2db      	uxtb	r3, r3
 8006604:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006606:	69fb      	ldr	r3, [r7, #28]
 8006608:	015a      	lsls	r2, r3, #5
 800660a:	6a3b      	ldr	r3, [r7, #32]
 800660c:	4413      	add	r3, r2
 800660e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	0151      	lsls	r1, r2, #5
 8006618:	6a3a      	ldr	r2, [r7, #32]
 800661a:	440a      	add	r2, r1
 800661c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006620:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006624:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006626:	69fb      	ldr	r3, [r7, #28]
 8006628:	015a      	lsls	r2, r3, #5
 800662a:	6a3b      	ldr	r3, [r7, #32]
 800662c:	4413      	add	r3, r2
 800662e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	7e7b      	ldrb	r3, [r7, #25]
 8006636:	075b      	lsls	r3, r3, #29
 8006638:	69f9      	ldr	r1, [r7, #28]
 800663a:	0148      	lsls	r0, r1, #5
 800663c:	6a39      	ldr	r1, [r7, #32]
 800663e:	4401      	add	r1, r0
 8006640:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006644:	4313      	orrs	r3, r2
 8006646:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006648:	69fb      	ldr	r3, [r7, #28]
 800664a:	015a      	lsls	r2, r3, #5
 800664c:	6a3b      	ldr	r3, [r7, #32]
 800664e:	4413      	add	r3, r2
 8006650:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006658:	693b      	ldr	r3, [r7, #16]
 800665a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800665e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006660:	68bb      	ldr	r3, [r7, #8]
 8006662:	78db      	ldrb	r3, [r3, #3]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d004      	beq.n	8006672 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006668:	693b      	ldr	r3, [r7, #16]
 800666a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800666e:	613b      	str	r3, [r7, #16]
 8006670:	e003      	b.n	800667a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006678:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800667a:	693b      	ldr	r3, [r7, #16]
 800667c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006680:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006682:	69fb      	ldr	r3, [r7, #28]
 8006684:	015a      	lsls	r2, r3, #5
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	4413      	add	r3, r2
 800668a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800668e:	461a      	mov	r2, r3
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006694:	79fb      	ldrb	r3, [r7, #7]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d001      	beq.n	800669e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 800669a:	2300      	movs	r3, #0
 800669c:	e04e      	b.n	800673c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	78db      	ldrb	r3, [r3, #3]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d149      	bne.n	800673a <USB_HC_StartXfer+0x276>
 80066a6:	68bb      	ldr	r3, [r7, #8]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d045      	beq.n	800673a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	79db      	ldrb	r3, [r3, #7]
 80066b2:	2b03      	cmp	r3, #3
 80066b4:	d830      	bhi.n	8006718 <USB_HC_StartXfer+0x254>
 80066b6:	a201      	add	r2, pc, #4	; (adr r2, 80066bc <USB_HC_StartXfer+0x1f8>)
 80066b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066bc:	080066cd 	.word	0x080066cd
 80066c0:	080066f1 	.word	0x080066f1
 80066c4:	080066cd 	.word	0x080066cd
 80066c8:	080066f1 	.word	0x080066f1
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	695b      	ldr	r3, [r3, #20]
 80066d0:	3303      	adds	r3, #3
 80066d2:	089b      	lsrs	r3, r3, #2
 80066d4:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80066d6:	8afa      	ldrh	r2, [r7, #22]
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066dc:	b29b      	uxth	r3, r3
 80066de:	429a      	cmp	r2, r3
 80066e0:	d91c      	bls.n	800671c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	699b      	ldr	r3, [r3, #24]
 80066e6:	f043 0220 	orr.w	r2, r3, #32
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	619a      	str	r2, [r3, #24]
        }
        break;
 80066ee:	e015      	b.n	800671c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	695b      	ldr	r3, [r3, #20]
 80066f4:	3303      	adds	r3, #3
 80066f6:	089b      	lsrs	r3, r3, #2
 80066f8:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80066fa:	8afa      	ldrh	r2, [r7, #22]
 80066fc:	6a3b      	ldr	r3, [r7, #32]
 80066fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006702:	691b      	ldr	r3, [r3, #16]
 8006704:	b29b      	uxth	r3, r3
 8006706:	429a      	cmp	r2, r3
 8006708:	d90a      	bls.n	8006720 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	699b      	ldr	r3, [r3, #24]
 800670e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	619a      	str	r2, [r3, #24]
        }
        break;
 8006716:	e003      	b.n	8006720 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006718:	bf00      	nop
 800671a:	e002      	b.n	8006722 <USB_HC_StartXfer+0x25e>
        break;
 800671c:	bf00      	nop
 800671e:	e000      	b.n	8006722 <USB_HC_StartXfer+0x25e>
        break;
 8006720:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006722:	68bb      	ldr	r3, [r7, #8]
 8006724:	68d9      	ldr	r1, [r3, #12]
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	785a      	ldrb	r2, [r3, #1]
 800672a:	68bb      	ldr	r3, [r7, #8]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	b29b      	uxth	r3, r3
 8006730:	2000      	movs	r0, #0
 8006732:	9000      	str	r0, [sp, #0]
 8006734:	68f8      	ldr	r0, [r7, #12]
 8006736:	f7ff fb5b 	bl	8005df0 <USB_WritePacket>
  }

  return HAL_OK;
 800673a:	2300      	movs	r3, #0
}
 800673c:	4618      	mov	r0, r3
 800673e:	3728      	adds	r7, #40	; 0x28
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	1ff80000 	.word	0x1ff80000

08006748 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006748:	b480      	push	{r7}
 800674a:	b085      	sub	sp, #20
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	b29b      	uxth	r3, r3
}
 800675e:	4618      	mov	r0, r3
 8006760:	3714      	adds	r7, #20
 8006762:	46bd      	mov	sp, r7
 8006764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006768:	4770      	bx	lr

0800676a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 800676a:	b480      	push	{r7}
 800676c:	b089      	sub	sp, #36	; 0x24
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	460b      	mov	r3, r1
 8006774:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 800677a:	78fb      	ldrb	r3, [r7, #3]
 800677c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 800677e:	2300      	movs	r3, #0
 8006780:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	015a      	lsls	r2, r3, #5
 8006786:	69fb      	ldr	r3, [r7, #28]
 8006788:	4413      	add	r3, r2
 800678a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	0c9b      	lsrs	r3, r3, #18
 8006792:	f003 0303 	and.w	r3, r3, #3
 8006796:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	015a      	lsls	r2, r3, #5
 800679c:	69fb      	ldr	r3, [r7, #28]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	0fdb      	lsrs	r3, r3, #31
 80067a8:	f003 0301 	and.w	r3, r3, #1
 80067ac:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	689b      	ldr	r3, [r3, #8]
 80067b2:	f003 0320 	and.w	r3, r3, #32
 80067b6:	2b20      	cmp	r3, #32
 80067b8:	d104      	bne.n	80067c4 <USB_HC_Halt+0x5a>
 80067ba:	693b      	ldr	r3, [r7, #16]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d101      	bne.n	80067c4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 80067c0:	2300      	movs	r3, #0
 80067c2:	e0c8      	b.n	8006956 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 80067c4:	697b      	ldr	r3, [r7, #20]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d002      	beq.n	80067d0 <USB_HC_Halt+0x66>
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	2b02      	cmp	r3, #2
 80067ce:	d163      	bne.n	8006898 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80067d0:	69bb      	ldr	r3, [r7, #24]
 80067d2:	015a      	lsls	r2, r3, #5
 80067d4:	69fb      	ldr	r3, [r7, #28]
 80067d6:	4413      	add	r3, r2
 80067d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	69ba      	ldr	r2, [r7, #24]
 80067e0:	0151      	lsls	r1, r2, #5
 80067e2:	69fa      	ldr	r2, [r7, #28]
 80067e4:	440a      	add	r2, r1
 80067e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80067ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80067ee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	689b      	ldr	r3, [r3, #8]
 80067f4:	f003 0320 	and.w	r3, r3, #32
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	f040 80ab 	bne.w	8006954 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006802:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006806:	2b00      	cmp	r3, #0
 8006808:	d133      	bne.n	8006872 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800680a:	69bb      	ldr	r3, [r7, #24]
 800680c:	015a      	lsls	r2, r3, #5
 800680e:	69fb      	ldr	r3, [r7, #28]
 8006810:	4413      	add	r3, r2
 8006812:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	69ba      	ldr	r2, [r7, #24]
 800681a:	0151      	lsls	r1, r2, #5
 800681c:	69fa      	ldr	r2, [r7, #28]
 800681e:	440a      	add	r2, r1
 8006820:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006824:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006828:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800682a:	69bb      	ldr	r3, [r7, #24]
 800682c:	015a      	lsls	r2, r3, #5
 800682e:	69fb      	ldr	r3, [r7, #28]
 8006830:	4413      	add	r3, r2
 8006832:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	69ba      	ldr	r2, [r7, #24]
 800683a:	0151      	lsls	r1, r2, #5
 800683c:	69fa      	ldr	r2, [r7, #28]
 800683e:	440a      	add	r2, r1
 8006840:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006844:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006848:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	3301      	adds	r3, #1
 800684e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006856:	d81d      	bhi.n	8006894 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006858:	69bb      	ldr	r3, [r7, #24]
 800685a:	015a      	lsls	r2, r3, #5
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	4413      	add	r3, r2
 8006860:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800686a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800686e:	d0ec      	beq.n	800684a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006870:	e070      	b.n	8006954 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006872:	69bb      	ldr	r3, [r7, #24]
 8006874:	015a      	lsls	r2, r3, #5
 8006876:	69fb      	ldr	r3, [r7, #28]
 8006878:	4413      	add	r3, r2
 800687a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	69ba      	ldr	r2, [r7, #24]
 8006882:	0151      	lsls	r1, r2, #5
 8006884:	69fa      	ldr	r2, [r7, #28]
 8006886:	440a      	add	r2, r1
 8006888:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800688c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006890:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006892:	e05f      	b.n	8006954 <USB_HC_Halt+0x1ea>
            break;
 8006894:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006896:	e05d      	b.n	8006954 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006898:	69bb      	ldr	r3, [r7, #24]
 800689a:	015a      	lsls	r2, r3, #5
 800689c:	69fb      	ldr	r3, [r7, #28]
 800689e:	4413      	add	r3, r2
 80068a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	69ba      	ldr	r2, [r7, #24]
 80068a8:	0151      	lsls	r1, r2, #5
 80068aa:	69fa      	ldr	r2, [r7, #28]
 80068ac:	440a      	add	r2, r1
 80068ae:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068b2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80068b6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 80068b8:	69fb      	ldr	r3, [r7, #28]
 80068ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068be:	691b      	ldr	r3, [r3, #16]
 80068c0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d133      	bne.n	8006930 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 80068c8:	69bb      	ldr	r3, [r7, #24]
 80068ca:	015a      	lsls	r2, r3, #5
 80068cc:	69fb      	ldr	r3, [r7, #28]
 80068ce:	4413      	add	r3, r2
 80068d0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	0151      	lsls	r1, r2, #5
 80068da:	69fa      	ldr	r2, [r7, #28]
 80068dc:	440a      	add	r2, r1
 80068de:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80068e2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80068e6:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80068e8:	69bb      	ldr	r3, [r7, #24]
 80068ea:	015a      	lsls	r2, r3, #5
 80068ec:	69fb      	ldr	r3, [r7, #28]
 80068ee:	4413      	add	r3, r2
 80068f0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	69ba      	ldr	r2, [r7, #24]
 80068f8:	0151      	lsls	r1, r2, #5
 80068fa:	69fa      	ldr	r2, [r7, #28]
 80068fc:	440a      	add	r2, r1
 80068fe:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006902:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006906:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	3301      	adds	r3, #1
 800690c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006914:	d81d      	bhi.n	8006952 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006916:	69bb      	ldr	r3, [r7, #24]
 8006918:	015a      	lsls	r2, r3, #5
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	4413      	add	r3, r2
 800691e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006928:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800692c:	d0ec      	beq.n	8006908 <USB_HC_Halt+0x19e>
 800692e:	e011      	b.n	8006954 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006930:	69bb      	ldr	r3, [r7, #24]
 8006932:	015a      	lsls	r2, r3, #5
 8006934:	69fb      	ldr	r3, [r7, #28]
 8006936:	4413      	add	r3, r2
 8006938:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	69ba      	ldr	r2, [r7, #24]
 8006940:	0151      	lsls	r1, r2, #5
 8006942:	69fa      	ldr	r2, [r7, #28]
 8006944:	440a      	add	r2, r1
 8006946:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800694a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800694e:	6013      	str	r3, [r2, #0]
 8006950:	e000      	b.n	8006954 <USB_HC_Halt+0x1ea>
          break;
 8006952:	bf00      	nop
    }
  }

  return HAL_OK;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3724      	adds	r7, #36	; 0x24
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
	...

08006964 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
 800696c:	460b      	mov	r3, r1
 800696e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8006974:	78fb      	ldrb	r3, [r7, #3]
 8006976:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8006978:	2301      	movs	r3, #1
 800697a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	04da      	lsls	r2, r3, #19
 8006980:	4b15      	ldr	r3, [pc, #84]	; (80069d8 <USB_DoPing+0x74>)
 8006982:	4013      	ands	r3, r2
 8006984:	693a      	ldr	r2, [r7, #16]
 8006986:	0151      	lsls	r1, r2, #5
 8006988:	697a      	ldr	r2, [r7, #20]
 800698a:	440a      	add	r2, r1
 800698c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006990:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006994:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8006996:	693b      	ldr	r3, [r7, #16]
 8006998:	015a      	lsls	r2, r3, #5
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	4413      	add	r3, r2
 800699e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80069ac:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80069b4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 80069b6:	693b      	ldr	r3, [r7, #16]
 80069b8:	015a      	lsls	r2, r3, #5
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	4413      	add	r3, r2
 80069be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80069c2:	461a      	mov	r2, r3
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	371c      	adds	r7, #28
 80069ce:	46bd      	mov	sp, r7
 80069d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d4:	4770      	bx	lr
 80069d6:	bf00      	nop
 80069d8:	1ff80000 	.word	0x1ff80000

080069dc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80069dc:	b580      	push	{r7, lr}
 80069de:	b088      	sub	sp, #32
 80069e0:	af00      	add	r7, sp, #0
 80069e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80069e4:	2300      	movs	r3, #0
 80069e6:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80069ec:	2300      	movs	r3, #0
 80069ee:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80069f0:	6878      	ldr	r0, [r7, #4]
 80069f2:	f7ff f93b 	bl	8005c6c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80069f6:	2110      	movs	r1, #16
 80069f8:	6878      	ldr	r0, [r7, #4]
 80069fa:	f7ff f995 	bl	8005d28 <USB_FlushTxFifo>
 80069fe:	4603      	mov	r3, r0
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d001      	beq.n	8006a08 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8006a04:	2301      	movs	r3, #1
 8006a06:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	f7ff f9c1 	bl	8005d90 <USB_FlushRxFifo>
 8006a0e:	4603      	mov	r3, r0
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d001      	beq.n	8006a18 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8006a14:	2301      	movs	r3, #1
 8006a16:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8006a18:	2300      	movs	r3, #0
 8006a1a:	61bb      	str	r3, [r7, #24]
 8006a1c:	e01f      	b.n	8006a5e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a1e:	69bb      	ldr	r3, [r7, #24]
 8006a20:	015a      	lsls	r2, r3, #5
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	4413      	add	r3, r2
 8006a26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8006a2e:	693b      	ldr	r3, [r7, #16]
 8006a30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a34:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a3c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a3e:	693b      	ldr	r3, [r7, #16]
 8006a40:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a44:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a46:	69bb      	ldr	r3, [r7, #24]
 8006a48:	015a      	lsls	r2, r3, #5
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	4413      	add	r3, r2
 8006a4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a52:	461a      	mov	r2, r3
 8006a54:	693b      	ldr	r3, [r7, #16]
 8006a56:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8006a58:	69bb      	ldr	r3, [r7, #24]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	69bb      	ldr	r3, [r7, #24]
 8006a60:	2b0f      	cmp	r3, #15
 8006a62:	d9dc      	bls.n	8006a1e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8006a64:	2300      	movs	r3, #0
 8006a66:	61bb      	str	r3, [r7, #24]
 8006a68:	e034      	b.n	8006ad4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8006a6a:	69bb      	ldr	r3, [r7, #24]
 8006a6c:	015a      	lsls	r2, r3, #5
 8006a6e:	697b      	ldr	r3, [r7, #20]
 8006a70:	4413      	add	r3, r2
 8006a72:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006a80:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8006a82:	693b      	ldr	r3, [r7, #16]
 8006a84:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006a88:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a90:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	015a      	lsls	r2, r3, #5
 8006a96:	697b      	ldr	r3, [r7, #20]
 8006a98:	4413      	add	r3, r2
 8006a9a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	693b      	ldr	r3, [r7, #16]
 8006aa2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	3301      	adds	r3, #1
 8006aa8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ab0:	d80c      	bhi.n	8006acc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ab2:	69bb      	ldr	r3, [r7, #24]
 8006ab4:	015a      	lsls	r2, r3, #5
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	4413      	add	r3, r2
 8006aba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006ac4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006ac8:	d0ec      	beq.n	8006aa4 <USB_StopHost+0xc8>
 8006aca:	e000      	b.n	8006ace <USB_StopHost+0xf2>
        break;
 8006acc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8006ace:	69bb      	ldr	r3, [r7, #24]
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	61bb      	str	r3, [r7, #24]
 8006ad4:	69bb      	ldr	r3, [r7, #24]
 8006ad6:	2b0f      	cmp	r3, #15
 8006ad8:	d9c7      	bls.n	8006a6a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 8006ada:	697b      	ldr	r3, [r7, #20]
 8006adc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8006ae6:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	f04f 32ff 	mov.w	r2, #4294967295
 8006aee:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006af0:	6878      	ldr	r0, [r7, #4]
 8006af2:	f7ff f8aa 	bl	8005c4a <USB_EnableGlobalInt>

  return ret;
 8006af6:	7ffb      	ldrb	r3, [r7, #31]
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3720      	adds	r7, #32
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}

08006b00 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006b00:	b590      	push	{r4, r7, lr}
 8006b02:	b089      	sub	sp, #36	; 0x24
 8006b04:	af04      	add	r7, sp, #16
 8006b06:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006b08:	2301      	movs	r3, #1
 8006b0a:	2202      	movs	r2, #2
 8006b0c:	2102      	movs	r1, #2
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	f000 fc66 	bl	80073e0 <USBH_FindInterface>
 8006b14:	4603      	mov	r3, r0
 8006b16:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006b18:	7bfb      	ldrb	r3, [r7, #15]
 8006b1a:	2bff      	cmp	r3, #255	; 0xff
 8006b1c:	d002      	beq.n	8006b24 <USBH_CDC_InterfaceInit+0x24>
 8006b1e:	7bfb      	ldrb	r3, [r7, #15]
 8006b20:	2b01      	cmp	r3, #1
 8006b22:	d901      	bls.n	8006b28 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006b24:	2302      	movs	r3, #2
 8006b26:	e13d      	b.n	8006da4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006b28:	7bfb      	ldrb	r3, [r7, #15]
 8006b2a:	4619      	mov	r1, r3
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fc3b 	bl	80073a8 <USBH_SelectInterface>
 8006b32:	4603      	mov	r3, r0
 8006b34:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006b36:	7bbb      	ldrb	r3, [r7, #14]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	e131      	b.n	8006da4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006b46:	2050      	movs	r0, #80	; 0x50
 8006b48:	f001 fb12 	bl	8008170 <malloc>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006b56:	69db      	ldr	r3, [r3, #28]
 8006b58:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d101      	bne.n	8006b64 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006b60:	2302      	movs	r3, #2
 8006b62:	e11f      	b.n	8006da4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006b64:	2250      	movs	r2, #80	; 0x50
 8006b66:	2100      	movs	r1, #0
 8006b68:	68b8      	ldr	r0, [r7, #8]
 8006b6a:	f001 fb11 	bl	8008190 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006b6e:	7bfb      	ldrb	r3, [r7, #15]
 8006b70:	687a      	ldr	r2, [r7, #4]
 8006b72:	211a      	movs	r1, #26
 8006b74:	fb01 f303 	mul.w	r3, r1, r3
 8006b78:	4413      	add	r3, r2
 8006b7a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b7e:	781b      	ldrb	r3, [r3, #0]
 8006b80:	b25b      	sxtb	r3, r3
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	da15      	bge.n	8006bb2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006b86:	7bfb      	ldrb	r3, [r7, #15]
 8006b88:	687a      	ldr	r2, [r7, #4]
 8006b8a:	211a      	movs	r1, #26
 8006b8c:	fb01 f303 	mul.w	r3, r1, r3
 8006b90:	4413      	add	r3, r2
 8006b92:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006b96:	781a      	ldrb	r2, [r3, #0]
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006b9c:	7bfb      	ldrb	r3, [r7, #15]
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	211a      	movs	r1, #26
 8006ba2:	fb01 f303 	mul.w	r3, r1, r3
 8006ba6:	4413      	add	r3, r2
 8006ba8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006bac:	881a      	ldrh	r2, [r3, #0]
 8006bae:	68bb      	ldr	r3, [r7, #8]
 8006bb0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8006bb2:	68bb      	ldr	r3, [r7, #8]
 8006bb4:	785b      	ldrb	r3, [r3, #1]
 8006bb6:	4619      	mov	r1, r3
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 ff9c 	bl	8007af6 <USBH_AllocPipe>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	461a      	mov	r2, r3
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	7819      	ldrb	r1, [r3, #0]
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	7858      	ldrb	r0, [r3, #1]
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006bda:	68ba      	ldr	r2, [r7, #8]
 8006bdc:	8952      	ldrh	r2, [r2, #10]
 8006bde:	9202      	str	r2, [sp, #8]
 8006be0:	2203      	movs	r2, #3
 8006be2:	9201      	str	r2, [sp, #4]
 8006be4:	9300      	str	r3, [sp, #0]
 8006be6:	4623      	mov	r3, r4
 8006be8:	4602      	mov	r2, r0
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 ff54 	bl	8007a98 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	781b      	ldrb	r3, [r3, #0]
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f001 fa17 	bl	800802c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8006bfe:	2300      	movs	r3, #0
 8006c00:	2200      	movs	r2, #0
 8006c02:	210a      	movs	r1, #10
 8006c04:	6878      	ldr	r0, [r7, #4]
 8006c06:	f000 fbeb 	bl	80073e0 <USBH_FindInterface>
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006c0e:	7bfb      	ldrb	r3, [r7, #15]
 8006c10:	2bff      	cmp	r3, #255	; 0xff
 8006c12:	d002      	beq.n	8006c1a <USBH_CDC_InterfaceInit+0x11a>
 8006c14:	7bfb      	ldrb	r3, [r7, #15]
 8006c16:	2b01      	cmp	r3, #1
 8006c18:	d901      	bls.n	8006c1e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	e0c2      	b.n	8006da4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	211a      	movs	r1, #26
 8006c24:	fb01 f303 	mul.w	r3, r1, r3
 8006c28:	4413      	add	r3, r2
 8006c2a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c2e:	781b      	ldrb	r3, [r3, #0]
 8006c30:	b25b      	sxtb	r3, r3
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	da16      	bge.n	8006c64 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c36:	7bfb      	ldrb	r3, [r7, #15]
 8006c38:	687a      	ldr	r2, [r7, #4]
 8006c3a:	211a      	movs	r1, #26
 8006c3c:	fb01 f303 	mul.w	r3, r1, r3
 8006c40:	4413      	add	r3, r2
 8006c42:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c46:	781a      	ldrb	r2, [r3, #0]
 8006c48:	68bb      	ldr	r3, [r7, #8]
 8006c4a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c4c:	7bfb      	ldrb	r3, [r7, #15]
 8006c4e:	687a      	ldr	r2, [r7, #4]
 8006c50:	211a      	movs	r1, #26
 8006c52:	fb01 f303 	mul.w	r3, r1, r3
 8006c56:	4413      	add	r3, r2
 8006c58:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c5c:	881a      	ldrh	r2, [r3, #0]
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	835a      	strh	r2, [r3, #26]
 8006c62:	e015      	b.n	8006c90 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	211a      	movs	r1, #26
 8006c6a:	fb01 f303 	mul.w	r3, r1, r3
 8006c6e:	4413      	add	r3, r2
 8006c70:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006c74:	781a      	ldrb	r2, [r3, #0]
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8006c7a:	7bfb      	ldrb	r3, [r7, #15]
 8006c7c:	687a      	ldr	r2, [r7, #4]
 8006c7e:	211a      	movs	r1, #26
 8006c80:	fb01 f303 	mul.w	r3, r1, r3
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8006c8a:	881a      	ldrh	r2, [r3, #0]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8006c90:	7bfb      	ldrb	r3, [r7, #15]
 8006c92:	687a      	ldr	r2, [r7, #4]
 8006c94:	211a      	movs	r1, #26
 8006c96:	fb01 f303 	mul.w	r3, r1, r3
 8006c9a:	4413      	add	r3, r2
 8006c9c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	b25b      	sxtb	r3, r3
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	da16      	bge.n	8006cd6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006ca8:	7bfb      	ldrb	r3, [r7, #15]
 8006caa:	687a      	ldr	r2, [r7, #4]
 8006cac:	211a      	movs	r1, #26
 8006cae:	fb01 f303 	mul.w	r3, r1, r3
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006cb8:	781a      	ldrb	r2, [r3, #0]
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	687a      	ldr	r2, [r7, #4]
 8006cc2:	211a      	movs	r1, #26
 8006cc4:	fb01 f303 	mul.w	r3, r1, r3
 8006cc8:	4413      	add	r3, r2
 8006cca:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006cce:	881a      	ldrh	r2, [r3, #0]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	835a      	strh	r2, [r3, #26]
 8006cd4:	e015      	b.n	8006d02 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	211a      	movs	r1, #26
 8006cdc:	fb01 f303 	mul.w	r3, r1, r3
 8006ce0:	4413      	add	r3, r2
 8006ce2:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006ce6:	781a      	ldrb	r2, [r3, #0]
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8006cec:	7bfb      	ldrb	r3, [r7, #15]
 8006cee:	687a      	ldr	r2, [r7, #4]
 8006cf0:	211a      	movs	r1, #26
 8006cf2:	fb01 f303 	mul.w	r3, r1, r3
 8006cf6:	4413      	add	r3, r2
 8006cf8:	f503 7356 	add.w	r3, r3, #856	; 0x358
 8006cfc:	881a      	ldrh	r2, [r3, #0]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	7b9b      	ldrb	r3, [r3, #14]
 8006d06:	4619      	mov	r1, r3
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f000 fef4 	bl	8007af6 <USBH_AllocPipe>
 8006d0e:	4603      	mov	r3, r0
 8006d10:	461a      	mov	r2, r3
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	7bdb      	ldrb	r3, [r3, #15]
 8006d1a:	4619      	mov	r1, r3
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 feea 	bl	8007af6 <USBH_AllocPipe>
 8006d22:	4603      	mov	r3, r0
 8006d24:	461a      	mov	r2, r3
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8006d2a:	68bb      	ldr	r3, [r7, #8]
 8006d2c:	7b59      	ldrb	r1, [r3, #13]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	7b98      	ldrb	r0, [r3, #14]
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d3e:	68ba      	ldr	r2, [r7, #8]
 8006d40:	8b12      	ldrh	r2, [r2, #24]
 8006d42:	9202      	str	r2, [sp, #8]
 8006d44:	2202      	movs	r2, #2
 8006d46:	9201      	str	r2, [sp, #4]
 8006d48:	9300      	str	r3, [sp, #0]
 8006d4a:	4623      	mov	r3, r4
 8006d4c:	4602      	mov	r2, r0
 8006d4e:	6878      	ldr	r0, [r7, #4]
 8006d50:	f000 fea2 	bl	8007a98 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006d54:	68bb      	ldr	r3, [r7, #8]
 8006d56:	7b19      	ldrb	r1, [r3, #12]
 8006d58:	68bb      	ldr	r3, [r7, #8]
 8006d5a:	7bd8      	ldrb	r0, [r3, #15]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006d68:	68ba      	ldr	r2, [r7, #8]
 8006d6a:	8b52      	ldrh	r2, [r2, #26]
 8006d6c:	9202      	str	r2, [sp, #8]
 8006d6e:	2202      	movs	r2, #2
 8006d70:	9201      	str	r2, [sp, #4]
 8006d72:	9300      	str	r3, [sp, #0]
 8006d74:	4623      	mov	r3, r4
 8006d76:	4602      	mov	r2, r0
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 fe8d 	bl	8007a98 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8006d7e:	68bb      	ldr	r3, [r7, #8]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8006d86:	68bb      	ldr	r3, [r7, #8]
 8006d88:	7b5b      	ldrb	r3, [r3, #13]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	4619      	mov	r1, r3
 8006d8e:	6878      	ldr	r0, [r7, #4]
 8006d90:	f001 f94c 	bl	800802c <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	7b1b      	ldrb	r3, [r3, #12]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	6878      	ldr	r0, [r7, #4]
 8006d9e:	f001 f945 	bl	800802c <USBH_LL_SetToggle>

  return USBH_OK;
 8006da2:	2300      	movs	r3, #0
}
 8006da4:	4618      	mov	r0, r3
 8006da6:	3714      	adds	r7, #20
 8006da8:	46bd      	mov	sp, r7
 8006daa:	bd90      	pop	{r4, r7, pc}

08006dac <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	781b      	ldrb	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00e      	beq.n	8006de4 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	4619      	mov	r1, r3
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f000 fe82 	bl	8007ad6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	6878      	ldr	r0, [r7, #4]
 8006dda:	f000 fead 	bl	8007b38 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	2200      	movs	r2, #0
 8006de2:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	7b1b      	ldrb	r3, [r3, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d00e      	beq.n	8006e0a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	7b1b      	ldrb	r3, [r3, #12]
 8006df0:	4619      	mov	r1, r3
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fe6f 	bl	8007ad6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	7b1b      	ldrb	r3, [r3, #12]
 8006dfc:	4619      	mov	r1, r3
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fe9a 	bl	8007b38 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	7b5b      	ldrb	r3, [r3, #13]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d00e      	beq.n	8006e30 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	7b5b      	ldrb	r3, [r3, #13]
 8006e16:	4619      	mov	r1, r3
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fe5c 	bl	8007ad6 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	7b5b      	ldrb	r3, [r3, #13]
 8006e22:	4619      	mov	r1, r3
 8006e24:	6878      	ldr	r0, [r7, #4]
 8006e26:	f000 fe87 	bl	8007b38 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e36:	69db      	ldr	r3, [r3, #28]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d00b      	beq.n	8006e54 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e42:	69db      	ldr	r3, [r3, #28]
 8006e44:	4618      	mov	r0, r3
 8006e46:	f001 f99b 	bl	8008180 <free>
    phost->pActiveClass->pData = 0U;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e50:	2200      	movs	r2, #0
 8006e52:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006e6c:	69db      	ldr	r3, [r3, #28]
 8006e6e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	3340      	adds	r3, #64	; 0x40
 8006e74:	4619      	mov	r1, r3
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 f8b1 	bl	8006fde <GetLineCoding>
 8006e7c:	4603      	mov	r3, r0
 8006e7e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8006e80:	7afb      	ldrb	r3, [r7, #11]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d105      	bne.n	8006e92 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006e8c:	2102      	movs	r1, #2
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8006e92:	7afb      	ldrb	r3, [r7, #11]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8006e9c:	b580      	push	{r7, lr}
 8006e9e:	b084      	sub	sp, #16
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8006ea4:	2301      	movs	r3, #1
 8006ea6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006eb2:	69db      	ldr	r3, [r3, #28]
 8006eb4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 8006ebc:	2b04      	cmp	r3, #4
 8006ebe:	d877      	bhi.n	8006fb0 <USBH_CDC_Process+0x114>
 8006ec0:	a201      	add	r2, pc, #4	; (adr r2, 8006ec8 <USBH_CDC_Process+0x2c>)
 8006ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec6:	bf00      	nop
 8006ec8:	08006edd 	.word	0x08006edd
 8006ecc:	08006ee3 	.word	0x08006ee3
 8006ed0:	08006f13 	.word	0x08006f13
 8006ed4:	08006f87 	.word	0x08006f87
 8006ed8:	08006f95 	.word	0x08006f95
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 8006edc:	2300      	movs	r3, #0
 8006ede:	73fb      	strb	r3, [r7, #15]
      break;
 8006ee0:	e06d      	b.n	8006fbe <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f000 f897 	bl	800701c <SetLineCoding>
 8006eee:	4603      	mov	r3, r0
 8006ef0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006ef2:	7bbb      	ldrb	r3, [r7, #14]
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d104      	bne.n	8006f02 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006ef8:	68bb      	ldr	r3, [r7, #8]
 8006efa:	2202      	movs	r2, #2
 8006efc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f00:	e058      	b.n	8006fb4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006f02:	7bbb      	ldrb	r3, [r7, #14]
 8006f04:	2b01      	cmp	r3, #1
 8006f06:	d055      	beq.n	8006fb4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f08:	68bb      	ldr	r3, [r7, #8]
 8006f0a:	2204      	movs	r2, #4
 8006f0c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006f10:	e050      	b.n	8006fb4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	3340      	adds	r3, #64	; 0x40
 8006f16:	4619      	mov	r1, r3
 8006f18:	6878      	ldr	r0, [r7, #4]
 8006f1a:	f000 f860 	bl	8006fde <GetLineCoding>
 8006f1e:	4603      	mov	r3, r0
 8006f20:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006f22:	7bbb      	ldrb	r3, [r7, #14]
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d126      	bne.n	8006f76 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	2200      	movs	r2, #0
 8006f2c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f3a:	791b      	ldrb	r3, [r3, #4]
 8006f3c:	429a      	cmp	r2, r3
 8006f3e:	d13b      	bne.n	8006fb8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006f46:	68bb      	ldr	r3, [r7, #8]
 8006f48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f4a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006f4c:	429a      	cmp	r2, r3
 8006f4e:	d133      	bne.n	8006fb8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006f56:	68bb      	ldr	r3, [r7, #8]
 8006f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f5a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d12b      	bne.n	8006fb8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006f64:	68bb      	ldr	r3, [r7, #8]
 8006f66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006f68:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006f6a:	429a      	cmp	r2, r3
 8006f6c:	d124      	bne.n	8006fb8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8006f6e:	6878      	ldr	r0, [r7, #4]
 8006f70:	f000 f958 	bl	8007224 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006f74:	e020      	b.n	8006fb8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8006f76:	7bbb      	ldrb	r3, [r7, #14]
 8006f78:	2b01      	cmp	r3, #1
 8006f7a:	d01d      	beq.n	8006fb8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006f7c:	68bb      	ldr	r3, [r7, #8]
 8006f7e:	2204      	movs	r2, #4
 8006f80:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006f84:	e018      	b.n	8006fb8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8006f86:	6878      	ldr	r0, [r7, #4]
 8006f88:	f000 f867 	bl	800705a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f8da 	bl	8007146 <CDC_ProcessReception>
      break;
 8006f92:	e014      	b.n	8006fbe <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8006f94:	2100      	movs	r1, #0
 8006f96:	6878      	ldr	r0, [r7, #4]
 8006f98:	f000 fb08 	bl	80075ac <USBH_ClrFeature>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006fa0:	7bbb      	ldrb	r3, [r7, #14]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d10a      	bne.n	8006fbc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8006fa6:	68bb      	ldr	r3, [r7, #8]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8006fae:	e005      	b.n	8006fbc <USBH_CDC_Process+0x120>

    default:
      break;
 8006fb0:	bf00      	nop
 8006fb2:	e004      	b.n	8006fbe <USBH_CDC_Process+0x122>
      break;
 8006fb4:	bf00      	nop
 8006fb6:	e002      	b.n	8006fbe <USBH_CDC_Process+0x122>
      break;
 8006fb8:	bf00      	nop
 8006fba:	e000      	b.n	8006fbe <USBH_CDC_Process+0x122>
      break;
 8006fbc:	bf00      	nop

  }

  return status;
 8006fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fc0:	4618      	mov	r0, r3
 8006fc2:	3710      	adds	r7, #16
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	bd80      	pop	{r7, pc}

08006fc8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b083      	sub	sp, #12
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006fd0:	2300      	movs	r3, #0
}
 8006fd2:	4618      	mov	r0, r3
 8006fd4:	370c      	adds	r7, #12
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fdc:	4770      	bx	lr

08006fde <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b082      	sub	sp, #8
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	6078      	str	r0, [r7, #4]
 8006fe6:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	22a1      	movs	r2, #161	; 0xa1
 8006fec:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	2221      	movs	r2, #33	; 0x21
 8006ff2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	2200      	movs	r2, #0
 8006ffe:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2207      	movs	r2, #7
 8007004:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	2207      	movs	r2, #7
 800700a:	4619      	mov	r1, r3
 800700c:	6878      	ldr	r0, [r7, #4]
 800700e:	f000 faf1 	bl	80075f4 <USBH_CtlReq>
 8007012:	4603      	mov	r3, r0
}
 8007014:	4618      	mov	r0, r3
 8007016:	3708      	adds	r7, #8
 8007018:	46bd      	mov	sp, r7
 800701a:	bd80      	pop	{r7, pc}

0800701c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	2221      	movs	r2, #33	; 0x21
 800702a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2220      	movs	r2, #32
 8007030:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	2200      	movs	r2, #0
 8007036:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2200      	movs	r2, #0
 800703c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2207      	movs	r2, #7
 8007042:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007044:	683b      	ldr	r3, [r7, #0]
 8007046:	2207      	movs	r2, #7
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f000 fad2 	bl	80075f4 <USBH_CtlReq>
 8007050:	4603      	mov	r3, r0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}

0800705a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800705a:	b580      	push	{r7, lr}
 800705c:	b086      	sub	sp, #24
 800705e:	af02      	add	r7, sp, #8
 8007060:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007068:	69db      	ldr	r3, [r3, #28]
 800706a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800706c:	2300      	movs	r3, #0
 800706e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007076:	2b01      	cmp	r3, #1
 8007078:	d002      	beq.n	8007080 <CDC_ProcessTransmission+0x26>
 800707a:	2b02      	cmp	r3, #2
 800707c:	d023      	beq.n	80070c6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800707e:	e05e      	b.n	800713e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007084:	68fa      	ldr	r2, [r7, #12]
 8007086:	8b12      	ldrh	r2, [r2, #24]
 8007088:	4293      	cmp	r3, r2
 800708a:	d90b      	bls.n	80070a4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	69d9      	ldr	r1, [r3, #28]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8b1a      	ldrh	r2, [r3, #24]
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	7b5b      	ldrb	r3, [r3, #13]
 8007098:	2001      	movs	r0, #1
 800709a:	9000      	str	r0, [sp, #0]
 800709c:	6878      	ldr	r0, [r7, #4]
 800709e:	f000 fcb8 	bl	8007a12 <USBH_BulkSendData>
 80070a2:	e00b      	b.n	80070bc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80070ac:	b29a      	uxth	r2, r3
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	7b5b      	ldrb	r3, [r3, #13]
 80070b2:	2001      	movs	r0, #1
 80070b4:	9000      	str	r0, [sp, #0]
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 fcab 	bl	8007a12 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	2202      	movs	r2, #2
 80070c0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80070c4:	e03b      	b.n	800713e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	7b5b      	ldrb	r3, [r3, #13]
 80070ca:	4619      	mov	r1, r3
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 ff83 	bl	8007fd8 <USBH_LL_GetURBState>
 80070d2:	4603      	mov	r3, r0
 80070d4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80070d6:	7afb      	ldrb	r3, [r7, #11]
 80070d8:	2b01      	cmp	r3, #1
 80070da:	d128      	bne.n	800712e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	8b12      	ldrh	r2, [r2, #24]
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d90e      	bls.n	8007106 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070ec:	68fa      	ldr	r2, [r7, #12]
 80070ee:	8b12      	ldrh	r2, [r2, #24]
 80070f0:	1a9a      	subs	r2, r3, r2
 80070f2:	68fb      	ldr	r3, [r7, #12]
 80070f4:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	69db      	ldr	r3, [r3, #28]
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	8b12      	ldrh	r2, [r2, #24]
 80070fe:	441a      	add	r2, r3
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	61da      	str	r2, [r3, #28]
 8007104:	e002      	b.n	800710c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	2200      	movs	r2, #0
 800710a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007110:	2b00      	cmp	r3, #0
 8007112:	d004      	beq.n	800711e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	2201      	movs	r2, #1
 8007118:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800711c:	e00e      	b.n	800713c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2200      	movs	r2, #0
 8007122:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 f868 	bl	80071fc <USBH_CDC_TransmitCallback>
      break;
 800712c:	e006      	b.n	800713c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800712e:	7afb      	ldrb	r3, [r7, #11]
 8007130:	2b02      	cmp	r3, #2
 8007132:	d103      	bne.n	800713c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	2201      	movs	r2, #1
 8007138:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800713c:	bf00      	nop
  }
}
 800713e:	bf00      	nop
 8007140:	3710      	adds	r7, #16
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b086      	sub	sp, #24
 800714a:	af00      	add	r7, sp, #0
 800714c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007154:	69db      	ldr	r3, [r3, #28]
 8007156:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007158:	2300      	movs	r3, #0
 800715a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007162:	2b03      	cmp	r3, #3
 8007164:	d002      	beq.n	800716c <CDC_ProcessReception+0x26>
 8007166:	2b04      	cmp	r3, #4
 8007168:	d00e      	beq.n	8007188 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800716a:	e043      	b.n	80071f4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800716c:	697b      	ldr	r3, [r7, #20]
 800716e:	6a19      	ldr	r1, [r3, #32]
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	8b5a      	ldrh	r2, [r3, #26]
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	7b1b      	ldrb	r3, [r3, #12]
 8007178:	6878      	ldr	r0, [r7, #4]
 800717a:	f000 fc6f 	bl	8007a5c <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800717e:	697b      	ldr	r3, [r7, #20]
 8007180:	2204      	movs	r2, #4
 8007182:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007186:	e035      	b.n	80071f4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	7b1b      	ldrb	r3, [r3, #12]
 800718c:	4619      	mov	r1, r3
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f000 ff22 	bl	8007fd8 <USBH_LL_GetURBState>
 8007194:	4603      	mov	r3, r0
 8007196:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007198:	7cfb      	ldrb	r3, [r7, #19]
 800719a:	2b01      	cmp	r3, #1
 800719c:	d129      	bne.n	80071f2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800719e:	697b      	ldr	r3, [r7, #20]
 80071a0:	7b1b      	ldrb	r3, [r3, #12]
 80071a2:	4619      	mov	r1, r3
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 fe85 	bl	8007eb4 <USBH_LL_GetLastXferSize>
 80071aa:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	429a      	cmp	r2, r3
 80071b4:	d016      	beq.n	80071e4 <CDC_ProcessReception+0x9e>
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	8b5b      	ldrh	r3, [r3, #26]
 80071ba:	461a      	mov	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	4293      	cmp	r3, r2
 80071c0:	d910      	bls.n	80071e4 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	1ad2      	subs	r2, r2, r3
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	6a1a      	ldr	r2, [r3, #32]
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	441a      	add	r2, r3
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	2203      	movs	r2, #3
 80071de:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80071e2:	e006      	b.n	80071f2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 80071e4:	697b      	ldr	r3, [r7, #20]
 80071e6:	2200      	movs	r2, #0
 80071e8:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 80071ec:	6878      	ldr	r0, [r7, #4]
 80071ee:	f000 f80f 	bl	8007210 <USBH_CDC_ReceiveCallback>
      break;
 80071f2:	bf00      	nop
  }
}
 80071f4:	bf00      	nop
 80071f6:	3718      	adds	r7, #24
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd80      	pop	{r7, pc}

080071fc <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007204:	bf00      	nop
 8007206:	370c      	adds	r7, #12
 8007208:	46bd      	mov	sp, r7
 800720a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800720e:	4770      	bx	lr

08007210 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b084      	sub	sp, #16
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	4613      	mov	r3, r2
 8007244:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800724c:	2302      	movs	r3, #2
 800724e:	e029      	b.n	80072a4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	79fa      	ldrb	r2, [r7, #7]
 8007254:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2200      	movs	r2, #0
 800725c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	2200      	movs	r2, #0
 8007264:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007268:	68f8      	ldr	r0, [r7, #12]
 800726a:	f000 f81f 	bl	80072ac <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007276:	68fb      	ldr	r3, [r7, #12]
 8007278:	2200      	movs	r2, #0
 800727a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2200      	movs	r2, #0
 8007282:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	2200      	movs	r2, #0
 800728a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 800728e:	68bb      	ldr	r3, [r7, #8]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 fd97 	bl	8007dd0 <USBH_LL_Init>

  return USBH_OK;
 80072a2:	2300      	movs	r3, #0
}
 80072a4:	4618      	mov	r0, r3
 80072a6:	3710      	adds	r7, #16
 80072a8:	46bd      	mov	sp, r7
 80072aa:	bd80      	pop	{r7, pc}

080072ac <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80072ac:	b480      	push	{r7}
 80072ae:	b085      	sub	sp, #20
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80072b4:	2300      	movs	r3, #0
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072b8:	2300      	movs	r3, #0
 80072ba:	60fb      	str	r3, [r7, #12]
 80072bc:	e009      	b.n	80072d2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	33e0      	adds	r3, #224	; 0xe0
 80072c4:	009b      	lsls	r3, r3, #2
 80072c6:	4413      	add	r3, r2
 80072c8:	2200      	movs	r2, #0
 80072ca:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	3301      	adds	r3, #1
 80072d0:	60fb      	str	r3, [r7, #12]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	2b0f      	cmp	r3, #15
 80072d6:	d9f2      	bls.n	80072be <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]
 80072dc:	e009      	b.n	80072f2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	4413      	add	r3, r2
 80072e4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	3301      	adds	r3, #1
 80072f0:	60fb      	str	r3, [r7, #12]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072f8:	d3f1      	bcc.n	80072de <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	2200      	movs	r2, #0
 80072fe:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2200      	movs	r2, #0
 8007304:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	2201      	movs	r2, #1
 800730a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2200      	movs	r2, #0
 8007310:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2201      	movs	r2, #1
 8007318:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2240      	movs	r2, #64	; 0x40
 800731e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	2200      	movs	r2, #0
 8007324:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	2200      	movs	r2, #0
 800732a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	2201      	movs	r2, #1
 8007332:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007346:	2300      	movs	r3, #0
}
 8007348:	4618      	mov	r0, r3
 800734a:	3714      	adds	r7, #20
 800734c:	46bd      	mov	sp, r7
 800734e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007352:	4770      	bx	lr

08007354 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007354:	b480      	push	{r7}
 8007356:	b085      	sub	sp, #20
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
 800735c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800735e:	2300      	movs	r3, #0
 8007360:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007362:	683b      	ldr	r3, [r7, #0]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d016      	beq.n	8007396 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800736e:	2b00      	cmp	r3, #0
 8007370:	d10e      	bne.n	8007390 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007378:	1c59      	adds	r1, r3, #1
 800737a:	687a      	ldr	r2, [r7, #4]
 800737c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007380:	687a      	ldr	r2, [r7, #4]
 8007382:	33de      	adds	r3, #222	; 0xde
 8007384:	6839      	ldr	r1, [r7, #0]
 8007386:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 800738a:	2300      	movs	r3, #0
 800738c:	73fb      	strb	r3, [r7, #15]
 800738e:	e004      	b.n	800739a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007390:	2302      	movs	r3, #2
 8007392:	73fb      	strb	r3, [r7, #15]
 8007394:	e001      	b.n	800739a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007396:	2302      	movs	r3, #2
 8007398:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800739a:	7bfb      	ldrb	r3, [r7, #15]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3714      	adds	r7, #20
 80073a0:	46bd      	mov	sp, r7
 80073a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a6:	4770      	bx	lr

080073a8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	460b      	mov	r3, r1
 80073b2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80073b4:	2300      	movs	r3, #0
 80073b6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80073be:	78fa      	ldrb	r2, [r7, #3]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d204      	bcs.n	80073ce <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	78fa      	ldrb	r2, [r7, #3]
 80073c8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80073cc:	e001      	b.n	80073d2 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80073ce:	2302      	movs	r3, #2
 80073d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80073d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b087      	sub	sp, #28
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	4608      	mov	r0, r1
 80073ea:	4611      	mov	r1, r2
 80073ec:	461a      	mov	r2, r3
 80073ee:	4603      	mov	r3, r0
 80073f0:	70fb      	strb	r3, [r7, #3]
 80073f2:	460b      	mov	r3, r1
 80073f4:	70bb      	strb	r3, [r7, #2]
 80073f6:	4613      	mov	r3, r2
 80073f8:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 80073fa:	2300      	movs	r3, #0
 80073fc:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 80073fe:	2300      	movs	r3, #0
 8007400:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007408:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800740a:	e025      	b.n	8007458 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800740c:	7dfb      	ldrb	r3, [r7, #23]
 800740e:	221a      	movs	r2, #26
 8007410:	fb02 f303 	mul.w	r3, r2, r3
 8007414:	3308      	adds	r3, #8
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	4413      	add	r3, r2
 800741a:	3302      	adds	r3, #2
 800741c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800741e:	693b      	ldr	r3, [r7, #16]
 8007420:	795b      	ldrb	r3, [r3, #5]
 8007422:	78fa      	ldrb	r2, [r7, #3]
 8007424:	429a      	cmp	r2, r3
 8007426:	d002      	beq.n	800742e <USBH_FindInterface+0x4e>
 8007428:	78fb      	ldrb	r3, [r7, #3]
 800742a:	2bff      	cmp	r3, #255	; 0xff
 800742c:	d111      	bne.n	8007452 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800742e:	693b      	ldr	r3, [r7, #16]
 8007430:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007432:	78ba      	ldrb	r2, [r7, #2]
 8007434:	429a      	cmp	r2, r3
 8007436:	d002      	beq.n	800743e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007438:	78bb      	ldrb	r3, [r7, #2]
 800743a:	2bff      	cmp	r3, #255	; 0xff
 800743c:	d109      	bne.n	8007452 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800743e:	693b      	ldr	r3, [r7, #16]
 8007440:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007442:	787a      	ldrb	r2, [r7, #1]
 8007444:	429a      	cmp	r2, r3
 8007446:	d002      	beq.n	800744e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007448:	787b      	ldrb	r3, [r7, #1]
 800744a:	2bff      	cmp	r3, #255	; 0xff
 800744c:	d101      	bne.n	8007452 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800744e:	7dfb      	ldrb	r3, [r7, #23]
 8007450:	e006      	b.n	8007460 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007452:	7dfb      	ldrb	r3, [r7, #23]
 8007454:	3301      	adds	r3, #1
 8007456:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007458:	7dfb      	ldrb	r3, [r7, #23]
 800745a:	2b01      	cmp	r3, #1
 800745c:	d9d6      	bls.n	800740c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800745e:	23ff      	movs	r3, #255	; 0xff
}
 8007460:	4618      	mov	r0, r3
 8007462:	371c      	adds	r7, #28
 8007464:	46bd      	mov	sp, r7
 8007466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800746a:	4770      	bx	lr

0800746c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b082      	sub	sp, #8
 8007470:	af00      	add	r7, sp, #0
 8007472:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fce7 	bl	8007e48 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 800747a:	2101      	movs	r1, #1
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f000 fdbe 	bl	8007ffe <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3708      	adds	r7, #8
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}

0800748c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800748c:	b480      	push	{r7}
 800748e:	b083      	sub	sp, #12
 8007490:	af00      	add	r7, sp, #0
 8007492:	6078      	str	r0, [r7, #4]
 8007494:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	683a      	ldr	r2, [r7, #0]
 800749a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800749e:	bf00      	nop
 80074a0:	370c      	adds	r7, #12
 80074a2:	46bd      	mov	sp, r7
 80074a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a8:	4770      	bx	lr

080074aa <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80074b8:	1c5a      	adds	r2, r3, #1
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 80074c0:	6878      	ldr	r0, [r7, #4]
 80074c2:	f000 f804 	bl	80074ce <USBH_HandleSof>
}
 80074c6:	bf00      	nop
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}

080074ce <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 80074ce:	b580      	push	{r7, lr}
 80074d0:	b082      	sub	sp, #8
 80074d2:	af00      	add	r7, sp, #0
 80074d4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	781b      	ldrb	r3, [r3, #0]
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b0b      	cmp	r3, #11
 80074de:	d10a      	bne.n	80074f6 <USBH_HandleSof+0x28>
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80074f0:	699b      	ldr	r3, [r3, #24]
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	4798      	blx	r3
  }
}
 80074f6:	bf00      	nop
 80074f8:	3708      	adds	r7, #8
 80074fa:	46bd      	mov	sp, r7
 80074fc:	bd80      	pop	{r7, pc}

080074fe <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80074fe:	b480      	push	{r7}
 8007500:	b083      	sub	sp, #12
 8007502:	af00      	add	r7, sp, #0
 8007504:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	2201      	movs	r2, #1
 800750a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800750e:	bf00      	nop
}
 8007510:	370c      	adds	r7, #12
 8007512:	46bd      	mov	sp, r7
 8007514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007518:	4770      	bx	lr

0800751a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800751a:	b480      	push	{r7}
 800751c:	b083      	sub	sp, #12
 800751e:	af00      	add	r7, sp, #0
 8007520:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2200      	movs	r2, #0
 8007526:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 800752a:	bf00      	nop
}
 800752c:	370c      	adds	r7, #12
 800752e:	46bd      	mov	sp, r7
 8007530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007534:	4770      	bx	lr

08007536 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007536:	b480      	push	{r7}
 8007538:	b083      	sub	sp, #12
 800753a:	af00      	add	r7, sp, #0
 800753c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	2201      	movs	r2, #1
 8007542:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007556:	2300      	movs	r3, #0
}
 8007558:	4618      	mov	r0, r3
 800755a:	370c      	adds	r7, #12
 800755c:	46bd      	mov	sp, r7
 800755e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007562:	4770      	bx	lr

08007564 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	2201      	movs	r2, #1
 8007570:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2200      	movs	r2, #0
 8007578:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007584:	6878      	ldr	r0, [r7, #4]
 8007586:	f000 fc7a 	bl	8007e7e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	791b      	ldrb	r3, [r3, #4]
 800758e:	4619      	mov	r1, r3
 8007590:	6878      	ldr	r0, [r7, #4]
 8007592:	f000 fad1 	bl	8007b38 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	795b      	ldrb	r3, [r3, #5]
 800759a:	4619      	mov	r1, r3
 800759c:	6878      	ldr	r0, [r7, #4]
 800759e:	f000 facb 	bl	8007b38 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80075a2:	2300      	movs	r3, #0
}
 80075a4:	4618      	mov	r0, r3
 80075a6:	3708      	adds	r7, #8
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bd80      	pop	{r7, pc}

080075ac <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	6078      	str	r0, [r7, #4]
 80075b4:	460b      	mov	r3, r1
 80075b6:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	789b      	ldrb	r3, [r3, #2]
 80075bc:	2b01      	cmp	r3, #1
 80075be:	d10f      	bne.n	80075e0 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2202      	movs	r2, #2
 80075c4:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	2201      	movs	r2, #1
 80075ca:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2200      	movs	r2, #0
 80075d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80075d2:	78fb      	ldrb	r3, [r7, #3]
 80075d4:	b29a      	uxth	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2200      	movs	r2, #0
 80075de:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80075e0:	2200      	movs	r2, #0
 80075e2:	2100      	movs	r1, #0
 80075e4:	6878      	ldr	r0, [r7, #4]
 80075e6:	f000 f805 	bl	80075f4 <USBH_CtlReq>
 80075ea:	4603      	mov	r3, r0
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}

080075f4 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	60f8      	str	r0, [r7, #12]
 80075fc:	60b9      	str	r1, [r7, #8]
 80075fe:	4613      	mov	r3, r2
 8007600:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007602:	2301      	movs	r3, #1
 8007604:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	789b      	ldrb	r3, [r3, #2]
 800760a:	2b01      	cmp	r3, #1
 800760c:	d002      	beq.n	8007614 <USBH_CtlReq+0x20>
 800760e:	2b02      	cmp	r3, #2
 8007610:	d00f      	beq.n	8007632 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007612:	e027      	b.n	8007664 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	68ba      	ldr	r2, [r7, #8]
 8007618:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	88fa      	ldrh	r2, [r7, #6]
 800761e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	2201      	movs	r2, #1
 8007624:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	2202      	movs	r2, #2
 800762a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 800762c:	2301      	movs	r3, #1
 800762e:	75fb      	strb	r3, [r7, #23]
      break;
 8007630:	e018      	b.n	8007664 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007632:	68f8      	ldr	r0, [r7, #12]
 8007634:	f000 f81c 	bl	8007670 <USBH_HandleControl>
 8007638:	4603      	mov	r3, r0
 800763a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 800763c:	7dfb      	ldrb	r3, [r7, #23]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d002      	beq.n	8007648 <USBH_CtlReq+0x54>
 8007642:	7dfb      	ldrb	r3, [r7, #23]
 8007644:	2b03      	cmp	r3, #3
 8007646:	d106      	bne.n	8007656 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	2201      	movs	r2, #1
 800764c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2200      	movs	r2, #0
 8007652:	761a      	strb	r2, [r3, #24]
      break;
 8007654:	e005      	b.n	8007662 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007656:	7dfb      	ldrb	r3, [r7, #23]
 8007658:	2b02      	cmp	r3, #2
 800765a:	d102      	bne.n	8007662 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	2201      	movs	r2, #1
 8007660:	709a      	strb	r2, [r3, #2]
      break;
 8007662:	bf00      	nop
  }
  return status;
 8007664:	7dfb      	ldrb	r3, [r7, #23]
}
 8007666:	4618      	mov	r0, r3
 8007668:	3718      	adds	r7, #24
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
	...

08007670 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b086      	sub	sp, #24
 8007674:	af02      	add	r7, sp, #8
 8007676:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007678:	2301      	movs	r3, #1
 800767a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800767c:	2300      	movs	r3, #0
 800767e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	7e1b      	ldrb	r3, [r3, #24]
 8007684:	3b01      	subs	r3, #1
 8007686:	2b0a      	cmp	r3, #10
 8007688:	f200 8156 	bhi.w	8007938 <USBH_HandleControl+0x2c8>
 800768c:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <USBH_HandleControl+0x24>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	080076c1 	.word	0x080076c1
 8007698:	080076db 	.word	0x080076db
 800769c:	08007745 	.word	0x08007745
 80076a0:	0800776b 	.word	0x0800776b
 80076a4:	080077a3 	.word	0x080077a3
 80076a8:	080077cd 	.word	0x080077cd
 80076ac:	0800781f 	.word	0x0800781f
 80076b0:	08007841 	.word	0x08007841
 80076b4:	0800787d 	.word	0x0800787d
 80076b8:	080078a3 	.word	0x080078a3
 80076bc:	080078e1 	.word	0x080078e1
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	f103 0110 	add.w	r1, r3, #16
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	795b      	ldrb	r3, [r3, #5]
 80076ca:	461a      	mov	r2, r3
 80076cc:	6878      	ldr	r0, [r7, #4]
 80076ce:	f000 f943 	bl	8007958 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	2202      	movs	r2, #2
 80076d6:	761a      	strb	r2, [r3, #24]
      break;
 80076d8:	e139      	b.n	800794e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	795b      	ldrb	r3, [r3, #5]
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f000 fc79 	bl	8007fd8 <USBH_LL_GetURBState>
 80076e6:	4603      	mov	r3, r0
 80076e8:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80076ea:	7bbb      	ldrb	r3, [r7, #14]
 80076ec:	2b01      	cmp	r3, #1
 80076ee:	d11e      	bne.n	800772e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	7c1b      	ldrb	r3, [r3, #16]
 80076f4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80076f8:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	8adb      	ldrh	r3, [r3, #22]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007702:	7b7b      	ldrb	r3, [r7, #13]
 8007704:	2b80      	cmp	r3, #128	; 0x80
 8007706:	d103      	bne.n	8007710 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	2203      	movs	r2, #3
 800770c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800770e:	e115      	b.n	800793c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	2205      	movs	r2, #5
 8007714:	761a      	strb	r2, [r3, #24]
      break;
 8007716:	e111      	b.n	800793c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007718:	7b7b      	ldrb	r3, [r7, #13]
 800771a:	2b80      	cmp	r3, #128	; 0x80
 800771c:	d103      	bne.n	8007726 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	2209      	movs	r2, #9
 8007722:	761a      	strb	r2, [r3, #24]
      break;
 8007724:	e10a      	b.n	800793c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2207      	movs	r2, #7
 800772a:	761a      	strb	r2, [r3, #24]
      break;
 800772c:	e106      	b.n	800793c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 800772e:	7bbb      	ldrb	r3, [r7, #14]
 8007730:	2b04      	cmp	r3, #4
 8007732:	d003      	beq.n	800773c <USBH_HandleControl+0xcc>
 8007734:	7bbb      	ldrb	r3, [r7, #14]
 8007736:	2b02      	cmp	r3, #2
 8007738:	f040 8100 	bne.w	800793c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	220b      	movs	r2, #11
 8007740:	761a      	strb	r2, [r3, #24]
      break;
 8007742:	e0fb      	b.n	800793c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800774a:	b29a      	uxth	r2, r3
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	6899      	ldr	r1, [r3, #8]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	899a      	ldrh	r2, [r3, #12]
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	791b      	ldrb	r3, [r3, #4]
 800775c:	6878      	ldr	r0, [r7, #4]
 800775e:	f000 f93a 	bl	80079d6 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2204      	movs	r2, #4
 8007766:	761a      	strb	r2, [r3, #24]
      break;
 8007768:	e0f1      	b.n	800794e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	791b      	ldrb	r3, [r3, #4]
 800776e:	4619      	mov	r1, r3
 8007770:	6878      	ldr	r0, [r7, #4]
 8007772:	f000 fc31 	bl	8007fd8 <USBH_LL_GetURBState>
 8007776:	4603      	mov	r3, r0
 8007778:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 800777a:	7bbb      	ldrb	r3, [r7, #14]
 800777c:	2b01      	cmp	r3, #1
 800777e:	d102      	bne.n	8007786 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	2209      	movs	r2, #9
 8007784:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007786:	7bbb      	ldrb	r3, [r7, #14]
 8007788:	2b05      	cmp	r3, #5
 800778a:	d102      	bne.n	8007792 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 800778c:	2303      	movs	r3, #3
 800778e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007790:	e0d6      	b.n	8007940 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007792:	7bbb      	ldrb	r3, [r7, #14]
 8007794:	2b04      	cmp	r3, #4
 8007796:	f040 80d3 	bne.w	8007940 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	220b      	movs	r2, #11
 800779e:	761a      	strb	r2, [r3, #24]
      break;
 80077a0:	e0ce      	b.n	8007940 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	6899      	ldr	r1, [r3, #8]
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	899a      	ldrh	r2, [r3, #12]
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	795b      	ldrb	r3, [r3, #5]
 80077ae:	2001      	movs	r0, #1
 80077b0:	9000      	str	r0, [sp, #0]
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 f8ea 	bl	800798c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80077be:	b29a      	uxth	r2, r3
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2206      	movs	r2, #6
 80077c8:	761a      	strb	r2, [r3, #24]
      break;
 80077ca:	e0c0      	b.n	800794e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	795b      	ldrb	r3, [r3, #5]
 80077d0:	4619      	mov	r1, r3
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 fc00 	bl	8007fd8 <USBH_LL_GetURBState>
 80077d8:	4603      	mov	r3, r0
 80077da:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80077dc:	7bbb      	ldrb	r3, [r7, #14]
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d103      	bne.n	80077ea <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	2207      	movs	r2, #7
 80077e6:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80077e8:	e0ac      	b.n	8007944 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80077ea:	7bbb      	ldrb	r3, [r7, #14]
 80077ec:	2b05      	cmp	r3, #5
 80077ee:	d105      	bne.n	80077fc <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	220c      	movs	r2, #12
 80077f4:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80077f6:	2303      	movs	r3, #3
 80077f8:	73fb      	strb	r3, [r7, #15]
      break;
 80077fa:	e0a3      	b.n	8007944 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80077fc:	7bbb      	ldrb	r3, [r7, #14]
 80077fe:	2b02      	cmp	r3, #2
 8007800:	d103      	bne.n	800780a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	2205      	movs	r2, #5
 8007806:	761a      	strb	r2, [r3, #24]
      break;
 8007808:	e09c      	b.n	8007944 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 800780a:	7bbb      	ldrb	r3, [r7, #14]
 800780c:	2b04      	cmp	r3, #4
 800780e:	f040 8099 	bne.w	8007944 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	220b      	movs	r2, #11
 8007816:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007818:	2302      	movs	r3, #2
 800781a:	73fb      	strb	r3, [r7, #15]
      break;
 800781c:	e092      	b.n	8007944 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	791b      	ldrb	r3, [r3, #4]
 8007822:	2200      	movs	r2, #0
 8007824:	2100      	movs	r1, #0
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f000 f8d5 	bl	80079d6 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007832:	b29a      	uxth	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	2208      	movs	r2, #8
 800783c:	761a      	strb	r2, [r3, #24]

      break;
 800783e:	e086      	b.n	800794e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	791b      	ldrb	r3, [r3, #4]
 8007844:	4619      	mov	r1, r3
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 fbc6 	bl	8007fd8 <USBH_LL_GetURBState>
 800784c:	4603      	mov	r3, r0
 800784e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007850:	7bbb      	ldrb	r3, [r7, #14]
 8007852:	2b01      	cmp	r3, #1
 8007854:	d105      	bne.n	8007862 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	220d      	movs	r2, #13
 800785a:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800785c:	2300      	movs	r3, #0
 800785e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007860:	e072      	b.n	8007948 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007862:	7bbb      	ldrb	r3, [r7, #14]
 8007864:	2b04      	cmp	r3, #4
 8007866:	d103      	bne.n	8007870 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	220b      	movs	r2, #11
 800786c:	761a      	strb	r2, [r3, #24]
      break;
 800786e:	e06b      	b.n	8007948 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007870:	7bbb      	ldrb	r3, [r7, #14]
 8007872:	2b05      	cmp	r3, #5
 8007874:	d168      	bne.n	8007948 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007876:	2303      	movs	r3, #3
 8007878:	73fb      	strb	r3, [r7, #15]
      break;
 800787a:	e065      	b.n	8007948 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	795b      	ldrb	r3, [r3, #5]
 8007880:	2201      	movs	r2, #1
 8007882:	9200      	str	r2, [sp, #0]
 8007884:	2200      	movs	r2, #0
 8007886:	2100      	movs	r1, #0
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 f87f 	bl	800798c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007894:	b29a      	uxth	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	220a      	movs	r2, #10
 800789e:	761a      	strb	r2, [r3, #24]
      break;
 80078a0:	e055      	b.n	800794e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	795b      	ldrb	r3, [r3, #5]
 80078a6:	4619      	mov	r1, r3
 80078a8:	6878      	ldr	r0, [r7, #4]
 80078aa:	f000 fb95 	bl	8007fd8 <USBH_LL_GetURBState>
 80078ae:	4603      	mov	r3, r0
 80078b0:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 80078b2:	7bbb      	ldrb	r3, [r7, #14]
 80078b4:	2b01      	cmp	r3, #1
 80078b6:	d105      	bne.n	80078c4 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80078b8:	2300      	movs	r3, #0
 80078ba:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	220d      	movs	r2, #13
 80078c0:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 80078c2:	e043      	b.n	800794c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80078c4:	7bbb      	ldrb	r3, [r7, #14]
 80078c6:	2b02      	cmp	r3, #2
 80078c8:	d103      	bne.n	80078d2 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2209      	movs	r2, #9
 80078ce:	761a      	strb	r2, [r3, #24]
      break;
 80078d0:	e03c      	b.n	800794c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80078d2:	7bbb      	ldrb	r3, [r7, #14]
 80078d4:	2b04      	cmp	r3, #4
 80078d6:	d139      	bne.n	800794c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	220b      	movs	r2, #11
 80078dc:	761a      	strb	r2, [r3, #24]
      break;
 80078de:	e035      	b.n	800794c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	7e5b      	ldrb	r3, [r3, #25]
 80078e4:	3301      	adds	r3, #1
 80078e6:	b2da      	uxtb	r2, r3
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	765a      	strb	r2, [r3, #25]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	7e5b      	ldrb	r3, [r3, #25]
 80078f0:	2b02      	cmp	r3, #2
 80078f2:	d806      	bhi.n	8007902 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	2201      	movs	r2, #1
 80078fe:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007900:	e025      	b.n	800794e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007908:	2106      	movs	r1, #6
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2200      	movs	r2, #0
 8007912:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	795b      	ldrb	r3, [r3, #5]
 8007918:	4619      	mov	r1, r3
 800791a:	6878      	ldr	r0, [r7, #4]
 800791c:	f000 f90c 	bl	8007b38 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	791b      	ldrb	r3, [r3, #4]
 8007924:	4619      	mov	r1, r3
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 f906 	bl	8007b38 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	2200      	movs	r2, #0
 8007930:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007932:	2302      	movs	r3, #2
 8007934:	73fb      	strb	r3, [r7, #15]
      break;
 8007936:	e00a      	b.n	800794e <USBH_HandleControl+0x2de>

    default:
      break;
 8007938:	bf00      	nop
 800793a:	e008      	b.n	800794e <USBH_HandleControl+0x2de>
      break;
 800793c:	bf00      	nop
 800793e:	e006      	b.n	800794e <USBH_HandleControl+0x2de>
      break;
 8007940:	bf00      	nop
 8007942:	e004      	b.n	800794e <USBH_HandleControl+0x2de>
      break;
 8007944:	bf00      	nop
 8007946:	e002      	b.n	800794e <USBH_HandleControl+0x2de>
      break;
 8007948:	bf00      	nop
 800794a:	e000      	b.n	800794e <USBH_HandleControl+0x2de>
      break;
 800794c:	bf00      	nop
  }

  return status;
 800794e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007950:	4618      	mov	r0, r3
 8007952:	3710      	adds	r7, #16
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b088      	sub	sp, #32
 800795c:	af04      	add	r7, sp, #16
 800795e:	60f8      	str	r0, [r7, #12]
 8007960:	60b9      	str	r1, [r7, #8]
 8007962:	4613      	mov	r3, r2
 8007964:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007966:	79f9      	ldrb	r1, [r7, #7]
 8007968:	2300      	movs	r3, #0
 800796a:	9303      	str	r3, [sp, #12]
 800796c:	2308      	movs	r3, #8
 800796e:	9302      	str	r3, [sp, #8]
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	9301      	str	r3, [sp, #4]
 8007974:	2300      	movs	r3, #0
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	2300      	movs	r3, #0
 800797a:	2200      	movs	r2, #0
 800797c:	68f8      	ldr	r0, [r7, #12]
 800797e:	f000 fafa 	bl	8007f76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007982:	2300      	movs	r3, #0
}
 8007984:	4618      	mov	r0, r3
 8007986:	3710      	adds	r7, #16
 8007988:	46bd      	mov	sp, r7
 800798a:	bd80      	pop	{r7, pc}

0800798c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b088      	sub	sp, #32
 8007990:	af04      	add	r7, sp, #16
 8007992:	60f8      	str	r0, [r7, #12]
 8007994:	60b9      	str	r1, [r7, #8]
 8007996:	4611      	mov	r1, r2
 8007998:	461a      	mov	r2, r3
 800799a:	460b      	mov	r3, r1
 800799c:	80fb      	strh	r3, [r7, #6]
 800799e:	4613      	mov	r3, r2
 80079a0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	d001      	beq.n	80079b0 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 80079ac:	2300      	movs	r3, #0
 80079ae:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80079b0:	7979      	ldrb	r1, [r7, #5]
 80079b2:	7e3b      	ldrb	r3, [r7, #24]
 80079b4:	9303      	str	r3, [sp, #12]
 80079b6:	88fb      	ldrh	r3, [r7, #6]
 80079b8:	9302      	str	r3, [sp, #8]
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	9301      	str	r3, [sp, #4]
 80079be:	2301      	movs	r3, #1
 80079c0:	9300      	str	r3, [sp, #0]
 80079c2:	2300      	movs	r3, #0
 80079c4:	2200      	movs	r2, #0
 80079c6:	68f8      	ldr	r0, [r7, #12]
 80079c8:	f000 fad5 	bl	8007f76 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80079cc:	2300      	movs	r3, #0
}
 80079ce:	4618      	mov	r0, r3
 80079d0:	3710      	adds	r7, #16
 80079d2:	46bd      	mov	sp, r7
 80079d4:	bd80      	pop	{r7, pc}

080079d6 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80079d6:	b580      	push	{r7, lr}
 80079d8:	b088      	sub	sp, #32
 80079da:	af04      	add	r7, sp, #16
 80079dc:	60f8      	str	r0, [r7, #12]
 80079de:	60b9      	str	r1, [r7, #8]
 80079e0:	4611      	mov	r1, r2
 80079e2:	461a      	mov	r2, r3
 80079e4:	460b      	mov	r3, r1
 80079e6:	80fb      	strh	r3, [r7, #6]
 80079e8:	4613      	mov	r3, r2
 80079ea:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80079ec:	7979      	ldrb	r1, [r7, #5]
 80079ee:	2300      	movs	r3, #0
 80079f0:	9303      	str	r3, [sp, #12]
 80079f2:	88fb      	ldrh	r3, [r7, #6]
 80079f4:	9302      	str	r3, [sp, #8]
 80079f6:	68bb      	ldr	r3, [r7, #8]
 80079f8:	9301      	str	r3, [sp, #4]
 80079fa:	2301      	movs	r3, #1
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	2300      	movs	r3, #0
 8007a00:	2201      	movs	r2, #1
 8007a02:	68f8      	ldr	r0, [r7, #12]
 8007a04:	f000 fab7 	bl	8007f76 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007a08:	2300      	movs	r3, #0

}
 8007a0a:	4618      	mov	r0, r3
 8007a0c:	3710      	adds	r7, #16
 8007a0e:	46bd      	mov	sp, r7
 8007a10:	bd80      	pop	{r7, pc}

08007a12 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007a12:	b580      	push	{r7, lr}
 8007a14:	b088      	sub	sp, #32
 8007a16:	af04      	add	r7, sp, #16
 8007a18:	60f8      	str	r0, [r7, #12]
 8007a1a:	60b9      	str	r1, [r7, #8]
 8007a1c:	4611      	mov	r1, r2
 8007a1e:	461a      	mov	r2, r3
 8007a20:	460b      	mov	r3, r1
 8007a22:	80fb      	strh	r3, [r7, #6]
 8007a24:	4613      	mov	r3, r2
 8007a26:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d001      	beq.n	8007a36 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007a32:	2300      	movs	r3, #0
 8007a34:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a36:	7979      	ldrb	r1, [r7, #5]
 8007a38:	7e3b      	ldrb	r3, [r7, #24]
 8007a3a:	9303      	str	r3, [sp, #12]
 8007a3c:	88fb      	ldrh	r3, [r7, #6]
 8007a3e:	9302      	str	r3, [sp, #8]
 8007a40:	68bb      	ldr	r3, [r7, #8]
 8007a42:	9301      	str	r3, [sp, #4]
 8007a44:	2301      	movs	r3, #1
 8007a46:	9300      	str	r3, [sp, #0]
 8007a48:	2302      	movs	r3, #2
 8007a4a:	2200      	movs	r2, #0
 8007a4c:	68f8      	ldr	r0, [r7, #12]
 8007a4e:	f000 fa92 	bl	8007f76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007a52:	2300      	movs	r3, #0
}
 8007a54:	4618      	mov	r0, r3
 8007a56:	3710      	adds	r7, #16
 8007a58:	46bd      	mov	sp, r7
 8007a5a:	bd80      	pop	{r7, pc}

08007a5c <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007a5c:	b580      	push	{r7, lr}
 8007a5e:	b088      	sub	sp, #32
 8007a60:	af04      	add	r7, sp, #16
 8007a62:	60f8      	str	r0, [r7, #12]
 8007a64:	60b9      	str	r1, [r7, #8]
 8007a66:	4611      	mov	r1, r2
 8007a68:	461a      	mov	r2, r3
 8007a6a:	460b      	mov	r3, r1
 8007a6c:	80fb      	strh	r3, [r7, #6]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007a72:	7979      	ldrb	r1, [r7, #5]
 8007a74:	2300      	movs	r3, #0
 8007a76:	9303      	str	r3, [sp, #12]
 8007a78:	88fb      	ldrh	r3, [r7, #6]
 8007a7a:	9302      	str	r3, [sp, #8]
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	9301      	str	r3, [sp, #4]
 8007a80:	2301      	movs	r3, #1
 8007a82:	9300      	str	r3, [sp, #0]
 8007a84:	2302      	movs	r3, #2
 8007a86:	2201      	movs	r2, #1
 8007a88:	68f8      	ldr	r0, [r7, #12]
 8007a8a:	f000 fa74 	bl	8007f76 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007a8e:	2300      	movs	r3, #0
}
 8007a90:	4618      	mov	r0, r3
 8007a92:	3710      	adds	r7, #16
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af04      	add	r7, sp, #16
 8007a9e:	6078      	str	r0, [r7, #4]
 8007aa0:	4608      	mov	r0, r1
 8007aa2:	4611      	mov	r1, r2
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	4603      	mov	r3, r0
 8007aa8:	70fb      	strb	r3, [r7, #3]
 8007aaa:	460b      	mov	r3, r1
 8007aac:	70bb      	strb	r3, [r7, #2]
 8007aae:	4613      	mov	r3, r2
 8007ab0:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007ab2:	7878      	ldrb	r0, [r7, #1]
 8007ab4:	78ba      	ldrb	r2, [r7, #2]
 8007ab6:	78f9      	ldrb	r1, [r7, #3]
 8007ab8:	8b3b      	ldrh	r3, [r7, #24]
 8007aba:	9302      	str	r3, [sp, #8]
 8007abc:	7d3b      	ldrb	r3, [r7, #20]
 8007abe:	9301      	str	r3, [sp, #4]
 8007ac0:	7c3b      	ldrb	r3, [r7, #16]
 8007ac2:	9300      	str	r3, [sp, #0]
 8007ac4:	4603      	mov	r3, r0
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fa07 	bl	8007eda <USBH_LL_OpenPipe>

  return USBH_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}

08007ad6 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007ad6:	b580      	push	{r7, lr}
 8007ad8:	b082      	sub	sp, #8
 8007ada:	af00      	add	r7, sp, #0
 8007adc:	6078      	str	r0, [r7, #4]
 8007ade:	460b      	mov	r3, r1
 8007ae0:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007ae2:	78fb      	ldrb	r3, [r7, #3]
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 fa26 	bl	8007f38 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007aec:	2300      	movs	r3, #0
}
 8007aee:	4618      	mov	r0, r3
 8007af0:	3708      	adds	r7, #8
 8007af2:	46bd      	mov	sp, r7
 8007af4:	bd80      	pop	{r7, pc}

08007af6 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007af6:	b580      	push	{r7, lr}
 8007af8:	b084      	sub	sp, #16
 8007afa:	af00      	add	r7, sp, #0
 8007afc:	6078      	str	r0, [r7, #4]
 8007afe:	460b      	mov	r3, r1
 8007b00:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007b02:	6878      	ldr	r0, [r7, #4]
 8007b04:	f000 f836 	bl	8007b74 <USBH_GetFreePipe>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007b0c:	89fb      	ldrh	r3, [r7, #14]
 8007b0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d00a      	beq.n	8007b2c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007b16:	78fa      	ldrb	r2, [r7, #3]
 8007b18:	89fb      	ldrh	r3, [r7, #14]
 8007b1a:	f003 030f 	and.w	r3, r3, #15
 8007b1e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b22:	6879      	ldr	r1, [r7, #4]
 8007b24:	33e0      	adds	r3, #224	; 0xe0
 8007b26:	009b      	lsls	r3, r3, #2
 8007b28:	440b      	add	r3, r1
 8007b2a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007b2c:	89fb      	ldrh	r3, [r7, #14]
 8007b2e:	b2db      	uxtb	r3, r3
}
 8007b30:	4618      	mov	r0, r3
 8007b32:	3710      	adds	r7, #16
 8007b34:	46bd      	mov	sp, r7
 8007b36:	bd80      	pop	{r7, pc}

08007b38 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
 8007b40:	460b      	mov	r3, r1
 8007b42:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007b44:	78fb      	ldrb	r3, [r7, #3]
 8007b46:	2b0f      	cmp	r3, #15
 8007b48:	d80d      	bhi.n	8007b66 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007b4a:	78fb      	ldrb	r3, [r7, #3]
 8007b4c:	687a      	ldr	r2, [r7, #4]
 8007b4e:	33e0      	adds	r3, #224	; 0xe0
 8007b50:	009b      	lsls	r3, r3, #2
 8007b52:	4413      	add	r3, r2
 8007b54:	685a      	ldr	r2, [r3, #4]
 8007b56:	78fb      	ldrb	r3, [r7, #3]
 8007b58:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007b5c:	6879      	ldr	r1, [r7, #4]
 8007b5e:	33e0      	adds	r3, #224	; 0xe0
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007b66:	2300      	movs	r3, #0
}
 8007b68:	4618      	mov	r0, r3
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007b7c:	2300      	movs	r3, #0
 8007b7e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007b80:	2300      	movs	r3, #0
 8007b82:	73fb      	strb	r3, [r7, #15]
 8007b84:	e00f      	b.n	8007ba6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007b86:	7bfb      	ldrb	r3, [r7, #15]
 8007b88:	687a      	ldr	r2, [r7, #4]
 8007b8a:	33e0      	adds	r3, #224	; 0xe0
 8007b8c:	009b      	lsls	r3, r3, #2
 8007b8e:	4413      	add	r3, r2
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d102      	bne.n	8007ba0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007b9a:	7bfb      	ldrb	r3, [r7, #15]
 8007b9c:	b29b      	uxth	r3, r3
 8007b9e:	e007      	b.n	8007bb0 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007ba0:	7bfb      	ldrb	r3, [r7, #15]
 8007ba2:	3301      	adds	r3, #1
 8007ba4:	73fb      	strb	r3, [r7, #15]
 8007ba6:	7bfb      	ldrb	r3, [r7, #15]
 8007ba8:	2b0f      	cmp	r3, #15
 8007baa:	d9ec      	bls.n	8007b86 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007bac:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	3714      	adds	r7, #20
 8007bb4:	46bd      	mov	sp, r7
 8007bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bba:	4770      	bx	lr

08007bbc <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8007bbc:	b580      	push	{r7, lr}
 8007bbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8007bc0:	2201      	movs	r2, #1
 8007bc2:	490e      	ldr	r1, [pc, #56]	; (8007bfc <MX_USB_HOST_Init+0x40>)
 8007bc4:	480e      	ldr	r0, [pc, #56]	; (8007c00 <MX_USB_HOST_Init+0x44>)
 8007bc6:	f7ff fb37 	bl	8007238 <USBH_Init>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d001      	beq.n	8007bd4 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8007bd0:	f7f9 fd58 	bl	8001684 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8007bd4:	490b      	ldr	r1, [pc, #44]	; (8007c04 <MX_USB_HOST_Init+0x48>)
 8007bd6:	480a      	ldr	r0, [pc, #40]	; (8007c00 <MX_USB_HOST_Init+0x44>)
 8007bd8:	f7ff fbbc 	bl	8007354 <USBH_RegisterClass>
 8007bdc:	4603      	mov	r3, r0
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d001      	beq.n	8007be6 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8007be2:	f7f9 fd4f 	bl	8001684 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8007be6:	4806      	ldr	r0, [pc, #24]	; (8007c00 <MX_USB_HOST_Init+0x44>)
 8007be8:	f7ff fc40 	bl	800746c <USBH_Start>
 8007bec:	4603      	mov	r3, r0
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d001      	beq.n	8007bf6 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8007bf2:	f7f9 fd47 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8007bf6:	bf00      	nop
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	08007c09 	.word	0x08007c09
 8007c00:	20000250 	.word	0x20000250
 8007c04:	20000024 	.word	0x20000024

08007c08 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8007c08:	b480      	push	{r7}
 8007c0a:	b083      	sub	sp, #12
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	460b      	mov	r3, r1
 8007c12:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8007c14:	78fb      	ldrb	r3, [r7, #3]
 8007c16:	3b01      	subs	r3, #1
 8007c18:	2b04      	cmp	r3, #4
 8007c1a:	d819      	bhi.n	8007c50 <USBH_UserProcess+0x48>
 8007c1c:	a201      	add	r2, pc, #4	; (adr r2, 8007c24 <USBH_UserProcess+0x1c>)
 8007c1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c22:	bf00      	nop
 8007c24:	08007c51 	.word	0x08007c51
 8007c28:	08007c41 	.word	0x08007c41
 8007c2c:	08007c51 	.word	0x08007c51
 8007c30:	08007c49 	.word	0x08007c49
 8007c34:	08007c39 	.word	0x08007c39
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8007c38:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <USBH_UserProcess+0x58>)
 8007c3a:	2203      	movs	r2, #3
 8007c3c:	701a      	strb	r2, [r3, #0]
  break;
 8007c3e:	e008      	b.n	8007c52 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8007c40:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <USBH_UserProcess+0x58>)
 8007c42:	2202      	movs	r2, #2
 8007c44:	701a      	strb	r2, [r3, #0]
  break;
 8007c46:	e004      	b.n	8007c52 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8007c48:	4b05      	ldr	r3, [pc, #20]	; (8007c60 <USBH_UserProcess+0x58>)
 8007c4a:	2201      	movs	r2, #1
 8007c4c:	701a      	strb	r2, [r3, #0]
  break;
 8007c4e:	e000      	b.n	8007c52 <USBH_UserProcess+0x4a>

  default:
  break;
 8007c50:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8007c52:	bf00      	nop
 8007c54:	370c      	adds	r7, #12
 8007c56:	46bd      	mov	sp, r7
 8007c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5c:	4770      	bx	lr
 8007c5e:	bf00      	nop
 8007c60:	20000628 	.word	0x20000628

08007c64 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8007c64:	b580      	push	{r7, lr}
 8007c66:	b08a      	sub	sp, #40	; 0x28
 8007c68:	af00      	add	r7, sp, #0
 8007c6a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007c6c:	f107 0314 	add.w	r3, r7, #20
 8007c70:	2200      	movs	r2, #0
 8007c72:	601a      	str	r2, [r3, #0]
 8007c74:	605a      	str	r2, [r3, #4]
 8007c76:	609a      	str	r2, [r3, #8]
 8007c78:	60da      	str	r2, [r3, #12]
 8007c7a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007c84:	d147      	bne.n	8007d16 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007c86:	2300      	movs	r3, #0
 8007c88:	613b      	str	r3, [r7, #16]
 8007c8a:	4b25      	ldr	r3, [pc, #148]	; (8007d20 <HAL_HCD_MspInit+0xbc>)
 8007c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c8e:	4a24      	ldr	r2, [pc, #144]	; (8007d20 <HAL_HCD_MspInit+0xbc>)
 8007c90:	f043 0301 	orr.w	r3, r3, #1
 8007c94:	6313      	str	r3, [r2, #48]	; 0x30
 8007c96:	4b22      	ldr	r3, [pc, #136]	; (8007d20 <HAL_HCD_MspInit+0xbc>)
 8007c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c9a:	f003 0301 	and.w	r3, r3, #1
 8007c9e:	613b      	str	r3, [r7, #16]
 8007ca0:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8007ca2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007ca6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007ca8:	2300      	movs	r3, #0
 8007caa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cac:	2300      	movs	r3, #0
 8007cae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8007cb0:	f107 0314 	add.w	r3, r7, #20
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	481b      	ldr	r0, [pc, #108]	; (8007d24 <HAL_HCD_MspInit+0xc0>)
 8007cb8:	f7fa fca2 	bl	8002600 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8007cbc:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8007cc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007cc2:	2302      	movs	r3, #2
 8007cc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007cc6:	2300      	movs	r3, #0
 8007cc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007cca:	2300      	movs	r3, #0
 8007ccc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007cce:	230a      	movs	r3, #10
 8007cd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007cd2:	f107 0314 	add.w	r3, r7, #20
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	4812      	ldr	r0, [pc, #72]	; (8007d24 <HAL_HCD_MspInit+0xc0>)
 8007cda:	f7fa fc91 	bl	8002600 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007cde:	4b10      	ldr	r3, [pc, #64]	; (8007d20 <HAL_HCD_MspInit+0xbc>)
 8007ce0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ce2:	4a0f      	ldr	r2, [pc, #60]	; (8007d20 <HAL_HCD_MspInit+0xbc>)
 8007ce4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007ce8:	6353      	str	r3, [r2, #52]	; 0x34
 8007cea:	2300      	movs	r3, #0
 8007cec:	60fb      	str	r3, [r7, #12]
 8007cee:	4b0c      	ldr	r3, [pc, #48]	; (8007d20 <HAL_HCD_MspInit+0xbc>)
 8007cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cf2:	4a0b      	ldr	r2, [pc, #44]	; (8007d20 <HAL_HCD_MspInit+0xbc>)
 8007cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8007cfa:	4b09      	ldr	r3, [pc, #36]	; (8007d20 <HAL_HCD_MspInit+0xbc>)
 8007cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007d02:	60fb      	str	r3, [r7, #12]
 8007d04:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007d06:	2200      	movs	r2, #0
 8007d08:	2100      	movs	r1, #0
 8007d0a:	2043      	movs	r0, #67	; 0x43
 8007d0c:	f7fa fc41 	bl	8002592 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007d10:	2043      	movs	r0, #67	; 0x43
 8007d12:	f7fa fc5a 	bl	80025ca <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007d16:	bf00      	nop
 8007d18:	3728      	adds	r7, #40	; 0x28
 8007d1a:	46bd      	mov	sp, r7
 8007d1c:	bd80      	pop	{r7, pc}
 8007d1e:	bf00      	nop
 8007d20:	40023800 	.word	0x40023800
 8007d24:	40020000 	.word	0x40020000

08007d28 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d28:	b580      	push	{r7, lr}
 8007d2a:	b082      	sub	sp, #8
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007d36:	4618      	mov	r0, r3
 8007d38:	f7ff fbb7 	bl	80074aa <USBH_LL_IncTimer>
}
 8007d3c:	bf00      	nop
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}

08007d44 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b082      	sub	sp, #8
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007d52:	4618      	mov	r0, r3
 8007d54:	f7ff fbef 	bl	8007536 <USBH_LL_Connect>
}
 8007d58:	bf00      	nop
 8007d5a:	3708      	adds	r7, #8
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	bd80      	pop	{r7, pc}

08007d60 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d60:	b580      	push	{r7, lr}
 8007d62:	b082      	sub	sp, #8
 8007d64:	af00      	add	r7, sp, #0
 8007d66:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7ff fbf8 	bl	8007564 <USBH_LL_Disconnect>
}
 8007d74:	bf00      	nop
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 8007d7c:	b480      	push	{r7}
 8007d7e:	b083      	sub	sp, #12
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
 8007d84:	460b      	mov	r3, r1
 8007d86:	70fb      	strb	r3, [r7, #3]
 8007d88:	4613      	mov	r3, r2
 8007d8a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 8007d8c:	bf00      	nop
 8007d8e:	370c      	adds	r7, #12
 8007d90:	46bd      	mov	sp, r7
 8007d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d96:	4770      	bx	lr

08007d98 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007d98:	b580      	push	{r7, lr}
 8007d9a:	b082      	sub	sp, #8
 8007d9c:	af00      	add	r7, sp, #0
 8007d9e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007da6:	4618      	mov	r0, r3
 8007da8:	f7ff fba9 	bl	80074fe <USBH_LL_PortEnabled>
}
 8007dac:	bf00      	nop
 8007dae:	3708      	adds	r7, #8
 8007db0:	46bd      	mov	sp, r7
 8007db2:	bd80      	pop	{r7, pc}

08007db4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8007db4:	b580      	push	{r7, lr}
 8007db6:	b082      	sub	sp, #8
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8007dc2:	4618      	mov	r0, r3
 8007dc4:	f7ff fba9 	bl	800751a <USBH_LL_PortDisabled>
}
 8007dc8:	bf00      	nop
 8007dca:	3708      	adds	r7, #8
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	bd80      	pop	{r7, pc}

08007dd0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b082      	sub	sp, #8
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8007dde:	2b01      	cmp	r3, #1
 8007de0:	d12a      	bne.n	8007e38 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8007de2:	4a18      	ldr	r2, [pc, #96]	; (8007e44 <USBH_LL_Init+0x74>)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a15      	ldr	r2, [pc, #84]	; (8007e44 <USBH_LL_Init+0x74>)
 8007dee:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007df2:	4b14      	ldr	r3, [pc, #80]	; (8007e44 <USBH_LL_Init+0x74>)
 8007df4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007df8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8007dfa:	4b12      	ldr	r3, [pc, #72]	; (8007e44 <USBH_LL_Init+0x74>)
 8007dfc:	2208      	movs	r2, #8
 8007dfe:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8007e00:	4b10      	ldr	r3, [pc, #64]	; (8007e44 <USBH_LL_Init+0x74>)
 8007e02:	2201      	movs	r2, #1
 8007e04:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007e06:	4b0f      	ldr	r3, [pc, #60]	; (8007e44 <USBH_LL_Init+0x74>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8007e0c:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <USBH_LL_Init+0x74>)
 8007e0e:	2202      	movs	r2, #2
 8007e10:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007e12:	4b0c      	ldr	r3, [pc, #48]	; (8007e44 <USBH_LL_Init+0x74>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8007e18:	480a      	ldr	r0, [pc, #40]	; (8007e44 <USBH_LL_Init+0x74>)
 8007e1a:	f7fa fda6 	bl	800296a <HAL_HCD_Init>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8007e24:	f7f9 fc2e 	bl	8001684 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8007e28:	4806      	ldr	r0, [pc, #24]	; (8007e44 <USBH_LL_Init+0x74>)
 8007e2a:	f7fb f97c 	bl	8003126 <HAL_HCD_GetCurrentFrame>
 8007e2e:	4603      	mov	r3, r0
 8007e30:	4619      	mov	r1, r3
 8007e32:	6878      	ldr	r0, [r7, #4]
 8007e34:	f7ff fb2a 	bl	800748c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8007e38:	2300      	movs	r3, #0
}
 8007e3a:	4618      	mov	r0, r3
 8007e3c:	3708      	adds	r7, #8
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}
 8007e42:	bf00      	nop
 8007e44:	2000062c 	.word	0x2000062c

08007e48 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8007e48:	b580      	push	{r7, lr}
 8007e4a:	b084      	sub	sp, #16
 8007e4c:	af00      	add	r7, sp, #0
 8007e4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e54:	2300      	movs	r3, #0
 8007e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fb f8f9 	bl	8003056 <HAL_HCD_Start>
 8007e64:	4603      	mov	r3, r0
 8007e66:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007e68:	7bfb      	ldrb	r3, [r7, #15]
 8007e6a:	4618      	mov	r0, r3
 8007e6c:	f000 f90e 	bl	800808c <USBH_Get_USB_Status>
 8007e70:	4603      	mov	r3, r0
 8007e72:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e74:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e76:	4618      	mov	r0, r3
 8007e78:	3710      	adds	r7, #16
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	bd80      	pop	{r7, pc}

08007e7e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 8007e7e:	b580      	push	{r7, lr}
 8007e80:	b084      	sub	sp, #16
 8007e82:	af00      	add	r7, sp, #0
 8007e84:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007e8a:	2300      	movs	r3, #0
 8007e8c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fb f901 	bl	800309c <HAL_HCD_Stop>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 f8f3 	bl	800808c <USBH_Get_USB_Status>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b082      	sub	sp, #8
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007ec6:	78fa      	ldrb	r2, [r7, #3]
 8007ec8:	4611      	mov	r1, r2
 8007eca:	4618      	mov	r0, r3
 8007ecc:	f7fb f917 	bl	80030fe <HAL_HCD_HC_GetXferCount>
 8007ed0:	4603      	mov	r3, r0
}
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	3708      	adds	r7, #8
 8007ed6:	46bd      	mov	sp, r7
 8007ed8:	bd80      	pop	{r7, pc}

08007eda <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007eda:	b590      	push	{r4, r7, lr}
 8007edc:	b089      	sub	sp, #36	; 0x24
 8007ede:	af04      	add	r7, sp, #16
 8007ee0:	6078      	str	r0, [r7, #4]
 8007ee2:	4608      	mov	r0, r1
 8007ee4:	4611      	mov	r1, r2
 8007ee6:	461a      	mov	r2, r3
 8007ee8:	4603      	mov	r3, r0
 8007eea:	70fb      	strb	r3, [r7, #3]
 8007eec:	460b      	mov	r3, r1
 8007eee:	70bb      	strb	r3, [r7, #2]
 8007ef0:	4613      	mov	r3, r2
 8007ef2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ef4:	2300      	movs	r3, #0
 8007ef6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007f02:	787c      	ldrb	r4, [r7, #1]
 8007f04:	78ba      	ldrb	r2, [r7, #2]
 8007f06:	78f9      	ldrb	r1, [r7, #3]
 8007f08:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007f0a:	9302      	str	r3, [sp, #8]
 8007f0c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8007f10:	9301      	str	r3, [sp, #4]
 8007f12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007f16:	9300      	str	r3, [sp, #0]
 8007f18:	4623      	mov	r3, r4
 8007f1a:	f7fa fd88 	bl	8002a2e <HAL_HCD_HC_Init>
 8007f1e:	4603      	mov	r3, r0
 8007f20:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f22:	7bfb      	ldrb	r3, [r7, #15]
 8007f24:	4618      	mov	r0, r3
 8007f26:	f000 f8b1 	bl	800808c <USBH_Get_USB_Status>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f2e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3714      	adds	r7, #20
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd90      	pop	{r4, r7, pc}

08007f38 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b084      	sub	sp, #16
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	460b      	mov	r3, r1
 8007f42:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f44:	2300      	movs	r3, #0
 8007f46:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f48:	2300      	movs	r3, #0
 8007f4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007f52:	78fa      	ldrb	r2, [r7, #3]
 8007f54:	4611      	mov	r1, r2
 8007f56:	4618      	mov	r0, r3
 8007f58:	f7fa fdf8 	bl	8002b4c <HAL_HCD_HC_Halt>
 8007f5c:	4603      	mov	r3, r0
 8007f5e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8007f60:	7bfb      	ldrb	r3, [r7, #15]
 8007f62:	4618      	mov	r0, r3
 8007f64:	f000 f892 	bl	800808c <USBH_Get_USB_Status>
 8007f68:	4603      	mov	r3, r0
 8007f6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3710      	adds	r7, #16
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}

08007f76 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8007f76:	b590      	push	{r4, r7, lr}
 8007f78:	b089      	sub	sp, #36	; 0x24
 8007f7a:	af04      	add	r7, sp, #16
 8007f7c:	6078      	str	r0, [r7, #4]
 8007f7e:	4608      	mov	r0, r1
 8007f80:	4611      	mov	r1, r2
 8007f82:	461a      	mov	r2, r3
 8007f84:	4603      	mov	r3, r0
 8007f86:	70fb      	strb	r3, [r7, #3]
 8007f88:	460b      	mov	r3, r1
 8007f8a:	70bb      	strb	r3, [r7, #2]
 8007f8c:	4613      	mov	r3, r2
 8007f8e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f90:	2300      	movs	r3, #0
 8007f92:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8007f9e:	787c      	ldrb	r4, [r7, #1]
 8007fa0:	78ba      	ldrb	r2, [r7, #2]
 8007fa2:	78f9      	ldrb	r1, [r7, #3]
 8007fa4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007fa8:	9303      	str	r3, [sp, #12]
 8007faa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8007fac:	9302      	str	r3, [sp, #8]
 8007fae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fb0:	9301      	str	r3, [sp, #4]
 8007fb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8007fb6:	9300      	str	r3, [sp, #0]
 8007fb8:	4623      	mov	r3, r4
 8007fba:	f7fa fdeb 	bl	8002b94 <HAL_HCD_HC_SubmitRequest>
 8007fbe:	4603      	mov	r3, r0
 8007fc0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8007fc2:	7bfb      	ldrb	r3, [r7, #15]
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	f000 f861 	bl	800808c <USBH_Get_USB_Status>
 8007fca:	4603      	mov	r3, r0
 8007fcc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fce:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fd0:	4618      	mov	r0, r3
 8007fd2:	3714      	adds	r7, #20
 8007fd4:	46bd      	mov	sp, r7
 8007fd6:	bd90      	pop	{r4, r7, pc}

08007fd8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8007fd8:	b580      	push	{r7, lr}
 8007fda:	b082      	sub	sp, #8
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	460b      	mov	r3, r1
 8007fe2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8007fea:	78fa      	ldrb	r2, [r7, #3]
 8007fec:	4611      	mov	r1, r2
 8007fee:	4618      	mov	r0, r3
 8007ff0:	f7fb f871 	bl	80030d6 <HAL_HCD_HC_GetURBState>
 8007ff4:	4603      	mov	r3, r0
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3708      	adds	r7, #8
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b082      	sub	sp, #8
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
 8008006:	460b      	mov	r3, r1
 8008008:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008010:	2b01      	cmp	r3, #1
 8008012:	d103      	bne.n	800801c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008014:	78fb      	ldrb	r3, [r7, #3]
 8008016:	4618      	mov	r0, r3
 8008018:	f000 f864 	bl	80080e4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800801c:	20c8      	movs	r0, #200	; 0xc8
 800801e:	f7f9 fded 	bl	8001bfc <HAL_Delay>
  return USBH_OK;
 8008022:	2300      	movs	r3, #0
}
 8008024:	4618      	mov	r0, r3
 8008026:	3708      	adds	r7, #8
 8008028:	46bd      	mov	sp, r7
 800802a:	bd80      	pop	{r7, pc}

0800802c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
 8008038:	4613      	mov	r3, r2
 800803a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008042:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008044:	78fb      	ldrb	r3, [r7, #3]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	212c      	movs	r1, #44	; 0x2c
 800804a:	fb01 f303 	mul.w	r3, r1, r3
 800804e:	4413      	add	r3, r2
 8008050:	333b      	adds	r3, #59	; 0x3b
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	2b00      	cmp	r3, #0
 8008056:	d009      	beq.n	800806c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008058:	78fb      	ldrb	r3, [r7, #3]
 800805a:	68fa      	ldr	r2, [r7, #12]
 800805c:	212c      	movs	r1, #44	; 0x2c
 800805e:	fb01 f303 	mul.w	r3, r1, r3
 8008062:	4413      	add	r3, r2
 8008064:	3354      	adds	r3, #84	; 0x54
 8008066:	78ba      	ldrb	r2, [r7, #2]
 8008068:	701a      	strb	r2, [r3, #0]
 800806a:	e008      	b.n	800807e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800806c:	78fb      	ldrb	r3, [r7, #3]
 800806e:	68fa      	ldr	r2, [r7, #12]
 8008070:	212c      	movs	r1, #44	; 0x2c
 8008072:	fb01 f303 	mul.w	r3, r1, r3
 8008076:	4413      	add	r3, r2
 8008078:	3355      	adds	r3, #85	; 0x55
 800807a:	78ba      	ldrb	r2, [r7, #2]
 800807c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800807e:	2300      	movs	r3, #0
}
 8008080:	4618      	mov	r0, r3
 8008082:	3714      	adds	r7, #20
 8008084:	46bd      	mov	sp, r7
 8008086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808a:	4770      	bx	lr

0800808c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800808c:	b480      	push	{r7}
 800808e:	b085      	sub	sp, #20
 8008090:	af00      	add	r7, sp, #0
 8008092:	4603      	mov	r3, r0
 8008094:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008096:	2300      	movs	r3, #0
 8008098:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800809a:	79fb      	ldrb	r3, [r7, #7]
 800809c:	2b03      	cmp	r3, #3
 800809e:	d817      	bhi.n	80080d0 <USBH_Get_USB_Status+0x44>
 80080a0:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <USBH_Get_USB_Status+0x1c>)
 80080a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a6:	bf00      	nop
 80080a8:	080080b9 	.word	0x080080b9
 80080ac:	080080bf 	.word	0x080080bf
 80080b0:	080080c5 	.word	0x080080c5
 80080b4:	080080cb 	.word	0x080080cb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80080b8:	2300      	movs	r3, #0
 80080ba:	73fb      	strb	r3, [r7, #15]
    break;
 80080bc:	e00b      	b.n	80080d6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80080be:	2302      	movs	r3, #2
 80080c0:	73fb      	strb	r3, [r7, #15]
    break;
 80080c2:	e008      	b.n	80080d6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80080c4:	2301      	movs	r3, #1
 80080c6:	73fb      	strb	r3, [r7, #15]
    break;
 80080c8:	e005      	b.n	80080d6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80080ca:	2302      	movs	r3, #2
 80080cc:	73fb      	strb	r3, [r7, #15]
    break;
 80080ce:	e002      	b.n	80080d6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80080d0:	2302      	movs	r3, #2
 80080d2:	73fb      	strb	r3, [r7, #15]
    break;
 80080d4:	bf00      	nop
  }
  return usb_status;
 80080d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080d8:	4618      	mov	r0, r3
 80080da:	3714      	adds	r7, #20
 80080dc:	46bd      	mov	sp, r7
 80080de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e2:	4770      	bx	lr

080080e4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80080e4:	b580      	push	{r7, lr}
 80080e6:	b084      	sub	sp, #16
 80080e8:	af00      	add	r7, sp, #0
 80080ea:	4603      	mov	r3, r0
 80080ec:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80080ee:	79fb      	ldrb	r3, [r7, #7]
 80080f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80080f2:	79fb      	ldrb	r3, [r7, #7]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d102      	bne.n	80080fe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80080f8:	2300      	movs	r3, #0
 80080fa:	73fb      	strb	r3, [r7, #15]
 80080fc:	e001      	b.n	8008102 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80080fe:	2301      	movs	r3, #1
 8008100:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008102:	7bfb      	ldrb	r3, [r7, #15]
 8008104:	461a      	mov	r2, r3
 8008106:	2101      	movs	r1, #1
 8008108:	4803      	ldr	r0, [pc, #12]	; (8008118 <MX_DriverVbusFS+0x34>)
 800810a:	f7fa fc15 	bl	8002938 <HAL_GPIO_WritePin>
}
 800810e:	bf00      	nop
 8008110:	3710      	adds	r7, #16
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	40020800 	.word	0x40020800

0800811c <__errno>:
 800811c:	4b01      	ldr	r3, [pc, #4]	; (8008124 <__errno+0x8>)
 800811e:	6818      	ldr	r0, [r3, #0]
 8008120:	4770      	bx	lr
 8008122:	bf00      	nop
 8008124:	20000044 	.word	0x20000044

08008128 <__libc_init_array>:
 8008128:	b570      	push	{r4, r5, r6, lr}
 800812a:	4d0d      	ldr	r5, [pc, #52]	; (8008160 <__libc_init_array+0x38>)
 800812c:	4c0d      	ldr	r4, [pc, #52]	; (8008164 <__libc_init_array+0x3c>)
 800812e:	1b64      	subs	r4, r4, r5
 8008130:	10a4      	asrs	r4, r4, #2
 8008132:	2600      	movs	r6, #0
 8008134:	42a6      	cmp	r6, r4
 8008136:	d109      	bne.n	800814c <__libc_init_array+0x24>
 8008138:	4d0b      	ldr	r5, [pc, #44]	; (8008168 <__libc_init_array+0x40>)
 800813a:	4c0c      	ldr	r4, [pc, #48]	; (800816c <__libc_init_array+0x44>)
 800813c:	f000 fc9e 	bl	8008a7c <_init>
 8008140:	1b64      	subs	r4, r4, r5
 8008142:	10a4      	asrs	r4, r4, #2
 8008144:	2600      	movs	r6, #0
 8008146:	42a6      	cmp	r6, r4
 8008148:	d105      	bne.n	8008156 <__libc_init_array+0x2e>
 800814a:	bd70      	pop	{r4, r5, r6, pc}
 800814c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008150:	4798      	blx	r3
 8008152:	3601      	adds	r6, #1
 8008154:	e7ee      	b.n	8008134 <__libc_init_array+0xc>
 8008156:	f855 3b04 	ldr.w	r3, [r5], #4
 800815a:	4798      	blx	r3
 800815c:	3601      	adds	r6, #1
 800815e:	e7f2      	b.n	8008146 <__libc_init_array+0x1e>
 8008160:	08008b04 	.word	0x08008b04
 8008164:	08008b04 	.word	0x08008b04
 8008168:	08008b04 	.word	0x08008b04
 800816c:	08008b08 	.word	0x08008b08

08008170 <malloc>:
 8008170:	4b02      	ldr	r3, [pc, #8]	; (800817c <malloc+0xc>)
 8008172:	4601      	mov	r1, r0
 8008174:	6818      	ldr	r0, [r3, #0]
 8008176:	f000 b87f 	b.w	8008278 <_malloc_r>
 800817a:	bf00      	nop
 800817c:	20000044 	.word	0x20000044

08008180 <free>:
 8008180:	4b02      	ldr	r3, [pc, #8]	; (800818c <free+0xc>)
 8008182:	4601      	mov	r1, r0
 8008184:	6818      	ldr	r0, [r3, #0]
 8008186:	f000 b80b 	b.w	80081a0 <_free_r>
 800818a:	bf00      	nop
 800818c:	20000044 	.word	0x20000044

08008190 <memset>:
 8008190:	4402      	add	r2, r0
 8008192:	4603      	mov	r3, r0
 8008194:	4293      	cmp	r3, r2
 8008196:	d100      	bne.n	800819a <memset+0xa>
 8008198:	4770      	bx	lr
 800819a:	f803 1b01 	strb.w	r1, [r3], #1
 800819e:	e7f9      	b.n	8008194 <memset+0x4>

080081a0 <_free_r>:
 80081a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80081a2:	2900      	cmp	r1, #0
 80081a4:	d044      	beq.n	8008230 <_free_r+0x90>
 80081a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80081aa:	9001      	str	r0, [sp, #4]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	f1a1 0404 	sub.w	r4, r1, #4
 80081b2:	bfb8      	it	lt
 80081b4:	18e4      	addlt	r4, r4, r3
 80081b6:	f000 f903 	bl	80083c0 <__malloc_lock>
 80081ba:	4a1e      	ldr	r2, [pc, #120]	; (8008234 <_free_r+0x94>)
 80081bc:	9801      	ldr	r0, [sp, #4]
 80081be:	6813      	ldr	r3, [r2, #0]
 80081c0:	b933      	cbnz	r3, 80081d0 <_free_r+0x30>
 80081c2:	6063      	str	r3, [r4, #4]
 80081c4:	6014      	str	r4, [r2, #0]
 80081c6:	b003      	add	sp, #12
 80081c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081cc:	f000 b8fe 	b.w	80083cc <__malloc_unlock>
 80081d0:	42a3      	cmp	r3, r4
 80081d2:	d908      	bls.n	80081e6 <_free_r+0x46>
 80081d4:	6825      	ldr	r5, [r4, #0]
 80081d6:	1961      	adds	r1, r4, r5
 80081d8:	428b      	cmp	r3, r1
 80081da:	bf01      	itttt	eq
 80081dc:	6819      	ldreq	r1, [r3, #0]
 80081de:	685b      	ldreq	r3, [r3, #4]
 80081e0:	1949      	addeq	r1, r1, r5
 80081e2:	6021      	streq	r1, [r4, #0]
 80081e4:	e7ed      	b.n	80081c2 <_free_r+0x22>
 80081e6:	461a      	mov	r2, r3
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	b10b      	cbz	r3, 80081f0 <_free_r+0x50>
 80081ec:	42a3      	cmp	r3, r4
 80081ee:	d9fa      	bls.n	80081e6 <_free_r+0x46>
 80081f0:	6811      	ldr	r1, [r2, #0]
 80081f2:	1855      	adds	r5, r2, r1
 80081f4:	42a5      	cmp	r5, r4
 80081f6:	d10b      	bne.n	8008210 <_free_r+0x70>
 80081f8:	6824      	ldr	r4, [r4, #0]
 80081fa:	4421      	add	r1, r4
 80081fc:	1854      	adds	r4, r2, r1
 80081fe:	42a3      	cmp	r3, r4
 8008200:	6011      	str	r1, [r2, #0]
 8008202:	d1e0      	bne.n	80081c6 <_free_r+0x26>
 8008204:	681c      	ldr	r4, [r3, #0]
 8008206:	685b      	ldr	r3, [r3, #4]
 8008208:	6053      	str	r3, [r2, #4]
 800820a:	4421      	add	r1, r4
 800820c:	6011      	str	r1, [r2, #0]
 800820e:	e7da      	b.n	80081c6 <_free_r+0x26>
 8008210:	d902      	bls.n	8008218 <_free_r+0x78>
 8008212:	230c      	movs	r3, #12
 8008214:	6003      	str	r3, [r0, #0]
 8008216:	e7d6      	b.n	80081c6 <_free_r+0x26>
 8008218:	6825      	ldr	r5, [r4, #0]
 800821a:	1961      	adds	r1, r4, r5
 800821c:	428b      	cmp	r3, r1
 800821e:	bf04      	itt	eq
 8008220:	6819      	ldreq	r1, [r3, #0]
 8008222:	685b      	ldreq	r3, [r3, #4]
 8008224:	6063      	str	r3, [r4, #4]
 8008226:	bf04      	itt	eq
 8008228:	1949      	addeq	r1, r1, r5
 800822a:	6021      	streq	r1, [r4, #0]
 800822c:	6054      	str	r4, [r2, #4]
 800822e:	e7ca      	b.n	80081c6 <_free_r+0x26>
 8008230:	b003      	add	sp, #12
 8008232:	bd30      	pop	{r4, r5, pc}
 8008234:	20000930 	.word	0x20000930

08008238 <sbrk_aligned>:
 8008238:	b570      	push	{r4, r5, r6, lr}
 800823a:	4e0e      	ldr	r6, [pc, #56]	; (8008274 <sbrk_aligned+0x3c>)
 800823c:	460c      	mov	r4, r1
 800823e:	6831      	ldr	r1, [r6, #0]
 8008240:	4605      	mov	r5, r0
 8008242:	b911      	cbnz	r1, 800824a <sbrk_aligned+0x12>
 8008244:	f000 f88c 	bl	8008360 <_sbrk_r>
 8008248:	6030      	str	r0, [r6, #0]
 800824a:	4621      	mov	r1, r4
 800824c:	4628      	mov	r0, r5
 800824e:	f000 f887 	bl	8008360 <_sbrk_r>
 8008252:	1c43      	adds	r3, r0, #1
 8008254:	d00a      	beq.n	800826c <sbrk_aligned+0x34>
 8008256:	1cc4      	adds	r4, r0, #3
 8008258:	f024 0403 	bic.w	r4, r4, #3
 800825c:	42a0      	cmp	r0, r4
 800825e:	d007      	beq.n	8008270 <sbrk_aligned+0x38>
 8008260:	1a21      	subs	r1, r4, r0
 8008262:	4628      	mov	r0, r5
 8008264:	f000 f87c 	bl	8008360 <_sbrk_r>
 8008268:	3001      	adds	r0, #1
 800826a:	d101      	bne.n	8008270 <sbrk_aligned+0x38>
 800826c:	f04f 34ff 	mov.w	r4, #4294967295
 8008270:	4620      	mov	r0, r4
 8008272:	bd70      	pop	{r4, r5, r6, pc}
 8008274:	20000934 	.word	0x20000934

08008278 <_malloc_r>:
 8008278:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800827c:	1ccd      	adds	r5, r1, #3
 800827e:	f025 0503 	bic.w	r5, r5, #3
 8008282:	3508      	adds	r5, #8
 8008284:	2d0c      	cmp	r5, #12
 8008286:	bf38      	it	cc
 8008288:	250c      	movcc	r5, #12
 800828a:	2d00      	cmp	r5, #0
 800828c:	4607      	mov	r7, r0
 800828e:	db01      	blt.n	8008294 <_malloc_r+0x1c>
 8008290:	42a9      	cmp	r1, r5
 8008292:	d905      	bls.n	80082a0 <_malloc_r+0x28>
 8008294:	230c      	movs	r3, #12
 8008296:	603b      	str	r3, [r7, #0]
 8008298:	2600      	movs	r6, #0
 800829a:	4630      	mov	r0, r6
 800829c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082a0:	4e2e      	ldr	r6, [pc, #184]	; (800835c <_malloc_r+0xe4>)
 80082a2:	f000 f88d 	bl	80083c0 <__malloc_lock>
 80082a6:	6833      	ldr	r3, [r6, #0]
 80082a8:	461c      	mov	r4, r3
 80082aa:	bb34      	cbnz	r4, 80082fa <_malloc_r+0x82>
 80082ac:	4629      	mov	r1, r5
 80082ae:	4638      	mov	r0, r7
 80082b0:	f7ff ffc2 	bl	8008238 <sbrk_aligned>
 80082b4:	1c43      	adds	r3, r0, #1
 80082b6:	4604      	mov	r4, r0
 80082b8:	d14d      	bne.n	8008356 <_malloc_r+0xde>
 80082ba:	6834      	ldr	r4, [r6, #0]
 80082bc:	4626      	mov	r6, r4
 80082be:	2e00      	cmp	r6, #0
 80082c0:	d140      	bne.n	8008344 <_malloc_r+0xcc>
 80082c2:	6823      	ldr	r3, [r4, #0]
 80082c4:	4631      	mov	r1, r6
 80082c6:	4638      	mov	r0, r7
 80082c8:	eb04 0803 	add.w	r8, r4, r3
 80082cc:	f000 f848 	bl	8008360 <_sbrk_r>
 80082d0:	4580      	cmp	r8, r0
 80082d2:	d13a      	bne.n	800834a <_malloc_r+0xd2>
 80082d4:	6821      	ldr	r1, [r4, #0]
 80082d6:	3503      	adds	r5, #3
 80082d8:	1a6d      	subs	r5, r5, r1
 80082da:	f025 0503 	bic.w	r5, r5, #3
 80082de:	3508      	adds	r5, #8
 80082e0:	2d0c      	cmp	r5, #12
 80082e2:	bf38      	it	cc
 80082e4:	250c      	movcc	r5, #12
 80082e6:	4629      	mov	r1, r5
 80082e8:	4638      	mov	r0, r7
 80082ea:	f7ff ffa5 	bl	8008238 <sbrk_aligned>
 80082ee:	3001      	adds	r0, #1
 80082f0:	d02b      	beq.n	800834a <_malloc_r+0xd2>
 80082f2:	6823      	ldr	r3, [r4, #0]
 80082f4:	442b      	add	r3, r5
 80082f6:	6023      	str	r3, [r4, #0]
 80082f8:	e00e      	b.n	8008318 <_malloc_r+0xa0>
 80082fa:	6822      	ldr	r2, [r4, #0]
 80082fc:	1b52      	subs	r2, r2, r5
 80082fe:	d41e      	bmi.n	800833e <_malloc_r+0xc6>
 8008300:	2a0b      	cmp	r2, #11
 8008302:	d916      	bls.n	8008332 <_malloc_r+0xba>
 8008304:	1961      	adds	r1, r4, r5
 8008306:	42a3      	cmp	r3, r4
 8008308:	6025      	str	r5, [r4, #0]
 800830a:	bf18      	it	ne
 800830c:	6059      	strne	r1, [r3, #4]
 800830e:	6863      	ldr	r3, [r4, #4]
 8008310:	bf08      	it	eq
 8008312:	6031      	streq	r1, [r6, #0]
 8008314:	5162      	str	r2, [r4, r5]
 8008316:	604b      	str	r3, [r1, #4]
 8008318:	4638      	mov	r0, r7
 800831a:	f104 060b 	add.w	r6, r4, #11
 800831e:	f000 f855 	bl	80083cc <__malloc_unlock>
 8008322:	f026 0607 	bic.w	r6, r6, #7
 8008326:	1d23      	adds	r3, r4, #4
 8008328:	1af2      	subs	r2, r6, r3
 800832a:	d0b6      	beq.n	800829a <_malloc_r+0x22>
 800832c:	1b9b      	subs	r3, r3, r6
 800832e:	50a3      	str	r3, [r4, r2]
 8008330:	e7b3      	b.n	800829a <_malloc_r+0x22>
 8008332:	6862      	ldr	r2, [r4, #4]
 8008334:	42a3      	cmp	r3, r4
 8008336:	bf0c      	ite	eq
 8008338:	6032      	streq	r2, [r6, #0]
 800833a:	605a      	strne	r2, [r3, #4]
 800833c:	e7ec      	b.n	8008318 <_malloc_r+0xa0>
 800833e:	4623      	mov	r3, r4
 8008340:	6864      	ldr	r4, [r4, #4]
 8008342:	e7b2      	b.n	80082aa <_malloc_r+0x32>
 8008344:	4634      	mov	r4, r6
 8008346:	6876      	ldr	r6, [r6, #4]
 8008348:	e7b9      	b.n	80082be <_malloc_r+0x46>
 800834a:	230c      	movs	r3, #12
 800834c:	603b      	str	r3, [r7, #0]
 800834e:	4638      	mov	r0, r7
 8008350:	f000 f83c 	bl	80083cc <__malloc_unlock>
 8008354:	e7a1      	b.n	800829a <_malloc_r+0x22>
 8008356:	6025      	str	r5, [r4, #0]
 8008358:	e7de      	b.n	8008318 <_malloc_r+0xa0>
 800835a:	bf00      	nop
 800835c:	20000930 	.word	0x20000930

08008360 <_sbrk_r>:
 8008360:	b538      	push	{r3, r4, r5, lr}
 8008362:	4d06      	ldr	r5, [pc, #24]	; (800837c <_sbrk_r+0x1c>)
 8008364:	2300      	movs	r3, #0
 8008366:	4604      	mov	r4, r0
 8008368:	4608      	mov	r0, r1
 800836a:	602b      	str	r3, [r5, #0]
 800836c:	f7f9 fb62 	bl	8001a34 <_sbrk>
 8008370:	1c43      	adds	r3, r0, #1
 8008372:	d102      	bne.n	800837a <_sbrk_r+0x1a>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	b103      	cbz	r3, 800837a <_sbrk_r+0x1a>
 8008378:	6023      	str	r3, [r4, #0]
 800837a:	bd38      	pop	{r3, r4, r5, pc}
 800837c:	20000938 	.word	0x20000938

08008380 <siprintf>:
 8008380:	b40e      	push	{r1, r2, r3}
 8008382:	b500      	push	{lr}
 8008384:	b09c      	sub	sp, #112	; 0x70
 8008386:	ab1d      	add	r3, sp, #116	; 0x74
 8008388:	9002      	str	r0, [sp, #8]
 800838a:	9006      	str	r0, [sp, #24]
 800838c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008390:	4809      	ldr	r0, [pc, #36]	; (80083b8 <siprintf+0x38>)
 8008392:	9107      	str	r1, [sp, #28]
 8008394:	9104      	str	r1, [sp, #16]
 8008396:	4909      	ldr	r1, [pc, #36]	; (80083bc <siprintf+0x3c>)
 8008398:	f853 2b04 	ldr.w	r2, [r3], #4
 800839c:	9105      	str	r1, [sp, #20]
 800839e:	6800      	ldr	r0, [r0, #0]
 80083a0:	9301      	str	r3, [sp, #4]
 80083a2:	a902      	add	r1, sp, #8
 80083a4:	f000 f874 	bl	8008490 <_svfiprintf_r>
 80083a8:	9b02      	ldr	r3, [sp, #8]
 80083aa:	2200      	movs	r2, #0
 80083ac:	701a      	strb	r2, [r3, #0]
 80083ae:	b01c      	add	sp, #112	; 0x70
 80083b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80083b4:	b003      	add	sp, #12
 80083b6:	4770      	bx	lr
 80083b8:	20000044 	.word	0x20000044
 80083bc:	ffff0208 	.word	0xffff0208

080083c0 <__malloc_lock>:
 80083c0:	4801      	ldr	r0, [pc, #4]	; (80083c8 <__malloc_lock+0x8>)
 80083c2:	f000 baf9 	b.w	80089b8 <__retarget_lock_acquire_recursive>
 80083c6:	bf00      	nop
 80083c8:	2000093c 	.word	0x2000093c

080083cc <__malloc_unlock>:
 80083cc:	4801      	ldr	r0, [pc, #4]	; (80083d4 <__malloc_unlock+0x8>)
 80083ce:	f000 baf4 	b.w	80089ba <__retarget_lock_release_recursive>
 80083d2:	bf00      	nop
 80083d4:	2000093c 	.word	0x2000093c

080083d8 <__ssputs_r>:
 80083d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083dc:	688e      	ldr	r6, [r1, #8]
 80083de:	429e      	cmp	r6, r3
 80083e0:	4682      	mov	sl, r0
 80083e2:	460c      	mov	r4, r1
 80083e4:	4690      	mov	r8, r2
 80083e6:	461f      	mov	r7, r3
 80083e8:	d838      	bhi.n	800845c <__ssputs_r+0x84>
 80083ea:	898a      	ldrh	r2, [r1, #12]
 80083ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80083f0:	d032      	beq.n	8008458 <__ssputs_r+0x80>
 80083f2:	6825      	ldr	r5, [r4, #0]
 80083f4:	6909      	ldr	r1, [r1, #16]
 80083f6:	eba5 0901 	sub.w	r9, r5, r1
 80083fa:	6965      	ldr	r5, [r4, #20]
 80083fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008400:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008404:	3301      	adds	r3, #1
 8008406:	444b      	add	r3, r9
 8008408:	106d      	asrs	r5, r5, #1
 800840a:	429d      	cmp	r5, r3
 800840c:	bf38      	it	cc
 800840e:	461d      	movcc	r5, r3
 8008410:	0553      	lsls	r3, r2, #21
 8008412:	d531      	bpl.n	8008478 <__ssputs_r+0xa0>
 8008414:	4629      	mov	r1, r5
 8008416:	f7ff ff2f 	bl	8008278 <_malloc_r>
 800841a:	4606      	mov	r6, r0
 800841c:	b950      	cbnz	r0, 8008434 <__ssputs_r+0x5c>
 800841e:	230c      	movs	r3, #12
 8008420:	f8ca 3000 	str.w	r3, [sl]
 8008424:	89a3      	ldrh	r3, [r4, #12]
 8008426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800842a:	81a3      	strh	r3, [r4, #12]
 800842c:	f04f 30ff 	mov.w	r0, #4294967295
 8008430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008434:	6921      	ldr	r1, [r4, #16]
 8008436:	464a      	mov	r2, r9
 8008438:	f000 fac0 	bl	80089bc <memcpy>
 800843c:	89a3      	ldrh	r3, [r4, #12]
 800843e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008442:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008446:	81a3      	strh	r3, [r4, #12]
 8008448:	6126      	str	r6, [r4, #16]
 800844a:	6165      	str	r5, [r4, #20]
 800844c:	444e      	add	r6, r9
 800844e:	eba5 0509 	sub.w	r5, r5, r9
 8008452:	6026      	str	r6, [r4, #0]
 8008454:	60a5      	str	r5, [r4, #8]
 8008456:	463e      	mov	r6, r7
 8008458:	42be      	cmp	r6, r7
 800845a:	d900      	bls.n	800845e <__ssputs_r+0x86>
 800845c:	463e      	mov	r6, r7
 800845e:	6820      	ldr	r0, [r4, #0]
 8008460:	4632      	mov	r2, r6
 8008462:	4641      	mov	r1, r8
 8008464:	f000 fab8 	bl	80089d8 <memmove>
 8008468:	68a3      	ldr	r3, [r4, #8]
 800846a:	1b9b      	subs	r3, r3, r6
 800846c:	60a3      	str	r3, [r4, #8]
 800846e:	6823      	ldr	r3, [r4, #0]
 8008470:	4433      	add	r3, r6
 8008472:	6023      	str	r3, [r4, #0]
 8008474:	2000      	movs	r0, #0
 8008476:	e7db      	b.n	8008430 <__ssputs_r+0x58>
 8008478:	462a      	mov	r2, r5
 800847a:	f000 fac7 	bl	8008a0c <_realloc_r>
 800847e:	4606      	mov	r6, r0
 8008480:	2800      	cmp	r0, #0
 8008482:	d1e1      	bne.n	8008448 <__ssputs_r+0x70>
 8008484:	6921      	ldr	r1, [r4, #16]
 8008486:	4650      	mov	r0, sl
 8008488:	f7ff fe8a 	bl	80081a0 <_free_r>
 800848c:	e7c7      	b.n	800841e <__ssputs_r+0x46>
	...

08008490 <_svfiprintf_r>:
 8008490:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008494:	4698      	mov	r8, r3
 8008496:	898b      	ldrh	r3, [r1, #12]
 8008498:	061b      	lsls	r3, r3, #24
 800849a:	b09d      	sub	sp, #116	; 0x74
 800849c:	4607      	mov	r7, r0
 800849e:	460d      	mov	r5, r1
 80084a0:	4614      	mov	r4, r2
 80084a2:	d50e      	bpl.n	80084c2 <_svfiprintf_r+0x32>
 80084a4:	690b      	ldr	r3, [r1, #16]
 80084a6:	b963      	cbnz	r3, 80084c2 <_svfiprintf_r+0x32>
 80084a8:	2140      	movs	r1, #64	; 0x40
 80084aa:	f7ff fee5 	bl	8008278 <_malloc_r>
 80084ae:	6028      	str	r0, [r5, #0]
 80084b0:	6128      	str	r0, [r5, #16]
 80084b2:	b920      	cbnz	r0, 80084be <_svfiprintf_r+0x2e>
 80084b4:	230c      	movs	r3, #12
 80084b6:	603b      	str	r3, [r7, #0]
 80084b8:	f04f 30ff 	mov.w	r0, #4294967295
 80084bc:	e0d1      	b.n	8008662 <_svfiprintf_r+0x1d2>
 80084be:	2340      	movs	r3, #64	; 0x40
 80084c0:	616b      	str	r3, [r5, #20]
 80084c2:	2300      	movs	r3, #0
 80084c4:	9309      	str	r3, [sp, #36]	; 0x24
 80084c6:	2320      	movs	r3, #32
 80084c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80084cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80084d0:	2330      	movs	r3, #48	; 0x30
 80084d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800867c <_svfiprintf_r+0x1ec>
 80084d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80084da:	f04f 0901 	mov.w	r9, #1
 80084de:	4623      	mov	r3, r4
 80084e0:	469a      	mov	sl, r3
 80084e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80084e6:	b10a      	cbz	r2, 80084ec <_svfiprintf_r+0x5c>
 80084e8:	2a25      	cmp	r2, #37	; 0x25
 80084ea:	d1f9      	bne.n	80084e0 <_svfiprintf_r+0x50>
 80084ec:	ebba 0b04 	subs.w	fp, sl, r4
 80084f0:	d00b      	beq.n	800850a <_svfiprintf_r+0x7a>
 80084f2:	465b      	mov	r3, fp
 80084f4:	4622      	mov	r2, r4
 80084f6:	4629      	mov	r1, r5
 80084f8:	4638      	mov	r0, r7
 80084fa:	f7ff ff6d 	bl	80083d8 <__ssputs_r>
 80084fe:	3001      	adds	r0, #1
 8008500:	f000 80aa 	beq.w	8008658 <_svfiprintf_r+0x1c8>
 8008504:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008506:	445a      	add	r2, fp
 8008508:	9209      	str	r2, [sp, #36]	; 0x24
 800850a:	f89a 3000 	ldrb.w	r3, [sl]
 800850e:	2b00      	cmp	r3, #0
 8008510:	f000 80a2 	beq.w	8008658 <_svfiprintf_r+0x1c8>
 8008514:	2300      	movs	r3, #0
 8008516:	f04f 32ff 	mov.w	r2, #4294967295
 800851a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800851e:	f10a 0a01 	add.w	sl, sl, #1
 8008522:	9304      	str	r3, [sp, #16]
 8008524:	9307      	str	r3, [sp, #28]
 8008526:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800852a:	931a      	str	r3, [sp, #104]	; 0x68
 800852c:	4654      	mov	r4, sl
 800852e:	2205      	movs	r2, #5
 8008530:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008534:	4851      	ldr	r0, [pc, #324]	; (800867c <_svfiprintf_r+0x1ec>)
 8008536:	f7f7 fe53 	bl	80001e0 <memchr>
 800853a:	9a04      	ldr	r2, [sp, #16]
 800853c:	b9d8      	cbnz	r0, 8008576 <_svfiprintf_r+0xe6>
 800853e:	06d0      	lsls	r0, r2, #27
 8008540:	bf44      	itt	mi
 8008542:	2320      	movmi	r3, #32
 8008544:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008548:	0711      	lsls	r1, r2, #28
 800854a:	bf44      	itt	mi
 800854c:	232b      	movmi	r3, #43	; 0x2b
 800854e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008552:	f89a 3000 	ldrb.w	r3, [sl]
 8008556:	2b2a      	cmp	r3, #42	; 0x2a
 8008558:	d015      	beq.n	8008586 <_svfiprintf_r+0xf6>
 800855a:	9a07      	ldr	r2, [sp, #28]
 800855c:	4654      	mov	r4, sl
 800855e:	2000      	movs	r0, #0
 8008560:	f04f 0c0a 	mov.w	ip, #10
 8008564:	4621      	mov	r1, r4
 8008566:	f811 3b01 	ldrb.w	r3, [r1], #1
 800856a:	3b30      	subs	r3, #48	; 0x30
 800856c:	2b09      	cmp	r3, #9
 800856e:	d94e      	bls.n	800860e <_svfiprintf_r+0x17e>
 8008570:	b1b0      	cbz	r0, 80085a0 <_svfiprintf_r+0x110>
 8008572:	9207      	str	r2, [sp, #28]
 8008574:	e014      	b.n	80085a0 <_svfiprintf_r+0x110>
 8008576:	eba0 0308 	sub.w	r3, r0, r8
 800857a:	fa09 f303 	lsl.w	r3, r9, r3
 800857e:	4313      	orrs	r3, r2
 8008580:	9304      	str	r3, [sp, #16]
 8008582:	46a2      	mov	sl, r4
 8008584:	e7d2      	b.n	800852c <_svfiprintf_r+0x9c>
 8008586:	9b03      	ldr	r3, [sp, #12]
 8008588:	1d19      	adds	r1, r3, #4
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	9103      	str	r1, [sp, #12]
 800858e:	2b00      	cmp	r3, #0
 8008590:	bfbb      	ittet	lt
 8008592:	425b      	neglt	r3, r3
 8008594:	f042 0202 	orrlt.w	r2, r2, #2
 8008598:	9307      	strge	r3, [sp, #28]
 800859a:	9307      	strlt	r3, [sp, #28]
 800859c:	bfb8      	it	lt
 800859e:	9204      	strlt	r2, [sp, #16]
 80085a0:	7823      	ldrb	r3, [r4, #0]
 80085a2:	2b2e      	cmp	r3, #46	; 0x2e
 80085a4:	d10c      	bne.n	80085c0 <_svfiprintf_r+0x130>
 80085a6:	7863      	ldrb	r3, [r4, #1]
 80085a8:	2b2a      	cmp	r3, #42	; 0x2a
 80085aa:	d135      	bne.n	8008618 <_svfiprintf_r+0x188>
 80085ac:	9b03      	ldr	r3, [sp, #12]
 80085ae:	1d1a      	adds	r2, r3, #4
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	9203      	str	r2, [sp, #12]
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	bfb8      	it	lt
 80085b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80085bc:	3402      	adds	r4, #2
 80085be:	9305      	str	r3, [sp, #20]
 80085c0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800868c <_svfiprintf_r+0x1fc>
 80085c4:	7821      	ldrb	r1, [r4, #0]
 80085c6:	2203      	movs	r2, #3
 80085c8:	4650      	mov	r0, sl
 80085ca:	f7f7 fe09 	bl	80001e0 <memchr>
 80085ce:	b140      	cbz	r0, 80085e2 <_svfiprintf_r+0x152>
 80085d0:	2340      	movs	r3, #64	; 0x40
 80085d2:	eba0 000a 	sub.w	r0, r0, sl
 80085d6:	fa03 f000 	lsl.w	r0, r3, r0
 80085da:	9b04      	ldr	r3, [sp, #16]
 80085dc:	4303      	orrs	r3, r0
 80085de:	3401      	adds	r4, #1
 80085e0:	9304      	str	r3, [sp, #16]
 80085e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085e6:	4826      	ldr	r0, [pc, #152]	; (8008680 <_svfiprintf_r+0x1f0>)
 80085e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80085ec:	2206      	movs	r2, #6
 80085ee:	f7f7 fdf7 	bl	80001e0 <memchr>
 80085f2:	2800      	cmp	r0, #0
 80085f4:	d038      	beq.n	8008668 <_svfiprintf_r+0x1d8>
 80085f6:	4b23      	ldr	r3, [pc, #140]	; (8008684 <_svfiprintf_r+0x1f4>)
 80085f8:	bb1b      	cbnz	r3, 8008642 <_svfiprintf_r+0x1b2>
 80085fa:	9b03      	ldr	r3, [sp, #12]
 80085fc:	3307      	adds	r3, #7
 80085fe:	f023 0307 	bic.w	r3, r3, #7
 8008602:	3308      	adds	r3, #8
 8008604:	9303      	str	r3, [sp, #12]
 8008606:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008608:	4433      	add	r3, r6
 800860a:	9309      	str	r3, [sp, #36]	; 0x24
 800860c:	e767      	b.n	80084de <_svfiprintf_r+0x4e>
 800860e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008612:	460c      	mov	r4, r1
 8008614:	2001      	movs	r0, #1
 8008616:	e7a5      	b.n	8008564 <_svfiprintf_r+0xd4>
 8008618:	2300      	movs	r3, #0
 800861a:	3401      	adds	r4, #1
 800861c:	9305      	str	r3, [sp, #20]
 800861e:	4619      	mov	r1, r3
 8008620:	f04f 0c0a 	mov.w	ip, #10
 8008624:	4620      	mov	r0, r4
 8008626:	f810 2b01 	ldrb.w	r2, [r0], #1
 800862a:	3a30      	subs	r2, #48	; 0x30
 800862c:	2a09      	cmp	r2, #9
 800862e:	d903      	bls.n	8008638 <_svfiprintf_r+0x1a8>
 8008630:	2b00      	cmp	r3, #0
 8008632:	d0c5      	beq.n	80085c0 <_svfiprintf_r+0x130>
 8008634:	9105      	str	r1, [sp, #20]
 8008636:	e7c3      	b.n	80085c0 <_svfiprintf_r+0x130>
 8008638:	fb0c 2101 	mla	r1, ip, r1, r2
 800863c:	4604      	mov	r4, r0
 800863e:	2301      	movs	r3, #1
 8008640:	e7f0      	b.n	8008624 <_svfiprintf_r+0x194>
 8008642:	ab03      	add	r3, sp, #12
 8008644:	9300      	str	r3, [sp, #0]
 8008646:	462a      	mov	r2, r5
 8008648:	4b0f      	ldr	r3, [pc, #60]	; (8008688 <_svfiprintf_r+0x1f8>)
 800864a:	a904      	add	r1, sp, #16
 800864c:	4638      	mov	r0, r7
 800864e:	f3af 8000 	nop.w
 8008652:	1c42      	adds	r2, r0, #1
 8008654:	4606      	mov	r6, r0
 8008656:	d1d6      	bne.n	8008606 <_svfiprintf_r+0x176>
 8008658:	89ab      	ldrh	r3, [r5, #12]
 800865a:	065b      	lsls	r3, r3, #25
 800865c:	f53f af2c 	bmi.w	80084b8 <_svfiprintf_r+0x28>
 8008660:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008662:	b01d      	add	sp, #116	; 0x74
 8008664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008668:	ab03      	add	r3, sp, #12
 800866a:	9300      	str	r3, [sp, #0]
 800866c:	462a      	mov	r2, r5
 800866e:	4b06      	ldr	r3, [pc, #24]	; (8008688 <_svfiprintf_r+0x1f8>)
 8008670:	a904      	add	r1, sp, #16
 8008672:	4638      	mov	r0, r7
 8008674:	f000 f87a 	bl	800876c <_printf_i>
 8008678:	e7eb      	b.n	8008652 <_svfiprintf_r+0x1c2>
 800867a:	bf00      	nop
 800867c:	08008ac8 	.word	0x08008ac8
 8008680:	08008ad2 	.word	0x08008ad2
 8008684:	00000000 	.word	0x00000000
 8008688:	080083d9 	.word	0x080083d9
 800868c:	08008ace 	.word	0x08008ace

08008690 <_printf_common>:
 8008690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008694:	4616      	mov	r6, r2
 8008696:	4699      	mov	r9, r3
 8008698:	688a      	ldr	r2, [r1, #8]
 800869a:	690b      	ldr	r3, [r1, #16]
 800869c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80086a0:	4293      	cmp	r3, r2
 80086a2:	bfb8      	it	lt
 80086a4:	4613      	movlt	r3, r2
 80086a6:	6033      	str	r3, [r6, #0]
 80086a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80086ac:	4607      	mov	r7, r0
 80086ae:	460c      	mov	r4, r1
 80086b0:	b10a      	cbz	r2, 80086b6 <_printf_common+0x26>
 80086b2:	3301      	adds	r3, #1
 80086b4:	6033      	str	r3, [r6, #0]
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	0699      	lsls	r1, r3, #26
 80086ba:	bf42      	ittt	mi
 80086bc:	6833      	ldrmi	r3, [r6, #0]
 80086be:	3302      	addmi	r3, #2
 80086c0:	6033      	strmi	r3, [r6, #0]
 80086c2:	6825      	ldr	r5, [r4, #0]
 80086c4:	f015 0506 	ands.w	r5, r5, #6
 80086c8:	d106      	bne.n	80086d8 <_printf_common+0x48>
 80086ca:	f104 0a19 	add.w	sl, r4, #25
 80086ce:	68e3      	ldr	r3, [r4, #12]
 80086d0:	6832      	ldr	r2, [r6, #0]
 80086d2:	1a9b      	subs	r3, r3, r2
 80086d4:	42ab      	cmp	r3, r5
 80086d6:	dc26      	bgt.n	8008726 <_printf_common+0x96>
 80086d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80086dc:	1e13      	subs	r3, r2, #0
 80086de:	6822      	ldr	r2, [r4, #0]
 80086e0:	bf18      	it	ne
 80086e2:	2301      	movne	r3, #1
 80086e4:	0692      	lsls	r2, r2, #26
 80086e6:	d42b      	bmi.n	8008740 <_printf_common+0xb0>
 80086e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80086ec:	4649      	mov	r1, r9
 80086ee:	4638      	mov	r0, r7
 80086f0:	47c0      	blx	r8
 80086f2:	3001      	adds	r0, #1
 80086f4:	d01e      	beq.n	8008734 <_printf_common+0xa4>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	68e5      	ldr	r5, [r4, #12]
 80086fa:	6832      	ldr	r2, [r6, #0]
 80086fc:	f003 0306 	and.w	r3, r3, #6
 8008700:	2b04      	cmp	r3, #4
 8008702:	bf08      	it	eq
 8008704:	1aad      	subeq	r5, r5, r2
 8008706:	68a3      	ldr	r3, [r4, #8]
 8008708:	6922      	ldr	r2, [r4, #16]
 800870a:	bf0c      	ite	eq
 800870c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008710:	2500      	movne	r5, #0
 8008712:	4293      	cmp	r3, r2
 8008714:	bfc4      	itt	gt
 8008716:	1a9b      	subgt	r3, r3, r2
 8008718:	18ed      	addgt	r5, r5, r3
 800871a:	2600      	movs	r6, #0
 800871c:	341a      	adds	r4, #26
 800871e:	42b5      	cmp	r5, r6
 8008720:	d11a      	bne.n	8008758 <_printf_common+0xc8>
 8008722:	2000      	movs	r0, #0
 8008724:	e008      	b.n	8008738 <_printf_common+0xa8>
 8008726:	2301      	movs	r3, #1
 8008728:	4652      	mov	r2, sl
 800872a:	4649      	mov	r1, r9
 800872c:	4638      	mov	r0, r7
 800872e:	47c0      	blx	r8
 8008730:	3001      	adds	r0, #1
 8008732:	d103      	bne.n	800873c <_printf_common+0xac>
 8008734:	f04f 30ff 	mov.w	r0, #4294967295
 8008738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873c:	3501      	adds	r5, #1
 800873e:	e7c6      	b.n	80086ce <_printf_common+0x3e>
 8008740:	18e1      	adds	r1, r4, r3
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	2030      	movs	r0, #48	; 0x30
 8008746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800874a:	4422      	add	r2, r4
 800874c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008754:	3302      	adds	r3, #2
 8008756:	e7c7      	b.n	80086e8 <_printf_common+0x58>
 8008758:	2301      	movs	r3, #1
 800875a:	4622      	mov	r2, r4
 800875c:	4649      	mov	r1, r9
 800875e:	4638      	mov	r0, r7
 8008760:	47c0      	blx	r8
 8008762:	3001      	adds	r0, #1
 8008764:	d0e6      	beq.n	8008734 <_printf_common+0xa4>
 8008766:	3601      	adds	r6, #1
 8008768:	e7d9      	b.n	800871e <_printf_common+0x8e>
	...

0800876c <_printf_i>:
 800876c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008770:	7e0f      	ldrb	r7, [r1, #24]
 8008772:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008774:	2f78      	cmp	r7, #120	; 0x78
 8008776:	4691      	mov	r9, r2
 8008778:	4680      	mov	r8, r0
 800877a:	460c      	mov	r4, r1
 800877c:	469a      	mov	sl, r3
 800877e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008782:	d807      	bhi.n	8008794 <_printf_i+0x28>
 8008784:	2f62      	cmp	r7, #98	; 0x62
 8008786:	d80a      	bhi.n	800879e <_printf_i+0x32>
 8008788:	2f00      	cmp	r7, #0
 800878a:	f000 80d8 	beq.w	800893e <_printf_i+0x1d2>
 800878e:	2f58      	cmp	r7, #88	; 0x58
 8008790:	f000 80a3 	beq.w	80088da <_printf_i+0x16e>
 8008794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800879c:	e03a      	b.n	8008814 <_printf_i+0xa8>
 800879e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80087a2:	2b15      	cmp	r3, #21
 80087a4:	d8f6      	bhi.n	8008794 <_printf_i+0x28>
 80087a6:	a101      	add	r1, pc, #4	; (adr r1, 80087ac <_printf_i+0x40>)
 80087a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087ac:	08008805 	.word	0x08008805
 80087b0:	08008819 	.word	0x08008819
 80087b4:	08008795 	.word	0x08008795
 80087b8:	08008795 	.word	0x08008795
 80087bc:	08008795 	.word	0x08008795
 80087c0:	08008795 	.word	0x08008795
 80087c4:	08008819 	.word	0x08008819
 80087c8:	08008795 	.word	0x08008795
 80087cc:	08008795 	.word	0x08008795
 80087d0:	08008795 	.word	0x08008795
 80087d4:	08008795 	.word	0x08008795
 80087d8:	08008925 	.word	0x08008925
 80087dc:	08008849 	.word	0x08008849
 80087e0:	08008907 	.word	0x08008907
 80087e4:	08008795 	.word	0x08008795
 80087e8:	08008795 	.word	0x08008795
 80087ec:	08008947 	.word	0x08008947
 80087f0:	08008795 	.word	0x08008795
 80087f4:	08008849 	.word	0x08008849
 80087f8:	08008795 	.word	0x08008795
 80087fc:	08008795 	.word	0x08008795
 8008800:	0800890f 	.word	0x0800890f
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	1d1a      	adds	r2, r3, #4
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	602a      	str	r2, [r5, #0]
 800880c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008814:	2301      	movs	r3, #1
 8008816:	e0a3      	b.n	8008960 <_printf_i+0x1f4>
 8008818:	6820      	ldr	r0, [r4, #0]
 800881a:	6829      	ldr	r1, [r5, #0]
 800881c:	0606      	lsls	r6, r0, #24
 800881e:	f101 0304 	add.w	r3, r1, #4
 8008822:	d50a      	bpl.n	800883a <_printf_i+0xce>
 8008824:	680e      	ldr	r6, [r1, #0]
 8008826:	602b      	str	r3, [r5, #0]
 8008828:	2e00      	cmp	r6, #0
 800882a:	da03      	bge.n	8008834 <_printf_i+0xc8>
 800882c:	232d      	movs	r3, #45	; 0x2d
 800882e:	4276      	negs	r6, r6
 8008830:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008834:	485e      	ldr	r0, [pc, #376]	; (80089b0 <_printf_i+0x244>)
 8008836:	230a      	movs	r3, #10
 8008838:	e019      	b.n	800886e <_printf_i+0x102>
 800883a:	680e      	ldr	r6, [r1, #0]
 800883c:	602b      	str	r3, [r5, #0]
 800883e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008842:	bf18      	it	ne
 8008844:	b236      	sxthne	r6, r6
 8008846:	e7ef      	b.n	8008828 <_printf_i+0xbc>
 8008848:	682b      	ldr	r3, [r5, #0]
 800884a:	6820      	ldr	r0, [r4, #0]
 800884c:	1d19      	adds	r1, r3, #4
 800884e:	6029      	str	r1, [r5, #0]
 8008850:	0601      	lsls	r1, r0, #24
 8008852:	d501      	bpl.n	8008858 <_printf_i+0xec>
 8008854:	681e      	ldr	r6, [r3, #0]
 8008856:	e002      	b.n	800885e <_printf_i+0xf2>
 8008858:	0646      	lsls	r6, r0, #25
 800885a:	d5fb      	bpl.n	8008854 <_printf_i+0xe8>
 800885c:	881e      	ldrh	r6, [r3, #0]
 800885e:	4854      	ldr	r0, [pc, #336]	; (80089b0 <_printf_i+0x244>)
 8008860:	2f6f      	cmp	r7, #111	; 0x6f
 8008862:	bf0c      	ite	eq
 8008864:	2308      	moveq	r3, #8
 8008866:	230a      	movne	r3, #10
 8008868:	2100      	movs	r1, #0
 800886a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800886e:	6865      	ldr	r5, [r4, #4]
 8008870:	60a5      	str	r5, [r4, #8]
 8008872:	2d00      	cmp	r5, #0
 8008874:	bfa2      	ittt	ge
 8008876:	6821      	ldrge	r1, [r4, #0]
 8008878:	f021 0104 	bicge.w	r1, r1, #4
 800887c:	6021      	strge	r1, [r4, #0]
 800887e:	b90e      	cbnz	r6, 8008884 <_printf_i+0x118>
 8008880:	2d00      	cmp	r5, #0
 8008882:	d04d      	beq.n	8008920 <_printf_i+0x1b4>
 8008884:	4615      	mov	r5, r2
 8008886:	fbb6 f1f3 	udiv	r1, r6, r3
 800888a:	fb03 6711 	mls	r7, r3, r1, r6
 800888e:	5dc7      	ldrb	r7, [r0, r7]
 8008890:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008894:	4637      	mov	r7, r6
 8008896:	42bb      	cmp	r3, r7
 8008898:	460e      	mov	r6, r1
 800889a:	d9f4      	bls.n	8008886 <_printf_i+0x11a>
 800889c:	2b08      	cmp	r3, #8
 800889e:	d10b      	bne.n	80088b8 <_printf_i+0x14c>
 80088a0:	6823      	ldr	r3, [r4, #0]
 80088a2:	07de      	lsls	r6, r3, #31
 80088a4:	d508      	bpl.n	80088b8 <_printf_i+0x14c>
 80088a6:	6923      	ldr	r3, [r4, #16]
 80088a8:	6861      	ldr	r1, [r4, #4]
 80088aa:	4299      	cmp	r1, r3
 80088ac:	bfde      	ittt	le
 80088ae:	2330      	movle	r3, #48	; 0x30
 80088b0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80088b4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80088b8:	1b52      	subs	r2, r2, r5
 80088ba:	6122      	str	r2, [r4, #16]
 80088bc:	f8cd a000 	str.w	sl, [sp]
 80088c0:	464b      	mov	r3, r9
 80088c2:	aa03      	add	r2, sp, #12
 80088c4:	4621      	mov	r1, r4
 80088c6:	4640      	mov	r0, r8
 80088c8:	f7ff fee2 	bl	8008690 <_printf_common>
 80088cc:	3001      	adds	r0, #1
 80088ce:	d14c      	bne.n	800896a <_printf_i+0x1fe>
 80088d0:	f04f 30ff 	mov.w	r0, #4294967295
 80088d4:	b004      	add	sp, #16
 80088d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088da:	4835      	ldr	r0, [pc, #212]	; (80089b0 <_printf_i+0x244>)
 80088dc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80088e0:	6829      	ldr	r1, [r5, #0]
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	f851 6b04 	ldr.w	r6, [r1], #4
 80088e8:	6029      	str	r1, [r5, #0]
 80088ea:	061d      	lsls	r5, r3, #24
 80088ec:	d514      	bpl.n	8008918 <_printf_i+0x1ac>
 80088ee:	07df      	lsls	r7, r3, #31
 80088f0:	bf44      	itt	mi
 80088f2:	f043 0320 	orrmi.w	r3, r3, #32
 80088f6:	6023      	strmi	r3, [r4, #0]
 80088f8:	b91e      	cbnz	r6, 8008902 <_printf_i+0x196>
 80088fa:	6823      	ldr	r3, [r4, #0]
 80088fc:	f023 0320 	bic.w	r3, r3, #32
 8008900:	6023      	str	r3, [r4, #0]
 8008902:	2310      	movs	r3, #16
 8008904:	e7b0      	b.n	8008868 <_printf_i+0xfc>
 8008906:	6823      	ldr	r3, [r4, #0]
 8008908:	f043 0320 	orr.w	r3, r3, #32
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	2378      	movs	r3, #120	; 0x78
 8008910:	4828      	ldr	r0, [pc, #160]	; (80089b4 <_printf_i+0x248>)
 8008912:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008916:	e7e3      	b.n	80088e0 <_printf_i+0x174>
 8008918:	0659      	lsls	r1, r3, #25
 800891a:	bf48      	it	mi
 800891c:	b2b6      	uxthmi	r6, r6
 800891e:	e7e6      	b.n	80088ee <_printf_i+0x182>
 8008920:	4615      	mov	r5, r2
 8008922:	e7bb      	b.n	800889c <_printf_i+0x130>
 8008924:	682b      	ldr	r3, [r5, #0]
 8008926:	6826      	ldr	r6, [r4, #0]
 8008928:	6961      	ldr	r1, [r4, #20]
 800892a:	1d18      	adds	r0, r3, #4
 800892c:	6028      	str	r0, [r5, #0]
 800892e:	0635      	lsls	r5, r6, #24
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	d501      	bpl.n	8008938 <_printf_i+0x1cc>
 8008934:	6019      	str	r1, [r3, #0]
 8008936:	e002      	b.n	800893e <_printf_i+0x1d2>
 8008938:	0670      	lsls	r0, r6, #25
 800893a:	d5fb      	bpl.n	8008934 <_printf_i+0x1c8>
 800893c:	8019      	strh	r1, [r3, #0]
 800893e:	2300      	movs	r3, #0
 8008940:	6123      	str	r3, [r4, #16]
 8008942:	4615      	mov	r5, r2
 8008944:	e7ba      	b.n	80088bc <_printf_i+0x150>
 8008946:	682b      	ldr	r3, [r5, #0]
 8008948:	1d1a      	adds	r2, r3, #4
 800894a:	602a      	str	r2, [r5, #0]
 800894c:	681d      	ldr	r5, [r3, #0]
 800894e:	6862      	ldr	r2, [r4, #4]
 8008950:	2100      	movs	r1, #0
 8008952:	4628      	mov	r0, r5
 8008954:	f7f7 fc44 	bl	80001e0 <memchr>
 8008958:	b108      	cbz	r0, 800895e <_printf_i+0x1f2>
 800895a:	1b40      	subs	r0, r0, r5
 800895c:	6060      	str	r0, [r4, #4]
 800895e:	6863      	ldr	r3, [r4, #4]
 8008960:	6123      	str	r3, [r4, #16]
 8008962:	2300      	movs	r3, #0
 8008964:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008968:	e7a8      	b.n	80088bc <_printf_i+0x150>
 800896a:	6923      	ldr	r3, [r4, #16]
 800896c:	462a      	mov	r2, r5
 800896e:	4649      	mov	r1, r9
 8008970:	4640      	mov	r0, r8
 8008972:	47d0      	blx	sl
 8008974:	3001      	adds	r0, #1
 8008976:	d0ab      	beq.n	80088d0 <_printf_i+0x164>
 8008978:	6823      	ldr	r3, [r4, #0]
 800897a:	079b      	lsls	r3, r3, #30
 800897c:	d413      	bmi.n	80089a6 <_printf_i+0x23a>
 800897e:	68e0      	ldr	r0, [r4, #12]
 8008980:	9b03      	ldr	r3, [sp, #12]
 8008982:	4298      	cmp	r0, r3
 8008984:	bfb8      	it	lt
 8008986:	4618      	movlt	r0, r3
 8008988:	e7a4      	b.n	80088d4 <_printf_i+0x168>
 800898a:	2301      	movs	r3, #1
 800898c:	4632      	mov	r2, r6
 800898e:	4649      	mov	r1, r9
 8008990:	4640      	mov	r0, r8
 8008992:	47d0      	blx	sl
 8008994:	3001      	adds	r0, #1
 8008996:	d09b      	beq.n	80088d0 <_printf_i+0x164>
 8008998:	3501      	adds	r5, #1
 800899a:	68e3      	ldr	r3, [r4, #12]
 800899c:	9903      	ldr	r1, [sp, #12]
 800899e:	1a5b      	subs	r3, r3, r1
 80089a0:	42ab      	cmp	r3, r5
 80089a2:	dcf2      	bgt.n	800898a <_printf_i+0x21e>
 80089a4:	e7eb      	b.n	800897e <_printf_i+0x212>
 80089a6:	2500      	movs	r5, #0
 80089a8:	f104 0619 	add.w	r6, r4, #25
 80089ac:	e7f5      	b.n	800899a <_printf_i+0x22e>
 80089ae:	bf00      	nop
 80089b0:	08008ad9 	.word	0x08008ad9
 80089b4:	08008aea 	.word	0x08008aea

080089b8 <__retarget_lock_acquire_recursive>:
 80089b8:	4770      	bx	lr

080089ba <__retarget_lock_release_recursive>:
 80089ba:	4770      	bx	lr

080089bc <memcpy>:
 80089bc:	440a      	add	r2, r1
 80089be:	4291      	cmp	r1, r2
 80089c0:	f100 33ff 	add.w	r3, r0, #4294967295
 80089c4:	d100      	bne.n	80089c8 <memcpy+0xc>
 80089c6:	4770      	bx	lr
 80089c8:	b510      	push	{r4, lr}
 80089ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80089ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80089d2:	4291      	cmp	r1, r2
 80089d4:	d1f9      	bne.n	80089ca <memcpy+0xe>
 80089d6:	bd10      	pop	{r4, pc}

080089d8 <memmove>:
 80089d8:	4288      	cmp	r0, r1
 80089da:	b510      	push	{r4, lr}
 80089dc:	eb01 0402 	add.w	r4, r1, r2
 80089e0:	d902      	bls.n	80089e8 <memmove+0x10>
 80089e2:	4284      	cmp	r4, r0
 80089e4:	4623      	mov	r3, r4
 80089e6:	d807      	bhi.n	80089f8 <memmove+0x20>
 80089e8:	1e43      	subs	r3, r0, #1
 80089ea:	42a1      	cmp	r1, r4
 80089ec:	d008      	beq.n	8008a00 <memmove+0x28>
 80089ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80089f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80089f6:	e7f8      	b.n	80089ea <memmove+0x12>
 80089f8:	4402      	add	r2, r0
 80089fa:	4601      	mov	r1, r0
 80089fc:	428a      	cmp	r2, r1
 80089fe:	d100      	bne.n	8008a02 <memmove+0x2a>
 8008a00:	bd10      	pop	{r4, pc}
 8008a02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a0a:	e7f7      	b.n	80089fc <memmove+0x24>

08008a0c <_realloc_r>:
 8008a0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a10:	4680      	mov	r8, r0
 8008a12:	4614      	mov	r4, r2
 8008a14:	460e      	mov	r6, r1
 8008a16:	b921      	cbnz	r1, 8008a22 <_realloc_r+0x16>
 8008a18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1c:	4611      	mov	r1, r2
 8008a1e:	f7ff bc2b 	b.w	8008278 <_malloc_r>
 8008a22:	b92a      	cbnz	r2, 8008a30 <_realloc_r+0x24>
 8008a24:	f7ff fbbc 	bl	80081a0 <_free_r>
 8008a28:	4625      	mov	r5, r4
 8008a2a:	4628      	mov	r0, r5
 8008a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a30:	f000 f81b 	bl	8008a6a <_malloc_usable_size_r>
 8008a34:	4284      	cmp	r4, r0
 8008a36:	4607      	mov	r7, r0
 8008a38:	d802      	bhi.n	8008a40 <_realloc_r+0x34>
 8008a3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a3e:	d812      	bhi.n	8008a66 <_realloc_r+0x5a>
 8008a40:	4621      	mov	r1, r4
 8008a42:	4640      	mov	r0, r8
 8008a44:	f7ff fc18 	bl	8008278 <_malloc_r>
 8008a48:	4605      	mov	r5, r0
 8008a4a:	2800      	cmp	r0, #0
 8008a4c:	d0ed      	beq.n	8008a2a <_realloc_r+0x1e>
 8008a4e:	42bc      	cmp	r4, r7
 8008a50:	4622      	mov	r2, r4
 8008a52:	4631      	mov	r1, r6
 8008a54:	bf28      	it	cs
 8008a56:	463a      	movcs	r2, r7
 8008a58:	f7ff ffb0 	bl	80089bc <memcpy>
 8008a5c:	4631      	mov	r1, r6
 8008a5e:	4640      	mov	r0, r8
 8008a60:	f7ff fb9e 	bl	80081a0 <_free_r>
 8008a64:	e7e1      	b.n	8008a2a <_realloc_r+0x1e>
 8008a66:	4635      	mov	r5, r6
 8008a68:	e7df      	b.n	8008a2a <_realloc_r+0x1e>

08008a6a <_malloc_usable_size_r>:
 8008a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008a6e:	1f18      	subs	r0, r3, #4
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	bfbc      	itt	lt
 8008a74:	580b      	ldrlt	r3, [r1, r0]
 8008a76:	18c0      	addlt	r0, r0, r3
 8008a78:	4770      	bx	lr
	...

08008a7c <_init>:
 8008a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a7e:	bf00      	nop
 8008a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a82:	bc08      	pop	{r3}
 8008a84:	469e      	mov	lr, r3
 8008a86:	4770      	bx	lr

08008a88 <_fini>:
 8008a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a8a:	bf00      	nop
 8008a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a8e:	bc08      	pop	{r3}
 8008a90:	469e      	mov	lr, r3
 8008a92:	4770      	bx	lr
