
TEMP_SENS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d090  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004f4  0800d220  0800d220  0001d220  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d714  0800d714  00020238  2**0
                  CONTENTS
  4 .ARM          00000008  0800d714  0800d714  0001d714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d71c  0800d71c  00020238  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d71c  0800d71c  0001d71c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d720  0800d720  0001d720  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000238  20000000  0800d724  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020238  2**0
                  CONTENTS
 10 .bss          000008bc  20000238  20000238  00020238  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000af4  20000af4  00020238  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020238  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b25c  00000000  00000000  00020268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004113  00000000  00000000  0003b4c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001768  00000000  00000000  0003f5d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000015a8  00000000  00000000  00040d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027b47  00000000  00000000  000422e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ece4  00000000  00000000  00069e2f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e182f  00000000  00000000  00088b13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016a342  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000785c  00000000  00000000  0016a394  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000238 	.word	0x20000238
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d208 	.word	0x0800d208

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000023c 	.word	0x2000023c
 80001cc:	0800d208 	.word	0x0800d208

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <button_pressed>:
 *  Created on: 19 мая 2023 г.
 *      Author: skrah
 */
#include "buttons.h"

void button_pressed(Lcd_HandleTypeDef lcd){
 8000ff8:	b084      	sub	sp, #16
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	f107 0c20 	add.w	ip, r7, #32
 8001004:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	Lcd_cursor(&lcd, 1, 5);
 8001008:	2205      	movs	r2, #5
 800100a:	2101      	movs	r1, #1
 800100c:	f107 0020 	add.w	r0, r7, #32
 8001010:	f000 f8ec 	bl	80011ec <Lcd_cursor>
	int button_up = HAL_GPIO_ReadPin(BTN_UP_GPIO_Port, BTN_UP_Pin);
 8001014:	2140      	movs	r1, #64	; 0x40
 8001016:	4828      	ldr	r0, [pc, #160]	; (80010b8 <button_pressed+0xc0>)
 8001018:	f002 f846 	bl	80030a8 <HAL_GPIO_ReadPin>
 800101c:	4603      	mov	r3, r0
 800101e:	617b      	str	r3, [r7, #20]
	int button_down = HAL_GPIO_ReadPin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin);
 8001020:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001024:	4824      	ldr	r0, [pc, #144]	; (80010b8 <button_pressed+0xc0>)
 8001026:	f002 f83f 	bl	80030a8 <HAL_GPIO_ReadPin>
 800102a:	4603      	mov	r3, r0
 800102c:	613b      	str	r3, [r7, #16]
	int button_left = HAL_GPIO_ReadPin(BTN_LEFT_GPIO_Port, BTN_LEFT_Pin);
 800102e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001032:	4821      	ldr	r0, [pc, #132]	; (80010b8 <button_pressed+0xc0>)
 8001034:	f002 f838 	bl	80030a8 <HAL_GPIO_ReadPin>
 8001038:	4603      	mov	r3, r0
 800103a:	60fb      	str	r3, [r7, #12]
	int button_right = HAL_GPIO_ReadPin(BTN_RIGHT_GPIO_Port, BTN_RIGHT_Pin);
 800103c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001040:	481d      	ldr	r0, [pc, #116]	; (80010b8 <button_pressed+0xc0>)
 8001042:	f002 f831 	bl	80030a8 <HAL_GPIO_ReadPin>
 8001046:	4603      	mov	r3, r0
 8001048:	60bb      	str	r3, [r7, #8]
	int button_mid = HAL_GPIO_ReadPin(BTN_MID_GPIO_Port, BTN_MID_Pin);
 800104a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800104e:	481b      	ldr	r0, [pc, #108]	; (80010bc <button_pressed+0xc4>)
 8001050:	f002 f82a 	bl	80030a8 <HAL_GPIO_ReadPin>
 8001054:	4603      	mov	r3, r0
 8001056:	607b      	str	r3, [r7, #4]
	if(button_up==0){
 8001058:	697b      	ldr	r3, [r7, #20]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d104      	bne.n	8001068 <button_pressed+0x70>
		Lcd_string(&lcd, "U");
 800105e:	4918      	ldr	r1, [pc, #96]	; (80010c0 <button_pressed+0xc8>)
 8001060:	f107 0020 	add.w	r0, r7, #32
 8001064:	f000 f8a2 	bl	80011ac <Lcd_string>
	}
	if(button_down==0){
 8001068:	693b      	ldr	r3, [r7, #16]
 800106a:	2b00      	cmp	r3, #0
 800106c:	d104      	bne.n	8001078 <button_pressed+0x80>
		Lcd_string(&lcd, "D");
 800106e:	4915      	ldr	r1, [pc, #84]	; (80010c4 <button_pressed+0xcc>)
 8001070:	f107 0020 	add.w	r0, r7, #32
 8001074:	f000 f89a 	bl	80011ac <Lcd_string>
	}
	if(button_left==0){
 8001078:	68fb      	ldr	r3, [r7, #12]
 800107a:	2b00      	cmp	r3, #0
 800107c:	d104      	bne.n	8001088 <button_pressed+0x90>
		Lcd_string(&lcd, "L");
 800107e:	4912      	ldr	r1, [pc, #72]	; (80010c8 <button_pressed+0xd0>)
 8001080:	f107 0020 	add.w	r0, r7, #32
 8001084:	f000 f892 	bl	80011ac <Lcd_string>
	}
	if(button_right==0){
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d104      	bne.n	8001098 <button_pressed+0xa0>
		Lcd_string(&lcd, "R");
 800108e:	490f      	ldr	r1, [pc, #60]	; (80010cc <button_pressed+0xd4>)
 8001090:	f107 0020 	add.w	r0, r7, #32
 8001094:	f000 f88a 	bl	80011ac <Lcd_string>
	}
	if(button_mid==0){
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2b00      	cmp	r3, #0
 800109c:	d104      	bne.n	80010a8 <button_pressed+0xb0>
		Lcd_string(&lcd, "M");
 800109e:	490c      	ldr	r1, [pc, #48]	; (80010d0 <button_pressed+0xd8>)
 80010a0:	f107 0020 	add.w	r0, r7, #32
 80010a4:	f000 f882 	bl	80011ac <Lcd_string>
	}
}
 80010a8:	bf00      	nop
 80010aa:	3718      	adds	r7, #24
 80010ac:	46bd      	mov	sp, r7
 80010ae:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80010b2:	b004      	add	sp, #16
 80010b4:	4770      	bx	lr
 80010b6:	bf00      	nop
 80010b8:	40020800 	.word	0x40020800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	0800d220 	.word	0x0800d220
 80010c4:	0800d224 	.word	0x0800d224
 80010c8:	0800d228 	.word	0x0800d228
 80010cc:	0800d22c 	.word	0x0800d22c
 80010d0:	0800d230 	.word	0x0800d230

080010d4 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 80010d4:	b5b0      	push	{r4, r5, r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 80010e2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 80010e6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 80010ea:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80010ee:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80010f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80010f2:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80010f4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80010f6:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 8001100:	68bb      	ldr	r3, [r7, #8]
 8001102:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 8001104:	f107 0310 	add.w	r3, r7, #16
 8001108:	4618      	mov	r0, r3
 800110a:	f000 f80e 	bl	800112a <Lcd_init>

	return lcd;
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	461d      	mov	r5, r3
 8001112:	f107 0410 	add.w	r4, r7, #16
 8001116:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001118:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800111a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800111e:	e885 0003 	stmia.w	r5, {r0, r1}
}
 8001122:	68f8      	ldr	r0, [r7, #12]
 8001124:	3728      	adds	r7, #40	; 0x28
 8001126:	46bd      	mov	sp, r7
 8001128:	bdb0      	pop	{r4, r5, r7, pc}

0800112a <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 800112a:	b580      	push	{r7, lr}
 800112c:	b082      	sub	sp, #8
 800112e:	af00      	add	r7, sp, #0
 8001130:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	7d9b      	ldrb	r3, [r3, #22]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d10c      	bne.n	8001154 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 800113a:	2133      	movs	r1, #51	; 0x33
 800113c:	6878      	ldr	r0, [r7, #4]
 800113e:	f000 f895 	bl	800126c <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 8001142:	2132      	movs	r1, #50	; 0x32
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f000 f891 	bl	800126c <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 800114a:	2128      	movs	r1, #40	; 0x28
 800114c:	6878      	ldr	r0, [r7, #4]
 800114e:	f000 f88d 	bl	800126c <lcd_write_command>
 8001152:	e003      	b.n	800115c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8001154:	2138      	movs	r1, #56	; 0x38
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f000 f888 	bl	800126c <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800115c:	2101      	movs	r1, #1
 800115e:	6878      	ldr	r0, [r7, #4]
 8001160:	f000 f884 	bl	800126c <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8001164:	210c      	movs	r1, #12
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f880 	bl	800126c <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800116c:	2106      	movs	r1, #6
 800116e:	6878      	ldr	r0, [r7, #4]
 8001170:	f000 f87c 	bl	800126c <lcd_write_command>
}
 8001174:	bf00      	nop
 8001176:	3708      	adds	r7, #8
 8001178:	46bd      	mov	sp, r7
 800117a:	bd80      	pop	{r7, pc}

0800117c <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8001186:	f107 030c 	add.w	r3, r7, #12
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	4906      	ldr	r1, [pc, #24]	; (80011a8 <Lcd_int+0x2c>)
 800118e:	4618      	mov	r0, r3
 8001190:	f008 fb46 	bl	8009820 <siprintf>

	Lcd_string(lcd, buffer);
 8001194:	f107 030c 	add.w	r3, r7, #12
 8001198:	4619      	mov	r1, r3
 800119a:	6878      	ldr	r0, [r7, #4]
 800119c:	f000 f806 	bl	80011ac <Lcd_string>
}
 80011a0:	bf00      	nop
 80011a2:	3718      	adds	r7, #24
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	0800d234 	.word	0x0800d234

080011ac <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 80011ac:	b590      	push	{r4, r7, lr}
 80011ae:	b085      	sub	sp, #20
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 80011b6:	2300      	movs	r3, #0
 80011b8:	73fb      	strb	r3, [r7, #15]
 80011ba:	e00a      	b.n	80011d2 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	683a      	ldr	r2, [r7, #0]
 80011c0:	4413      	add	r3, r2
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	4619      	mov	r1, r3
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f000 f87e 	bl	80012c8 <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 80011cc:	7bfb      	ldrb	r3, [r7, #15]
 80011ce:	3301      	adds	r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	7bfc      	ldrb	r4, [r7, #15]
 80011d4:	6838      	ldr	r0, [r7, #0]
 80011d6:	f7fe fffb 	bl	80001d0 <strlen>
 80011da:	4603      	mov	r3, r0
 80011dc:	429c      	cmp	r4, r3
 80011de:	d3ed      	bcc.n	80011bc <Lcd_string+0x10>
	}
}
 80011e0:	bf00      	nop
 80011e2:	bf00      	nop
 80011e4:	3714      	adds	r7, #20
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd90      	pop	{r4, r7, pc}
	...

080011ec <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
 80011f4:	460b      	mov	r3, r1
 80011f6:	70fb      	strb	r3, [r7, #3]
 80011f8:	4613      	mov	r3, r2
 80011fa:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80011fc:	78fb      	ldrb	r3, [r7, #3]
 80011fe:	4a07      	ldr	r2, [pc, #28]	; (800121c <Lcd_cursor+0x30>)
 8001200:	5cd2      	ldrb	r2, [r2, r3]
 8001202:	78bb      	ldrb	r3, [r7, #2]
 8001204:	4413      	add	r3, r2
 8001206:	b2db      	uxtb	r3, r3
 8001208:	3b80      	subs	r3, #128	; 0x80
 800120a:	b2db      	uxtb	r3, r3
 800120c:	4619      	mov	r1, r3
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f82c 	bl	800126c <lcd_write_command>
	#endif
}
 8001214:	bf00      	nop
 8001216:	3708      	adds	r7, #8
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	0800d250 	.word	0x0800d250

08001220 <Lcd_define_char>:
{
	lcd_write_command(lcd, CLEAR_DISPLAY);
}

void Lcd_define_char(Lcd_HandleTypeDef * lcd, uint8_t code, uint8_t bitmap[])
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	60f8      	str	r0, [r7, #12]
 8001228:	460b      	mov	r3, r1
 800122a:	607a      	str	r2, [r7, #4]
 800122c:	72fb      	strb	r3, [r7, #11]
	lcd_write_command(lcd, SETCGRAM_ADDR + (code << 3));
 800122e:	7afb      	ldrb	r3, [r7, #11]
 8001230:	00db      	lsls	r3, r3, #3
 8001232:	b2db      	uxtb	r3, r3
 8001234:	3340      	adds	r3, #64	; 0x40
 8001236:	b2db      	uxtb	r3, r3
 8001238:	4619      	mov	r1, r3
 800123a:	68f8      	ldr	r0, [r7, #12]
 800123c:	f000 f816 	bl	800126c <lcd_write_command>
	for(uint8_t i = 0; i < 8; ++i)
 8001240:	2300      	movs	r3, #0
 8001242:	75fb      	strb	r3, [r7, #23]
 8001244:	e00a      	b.n	800125c <Lcd_define_char+0x3c>
	{
		lcd_write_data(lcd, bitmap[i]);
 8001246:	7dfb      	ldrb	r3, [r7, #23]
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	4413      	add	r3, r2
 800124c:	781b      	ldrb	r3, [r3, #0]
 800124e:	4619      	mov	r1, r3
 8001250:	68f8      	ldr	r0, [r7, #12]
 8001252:	f000 f839 	bl	80012c8 <lcd_write_data>
	for(uint8_t i = 0; i < 8; ++i)
 8001256:	7dfb      	ldrb	r3, [r7, #23]
 8001258:	3301      	adds	r3, #1
 800125a:	75fb      	strb	r3, [r7, #23]
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	2b07      	cmp	r3, #7
 8001260:	d9f1      	bls.n	8001246 <Lcd_define_char+0x26>
	}
}
 8001262:	bf00      	nop
 8001264:	bf00      	nop
 8001266:	3718      	adds	r7, #24
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	6898      	ldr	r0, [r3, #8]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	899b      	ldrh	r3, [r3, #12]
 8001280:	2200      	movs	r2, #0
 8001282:	4619      	mov	r1, r3
 8001284:	f001 ff28 	bl	80030d8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	7d9b      	ldrb	r3, [r3, #22]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d111      	bne.n	80012b4 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	091b      	lsrs	r3, r3, #4
 8001294:	b2db      	uxtb	r3, r3
 8001296:	2204      	movs	r2, #4
 8001298:	4619      	mov	r1, r3
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f000 f842 	bl	8001324 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 80012a0:	78fb      	ldrb	r3, [r7, #3]
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	2204      	movs	r2, #4
 80012aa:	4619      	mov	r1, r3
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f000 f839 	bl	8001324 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 80012b2:	e005      	b.n	80012c0 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 80012b4:	78fb      	ldrb	r3, [r7, #3]
 80012b6:	2208      	movs	r2, #8
 80012b8:	4619      	mov	r1, r3
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f832 	bl	8001324 <lcd_write>
}
 80012c0:	bf00      	nop
 80012c2:	3708      	adds	r7, #8
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}

080012c8 <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	460b      	mov	r3, r1
 80012d2:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	6898      	ldr	r0, [r3, #8]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	899b      	ldrh	r3, [r3, #12]
 80012dc:	2201      	movs	r2, #1
 80012de:	4619      	mov	r1, r3
 80012e0:	f001 fefa 	bl	80030d8 <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	7d9b      	ldrb	r3, [r3, #22]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d111      	bne.n	8001310 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 80012ec:	78fb      	ldrb	r3, [r7, #3]
 80012ee:	091b      	lsrs	r3, r3, #4
 80012f0:	b2db      	uxtb	r3, r3
 80012f2:	2204      	movs	r2, #4
 80012f4:	4619      	mov	r1, r3
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f000 f814 	bl	8001324 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 80012fc:	78fb      	ldrb	r3, [r7, #3]
 80012fe:	f003 030f 	and.w	r3, r3, #15
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2204      	movs	r2, #4
 8001306:	4619      	mov	r1, r3
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f000 f80b 	bl	8001324 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 800130e:	e005      	b.n	800131c <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8001310:	78fb      	ldrb	r3, [r7, #3]
 8001312:	2208      	movs	r2, #8
 8001314:	4619      	mov	r1, r3
 8001316:	6878      	ldr	r0, [r7, #4]
 8001318:	f000 f804 	bl	8001324 <lcd_write>
}
 800131c:	bf00      	nop
 800131e:	3708      	adds	r7, #8
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}

08001324 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b084      	sub	sp, #16
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	70fb      	strb	r3, [r7, #3]
 8001330:	4613      	mov	r3, r2
 8001332:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8001334:	2300      	movs	r3, #0
 8001336:	73fb      	strb	r3, [r7, #15]
 8001338:	e019      	b.n	800136e <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	7bfb      	ldrb	r3, [r7, #15]
 8001340:	009b      	lsls	r3, r3, #2
 8001342:	4413      	add	r3, r2
 8001344:	6818      	ldr	r0, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685a      	ldr	r2, [r3, #4]
 800134a:	7bfb      	ldrb	r3, [r7, #15]
 800134c:	005b      	lsls	r3, r3, #1
 800134e:	4413      	add	r3, r2
 8001350:	8819      	ldrh	r1, [r3, #0]
 8001352:	78fa      	ldrb	r2, [r7, #3]
 8001354:	7bfb      	ldrb	r3, [r7, #15]
 8001356:	fa42 f303 	asr.w	r3, r2, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	f003 0301 	and.w	r3, r3, #1
 8001360:	b2db      	uxtb	r3, r3
 8001362:	461a      	mov	r2, r3
 8001364:	f001 feb8 	bl	80030d8 <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 8001368:	7bfb      	ldrb	r3, [r7, #15]
 800136a:	3301      	adds	r3, #1
 800136c:	73fb      	strb	r3, [r7, #15]
 800136e:	7bfa      	ldrb	r2, [r7, #15]
 8001370:	78bb      	ldrb	r3, [r7, #2]
 8001372:	429a      	cmp	r2, r3
 8001374:	d3e1      	bcc.n	800133a <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6918      	ldr	r0, [r3, #16]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	8a9b      	ldrh	r3, [r3, #20]
 800137e:	2201      	movs	r2, #1
 8001380:	4619      	mov	r1, r3
 8001382:	f001 fea9 	bl	80030d8 <HAL_GPIO_WritePin>
	DELAY(1);
 8001386:	2001      	movs	r0, #1
 8001388:	f000 fff0 	bl	800236c <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6918      	ldr	r0, [r3, #16]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	8a9b      	ldrh	r3, [r3, #20]
 8001394:	2200      	movs	r2, #0
 8001396:	4619      	mov	r1, r3
 8001398:	f001 fe9e 	bl	80030d8 <HAL_GPIO_WritePin>
}
 800139c:	bf00      	nop
 800139e:	3710      	adds	r7, #16
 80013a0:	46bd      	mov	sp, r7
 80013a2:	bd80      	pop	{r7, pc}

080013a4 <calcDateTime>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void calcDateTime()
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
	second += 1;
 80013a8:	4b22      	ldr	r3, [pc, #136]	; (8001434 <calcDateTime+0x90>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	3301      	adds	r3, #1
 80013ae:	4a21      	ldr	r2, [pc, #132]	; (8001434 <calcDateTime+0x90>)
 80013b0:	6013      	str	r3, [r2, #0]
	if (second == 60)
 80013b2:	4b20      	ldr	r3, [pc, #128]	; (8001434 <calcDateTime+0x90>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	2b3c      	cmp	r3, #60	; 0x3c
 80013b8:	d107      	bne.n	80013ca <calcDateTime+0x26>
	{
		second = 0;
 80013ba:	4b1e      	ldr	r3, [pc, #120]	; (8001434 <calcDateTime+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
		minute += 1;
 80013c0:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <calcDateTime+0x94>)
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	3301      	adds	r3, #1
 80013c6:	4a1c      	ldr	r2, [pc, #112]	; (8001438 <calcDateTime+0x94>)
 80013c8:	6013      	str	r3, [r2, #0]
	}

	if (minute == 60)
 80013ca:	4b1b      	ldr	r3, [pc, #108]	; (8001438 <calcDateTime+0x94>)
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	2b3c      	cmp	r3, #60	; 0x3c
 80013d0:	d107      	bne.n	80013e2 <calcDateTime+0x3e>
	{
		minute = 0;
 80013d2:	4b19      	ldr	r3, [pc, #100]	; (8001438 <calcDateTime+0x94>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	601a      	str	r2, [r3, #0]
		hour += 1;
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <calcDateTime+0x98>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	3301      	adds	r3, #1
 80013de:	4a17      	ldr	r2, [pc, #92]	; (800143c <calcDateTime+0x98>)
 80013e0:	6013      	str	r3, [r2, #0]
	}

	if (hour == 24)
 80013e2:	4b16      	ldr	r3, [pc, #88]	; (800143c <calcDateTime+0x98>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	2b18      	cmp	r3, #24
 80013e8:	d107      	bne.n	80013fa <calcDateTime+0x56>
	{
		hour = 0;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <calcDateTime+0x98>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	601a      	str	r2, [r3, #0]
		day += 1;
 80013f0:	4b13      	ldr	r3, [pc, #76]	; (8001440 <calcDateTime+0x9c>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	3301      	adds	r3, #1
 80013f6:	4a12      	ldr	r2, [pc, #72]	; (8001440 <calcDateTime+0x9c>)
 80013f8:	6013      	str	r3, [r2, #0]
	}

	if (day > returnDaysByMonth())
 80013fa:	f000 f889 	bl	8001510 <returnDaysByMonth>
 80013fe:	4602      	mov	r2, r0
 8001400:	4b0f      	ldr	r3, [pc, #60]	; (8001440 <calcDateTime+0x9c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	429a      	cmp	r2, r3
 8001406:	da07      	bge.n	8001418 <calcDateTime+0x74>
	{
		day = 0;
 8001408:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <calcDateTime+0x9c>)
 800140a:	2200      	movs	r2, #0
 800140c:	601a      	str	r2, [r3, #0]
		month += 1;
 800140e:	4b0d      	ldr	r3, [pc, #52]	; (8001444 <calcDateTime+0xa0>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	3301      	adds	r3, #1
 8001414:	4a0b      	ldr	r2, [pc, #44]	; (8001444 <calcDateTime+0xa0>)
 8001416:	6013      	str	r3, [r2, #0]
	}

	if (month > 12)
 8001418:	4b0a      	ldr	r3, [pc, #40]	; (8001444 <calcDateTime+0xa0>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b0c      	cmp	r3, #12
 800141e:	dd07      	ble.n	8001430 <calcDateTime+0x8c>
	{
		month = 0;
 8001420:	4b08      	ldr	r3, [pc, #32]	; (8001444 <calcDateTime+0xa0>)
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
		year += 1;
 8001426:	4b08      	ldr	r3, [pc, #32]	; (8001448 <calcDateTime+0xa4>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	3301      	adds	r3, #1
 800142c:	4a06      	ldr	r2, [pc, #24]	; (8001448 <calcDateTime+0xa4>)
 800142e:	6013      	str	r3, [r2, #0]
	}
}
 8001430:	bf00      	nop
 8001432:	bd80      	pop	{r7, pc}
 8001434:	200003f8 	.word	0x200003f8
 8001438:	20000034 	.word	0x20000034
 800143c:	20000030 	.word	0x20000030
 8001440:	2000002c 	.word	0x2000002c
 8001444:	20000028 	.word	0x20000028
 8001448:	20000024 	.word	0x20000024

0800144c <displayTimeLcd>:

void displayTimeLcd()
{
 800144c:	b580      	push	{r7, lr}
 800144e:	af00      	add	r7, sp, #0
	Lcd_cursor(&lcd, 0, 6);
 8001450:	2206      	movs	r2, #6
 8001452:	2100      	movs	r1, #0
 8001454:	481b      	ldr	r0, [pc, #108]	; (80014c4 <displayTimeLcd+0x78>)
 8001456:	f7ff fec9 	bl	80011ec <Lcd_cursor>
	displayDateTimePart(year);
 800145a:	4b1b      	ldr	r3, [pc, #108]	; (80014c8 <displayTimeLcd+0x7c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f840 	bl	80014e4 <displayDateTimePart>
	Lcd_string(&lcd, "-");
 8001464:	4919      	ldr	r1, [pc, #100]	; (80014cc <displayTimeLcd+0x80>)
 8001466:	4817      	ldr	r0, [pc, #92]	; (80014c4 <displayTimeLcd+0x78>)
 8001468:	f7ff fea0 	bl	80011ac <Lcd_string>

	displayDateTimePart(month);
 800146c:	4b18      	ldr	r3, [pc, #96]	; (80014d0 <displayTimeLcd+0x84>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	4618      	mov	r0, r3
 8001472:	f000 f837 	bl	80014e4 <displayDateTimePart>
	Lcd_string(&lcd, "-");
 8001476:	4915      	ldr	r1, [pc, #84]	; (80014cc <displayTimeLcd+0x80>)
 8001478:	4812      	ldr	r0, [pc, #72]	; (80014c4 <displayTimeLcd+0x78>)
 800147a:	f7ff fe97 	bl	80011ac <Lcd_string>

	displayDateTimePart(day);
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <displayTimeLcd+0x88>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	4618      	mov	r0, r3
 8001484:	f000 f82e 	bl	80014e4 <displayDateTimePart>

	Lcd_cursor(&lcd, 1, 8);
 8001488:	2208      	movs	r2, #8
 800148a:	2101      	movs	r1, #1
 800148c:	480d      	ldr	r0, [pc, #52]	; (80014c4 <displayTimeLcd+0x78>)
 800148e:	f7ff fead 	bl	80011ec <Lcd_cursor>
	displayDateTimePart(hour);
 8001492:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <displayTimeLcd+0x8c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4618      	mov	r0, r3
 8001498:	f000 f824 	bl	80014e4 <displayDateTimePart>
	Lcd_string(&lcd, "-");
 800149c:	490b      	ldr	r1, [pc, #44]	; (80014cc <displayTimeLcd+0x80>)
 800149e:	4809      	ldr	r0, [pc, #36]	; (80014c4 <displayTimeLcd+0x78>)
 80014a0:	f7ff fe84 	bl	80011ac <Lcd_string>

	displayDateTimePart(minute);
 80014a4:	4b0d      	ldr	r3, [pc, #52]	; (80014dc <displayTimeLcd+0x90>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4618      	mov	r0, r3
 80014aa:	f000 f81b 	bl	80014e4 <displayDateTimePart>
	Lcd_string(&lcd, "-");
 80014ae:	4907      	ldr	r1, [pc, #28]	; (80014cc <displayTimeLcd+0x80>)
 80014b0:	4804      	ldr	r0, [pc, #16]	; (80014c4 <displayTimeLcd+0x78>)
 80014b2:	f7ff fe7b 	bl	80011ac <Lcd_string>

	displayDateTimePart(second);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <displayTimeLcd+0x94>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4618      	mov	r0, r3
 80014bc:	f000 f812 	bl	80014e4 <displayDateTimePart>
}
 80014c0:	bf00      	nop
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	200003d8 	.word	0x200003d8
 80014c8:	20000024 	.word	0x20000024
 80014cc:	0800d240 	.word	0x0800d240
 80014d0:	20000028 	.word	0x20000028
 80014d4:	2000002c 	.word	0x2000002c
 80014d8:	20000030 	.word	0x20000030
 80014dc:	20000034 	.word	0x20000034
 80014e0:	200003f8 	.word	0x200003f8

080014e4 <displayDateTimePart>:

void displayDateTimePart(int time)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b082      	sub	sp, #8
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	if (time < 10)
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	2b09      	cmp	r3, #9
 80014f0:	dc03      	bgt.n	80014fa <displayDateTimePart+0x16>
	{
		Lcd_int(&lcd, 0);
 80014f2:	2100      	movs	r1, #0
 80014f4:	4805      	ldr	r0, [pc, #20]	; (800150c <displayDateTimePart+0x28>)
 80014f6:	f7ff fe41 	bl	800117c <Lcd_int>
	}
	Lcd_int(&lcd, time);
 80014fa:	6879      	ldr	r1, [r7, #4]
 80014fc:	4803      	ldr	r0, [pc, #12]	; (800150c <displayDateTimePart+0x28>)
 80014fe:	f7ff fe3d 	bl	800117c <Lcd_int>
}
 8001502:	bf00      	nop
 8001504:	3708      	adds	r7, #8
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}
 800150a:	bf00      	nop
 800150c:	200003d8 	.word	0x200003d8

08001510 <returnDaysByMonth>:

int returnDaysByMonth()
{
 8001510:	b480      	push	{r7}
 8001512:	af00      	add	r7, sp, #0
	switch (month)
 8001514:	4b17      	ldr	r3, [pc, #92]	; (8001574 <returnDaysByMonth+0x64>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	3b01      	subs	r3, #1
 800151a:	2b0a      	cmp	r3, #10
 800151c:	d824      	bhi.n	8001568 <returnDaysByMonth+0x58>
 800151e:	a201      	add	r2, pc, #4	; (adr r2, 8001524 <returnDaysByMonth+0x14>)
 8001520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001524:	08001565 	.word	0x08001565
 8001528:	08001551 	.word	0x08001551
 800152c:	08001565 	.word	0x08001565
 8001530:	08001569 	.word	0x08001569
 8001534:	08001565 	.word	0x08001565
 8001538:	08001569 	.word	0x08001569
 800153c:	08001565 	.word	0x08001565
 8001540:	08001569 	.word	0x08001569
 8001544:	08001565 	.word	0x08001565
 8001548:	08001569 	.word	0x08001569
 800154c:	08001565 	.word	0x08001565
	{
		case 2:
			if ((year % 4) == 0) {
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <returnDaysByMonth+0x68>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f003 0303 	and.w	r3, r3, #3
 8001558:	2b00      	cmp	r3, #0
 800155a:	d101      	bne.n	8001560 <returnDaysByMonth+0x50>
				return 29;
 800155c:	231d      	movs	r3, #29
 800155e:	e004      	b.n	800156a <returnDaysByMonth+0x5a>
			}
			return 28;
 8001560:	231c      	movs	r3, #28
 8001562:	e002      	b.n	800156a <returnDaysByMonth+0x5a>
		case 3:
		case 5:
		case 7:
		case 9:
		case 11:
			return 31;
 8001564:	231f      	movs	r3, #31
 8001566:	e000      	b.n	800156a <returnDaysByMonth+0x5a>
		case 6:
		case 8:
		case 10:
		case 12:
		default:
			return 30;
 8001568:	231e      	movs	r3, #30
	}
}
 800156a:	4618      	mov	r0, r3
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr
 8001574:	20000028 	.word	0x20000028
 8001578:	20000024 	.word	0x20000024

0800157c <getTemperatureSensorVoltage>:

void getTemperatureSensorVoltage()
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
	HAL_ADC_Start(&hadc1);
 8001580:	4819      	ldr	r0, [pc, #100]	; (80015e8 <getTemperatureSensorVoltage+0x6c>)
 8001582:	f000 ff5b 	bl	800243c <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001586:	f04f 31ff 	mov.w	r1, #4294967295
 800158a:	4817      	ldr	r0, [pc, #92]	; (80015e8 <getTemperatureSensorVoltage+0x6c>)
 800158c:	f001 f828 	bl	80025e0 <HAL_ADC_PollForConversion>

	value = HAL_ADC_GetValue(&hadc1);
 8001590:	4815      	ldr	r0, [pc, #84]	; (80015e8 <getTemperatureSensorVoltage+0x6c>)
 8001592:	f001 f8b0 	bl	80026f6 <HAL_ADC_GetValue>
 8001596:	4603      	mov	r3, r0
 8001598:	4a14      	ldr	r2, [pc, #80]	; (80015ec <getTemperatureSensorVoltage+0x70>)
 800159a:	6013      	str	r3, [r2, #0]
	temperature = 100.0 - ((value / 1024.0) * 49.0);
 800159c:	4b13      	ldr	r3, [pc, #76]	; (80015ec <getTemperatureSensorVoltage+0x70>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4618      	mov	r0, r3
 80015a2:	f7fe ffaf 	bl	8000504 <__aeabi_ui2d>
 80015a6:	f04f 0200 	mov.w	r2, #0
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <getTemperatureSensorVoltage+0x74>)
 80015ac:	f7ff f94e 	bl	800084c <__aeabi_ddiv>
 80015b0:	4602      	mov	r2, r0
 80015b2:	460b      	mov	r3, r1
 80015b4:	4610      	mov	r0, r2
 80015b6:	4619      	mov	r1, r3
 80015b8:	f04f 0200 	mov.w	r2, #0
 80015bc:	4b0d      	ldr	r3, [pc, #52]	; (80015f4 <getTemperatureSensorVoltage+0x78>)
 80015be:	f7ff f81b 	bl	80005f8 <__aeabi_dmul>
 80015c2:	4602      	mov	r2, r0
 80015c4:	460b      	mov	r3, r1
 80015c6:	f04f 0000 	mov.w	r0, #0
 80015ca:	490b      	ldr	r1, [pc, #44]	; (80015f8 <getTemperatureSensorVoltage+0x7c>)
 80015cc:	f7fe fe5c 	bl	8000288 <__aeabi_dsub>
 80015d0:	4602      	mov	r2, r0
 80015d2:	460b      	mov	r3, r1
 80015d4:	4610      	mov	r0, r2
 80015d6:	4619      	mov	r1, r3
 80015d8:	f7ff fabe 	bl	8000b58 <__aeabi_d2iz>
 80015dc:	4603      	mov	r3, r0
 80015de:	4a07      	ldr	r2, [pc, #28]	; (80015fc <getTemperatureSensorVoltage+0x80>)
 80015e0:	6013      	str	r3, [r2, #0]
}
 80015e2:	bf00      	nop
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000254 	.word	0x20000254
 80015ec:	200003f0 	.word	0x200003f0
 80015f0:	40900000 	.word	0x40900000
 80015f4:	40488000 	.word	0x40488000
 80015f8:	40590000 	.word	0x40590000
 80015fc:	200003f4 	.word	0x200003f4

08001600 <displayCurrentTemperature>:

void displayCurrentTemperature()
{
 8001600:	b580      	push	{r7, lr}
 8001602:	af00      	add	r7, sp, #0
	Lcd_cursor(&lcd, 0, 0);
 8001604:	2200      	movs	r2, #0
 8001606:	2100      	movs	r1, #0
 8001608:	4810      	ldr	r0, [pc, #64]	; (800164c <displayCurrentTemperature+0x4c>)
 800160a:	f7ff fdef 	bl	80011ec <Lcd_cursor>
	if (temperature < 10)
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <displayCurrentTemperature+0x50>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	2b09      	cmp	r3, #9
 8001614:	dc03      	bgt.n	800161e <displayCurrentTemperature+0x1e>
	{
		Lcd_int(&lcd, 0);
 8001616:	2100      	movs	r1, #0
 8001618:	480c      	ldr	r0, [pc, #48]	; (800164c <displayCurrentTemperature+0x4c>)
 800161a:	f7ff fdaf 	bl	800117c <Lcd_int>
	}
	Lcd_int(&lcd, (temperature % 100));
 800161e:	4b0c      	ldr	r3, [pc, #48]	; (8001650 <displayCurrentTemperature+0x50>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a0c      	ldr	r2, [pc, #48]	; (8001654 <displayCurrentTemperature+0x54>)
 8001624:	fb82 1203 	smull	r1, r2, r2, r3
 8001628:	1151      	asrs	r1, r2, #5
 800162a:	17da      	asrs	r2, r3, #31
 800162c:	1a8a      	subs	r2, r1, r2
 800162e:	2164      	movs	r1, #100	; 0x64
 8001630:	fb01 f202 	mul.w	r2, r1, r2
 8001634:	1a9a      	subs	r2, r3, r2
 8001636:	4611      	mov	r1, r2
 8001638:	4804      	ldr	r0, [pc, #16]	; (800164c <displayCurrentTemperature+0x4c>)
 800163a:	f7ff fd9f 	bl	800117c <Lcd_int>

	Lcd_string(&lcd, "\x01");
 800163e:	4906      	ldr	r1, [pc, #24]	; (8001658 <displayCurrentTemperature+0x58>)
 8001640:	4802      	ldr	r0, [pc, #8]	; (800164c <displayCurrentTemperature+0x4c>)
 8001642:	f7ff fdb3 	bl	80011ac <Lcd_string>
}
 8001646:	bf00      	nop
 8001648:	bd80      	pop	{r7, pc}
 800164a:	bf00      	nop
 800164c:	200003d8 	.word	0x200003d8
 8001650:	200003f4 	.word	0x200003f4
 8001654:	51eb851f 	.word	0x51eb851f
 8001658:	0800d244 	.word	0x0800d244

0800165c <displayAlarmTemperature>:

void displayAlarmTemperature()
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
	Lcd_cursor(&lcd, 1, 0);
 8001660:	2200      	movs	r2, #0
 8001662:	2101      	movs	r1, #1
 8001664:	4812      	ldr	r0, [pc, #72]	; (80016b0 <displayAlarmTemperature+0x54>)
 8001666:	f7ff fdc1 	bl	80011ec <Lcd_cursor>
	if (alarmTemperature < 10)
 800166a:	4b12      	ldr	r3, [pc, #72]	; (80016b4 <displayAlarmTemperature+0x58>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	2b09      	cmp	r3, #9
 8001670:	dc03      	bgt.n	800167a <displayAlarmTemperature+0x1e>
	{
		Lcd_int(&lcd, 0);
 8001672:	2100      	movs	r1, #0
 8001674:	480e      	ldr	r0, [pc, #56]	; (80016b0 <displayAlarmTemperature+0x54>)
 8001676:	f7ff fd81 	bl	800117c <Lcd_int>
	}
	Lcd_int(&lcd, (alarmTemperature % 100));
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <displayAlarmTemperature+0x58>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a0e      	ldr	r2, [pc, #56]	; (80016b8 <displayAlarmTemperature+0x5c>)
 8001680:	fb82 1203 	smull	r1, r2, r2, r3
 8001684:	1151      	asrs	r1, r2, #5
 8001686:	17da      	asrs	r2, r3, #31
 8001688:	1a8a      	subs	r2, r1, r2
 800168a:	2164      	movs	r1, #100	; 0x64
 800168c:	fb01 f202 	mul.w	r2, r1, r2
 8001690:	1a9a      	subs	r2, r3, r2
 8001692:	4611      	mov	r1, r2
 8001694:	4806      	ldr	r0, [pc, #24]	; (80016b0 <displayAlarmTemperature+0x54>)
 8001696:	f7ff fd71 	bl	800117c <Lcd_int>

	Lcd_string(&lcd, "\x01");
 800169a:	4908      	ldr	r1, [pc, #32]	; (80016bc <displayAlarmTemperature+0x60>)
 800169c:	4804      	ldr	r0, [pc, #16]	; (80016b0 <displayAlarmTemperature+0x54>)
 800169e:	f7ff fd85 	bl	80011ac <Lcd_string>
	Lcd_string(&lcd, "!");
 80016a2:	4907      	ldr	r1, [pc, #28]	; (80016c0 <displayAlarmTemperature+0x64>)
 80016a4:	4802      	ldr	r0, [pc, #8]	; (80016b0 <displayAlarmTemperature+0x54>)
 80016a6:	f7ff fd81 	bl	80011ac <Lcd_string>

}
 80016aa:	bf00      	nop
 80016ac:	bd80      	pop	{r7, pc}
 80016ae:	bf00      	nop
 80016b0:	200003d8 	.word	0x200003d8
 80016b4:	20000020 	.word	0x20000020
 80016b8:	51eb851f 	.word	0x51eb851f
 80016bc:	0800d244 	.word	0x0800d244
 80016c0:	0800d248 	.word	0x0800d248

080016c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80016c4:	b5b0      	push	{r4, r5, r7, lr}
 80016c6:	b08c      	sub	sp, #48	; 0x30
 80016c8:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80016ca:	f000 fddd 	bl	8002288 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80016ce:	f000 f85b 	bl	8001788 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80016d2:	f000 f9cd 	bl	8001a70 <MX_GPIO_Init>
	MX_ADC1_Init();
 80016d6:	f000 f8c1 	bl	800185c <MX_ADC1_Init>
	MX_I2C1_Init();
 80016da:	f000 f911 	bl	8001900 <MX_I2C1_Init>
	MX_I2S3_Init();
 80016de:	f000 f93d 	bl	800195c <MX_I2S3_Init>
	MX_SPI1_Init();
 80016e2:	f000 f96b 	bl	80019bc <MX_SPI1_Init>
	MX_USB_HOST_Init();
 80016e6:	f006 fe39 	bl	800835c <MX_USB_HOST_Init>
	MX_TIM11_Init();
 80016ea:	f000 f99d 	bl	8001a28 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */
	int start_time = HAL_GetTick();
 80016ee:	f000 fe31 	bl	8002354 <HAL_GetTick>
 80016f2:	4603      	mov	r3, r0
 80016f4:	61fb      	str	r3, [r7, #28]
	lcd = Lcd_create(
 80016f6:	4c1f      	ldr	r4, [pc, #124]	; (8001774 <main+0xb0>)
 80016f8:	4638      	mov	r0, r7
 80016fa:	2300      	movs	r3, #0
 80016fc:	9303      	str	r3, [sp, #12]
 80016fe:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001702:	9302      	str	r3, [sp, #8]
 8001704:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <main+0xb4>)
 8001706:	9301      	str	r3, [sp, #4]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <main+0xb4>)
 800170e:	4a1b      	ldr	r2, [pc, #108]	; (800177c <main+0xb8>)
 8001710:	491b      	ldr	r1, [pc, #108]	; (8001780 <main+0xbc>)
 8001712:	f7ff fcdf 	bl	80010d4 <Lcd_create>
 8001716:	4625      	mov	r5, r4
 8001718:	463c      	mov	r4, r7
 800171a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800171c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800171e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001722:	e885 0003 	stmia.w	r5, {r0, r1}
			LCD_ENA_GPIO_Port,
			LCD_ENA_Pin,
			LCD_4_BIT_MODE
	);

	Lcd_define_char(&lcd, 1, celsiusChar);
 8001726:	4a17      	ldr	r2, [pc, #92]	; (8001784 <main+0xc0>)
 8001728:	2101      	movs	r1, #1
 800172a:	4812      	ldr	r0, [pc, #72]	; (8001774 <main+0xb0>)
 800172c:	f7ff fd78 	bl	8001220 <Lcd_define_char>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while(1) {
		int end_time = HAL_GetTick();
 8001730:	f000 fe10 	bl	8002354 <HAL_GetTick>
 8001734:	4603      	mov	r3, r0
 8001736:	61bb      	str	r3, [r7, #24]
		getTemperatureSensorVoltage();
 8001738:	f7ff ff20 	bl	800157c <getTemperatureSensorVoltage>
		displayCurrentTemperature();
 800173c:	f7ff ff60 	bl	8001600 <displayCurrentTemperature>

		if(end_time-start_time>=1000){
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800174a:	db05      	blt.n	8001758 <main+0x94>
			displayAlarmTemperature();
 800174c:	f7ff ff86 	bl	800165c <displayAlarmTemperature>
			calcDateTime();
 8001750:	f7ff fe28 	bl	80013a4 <calcDateTime>
			start_time = end_time;
 8001754:	69bb      	ldr	r3, [r7, #24]
 8001756:	61fb      	str	r3, [r7, #28]
		}
		displayTimeLcd();
 8001758:	f7ff fe78 	bl	800144c <displayTimeLcd>
		button_pressed(lcd);
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <main+0xb0>)
 800175e:	466c      	mov	r4, sp
 8001760:	f103 0210 	add.w	r2, r3, #16
 8001764:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001768:	e884 0003 	stmia.w	r4, {r0, r1}
 800176c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800176e:	f7ff fc43 	bl	8000ff8 <button_pressed>
	while(1) {
 8001772:	e7dd      	b.n	8001730 <main+0x6c>
 8001774:	200003d8 	.word	0x200003d8
 8001778:	40021000 	.word	0x40021000
 800177c:	20000010 	.word	0x20000010
 8001780:	20000000 	.word	0x20000000
 8001784:	20000018 	.word	0x20000018

08001788 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	b094      	sub	sp, #80	; 0x50
 800178c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	2230      	movs	r2, #48	; 0x30
 8001794:	2100      	movs	r1, #0
 8001796:	4618      	mov	r0, r3
 8001798:	f007 f8ca 	bl	8008930 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	2300      	movs	r3, #0
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	4b28      	ldr	r3, [pc, #160]	; (8001854 <SystemClock_Config+0xcc>)
 80017b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b4:	4a27      	ldr	r2, [pc, #156]	; (8001854 <SystemClock_Config+0xcc>)
 80017b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017ba:	6413      	str	r3, [r2, #64]	; 0x40
 80017bc:	4b25      	ldr	r3, [pc, #148]	; (8001854 <SystemClock_Config+0xcc>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c4:	60bb      	str	r3, [r7, #8]
 80017c6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017c8:	2300      	movs	r3, #0
 80017ca:	607b      	str	r3, [r7, #4]
 80017cc:	4b22      	ldr	r3, [pc, #136]	; (8001858 <SystemClock_Config+0xd0>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a21      	ldr	r2, [pc, #132]	; (8001858 <SystemClock_Config+0xd0>)
 80017d2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b1f      	ldr	r3, [pc, #124]	; (8001858 <SystemClock_Config+0xd0>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e0:	607b      	str	r3, [r7, #4]
 80017e2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017e4:	2301      	movs	r3, #1
 80017e6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017e8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017ec:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ee:	2302      	movs	r3, #2
 80017f0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80017f8:	2308      	movs	r3, #8
 80017fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017fc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001800:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001802:	2302      	movs	r3, #2
 8001804:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001806:	2307      	movs	r3, #7
 8001808:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800180a:	f107 0320 	add.w	r3, r7, #32
 800180e:	4618      	mov	r0, r3
 8001810:	f003 fe4e 	bl	80054b0 <HAL_RCC_OscConfig>
 8001814:	4603      	mov	r3, r0
 8001816:	2b00      	cmp	r3, #0
 8001818:	d001      	beq.n	800181e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800181a:	f000 fa5b 	bl	8001cd4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800181e:	230f      	movs	r3, #15
 8001820:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001822:	2302      	movs	r3, #2
 8001824:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800182a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800182e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001834:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001836:	f107 030c 	add.w	r3, r7, #12
 800183a:	2105      	movs	r1, #5
 800183c:	4618      	mov	r0, r3
 800183e:	f004 f8af 	bl	80059a0 <HAL_RCC_ClockConfig>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001848:	f000 fa44 	bl	8001cd4 <Error_Handler>
  }
}
 800184c:	bf00      	nop
 800184e:	3750      	adds	r7, #80	; 0x50
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40023800 	.word	0x40023800
 8001858:	40007000 	.word	0x40007000

0800185c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001862:	463b      	mov	r3, r7
 8001864:	2200      	movs	r2, #0
 8001866:	601a      	str	r2, [r3, #0]
 8001868:	605a      	str	r2, [r3, #4]
 800186a:	609a      	str	r2, [r3, #8]
 800186c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800186e:	4b21      	ldr	r3, [pc, #132]	; (80018f4 <MX_ADC1_Init+0x98>)
 8001870:	4a21      	ldr	r2, [pc, #132]	; (80018f8 <MX_ADC1_Init+0x9c>)
 8001872:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001874:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <MX_ADC1_Init+0x98>)
 8001876:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800187a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800187c:	4b1d      	ldr	r3, [pc, #116]	; (80018f4 <MX_ADC1_Init+0x98>)
 800187e:	2200      	movs	r2, #0
 8001880:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001882:	4b1c      	ldr	r3, [pc, #112]	; (80018f4 <MX_ADC1_Init+0x98>)
 8001884:	2200      	movs	r2, #0
 8001886:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001888:	4b1a      	ldr	r3, [pc, #104]	; (80018f4 <MX_ADC1_Init+0x98>)
 800188a:	2200      	movs	r2, #0
 800188c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800188e:	4b19      	ldr	r3, [pc, #100]	; (80018f4 <MX_ADC1_Init+0x98>)
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001896:	4b17      	ldr	r3, [pc, #92]	; (80018f4 <MX_ADC1_Init+0x98>)
 8001898:	2200      	movs	r2, #0
 800189a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800189c:	4b15      	ldr	r3, [pc, #84]	; (80018f4 <MX_ADC1_Init+0x98>)
 800189e:	4a17      	ldr	r2, [pc, #92]	; (80018fc <MX_ADC1_Init+0xa0>)
 80018a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80018a2:	4b14      	ldr	r3, [pc, #80]	; (80018f4 <MX_ADC1_Init+0x98>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80018a8:	4b12      	ldr	r3, [pc, #72]	; (80018f4 <MX_ADC1_Init+0x98>)
 80018aa:	2201      	movs	r2, #1
 80018ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80018ae:	4b11      	ldr	r3, [pc, #68]	; (80018f4 <MX_ADC1_Init+0x98>)
 80018b0:	2200      	movs	r2, #0
 80018b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80018b6:	4b0f      	ldr	r3, [pc, #60]	; (80018f4 <MX_ADC1_Init+0x98>)
 80018b8:	2201      	movs	r2, #1
 80018ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80018bc:	480d      	ldr	r0, [pc, #52]	; (80018f4 <MX_ADC1_Init+0x98>)
 80018be:	f000 fd79 	bl	80023b4 <HAL_ADC_Init>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018c8:	f000 fa04 	bl	8001cd4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80018cc:	2309      	movs	r3, #9
 80018ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018d0:	2301      	movs	r3, #1
 80018d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018d4:	2300      	movs	r3, #0
 80018d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d8:	463b      	mov	r3, r7
 80018da:	4619      	mov	r1, r3
 80018dc:	4805      	ldr	r0, [pc, #20]	; (80018f4 <MX_ADC1_Init+0x98>)
 80018de:	f000 ff17 	bl	8002710 <HAL_ADC_ConfigChannel>
 80018e2:	4603      	mov	r3, r0
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d001      	beq.n	80018ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018e8:	f000 f9f4 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80018ec:	bf00      	nop
 80018ee:	3710      	adds	r7, #16
 80018f0:	46bd      	mov	sp, r7
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	20000254 	.word	0x20000254
 80018f8:	40012000 	.word	0x40012000
 80018fc:	0f000001 	.word	0x0f000001

08001900 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001904:	4b12      	ldr	r3, [pc, #72]	; (8001950 <MX_I2C1_Init+0x50>)
 8001906:	4a13      	ldr	r2, [pc, #76]	; (8001954 <MX_I2C1_Init+0x54>)
 8001908:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800190a:	4b11      	ldr	r3, [pc, #68]	; (8001950 <MX_I2C1_Init+0x50>)
 800190c:	4a12      	ldr	r2, [pc, #72]	; (8001958 <MX_I2C1_Init+0x58>)
 800190e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001910:	4b0f      	ldr	r3, [pc, #60]	; (8001950 <MX_I2C1_Init+0x50>)
 8001912:	2200      	movs	r2, #0
 8001914:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001916:	4b0e      	ldr	r3, [pc, #56]	; (8001950 <MX_I2C1_Init+0x50>)
 8001918:	2200      	movs	r2, #0
 800191a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800191c:	4b0c      	ldr	r3, [pc, #48]	; (8001950 <MX_I2C1_Init+0x50>)
 800191e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001922:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001924:	4b0a      	ldr	r3, [pc, #40]	; (8001950 <MX_I2C1_Init+0x50>)
 8001926:	2200      	movs	r2, #0
 8001928:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800192a:	4b09      	ldr	r3, [pc, #36]	; (8001950 <MX_I2C1_Init+0x50>)
 800192c:	2200      	movs	r2, #0
 800192e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001930:	4b07      	ldr	r3, [pc, #28]	; (8001950 <MX_I2C1_Init+0x50>)
 8001932:	2200      	movs	r2, #0
 8001934:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001936:	4b06      	ldr	r3, [pc, #24]	; (8001950 <MX_I2C1_Init+0x50>)
 8001938:	2200      	movs	r2, #0
 800193a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800193c:	4804      	ldr	r0, [pc, #16]	; (8001950 <MX_I2C1_Init+0x50>)
 800193e:	f002 ffd3 	bl	80048e8 <HAL_I2C_Init>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001948:	f000 f9c4 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800194c:	bf00      	nop
 800194e:	bd80      	pop	{r7, pc}
 8001950:	2000029c 	.word	0x2000029c
 8001954:	40005400 	.word	0x40005400
 8001958:	000186a0 	.word	0x000186a0

0800195c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8001960:	4b13      	ldr	r3, [pc, #76]	; (80019b0 <MX_I2S3_Init+0x54>)
 8001962:	4a14      	ldr	r2, [pc, #80]	; (80019b4 <MX_I2S3_Init+0x58>)
 8001964:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8001966:	4b12      	ldr	r3, [pc, #72]	; (80019b0 <MX_I2S3_Init+0x54>)
 8001968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800196c:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 800196e:	4b10      	ldr	r3, [pc, #64]	; (80019b0 <MX_I2S3_Init+0x54>)
 8001970:	2200      	movs	r2, #0
 8001972:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001974:	4b0e      	ldr	r3, [pc, #56]	; (80019b0 <MX_I2S3_Init+0x54>)
 8001976:	2200      	movs	r2, #0
 8001978:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <MX_I2S3_Init+0x54>)
 800197c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001980:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8001982:	4b0b      	ldr	r3, [pc, #44]	; (80019b0 <MX_I2S3_Init+0x54>)
 8001984:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <MX_I2S3_Init+0x5c>)
 8001986:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8001988:	4b09      	ldr	r3, [pc, #36]	; (80019b0 <MX_I2S3_Init+0x54>)
 800198a:	2200      	movs	r2, #0
 800198c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800198e:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <MX_I2S3_Init+0x54>)
 8001990:	2200      	movs	r2, #0
 8001992:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001994:	4b06      	ldr	r3, [pc, #24]	; (80019b0 <MX_I2S3_Init+0x54>)
 8001996:	2200      	movs	r2, #0
 8001998:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800199a:	4805      	ldr	r0, [pc, #20]	; (80019b0 <MX_I2S3_Init+0x54>)
 800199c:	f003 f8e8 	bl	8004b70 <HAL_I2S_Init>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80019a6:	f000 f995 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	200002f0 	.word	0x200002f0
 80019b4:	40003c00 	.word	0x40003c00
 80019b8:	00017700 	.word	0x00017700

080019bc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019c0:	4b17      	ldr	r3, [pc, #92]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019c2:	4a18      	ldr	r2, [pc, #96]	; (8001a24 <MX_SPI1_Init+0x68>)
 80019c4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019c6:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019c8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019cc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019ce:	4b14      	ldr	r3, [pc, #80]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019d4:	4b12      	ldr	r3, [pc, #72]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019da:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019dc:	2200      	movs	r2, #0
 80019de:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019e0:	4b0f      	ldr	r3, [pc, #60]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80019e6:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019e8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019ec:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80019ee:	4b0c      	ldr	r3, [pc, #48]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80019f4:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019f6:	2200      	movs	r2, #0
 80019f8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <MX_SPI1_Init+0x64>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a00:	4b07      	ldr	r3, [pc, #28]	; (8001a20 <MX_SPI1_Init+0x64>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a06:	4b06      	ldr	r3, [pc, #24]	; (8001a20 <MX_SPI1_Init+0x64>)
 8001a08:	220a      	movs	r2, #10
 8001a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a0c:	4804      	ldr	r0, [pc, #16]	; (8001a20 <MX_SPI1_Init+0x64>)
 8001a0e:	f004 fb13 	bl	8006038 <HAL_SPI_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a18:	f000 f95c 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	20000338 	.word	0x20000338
 8001a24:	40013000 	.word	0x40013000

08001a28 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001a2c:	4b0e      	ldr	r3, [pc, #56]	; (8001a68 <MX_TIM11_Init+0x40>)
 8001a2e:	4a0f      	ldr	r2, [pc, #60]	; (8001a6c <MX_TIM11_Init+0x44>)
 8001a30:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8001a32:	4b0d      	ldr	r3, [pc, #52]	; (8001a68 <MX_TIM11_Init+0x40>)
 8001a34:	2200      	movs	r2, #0
 8001a36:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a38:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <MX_TIM11_Init+0x40>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8001a3e:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <MX_TIM11_Init+0x40>)
 8001a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a44:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a46:	4b08      	ldr	r3, [pc, #32]	; (8001a68 <MX_TIM11_Init+0x40>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a4c:	4b06      	ldr	r3, [pc, #24]	; (8001a68 <MX_TIM11_Init+0x40>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001a52:	4805      	ldr	r0, [pc, #20]	; (8001a68 <MX_TIM11_Init+0x40>)
 8001a54:	f004 fb79 	bl	800614a <HAL_TIM_Base_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8001a5e:	f000 f939 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001a62:	bf00      	nop
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	20000390 	.word	0x20000390
 8001a6c:	40014800 	.word	0x40014800

08001a70 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b08c      	sub	sp, #48	; 0x30
 8001a74:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	609a      	str	r2, [r3, #8]
 8001a82:	60da      	str	r2, [r3, #12]
 8001a84:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a86:	2300      	movs	r3, #0
 8001a88:	61bb      	str	r3, [r7, #24]
 8001a8a:	4b8c      	ldr	r3, [pc, #560]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a8e:	4a8b      	ldr	r2, [pc, #556]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001a90:	f043 0310 	orr.w	r3, r3, #16
 8001a94:	6313      	str	r3, [r2, #48]	; 0x30
 8001a96:	4b89      	ldr	r3, [pc, #548]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9a:	f003 0310 	and.w	r3, r3, #16
 8001a9e:	61bb      	str	r3, [r7, #24]
 8001aa0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa2:	2300      	movs	r3, #0
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	4b85      	ldr	r3, [pc, #532]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	4a84      	ldr	r2, [pc, #528]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001aac:	f043 0304 	orr.w	r3, r3, #4
 8001ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab2:	4b82      	ldr	r3, [pc, #520]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	f003 0304 	and.w	r3, r3, #4
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
 8001ac2:	4b7e      	ldr	r3, [pc, #504]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	4a7d      	ldr	r2, [pc, #500]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001acc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ace:	4b7b      	ldr	r3, [pc, #492]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ad6:	613b      	str	r3, [r7, #16]
 8001ad8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60fb      	str	r3, [r7, #12]
 8001ade:	4b77      	ldr	r3, [pc, #476]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	4a76      	ldr	r2, [pc, #472]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001ae4:	f043 0301 	orr.w	r3, r3, #1
 8001ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8001aea:	4b74      	ldr	r3, [pc, #464]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aee:	f003 0301 	and.w	r3, r3, #1
 8001af2:	60fb      	str	r3, [r7, #12]
 8001af4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	60bb      	str	r3, [r7, #8]
 8001afa:	4b70      	ldr	r3, [pc, #448]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afe:	4a6f      	ldr	r2, [pc, #444]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6313      	str	r3, [r2, #48]	; 0x30
 8001b06:	4b6d      	ldr	r3, [pc, #436]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	60bb      	str	r3, [r7, #8]
 8001b10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	607b      	str	r3, [r7, #4]
 8001b16:	4b69      	ldr	r3, [pc, #420]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a68      	ldr	r2, [pc, #416]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001b1c:	f043 0308 	orr.w	r3, r3, #8
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b66      	ldr	r3, [pc, #408]	; (8001cbc <MX_GPIO_Init+0x24c>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0308 	and.w	r3, r3, #8
 8001b2a:	607b      	str	r3, [r7, #4]
 8001b2c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LCD_RS_Pin|LCD_RW_Pin|LCD_ENA_Pin
 8001b2e:	2200      	movs	r2, #0
 8001b30:	f64f 4188 	movw	r1, #64648	; 0xfc88
 8001b34:	4862      	ldr	r0, [pc, #392]	; (8001cc0 <MX_GPIO_Init+0x250>)
 8001b36:	f001 facf 	bl	80030d8 <HAL_GPIO_WritePin>
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001b3a:	2201      	movs	r2, #1
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	4861      	ldr	r0, [pc, #388]	; (8001cc4 <MX_GPIO_Init+0x254>)
 8001b40:	f001 faca 	bl	80030d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001b44:	2200      	movs	r2, #0
 8001b46:	f24f 0110 	movw	r1, #61456	; 0xf010
 8001b4a:	485f      	ldr	r0, [pc, #380]	; (8001cc8 <MX_GPIO_Init+0x258>)
 8001b4c:	f001 fac4 	bl	80030d8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin, GPIO_PIN_RESET);
 8001b50:	2200      	movs	r2, #0
 8001b52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b56:	485b      	ldr	r0, [pc, #364]	; (8001cc4 <MX_GPIO_Init+0x254>)
 8001b58:	f001 fabe 	bl	80030d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LCD_RS_Pin LCD_RW_Pin LCD_ENA_Pin
                           LCD_DB4_Pin LCD_DB5_Pin LCD_DB6_Pin LCD_DB7_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LCD_RS_Pin|LCD_RW_Pin|LCD_ENA_Pin
 8001b5c:	f64f 4388 	movw	r3, #64648	; 0xfc88
 8001b60:	61fb      	str	r3, [r7, #28]
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b62:	2301      	movs	r3, #1
 8001b64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b66:	2300      	movs	r3, #0
 8001b68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b6e:	f107 031c 	add.w	r3, r7, #28
 8001b72:	4619      	mov	r1, r3
 8001b74:	4852      	ldr	r0, [pc, #328]	; (8001cc0 <MX_GPIO_Init+0x250>)
 8001b76:	f001 f8fb 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin BTN_DOWN_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|BTN_DOWN_Pin;
 8001b7a:	f240 1301 	movw	r3, #257	; 0x101
 8001b7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b80:	2301      	movs	r3, #1
 8001b82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b84:	2300      	movs	r3, #0
 8001b86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b88:	2300      	movs	r3, #0
 8001b8a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b8c:	f107 031c 	add.w	r3, r7, #28
 8001b90:	4619      	mov	r1, r3
 8001b92:	484c      	ldr	r0, [pc, #304]	; (8001cc4 <MX_GPIO_Init+0x254>)
 8001b94:	f001 f8ec 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8001b98:	2308      	movs	r3, #8
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b9c:	2302      	movs	r3, #2
 8001b9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ba8:	2305      	movs	r3, #5
 8001baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8001bac:	f107 031c 	add.w	r3, r7, #28
 8001bb0:	4619      	mov	r1, r3
 8001bb2:	4844      	ldr	r0, [pc, #272]	; (8001cc4 <MX_GPIO_Init+0x254>)
 8001bb4:	f001 f8dc 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bbc:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001bc0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001bc6:	f107 031c 	add.w	r3, r7, #28
 8001bca:	4619      	mov	r1, r3
 8001bcc:	483f      	ldr	r0, [pc, #252]	; (8001ccc <MX_GPIO_Init+0x25c>)
 8001bce:	f001 f8cf 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8001bd2:	2304      	movs	r3, #4
 8001bd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001bde:	f107 031c 	add.w	r3, r7, #28
 8001be2:	4619      	mov	r1, r3
 8001be4:	483a      	ldr	r0, [pc, #232]	; (8001cd0 <MX_GPIO_Init+0x260>)
 8001be6:	f001 f8c3 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001bea:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001bee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bf0:	2302      	movs	r3, #2
 8001bf2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001c00:	f107 031c 	add.w	r3, r7, #28
 8001c04:	4619      	mov	r1, r3
 8001c06:	482e      	ldr	r0, [pc, #184]	; (8001cc0 <MX_GPIO_Init+0x250>)
 8001c08:	f001 f8b2 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8001c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c12:	2302      	movs	r3, #2
 8001c14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c16:	2300      	movs	r3, #0
 8001c18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001c1e:	2305      	movs	r3, #5
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8001c22:	f107 031c 	add.w	r3, r7, #28
 8001c26:	4619      	mov	r1, r3
 8001c28:	4829      	ldr	r0, [pc, #164]	; (8001cd0 <MX_GPIO_Init+0x260>)
 8001c2a:	f001 f8a1 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8001c2e:	f24f 0310 	movw	r3, #61456	; 0xf010
 8001c32:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c34:	2301      	movs	r3, #1
 8001c36:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c40:	f107 031c 	add.w	r3, r7, #28
 8001c44:	4619      	mov	r1, r3
 8001c46:	4820      	ldr	r0, [pc, #128]	; (8001cc8 <MX_GPIO_Init+0x258>)
 8001c48:	f001 f892 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_LEFT_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 8001c4c:	f44f 6324 	mov.w	r3, #2624	; 0xa40
 8001c50:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c52:	2300      	movs	r3, #0
 8001c54:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c56:	2300      	movs	r3, #0
 8001c58:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c5a:	f107 031c 	add.w	r3, r7, #28
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4818      	ldr	r0, [pc, #96]	; (8001cc4 <MX_GPIO_Init+0x254>)
 8001c62:	f001 f885 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_MID_Pin */
  GPIO_InitStruct.Pin = BTN_MID_Pin;
 8001c66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c70:	2300      	movs	r3, #0
 8001c72:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_MID_GPIO_Port, &GPIO_InitStruct);
 8001c74:	f107 031c 	add.w	r3, r7, #28
 8001c78:	4619      	mov	r1, r3
 8001c7a:	4814      	ldr	r0, [pc, #80]	; (8001ccc <MX_GPIO_Init+0x25c>)
 8001c7c:	f001 f878 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001c80:	2320      	movs	r3, #32
 8001c82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c84:	2300      	movs	r3, #0
 8001c86:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001c8c:	f107 031c 	add.w	r3, r7, #28
 8001c90:	4619      	mov	r1, r3
 8001c92:	480d      	ldr	r0, [pc, #52]	; (8001cc8 <MX_GPIO_Init+0x258>)
 8001c94:	f001 f86c 	bl	8002d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8001c98:	2302      	movs	r3, #2
 8001c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c9c:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8001ca0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	4804      	ldr	r0, [pc, #16]	; (8001cc0 <MX_GPIO_Init+0x250>)
 8001cae:	f001 f85f 	bl	8002d70 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cb2:	bf00      	nop
 8001cb4:	3730      	adds	r7, #48	; 0x30
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023800 	.word	0x40023800
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40020800 	.word	0x40020800
 8001cc8:	40020c00 	.word	0x40020c00
 8001ccc:	40020000 	.word	0x40020000
 8001cd0:	40020400 	.word	0x40020400

08001cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cd8:	b672      	cpsid	i
}
 8001cda:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cdc:	e7fe      	b.n	8001cdc <Error_Handler+0x8>
	...

08001ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b082      	sub	sp, #8
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	607b      	str	r3, [r7, #4]
 8001cea:	4b10      	ldr	r3, [pc, #64]	; (8001d2c <HAL_MspInit+0x4c>)
 8001cec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cee:	4a0f      	ldr	r2, [pc, #60]	; (8001d2c <HAL_MspInit+0x4c>)
 8001cf0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cf6:	4b0d      	ldr	r3, [pc, #52]	; (8001d2c <HAL_MspInit+0x4c>)
 8001cf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001cfe:	607b      	str	r3, [r7, #4]
 8001d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d02:	2300      	movs	r3, #0
 8001d04:	603b      	str	r3, [r7, #0]
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <HAL_MspInit+0x4c>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	4a08      	ldr	r2, [pc, #32]	; (8001d2c <HAL_MspInit+0x4c>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_MspInit+0x4c>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	603b      	str	r3, [r7, #0]
 8001d1c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d1e:	2007      	movs	r0, #7
 8001d20:	f000 ffe4 	bl	8002cec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d24:	bf00      	nop
 8001d26:	3708      	adds	r7, #8
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40023800 	.word	0x40023800

08001d30 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b08a      	sub	sp, #40	; 0x28
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d38:	f107 0314 	add.w	r3, r7, #20
 8001d3c:	2200      	movs	r2, #0
 8001d3e:	601a      	str	r2, [r3, #0]
 8001d40:	605a      	str	r2, [r3, #4]
 8001d42:	609a      	str	r2, [r3, #8]
 8001d44:	60da      	str	r2, [r3, #12]
 8001d46:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a17      	ldr	r2, [pc, #92]	; (8001dac <HAL_ADC_MspInit+0x7c>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d127      	bne.n	8001da2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d52:	2300      	movs	r3, #0
 8001d54:	613b      	str	r3, [r7, #16]
 8001d56:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <HAL_ADC_MspInit+0x80>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	4a15      	ldr	r2, [pc, #84]	; (8001db0 <HAL_ADC_MspInit+0x80>)
 8001d5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d60:	6453      	str	r3, [r2, #68]	; 0x44
 8001d62:	4b13      	ldr	r3, [pc, #76]	; (8001db0 <HAL_ADC_MspInit+0x80>)
 8001d64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6a:	613b      	str	r3, [r7, #16]
 8001d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d6e:	2300      	movs	r3, #0
 8001d70:	60fb      	str	r3, [r7, #12]
 8001d72:	4b0f      	ldr	r3, [pc, #60]	; (8001db0 <HAL_ADC_MspInit+0x80>)
 8001d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d76:	4a0e      	ldr	r2, [pc, #56]	; (8001db0 <HAL_ADC_MspInit+0x80>)
 8001d78:	f043 0302 	orr.w	r3, r3, #2
 8001d7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d7e:	4b0c      	ldr	r3, [pc, #48]	; (8001db0 <HAL_ADC_MspInit+0x80>)
 8001d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d82:	f003 0302 	and.w	r3, r3, #2
 8001d86:	60fb      	str	r3, [r7, #12]
 8001d88:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = TEMP_SENS_Pin;
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d8e:	2303      	movs	r3, #3
 8001d90:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d92:	2300      	movs	r3, #0
 8001d94:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TEMP_SENS_GPIO_Port, &GPIO_InitStruct);
 8001d96:	f107 0314 	add.w	r3, r7, #20
 8001d9a:	4619      	mov	r1, r3
 8001d9c:	4805      	ldr	r0, [pc, #20]	; (8001db4 <HAL_ADC_MspInit+0x84>)
 8001d9e:	f000 ffe7 	bl	8002d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001da2:	bf00      	nop
 8001da4:	3728      	adds	r7, #40	; 0x28
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	40012000 	.word	0x40012000
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40020400 	.word	0x40020400

08001db8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b08a      	sub	sp, #40	; 0x28
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dc0:	f107 0314 	add.w	r3, r7, #20
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	601a      	str	r2, [r3, #0]
 8001dc8:	605a      	str	r2, [r3, #4]
 8001dca:	609a      	str	r2, [r3, #8]
 8001dcc:	60da      	str	r2, [r3, #12]
 8001dce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	4a19      	ldr	r2, [pc, #100]	; (8001e3c <HAL_I2C_MspInit+0x84>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d12c      	bne.n	8001e34 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dda:	2300      	movs	r3, #0
 8001ddc:	613b      	str	r3, [r7, #16]
 8001dde:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <HAL_I2C_MspInit+0x88>)
 8001de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001de2:	4a17      	ldr	r2, [pc, #92]	; (8001e40 <HAL_I2C_MspInit+0x88>)
 8001de4:	f043 0302 	orr.w	r3, r3, #2
 8001de8:	6313      	str	r3, [r2, #48]	; 0x30
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <HAL_I2C_MspInit+0x88>)
 8001dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dee:	f003 0302 	and.w	r3, r3, #2
 8001df2:	613b      	str	r3, [r7, #16]
 8001df4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8001df6:	f44f 7310 	mov.w	r3, #576	; 0x240
 8001dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dfc:	2312      	movs	r3, #18
 8001dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e00:	2301      	movs	r3, #1
 8001e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e04:	2300      	movs	r3, #0
 8001e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001e08:	2304      	movs	r3, #4
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e0c:	f107 0314 	add.w	r3, r7, #20
 8001e10:	4619      	mov	r1, r3
 8001e12:	480c      	ldr	r0, [pc, #48]	; (8001e44 <HAL_I2C_MspInit+0x8c>)
 8001e14:	f000 ffac 	bl	8002d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001e18:	2300      	movs	r3, #0
 8001e1a:	60fb      	str	r3, [r7, #12]
 8001e1c:	4b08      	ldr	r3, [pc, #32]	; (8001e40 <HAL_I2C_MspInit+0x88>)
 8001e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e20:	4a07      	ldr	r2, [pc, #28]	; (8001e40 <HAL_I2C_MspInit+0x88>)
 8001e22:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001e26:	6413      	str	r3, [r2, #64]	; 0x40
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <HAL_I2C_MspInit+0x88>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e30:	60fb      	str	r3, [r7, #12]
 8001e32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001e34:	bf00      	nop
 8001e36:	3728      	adds	r7, #40	; 0x28
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40005400 	.word	0x40005400
 8001e40:	40023800 	.word	0x40023800
 8001e44:	40020400 	.word	0x40020400

08001e48 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08e      	sub	sp, #56	; 0x38
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e54:	2200      	movs	r2, #0
 8001e56:	601a      	str	r2, [r3, #0]
 8001e58:	605a      	str	r2, [r3, #4]
 8001e5a:	609a      	str	r2, [r3, #8]
 8001e5c:	60da      	str	r2, [r3, #12]
 8001e5e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001e60:	f107 0314 	add.w	r3, r7, #20
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]
 8001e68:	605a      	str	r2, [r3, #4]
 8001e6a:	609a      	str	r2, [r3, #8]
 8001e6c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a31      	ldr	r2, [pc, #196]	; (8001f38 <HAL_I2S_MspInit+0xf0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d15a      	bne.n	8001f2e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001e78:	2301      	movs	r3, #1
 8001e7a:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001e7c:	23c0      	movs	r3, #192	; 0xc0
 8001e7e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001e80:	2302      	movs	r3, #2
 8001e82:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001e84:	f107 0314 	add.w	r3, r7, #20
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f003 ff95 	bl	8005db8 <HAL_RCCEx_PeriphCLKConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001e94:	f7ff ff1e 	bl	8001cd4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001e98:	2300      	movs	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	4b27      	ldr	r3, [pc, #156]	; (8001f3c <HAL_I2S_MspInit+0xf4>)
 8001e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ea0:	4a26      	ldr	r2, [pc, #152]	; (8001f3c <HAL_I2S_MspInit+0xf4>)
 8001ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ea6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ea8:	4b24      	ldr	r3, [pc, #144]	; (8001f3c <HAL_I2S_MspInit+0xf4>)
 8001eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001eb0:	613b      	str	r3, [r7, #16]
 8001eb2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <HAL_I2S_MspInit+0xf4>)
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	4a1f      	ldr	r2, [pc, #124]	; (8001f3c <HAL_I2S_MspInit+0xf4>)
 8001ebe:	f043 0301 	orr.w	r3, r3, #1
 8001ec2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ec4:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <HAL_I2S_MspInit+0xf4>)
 8001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ec8:	f003 0301 	and.w	r3, r3, #1
 8001ecc:	60fb      	str	r3, [r7, #12]
 8001ece:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	60bb      	str	r3, [r7, #8]
 8001ed4:	4b19      	ldr	r3, [pc, #100]	; (8001f3c <HAL_I2S_MspInit+0xf4>)
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed8:	4a18      	ldr	r2, [pc, #96]	; (8001f3c <HAL_I2S_MspInit+0xf4>)
 8001eda:	f043 0304 	orr.w	r3, r3, #4
 8001ede:	6313      	str	r3, [r2, #48]	; 0x30
 8001ee0:	4b16      	ldr	r3, [pc, #88]	; (8001f3c <HAL_I2S_MspInit+0xf4>)
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	f003 0304 	and.w	r3, r3, #4
 8001ee8:	60bb      	str	r3, [r7, #8]
 8001eea:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001eec:	2310      	movs	r3, #16
 8001eee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001efc:	2306      	movs	r3, #6
 8001efe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001f00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f04:	4619      	mov	r1, r3
 8001f06:	480e      	ldr	r0, [pc, #56]	; (8001f40 <HAL_I2S_MspInit+0xf8>)
 8001f08:	f000 ff32 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001f0c:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001f10:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f12:	2302      	movs	r3, #2
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f16:	2300      	movs	r3, #0
 8001f18:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001f1e:	2306      	movs	r3, #6
 8001f20:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001f26:	4619      	mov	r1, r3
 8001f28:	4806      	ldr	r0, [pc, #24]	; (8001f44 <HAL_I2S_MspInit+0xfc>)
 8001f2a:	f000 ff21 	bl	8002d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001f2e:	bf00      	nop
 8001f30:	3738      	adds	r7, #56	; 0x38
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	40003c00 	.word	0x40003c00
 8001f3c:	40023800 	.word	0x40023800
 8001f40:	40020000 	.word	0x40020000
 8001f44:	40020800 	.word	0x40020800

08001f48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08a      	sub	sp, #40	; 0x28
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f50:	f107 0314 	add.w	r3, r7, #20
 8001f54:	2200      	movs	r2, #0
 8001f56:	601a      	str	r2, [r3, #0]
 8001f58:	605a      	str	r2, [r3, #4]
 8001f5a:	609a      	str	r2, [r3, #8]
 8001f5c:	60da      	str	r2, [r3, #12]
 8001f5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	4a19      	ldr	r2, [pc, #100]	; (8001fcc <HAL_SPI_MspInit+0x84>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d12b      	bne.n	8001fc2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	613b      	str	r3, [r7, #16]
 8001f6e:	4b18      	ldr	r3, [pc, #96]	; (8001fd0 <HAL_SPI_MspInit+0x88>)
 8001f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f72:	4a17      	ldr	r2, [pc, #92]	; (8001fd0 <HAL_SPI_MspInit+0x88>)
 8001f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f78:	6453      	str	r3, [r2, #68]	; 0x44
 8001f7a:	4b15      	ldr	r3, [pc, #84]	; (8001fd0 <HAL_SPI_MspInit+0x88>)
 8001f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f82:	613b      	str	r3, [r7, #16]
 8001f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	4b11      	ldr	r3, [pc, #68]	; (8001fd0 <HAL_SPI_MspInit+0x88>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f8e:	4a10      	ldr	r2, [pc, #64]	; (8001fd0 <HAL_SPI_MspInit+0x88>)
 8001f90:	f043 0301 	orr.w	r3, r3, #1
 8001f94:	6313      	str	r3, [r2, #48]	; 0x30
 8001f96:	4b0e      	ldr	r3, [pc, #56]	; (8001fd0 <HAL_SPI_MspInit+0x88>)
 8001f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	60fb      	str	r3, [r7, #12]
 8001fa0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8001fa2:	23e0      	movs	r3, #224	; 0xe0
 8001fa4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa6:	2302      	movs	r3, #2
 8001fa8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001faa:	2300      	movs	r3, #0
 8001fac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fae:	2300      	movs	r3, #0
 8001fb0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001fb2:	2305      	movs	r3, #5
 8001fb4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb6:	f107 0314 	add.w	r3, r7, #20
 8001fba:	4619      	mov	r1, r3
 8001fbc:	4805      	ldr	r0, [pc, #20]	; (8001fd4 <HAL_SPI_MspInit+0x8c>)
 8001fbe:	f000 fed7 	bl	8002d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fc2:	bf00      	nop
 8001fc4:	3728      	adds	r7, #40	; 0x28
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	40013000 	.word	0x40013000
 8001fd0:	40023800 	.word	0x40023800
 8001fd4:	40020000 	.word	0x40020000

08001fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b085      	sub	sp, #20
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0b      	ldr	r2, [pc, #44]	; (8002014 <HAL_TIM_Base_MspInit+0x3c>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d10d      	bne.n	8002006 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001fea:	2300      	movs	r3, #0
 8001fec:	60fb      	str	r3, [r7, #12]
 8001fee:	4b0a      	ldr	r3, [pc, #40]	; (8002018 <HAL_TIM_Base_MspInit+0x40>)
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff2:	4a09      	ldr	r2, [pc, #36]	; (8002018 <HAL_TIM_Base_MspInit+0x40>)
 8001ff4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ff8:	6453      	str	r3, [r2, #68]	; 0x44
 8001ffa:	4b07      	ldr	r3, [pc, #28]	; (8002018 <HAL_TIM_Base_MspInit+0x40>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002002:	60fb      	str	r3, [r7, #12]
 8002004:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8002006:	bf00      	nop
 8002008:	3714      	adds	r7, #20
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40014800 	.word	0x40014800
 8002018:	40023800 	.word	0x40023800

0800201c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800201c:	b480      	push	{r7}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002020:	e7fe      	b.n	8002020 <NMI_Handler+0x4>

08002022 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002022:	b480      	push	{r7}
 8002024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002026:	e7fe      	b.n	8002026 <HardFault_Handler+0x4>

08002028 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800202c:	e7fe      	b.n	800202c <MemManage_Handler+0x4>

0800202e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800202e:	b480      	push	{r7}
 8002030:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002032:	e7fe      	b.n	8002032 <BusFault_Handler+0x4>

08002034 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <UsageFault_Handler+0x4>

0800203a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800203e:	bf00      	nop
 8002040:	46bd      	mov	sp, r7
 8002042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002046:	4770      	bx	lr

08002048 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002048:	b480      	push	{r7}
 800204a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800204c:	bf00      	nop
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002056:	b480      	push	{r7}
 8002058:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	46bd      	mov	sp, r7
 800205e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002062:	4770      	bx	lr

08002064 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002068:	f000 f960 	bl	800232c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800206c:	bf00      	nop
 800206e:	bd80      	pop	{r7, pc}

08002070 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8002074:	4802      	ldr	r0, [pc, #8]	; (8002080 <OTG_FS_IRQHandler+0x10>)
 8002076:	f001 fab3 	bl	80035e0 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800207a:	bf00      	nop
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	200007e0 	.word	0x200007e0

08002084 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002084:	b480      	push	{r7}
 8002086:	af00      	add	r7, sp, #0
  return 1;
 8002088:	2301      	movs	r3, #1
}
 800208a:	4618      	mov	r0, r3
 800208c:	46bd      	mov	sp, r7
 800208e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002092:	4770      	bx	lr

08002094 <_kill>:

int _kill(int pid, int sig)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
 800209c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800209e:	f006 fc0d 	bl	80088bc <__errno>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2216      	movs	r2, #22
 80020a6:	601a      	str	r2, [r3, #0]
  return -1;
 80020a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020ac:	4618      	mov	r0, r3
 80020ae:	3708      	adds	r7, #8
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <_exit>:

void _exit (int status)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020bc:	f04f 31ff 	mov.w	r1, #4294967295
 80020c0:	6878      	ldr	r0, [r7, #4]
 80020c2:	f7ff ffe7 	bl	8002094 <_kill>
  while (1) {}    /* Make sure we hang here */
 80020c6:	e7fe      	b.n	80020c6 <_exit+0x12>

080020c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b086      	sub	sp, #24
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d4:	2300      	movs	r3, #0
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	e00a      	b.n	80020f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020da:	f3af 8000 	nop.w
 80020de:	4601      	mov	r1, r0
 80020e0:	68bb      	ldr	r3, [r7, #8]
 80020e2:	1c5a      	adds	r2, r3, #1
 80020e4:	60ba      	str	r2, [r7, #8]
 80020e6:	b2ca      	uxtb	r2, r1
 80020e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	3301      	adds	r3, #1
 80020ee:	617b      	str	r3, [r7, #20]
 80020f0:	697a      	ldr	r2, [r7, #20]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	dbf0      	blt.n	80020da <_read+0x12>
  }

  return len;
 80020f8:	687b      	ldr	r3, [r7, #4]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b086      	sub	sp, #24
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210e:	2300      	movs	r3, #0
 8002110:	617b      	str	r3, [r7, #20]
 8002112:	e009      	b.n	8002128 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	1c5a      	adds	r2, r3, #1
 8002118:	60ba      	str	r2, [r7, #8]
 800211a:	781b      	ldrb	r3, [r3, #0]
 800211c:	4618      	mov	r0, r3
 800211e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	3301      	adds	r3, #1
 8002126:	617b      	str	r3, [r7, #20]
 8002128:	697a      	ldr	r2, [r7, #20]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	429a      	cmp	r2, r3
 800212e:	dbf1      	blt.n	8002114 <_write+0x12>
  }
  return len;
 8002130:	687b      	ldr	r3, [r7, #4]
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}

0800213a <_close>:

int _close(int file)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002142:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002146:	4618      	mov	r0, r3
 8002148:	370c      	adds	r7, #12
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr

08002152 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002152:	b480      	push	{r7}
 8002154:	b083      	sub	sp, #12
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002162:	605a      	str	r2, [r3, #4]
  return 0;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	370c      	adds	r7, #12
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <_isatty>:

int _isatty(int file)
{
 8002172:	b480      	push	{r7}
 8002174:	b083      	sub	sp, #12
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800217a:	2301      	movs	r3, #1
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3714      	adds	r7, #20
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b086      	sub	sp, #24
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021ac:	4a14      	ldr	r2, [pc, #80]	; (8002200 <_sbrk+0x5c>)
 80021ae:	4b15      	ldr	r3, [pc, #84]	; (8002204 <_sbrk+0x60>)
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021b4:	697b      	ldr	r3, [r7, #20]
 80021b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021b8:	4b13      	ldr	r3, [pc, #76]	; (8002208 <_sbrk+0x64>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d102      	bne.n	80021c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021c0:	4b11      	ldr	r3, [pc, #68]	; (8002208 <_sbrk+0x64>)
 80021c2:	4a12      	ldr	r2, [pc, #72]	; (800220c <_sbrk+0x68>)
 80021c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021c6:	4b10      	ldr	r3, [pc, #64]	; (8002208 <_sbrk+0x64>)
 80021c8:	681a      	ldr	r2, [r3, #0]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4413      	add	r3, r2
 80021ce:	693a      	ldr	r2, [r7, #16]
 80021d0:	429a      	cmp	r2, r3
 80021d2:	d207      	bcs.n	80021e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021d4:	f006 fb72 	bl	80088bc <__errno>
 80021d8:	4603      	mov	r3, r0
 80021da:	220c      	movs	r2, #12
 80021dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021de:	f04f 33ff 	mov.w	r3, #4294967295
 80021e2:	e009      	b.n	80021f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021e4:	4b08      	ldr	r3, [pc, #32]	; (8002208 <_sbrk+0x64>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021ea:	4b07      	ldr	r3, [pc, #28]	; (8002208 <_sbrk+0x64>)
 80021ec:	681a      	ldr	r2, [r3, #0]
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	4413      	add	r3, r2
 80021f2:	4a05      	ldr	r2, [pc, #20]	; (8002208 <_sbrk+0x64>)
 80021f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021f6:	68fb      	ldr	r3, [r7, #12]
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	3718      	adds	r7, #24
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	20020000 	.word	0x20020000
 8002204:	00000400 	.word	0x00000400
 8002208:	200003fc 	.word	0x200003fc
 800220c:	20000af8 	.word	0x20000af8

08002210 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <SystemInit+0x20>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	4a05      	ldr	r2, [pc, #20]	; (8002230 <SystemInit+0x20>)
 800221c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002224:	bf00      	nop
 8002226:	46bd      	mov	sp, r7
 8002228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222c:	4770      	bx	lr
 800222e:	bf00      	nop
 8002230:	e000ed00 	.word	0xe000ed00

08002234 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002234:	f8df d034 	ldr.w	sp, [pc, #52]	; 800226c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002238:	480d      	ldr	r0, [pc, #52]	; (8002270 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800223a:	490e      	ldr	r1, [pc, #56]	; (8002274 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800223c:	4a0e      	ldr	r2, [pc, #56]	; (8002278 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800223e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002240:	e002      	b.n	8002248 <LoopCopyDataInit>

08002242 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002242:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002244:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002246:	3304      	adds	r3, #4

08002248 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002248:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800224a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800224c:	d3f9      	bcc.n	8002242 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800224e:	4a0b      	ldr	r2, [pc, #44]	; (800227c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002250:	4c0b      	ldr	r4, [pc, #44]	; (8002280 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002252:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002254:	e001      	b.n	800225a <LoopFillZerobss>

08002256 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002256:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002258:	3204      	adds	r2, #4

0800225a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800225a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800225c:	d3fb      	bcc.n	8002256 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800225e:	f7ff ffd7 	bl	8002210 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002262:	f006 fb31 	bl	80088c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002266:	f7ff fa2d 	bl	80016c4 <main>
  bx  lr    
 800226a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800226c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002270:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002274:	20000238 	.word	0x20000238
  ldr r2, =_sidata
 8002278:	0800d724 	.word	0x0800d724
  ldr r2, =_sbss
 800227c:	20000238 	.word	0x20000238
  ldr r4, =_ebss
 8002280:	20000af4 	.word	0x20000af4

08002284 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002284:	e7fe      	b.n	8002284 <ADC_IRQHandler>
	...

08002288 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_Init+0x40>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a0d      	ldr	r2, [pc, #52]	; (80022c8 <HAL_Init+0x40>)
 8002292:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002296:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002298:	4b0b      	ldr	r3, [pc, #44]	; (80022c8 <HAL_Init+0x40>)
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	4a0a      	ldr	r2, [pc, #40]	; (80022c8 <HAL_Init+0x40>)
 800229e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80022a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022a4:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <HAL_Init+0x40>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a07      	ldr	r2, [pc, #28]	; (80022c8 <HAL_Init+0x40>)
 80022aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022b0:	2003      	movs	r0, #3
 80022b2:	f000 fd1b 	bl	8002cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022b6:	2000      	movs	r0, #0
 80022b8:	f000 f808 	bl	80022cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022bc:	f7ff fd10 	bl	8001ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022c0:	2300      	movs	r3, #0
}
 80022c2:	4618      	mov	r0, r3
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40023c00 	.word	0x40023c00

080022cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b082      	sub	sp, #8
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80022d4:	4b12      	ldr	r3, [pc, #72]	; (8002320 <HAL_InitTick+0x54>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	4b12      	ldr	r3, [pc, #72]	; (8002324 <HAL_InitTick+0x58>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	4619      	mov	r1, r3
 80022de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80022e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80022e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80022ea:	4618      	mov	r0, r3
 80022ec:	f000 fd33 	bl	8002d56 <HAL_SYSTICK_Config>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80022f6:	2301      	movs	r3, #1
 80022f8:	e00e      	b.n	8002318 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2b0f      	cmp	r3, #15
 80022fe:	d80a      	bhi.n	8002316 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002300:	2200      	movs	r2, #0
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	f04f 30ff 	mov.w	r0, #4294967295
 8002308:	f000 fcfb 	bl	8002d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <HAL_InitTick+0x5c>)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002312:	2300      	movs	r3, #0
 8002314:	e000      	b.n	8002318 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002316:	2301      	movs	r3, #1
}
 8002318:	4618      	mov	r0, r3
 800231a:	3708      	adds	r7, #8
 800231c:	46bd      	mov	sp, r7
 800231e:	bd80      	pop	{r7, pc}
 8002320:	20000038 	.word	0x20000038
 8002324:	20000040 	.word	0x20000040
 8002328:	2000003c 	.word	0x2000003c

0800232c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <HAL_IncTick+0x20>)
 8002332:	781b      	ldrb	r3, [r3, #0]
 8002334:	461a      	mov	r2, r3
 8002336:	4b06      	ldr	r3, [pc, #24]	; (8002350 <HAL_IncTick+0x24>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	4413      	add	r3, r2
 800233c:	4a04      	ldr	r2, [pc, #16]	; (8002350 <HAL_IncTick+0x24>)
 800233e:	6013      	str	r3, [r2, #0]
}
 8002340:	bf00      	nop
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
 800234a:	bf00      	nop
 800234c:	20000040 	.word	0x20000040
 8002350:	20000400 	.word	0x20000400

08002354 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  return uwTick;
 8002358:	4b03      	ldr	r3, [pc, #12]	; (8002368 <HAL_GetTick+0x14>)
 800235a:	681b      	ldr	r3, [r3, #0]
}
 800235c:	4618      	mov	r0, r3
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	20000400 	.word	0x20000400

0800236c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b084      	sub	sp, #16
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002374:	f7ff ffee 	bl	8002354 <HAL_GetTick>
 8002378:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002384:	d005      	beq.n	8002392 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002386:	4b0a      	ldr	r3, [pc, #40]	; (80023b0 <HAL_Delay+0x44>)
 8002388:	781b      	ldrb	r3, [r3, #0]
 800238a:	461a      	mov	r2, r3
 800238c:	68fb      	ldr	r3, [r7, #12]
 800238e:	4413      	add	r3, r2
 8002390:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002392:	bf00      	nop
 8002394:	f7ff ffde 	bl	8002354 <HAL_GetTick>
 8002398:	4602      	mov	r2, r0
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	1ad3      	subs	r3, r2, r3
 800239e:	68fa      	ldr	r2, [r7, #12]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d8f7      	bhi.n	8002394 <HAL_Delay+0x28>
  {
  }
}
 80023a4:	bf00      	nop
 80023a6:	bf00      	nop
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	20000040 	.word	0x20000040

080023b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023bc:	2300      	movs	r3, #0
 80023be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	e033      	b.n	8002432 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d109      	bne.n	80023e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023d2:	6878      	ldr	r0, [r7, #4]
 80023d4:	f7ff fcac 	bl	8001d30 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2200      	movs	r2, #0
 80023e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ea:	f003 0310 	and.w	r3, r3, #16
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d118      	bne.n	8002424 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80023fa:	f023 0302 	bic.w	r3, r3, #2
 80023fe:	f043 0202 	orr.w	r2, r3, #2
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 faa4 	bl	8002954 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	2200      	movs	r2, #0
 8002410:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002416:	f023 0303 	bic.w	r3, r3, #3
 800241a:	f043 0201 	orr.w	r2, r3, #1
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	641a      	str	r2, [r3, #64]	; 0x40
 8002422:	e001      	b.n	8002428 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002424:	2301      	movs	r3, #1
 8002426:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2200      	movs	r2, #0
 800242c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002430:	7bfb      	ldrb	r3, [r7, #15]
}
 8002432:	4618      	mov	r0, r3
 8002434:	3710      	adds	r7, #16
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
	...

0800243c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800243c:	b480      	push	{r7}
 800243e:	b085      	sub	sp, #20
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800244e:	2b01      	cmp	r3, #1
 8002450:	d101      	bne.n	8002456 <HAL_ADC_Start+0x1a>
 8002452:	2302      	movs	r3, #2
 8002454:	e0b2      	b.n	80025bc <HAL_ADC_Start+0x180>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	689b      	ldr	r3, [r3, #8]
 8002464:	f003 0301 	and.w	r3, r3, #1
 8002468:	2b01      	cmp	r3, #1
 800246a:	d018      	beq.n	800249e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	689a      	ldr	r2, [r3, #8]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f042 0201 	orr.w	r2, r2, #1
 800247a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800247c:	4b52      	ldr	r3, [pc, #328]	; (80025c8 <HAL_ADC_Start+0x18c>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a52      	ldr	r2, [pc, #328]	; (80025cc <HAL_ADC_Start+0x190>)
 8002482:	fba2 2303 	umull	r2, r3, r2, r3
 8002486:	0c9a      	lsrs	r2, r3, #18
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002490:	e002      	b.n	8002498 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002492:	68bb      	ldr	r3, [r7, #8]
 8002494:	3b01      	subs	r3, #1
 8002496:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002498:	68bb      	ldr	r3, [r7, #8]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d1f9      	bne.n	8002492 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f003 0301 	and.w	r3, r3, #1
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d17a      	bne.n	80025a2 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d007      	beq.n	80024de <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80024d6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80024e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024ea:	d106      	bne.n	80024fa <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024f0:	f023 0206 	bic.w	r2, r3, #6
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	645a      	str	r2, [r3, #68]	; 0x44
 80024f8:	e002      	b.n	8002500 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002508:	4b31      	ldr	r3, [pc, #196]	; (80025d0 <HAL_ADC_Start+0x194>)
 800250a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002514:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	f003 031f 	and.w	r3, r3, #31
 800251e:	2b00      	cmp	r3, #0
 8002520:	d12a      	bne.n	8002578 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a2b      	ldr	r2, [pc, #172]	; (80025d4 <HAL_ADC_Start+0x198>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d015      	beq.n	8002558 <HAL_ADC_Start+0x11c>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a29      	ldr	r2, [pc, #164]	; (80025d8 <HAL_ADC_Start+0x19c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d105      	bne.n	8002542 <HAL_ADC_Start+0x106>
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <HAL_ADC_Start+0x194>)
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00a      	beq.n	8002558 <HAL_ADC_Start+0x11c>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a25      	ldr	r2, [pc, #148]	; (80025dc <HAL_ADC_Start+0x1a0>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d136      	bne.n	80025ba <HAL_ADC_Start+0x17e>
 800254c:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <HAL_ADC_Start+0x194>)
 800254e:	685b      	ldr	r3, [r3, #4]
 8002550:	f003 0310 	and.w	r3, r3, #16
 8002554:	2b00      	cmp	r3, #0
 8002556:	d130      	bne.n	80025ba <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d129      	bne.n	80025ba <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	689a      	ldr	r2, [r3, #8]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002574:	609a      	str	r2, [r3, #8]
 8002576:	e020      	b.n	80025ba <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a15      	ldr	r2, [pc, #84]	; (80025d4 <HAL_ADC_Start+0x198>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d11b      	bne.n	80025ba <HAL_ADC_Start+0x17e>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d114      	bne.n	80025ba <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	689a      	ldr	r2, [r3, #8]
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800259e:	609a      	str	r2, [r3, #8]
 80025a0:	e00b      	b.n	80025ba <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	f043 0210 	orr.w	r2, r3, #16
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025b2:	f043 0201 	orr.w	r2, r3, #1
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80025ba:	2300      	movs	r3, #0
}
 80025bc:	4618      	mov	r0, r3
 80025be:	3714      	adds	r7, #20
 80025c0:	46bd      	mov	sp, r7
 80025c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c6:	4770      	bx	lr
 80025c8:	20000038 	.word	0x20000038
 80025cc:	431bde83 	.word	0x431bde83
 80025d0:	40012300 	.word	0x40012300
 80025d4:	40012000 	.word	0x40012000
 80025d8:	40012100 	.word	0x40012100
 80025dc:	40012200 	.word	0x40012200

080025e0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b084      	sub	sp, #16
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	689b      	ldr	r3, [r3, #8]
 80025f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80025f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025fc:	d113      	bne.n	8002626 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002608:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800260c:	d10b      	bne.n	8002626 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002612:	f043 0220 	orr.w	r2, r3, #32
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002622:	2301      	movs	r3, #1
 8002624:	e063      	b.n	80026ee <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002626:	f7ff fe95 	bl	8002354 <HAL_GetTick>
 800262a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800262c:	e021      	b.n	8002672 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002634:	d01d      	beq.n	8002672 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d007      	beq.n	800264c <HAL_ADC_PollForConversion+0x6c>
 800263c:	f7ff fe8a 	bl	8002354 <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	683a      	ldr	r2, [r7, #0]
 8002648:	429a      	cmp	r2, r3
 800264a:	d212      	bcs.n	8002672 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 0302 	and.w	r3, r3, #2
 8002656:	2b02      	cmp	r3, #2
 8002658:	d00b      	beq.n	8002672 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265e:	f043 0204 	orr.w	r2, r3, #4
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2200      	movs	r2, #0
 800266a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800266e:	2303      	movs	r3, #3
 8002670:	e03d      	b.n	80026ee <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0302 	and.w	r3, r3, #2
 800267c:	2b02      	cmp	r3, #2
 800267e:	d1d6      	bne.n	800262e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f06f 0212 	mvn.w	r2, #18
 8002688:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800268e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	689b      	ldr	r3, [r3, #8]
 800269c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d123      	bne.n	80026ec <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d11f      	bne.n	80026ec <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d006      	beq.n	80026c8 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d111      	bne.n	80026ec <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d105      	bne.n	80026ec <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	f043 0201 	orr.w	r2, r3, #1
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80026f6:	b480      	push	{r7}
 80026f8:	b083      	sub	sp, #12
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002704:	4618      	mov	r0, r3
 8002706:	370c      	adds	r7, #12
 8002708:	46bd      	mov	sp, r7
 800270a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270e:	4770      	bx	lr

08002710 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002710:	b480      	push	{r7}
 8002712:	b085      	sub	sp, #20
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
 8002718:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800271a:	2300      	movs	r3, #0
 800271c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002724:	2b01      	cmp	r3, #1
 8002726:	d101      	bne.n	800272c <HAL_ADC_ConfigChannel+0x1c>
 8002728:	2302      	movs	r3, #2
 800272a:	e105      	b.n	8002938 <HAL_ADC_ConfigChannel+0x228>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	2b09      	cmp	r3, #9
 800273a:	d925      	bls.n	8002788 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	68d9      	ldr	r1, [r3, #12]
 8002742:	683b      	ldr	r3, [r7, #0]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	b29b      	uxth	r3, r3
 8002748:	461a      	mov	r2, r3
 800274a:	4613      	mov	r3, r2
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	4413      	add	r3, r2
 8002750:	3b1e      	subs	r3, #30
 8002752:	2207      	movs	r2, #7
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	43da      	mvns	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	400a      	ands	r2, r1
 8002760:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	68d9      	ldr	r1, [r3, #12]
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	b29b      	uxth	r3, r3
 8002772:	4618      	mov	r0, r3
 8002774:	4603      	mov	r3, r0
 8002776:	005b      	lsls	r3, r3, #1
 8002778:	4403      	add	r3, r0
 800277a:	3b1e      	subs	r3, #30
 800277c:	409a      	lsls	r2, r3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	430a      	orrs	r2, r1
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	e022      	b.n	80027ce <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	6919      	ldr	r1, [r3, #16]
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	b29b      	uxth	r3, r3
 8002794:	461a      	mov	r2, r3
 8002796:	4613      	mov	r3, r2
 8002798:	005b      	lsls	r3, r3, #1
 800279a:	4413      	add	r3, r2
 800279c:	2207      	movs	r2, #7
 800279e:	fa02 f303 	lsl.w	r3, r2, r3
 80027a2:	43da      	mvns	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	400a      	ands	r2, r1
 80027aa:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	6919      	ldr	r1, [r3, #16]
 80027b2:	683b      	ldr	r3, [r7, #0]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	4618      	mov	r0, r3
 80027be:	4603      	mov	r3, r0
 80027c0:	005b      	lsls	r3, r3, #1
 80027c2:	4403      	add	r3, r0
 80027c4:	409a      	lsls	r2, r3
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	430a      	orrs	r2, r1
 80027cc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	685b      	ldr	r3, [r3, #4]
 80027d2:	2b06      	cmp	r3, #6
 80027d4:	d824      	bhi.n	8002820 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027dc:	683b      	ldr	r3, [r7, #0]
 80027de:	685a      	ldr	r2, [r3, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	009b      	lsls	r3, r3, #2
 80027e4:	4413      	add	r3, r2
 80027e6:	3b05      	subs	r3, #5
 80027e8:	221f      	movs	r2, #31
 80027ea:	fa02 f303 	lsl.w	r3, r2, r3
 80027ee:	43da      	mvns	r2, r3
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	400a      	ands	r2, r1
 80027f6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	b29b      	uxth	r3, r3
 8002804:	4618      	mov	r0, r3
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	685a      	ldr	r2, [r3, #4]
 800280a:	4613      	mov	r3, r2
 800280c:	009b      	lsls	r3, r3, #2
 800280e:	4413      	add	r3, r2
 8002810:	3b05      	subs	r3, #5
 8002812:	fa00 f203 	lsl.w	r2, r0, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	430a      	orrs	r2, r1
 800281c:	635a      	str	r2, [r3, #52]	; 0x34
 800281e:	e04c      	b.n	80028ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685b      	ldr	r3, [r3, #4]
 8002824:	2b0c      	cmp	r3, #12
 8002826:	d824      	bhi.n	8002872 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	685a      	ldr	r2, [r3, #4]
 8002832:	4613      	mov	r3, r2
 8002834:	009b      	lsls	r3, r3, #2
 8002836:	4413      	add	r3, r2
 8002838:	3b23      	subs	r3, #35	; 0x23
 800283a:	221f      	movs	r2, #31
 800283c:	fa02 f303 	lsl.w	r3, r2, r3
 8002840:	43da      	mvns	r2, r3
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	400a      	ands	r2, r1
 8002848:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	b29b      	uxth	r3, r3
 8002856:	4618      	mov	r0, r3
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	685a      	ldr	r2, [r3, #4]
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	3b23      	subs	r3, #35	; 0x23
 8002864:	fa00 f203 	lsl.w	r2, r0, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	430a      	orrs	r2, r1
 800286e:	631a      	str	r2, [r3, #48]	; 0x30
 8002870:	e023      	b.n	80028ba <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	685a      	ldr	r2, [r3, #4]
 800287c:	4613      	mov	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4413      	add	r3, r2
 8002882:	3b41      	subs	r3, #65	; 0x41
 8002884:	221f      	movs	r2, #31
 8002886:	fa02 f303 	lsl.w	r3, r2, r3
 800288a:	43da      	mvns	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	400a      	ands	r2, r1
 8002892:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	b29b      	uxth	r3, r3
 80028a0:	4618      	mov	r0, r3
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	3b41      	subs	r3, #65	; 0x41
 80028ae:	fa00 f203 	lsl.w	r2, r0, r3
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	430a      	orrs	r2, r1
 80028b8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80028ba:	4b22      	ldr	r3, [pc, #136]	; (8002944 <HAL_ADC_ConfigChannel+0x234>)
 80028bc:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a21      	ldr	r2, [pc, #132]	; (8002948 <HAL_ADC_ConfigChannel+0x238>)
 80028c4:	4293      	cmp	r3, r2
 80028c6:	d109      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x1cc>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	2b12      	cmp	r3, #18
 80028ce:	d105      	bne.n	80028dc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	685b      	ldr	r3, [r3, #4]
 80028d4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a19      	ldr	r2, [pc, #100]	; (8002948 <HAL_ADC_ConfigChannel+0x238>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d123      	bne.n	800292e <HAL_ADC_ConfigChannel+0x21e>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	2b10      	cmp	r3, #16
 80028ec:	d003      	beq.n	80028f6 <HAL_ADC_ConfigChannel+0x1e6>
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	2b11      	cmp	r3, #17
 80028f4:	d11b      	bne.n	800292e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	685b      	ldr	r3, [r3, #4]
 80028fa:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2b10      	cmp	r3, #16
 8002908:	d111      	bne.n	800292e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800290a:	4b10      	ldr	r3, [pc, #64]	; (800294c <HAL_ADC_ConfigChannel+0x23c>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a10      	ldr	r2, [pc, #64]	; (8002950 <HAL_ADC_ConfigChannel+0x240>)
 8002910:	fba2 2303 	umull	r2, r3, r2, r3
 8002914:	0c9a      	lsrs	r2, r3, #18
 8002916:	4613      	mov	r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	4413      	add	r3, r2
 800291c:	005b      	lsls	r3, r3, #1
 800291e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002920:	e002      	b.n	8002928 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002922:	68bb      	ldr	r3, [r7, #8]
 8002924:	3b01      	subs	r3, #1
 8002926:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	2b00      	cmp	r3, #0
 800292c:	d1f9      	bne.n	8002922 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3714      	adds	r7, #20
 800293c:	46bd      	mov	sp, r7
 800293e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002942:	4770      	bx	lr
 8002944:	40012300 	.word	0x40012300
 8002948:	40012000 	.word	0x40012000
 800294c:	20000038 	.word	0x20000038
 8002950:	431bde83 	.word	0x431bde83

08002954 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800295c:	4b79      	ldr	r3, [pc, #484]	; (8002b44 <ADC_Init+0x1f0>)
 800295e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	685b      	ldr	r3, [r3, #4]
 8002964:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	685a      	ldr	r2, [r3, #4]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	685b      	ldr	r3, [r3, #4]
 8002974:	431a      	orrs	r2, r3
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	685a      	ldr	r2, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002988:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6859      	ldr	r1, [r3, #4]
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	691b      	ldr	r3, [r3, #16]
 8002994:	021a      	lsls	r2, r3, #8
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	430a      	orrs	r2, r1
 800299c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	685a      	ldr	r2, [r3, #4]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80029ac:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	6859      	ldr	r1, [r3, #4]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	430a      	orrs	r2, r1
 80029be:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	689a      	ldr	r2, [r3, #8]
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80029ce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	6899      	ldr	r1, [r3, #8]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	68da      	ldr	r2, [r3, #12]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	430a      	orrs	r2, r1
 80029e0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029e6:	4a58      	ldr	r2, [pc, #352]	; (8002b48 <ADC_Init+0x1f4>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d022      	beq.n	8002a32 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80029fa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	6899      	ldr	r1, [r3, #8]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	430a      	orrs	r2, r1
 8002a0c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	689a      	ldr	r2, [r3, #8]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a1c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6899      	ldr	r1, [r3, #8]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	430a      	orrs	r2, r1
 8002a2e:	609a      	str	r2, [r3, #8]
 8002a30:	e00f      	b.n	8002a52 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	689a      	ldr	r2, [r3, #8]
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002a40:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	689a      	ldr	r2, [r3, #8]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002a50:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	f022 0202 	bic.w	r2, r2, #2
 8002a60:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	6899      	ldr	r1, [r3, #8]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	7e1b      	ldrb	r3, [r3, #24]
 8002a6c:	005a      	lsls	r2, r3, #1
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	430a      	orrs	r2, r1
 8002a74:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d01b      	beq.n	8002ab8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002a8e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	685a      	ldr	r2, [r3, #4]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002a9e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6859      	ldr	r1, [r3, #4]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	3b01      	subs	r3, #1
 8002aac:	035a      	lsls	r2, r3, #13
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	430a      	orrs	r2, r1
 8002ab4:	605a      	str	r2, [r3, #4]
 8002ab6:	e007      	b.n	8002ac8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	685a      	ldr	r2, [r3, #4]
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ac6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002ad6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	051a      	lsls	r2, r3, #20
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	430a      	orrs	r2, r1
 8002aec:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002afc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	6899      	ldr	r1, [r3, #8]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002b0a:	025a      	lsls	r2, r3, #9
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	689a      	ldr	r2, [r3, #8]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	6899      	ldr	r1, [r3, #8]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	695b      	ldr	r3, [r3, #20]
 8002b2e:	029a      	lsls	r2, r3, #10
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	430a      	orrs	r2, r1
 8002b36:	609a      	str	r2, [r3, #8]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	40012300 	.word	0x40012300
 8002b48:	0f000001 	.word	0x0f000001

08002b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b5c:	4b0c      	ldr	r3, [pc, #48]	; (8002b90 <__NVIC_SetPriorityGrouping+0x44>)
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b62:	68ba      	ldr	r2, [r7, #8]
 8002b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b68:	4013      	ands	r3, r2
 8002b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b7e:	4a04      	ldr	r2, [pc, #16]	; (8002b90 <__NVIC_SetPriorityGrouping+0x44>)
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	60d3      	str	r3, [r2, #12]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	e000ed00 	.word	0xe000ed00

08002b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b94:	b480      	push	{r7}
 8002b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b98:	4b04      	ldr	r3, [pc, #16]	; (8002bac <__NVIC_GetPriorityGrouping+0x18>)
 8002b9a:	68db      	ldr	r3, [r3, #12]
 8002b9c:	0a1b      	lsrs	r3, r3, #8
 8002b9e:	f003 0307 	and.w	r3, r3, #7
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002baa:	4770      	bx	lr
 8002bac:	e000ed00 	.word	0xe000ed00

08002bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bb0:	b480      	push	{r7}
 8002bb2:	b083      	sub	sp, #12
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	db0b      	blt.n	8002bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bc2:	79fb      	ldrb	r3, [r7, #7]
 8002bc4:	f003 021f 	and.w	r2, r3, #31
 8002bc8:	4907      	ldr	r1, [pc, #28]	; (8002be8 <__NVIC_EnableIRQ+0x38>)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	095b      	lsrs	r3, r3, #5
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr
 8002be6:	bf00      	nop
 8002be8:	e000e100 	.word	0xe000e100

08002bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bec:	b480      	push	{r7}
 8002bee:	b083      	sub	sp, #12
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	4603      	mov	r3, r0
 8002bf4:	6039      	str	r1, [r7, #0]
 8002bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	db0a      	blt.n	8002c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c00:	683b      	ldr	r3, [r7, #0]
 8002c02:	b2da      	uxtb	r2, r3
 8002c04:	490c      	ldr	r1, [pc, #48]	; (8002c38 <__NVIC_SetPriority+0x4c>)
 8002c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0a:	0112      	lsls	r2, r2, #4
 8002c0c:	b2d2      	uxtb	r2, r2
 8002c0e:	440b      	add	r3, r1
 8002c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c14:	e00a      	b.n	8002c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	b2da      	uxtb	r2, r3
 8002c1a:	4908      	ldr	r1, [pc, #32]	; (8002c3c <__NVIC_SetPriority+0x50>)
 8002c1c:	79fb      	ldrb	r3, [r7, #7]
 8002c1e:	f003 030f 	and.w	r3, r3, #15
 8002c22:	3b04      	subs	r3, #4
 8002c24:	0112      	lsls	r2, r2, #4
 8002c26:	b2d2      	uxtb	r2, r2
 8002c28:	440b      	add	r3, r1
 8002c2a:	761a      	strb	r2, [r3, #24]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr
 8002c38:	e000e100 	.word	0xe000e100
 8002c3c:	e000ed00 	.word	0xe000ed00

08002c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b089      	sub	sp, #36	; 0x24
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f1c3 0307 	rsb	r3, r3, #7
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	bf28      	it	cs
 8002c5e:	2304      	movcs	r3, #4
 8002c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	3304      	adds	r3, #4
 8002c66:	2b06      	cmp	r3, #6
 8002c68:	d902      	bls.n	8002c70 <NVIC_EncodePriority+0x30>
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	3b03      	subs	r3, #3
 8002c6e:	e000      	b.n	8002c72 <NVIC_EncodePriority+0x32>
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c74:	f04f 32ff 	mov.w	r2, #4294967295
 8002c78:	69bb      	ldr	r3, [r7, #24]
 8002c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c7e:	43da      	mvns	r2, r3
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	401a      	ands	r2, r3
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c88:	f04f 31ff 	mov.w	r1, #4294967295
 8002c8c:	697b      	ldr	r3, [r7, #20]
 8002c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8002c92:	43d9      	mvns	r1, r3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c98:	4313      	orrs	r3, r2
         );
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	3724      	adds	r7, #36	; 0x24
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr
	...

08002ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b082      	sub	sp, #8
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	3b01      	subs	r3, #1
 8002cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002cb8:	d301      	bcc.n	8002cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e00f      	b.n	8002cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002cbe:	4a0a      	ldr	r2, [pc, #40]	; (8002ce8 <SysTick_Config+0x40>)
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	3b01      	subs	r3, #1
 8002cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002cc6:	210f      	movs	r1, #15
 8002cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8002ccc:	f7ff ff8e 	bl	8002bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <SysTick_Config+0x40>)
 8002cd2:	2200      	movs	r2, #0
 8002cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002cd6:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <SysTick_Config+0x40>)
 8002cd8:	2207      	movs	r2, #7
 8002cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002cdc:	2300      	movs	r3, #0
}
 8002cde:	4618      	mov	r0, r3
 8002ce0:	3708      	adds	r7, #8
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}
 8002ce6:	bf00      	nop
 8002ce8:	e000e010 	.word	0xe000e010

08002cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b082      	sub	sp, #8
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cf4:	6878      	ldr	r0, [r7, #4]
 8002cf6:	f7ff ff29 	bl	8002b4c <__NVIC_SetPriorityGrouping>
}
 8002cfa:	bf00      	nop
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b086      	sub	sp, #24
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	4603      	mov	r3, r0
 8002d0a:	60b9      	str	r1, [r7, #8]
 8002d0c:	607a      	str	r2, [r7, #4]
 8002d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002d10:	2300      	movs	r3, #0
 8002d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d14:	f7ff ff3e 	bl	8002b94 <__NVIC_GetPriorityGrouping>
 8002d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68b9      	ldr	r1, [r7, #8]
 8002d1e:	6978      	ldr	r0, [r7, #20]
 8002d20:	f7ff ff8e 	bl	8002c40 <NVIC_EncodePriority>
 8002d24:	4602      	mov	r2, r0
 8002d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f7ff ff5d 	bl	8002bec <__NVIC_SetPriority>
}
 8002d32:	bf00      	nop
 8002d34:	3718      	adds	r7, #24
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}

08002d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d3a:	b580      	push	{r7, lr}
 8002d3c:	b082      	sub	sp, #8
 8002d3e:	af00      	add	r7, sp, #0
 8002d40:	4603      	mov	r3, r0
 8002d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f7ff ff31 	bl	8002bb0 <__NVIC_EnableIRQ>
}
 8002d4e:	bf00      	nop
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b082      	sub	sp, #8
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f7ff ffa2 	bl	8002ca8 <SysTick_Config>
 8002d64:	4603      	mov	r3, r0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	3708      	adds	r7, #8
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	bd80      	pop	{r7, pc}
	...

08002d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d70:	b480      	push	{r7}
 8002d72:	b089      	sub	sp, #36	; 0x24
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d82:	2300      	movs	r3, #0
 8002d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d86:	2300      	movs	r3, #0
 8002d88:	61fb      	str	r3, [r7, #28]
 8002d8a:	e16b      	b.n	8003064 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	fa02 f303 	lsl.w	r3, r2, r3
 8002d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	697a      	ldr	r2, [r7, #20]
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002da0:	693a      	ldr	r2, [r7, #16]
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	429a      	cmp	r2, r3
 8002da6:	f040 815a 	bne.w	800305e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0303 	and.w	r3, r3, #3
 8002db2:	2b01      	cmp	r3, #1
 8002db4:	d005      	beq.n	8002dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d130      	bne.n	8002e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	689b      	ldr	r3, [r3, #8]
 8002dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	005b      	lsls	r3, r3, #1
 8002dcc:	2203      	movs	r2, #3
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	43db      	mvns	r3, r3
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	68da      	ldr	r2, [r3, #12]
 8002dde:	69fb      	ldr	r3, [r7, #28]
 8002de0:	005b      	lsls	r3, r3, #1
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002df8:	2201      	movs	r2, #1
 8002dfa:	69fb      	ldr	r3, [r7, #28]
 8002dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002e00:	43db      	mvns	r3, r3
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4013      	ands	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	685b      	ldr	r3, [r3, #4]
 8002e0c:	091b      	lsrs	r3, r3, #4
 8002e0e:	f003 0201 	and.w	r2, r3, #1
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	69ba      	ldr	r2, [r7, #24]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	f003 0303 	and.w	r3, r3, #3
 8002e2c:	2b03      	cmp	r3, #3
 8002e2e:	d017      	beq.n	8002e60 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	689a      	ldr	r2, [r3, #8]
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	005b      	lsls	r3, r3, #1
 8002e50:	fa02 f303 	lsl.w	r3, r2, r3
 8002e54:	69ba      	ldr	r2, [r7, #24]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f003 0303 	and.w	r3, r3, #3
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d123      	bne.n	8002eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	08da      	lsrs	r2, r3, #3
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	3208      	adds	r2, #8
 8002e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	f003 0307 	and.w	r3, r3, #7
 8002e80:	009b      	lsls	r3, r3, #2
 8002e82:	220f      	movs	r2, #15
 8002e84:	fa02 f303 	lsl.w	r3, r2, r3
 8002e88:	43db      	mvns	r3, r3
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	69fb      	ldr	r3, [r7, #28]
 8002e96:	f003 0307 	and.w	r3, r3, #7
 8002e9a:	009b      	lsls	r3, r3, #2
 8002e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea0:	69ba      	ldr	r2, [r7, #24]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	08da      	lsrs	r2, r3, #3
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	3208      	adds	r2, #8
 8002eae:	69b9      	ldr	r1, [r7, #24]
 8002eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eba:	69fb      	ldr	r3, [r7, #28]
 8002ebc:	005b      	lsls	r3, r3, #1
 8002ebe:	2203      	movs	r2, #3
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	69ba      	ldr	r2, [r7, #24]
 8002ec8:	4013      	ands	r3, r2
 8002eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f003 0203 	and.w	r2, r3, #3
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	005b      	lsls	r3, r3, #1
 8002ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8002edc:	69ba      	ldr	r2, [r7, #24]
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	69ba      	ldr	r2, [r7, #24]
 8002ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	f000 80b4 	beq.w	800305e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	60fb      	str	r3, [r7, #12]
 8002efa:	4b60      	ldr	r3, [pc, #384]	; (800307c <HAL_GPIO_Init+0x30c>)
 8002efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002efe:	4a5f      	ldr	r2, [pc, #380]	; (800307c <HAL_GPIO_Init+0x30c>)
 8002f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f04:	6453      	str	r3, [r2, #68]	; 0x44
 8002f06:	4b5d      	ldr	r3, [pc, #372]	; (800307c <HAL_GPIO_Init+0x30c>)
 8002f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f0e:	60fb      	str	r3, [r7, #12]
 8002f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f12:	4a5b      	ldr	r2, [pc, #364]	; (8003080 <HAL_GPIO_Init+0x310>)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	089b      	lsrs	r3, r3, #2
 8002f18:	3302      	adds	r3, #2
 8002f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0303 	and.w	r3, r3, #3
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	220f      	movs	r2, #15
 8002f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2e:	43db      	mvns	r3, r3
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	4013      	ands	r3, r2
 8002f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a52      	ldr	r2, [pc, #328]	; (8003084 <HAL_GPIO_Init+0x314>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d02b      	beq.n	8002f96 <HAL_GPIO_Init+0x226>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a51      	ldr	r2, [pc, #324]	; (8003088 <HAL_GPIO_Init+0x318>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d025      	beq.n	8002f92 <HAL_GPIO_Init+0x222>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a50      	ldr	r2, [pc, #320]	; (800308c <HAL_GPIO_Init+0x31c>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d01f      	beq.n	8002f8e <HAL_GPIO_Init+0x21e>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a4f      	ldr	r2, [pc, #316]	; (8003090 <HAL_GPIO_Init+0x320>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d019      	beq.n	8002f8a <HAL_GPIO_Init+0x21a>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4e      	ldr	r2, [pc, #312]	; (8003094 <HAL_GPIO_Init+0x324>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d013      	beq.n	8002f86 <HAL_GPIO_Init+0x216>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4a4d      	ldr	r2, [pc, #308]	; (8003098 <HAL_GPIO_Init+0x328>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d00d      	beq.n	8002f82 <HAL_GPIO_Init+0x212>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a4c      	ldr	r2, [pc, #304]	; (800309c <HAL_GPIO_Init+0x32c>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d007      	beq.n	8002f7e <HAL_GPIO_Init+0x20e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a4b      	ldr	r2, [pc, #300]	; (80030a0 <HAL_GPIO_Init+0x330>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d101      	bne.n	8002f7a <HAL_GPIO_Init+0x20a>
 8002f76:	2307      	movs	r3, #7
 8002f78:	e00e      	b.n	8002f98 <HAL_GPIO_Init+0x228>
 8002f7a:	2308      	movs	r3, #8
 8002f7c:	e00c      	b.n	8002f98 <HAL_GPIO_Init+0x228>
 8002f7e:	2306      	movs	r3, #6
 8002f80:	e00a      	b.n	8002f98 <HAL_GPIO_Init+0x228>
 8002f82:	2305      	movs	r3, #5
 8002f84:	e008      	b.n	8002f98 <HAL_GPIO_Init+0x228>
 8002f86:	2304      	movs	r3, #4
 8002f88:	e006      	b.n	8002f98 <HAL_GPIO_Init+0x228>
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e004      	b.n	8002f98 <HAL_GPIO_Init+0x228>
 8002f8e:	2302      	movs	r3, #2
 8002f90:	e002      	b.n	8002f98 <HAL_GPIO_Init+0x228>
 8002f92:	2301      	movs	r3, #1
 8002f94:	e000      	b.n	8002f98 <HAL_GPIO_Init+0x228>
 8002f96:	2300      	movs	r3, #0
 8002f98:	69fa      	ldr	r2, [r7, #28]
 8002f9a:	f002 0203 	and.w	r2, r2, #3
 8002f9e:	0092      	lsls	r2, r2, #2
 8002fa0:	4093      	lsls	r3, r2
 8002fa2:	69ba      	ldr	r2, [r7, #24]
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fa8:	4935      	ldr	r1, [pc, #212]	; (8003080 <HAL_GPIO_Init+0x310>)
 8002faa:	69fb      	ldr	r3, [r7, #28]
 8002fac:	089b      	lsrs	r3, r3, #2
 8002fae:	3302      	adds	r3, #2
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fb6:	4b3b      	ldr	r3, [pc, #236]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fbc:	693b      	ldr	r3, [r7, #16]
 8002fbe:	43db      	mvns	r3, r3
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fc6:	683b      	ldr	r3, [r7, #0]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d003      	beq.n	8002fda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	693b      	ldr	r3, [r7, #16]
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fda:	4a32      	ldr	r2, [pc, #200]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8002fdc:	69bb      	ldr	r3, [r7, #24]
 8002fde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fe0:	4b30      	ldr	r3, [pc, #192]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	43db      	mvns	r3, r3
 8002fea:	69ba      	ldr	r2, [r7, #24]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ff0:	683b      	ldr	r3, [r7, #0]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d003      	beq.n	8003004 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	693b      	ldr	r3, [r7, #16]
 8003000:	4313      	orrs	r3, r2
 8003002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003004:	4a27      	ldr	r2, [pc, #156]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8003006:	69bb      	ldr	r3, [r7, #24]
 8003008:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800300a:	4b26      	ldr	r3, [pc, #152]	; (80030a4 <HAL_GPIO_Init+0x334>)
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	43db      	mvns	r3, r3
 8003014:	69ba      	ldr	r2, [r7, #24]
 8003016:	4013      	ands	r3, r2
 8003018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003026:	69ba      	ldr	r2, [r7, #24]
 8003028:	693b      	ldr	r3, [r7, #16]
 800302a:	4313      	orrs	r3, r2
 800302c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800302e:	4a1d      	ldr	r2, [pc, #116]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8003030:	69bb      	ldr	r3, [r7, #24]
 8003032:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003034:	4b1b      	ldr	r3, [pc, #108]	; (80030a4 <HAL_GPIO_Init+0x334>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	43db      	mvns	r3, r3
 800303e:	69ba      	ldr	r2, [r7, #24]
 8003040:	4013      	ands	r3, r2
 8003042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304c:	2b00      	cmp	r3, #0
 800304e:	d003      	beq.n	8003058 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	693b      	ldr	r3, [r7, #16]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003058:	4a12      	ldr	r2, [pc, #72]	; (80030a4 <HAL_GPIO_Init+0x334>)
 800305a:	69bb      	ldr	r3, [r7, #24]
 800305c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	3301      	adds	r3, #1
 8003062:	61fb      	str	r3, [r7, #28]
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	2b0f      	cmp	r3, #15
 8003068:	f67f ae90 	bls.w	8002d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800306c:	bf00      	nop
 800306e:	bf00      	nop
 8003070:	3724      	adds	r7, #36	; 0x24
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	40023800 	.word	0x40023800
 8003080:	40013800 	.word	0x40013800
 8003084:	40020000 	.word	0x40020000
 8003088:	40020400 	.word	0x40020400
 800308c:	40020800 	.word	0x40020800
 8003090:	40020c00 	.word	0x40020c00
 8003094:	40021000 	.word	0x40021000
 8003098:	40021400 	.word	0x40021400
 800309c:	40021800 	.word	0x40021800
 80030a0:	40021c00 	.word	0x40021c00
 80030a4:	40013c00 	.word	0x40013c00

080030a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80030a8:	b480      	push	{r7}
 80030aa:	b085      	sub	sp, #20
 80030ac:	af00      	add	r7, sp, #0
 80030ae:	6078      	str	r0, [r7, #4]
 80030b0:	460b      	mov	r3, r1
 80030b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	691a      	ldr	r2, [r3, #16]
 80030b8:	887b      	ldrh	r3, [r7, #2]
 80030ba:	4013      	ands	r3, r2
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d002      	beq.n	80030c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80030c0:	2301      	movs	r3, #1
 80030c2:	73fb      	strb	r3, [r7, #15]
 80030c4:	e001      	b.n	80030ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80030c6:	2300      	movs	r3, #0
 80030c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80030ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr

080030d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	807b      	strh	r3, [r7, #2]
 80030e4:	4613      	mov	r3, r2
 80030e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030e8:	787b      	ldrb	r3, [r7, #1]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ee:	887a      	ldrh	r2, [r7, #2]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030f4:	e003      	b.n	80030fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030f6:	887b      	ldrh	r3, [r7, #2]
 80030f8:	041a      	lsls	r2, r3, #16
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	619a      	str	r2, [r3, #24]
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr

0800310a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 800310a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800310c:	b08f      	sub	sp, #60	; 0x3c
 800310e:	af0a      	add	r7, sp, #40	; 0x28
 8003110:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d101      	bne.n	800311c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e054      	b.n	80031c6 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8003128:	b2db      	uxtb	r3, r3
 800312a:	2b00      	cmp	r3, #0
 800312c:	d106      	bne.n	800313c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	2200      	movs	r2, #0
 8003132:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f005 f964 	bl	8008404 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2203      	movs	r2, #3
 8003140:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003148:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800314c:	2b00      	cmp	r3, #0
 800314e:	d102      	bne.n	8003156 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2200      	movs	r2, #0
 8003154:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f003 f956 	bl	800640c <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	603b      	str	r3, [r7, #0]
 8003166:	687e      	ldr	r6, [r7, #4]
 8003168:	466d      	mov	r5, sp
 800316a:	f106 0410 	add.w	r4, r6, #16
 800316e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003170:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003172:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003174:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003176:	e894 0003 	ldmia.w	r4, {r0, r1}
 800317a:	e885 0003 	stmia.w	r5, {r0, r1}
 800317e:	1d33      	adds	r3, r6, #4
 8003180:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003182:	6838      	ldr	r0, [r7, #0]
 8003184:	f003 f8d0 	bl	8006328 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	2101      	movs	r1, #1
 800318e:	4618      	mov	r0, r3
 8003190:	f003 f94d 	bl	800642e <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	603b      	str	r3, [r7, #0]
 800319a:	687e      	ldr	r6, [r7, #4]
 800319c:	466d      	mov	r5, sp
 800319e:	f106 0410 	add.w	r4, r6, #16
 80031a2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031aa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031ae:	e885 0003 	stmia.w	r5, {r0, r1}
 80031b2:	1d33      	adds	r3, r6, #4
 80031b4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031b6:	6838      	ldr	r0, [r7, #0]
 80031b8:	f003 fad6 	bl	8006768 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2201      	movs	r2, #1
 80031c0:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3714      	adds	r7, #20
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031ce <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 80031ce:	b590      	push	{r4, r7, lr}
 80031d0:	b089      	sub	sp, #36	; 0x24
 80031d2:	af04      	add	r7, sp, #16
 80031d4:	6078      	str	r0, [r7, #4]
 80031d6:	4608      	mov	r0, r1
 80031d8:	4611      	mov	r1, r2
 80031da:	461a      	mov	r2, r3
 80031dc:	4603      	mov	r3, r0
 80031de:	70fb      	strb	r3, [r7, #3]
 80031e0:	460b      	mov	r3, r1
 80031e2:	70bb      	strb	r3, [r7, #2]
 80031e4:	4613      	mov	r3, r2
 80031e6:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d101      	bne.n	80031f6 <HAL_HCD_HC_Init+0x28>
 80031f2:	2302      	movs	r3, #2
 80031f4:	e076      	b.n	80032e4 <HAL_HCD_HC_Init+0x116>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2201      	movs	r2, #1
 80031fa:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 80031fe:	78fb      	ldrb	r3, [r7, #3]
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	212c      	movs	r1, #44	; 0x2c
 8003204:	fb01 f303 	mul.w	r3, r1, r3
 8003208:	4413      	add	r3, r2
 800320a:	333d      	adds	r3, #61	; 0x3d
 800320c:	2200      	movs	r2, #0
 800320e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8003210:	78fb      	ldrb	r3, [r7, #3]
 8003212:	687a      	ldr	r2, [r7, #4]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3338      	adds	r3, #56	; 0x38
 800321e:	787a      	ldrb	r2, [r7, #1]
 8003220:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8003222:	78fb      	ldrb	r3, [r7, #3]
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	212c      	movs	r1, #44	; 0x2c
 8003228:	fb01 f303 	mul.w	r3, r1, r3
 800322c:	4413      	add	r3, r2
 800322e:	3340      	adds	r3, #64	; 0x40
 8003230:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8003232:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	687a      	ldr	r2, [r7, #4]
 8003238:	212c      	movs	r1, #44	; 0x2c
 800323a:	fb01 f303 	mul.w	r3, r1, r3
 800323e:	4413      	add	r3, r2
 8003240:	3339      	adds	r3, #57	; 0x39
 8003242:	78fa      	ldrb	r2, [r7, #3]
 8003244:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8003246:	78fb      	ldrb	r3, [r7, #3]
 8003248:	687a      	ldr	r2, [r7, #4]
 800324a:	212c      	movs	r1, #44	; 0x2c
 800324c:	fb01 f303 	mul.w	r3, r1, r3
 8003250:	4413      	add	r3, r2
 8003252:	333f      	adds	r3, #63	; 0x3f
 8003254:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003258:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 800325a:	78fb      	ldrb	r3, [r7, #3]
 800325c:	78ba      	ldrb	r2, [r7, #2]
 800325e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003262:	b2d0      	uxtb	r0, r2
 8003264:	687a      	ldr	r2, [r7, #4]
 8003266:	212c      	movs	r1, #44	; 0x2c
 8003268:	fb01 f303 	mul.w	r3, r1, r3
 800326c:	4413      	add	r3, r2
 800326e:	333a      	adds	r3, #58	; 0x3a
 8003270:	4602      	mov	r2, r0
 8003272:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8003274:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8003278:	2b00      	cmp	r3, #0
 800327a:	da09      	bge.n	8003290 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 800327c:	78fb      	ldrb	r3, [r7, #3]
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	212c      	movs	r1, #44	; 0x2c
 8003282:	fb01 f303 	mul.w	r3, r1, r3
 8003286:	4413      	add	r3, r2
 8003288:	333b      	adds	r3, #59	; 0x3b
 800328a:	2201      	movs	r2, #1
 800328c:	701a      	strb	r2, [r3, #0]
 800328e:	e008      	b.n	80032a2 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8003290:	78fb      	ldrb	r3, [r7, #3]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	212c      	movs	r1, #44	; 0x2c
 8003296:	fb01 f303 	mul.w	r3, r1, r3
 800329a:	4413      	add	r3, r2
 800329c:	333b      	adds	r3, #59	; 0x3b
 800329e:	2200      	movs	r2, #0
 80032a0:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 80032a2:	78fb      	ldrb	r3, [r7, #3]
 80032a4:	687a      	ldr	r2, [r7, #4]
 80032a6:	212c      	movs	r1, #44	; 0x2c
 80032a8:	fb01 f303 	mul.w	r3, r1, r3
 80032ac:	4413      	add	r3, r2
 80032ae:	333c      	adds	r3, #60	; 0x3c
 80032b0:	f897 2020 	ldrb.w	r2, [r7, #32]
 80032b4:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6818      	ldr	r0, [r3, #0]
 80032ba:	787c      	ldrb	r4, [r7, #1]
 80032bc:	78ba      	ldrb	r2, [r7, #2]
 80032be:	78f9      	ldrb	r1, [r7, #3]
 80032c0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80032c2:	9302      	str	r3, [sp, #8]
 80032c4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80032c8:	9301      	str	r3, [sp, #4]
 80032ca:	f897 3020 	ldrb.w	r3, [r7, #32]
 80032ce:	9300      	str	r3, [sp, #0]
 80032d0:	4623      	mov	r3, r4
 80032d2:	f003 fba5 	bl	8006a20 <USB_HC_Init>
 80032d6:	4603      	mov	r3, r0
 80032d8:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 80032e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032e4:	4618      	mov	r0, r3
 80032e6:	3714      	adds	r7, #20
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd90      	pop	{r4, r7, pc}

080032ec <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
 80032f4:	460b      	mov	r3, r1
 80032f6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80032f8:	2300      	movs	r3, #0
 80032fa:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003302:	2b01      	cmp	r3, #1
 8003304:	d101      	bne.n	800330a <HAL_HCD_HC_Halt+0x1e>
 8003306:	2302      	movs	r3, #2
 8003308:	e00f      	b.n	800332a <HAL_HCD_HC_Halt+0x3e>
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2201      	movs	r2, #1
 800330e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	78fa      	ldrb	r2, [r7, #3]
 8003318:	4611      	mov	r1, r2
 800331a:	4618      	mov	r0, r3
 800331c:	f003 fdf5 	bl	8006f0a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2200      	movs	r2, #0
 8003324:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8003328:	7bfb      	ldrb	r3, [r7, #15]
}
 800332a:	4618      	mov	r0, r3
 800332c:	3710      	adds	r7, #16
 800332e:	46bd      	mov	sp, r7
 8003330:	bd80      	pop	{r7, pc}
	...

08003334 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	4608      	mov	r0, r1
 800333e:	4611      	mov	r1, r2
 8003340:	461a      	mov	r2, r3
 8003342:	4603      	mov	r3, r0
 8003344:	70fb      	strb	r3, [r7, #3]
 8003346:	460b      	mov	r3, r1
 8003348:	70bb      	strb	r3, [r7, #2]
 800334a:	4613      	mov	r3, r2
 800334c:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 800334e:	78fb      	ldrb	r3, [r7, #3]
 8003350:	687a      	ldr	r2, [r7, #4]
 8003352:	212c      	movs	r1, #44	; 0x2c
 8003354:	fb01 f303 	mul.w	r3, r1, r3
 8003358:	4413      	add	r3, r2
 800335a:	333b      	adds	r3, #59	; 0x3b
 800335c:	78ba      	ldrb	r2, [r7, #2]
 800335e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8003360:	78fb      	ldrb	r3, [r7, #3]
 8003362:	687a      	ldr	r2, [r7, #4]
 8003364:	212c      	movs	r1, #44	; 0x2c
 8003366:	fb01 f303 	mul.w	r3, r1, r3
 800336a:	4413      	add	r3, r2
 800336c:	333f      	adds	r3, #63	; 0x3f
 800336e:	787a      	ldrb	r2, [r7, #1]
 8003370:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8003372:	7c3b      	ldrb	r3, [r7, #16]
 8003374:	2b00      	cmp	r3, #0
 8003376:	d112      	bne.n	800339e <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8003378:	78fb      	ldrb	r3, [r7, #3]
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	212c      	movs	r1, #44	; 0x2c
 800337e:	fb01 f303 	mul.w	r3, r1, r3
 8003382:	4413      	add	r3, r2
 8003384:	3342      	adds	r3, #66	; 0x42
 8003386:	2203      	movs	r2, #3
 8003388:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800338a:	78fb      	ldrb	r3, [r7, #3]
 800338c:	687a      	ldr	r2, [r7, #4]
 800338e:	212c      	movs	r1, #44	; 0x2c
 8003390:	fb01 f303 	mul.w	r3, r1, r3
 8003394:	4413      	add	r3, r2
 8003396:	333d      	adds	r3, #61	; 0x3d
 8003398:	7f3a      	ldrb	r2, [r7, #28]
 800339a:	701a      	strb	r2, [r3, #0]
 800339c:	e008      	b.n	80033b0 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800339e:	78fb      	ldrb	r3, [r7, #3]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	212c      	movs	r1, #44	; 0x2c
 80033a4:	fb01 f303 	mul.w	r3, r1, r3
 80033a8:	4413      	add	r3, r2
 80033aa:	3342      	adds	r3, #66	; 0x42
 80033ac:	2202      	movs	r2, #2
 80033ae:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80033b0:	787b      	ldrb	r3, [r7, #1]
 80033b2:	2b03      	cmp	r3, #3
 80033b4:	f200 80c6 	bhi.w	8003544 <HAL_HCD_HC_SubmitRequest+0x210>
 80033b8:	a201      	add	r2, pc, #4	; (adr r2, 80033c0 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80033ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033be:	bf00      	nop
 80033c0:	080033d1 	.word	0x080033d1
 80033c4:	08003531 	.word	0x08003531
 80033c8:	08003435 	.word	0x08003435
 80033cc:	080034b3 	.word	0x080034b3
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80033d0:	7c3b      	ldrb	r3, [r7, #16]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	f040 80b8 	bne.w	8003548 <HAL_HCD_HC_SubmitRequest+0x214>
 80033d8:	78bb      	ldrb	r3, [r7, #2]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	f040 80b4 	bne.w	8003548 <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80033e0:	8b3b      	ldrh	r3, [r7, #24]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d108      	bne.n	80033f8 <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80033e6:	78fb      	ldrb	r3, [r7, #3]
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	212c      	movs	r1, #44	; 0x2c
 80033ec:	fb01 f303 	mul.w	r3, r1, r3
 80033f0:	4413      	add	r3, r2
 80033f2:	3355      	adds	r3, #85	; 0x55
 80033f4:	2201      	movs	r2, #1
 80033f6:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80033f8:	78fb      	ldrb	r3, [r7, #3]
 80033fa:	687a      	ldr	r2, [r7, #4]
 80033fc:	212c      	movs	r1, #44	; 0x2c
 80033fe:	fb01 f303 	mul.w	r3, r1, r3
 8003402:	4413      	add	r3, r2
 8003404:	3355      	adds	r3, #85	; 0x55
 8003406:	781b      	ldrb	r3, [r3, #0]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d109      	bne.n	8003420 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800340c:	78fb      	ldrb	r3, [r7, #3]
 800340e:	687a      	ldr	r2, [r7, #4]
 8003410:	212c      	movs	r1, #44	; 0x2c
 8003412:	fb01 f303 	mul.w	r3, r1, r3
 8003416:	4413      	add	r3, r2
 8003418:	3342      	adds	r3, #66	; 0x42
 800341a:	2200      	movs	r2, #0
 800341c:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800341e:	e093      	b.n	8003548 <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003420:	78fb      	ldrb	r3, [r7, #3]
 8003422:	687a      	ldr	r2, [r7, #4]
 8003424:	212c      	movs	r1, #44	; 0x2c
 8003426:	fb01 f303 	mul.w	r3, r1, r3
 800342a:	4413      	add	r3, r2
 800342c:	3342      	adds	r3, #66	; 0x42
 800342e:	2202      	movs	r2, #2
 8003430:	701a      	strb	r2, [r3, #0]
      break;
 8003432:	e089      	b.n	8003548 <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8003434:	78bb      	ldrb	r3, [r7, #2]
 8003436:	2b00      	cmp	r3, #0
 8003438:	d11d      	bne.n	8003476 <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800343a:	78fb      	ldrb	r3, [r7, #3]
 800343c:	687a      	ldr	r2, [r7, #4]
 800343e:	212c      	movs	r1, #44	; 0x2c
 8003440:	fb01 f303 	mul.w	r3, r1, r3
 8003444:	4413      	add	r3, r2
 8003446:	3355      	adds	r3, #85	; 0x55
 8003448:	781b      	ldrb	r3, [r3, #0]
 800344a:	2b00      	cmp	r3, #0
 800344c:	d109      	bne.n	8003462 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800344e:	78fb      	ldrb	r3, [r7, #3]
 8003450:	687a      	ldr	r2, [r7, #4]
 8003452:	212c      	movs	r1, #44	; 0x2c
 8003454:	fb01 f303 	mul.w	r3, r1, r3
 8003458:	4413      	add	r3, r2
 800345a:	3342      	adds	r3, #66	; 0x42
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8003460:	e073      	b.n	800354a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8003462:	78fb      	ldrb	r3, [r7, #3]
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	212c      	movs	r1, #44	; 0x2c
 8003468:	fb01 f303 	mul.w	r3, r1, r3
 800346c:	4413      	add	r3, r2
 800346e:	3342      	adds	r3, #66	; 0x42
 8003470:	2202      	movs	r2, #2
 8003472:	701a      	strb	r2, [r3, #0]
      break;
 8003474:	e069      	b.n	800354a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8003476:	78fb      	ldrb	r3, [r7, #3]
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	212c      	movs	r1, #44	; 0x2c
 800347c:	fb01 f303 	mul.w	r3, r1, r3
 8003480:	4413      	add	r3, r2
 8003482:	3354      	adds	r3, #84	; 0x54
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d109      	bne.n	800349e <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800348a:	78fb      	ldrb	r3, [r7, #3]
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	212c      	movs	r1, #44	; 0x2c
 8003490:	fb01 f303 	mul.w	r3, r1, r3
 8003494:	4413      	add	r3, r2
 8003496:	3342      	adds	r3, #66	; 0x42
 8003498:	2200      	movs	r2, #0
 800349a:	701a      	strb	r2, [r3, #0]
      break;
 800349c:	e055      	b.n	800354a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	212c      	movs	r1, #44	; 0x2c
 80034a4:	fb01 f303 	mul.w	r3, r1, r3
 80034a8:	4413      	add	r3, r2
 80034aa:	3342      	adds	r3, #66	; 0x42
 80034ac:	2202      	movs	r2, #2
 80034ae:	701a      	strb	r2, [r3, #0]
      break;
 80034b0:	e04b      	b.n	800354a <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80034b2:	78bb      	ldrb	r3, [r7, #2]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d11d      	bne.n	80034f4 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	212c      	movs	r1, #44	; 0x2c
 80034be:	fb01 f303 	mul.w	r3, r1, r3
 80034c2:	4413      	add	r3, r2
 80034c4:	3355      	adds	r3, #85	; 0x55
 80034c6:	781b      	ldrb	r3, [r3, #0]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d109      	bne.n	80034e0 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	687a      	ldr	r2, [r7, #4]
 80034d0:	212c      	movs	r1, #44	; 0x2c
 80034d2:	fb01 f303 	mul.w	r3, r1, r3
 80034d6:	4413      	add	r3, r2
 80034d8:	3342      	adds	r3, #66	; 0x42
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80034de:	e034      	b.n	800354a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	212c      	movs	r1, #44	; 0x2c
 80034e6:	fb01 f303 	mul.w	r3, r1, r3
 80034ea:	4413      	add	r3, r2
 80034ec:	3342      	adds	r3, #66	; 0x42
 80034ee:	2202      	movs	r2, #2
 80034f0:	701a      	strb	r2, [r3, #0]
      break;
 80034f2:	e02a      	b.n	800354a <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80034f4:	78fb      	ldrb	r3, [r7, #3]
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	212c      	movs	r1, #44	; 0x2c
 80034fa:	fb01 f303 	mul.w	r3, r1, r3
 80034fe:	4413      	add	r3, r2
 8003500:	3354      	adds	r3, #84	; 0x54
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b00      	cmp	r3, #0
 8003506:	d109      	bne.n	800351c <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003508:	78fb      	ldrb	r3, [r7, #3]
 800350a:	687a      	ldr	r2, [r7, #4]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	3342      	adds	r3, #66	; 0x42
 8003516:	2200      	movs	r2, #0
 8003518:	701a      	strb	r2, [r3, #0]
      break;
 800351a:	e016      	b.n	800354a <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800351c:	78fb      	ldrb	r3, [r7, #3]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	3342      	adds	r3, #66	; 0x42
 800352a:	2202      	movs	r2, #2
 800352c:	701a      	strb	r2, [r3, #0]
      break;
 800352e:	e00c      	b.n	800354a <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8003530:	78fb      	ldrb	r3, [r7, #3]
 8003532:	687a      	ldr	r2, [r7, #4]
 8003534:	212c      	movs	r1, #44	; 0x2c
 8003536:	fb01 f303 	mul.w	r3, r1, r3
 800353a:	4413      	add	r3, r2
 800353c:	3342      	adds	r3, #66	; 0x42
 800353e:	2200      	movs	r2, #0
 8003540:	701a      	strb	r2, [r3, #0]
      break;
 8003542:	e002      	b.n	800354a <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8003544:	bf00      	nop
 8003546:	e000      	b.n	800354a <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 8003548:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800354a:	78fb      	ldrb	r3, [r7, #3]
 800354c:	687a      	ldr	r2, [r7, #4]
 800354e:	212c      	movs	r1, #44	; 0x2c
 8003550:	fb01 f303 	mul.w	r3, r1, r3
 8003554:	4413      	add	r3, r2
 8003556:	3344      	adds	r3, #68	; 0x44
 8003558:	697a      	ldr	r2, [r7, #20]
 800355a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	8b3a      	ldrh	r2, [r7, #24]
 8003560:	6879      	ldr	r1, [r7, #4]
 8003562:	202c      	movs	r0, #44	; 0x2c
 8003564:	fb00 f303 	mul.w	r3, r0, r3
 8003568:	440b      	add	r3, r1
 800356a:	334c      	adds	r3, #76	; 0x4c
 800356c:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 800356e:	78fb      	ldrb	r3, [r7, #3]
 8003570:	687a      	ldr	r2, [r7, #4]
 8003572:	212c      	movs	r1, #44	; 0x2c
 8003574:	fb01 f303 	mul.w	r3, r1, r3
 8003578:	4413      	add	r3, r2
 800357a:	3360      	adds	r3, #96	; 0x60
 800357c:	2200      	movs	r2, #0
 800357e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8003580:	78fb      	ldrb	r3, [r7, #3]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	212c      	movs	r1, #44	; 0x2c
 8003586:	fb01 f303 	mul.w	r3, r1, r3
 800358a:	4413      	add	r3, r2
 800358c:	3350      	adds	r3, #80	; 0x50
 800358e:	2200      	movs	r2, #0
 8003590:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8003592:	78fb      	ldrb	r3, [r7, #3]
 8003594:	687a      	ldr	r2, [r7, #4]
 8003596:	212c      	movs	r1, #44	; 0x2c
 8003598:	fb01 f303 	mul.w	r3, r1, r3
 800359c:	4413      	add	r3, r2
 800359e:	3339      	adds	r3, #57	; 0x39
 80035a0:	78fa      	ldrb	r2, [r7, #3]
 80035a2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80035a4:	78fb      	ldrb	r3, [r7, #3]
 80035a6:	687a      	ldr	r2, [r7, #4]
 80035a8:	212c      	movs	r1, #44	; 0x2c
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	4413      	add	r3, r2
 80035b0:	3361      	adds	r3, #97	; 0x61
 80035b2:	2200      	movs	r2, #0
 80035b4:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6818      	ldr	r0, [r3, #0]
 80035ba:	78fb      	ldrb	r3, [r7, #3]
 80035bc:	222c      	movs	r2, #44	; 0x2c
 80035be:	fb02 f303 	mul.w	r3, r2, r3
 80035c2:	3338      	adds	r3, #56	; 0x38
 80035c4:	687a      	ldr	r2, [r7, #4]
 80035c6:	18d1      	adds	r1, r2, r3
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	461a      	mov	r2, r3
 80035d0:	f003 fb48 	bl	8006c64 <USB_HC_StartXfer>
 80035d4:	4603      	mov	r3, r0
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3708      	adds	r7, #8
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
 80035de:	bf00      	nop

080035e0 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b086      	sub	sp, #24
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	4618      	mov	r0, r3
 80035f8:	f003 f873 	bl	80066e2 <USB_GetMode>
 80035fc:	4603      	mov	r3, r0
 80035fe:	2b01      	cmp	r3, #1
 8003600:	f040 80f6 	bne.w	80037f0 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	4618      	mov	r0, r3
 800360a:	f003 f857 	bl	80066bc <USB_ReadInterrupts>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	f000 80ec 	beq.w	80037ee <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	4618      	mov	r0, r3
 800361c:	f003 f84e 	bl	80066bc <USB_ReadInterrupts>
 8003620:	4603      	mov	r3, r0
 8003622:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003626:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800362a:	d104      	bne.n	8003636 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8003634:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4618      	mov	r0, r3
 800363c:	f003 f83e 	bl	80066bc <USB_ReadInterrupts>
 8003640:	4603      	mov	r3, r0
 8003642:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003646:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800364a:	d104      	bne.n	8003656 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003654:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4618      	mov	r0, r3
 800365c:	f003 f82e 	bl	80066bc <USB_ReadInterrupts>
 8003660:	4603      	mov	r3, r0
 8003662:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003666:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800366a:	d104      	bne.n	8003676 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8003674:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f003 f81e 	bl	80066bc <USB_ReadInterrupts>
 8003680:	4603      	mov	r3, r0
 8003682:	f003 0302 	and.w	r3, r3, #2
 8003686:	2b02      	cmp	r3, #2
 8003688:	d103      	bne.n	8003692 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	2202      	movs	r2, #2
 8003690:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	4618      	mov	r0, r3
 8003698:	f003 f810 	bl	80066bc <USB_ReadInterrupts>
 800369c:	4603      	mov	r3, r0
 800369e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80036a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80036a6:	d11c      	bne.n	80036e2 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80036b0:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10f      	bne.n	80036e2 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80036c2:	2110      	movs	r1, #16
 80036c4:	6938      	ldr	r0, [r7, #16]
 80036c6:	f002 feff 	bl	80064c8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80036ca:	6938      	ldr	r0, [r7, #16]
 80036cc:	f002 ff30 	bl	8006530 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	2101      	movs	r1, #1
 80036d6:	4618      	mov	r0, r3
 80036d8:	f003 f906 	bl	80068e8 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80036dc:	6878      	ldr	r0, [r7, #4]
 80036de:	f004 ff0f 	bl	8008500 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	4618      	mov	r0, r3
 80036e8:	f002 ffe8 	bl	80066bc <USB_ReadInterrupts>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80036f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036f6:	d102      	bne.n	80036fe <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f001 f882 	bl	8004802 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f002 ffda 	bl	80066bc <USB_ReadInterrupts>
 8003708:	4603      	mov	r3, r0
 800370a:	f003 0308 	and.w	r3, r3, #8
 800370e:	2b08      	cmp	r3, #8
 8003710:	d106      	bne.n	8003720 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8003712:	6878      	ldr	r0, [r7, #4]
 8003714:	f004 fed8 	bl	80084c8 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2208      	movs	r2, #8
 800371e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f002 ffc9 	bl	80066bc <USB_ReadInterrupts>
 800372a:	4603      	mov	r3, r0
 800372c:	f003 0310 	and.w	r3, r3, #16
 8003730:	2b10      	cmp	r3, #16
 8003732:	d101      	bne.n	8003738 <HAL_HCD_IRQHandler+0x158>
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <HAL_HCD_IRQHandler+0x15a>
 8003738:	2300      	movs	r3, #0
 800373a:	2b00      	cmp	r3, #0
 800373c:	d012      	beq.n	8003764 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699a      	ldr	r2, [r3, #24]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f022 0210 	bic.w	r2, r2, #16
 800374c:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 ff85 	bl	800465e <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	f042 0210 	orr.w	r2, r2, #16
 8003762:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4618      	mov	r0, r3
 800376a:	f002 ffa7 	bl	80066bc <USB_ReadInterrupts>
 800376e:	4603      	mov	r3, r0
 8003770:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003774:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003778:	d13a      	bne.n	80037f0 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4618      	mov	r0, r3
 8003780:	f003 fbb2 	bl	8006ee8 <USB_HC_ReadInterrupt>
 8003784:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8003786:	2300      	movs	r3, #0
 8003788:	617b      	str	r3, [r7, #20]
 800378a:	e025      	b.n	80037d8 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	68ba      	ldr	r2, [r7, #8]
 8003794:	fa22 f303 	lsr.w	r3, r2, r3
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d018      	beq.n	80037d2 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80037a0:	697b      	ldr	r3, [r7, #20]
 80037a2:	015a      	lsls	r2, r3, #5
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	4413      	add	r3, r2
 80037a8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037b6:	d106      	bne.n	80037c6 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80037b8:	697b      	ldr	r3, [r7, #20]
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	4619      	mov	r1, r3
 80037be:	6878      	ldr	r0, [r7, #4]
 80037c0:	f000 f88f 	bl	80038e2 <HCD_HC_IN_IRQHandler>
 80037c4:	e005      	b.n	80037d2 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80037c6:	697b      	ldr	r3, [r7, #20]
 80037c8:	b2db      	uxtb	r3, r3
 80037ca:	4619      	mov	r1, r3
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f000 fbdd 	bl	8003f8c <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	3301      	adds	r3, #1
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	697a      	ldr	r2, [r7, #20]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d3d4      	bcc.n	800378c <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80037ea:	615a      	str	r2, [r3, #20]
 80037ec:	e000      	b.n	80037f0 <HAL_HCD_IRQHandler+0x210>
      return;
 80037ee:	bf00      	nop
    }
  }
}
 80037f0:	3718      	adds	r7, #24
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b082      	sub	sp, #8
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8003804:	2b01      	cmp	r3, #1
 8003806:	d101      	bne.n	800380c <HAL_HCD_Start+0x16>
 8003808:	2302      	movs	r3, #2
 800380a:	e013      	b.n	8003834 <HAL_HCD_Start+0x3e>
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2201      	movs	r2, #1
 8003810:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	2101      	movs	r1, #1
 800381a:	4618      	mov	r0, r3
 800381c:	f003 f89e 	bl	800695c <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	4618      	mov	r0, r3
 8003826:	f002 fde0 	bl	80063ea <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8003832:	2300      	movs	r3, #0
}
 8003834:	4618      	mov	r0, r3
 8003836:	3708      	adds	r7, #8
 8003838:	46bd      	mov	sp, r7
 800383a:	bd80      	pop	{r7, pc}

0800383c <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800384a:	2b01      	cmp	r3, #1
 800384c:	d101      	bne.n	8003852 <HAL_HCD_Stop+0x16>
 800384e:	2302      	movs	r3, #2
 8003850:	e00d      	b.n	800386e <HAL_HCD_Stop+0x32>
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f003 fc8c 	bl	800717c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2200      	movs	r2, #0
 8003868:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3708      	adds	r7, #8
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}

08003876 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003876:	b480      	push	{r7}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	687a      	ldr	r2, [r7, #4]
 8003886:	212c      	movs	r1, #44	; 0x2c
 8003888:	fb01 f303 	mul.w	r3, r1, r3
 800388c:	4413      	add	r3, r2
 800388e:	3360      	adds	r3, #96	; 0x60
 8003890:	781b      	ldrb	r3, [r3, #0]
}
 8003892:	4618      	mov	r0, r3
 8003894:	370c      	adds	r7, #12
 8003896:	46bd      	mov	sp, r7
 8003898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800389c:	4770      	bx	lr

0800389e <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800389e:	b480      	push	{r7}
 80038a0:	b083      	sub	sp, #12
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
 80038a6:	460b      	mov	r3, r1
 80038a8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80038aa:	78fb      	ldrb	r3, [r7, #3]
 80038ac:	687a      	ldr	r2, [r7, #4]
 80038ae:	212c      	movs	r1, #44	; 0x2c
 80038b0:	fb01 f303 	mul.w	r3, r1, r3
 80038b4:	4413      	add	r3, r2
 80038b6:	3350      	adds	r3, #80	; 0x50
 80038b8:	681b      	ldr	r3, [r3, #0]
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	370c      	adds	r7, #12
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr

080038c6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b082      	sub	sp, #8
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	4618      	mov	r0, r3
 80038d4:	f003 f892 	bl	80069fc <USB_GetCurrentFrame>
 80038d8:	4603      	mov	r3, r0
}
 80038da:	4618      	mov	r0, r3
 80038dc:	3708      	adds	r7, #8
 80038de:	46bd      	mov	sp, r7
 80038e0:	bd80      	pop	{r7, pc}

080038e2 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80038e2:	b580      	push	{r7, lr}
 80038e4:	b086      	sub	sp, #24
 80038e6:	af00      	add	r7, sp, #0
 80038e8:	6078      	str	r0, [r7, #4]
 80038ea:	460b      	mov	r3, r1
 80038ec:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80038f8:	78fb      	ldrb	r3, [r7, #3]
 80038fa:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	015a      	lsls	r2, r3, #5
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	4413      	add	r3, r2
 8003904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003908:	689b      	ldr	r3, [r3, #8]
 800390a:	f003 0304 	and.w	r3, r3, #4
 800390e:	2b04      	cmp	r3, #4
 8003910:	d11a      	bne.n	8003948 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	015a      	lsls	r2, r3, #5
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4413      	add	r3, r2
 800391a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800391e:	461a      	mov	r2, r3
 8003920:	2304      	movs	r3, #4
 8003922:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003924:	687a      	ldr	r2, [r7, #4]
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	212c      	movs	r1, #44	; 0x2c
 800392a:	fb01 f303 	mul.w	r3, r1, r3
 800392e:	4413      	add	r3, r2
 8003930:	3361      	adds	r3, #97	; 0x61
 8003932:	2206      	movs	r2, #6
 8003934:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	68fa      	ldr	r2, [r7, #12]
 800393c:	b2d2      	uxtb	r2, r2
 800393e:	4611      	mov	r1, r2
 8003940:	4618      	mov	r0, r3
 8003942:	f003 fae2 	bl	8006f0a <USB_HC_Halt>
 8003946:	e0af      	b.n	8003aa8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	015a      	lsls	r2, r3, #5
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	4413      	add	r3, r2
 8003950:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800395a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800395e:	d11b      	bne.n	8003998 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4413      	add	r3, r2
 8003968:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800396c:	461a      	mov	r2, r3
 800396e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003972:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8003974:	687a      	ldr	r2, [r7, #4]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	212c      	movs	r1, #44	; 0x2c
 800397a:	fb01 f303 	mul.w	r3, r1, r3
 800397e:	4413      	add	r3, r2
 8003980:	3361      	adds	r3, #97	; 0x61
 8003982:	2207      	movs	r2, #7
 8003984:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	68fa      	ldr	r2, [r7, #12]
 800398c:	b2d2      	uxtb	r2, r2
 800398e:	4611      	mov	r1, r2
 8003990:	4618      	mov	r0, r3
 8003992:	f003 faba 	bl	8006f0a <USB_HC_Halt>
 8003996:	e087      	b.n	8003aa8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	015a      	lsls	r2, r3, #5
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	4413      	add	r3, r2
 80039a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	f003 0320 	and.w	r3, r3, #32
 80039aa:	2b20      	cmp	r3, #32
 80039ac:	d109      	bne.n	80039c2 <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	015a      	lsls	r2, r3, #5
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	4413      	add	r3, r2
 80039b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ba:	461a      	mov	r2, r3
 80039bc:	2320      	movs	r3, #32
 80039be:	6093      	str	r3, [r2, #8]
 80039c0:	e072      	b.n	8003aa8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	015a      	lsls	r2, r3, #5
 80039c6:	693b      	ldr	r3, [r7, #16]
 80039c8:	4413      	add	r3, r2
 80039ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039ce:	689b      	ldr	r3, [r3, #8]
 80039d0:	f003 0308 	and.w	r3, r3, #8
 80039d4:	2b08      	cmp	r3, #8
 80039d6:	d11a      	bne.n	8003a0e <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	015a      	lsls	r2, r3, #5
 80039dc:	693b      	ldr	r3, [r7, #16]
 80039de:	4413      	add	r3, r2
 80039e0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80039e4:	461a      	mov	r2, r3
 80039e6:	2308      	movs	r3, #8
 80039e8:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80039ea:	687a      	ldr	r2, [r7, #4]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	212c      	movs	r1, #44	; 0x2c
 80039f0:	fb01 f303 	mul.w	r3, r1, r3
 80039f4:	4413      	add	r3, r2
 80039f6:	3361      	adds	r3, #97	; 0x61
 80039f8:	2205      	movs	r2, #5
 80039fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	68fa      	ldr	r2, [r7, #12]
 8003a02:	b2d2      	uxtb	r2, r2
 8003a04:	4611      	mov	r1, r2
 8003a06:	4618      	mov	r0, r3
 8003a08:	f003 fa7f 	bl	8006f0a <USB_HC_Halt>
 8003a0c:	e04c      	b.n	8003aa8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	015a      	lsls	r2, r3, #5
 8003a12:	693b      	ldr	r3, [r7, #16]
 8003a14:	4413      	add	r3, r2
 8003a16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a20:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a24:	d11b      	bne.n	8003a5e <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a32:	461a      	mov	r2, r3
 8003a34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a38:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8003a3a:	687a      	ldr	r2, [r7, #4]
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	212c      	movs	r1, #44	; 0x2c
 8003a40:	fb01 f303 	mul.w	r3, r1, r3
 8003a44:	4413      	add	r3, r2
 8003a46:	3361      	adds	r3, #97	; 0x61
 8003a48:	2208      	movs	r2, #8
 8003a4a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	68fa      	ldr	r2, [r7, #12]
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	4611      	mov	r1, r2
 8003a56:	4618      	mov	r0, r3
 8003a58:	f003 fa57 	bl	8006f0a <USB_HC_Halt>
 8003a5c:	e024      	b.n	8003aa8 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	015a      	lsls	r2, r3, #5
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	4413      	add	r3, r2
 8003a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a70:	2b80      	cmp	r3, #128	; 0x80
 8003a72:	d119      	bne.n	8003aa8 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003a80:	461a      	mov	r2, r3
 8003a82:	2380      	movs	r3, #128	; 0x80
 8003a84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	212c      	movs	r1, #44	; 0x2c
 8003a8c:	fb01 f303 	mul.w	r3, r1, r3
 8003a90:	4413      	add	r3, r2
 8003a92:	3361      	adds	r3, #97	; 0x61
 8003a94:	2206      	movs	r2, #6
 8003a96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	68fa      	ldr	r2, [r7, #12]
 8003a9e:	b2d2      	uxtb	r2, r2
 8003aa0:	4611      	mov	r1, r2
 8003aa2:	4618      	mov	r0, r3
 8003aa4:	f003 fa31 	bl	8006f0a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	015a      	lsls	r2, r3, #5
 8003aac:	693b      	ldr	r3, [r7, #16]
 8003aae:	4413      	add	r3, r2
 8003ab0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ab4:	689b      	ldr	r3, [r3, #8]
 8003ab6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003aba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003abe:	d112      	bne.n	8003ae6 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	4611      	mov	r1, r2
 8003aca:	4618      	mov	r0, r3
 8003acc:	f003 fa1d 	bl	8006f0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	693b      	ldr	r3, [r7, #16]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003adc:	461a      	mov	r2, r3
 8003ade:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003ae2:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8003ae4:	e24e      	b.n	8003f84 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	693b      	ldr	r3, [r7, #16]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f003 0301 	and.w	r3, r3, #1
 8003af8:	2b01      	cmp	r3, #1
 8003afa:	f040 80df 	bne.w	8003cbc <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d019      	beq.n	8003b3a <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003b06:	687a      	ldr	r2, [r7, #4]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	212c      	movs	r1, #44	; 0x2c
 8003b0c:	fb01 f303 	mul.w	r3, r1, r3
 8003b10:	4413      	add	r3, r2
 8003b12:	3348      	adds	r3, #72	; 0x48
 8003b14:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	0159      	lsls	r1, r3, #5
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	440b      	add	r3, r1
 8003b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8003b28:	1ad2      	subs	r2, r2, r3
 8003b2a:	6879      	ldr	r1, [r7, #4]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	202c      	movs	r0, #44	; 0x2c
 8003b30:	fb00 f303 	mul.w	r3, r0, r3
 8003b34:	440b      	add	r3, r1
 8003b36:	3350      	adds	r3, #80	; 0x50
 8003b38:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8003b3a:	687a      	ldr	r2, [r7, #4]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	212c      	movs	r1, #44	; 0x2c
 8003b40:	fb01 f303 	mul.w	r3, r1, r3
 8003b44:	4413      	add	r3, r2
 8003b46:	3361      	adds	r3, #97	; 0x61
 8003b48:	2201      	movs	r2, #1
 8003b4a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8003b4c:	687a      	ldr	r2, [r7, #4]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	212c      	movs	r1, #44	; 0x2c
 8003b52:	fb01 f303 	mul.w	r3, r1, r3
 8003b56:	4413      	add	r3, r2
 8003b58:	335c      	adds	r3, #92	; 0x5c
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	015a      	lsls	r2, r3, #5
 8003b62:	693b      	ldr	r3, [r7, #16]
 8003b64:	4413      	add	r3, r2
 8003b66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	2301      	movs	r3, #1
 8003b6e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b70:	687a      	ldr	r2, [r7, #4]
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	212c      	movs	r1, #44	; 0x2c
 8003b76:	fb01 f303 	mul.w	r3, r1, r3
 8003b7a:	4413      	add	r3, r2
 8003b7c:	333f      	adds	r3, #63	; 0x3f
 8003b7e:	781b      	ldrb	r3, [r3, #0]
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d009      	beq.n	8003b98 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	212c      	movs	r1, #44	; 0x2c
 8003b8a:	fb01 f303 	mul.w	r3, r1, r3
 8003b8e:	4413      	add	r3, r2
 8003b90:	333f      	adds	r3, #63	; 0x3f
 8003b92:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d111      	bne.n	8003bbc <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	68fa      	ldr	r2, [r7, #12]
 8003b9e:	b2d2      	uxtb	r2, r2
 8003ba0:	4611      	mov	r1, r2
 8003ba2:	4618      	mov	r0, r3
 8003ba4:	f003 f9b1 	bl	8006f0a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	015a      	lsls	r2, r3, #5
 8003bac:	693b      	ldr	r3, [r7, #16]
 8003bae:	4413      	add	r3, r2
 8003bb0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bb4:	461a      	mov	r2, r3
 8003bb6:	2310      	movs	r3, #16
 8003bb8:	6093      	str	r3, [r2, #8]
 8003bba:	e03a      	b.n	8003c32 <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	212c      	movs	r1, #44	; 0x2c
 8003bc2:	fb01 f303 	mul.w	r3, r1, r3
 8003bc6:	4413      	add	r3, r2
 8003bc8:	333f      	adds	r3, #63	; 0x3f
 8003bca:	781b      	ldrb	r3, [r3, #0]
 8003bcc:	2b03      	cmp	r3, #3
 8003bce:	d009      	beq.n	8003be4 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8003bd0:	687a      	ldr	r2, [r7, #4]
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	212c      	movs	r1, #44	; 0x2c
 8003bd6:	fb01 f303 	mul.w	r3, r1, r3
 8003bda:	4413      	add	r3, r2
 8003bdc:	333f      	adds	r3, #63	; 0x3f
 8003bde:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d126      	bne.n	8003c32 <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	015a      	lsls	r2, r3, #5
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	4413      	add	r3, r2
 8003bec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	0151      	lsls	r1, r2, #5
 8003bf6:	693a      	ldr	r2, [r7, #16]
 8003bf8:	440a      	add	r2, r1
 8003bfa:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8003bfe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c02:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003c04:	687a      	ldr	r2, [r7, #4]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	212c      	movs	r1, #44	; 0x2c
 8003c0a:	fb01 f303 	mul.w	r3, r1, r3
 8003c0e:	4413      	add	r3, r2
 8003c10:	3360      	adds	r3, #96	; 0x60
 8003c12:	2201      	movs	r2, #1
 8003c14:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	b2d9      	uxtb	r1, r3
 8003c1a:	687a      	ldr	r2, [r7, #4]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	202c      	movs	r0, #44	; 0x2c
 8003c20:	fb00 f303 	mul.w	r3, r0, r3
 8003c24:	4413      	add	r3, r2
 8003c26:	3360      	adds	r3, #96	; 0x60
 8003c28:	781b      	ldrb	r3, [r3, #0]
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	6878      	ldr	r0, [r7, #4]
 8003c2e:	f004 fc75 	bl	800851c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	691b      	ldr	r3, [r3, #16]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d12b      	bne.n	8003c92 <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8003c3a:	687a      	ldr	r2, [r7, #4]
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	212c      	movs	r1, #44	; 0x2c
 8003c40:	fb01 f303 	mul.w	r3, r1, r3
 8003c44:	4413      	add	r3, r2
 8003c46:	3348      	adds	r3, #72	; 0x48
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	6879      	ldr	r1, [r7, #4]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	202c      	movs	r0, #44	; 0x2c
 8003c50:	fb00 f202 	mul.w	r2, r0, r2
 8003c54:	440a      	add	r2, r1
 8003c56:	3240      	adds	r2, #64	; 0x40
 8003c58:	8812      	ldrh	r2, [r2, #0]
 8003c5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8003c5e:	f003 0301 	and.w	r3, r3, #1
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	f000 818e 	beq.w	8003f84 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c68:	687a      	ldr	r2, [r7, #4]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	212c      	movs	r1, #44	; 0x2c
 8003c6e:	fb01 f303 	mul.w	r3, r1, r3
 8003c72:	4413      	add	r3, r2
 8003c74:	3354      	adds	r3, #84	; 0x54
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	f083 0301 	eor.w	r3, r3, #1
 8003c7c:	b2d8      	uxtb	r0, r3
 8003c7e:	687a      	ldr	r2, [r7, #4]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	212c      	movs	r1, #44	; 0x2c
 8003c84:	fb01 f303 	mul.w	r3, r1, r3
 8003c88:	4413      	add	r3, r2
 8003c8a:	3354      	adds	r3, #84	; 0x54
 8003c8c:	4602      	mov	r2, r0
 8003c8e:	701a      	strb	r2, [r3, #0]
}
 8003c90:	e178      	b.n	8003f84 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8003c92:	687a      	ldr	r2, [r7, #4]
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	212c      	movs	r1, #44	; 0x2c
 8003c98:	fb01 f303 	mul.w	r3, r1, r3
 8003c9c:	4413      	add	r3, r2
 8003c9e:	3354      	adds	r3, #84	; 0x54
 8003ca0:	781b      	ldrb	r3, [r3, #0]
 8003ca2:	f083 0301 	eor.w	r3, r3, #1
 8003ca6:	b2d8      	uxtb	r0, r3
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	212c      	movs	r1, #44	; 0x2c
 8003cae:	fb01 f303 	mul.w	r3, r1, r3
 8003cb2:	4413      	add	r3, r2
 8003cb4:	3354      	adds	r3, #84	; 0x54
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	701a      	strb	r2, [r3, #0]
}
 8003cba:	e163      	b.n	8003f84 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	015a      	lsls	r2, r3, #5
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003cc8:	689b      	ldr	r3, [r3, #8]
 8003cca:	f003 0302 	and.w	r3, r3, #2
 8003cce:	2b02      	cmp	r3, #2
 8003cd0:	f040 80f6 	bne.w	8003ec0 <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	212c      	movs	r1, #44	; 0x2c
 8003cda:	fb01 f303 	mul.w	r3, r1, r3
 8003cde:	4413      	add	r3, r2
 8003ce0:	3361      	adds	r3, #97	; 0x61
 8003ce2:	781b      	ldrb	r3, [r3, #0]
 8003ce4:	2b01      	cmp	r3, #1
 8003ce6:	d109      	bne.n	8003cfc <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8003ce8:	687a      	ldr	r2, [r7, #4]
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	212c      	movs	r1, #44	; 0x2c
 8003cee:	fb01 f303 	mul.w	r3, r1, r3
 8003cf2:	4413      	add	r3, r2
 8003cf4:	3360      	adds	r3, #96	; 0x60
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	701a      	strb	r2, [r3, #0]
 8003cfa:	e0c9      	b.n	8003e90 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	212c      	movs	r1, #44	; 0x2c
 8003d02:	fb01 f303 	mul.w	r3, r1, r3
 8003d06:	4413      	add	r3, r2
 8003d08:	3361      	adds	r3, #97	; 0x61
 8003d0a:	781b      	ldrb	r3, [r3, #0]
 8003d0c:	2b05      	cmp	r3, #5
 8003d0e:	d109      	bne.n	8003d24 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8003d10:	687a      	ldr	r2, [r7, #4]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	212c      	movs	r1, #44	; 0x2c
 8003d16:	fb01 f303 	mul.w	r3, r1, r3
 8003d1a:	4413      	add	r3, r2
 8003d1c:	3360      	adds	r3, #96	; 0x60
 8003d1e:	2205      	movs	r2, #5
 8003d20:	701a      	strb	r2, [r3, #0]
 8003d22:	e0b5      	b.n	8003e90 <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d24:	687a      	ldr	r2, [r7, #4]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	212c      	movs	r1, #44	; 0x2c
 8003d2a:	fb01 f303 	mul.w	r3, r1, r3
 8003d2e:	4413      	add	r3, r2
 8003d30:	3361      	adds	r3, #97	; 0x61
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	2b06      	cmp	r3, #6
 8003d36:	d009      	beq.n	8003d4c <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	212c      	movs	r1, #44	; 0x2c
 8003d3e:	fb01 f303 	mul.w	r3, r1, r3
 8003d42:	4413      	add	r3, r2
 8003d44:	3361      	adds	r3, #97	; 0x61
 8003d46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d150      	bne.n	8003dee <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8003d4c:	687a      	ldr	r2, [r7, #4]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	212c      	movs	r1, #44	; 0x2c
 8003d52:	fb01 f303 	mul.w	r3, r1, r3
 8003d56:	4413      	add	r3, r2
 8003d58:	335c      	adds	r3, #92	; 0x5c
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	6879      	ldr	r1, [r7, #4]
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	202c      	movs	r0, #44	; 0x2c
 8003d64:	fb00 f303 	mul.w	r3, r0, r3
 8003d68:	440b      	add	r3, r1
 8003d6a:	335c      	adds	r3, #92	; 0x5c
 8003d6c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003d6e:	687a      	ldr	r2, [r7, #4]
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	212c      	movs	r1, #44	; 0x2c
 8003d74:	fb01 f303 	mul.w	r3, r1, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	335c      	adds	r3, #92	; 0x5c
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2b02      	cmp	r3, #2
 8003d80:	d912      	bls.n	8003da8 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003d82:	687a      	ldr	r2, [r7, #4]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	212c      	movs	r1, #44	; 0x2c
 8003d88:	fb01 f303 	mul.w	r3, r1, r3
 8003d8c:	4413      	add	r3, r2
 8003d8e:	335c      	adds	r3, #92	; 0x5c
 8003d90:	2200      	movs	r2, #0
 8003d92:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003d94:	687a      	ldr	r2, [r7, #4]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	212c      	movs	r1, #44	; 0x2c
 8003d9a:	fb01 f303 	mul.w	r3, r1, r3
 8003d9e:	4413      	add	r3, r2
 8003da0:	3360      	adds	r3, #96	; 0x60
 8003da2:	2204      	movs	r2, #4
 8003da4:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003da6:	e073      	b.n	8003e90 <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003da8:	687a      	ldr	r2, [r7, #4]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	212c      	movs	r1, #44	; 0x2c
 8003dae:	fb01 f303 	mul.w	r3, r1, r3
 8003db2:	4413      	add	r3, r2
 8003db4:	3360      	adds	r3, #96	; 0x60
 8003db6:	2202      	movs	r2, #2
 8003db8:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	015a      	lsls	r2, r3, #5
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	4413      	add	r3, r2
 8003dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003dd0:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003dd8:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	015a      	lsls	r2, r3, #5
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	4413      	add	r3, r2
 8003de2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003de6:	461a      	mov	r2, r3
 8003de8:	68bb      	ldr	r3, [r7, #8]
 8003dea:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003dec:	e050      	b.n	8003e90 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	212c      	movs	r1, #44	; 0x2c
 8003df4:	fb01 f303 	mul.w	r3, r1, r3
 8003df8:	4413      	add	r3, r2
 8003dfa:	3361      	adds	r3, #97	; 0x61
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b03      	cmp	r3, #3
 8003e00:	d122      	bne.n	8003e48 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003e02:	687a      	ldr	r2, [r7, #4]
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	212c      	movs	r1, #44	; 0x2c
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	3360      	adds	r3, #96	; 0x60
 8003e10:	2202      	movs	r2, #2
 8003e12:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	015a      	lsls	r2, r3, #5
 8003e18:	693b      	ldr	r3, [r7, #16]
 8003e1a:	4413      	add	r3, r2
 8003e1c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003e24:	68bb      	ldr	r3, [r7, #8]
 8003e26:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003e2a:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003e32:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	015a      	lsls	r2, r3, #5
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	4413      	add	r3, r2
 8003e3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e40:	461a      	mov	r2, r3
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	6013      	str	r3, [r2, #0]
 8003e46:	e023      	b.n	8003e90 <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	212c      	movs	r1, #44	; 0x2c
 8003e4e:	fb01 f303 	mul.w	r3, r1, r3
 8003e52:	4413      	add	r3, r2
 8003e54:	3361      	adds	r3, #97	; 0x61
 8003e56:	781b      	ldrb	r3, [r3, #0]
 8003e58:	2b07      	cmp	r3, #7
 8003e5a:	d119      	bne.n	8003e90 <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8003e5c:	687a      	ldr	r2, [r7, #4]
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	212c      	movs	r1, #44	; 0x2c
 8003e62:	fb01 f303 	mul.w	r3, r1, r3
 8003e66:	4413      	add	r3, r2
 8003e68:	335c      	adds	r3, #92	; 0x5c
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	1c5a      	adds	r2, r3, #1
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	202c      	movs	r0, #44	; 0x2c
 8003e74:	fb00 f303 	mul.w	r3, r0, r3
 8003e78:	440b      	add	r3, r1
 8003e7a:	335c      	adds	r3, #92	; 0x5c
 8003e7c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003e7e:	687a      	ldr	r2, [r7, #4]
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	212c      	movs	r1, #44	; 0x2c
 8003e84:	fb01 f303 	mul.w	r3, r1, r3
 8003e88:	4413      	add	r3, r2
 8003e8a:	3360      	adds	r3, #96	; 0x60
 8003e8c:	2204      	movs	r2, #4
 8003e8e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	015a      	lsls	r2, r3, #5
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	4413      	add	r3, r2
 8003e98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003e9c:	461a      	mov	r2, r3
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	b2d9      	uxtb	r1, r3
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	202c      	movs	r0, #44	; 0x2c
 8003eac:	fb00 f303 	mul.w	r3, r0, r3
 8003eb0:	4413      	add	r3, r2
 8003eb2:	3360      	adds	r3, #96	; 0x60
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f004 fb2f 	bl	800851c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003ebe:	e061      	b.n	8003f84 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	015a      	lsls	r2, r3, #5
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	4413      	add	r3, r2
 8003ec8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	f003 0310 	and.w	r3, r3, #16
 8003ed2:	2b10      	cmp	r3, #16
 8003ed4:	d156      	bne.n	8003f84 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8003ed6:	687a      	ldr	r2, [r7, #4]
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	212c      	movs	r1, #44	; 0x2c
 8003edc:	fb01 f303 	mul.w	r3, r1, r3
 8003ee0:	4413      	add	r3, r2
 8003ee2:	333f      	adds	r3, #63	; 0x3f
 8003ee4:	781b      	ldrb	r3, [r3, #0]
 8003ee6:	2b03      	cmp	r3, #3
 8003ee8:	d111      	bne.n	8003f0e <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	212c      	movs	r1, #44	; 0x2c
 8003ef0:	fb01 f303 	mul.w	r3, r1, r3
 8003ef4:	4413      	add	r3, r2
 8003ef6:	335c      	adds	r3, #92	; 0x5c
 8003ef8:	2200      	movs	r2, #0
 8003efa:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	68fa      	ldr	r2, [r7, #12]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f002 ffff 	bl	8006f0a <USB_HC_Halt>
 8003f0c:	e031      	b.n	8003f72 <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f0e:	687a      	ldr	r2, [r7, #4]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	212c      	movs	r1, #44	; 0x2c
 8003f14:	fb01 f303 	mul.w	r3, r1, r3
 8003f18:	4413      	add	r3, r2
 8003f1a:	333f      	adds	r3, #63	; 0x3f
 8003f1c:	781b      	ldrb	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d009      	beq.n	8003f36 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8003f22:	687a      	ldr	r2, [r7, #4]
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	212c      	movs	r1, #44	; 0x2c
 8003f28:	fb01 f303 	mul.w	r3, r1, r3
 8003f2c:	4413      	add	r3, r2
 8003f2e:	333f      	adds	r3, #63	; 0x3f
 8003f30:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d11d      	bne.n	8003f72 <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8003f36:	687a      	ldr	r2, [r7, #4]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	212c      	movs	r1, #44	; 0x2c
 8003f3c:	fb01 f303 	mul.w	r3, r1, r3
 8003f40:	4413      	add	r3, r2
 8003f42:	335c      	adds	r3, #92	; 0x5c
 8003f44:	2200      	movs	r2, #0
 8003f46:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	691b      	ldr	r3, [r3, #16]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d110      	bne.n	8003f72 <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8003f50:	687a      	ldr	r2, [r7, #4]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	212c      	movs	r1, #44	; 0x2c
 8003f56:	fb01 f303 	mul.w	r3, r1, r3
 8003f5a:	4413      	add	r3, r2
 8003f5c:	3361      	adds	r3, #97	; 0x61
 8003f5e:	2203      	movs	r2, #3
 8003f60:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	b2d2      	uxtb	r2, r2
 8003f6a:	4611      	mov	r1, r2
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f002 ffcc 	bl	8006f0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	015a      	lsls	r2, r3, #5
 8003f76:	693b      	ldr	r3, [r7, #16]
 8003f78:	4413      	add	r3, r2
 8003f7a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003f7e:	461a      	mov	r2, r3
 8003f80:	2310      	movs	r3, #16
 8003f82:	6093      	str	r3, [r2, #8]
}
 8003f84:	bf00      	nop
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b088      	sub	sp, #32
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	460b      	mov	r3, r1
 8003f96:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f9e:	69fb      	ldr	r3, [r7, #28]
 8003fa0:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8003fa2:	78fb      	ldrb	r3, [r7, #3]
 8003fa4:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8003fa6:	697b      	ldr	r3, [r7, #20]
 8003fa8:	015a      	lsls	r2, r3, #5
 8003faa:	69bb      	ldr	r3, [r7, #24]
 8003fac:	4413      	add	r3, r2
 8003fae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fb2:	689b      	ldr	r3, [r3, #8]
 8003fb4:	f003 0304 	and.w	r3, r3, #4
 8003fb8:	2b04      	cmp	r3, #4
 8003fba:	d11a      	bne.n	8003ff2 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003fc8:	461a      	mov	r2, r3
 8003fca:	2304      	movs	r3, #4
 8003fcc:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	212c      	movs	r1, #44	; 0x2c
 8003fd4:	fb01 f303 	mul.w	r3, r1, r3
 8003fd8:	4413      	add	r3, r2
 8003fda:	3361      	adds	r3, #97	; 0x61
 8003fdc:	2206      	movs	r2, #6
 8003fde:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	697a      	ldr	r2, [r7, #20]
 8003fe6:	b2d2      	uxtb	r2, r2
 8003fe8:	4611      	mov	r1, r2
 8003fea:	4618      	mov	r0, r3
 8003fec:	f002 ff8d 	bl	8006f0a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8003ff0:	e331      	b.n	8004656 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	015a      	lsls	r2, r3, #5
 8003ff6:	69bb      	ldr	r3, [r7, #24]
 8003ff8:	4413      	add	r3, r2
 8003ffa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	f003 0320 	and.w	r3, r3, #32
 8004004:	2b20      	cmp	r3, #32
 8004006:	d12e      	bne.n	8004066 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	015a      	lsls	r2, r3, #5
 800400c:	69bb      	ldr	r3, [r7, #24]
 800400e:	4413      	add	r3, r2
 8004010:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004014:	461a      	mov	r2, r3
 8004016:	2320      	movs	r3, #32
 8004018:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 800401a:	687a      	ldr	r2, [r7, #4]
 800401c:	697b      	ldr	r3, [r7, #20]
 800401e:	212c      	movs	r1, #44	; 0x2c
 8004020:	fb01 f303 	mul.w	r3, r1, r3
 8004024:	4413      	add	r3, r2
 8004026:	333d      	adds	r3, #61	; 0x3d
 8004028:	781b      	ldrb	r3, [r3, #0]
 800402a:	2b01      	cmp	r3, #1
 800402c:	f040 8313 	bne.w	8004656 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8004030:	687a      	ldr	r2, [r7, #4]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	212c      	movs	r1, #44	; 0x2c
 8004036:	fb01 f303 	mul.w	r3, r1, r3
 800403a:	4413      	add	r3, r2
 800403c:	333d      	adds	r3, #61	; 0x3d
 800403e:	2200      	movs	r2, #0
 8004040:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	697b      	ldr	r3, [r7, #20]
 8004046:	212c      	movs	r1, #44	; 0x2c
 8004048:	fb01 f303 	mul.w	r3, r1, r3
 800404c:	4413      	add	r3, r2
 800404e:	3360      	adds	r3, #96	; 0x60
 8004050:	2202      	movs	r2, #2
 8004052:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	697a      	ldr	r2, [r7, #20]
 800405a:	b2d2      	uxtb	r2, r2
 800405c:	4611      	mov	r1, r2
 800405e:	4618      	mov	r0, r3
 8004060:	f002 ff53 	bl	8006f0a <USB_HC_Halt>
}
 8004064:	e2f7      	b.n	8004656 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8004066:	697b      	ldr	r3, [r7, #20]
 8004068:	015a      	lsls	r2, r3, #5
 800406a:	69bb      	ldr	r3, [r7, #24]
 800406c:	4413      	add	r3, r2
 800406e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004072:	689b      	ldr	r3, [r3, #8]
 8004074:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004078:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800407c:	d112      	bne.n	80040a4 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800407e:	697b      	ldr	r3, [r7, #20]
 8004080:	015a      	lsls	r2, r3, #5
 8004082:	69bb      	ldr	r3, [r7, #24]
 8004084:	4413      	add	r3, r2
 8004086:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800408a:	461a      	mov	r2, r3
 800408c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004090:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	697a      	ldr	r2, [r7, #20]
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	4611      	mov	r1, r2
 800409c:	4618      	mov	r0, r3
 800409e:	f002 ff34 	bl	8006f0a <USB_HC_Halt>
}
 80040a2:	e2d8      	b.n	8004656 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80040a4:	697b      	ldr	r3, [r7, #20]
 80040a6:	015a      	lsls	r2, r3, #5
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	4413      	add	r3, r2
 80040ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	f003 0301 	and.w	r3, r3, #1
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d140      	bne.n	800413c <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	212c      	movs	r1, #44	; 0x2c
 80040c0:	fb01 f303 	mul.w	r3, r1, r3
 80040c4:	4413      	add	r3, r2
 80040c6:	335c      	adds	r3, #92	; 0x5c
 80040c8:	2200      	movs	r2, #0
 80040ca:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	015a      	lsls	r2, r3, #5
 80040d0:	69bb      	ldr	r3, [r7, #24]
 80040d2:	4413      	add	r3, r2
 80040d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040de:	2b40      	cmp	r3, #64	; 0x40
 80040e0:	d111      	bne.n	8004106 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	212c      	movs	r1, #44	; 0x2c
 80040e8:	fb01 f303 	mul.w	r3, r1, r3
 80040ec:	4413      	add	r3, r2
 80040ee:	333d      	adds	r3, #61	; 0x3d
 80040f0:	2201      	movs	r2, #1
 80040f2:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 80040f4:	697b      	ldr	r3, [r7, #20]
 80040f6:	015a      	lsls	r2, r3, #5
 80040f8:	69bb      	ldr	r3, [r7, #24]
 80040fa:	4413      	add	r3, r2
 80040fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004100:	461a      	mov	r2, r3
 8004102:	2340      	movs	r3, #64	; 0x40
 8004104:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	015a      	lsls	r2, r3, #5
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	4413      	add	r3, r2
 800410e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004112:	461a      	mov	r2, r3
 8004114:	2301      	movs	r3, #1
 8004116:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8004118:	687a      	ldr	r2, [r7, #4]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	212c      	movs	r1, #44	; 0x2c
 800411e:	fb01 f303 	mul.w	r3, r1, r3
 8004122:	4413      	add	r3, r2
 8004124:	3361      	adds	r3, #97	; 0x61
 8004126:	2201      	movs	r2, #1
 8004128:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	b2d2      	uxtb	r2, r2
 8004132:	4611      	mov	r1, r2
 8004134:	4618      	mov	r0, r3
 8004136:	f002 fee8 	bl	8006f0a <USB_HC_Halt>
}
 800413a:	e28c      	b.n	8004656 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	015a      	lsls	r2, r3, #5
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	4413      	add	r3, r2
 8004144:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800414e:	2b40      	cmp	r3, #64	; 0x40
 8004150:	d12c      	bne.n	80041ac <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8004152:	687a      	ldr	r2, [r7, #4]
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	212c      	movs	r1, #44	; 0x2c
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	3361      	adds	r3, #97	; 0x61
 8004160:	2204      	movs	r2, #4
 8004162:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	212c      	movs	r1, #44	; 0x2c
 800416a:	fb01 f303 	mul.w	r3, r1, r3
 800416e:	4413      	add	r3, r2
 8004170:	333d      	adds	r3, #61	; 0x3d
 8004172:	2201      	movs	r2, #1
 8004174:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	212c      	movs	r1, #44	; 0x2c
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	4413      	add	r3, r2
 8004182:	335c      	adds	r3, #92	; 0x5c
 8004184:	2200      	movs	r2, #0
 8004186:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	697a      	ldr	r2, [r7, #20]
 800418e:	b2d2      	uxtb	r2, r2
 8004190:	4611      	mov	r1, r2
 8004192:	4618      	mov	r0, r3
 8004194:	f002 feb9 	bl	8006f0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	015a      	lsls	r2, r3, #5
 800419c:	69bb      	ldr	r3, [r7, #24]
 800419e:	4413      	add	r3, r2
 80041a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041a4:	461a      	mov	r2, r3
 80041a6:	2340      	movs	r3, #64	; 0x40
 80041a8:	6093      	str	r3, [r2, #8]
}
 80041aa:	e254      	b.n	8004656 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80041ac:	697b      	ldr	r3, [r7, #20]
 80041ae:	015a      	lsls	r2, r3, #5
 80041b0:	69bb      	ldr	r3, [r7, #24]
 80041b2:	4413      	add	r3, r2
 80041b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 0308 	and.w	r3, r3, #8
 80041be:	2b08      	cmp	r3, #8
 80041c0:	d11a      	bne.n	80041f8 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80041c2:	697b      	ldr	r3, [r7, #20]
 80041c4:	015a      	lsls	r2, r3, #5
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	4413      	add	r3, r2
 80041ca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80041ce:	461a      	mov	r2, r3
 80041d0:	2308      	movs	r3, #8
 80041d2:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	697b      	ldr	r3, [r7, #20]
 80041d8:	212c      	movs	r1, #44	; 0x2c
 80041da:	fb01 f303 	mul.w	r3, r1, r3
 80041de:	4413      	add	r3, r2
 80041e0:	3361      	adds	r3, #97	; 0x61
 80041e2:	2205      	movs	r2, #5
 80041e4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	697a      	ldr	r2, [r7, #20]
 80041ec:	b2d2      	uxtb	r2, r2
 80041ee:	4611      	mov	r1, r2
 80041f0:	4618      	mov	r0, r3
 80041f2:	f002 fe8a 	bl	8006f0a <USB_HC_Halt>
}
 80041f6:	e22e      	b.n	8004656 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	015a      	lsls	r2, r3, #5
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	4413      	add	r3, r2
 8004200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	f003 0310 	and.w	r3, r3, #16
 800420a:	2b10      	cmp	r3, #16
 800420c:	d140      	bne.n	8004290 <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 800420e:	687a      	ldr	r2, [r7, #4]
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	212c      	movs	r1, #44	; 0x2c
 8004214:	fb01 f303 	mul.w	r3, r1, r3
 8004218:	4413      	add	r3, r2
 800421a:	335c      	adds	r3, #92	; 0x5c
 800421c:	2200      	movs	r2, #0
 800421e:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	212c      	movs	r1, #44	; 0x2c
 8004226:	fb01 f303 	mul.w	r3, r1, r3
 800422a:	4413      	add	r3, r2
 800422c:	3361      	adds	r3, #97	; 0x61
 800422e:	2203      	movs	r2, #3
 8004230:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8004232:	687a      	ldr	r2, [r7, #4]
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	212c      	movs	r1, #44	; 0x2c
 8004238:	fb01 f303 	mul.w	r3, r1, r3
 800423c:	4413      	add	r3, r2
 800423e:	333d      	adds	r3, #61	; 0x3d
 8004240:	781b      	ldrb	r3, [r3, #0]
 8004242:	2b00      	cmp	r3, #0
 8004244:	d112      	bne.n	800426c <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	212c      	movs	r1, #44	; 0x2c
 800424c:	fb01 f303 	mul.w	r3, r1, r3
 8004250:	4413      	add	r3, r2
 8004252:	333c      	adds	r3, #60	; 0x3c
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	2b00      	cmp	r3, #0
 8004258:	d108      	bne.n	800426c <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 800425a:	687a      	ldr	r2, [r7, #4]
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	212c      	movs	r1, #44	; 0x2c
 8004260:	fb01 f303 	mul.w	r3, r1, r3
 8004264:	4413      	add	r3, r2
 8004266:	333d      	adds	r3, #61	; 0x3d
 8004268:	2201      	movs	r2, #1
 800426a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	b2d2      	uxtb	r2, r2
 8004274:	4611      	mov	r1, r2
 8004276:	4618      	mov	r0, r3
 8004278:	f002 fe47 	bl	8006f0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	015a      	lsls	r2, r3, #5
 8004280:	69bb      	ldr	r3, [r7, #24]
 8004282:	4413      	add	r3, r2
 8004284:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004288:	461a      	mov	r2, r3
 800428a:	2310      	movs	r3, #16
 800428c:	6093      	str	r3, [r2, #8]
}
 800428e:	e1e2      	b.n	8004656 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8004290:	697b      	ldr	r3, [r7, #20]
 8004292:	015a      	lsls	r2, r3, #5
 8004294:	69bb      	ldr	r3, [r7, #24]
 8004296:	4413      	add	r3, r2
 8004298:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800429c:	689b      	ldr	r3, [r3, #8]
 800429e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042a2:	2b80      	cmp	r3, #128	; 0x80
 80042a4:	d164      	bne.n	8004370 <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	691b      	ldr	r3, [r3, #16]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d111      	bne.n	80042d2 <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 80042ae:	687a      	ldr	r2, [r7, #4]
 80042b0:	697b      	ldr	r3, [r7, #20]
 80042b2:	212c      	movs	r1, #44	; 0x2c
 80042b4:	fb01 f303 	mul.w	r3, r1, r3
 80042b8:	4413      	add	r3, r2
 80042ba:	3361      	adds	r3, #97	; 0x61
 80042bc:	2206      	movs	r2, #6
 80042be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	697a      	ldr	r2, [r7, #20]
 80042c6:	b2d2      	uxtb	r2, r2
 80042c8:	4611      	mov	r1, r2
 80042ca:	4618      	mov	r0, r3
 80042cc:	f002 fe1d 	bl	8006f0a <USB_HC_Halt>
 80042d0:	e044      	b.n	800435c <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 80042d2:	687a      	ldr	r2, [r7, #4]
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	212c      	movs	r1, #44	; 0x2c
 80042d8:	fb01 f303 	mul.w	r3, r1, r3
 80042dc:	4413      	add	r3, r2
 80042de:	335c      	adds	r3, #92	; 0x5c
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	1c5a      	adds	r2, r3, #1
 80042e4:	6879      	ldr	r1, [r7, #4]
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	202c      	movs	r0, #44	; 0x2c
 80042ea:	fb00 f303 	mul.w	r3, r0, r3
 80042ee:	440b      	add	r3, r1
 80042f0:	335c      	adds	r3, #92	; 0x5c
 80042f2:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80042f4:	687a      	ldr	r2, [r7, #4]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	212c      	movs	r1, #44	; 0x2c
 80042fa:	fb01 f303 	mul.w	r3, r1, r3
 80042fe:	4413      	add	r3, r2
 8004300:	335c      	adds	r3, #92	; 0x5c
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d920      	bls.n	800434a <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8004308:	687a      	ldr	r2, [r7, #4]
 800430a:	697b      	ldr	r3, [r7, #20]
 800430c:	212c      	movs	r1, #44	; 0x2c
 800430e:	fb01 f303 	mul.w	r3, r1, r3
 8004312:	4413      	add	r3, r2
 8004314:	335c      	adds	r3, #92	; 0x5c
 8004316:	2200      	movs	r2, #0
 8004318:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	697b      	ldr	r3, [r7, #20]
 800431e:	212c      	movs	r1, #44	; 0x2c
 8004320:	fb01 f303 	mul.w	r3, r1, r3
 8004324:	4413      	add	r3, r2
 8004326:	3360      	adds	r3, #96	; 0x60
 8004328:	2204      	movs	r2, #4
 800432a:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	b2d9      	uxtb	r1, r3
 8004330:	687a      	ldr	r2, [r7, #4]
 8004332:	697b      	ldr	r3, [r7, #20]
 8004334:	202c      	movs	r0, #44	; 0x2c
 8004336:	fb00 f303 	mul.w	r3, r0, r3
 800433a:	4413      	add	r3, r2
 800433c:	3360      	adds	r3, #96	; 0x60
 800433e:	781b      	ldrb	r3, [r3, #0]
 8004340:	461a      	mov	r2, r3
 8004342:	6878      	ldr	r0, [r7, #4]
 8004344:	f004 f8ea 	bl	800851c <HAL_HCD_HC_NotifyURBChange_Callback>
 8004348:	e008      	b.n	800435c <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 800434a:	687a      	ldr	r2, [r7, #4]
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	212c      	movs	r1, #44	; 0x2c
 8004350:	fb01 f303 	mul.w	r3, r1, r3
 8004354:	4413      	add	r3, r2
 8004356:	3360      	adds	r3, #96	; 0x60
 8004358:	2202      	movs	r2, #2
 800435a:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	015a      	lsls	r2, r3, #5
 8004360:	69bb      	ldr	r3, [r7, #24]
 8004362:	4413      	add	r3, r2
 8004364:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004368:	461a      	mov	r2, r3
 800436a:	2380      	movs	r3, #128	; 0x80
 800436c:	6093      	str	r3, [r2, #8]
}
 800436e:	e172      	b.n	8004656 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8004370:	697b      	ldr	r3, [r7, #20]
 8004372:	015a      	lsls	r2, r3, #5
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	4413      	add	r3, r2
 8004378:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800437c:	689b      	ldr	r3, [r3, #8]
 800437e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004386:	d11b      	bne.n	80043c0 <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8004388:	687a      	ldr	r2, [r7, #4]
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	212c      	movs	r1, #44	; 0x2c
 800438e:	fb01 f303 	mul.w	r3, r1, r3
 8004392:	4413      	add	r3, r2
 8004394:	3361      	adds	r3, #97	; 0x61
 8004396:	2208      	movs	r2, #8
 8004398:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	b2d2      	uxtb	r2, r2
 80043a2:	4611      	mov	r1, r2
 80043a4:	4618      	mov	r0, r3
 80043a6:	f002 fdb0 	bl	8006f0a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80043aa:	697b      	ldr	r3, [r7, #20]
 80043ac:	015a      	lsls	r2, r3, #5
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	4413      	add	r3, r2
 80043b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043b6:	461a      	mov	r2, r3
 80043b8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043bc:	6093      	str	r3, [r2, #8]
}
 80043be:	e14a      	b.n	8004656 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80043c0:	697b      	ldr	r3, [r7, #20]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f003 0302 	and.w	r3, r3, #2
 80043d2:	2b02      	cmp	r3, #2
 80043d4:	f040 813f 	bne.w	8004656 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 80043d8:	687a      	ldr	r2, [r7, #4]
 80043da:	697b      	ldr	r3, [r7, #20]
 80043dc:	212c      	movs	r1, #44	; 0x2c
 80043de:	fb01 f303 	mul.w	r3, r1, r3
 80043e2:	4413      	add	r3, r2
 80043e4:	3361      	adds	r3, #97	; 0x61
 80043e6:	781b      	ldrb	r3, [r3, #0]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d17d      	bne.n	80044e8 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	697b      	ldr	r3, [r7, #20]
 80043f0:	212c      	movs	r1, #44	; 0x2c
 80043f2:	fb01 f303 	mul.w	r3, r1, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	3360      	adds	r3, #96	; 0x60
 80043fa:	2201      	movs	r2, #1
 80043fc:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 80043fe:	687a      	ldr	r2, [r7, #4]
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	212c      	movs	r1, #44	; 0x2c
 8004404:	fb01 f303 	mul.w	r3, r1, r3
 8004408:	4413      	add	r3, r2
 800440a:	333f      	adds	r3, #63	; 0x3f
 800440c:	781b      	ldrb	r3, [r3, #0]
 800440e:	2b02      	cmp	r3, #2
 8004410:	d00a      	beq.n	8004428 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8004412:	687a      	ldr	r2, [r7, #4]
 8004414:	697b      	ldr	r3, [r7, #20]
 8004416:	212c      	movs	r1, #44	; 0x2c
 8004418:	fb01 f303 	mul.w	r3, r1, r3
 800441c:	4413      	add	r3, r2
 800441e:	333f      	adds	r3, #63	; 0x3f
 8004420:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8004422:	2b03      	cmp	r3, #3
 8004424:	f040 8100 	bne.w	8004628 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	691b      	ldr	r3, [r3, #16]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d113      	bne.n	8004458 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	212c      	movs	r1, #44	; 0x2c
 8004436:	fb01 f303 	mul.w	r3, r1, r3
 800443a:	4413      	add	r3, r2
 800443c:	3355      	adds	r3, #85	; 0x55
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	f083 0301 	eor.w	r3, r3, #1
 8004444:	b2d8      	uxtb	r0, r3
 8004446:	687a      	ldr	r2, [r7, #4]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	212c      	movs	r1, #44	; 0x2c
 800444c:	fb01 f303 	mul.w	r3, r1, r3
 8004450:	4413      	add	r3, r2
 8004452:	3355      	adds	r3, #85	; 0x55
 8004454:	4602      	mov	r2, r0
 8004456:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	691b      	ldr	r3, [r3, #16]
 800445c:	2b01      	cmp	r3, #1
 800445e:	f040 80e3 	bne.w	8004628 <HCD_HC_OUT_IRQHandler+0x69c>
 8004462:	687a      	ldr	r2, [r7, #4]
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	212c      	movs	r1, #44	; 0x2c
 8004468:	fb01 f303 	mul.w	r3, r1, r3
 800446c:	4413      	add	r3, r2
 800446e:	334c      	adds	r3, #76	; 0x4c
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	2b00      	cmp	r3, #0
 8004474:	f000 80d8 	beq.w	8004628 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8004478:	687a      	ldr	r2, [r7, #4]
 800447a:	697b      	ldr	r3, [r7, #20]
 800447c:	212c      	movs	r1, #44	; 0x2c
 800447e:	fb01 f303 	mul.w	r3, r1, r3
 8004482:	4413      	add	r3, r2
 8004484:	334c      	adds	r3, #76	; 0x4c
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	6879      	ldr	r1, [r7, #4]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	202c      	movs	r0, #44	; 0x2c
 800448e:	fb00 f202 	mul.w	r2, r0, r2
 8004492:	440a      	add	r2, r1
 8004494:	3240      	adds	r2, #64	; 0x40
 8004496:	8812      	ldrh	r2, [r2, #0]
 8004498:	4413      	add	r3, r2
 800449a:	3b01      	subs	r3, #1
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	202c      	movs	r0, #44	; 0x2c
 80044a2:	fb00 f202 	mul.w	r2, r0, r2
 80044a6:	440a      	add	r2, r1
 80044a8:	3240      	adds	r2, #64	; 0x40
 80044aa:	8812      	ldrh	r2, [r2, #0]
 80044ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80044b0:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 80b5 	beq.w	8004628 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	212c      	movs	r1, #44	; 0x2c
 80044c4:	fb01 f303 	mul.w	r3, r1, r3
 80044c8:	4413      	add	r3, r2
 80044ca:	3355      	adds	r3, #85	; 0x55
 80044cc:	781b      	ldrb	r3, [r3, #0]
 80044ce:	f083 0301 	eor.w	r3, r3, #1
 80044d2:	b2d8      	uxtb	r0, r3
 80044d4:	687a      	ldr	r2, [r7, #4]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	212c      	movs	r1, #44	; 0x2c
 80044da:	fb01 f303 	mul.w	r3, r1, r3
 80044de:	4413      	add	r3, r2
 80044e0:	3355      	adds	r3, #85	; 0x55
 80044e2:	4602      	mov	r2, r0
 80044e4:	701a      	strb	r2, [r3, #0]
 80044e6:	e09f      	b.n	8004628 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80044e8:	687a      	ldr	r2, [r7, #4]
 80044ea:	697b      	ldr	r3, [r7, #20]
 80044ec:	212c      	movs	r1, #44	; 0x2c
 80044ee:	fb01 f303 	mul.w	r3, r1, r3
 80044f2:	4413      	add	r3, r2
 80044f4:	3361      	adds	r3, #97	; 0x61
 80044f6:	781b      	ldrb	r3, [r3, #0]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d109      	bne.n	8004510 <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80044fc:	687a      	ldr	r2, [r7, #4]
 80044fe:	697b      	ldr	r3, [r7, #20]
 8004500:	212c      	movs	r1, #44	; 0x2c
 8004502:	fb01 f303 	mul.w	r3, r1, r3
 8004506:	4413      	add	r3, r2
 8004508:	3360      	adds	r3, #96	; 0x60
 800450a:	2202      	movs	r2, #2
 800450c:	701a      	strb	r2, [r3, #0]
 800450e:	e08b      	b.n	8004628 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	212c      	movs	r1, #44	; 0x2c
 8004516:	fb01 f303 	mul.w	r3, r1, r3
 800451a:	4413      	add	r3, r2
 800451c:	3361      	adds	r3, #97	; 0x61
 800451e:	781b      	ldrb	r3, [r3, #0]
 8004520:	2b04      	cmp	r3, #4
 8004522:	d109      	bne.n	8004538 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8004524:	687a      	ldr	r2, [r7, #4]
 8004526:	697b      	ldr	r3, [r7, #20]
 8004528:	212c      	movs	r1, #44	; 0x2c
 800452a:	fb01 f303 	mul.w	r3, r1, r3
 800452e:	4413      	add	r3, r2
 8004530:	3360      	adds	r3, #96	; 0x60
 8004532:	2202      	movs	r2, #2
 8004534:	701a      	strb	r2, [r3, #0]
 8004536:	e077      	b.n	8004628 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	212c      	movs	r1, #44	; 0x2c
 800453e:	fb01 f303 	mul.w	r3, r1, r3
 8004542:	4413      	add	r3, r2
 8004544:	3361      	adds	r3, #97	; 0x61
 8004546:	781b      	ldrb	r3, [r3, #0]
 8004548:	2b05      	cmp	r3, #5
 800454a:	d109      	bne.n	8004560 <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	212c      	movs	r1, #44	; 0x2c
 8004552:	fb01 f303 	mul.w	r3, r1, r3
 8004556:	4413      	add	r3, r2
 8004558:	3360      	adds	r3, #96	; 0x60
 800455a:	2205      	movs	r2, #5
 800455c:	701a      	strb	r2, [r3, #0]
 800455e:	e063      	b.n	8004628 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004560:	687a      	ldr	r2, [r7, #4]
 8004562:	697b      	ldr	r3, [r7, #20]
 8004564:	212c      	movs	r1, #44	; 0x2c
 8004566:	fb01 f303 	mul.w	r3, r1, r3
 800456a:	4413      	add	r3, r2
 800456c:	3361      	adds	r3, #97	; 0x61
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	2b06      	cmp	r3, #6
 8004572:	d009      	beq.n	8004588 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8004574:	687a      	ldr	r2, [r7, #4]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	212c      	movs	r1, #44	; 0x2c
 800457a:	fb01 f303 	mul.w	r3, r1, r3
 800457e:	4413      	add	r3, r2
 8004580:	3361      	adds	r3, #97	; 0x61
 8004582:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8004584:	2b08      	cmp	r3, #8
 8004586:	d14f      	bne.n	8004628 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 8004588:	687a      	ldr	r2, [r7, #4]
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	212c      	movs	r1, #44	; 0x2c
 800458e:	fb01 f303 	mul.w	r3, r1, r3
 8004592:	4413      	add	r3, r2
 8004594:	335c      	adds	r3, #92	; 0x5c
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	1c5a      	adds	r2, r3, #1
 800459a:	6879      	ldr	r1, [r7, #4]
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	202c      	movs	r0, #44	; 0x2c
 80045a0:	fb00 f303 	mul.w	r3, r0, r3
 80045a4:	440b      	add	r3, r1
 80045a6:	335c      	adds	r3, #92	; 0x5c
 80045a8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	212c      	movs	r1, #44	; 0x2c
 80045b0:	fb01 f303 	mul.w	r3, r1, r3
 80045b4:	4413      	add	r3, r2
 80045b6:	335c      	adds	r3, #92	; 0x5c
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d912      	bls.n	80045e4 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80045be:	687a      	ldr	r2, [r7, #4]
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	212c      	movs	r1, #44	; 0x2c
 80045c4:	fb01 f303 	mul.w	r3, r1, r3
 80045c8:	4413      	add	r3, r2
 80045ca:	335c      	adds	r3, #92	; 0x5c
 80045cc:	2200      	movs	r2, #0
 80045ce:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 80045d0:	687a      	ldr	r2, [r7, #4]
 80045d2:	697b      	ldr	r3, [r7, #20]
 80045d4:	212c      	movs	r1, #44	; 0x2c
 80045d6:	fb01 f303 	mul.w	r3, r1, r3
 80045da:	4413      	add	r3, r2
 80045dc:	3360      	adds	r3, #96	; 0x60
 80045de:	2204      	movs	r2, #4
 80045e0:	701a      	strb	r2, [r3, #0]
 80045e2:	e021      	b.n	8004628 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	697b      	ldr	r3, [r7, #20]
 80045e8:	212c      	movs	r1, #44	; 0x2c
 80045ea:	fb01 f303 	mul.w	r3, r1, r3
 80045ee:	4413      	add	r3, r2
 80045f0:	3360      	adds	r3, #96	; 0x60
 80045f2:	2202      	movs	r2, #2
 80045f4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 80045f6:	697b      	ldr	r3, [r7, #20]
 80045f8:	015a      	lsls	r2, r3, #5
 80045fa:	69bb      	ldr	r3, [r7, #24]
 80045fc:	4413      	add	r3, r2
 80045fe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800460c:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004614:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	015a      	lsls	r2, r3, #5
 800461a:	69bb      	ldr	r3, [r7, #24]
 800461c:	4413      	add	r3, r2
 800461e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004622:	461a      	mov	r2, r3
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8004628:	697b      	ldr	r3, [r7, #20]
 800462a:	015a      	lsls	r2, r3, #5
 800462c:	69bb      	ldr	r3, [r7, #24]
 800462e:	4413      	add	r3, r2
 8004630:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004634:	461a      	mov	r2, r3
 8004636:	2302      	movs	r3, #2
 8004638:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	b2d9      	uxtb	r1, r3
 800463e:	687a      	ldr	r2, [r7, #4]
 8004640:	697b      	ldr	r3, [r7, #20]
 8004642:	202c      	movs	r0, #44	; 0x2c
 8004644:	fb00 f303 	mul.w	r3, r0, r3
 8004648:	4413      	add	r3, r2
 800464a:	3360      	adds	r3, #96	; 0x60
 800464c:	781b      	ldrb	r3, [r3, #0]
 800464e:	461a      	mov	r2, r3
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f003 ff63 	bl	800851c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8004656:	bf00      	nop
 8004658:	3720      	adds	r7, #32
 800465a:	46bd      	mov	sp, r7
 800465c:	bd80      	pop	{r7, pc}

0800465e <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800465e:	b580      	push	{r7, lr}
 8004660:	b08a      	sub	sp, #40	; 0x28
 8004662:	af00      	add	r7, sp, #0
 8004664:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 800466c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800466e:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	f003 030f 	and.w	r3, r3, #15
 800467e:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	0c5b      	lsrs	r3, r3, #17
 8004684:	f003 030f 	and.w	r3, r3, #15
 8004688:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 800468a:	69fb      	ldr	r3, [r7, #28]
 800468c:	091b      	lsrs	r3, r3, #4
 800468e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004692:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	2b02      	cmp	r3, #2
 8004698:	d004      	beq.n	80046a4 <HCD_RXQLVL_IRQHandler+0x46>
 800469a:	697b      	ldr	r3, [r7, #20]
 800469c:	2b05      	cmp	r3, #5
 800469e:	f000 80a9 	beq.w	80047f4 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80046a2:	e0aa      	b.n	80047fa <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f000 80a6 	beq.w	80047f8 <HCD_RXQLVL_IRQHandler+0x19a>
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	69bb      	ldr	r3, [r7, #24]
 80046b0:	212c      	movs	r1, #44	; 0x2c
 80046b2:	fb01 f303 	mul.w	r3, r1, r3
 80046b6:	4413      	add	r3, r2
 80046b8:	3344      	adds	r3, #68	; 0x44
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 809b 	beq.w	80047f8 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	69bb      	ldr	r3, [r7, #24]
 80046c6:	212c      	movs	r1, #44	; 0x2c
 80046c8:	fb01 f303 	mul.w	r3, r1, r3
 80046cc:	4413      	add	r3, r2
 80046ce:	3350      	adds	r3, #80	; 0x50
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	693b      	ldr	r3, [r7, #16]
 80046d4:	441a      	add	r2, r3
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	69bb      	ldr	r3, [r7, #24]
 80046da:	202c      	movs	r0, #44	; 0x2c
 80046dc:	fb00 f303 	mul.w	r3, r0, r3
 80046e0:	440b      	add	r3, r1
 80046e2:	334c      	adds	r3, #76	; 0x4c
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	429a      	cmp	r2, r3
 80046e8:	d87a      	bhi.n	80047e0 <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6818      	ldr	r0, [r3, #0]
 80046ee:	687a      	ldr	r2, [r7, #4]
 80046f0:	69bb      	ldr	r3, [r7, #24]
 80046f2:	212c      	movs	r1, #44	; 0x2c
 80046f4:	fb01 f303 	mul.w	r3, r1, r3
 80046f8:	4413      	add	r3, r2
 80046fa:	3344      	adds	r3, #68	; 0x44
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	693a      	ldr	r2, [r7, #16]
 8004700:	b292      	uxth	r2, r2
 8004702:	4619      	mov	r1, r3
 8004704:	f001 ff82 	bl	800660c <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8004708:	687a      	ldr	r2, [r7, #4]
 800470a:	69bb      	ldr	r3, [r7, #24]
 800470c:	212c      	movs	r1, #44	; 0x2c
 800470e:	fb01 f303 	mul.w	r3, r1, r3
 8004712:	4413      	add	r3, r2
 8004714:	3344      	adds	r3, #68	; 0x44
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	441a      	add	r2, r3
 800471c:	6879      	ldr	r1, [r7, #4]
 800471e:	69bb      	ldr	r3, [r7, #24]
 8004720:	202c      	movs	r0, #44	; 0x2c
 8004722:	fb00 f303 	mul.w	r3, r0, r3
 8004726:	440b      	add	r3, r1
 8004728:	3344      	adds	r3, #68	; 0x44
 800472a:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 800472c:	687a      	ldr	r2, [r7, #4]
 800472e:	69bb      	ldr	r3, [r7, #24]
 8004730:	212c      	movs	r1, #44	; 0x2c
 8004732:	fb01 f303 	mul.w	r3, r1, r3
 8004736:	4413      	add	r3, r2
 8004738:	3350      	adds	r3, #80	; 0x50
 800473a:	681a      	ldr	r2, [r3, #0]
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	441a      	add	r2, r3
 8004740:	6879      	ldr	r1, [r7, #4]
 8004742:	69bb      	ldr	r3, [r7, #24]
 8004744:	202c      	movs	r0, #44	; 0x2c
 8004746:	fb00 f303 	mul.w	r3, r0, r3
 800474a:	440b      	add	r3, r1
 800474c:	3350      	adds	r3, #80	; 0x50
 800474e:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8004750:	69bb      	ldr	r3, [r7, #24]
 8004752:	015a      	lsls	r2, r3, #5
 8004754:	6a3b      	ldr	r3, [r7, #32]
 8004756:	4413      	add	r3, r2
 8004758:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800475c:	691b      	ldr	r3, [r3, #16]
 800475e:	0cdb      	lsrs	r3, r3, #19
 8004760:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004764:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004766:	687a      	ldr	r2, [r7, #4]
 8004768:	69bb      	ldr	r3, [r7, #24]
 800476a:	212c      	movs	r1, #44	; 0x2c
 800476c:	fb01 f303 	mul.w	r3, r1, r3
 8004770:	4413      	add	r3, r2
 8004772:	3340      	adds	r3, #64	; 0x40
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	4293      	cmp	r3, r2
 800477c:	d13c      	bne.n	80047f8 <HCD_RXQLVL_IRQHandler+0x19a>
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	2b00      	cmp	r3, #0
 8004782:	d039      	beq.n	80047f8 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 8004784:	69bb      	ldr	r3, [r7, #24]
 8004786:	015a      	lsls	r2, r3, #5
 8004788:	6a3b      	ldr	r3, [r7, #32]
 800478a:	4413      	add	r3, r2
 800478c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800479a:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 800479c:	68bb      	ldr	r3, [r7, #8]
 800479e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80047a2:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80047a4:	69bb      	ldr	r3, [r7, #24]
 80047a6:	015a      	lsls	r2, r3, #5
 80047a8:	6a3b      	ldr	r3, [r7, #32]
 80047aa:	4413      	add	r3, r2
 80047ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80047b0:	461a      	mov	r2, r3
 80047b2:	68bb      	ldr	r3, [r7, #8]
 80047b4:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	212c      	movs	r1, #44	; 0x2c
 80047bc:	fb01 f303 	mul.w	r3, r1, r3
 80047c0:	4413      	add	r3, r2
 80047c2:	3354      	adds	r3, #84	; 0x54
 80047c4:	781b      	ldrb	r3, [r3, #0]
 80047c6:	f083 0301 	eor.w	r3, r3, #1
 80047ca:	b2d8      	uxtb	r0, r3
 80047cc:	687a      	ldr	r2, [r7, #4]
 80047ce:	69bb      	ldr	r3, [r7, #24]
 80047d0:	212c      	movs	r1, #44	; 0x2c
 80047d2:	fb01 f303 	mul.w	r3, r1, r3
 80047d6:	4413      	add	r3, r2
 80047d8:	3354      	adds	r3, #84	; 0x54
 80047da:	4602      	mov	r2, r0
 80047dc:	701a      	strb	r2, [r3, #0]
      break;
 80047de:	e00b      	b.n	80047f8 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80047e0:	687a      	ldr	r2, [r7, #4]
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	212c      	movs	r1, #44	; 0x2c
 80047e6:	fb01 f303 	mul.w	r3, r1, r3
 80047ea:	4413      	add	r3, r2
 80047ec:	3360      	adds	r3, #96	; 0x60
 80047ee:	2204      	movs	r2, #4
 80047f0:	701a      	strb	r2, [r3, #0]
      break;
 80047f2:	e001      	b.n	80047f8 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80047f4:	bf00      	nop
 80047f6:	e000      	b.n	80047fa <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80047f8:	bf00      	nop
  }
}
 80047fa:	bf00      	nop
 80047fc:	3728      	adds	r7, #40	; 0x28
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}

08004802 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8004802:	b580      	push	{r7, lr}
 8004804:	b086      	sub	sp, #24
 8004806:	af00      	add	r7, sp, #0
 8004808:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004810:	697b      	ldr	r3, [r7, #20]
 8004812:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800482e:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	f003 0302 	and.w	r3, r3, #2
 8004836:	2b02      	cmp	r3, #2
 8004838:	d10b      	bne.n	8004852 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	f003 0301 	and.w	r3, r3, #1
 8004840:	2b01      	cmp	r3, #1
 8004842:	d102      	bne.n	800484a <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004844:	6878      	ldr	r0, [r7, #4]
 8004846:	f003 fe4d 	bl	80084e4 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800484a:	68bb      	ldr	r3, [r7, #8]
 800484c:	f043 0302 	orr.w	r3, r3, #2
 8004850:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	f003 0308 	and.w	r3, r3, #8
 8004858:	2b08      	cmp	r3, #8
 800485a:	d132      	bne.n	80048c2 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	f043 0308 	orr.w	r3, r3, #8
 8004862:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	f003 0304 	and.w	r3, r3, #4
 800486a:	2b04      	cmp	r3, #4
 800486c:	d126      	bne.n	80048bc <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	699b      	ldr	r3, [r3, #24]
 8004872:	2b02      	cmp	r3, #2
 8004874:	d113      	bne.n	800489e <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 800487c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004880:	d106      	bne.n	8004890 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	2102      	movs	r1, #2
 8004888:	4618      	mov	r0, r3
 800488a:	f002 f82d 	bl	80068e8 <USB_InitFSLSPClkSel>
 800488e:	e011      	b.n	80048b4 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	2101      	movs	r1, #1
 8004896:	4618      	mov	r0, r3
 8004898:	f002 f826 	bl	80068e8 <USB_InitFSLSPClkSel>
 800489c:	e00a      	b.n	80048b4 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	2b01      	cmp	r3, #1
 80048a4:	d106      	bne.n	80048b4 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80048a6:	693b      	ldr	r3, [r7, #16]
 80048a8:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80048ac:	461a      	mov	r2, r3
 80048ae:	f64e 2360 	movw	r3, #60000	; 0xea60
 80048b2:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f003 fe3f 	bl	8008538 <HAL_HCD_PortEnabled_Callback>
 80048ba:	e002      	b.n	80048c2 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f003 fe49 	bl	8008554 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f003 0320 	and.w	r3, r3, #32
 80048c8:	2b20      	cmp	r3, #32
 80048ca:	d103      	bne.n	80048d4 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	f043 0320 	orr.w	r3, r3, #32
 80048d2:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80048da:	461a      	mov	r2, r3
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	6013      	str	r3, [r2, #0]
}
 80048e0:	bf00      	nop
 80048e2:	3718      	adds	r7, #24
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d101      	bne.n	80048fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048f6:	2301      	movs	r3, #1
 80048f8:	e12b      	b.n	8004b52 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004900:	b2db      	uxtb	r3, r3
 8004902:	2b00      	cmp	r3, #0
 8004904:	d106      	bne.n	8004914 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2200      	movs	r2, #0
 800490a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800490e:	6878      	ldr	r0, [r7, #4]
 8004910:	f7fd fa52 	bl	8001db8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	2224      	movs	r2, #36	; 0x24
 8004918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f022 0201 	bic.w	r2, r2, #1
 800492a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	681a      	ldr	r2, [r3, #0]
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800493a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	681a      	ldr	r2, [r3, #0]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800494a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800494c:	f001 fa20 	bl	8005d90 <HAL_RCC_GetPCLK1Freq>
 8004950:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	685b      	ldr	r3, [r3, #4]
 8004956:	4a81      	ldr	r2, [pc, #516]	; (8004b5c <HAL_I2C_Init+0x274>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d807      	bhi.n	800496c <HAL_I2C_Init+0x84>
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4a80      	ldr	r2, [pc, #512]	; (8004b60 <HAL_I2C_Init+0x278>)
 8004960:	4293      	cmp	r3, r2
 8004962:	bf94      	ite	ls
 8004964:	2301      	movls	r3, #1
 8004966:	2300      	movhi	r3, #0
 8004968:	b2db      	uxtb	r3, r3
 800496a:	e006      	b.n	800497a <HAL_I2C_Init+0x92>
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a7d      	ldr	r2, [pc, #500]	; (8004b64 <HAL_I2C_Init+0x27c>)
 8004970:	4293      	cmp	r3, r2
 8004972:	bf94      	ite	ls
 8004974:	2301      	movls	r3, #1
 8004976:	2300      	movhi	r3, #0
 8004978:	b2db      	uxtb	r3, r3
 800497a:	2b00      	cmp	r3, #0
 800497c:	d001      	beq.n	8004982 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e0e7      	b.n	8004b52 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	4a78      	ldr	r2, [pc, #480]	; (8004b68 <HAL_I2C_Init+0x280>)
 8004986:	fba2 2303 	umull	r2, r3, r2, r3
 800498a:	0c9b      	lsrs	r3, r3, #18
 800498c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685b      	ldr	r3, [r3, #4]
 8004994:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	430a      	orrs	r2, r1
 80049a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	6a1b      	ldr	r3, [r3, #32]
 80049a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a6a      	ldr	r2, [pc, #424]	; (8004b5c <HAL_I2C_Init+0x274>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d802      	bhi.n	80049bc <HAL_I2C_Init+0xd4>
 80049b6:	68bb      	ldr	r3, [r7, #8]
 80049b8:	3301      	adds	r3, #1
 80049ba:	e009      	b.n	80049d0 <HAL_I2C_Init+0xe8>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049c2:	fb02 f303 	mul.w	r3, r2, r3
 80049c6:	4a69      	ldr	r2, [pc, #420]	; (8004b6c <HAL_I2C_Init+0x284>)
 80049c8:	fba2 2303 	umull	r2, r3, r2, r3
 80049cc:	099b      	lsrs	r3, r3, #6
 80049ce:	3301      	adds	r3, #1
 80049d0:	687a      	ldr	r2, [r7, #4]
 80049d2:	6812      	ldr	r2, [r2, #0]
 80049d4:	430b      	orrs	r3, r1
 80049d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	69db      	ldr	r3, [r3, #28]
 80049de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	685b      	ldr	r3, [r3, #4]
 80049ea:	495c      	ldr	r1, [pc, #368]	; (8004b5c <HAL_I2C_Init+0x274>)
 80049ec:	428b      	cmp	r3, r1
 80049ee:	d819      	bhi.n	8004a24 <HAL_I2C_Init+0x13c>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1e59      	subs	r1, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	005b      	lsls	r3, r3, #1
 80049fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80049fe:	1c59      	adds	r1, r3, #1
 8004a00:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a04:	400b      	ands	r3, r1
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <HAL_I2C_Init+0x138>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	1e59      	subs	r1, r3, #1
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	005b      	lsls	r3, r3, #1
 8004a14:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a18:	3301      	adds	r3, #1
 8004a1a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a1e:	e051      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004a20:	2304      	movs	r3, #4
 8004a22:	e04f      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d111      	bne.n	8004a50 <HAL_I2C_Init+0x168>
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	1e58      	subs	r0, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6859      	ldr	r1, [r3, #4]
 8004a34:	460b      	mov	r3, r1
 8004a36:	005b      	lsls	r3, r3, #1
 8004a38:	440b      	add	r3, r1
 8004a3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a3e:	3301      	adds	r3, #1
 8004a40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	bf0c      	ite	eq
 8004a48:	2301      	moveq	r3, #1
 8004a4a:	2300      	movne	r3, #0
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	e012      	b.n	8004a76 <HAL_I2C_Init+0x18e>
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	1e58      	subs	r0, r3, #1
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6859      	ldr	r1, [r3, #4]
 8004a58:	460b      	mov	r3, r1
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	440b      	add	r3, r1
 8004a5e:	0099      	lsls	r1, r3, #2
 8004a60:	440b      	add	r3, r1
 8004a62:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a66:	3301      	adds	r3, #1
 8004a68:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	bf0c      	ite	eq
 8004a70:	2301      	moveq	r3, #1
 8004a72:	2300      	movne	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d001      	beq.n	8004a7e <HAL_I2C_Init+0x196>
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e022      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10e      	bne.n	8004aa4 <HAL_I2C_Init+0x1bc>
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	1e58      	subs	r0, r3, #1
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6859      	ldr	r1, [r3, #4]
 8004a8e:	460b      	mov	r3, r1
 8004a90:	005b      	lsls	r3, r3, #1
 8004a92:	440b      	add	r3, r1
 8004a94:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a98:	3301      	adds	r3, #1
 8004a9a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aa2:	e00f      	b.n	8004ac4 <HAL_I2C_Init+0x1dc>
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	1e58      	subs	r0, r3, #1
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6859      	ldr	r1, [r3, #4]
 8004aac:	460b      	mov	r3, r1
 8004aae:	009b      	lsls	r3, r3, #2
 8004ab0:	440b      	add	r3, r1
 8004ab2:	0099      	lsls	r1, r3, #2
 8004ab4:	440b      	add	r3, r1
 8004ab6:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aba:	3301      	adds	r3, #1
 8004abc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ac4:	6879      	ldr	r1, [r7, #4]
 8004ac6:	6809      	ldr	r1, [r1, #0]
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	69da      	ldr	r2, [r3, #28]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6a1b      	ldr	r3, [r3, #32]
 8004ade:	431a      	orrs	r2, r3
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	430a      	orrs	r2, r1
 8004ae6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004af2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6911      	ldr	r1, [r2, #16]
 8004afa:	687a      	ldr	r2, [r7, #4]
 8004afc:	68d2      	ldr	r2, [r2, #12]
 8004afe:	4311      	orrs	r1, r2
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	6812      	ldr	r2, [r2, #0]
 8004b04:	430b      	orrs	r3, r1
 8004b06:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	68db      	ldr	r3, [r3, #12]
 8004b0e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	695a      	ldr	r2, [r3, #20]
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	699b      	ldr	r3, [r3, #24]
 8004b1a:	431a      	orrs	r2, r3
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	430a      	orrs	r2, r1
 8004b22:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0201 	orr.w	r2, r2, #1
 8004b32:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b50:	2300      	movs	r3, #0
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	3710      	adds	r7, #16
 8004b56:	46bd      	mov	sp, r7
 8004b58:	bd80      	pop	{r7, pc}
 8004b5a:	bf00      	nop
 8004b5c:	000186a0 	.word	0x000186a0
 8004b60:	001e847f 	.word	0x001e847f
 8004b64:	003d08ff 	.word	0x003d08ff
 8004b68:	431bde83 	.word	0x431bde83
 8004b6c:	10624dd3 	.word	0x10624dd3

08004b70 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b088      	sub	sp, #32
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d101      	bne.n	8004b82 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004b7e:	2301      	movs	r3, #1
 8004b80:	e128      	b.n	8004dd4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d109      	bne.n	8004ba2 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2200      	movs	r2, #0
 8004b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	4a90      	ldr	r2, [pc, #576]	; (8004ddc <HAL_I2S_Init+0x26c>)
 8004b9a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	f7fd f953 	bl	8001e48 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2202      	movs	r2, #2
 8004ba6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69db      	ldr	r3, [r3, #28]
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004bb8:	f023 030f 	bic.w	r3, r3, #15
 8004bbc:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2202      	movs	r2, #2
 8004bc4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	2b02      	cmp	r3, #2
 8004bcc:	d060      	beq.n	8004c90 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	68db      	ldr	r3, [r3, #12]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d102      	bne.n	8004bdc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8004bd6:	2310      	movs	r3, #16
 8004bd8:	617b      	str	r3, [r7, #20]
 8004bda:	e001      	b.n	8004be0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8004bdc:	2320      	movs	r3, #32
 8004bde:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	2b20      	cmp	r3, #32
 8004be6:	d802      	bhi.n	8004bee <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	005b      	lsls	r3, r3, #1
 8004bec:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8004bee:	2001      	movs	r0, #1
 8004bf0:	f001 f9c4 	bl	8005f7c <HAL_RCCEx_GetPeriphCLKFreq>
 8004bf4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bfe:	d125      	bne.n	8004c4c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d010      	beq.n	8004c2a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c08:	697b      	ldr	r3, [r7, #20]
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	68fa      	ldr	r2, [r7, #12]
 8004c0e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c12:	4613      	mov	r3, r2
 8004c14:	009b      	lsls	r3, r3, #2
 8004c16:	4413      	add	r3, r2
 8004c18:	005b      	lsls	r3, r3, #1
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	695b      	ldr	r3, [r3, #20]
 8004c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c24:	3305      	adds	r3, #5
 8004c26:	613b      	str	r3, [r7, #16]
 8004c28:	e01f      	b.n	8004c6a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	00db      	lsls	r3, r3, #3
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	695b      	ldr	r3, [r3, #20]
 8004c42:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c46:	3305      	adds	r3, #5
 8004c48:	613b      	str	r3, [r7, #16]
 8004c4a:	e00e      	b.n	8004c6a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004c4c:	68fa      	ldr	r2, [r7, #12]
 8004c4e:	697b      	ldr	r3, [r7, #20]
 8004c50:	fbb2 f2f3 	udiv	r2, r2, r3
 8004c54:	4613      	mov	r3, r2
 8004c56:	009b      	lsls	r3, r3, #2
 8004c58:	4413      	add	r3, r2
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	461a      	mov	r2, r3
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	695b      	ldr	r3, [r3, #20]
 8004c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c66:	3305      	adds	r3, #5
 8004c68:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8004c6a:	693b      	ldr	r3, [r7, #16]
 8004c6c:	4a5c      	ldr	r2, [pc, #368]	; (8004de0 <HAL_I2S_Init+0x270>)
 8004c6e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c72:	08db      	lsrs	r3, r3, #3
 8004c74:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	f003 0301 	and.w	r3, r3, #1
 8004c7c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004c7e:	693a      	ldr	r2, [r7, #16]
 8004c80:	69bb      	ldr	r3, [r7, #24]
 8004c82:	1ad3      	subs	r3, r2, r3
 8004c84:	085b      	lsrs	r3, r3, #1
 8004c86:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	021b      	lsls	r3, r3, #8
 8004c8c:	61bb      	str	r3, [r7, #24]
 8004c8e:	e003      	b.n	8004c98 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004c90:	2302      	movs	r3, #2
 8004c92:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004c94:	2300      	movs	r3, #0
 8004c96:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004c98:	69fb      	ldr	r3, [r7, #28]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d902      	bls.n	8004ca4 <HAL_I2S_Init+0x134>
 8004c9e:	69fb      	ldr	r3, [r7, #28]
 8004ca0:	2bff      	cmp	r3, #255	; 0xff
 8004ca2:	d907      	bls.n	8004cb4 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ca8:	f043 0210 	orr.w	r2, r3, #16
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8004cb0:	2301      	movs	r3, #1
 8004cb2:	e08f      	b.n	8004dd4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	691a      	ldr	r2, [r3, #16]
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	ea42 0103 	orr.w	r1, r2, r3
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69fa      	ldr	r2, [r7, #28]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	69db      	ldr	r3, [r3, #28]
 8004cce:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004cd2:	f023 030f 	bic.w	r3, r3, #15
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6851      	ldr	r1, [r2, #4]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	6892      	ldr	r2, [r2, #8]
 8004cde:	4311      	orrs	r1, r2
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	68d2      	ldr	r2, [r2, #12]
 8004ce4:	4311      	orrs	r1, r2
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6992      	ldr	r2, [r2, #24]
 8004cea:	430a      	orrs	r2, r1
 8004cec:	431a      	orrs	r2, r3
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004cf6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	2b01      	cmp	r3, #1
 8004cfe:	d161      	bne.n	8004dc4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a38      	ldr	r2, [pc, #224]	; (8004de4 <HAL_I2S_Init+0x274>)
 8004d04:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a37      	ldr	r2, [pc, #220]	; (8004de8 <HAL_I2S_Init+0x278>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d101      	bne.n	8004d14 <HAL_I2S_Init+0x1a4>
 8004d10:	4b36      	ldr	r3, [pc, #216]	; (8004dec <HAL_I2S_Init+0x27c>)
 8004d12:	e001      	b.n	8004d18 <HAL_I2S_Init+0x1a8>
 8004d14:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d18:	69db      	ldr	r3, [r3, #28]
 8004d1a:	687a      	ldr	r2, [r7, #4]
 8004d1c:	6812      	ldr	r2, [r2, #0]
 8004d1e:	4932      	ldr	r1, [pc, #200]	; (8004de8 <HAL_I2S_Init+0x278>)
 8004d20:	428a      	cmp	r2, r1
 8004d22:	d101      	bne.n	8004d28 <HAL_I2S_Init+0x1b8>
 8004d24:	4a31      	ldr	r2, [pc, #196]	; (8004dec <HAL_I2S_Init+0x27c>)
 8004d26:	e001      	b.n	8004d2c <HAL_I2S_Init+0x1bc>
 8004d28:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8004d2c:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8004d30:	f023 030f 	bic.w	r3, r3, #15
 8004d34:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a2b      	ldr	r2, [pc, #172]	; (8004de8 <HAL_I2S_Init+0x278>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d101      	bne.n	8004d44 <HAL_I2S_Init+0x1d4>
 8004d40:	4b2a      	ldr	r3, [pc, #168]	; (8004dec <HAL_I2S_Init+0x27c>)
 8004d42:	e001      	b.n	8004d48 <HAL_I2S_Init+0x1d8>
 8004d44:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d48:	2202      	movs	r2, #2
 8004d4a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	4a25      	ldr	r2, [pc, #148]	; (8004de8 <HAL_I2S_Init+0x278>)
 8004d52:	4293      	cmp	r3, r2
 8004d54:	d101      	bne.n	8004d5a <HAL_I2S_Init+0x1ea>
 8004d56:	4b25      	ldr	r3, [pc, #148]	; (8004dec <HAL_I2S_Init+0x27c>)
 8004d58:	e001      	b.n	8004d5e <HAL_I2S_Init+0x1ee>
 8004d5a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004d5e:	69db      	ldr	r3, [r3, #28]
 8004d60:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d6a:	d003      	beq.n	8004d74 <HAL_I2S_Init+0x204>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d103      	bne.n	8004d7c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004d74:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d78:	613b      	str	r3, [r7, #16]
 8004d7a:	e001      	b.n	8004d80 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004d80:	693b      	ldr	r3, [r7, #16]
 8004d82:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	689b      	ldr	r3, [r3, #8]
 8004d88:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68db      	ldr	r3, [r3, #12]
 8004d92:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d94:	4313      	orrs	r3, r2
 8004d96:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	699b      	ldr	r3, [r3, #24]
 8004d9c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004d9e:	4313      	orrs	r3, r2
 8004da0:	b29a      	uxth	r2, r3
 8004da2:	897b      	ldrh	r3, [r7, #10]
 8004da4:	4313      	orrs	r3, r2
 8004da6:	b29b      	uxth	r3, r3
 8004da8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004dac:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	4a0d      	ldr	r2, [pc, #52]	; (8004de8 <HAL_I2S_Init+0x278>)
 8004db4:	4293      	cmp	r3, r2
 8004db6:	d101      	bne.n	8004dbc <HAL_I2S_Init+0x24c>
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <HAL_I2S_Init+0x27c>)
 8004dba:	e001      	b.n	8004dc0 <HAL_I2S_Init+0x250>
 8004dbc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8004dc0:	897a      	ldrh	r2, [r7, #10]
 8004dc2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2201      	movs	r2, #1
 8004dce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3720      	adds	r7, #32
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}
 8004ddc:	08004ee7 	.word	0x08004ee7
 8004de0:	cccccccd 	.word	0xcccccccd
 8004de4:	08004ffd 	.word	0x08004ffd
 8004de8:	40003800 	.word	0x40003800
 8004dec:	40003400 	.word	0x40003400

08004df0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b083      	sub	sp, #12
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8004df8:	bf00      	nop
 8004dfa:	370c      	adds	r7, #12
 8004dfc:	46bd      	mov	sp, r7
 8004dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e02:	4770      	bx	lr

08004e04 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004e04:	b480      	push	{r7}
 8004e06:	b083      	sub	sp, #12
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004e0c:	bf00      	nop
 8004e0e:	370c      	adds	r7, #12
 8004e10:	46bd      	mov	sp, r7
 8004e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e16:	4770      	bx	lr

08004e18 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8004e18:	b480      	push	{r7}
 8004e1a:	b083      	sub	sp, #12
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004e20:	bf00      	nop
 8004e22:	370c      	adds	r7, #12
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b082      	sub	sp, #8
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e38:	881a      	ldrh	r2, [r3, #0]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e44:	1c9a      	adds	r2, r3, #2
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d10e      	bne.n	8004e80 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685a      	ldr	r2, [r3, #4]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004e70:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8004e7a:	6878      	ldr	r0, [r7, #4]
 8004e7c:	f7ff ffb8 	bl	8004df0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004e80:	bf00      	nop
 8004e82:	3708      	adds	r7, #8
 8004e84:	46bd      	mov	sp, r7
 8004e86:	bd80      	pop	{r7, pc}

08004e88 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
 8004e8e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e9a:	b292      	uxth	r2, r2
 8004e9c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ea2:	1c9a      	adds	r2, r3, #2
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004eba:	b29b      	uxth	r3, r3
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d10e      	bne.n	8004ede <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685a      	ldr	r2, [r3, #4]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004ece:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8004ed8:	6878      	ldr	r0, [r7, #4]
 8004eda:	f7ff ff93 	bl	8004e04 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004ede:	bf00      	nop
 8004ee0:	3708      	adds	r7, #8
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b086      	sub	sp, #24
 8004eea:	af00      	add	r7, sp, #0
 8004eec:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b04      	cmp	r3, #4
 8004f00:	d13a      	bne.n	8004f78 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f003 0301 	and.w	r3, r3, #1
 8004f08:	2b01      	cmp	r3, #1
 8004f0a:	d109      	bne.n	8004f20 <I2S_IRQHandler+0x3a>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f16:	2b40      	cmp	r3, #64	; 0x40
 8004f18:	d102      	bne.n	8004f20 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff ffb4 	bl	8004e88 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f26:	2b40      	cmp	r3, #64	; 0x40
 8004f28:	d126      	bne.n	8004f78 <I2S_IRQHandler+0x92>
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	685b      	ldr	r3, [r3, #4]
 8004f30:	f003 0320 	and.w	r3, r3, #32
 8004f34:	2b20      	cmp	r3, #32
 8004f36:	d11f      	bne.n	8004f78 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004f46:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004f48:	2300      	movs	r3, #0
 8004f4a:	613b      	str	r3, [r7, #16]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	68db      	ldr	r3, [r3, #12]
 8004f52:	613b      	str	r3, [r7, #16]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	689b      	ldr	r3, [r3, #8]
 8004f5a:	613b      	str	r3, [r7, #16]
 8004f5c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2201      	movs	r2, #1
 8004f62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f6a:	f043 0202 	orr.w	r2, r3, #2
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004f72:	6878      	ldr	r0, [r7, #4]
 8004f74:	f7ff ff50 	bl	8004e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f7e:	b2db      	uxtb	r3, r3
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d136      	bne.n	8004ff2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004f84:	697b      	ldr	r3, [r7, #20]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	2b02      	cmp	r3, #2
 8004f8c:	d109      	bne.n	8004fa2 <I2S_IRQHandler+0xbc>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f98:	2b80      	cmp	r3, #128	; 0x80
 8004f9a:	d102      	bne.n	8004fa2 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f7ff ff45 	bl	8004e2c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f003 0308 	and.w	r3, r3, #8
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d122      	bne.n	8004ff2 <I2S_IRQHandler+0x10c>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	685b      	ldr	r3, [r3, #4]
 8004fb2:	f003 0320 	and.w	r3, r3, #32
 8004fb6:	2b20      	cmp	r3, #32
 8004fb8:	d11b      	bne.n	8004ff2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	685a      	ldr	r2, [r3, #4]
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004fc8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004fca:	2300      	movs	r3, #0
 8004fcc:	60fb      	str	r3, [r7, #12]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	689b      	ldr	r3, [r3, #8]
 8004fd4:	60fb      	str	r3, [r7, #12]
 8004fd6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2201      	movs	r2, #1
 8004fdc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fe4:	f043 0204 	orr.w	r2, r3, #4
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004fec:	6878      	ldr	r0, [r7, #4]
 8004fee:	f7ff ff13 	bl	8004e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004ff2:	bf00      	nop
 8004ff4:	3718      	adds	r7, #24
 8004ff6:	46bd      	mov	sp, r7
 8004ff8:	bd80      	pop	{r7, pc}
	...

08004ffc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b088      	sub	sp, #32
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	689b      	ldr	r3, [r3, #8]
 800500a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4a92      	ldr	r2, [pc, #584]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d101      	bne.n	800501a <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8005016:	4b92      	ldr	r3, [pc, #584]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005018:	e001      	b.n	800501e <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800501a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800501e:	689b      	ldr	r3, [r3, #8]
 8005020:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	685b      	ldr	r3, [r3, #4]
 8005028:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	4a8b      	ldr	r2, [pc, #556]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d101      	bne.n	8005038 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8005034:	4b8a      	ldr	r3, [pc, #552]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005036:	e001      	b.n	800503c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8005038:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005048:	d004      	beq.n	8005054 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	685b      	ldr	r3, [r3, #4]
 800504e:	2b00      	cmp	r3, #0
 8005050:	f040 8099 	bne.w	8005186 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8005054:	69fb      	ldr	r3, [r7, #28]
 8005056:	f003 0302 	and.w	r3, r3, #2
 800505a:	2b02      	cmp	r3, #2
 800505c:	d107      	bne.n	800506e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005064:	2b00      	cmp	r3, #0
 8005066:	d002      	beq.n	800506e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f925 	bl	80052b8 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	f003 0301 	and.w	r3, r3, #1
 8005074:	2b01      	cmp	r3, #1
 8005076:	d107      	bne.n	8005088 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800507e:	2b00      	cmp	r3, #0
 8005080:	d002      	beq.n	8005088 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f9c8 	bl	8005418 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005088:	69bb      	ldr	r3, [r7, #24]
 800508a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800508e:	2b40      	cmp	r3, #64	; 0x40
 8005090:	d13a      	bne.n	8005108 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8005092:	693b      	ldr	r3, [r7, #16]
 8005094:	f003 0320 	and.w	r3, r3, #32
 8005098:	2b00      	cmp	r3, #0
 800509a:	d035      	beq.n	8005108 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	4a6e      	ldr	r2, [pc, #440]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050a2:	4293      	cmp	r3, r2
 80050a4:	d101      	bne.n	80050aa <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 80050a6:	4b6e      	ldr	r3, [pc, #440]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050a8:	e001      	b.n	80050ae <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 80050aa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	4969      	ldr	r1, [pc, #420]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80050b6:	428b      	cmp	r3, r1
 80050b8:	d101      	bne.n	80050be <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80050ba:	4b69      	ldr	r3, [pc, #420]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80050bc:	e001      	b.n	80050c2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80050be:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80050c2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80050c6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685a      	ldr	r2, [r3, #4]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80050d6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80050d8:	2300      	movs	r3, #0
 80050da:	60fb      	str	r3, [r7, #12]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	60fb      	str	r3, [r7, #12]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	689b      	ldr	r3, [r3, #8]
 80050ea:	60fb      	str	r3, [r7, #12]
 80050ec:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050fa:	f043 0202 	orr.w	r2, r3, #2
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7ff fe88 	bl	8004e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005108:	69fb      	ldr	r3, [r7, #28]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	2b08      	cmp	r3, #8
 8005110:	f040 80c3 	bne.w	800529a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8005114:	697b      	ldr	r3, [r7, #20]
 8005116:	f003 0320 	and.w	r3, r3, #32
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 80bd 	beq.w	800529a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	685a      	ldr	r2, [r3, #4]
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800512e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a49      	ldr	r2, [pc, #292]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d101      	bne.n	800513e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800513a:	4b49      	ldr	r3, [pc, #292]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800513c:	e001      	b.n	8005142 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800513e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005142:	685a      	ldr	r2, [r3, #4]
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	4944      	ldr	r1, [pc, #272]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800514a:	428b      	cmp	r3, r1
 800514c:	d101      	bne.n	8005152 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800514e:	4b44      	ldr	r3, [pc, #272]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005150:	e001      	b.n	8005156 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8005152:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005156:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800515a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800515c:	2300      	movs	r3, #0
 800515e:	60bb      	str	r3, [r7, #8]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	689b      	ldr	r3, [r3, #8]
 8005166:	60bb      	str	r3, [r7, #8]
 8005168:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	2201      	movs	r2, #1
 800516e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005176:	f043 0204 	orr.w	r2, r3, #4
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff fe4a 	bl	8004e18 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8005184:	e089      	b.n	800529a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b02      	cmp	r3, #2
 800518e:	d107      	bne.n	80051a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005196:	2b00      	cmp	r3, #0
 8005198:	d002      	beq.n	80051a0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800519a:	6878      	ldr	r0, [r7, #4]
 800519c:	f000 f8be 	bl	800531c <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b01      	cmp	r3, #1
 80051a8:	d107      	bne.n	80051ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 80051b4:	6878      	ldr	r0, [r7, #4]
 80051b6:	f000 f8fd 	bl	80053b4 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051c0:	2b40      	cmp	r3, #64	; 0x40
 80051c2:	d12f      	bne.n	8005224 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80051c4:	697b      	ldr	r3, [r7, #20]
 80051c6:	f003 0320 	and.w	r3, r3, #32
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d02a      	beq.n	8005224 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	685a      	ldr	r2, [r3, #4]
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80051dc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a1e      	ldr	r2, [pc, #120]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051e4:	4293      	cmp	r3, r2
 80051e6:	d101      	bne.n	80051ec <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80051e8:	4b1d      	ldr	r3, [pc, #116]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051ea:	e001      	b.n	80051f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80051ec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80051f0:	685a      	ldr	r2, [r3, #4]
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4919      	ldr	r1, [pc, #100]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80051f8:	428b      	cmp	r3, r1
 80051fa:	d101      	bne.n	8005200 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80051fc:	4b18      	ldr	r3, [pc, #96]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80051fe:	e001      	b.n	8005204 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8005200:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005204:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005208:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2201      	movs	r2, #1
 800520e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005216:	f043 0202 	orr.w	r2, r3, #2
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800521e:	6878      	ldr	r0, [r7, #4]
 8005220:	f7ff fdfa 	bl	8004e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8005224:	69bb      	ldr	r3, [r7, #24]
 8005226:	f003 0308 	and.w	r3, r3, #8
 800522a:	2b08      	cmp	r3, #8
 800522c:	d136      	bne.n	800529c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f003 0320 	and.w	r3, r3, #32
 8005234:	2b00      	cmp	r3, #0
 8005236:	d031      	beq.n	800529c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	4a07      	ldr	r2, [pc, #28]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d101      	bne.n	8005246 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8005242:	4b07      	ldr	r3, [pc, #28]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005244:	e001      	b.n	800524a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8005246:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	4902      	ldr	r1, [pc, #8]	; (800525c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8005252:	428b      	cmp	r3, r1
 8005254:	d106      	bne.n	8005264 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8005256:	4b02      	ldr	r3, [pc, #8]	; (8005260 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8005258:	e006      	b.n	8005268 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800525a:	bf00      	nop
 800525c:	40003800 	.word	0x40003800
 8005260:	40003400 	.word	0x40003400
 8005264:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005268:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800526c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	685a      	ldr	r2, [r3, #4]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800527c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	2201      	movs	r2, #1
 8005282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800528a:	f043 0204 	orr.w	r2, r3, #4
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7ff fdc0 	bl	8004e18 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005298:	e000      	b.n	800529c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800529a:	bf00      	nop
}
 800529c:	bf00      	nop
 800529e:	3720      	adds	r7, #32
 80052a0:	46bd      	mov	sp, r7
 80052a2:	bd80      	pop	{r7, pc}

080052a4 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80052a4:	b480      	push	{r7}
 80052a6:	b083      	sub	sp, #12
 80052a8:	af00      	add	r7, sp, #0
 80052aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80052ac:	bf00      	nop
 80052ae:	370c      	adds	r7, #12
 80052b0:	46bd      	mov	sp, r7
 80052b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b6:	4770      	bx	lr

080052b8 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b082      	sub	sp, #8
 80052bc:	af00      	add	r7, sp, #0
 80052be:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052c4:	1c99      	adds	r1, r3, #2
 80052c6:	687a      	ldr	r2, [r7, #4]
 80052c8:	6251      	str	r1, [r2, #36]	; 0x24
 80052ca:	881a      	ldrh	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	3b01      	subs	r3, #1
 80052da:	b29a      	uxth	r2, r3
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d113      	bne.n	8005312 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	685a      	ldr	r2, [r3, #4]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80052f8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80052fe:	b29b      	uxth	r3, r3
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f7ff ffc9 	bl	80052a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005328:	1c99      	adds	r1, r3, #2
 800532a:	687a      	ldr	r2, [r7, #4]
 800532c:	6251      	str	r1, [r2, #36]	; 0x24
 800532e:	8819      	ldrh	r1, [r3, #0]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	4a1d      	ldr	r2, [pc, #116]	; (80053ac <I2SEx_TxISR_I2SExt+0x90>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d101      	bne.n	800533e <I2SEx_TxISR_I2SExt+0x22>
 800533a:	4b1d      	ldr	r3, [pc, #116]	; (80053b0 <I2SEx_TxISR_I2SExt+0x94>)
 800533c:	e001      	b.n	8005342 <I2SEx_TxISR_I2SExt+0x26>
 800533e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005342:	460a      	mov	r2, r1
 8005344:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534a:	b29b      	uxth	r3, r3
 800534c:	3b01      	subs	r3, #1
 800534e:	b29a      	uxth	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005358:	b29b      	uxth	r3, r3
 800535a:	2b00      	cmp	r3, #0
 800535c:	d121      	bne.n	80053a2 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	4a12      	ldr	r2, [pc, #72]	; (80053ac <I2SEx_TxISR_I2SExt+0x90>)
 8005364:	4293      	cmp	r3, r2
 8005366:	d101      	bne.n	800536c <I2SEx_TxISR_I2SExt+0x50>
 8005368:	4b11      	ldr	r3, [pc, #68]	; (80053b0 <I2SEx_TxISR_I2SExt+0x94>)
 800536a:	e001      	b.n	8005370 <I2SEx_TxISR_I2SExt+0x54>
 800536c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	490d      	ldr	r1, [pc, #52]	; (80053ac <I2SEx_TxISR_I2SExt+0x90>)
 8005378:	428b      	cmp	r3, r1
 800537a:	d101      	bne.n	8005380 <I2SEx_TxISR_I2SExt+0x64>
 800537c:	4b0c      	ldr	r3, [pc, #48]	; (80053b0 <I2SEx_TxISR_I2SExt+0x94>)
 800537e:	e001      	b.n	8005384 <I2SEx_TxISR_I2SExt+0x68>
 8005380:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005384:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8005388:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800538e:	b29b      	uxth	r3, r3
 8005390:	2b00      	cmp	r3, #0
 8005392:	d106      	bne.n	80053a2 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	2201      	movs	r2, #1
 8005398:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800539c:	6878      	ldr	r0, [r7, #4]
 800539e:	f7ff ff81 	bl	80052a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80053a2:	bf00      	nop
 80053a4:	3708      	adds	r7, #8
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
 80053aa:	bf00      	nop
 80053ac:	40003800 	.word	0x40003800
 80053b0:	40003400 	.word	0x40003400

080053b4 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b082      	sub	sp, #8
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	68d8      	ldr	r0, [r3, #12]
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053c6:	1c99      	adds	r1, r3, #2
 80053c8:	687a      	ldr	r2, [r7, #4]
 80053ca:	62d1      	str	r1, [r2, #44]	; 0x2c
 80053cc:	b282      	uxth	r2, r0
 80053ce:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053d4:	b29b      	uxth	r3, r3
 80053d6:	3b01      	subs	r3, #1
 80053d8:	b29a      	uxth	r2, r3
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80053e2:	b29b      	uxth	r3, r3
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d113      	bne.n	8005410 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80053f6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053fc:	b29b      	uxth	r3, r3
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d106      	bne.n	8005410 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	2201      	movs	r2, #1
 8005406:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f7ff ff4a 	bl	80052a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8005410:	bf00      	nop
 8005412:	3708      	adds	r7, #8
 8005414:	46bd      	mov	sp, r7
 8005416:	bd80      	pop	{r7, pc}

08005418 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8005418:	b580      	push	{r7, lr}
 800541a:	b082      	sub	sp, #8
 800541c:	af00      	add	r7, sp, #0
 800541e:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	4a20      	ldr	r2, [pc, #128]	; (80054a8 <I2SEx_RxISR_I2SExt+0x90>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d101      	bne.n	800542e <I2SEx_RxISR_I2SExt+0x16>
 800542a:	4b20      	ldr	r3, [pc, #128]	; (80054ac <I2SEx_RxISR_I2SExt+0x94>)
 800542c:	e001      	b.n	8005432 <I2SEx_RxISR_I2SExt+0x1a>
 800542e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005432:	68d8      	ldr	r0, [r3, #12]
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	1c99      	adds	r1, r3, #2
 800543a:	687a      	ldr	r2, [r7, #4]
 800543c:	62d1      	str	r1, [r2, #44]	; 0x2c
 800543e:	b282      	uxth	r2, r0
 8005440:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005446:	b29b      	uxth	r3, r3
 8005448:	3b01      	subs	r3, #1
 800544a:	b29a      	uxth	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8005454:	b29b      	uxth	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d121      	bne.n	800549e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4a12      	ldr	r2, [pc, #72]	; (80054a8 <I2SEx_RxISR_I2SExt+0x90>)
 8005460:	4293      	cmp	r3, r2
 8005462:	d101      	bne.n	8005468 <I2SEx_RxISR_I2SExt+0x50>
 8005464:	4b11      	ldr	r3, [pc, #68]	; (80054ac <I2SEx_RxISR_I2SExt+0x94>)
 8005466:	e001      	b.n	800546c <I2SEx_RxISR_I2SExt+0x54>
 8005468:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800546c:	685a      	ldr	r2, [r3, #4]
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	490d      	ldr	r1, [pc, #52]	; (80054a8 <I2SEx_RxISR_I2SExt+0x90>)
 8005474:	428b      	cmp	r3, r1
 8005476:	d101      	bne.n	800547c <I2SEx_RxISR_I2SExt+0x64>
 8005478:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <I2SEx_RxISR_I2SExt+0x94>)
 800547a:	e001      	b.n	8005480 <I2SEx_RxISR_I2SExt+0x68>
 800547c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8005480:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8005484:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548a:	b29b      	uxth	r3, r3
 800548c:	2b00      	cmp	r3, #0
 800548e:	d106      	bne.n	800549e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8005498:	6878      	ldr	r0, [r7, #4]
 800549a:	f7ff ff03 	bl	80052a4 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800549e:	bf00      	nop
 80054a0:	3708      	adds	r7, #8
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	40003800 	.word	0x40003800
 80054ac:	40003400 	.word	0x40003400

080054b0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b086      	sub	sp, #24
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d101      	bne.n	80054c2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e267      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	f003 0301 	and.w	r3, r3, #1
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d075      	beq.n	80055ba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054ce:	4b88      	ldr	r3, [pc, #544]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 80054d0:	689b      	ldr	r3, [r3, #8]
 80054d2:	f003 030c 	and.w	r3, r3, #12
 80054d6:	2b04      	cmp	r3, #4
 80054d8:	d00c      	beq.n	80054f4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054da:	4b85      	ldr	r3, [pc, #532]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 80054dc:	689b      	ldr	r3, [r3, #8]
 80054de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80054e2:	2b08      	cmp	r3, #8
 80054e4:	d112      	bne.n	800550c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80054e6:	4b82      	ldr	r3, [pc, #520]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 80054e8:	685b      	ldr	r3, [r3, #4]
 80054ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054f2:	d10b      	bne.n	800550c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054f4:	4b7e      	ldr	r3, [pc, #504]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d05b      	beq.n	80055b8 <HAL_RCC_OscConfig+0x108>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	685b      	ldr	r3, [r3, #4]
 8005504:	2b00      	cmp	r3, #0
 8005506:	d157      	bne.n	80055b8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	e242      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005514:	d106      	bne.n	8005524 <HAL_RCC_OscConfig+0x74>
 8005516:	4b76      	ldr	r3, [pc, #472]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	4a75      	ldr	r2, [pc, #468]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 800551c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005520:	6013      	str	r3, [r2, #0]
 8005522:	e01d      	b.n	8005560 <HAL_RCC_OscConfig+0xb0>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	685b      	ldr	r3, [r3, #4]
 8005528:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800552c:	d10c      	bne.n	8005548 <HAL_RCC_OscConfig+0x98>
 800552e:	4b70      	ldr	r3, [pc, #448]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4a6f      	ldr	r2, [pc, #444]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005534:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005538:	6013      	str	r3, [r2, #0]
 800553a:	4b6d      	ldr	r3, [pc, #436]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4a6c      	ldr	r2, [pc, #432]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005540:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005544:	6013      	str	r3, [r2, #0]
 8005546:	e00b      	b.n	8005560 <HAL_RCC_OscConfig+0xb0>
 8005548:	4b69      	ldr	r3, [pc, #420]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	4a68      	ldr	r2, [pc, #416]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 800554e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005552:	6013      	str	r3, [r2, #0]
 8005554:	4b66      	ldr	r3, [pc, #408]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	4a65      	ldr	r2, [pc, #404]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 800555a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800555e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	685b      	ldr	r3, [r3, #4]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d013      	beq.n	8005590 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005568:	f7fc fef4 	bl	8002354 <HAL_GetTick>
 800556c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800556e:	e008      	b.n	8005582 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005570:	f7fc fef0 	bl	8002354 <HAL_GetTick>
 8005574:	4602      	mov	r2, r0
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	1ad3      	subs	r3, r2, r3
 800557a:	2b64      	cmp	r3, #100	; 0x64
 800557c:	d901      	bls.n	8005582 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800557e:	2303      	movs	r3, #3
 8005580:	e207      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005582:	4b5b      	ldr	r3, [pc, #364]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800558a:	2b00      	cmp	r3, #0
 800558c:	d0f0      	beq.n	8005570 <HAL_RCC_OscConfig+0xc0>
 800558e:	e014      	b.n	80055ba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005590:	f7fc fee0 	bl	8002354 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005598:	f7fc fedc 	bl	8002354 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b64      	cmp	r3, #100	; 0x64
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e1f3      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80055aa:	4b51      	ldr	r3, [pc, #324]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0xe8>
 80055b6:	e000      	b.n	80055ba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055b8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 0302 	and.w	r3, r3, #2
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d063      	beq.n	800568e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055c6:	4b4a      	ldr	r3, [pc, #296]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 80055c8:	689b      	ldr	r3, [r3, #8]
 80055ca:	f003 030c 	and.w	r3, r3, #12
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d00b      	beq.n	80055ea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055d2:	4b47      	ldr	r3, [pc, #284]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 80055d4:	689b      	ldr	r3, [r3, #8]
 80055d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80055da:	2b08      	cmp	r3, #8
 80055dc:	d11c      	bne.n	8005618 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80055de:	4b44      	ldr	r3, [pc, #272]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d116      	bne.n	8005618 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80055ea:	4b41      	ldr	r3, [pc, #260]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	f003 0302 	and.w	r3, r3, #2
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d005      	beq.n	8005602 <HAL_RCC_OscConfig+0x152>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	2b01      	cmp	r3, #1
 80055fc:	d001      	beq.n	8005602 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80055fe:	2301      	movs	r3, #1
 8005600:	e1c7      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005602:	4b3b      	ldr	r3, [pc, #236]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	691b      	ldr	r3, [r3, #16]
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	4937      	ldr	r1, [pc, #220]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005612:	4313      	orrs	r3, r2
 8005614:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005616:	e03a      	b.n	800568e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	2b00      	cmp	r3, #0
 800561e:	d020      	beq.n	8005662 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005620:	4b34      	ldr	r3, [pc, #208]	; (80056f4 <HAL_RCC_OscConfig+0x244>)
 8005622:	2201      	movs	r2, #1
 8005624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005626:	f7fc fe95 	bl	8002354 <HAL_GetTick>
 800562a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800562c:	e008      	b.n	8005640 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800562e:	f7fc fe91 	bl	8002354 <HAL_GetTick>
 8005632:	4602      	mov	r2, r0
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	1ad3      	subs	r3, r2, r3
 8005638:	2b02      	cmp	r3, #2
 800563a:	d901      	bls.n	8005640 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800563c:	2303      	movs	r3, #3
 800563e:	e1a8      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005640:	4b2b      	ldr	r3, [pc, #172]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f003 0302 	and.w	r3, r3, #2
 8005648:	2b00      	cmp	r3, #0
 800564a:	d0f0      	beq.n	800562e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800564c:	4b28      	ldr	r3, [pc, #160]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	691b      	ldr	r3, [r3, #16]
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	4925      	ldr	r1, [pc, #148]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 800565c:	4313      	orrs	r3, r2
 800565e:	600b      	str	r3, [r1, #0]
 8005660:	e015      	b.n	800568e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005662:	4b24      	ldr	r3, [pc, #144]	; (80056f4 <HAL_RCC_OscConfig+0x244>)
 8005664:	2200      	movs	r2, #0
 8005666:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005668:	f7fc fe74 	bl	8002354 <HAL_GetTick>
 800566c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800566e:	e008      	b.n	8005682 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005670:	f7fc fe70 	bl	8002354 <HAL_GetTick>
 8005674:	4602      	mov	r2, r0
 8005676:	693b      	ldr	r3, [r7, #16]
 8005678:	1ad3      	subs	r3, r2, r3
 800567a:	2b02      	cmp	r3, #2
 800567c:	d901      	bls.n	8005682 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e187      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005682:	4b1b      	ldr	r3, [pc, #108]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f003 0302 	and.w	r3, r3, #2
 800568a:	2b00      	cmp	r3, #0
 800568c:	d1f0      	bne.n	8005670 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f003 0308 	and.w	r3, r3, #8
 8005696:	2b00      	cmp	r3, #0
 8005698:	d036      	beq.n	8005708 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d016      	beq.n	80056d0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056a2:	4b15      	ldr	r3, [pc, #84]	; (80056f8 <HAL_RCC_OscConfig+0x248>)
 80056a4:	2201      	movs	r2, #1
 80056a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056a8:	f7fc fe54 	bl	8002354 <HAL_GetTick>
 80056ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056ae:	e008      	b.n	80056c2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056b0:	f7fc fe50 	bl	8002354 <HAL_GetTick>
 80056b4:	4602      	mov	r2, r0
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	2b02      	cmp	r3, #2
 80056bc:	d901      	bls.n	80056c2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80056be:	2303      	movs	r3, #3
 80056c0:	e167      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80056c2:	4b0b      	ldr	r3, [pc, #44]	; (80056f0 <HAL_RCC_OscConfig+0x240>)
 80056c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056c6:	f003 0302 	and.w	r3, r3, #2
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d0f0      	beq.n	80056b0 <HAL_RCC_OscConfig+0x200>
 80056ce:	e01b      	b.n	8005708 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80056d0:	4b09      	ldr	r3, [pc, #36]	; (80056f8 <HAL_RCC_OscConfig+0x248>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d6:	f7fc fe3d 	bl	8002354 <HAL_GetTick>
 80056da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056dc:	e00e      	b.n	80056fc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80056de:	f7fc fe39 	bl	8002354 <HAL_GetTick>
 80056e2:	4602      	mov	r2, r0
 80056e4:	693b      	ldr	r3, [r7, #16]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2b02      	cmp	r3, #2
 80056ea:	d907      	bls.n	80056fc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80056ec:	2303      	movs	r3, #3
 80056ee:	e150      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
 80056f0:	40023800 	.word	0x40023800
 80056f4:	42470000 	.word	0x42470000
 80056f8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80056fc:	4b88      	ldr	r3, [pc, #544]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 80056fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005700:	f003 0302 	and.w	r3, r3, #2
 8005704:	2b00      	cmp	r3, #0
 8005706:	d1ea      	bne.n	80056de <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	f003 0304 	and.w	r3, r3, #4
 8005710:	2b00      	cmp	r3, #0
 8005712:	f000 8097 	beq.w	8005844 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005716:	2300      	movs	r3, #0
 8005718:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800571a:	4b81      	ldr	r3, [pc, #516]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 800571c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800571e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005722:	2b00      	cmp	r3, #0
 8005724:	d10f      	bne.n	8005746 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005726:	2300      	movs	r3, #0
 8005728:	60bb      	str	r3, [r7, #8]
 800572a:	4b7d      	ldr	r3, [pc, #500]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 800572c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800572e:	4a7c      	ldr	r2, [pc, #496]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 8005730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005734:	6413      	str	r3, [r2, #64]	; 0x40
 8005736:	4b7a      	ldr	r3, [pc, #488]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 8005738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800573a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800573e:	60bb      	str	r3, [r7, #8]
 8005740:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005742:	2301      	movs	r3, #1
 8005744:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005746:	4b77      	ldr	r3, [pc, #476]	; (8005924 <HAL_RCC_OscConfig+0x474>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800574e:	2b00      	cmp	r3, #0
 8005750:	d118      	bne.n	8005784 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005752:	4b74      	ldr	r3, [pc, #464]	; (8005924 <HAL_RCC_OscConfig+0x474>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	4a73      	ldr	r2, [pc, #460]	; (8005924 <HAL_RCC_OscConfig+0x474>)
 8005758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800575c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800575e:	f7fc fdf9 	bl	8002354 <HAL_GetTick>
 8005762:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005764:	e008      	b.n	8005778 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005766:	f7fc fdf5 	bl	8002354 <HAL_GetTick>
 800576a:	4602      	mov	r2, r0
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	1ad3      	subs	r3, r2, r3
 8005770:	2b02      	cmp	r3, #2
 8005772:	d901      	bls.n	8005778 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e10c      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005778:	4b6a      	ldr	r3, [pc, #424]	; (8005924 <HAL_RCC_OscConfig+0x474>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005780:	2b00      	cmp	r3, #0
 8005782:	d0f0      	beq.n	8005766 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	689b      	ldr	r3, [r3, #8]
 8005788:	2b01      	cmp	r3, #1
 800578a:	d106      	bne.n	800579a <HAL_RCC_OscConfig+0x2ea>
 800578c:	4b64      	ldr	r3, [pc, #400]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 800578e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005790:	4a63      	ldr	r2, [pc, #396]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 8005792:	f043 0301 	orr.w	r3, r3, #1
 8005796:	6713      	str	r3, [r2, #112]	; 0x70
 8005798:	e01c      	b.n	80057d4 <HAL_RCC_OscConfig+0x324>
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	689b      	ldr	r3, [r3, #8]
 800579e:	2b05      	cmp	r3, #5
 80057a0:	d10c      	bne.n	80057bc <HAL_RCC_OscConfig+0x30c>
 80057a2:	4b5f      	ldr	r3, [pc, #380]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 80057a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057a6:	4a5e      	ldr	r2, [pc, #376]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 80057a8:	f043 0304 	orr.w	r3, r3, #4
 80057ac:	6713      	str	r3, [r2, #112]	; 0x70
 80057ae:	4b5c      	ldr	r3, [pc, #368]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 80057b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057b2:	4a5b      	ldr	r2, [pc, #364]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 80057b4:	f043 0301 	orr.w	r3, r3, #1
 80057b8:	6713      	str	r3, [r2, #112]	; 0x70
 80057ba:	e00b      	b.n	80057d4 <HAL_RCC_OscConfig+0x324>
 80057bc:	4b58      	ldr	r3, [pc, #352]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 80057be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057c0:	4a57      	ldr	r2, [pc, #348]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 80057c2:	f023 0301 	bic.w	r3, r3, #1
 80057c6:	6713      	str	r3, [r2, #112]	; 0x70
 80057c8:	4b55      	ldr	r3, [pc, #340]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 80057ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057cc:	4a54      	ldr	r2, [pc, #336]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 80057ce:	f023 0304 	bic.w	r3, r3, #4
 80057d2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	689b      	ldr	r3, [r3, #8]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d015      	beq.n	8005808 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057dc:	f7fc fdba 	bl	8002354 <HAL_GetTick>
 80057e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e2:	e00a      	b.n	80057fa <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80057e4:	f7fc fdb6 	bl	8002354 <HAL_GetTick>
 80057e8:	4602      	mov	r2, r0
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d901      	bls.n	80057fa <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80057f6:	2303      	movs	r3, #3
 80057f8:	e0cb      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057fa:	4b49      	ldr	r3, [pc, #292]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 80057fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80057fe:	f003 0302 	and.w	r3, r3, #2
 8005802:	2b00      	cmp	r3, #0
 8005804:	d0ee      	beq.n	80057e4 <HAL_RCC_OscConfig+0x334>
 8005806:	e014      	b.n	8005832 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005808:	f7fc fda4 	bl	8002354 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800580e:	e00a      	b.n	8005826 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005810:	f7fc fda0 	bl	8002354 <HAL_GetTick>
 8005814:	4602      	mov	r2, r0
 8005816:	693b      	ldr	r3, [r7, #16]
 8005818:	1ad3      	subs	r3, r2, r3
 800581a:	f241 3288 	movw	r2, #5000	; 0x1388
 800581e:	4293      	cmp	r3, r2
 8005820:	d901      	bls.n	8005826 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005822:	2303      	movs	r3, #3
 8005824:	e0b5      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005826:	4b3e      	ldr	r3, [pc, #248]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 8005828:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800582a:	f003 0302 	and.w	r3, r3, #2
 800582e:	2b00      	cmp	r3, #0
 8005830:	d1ee      	bne.n	8005810 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005832:	7dfb      	ldrb	r3, [r7, #23]
 8005834:	2b01      	cmp	r3, #1
 8005836:	d105      	bne.n	8005844 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005838:	4b39      	ldr	r3, [pc, #228]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 800583a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800583c:	4a38      	ldr	r2, [pc, #224]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 800583e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005842:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	699b      	ldr	r3, [r3, #24]
 8005848:	2b00      	cmp	r3, #0
 800584a:	f000 80a1 	beq.w	8005990 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800584e:	4b34      	ldr	r3, [pc, #208]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	f003 030c 	and.w	r3, r3, #12
 8005856:	2b08      	cmp	r3, #8
 8005858:	d05c      	beq.n	8005914 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	2b02      	cmp	r3, #2
 8005860:	d141      	bne.n	80058e6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005862:	4b31      	ldr	r3, [pc, #196]	; (8005928 <HAL_RCC_OscConfig+0x478>)
 8005864:	2200      	movs	r2, #0
 8005866:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005868:	f7fc fd74 	bl	8002354 <HAL_GetTick>
 800586c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800586e:	e008      	b.n	8005882 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005870:	f7fc fd70 	bl	8002354 <HAL_GetTick>
 8005874:	4602      	mov	r2, r0
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	1ad3      	subs	r3, r2, r3
 800587a:	2b02      	cmp	r3, #2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e087      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005882:	4b27      	ldr	r3, [pc, #156]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1f0      	bne.n	8005870 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	69da      	ldr	r2, [r3, #28]
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	431a      	orrs	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589c:	019b      	lsls	r3, r3, #6
 800589e:	431a      	orrs	r2, r3
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	085b      	lsrs	r3, r3, #1
 80058a6:	3b01      	subs	r3, #1
 80058a8:	041b      	lsls	r3, r3, #16
 80058aa:	431a      	orrs	r2, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058b0:	061b      	lsls	r3, r3, #24
 80058b2:	491b      	ldr	r1, [pc, #108]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 80058b4:	4313      	orrs	r3, r2
 80058b6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058b8:	4b1b      	ldr	r3, [pc, #108]	; (8005928 <HAL_RCC_OscConfig+0x478>)
 80058ba:	2201      	movs	r2, #1
 80058bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058be:	f7fc fd49 	bl	8002354 <HAL_GetTick>
 80058c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058c4:	e008      	b.n	80058d8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058c6:	f7fc fd45 	bl	8002354 <HAL_GetTick>
 80058ca:	4602      	mov	r2, r0
 80058cc:	693b      	ldr	r3, [r7, #16]
 80058ce:	1ad3      	subs	r3, r2, r3
 80058d0:	2b02      	cmp	r3, #2
 80058d2:	d901      	bls.n	80058d8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80058d4:	2303      	movs	r3, #3
 80058d6:	e05c      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80058d8:	4b11      	ldr	r3, [pc, #68]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d0f0      	beq.n	80058c6 <HAL_RCC_OscConfig+0x416>
 80058e4:	e054      	b.n	8005990 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058e6:	4b10      	ldr	r3, [pc, #64]	; (8005928 <HAL_RCC_OscConfig+0x478>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80058ec:	f7fc fd32 	bl	8002354 <HAL_GetTick>
 80058f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80058f2:	e008      	b.n	8005906 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80058f4:	f7fc fd2e 	bl	8002354 <HAL_GetTick>
 80058f8:	4602      	mov	r2, r0
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	1ad3      	subs	r3, r2, r3
 80058fe:	2b02      	cmp	r3, #2
 8005900:	d901      	bls.n	8005906 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005902:	2303      	movs	r3, #3
 8005904:	e045      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005906:	4b06      	ldr	r3, [pc, #24]	; (8005920 <HAL_RCC_OscConfig+0x470>)
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d1f0      	bne.n	80058f4 <HAL_RCC_OscConfig+0x444>
 8005912:	e03d      	b.n	8005990 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	2b01      	cmp	r3, #1
 800591a:	d107      	bne.n	800592c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800591c:	2301      	movs	r3, #1
 800591e:	e038      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
 8005920:	40023800 	.word	0x40023800
 8005924:	40007000 	.word	0x40007000
 8005928:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800592c:	4b1b      	ldr	r3, [pc, #108]	; (800599c <HAL_RCC_OscConfig+0x4ec>)
 800592e:	685b      	ldr	r3, [r3, #4]
 8005930:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d028      	beq.n	800598c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005944:	429a      	cmp	r2, r3
 8005946:	d121      	bne.n	800598c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005952:	429a      	cmp	r2, r3
 8005954:	d11a      	bne.n	800598c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005956:	68fa      	ldr	r2, [r7, #12]
 8005958:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800595c:	4013      	ands	r3, r2
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005962:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005964:	4293      	cmp	r3, r2
 8005966:	d111      	bne.n	800598c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005972:	085b      	lsrs	r3, r3, #1
 8005974:	3b01      	subs	r3, #1
 8005976:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005978:	429a      	cmp	r2, r3
 800597a:	d107      	bne.n	800598c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005986:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005988:	429a      	cmp	r2, r3
 800598a:	d001      	beq.n	8005990 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e000      	b.n	8005992 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005990:	2300      	movs	r3, #0
}
 8005992:	4618      	mov	r0, r3
 8005994:	3718      	adds	r7, #24
 8005996:	46bd      	mov	sp, r7
 8005998:	bd80      	pop	{r7, pc}
 800599a:	bf00      	nop
 800599c:	40023800 	.word	0x40023800

080059a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b084      	sub	sp, #16
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d101      	bne.n	80059b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80059b0:	2301      	movs	r3, #1
 80059b2:	e0cc      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80059b4:	4b68      	ldr	r3, [pc, #416]	; (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f003 0307 	and.w	r3, r3, #7
 80059bc:	683a      	ldr	r2, [r7, #0]
 80059be:	429a      	cmp	r2, r3
 80059c0:	d90c      	bls.n	80059dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059c2:	4b65      	ldr	r3, [pc, #404]	; (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 80059c4:	683a      	ldr	r2, [r7, #0]
 80059c6:	b2d2      	uxtb	r2, r2
 80059c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059ca:	4b63      	ldr	r3, [pc, #396]	; (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	f003 0307 	and.w	r3, r3, #7
 80059d2:	683a      	ldr	r2, [r7, #0]
 80059d4:	429a      	cmp	r2, r3
 80059d6:	d001      	beq.n	80059dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e0b8      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f003 0302 	and.w	r3, r3, #2
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d020      	beq.n	8005a2a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	f003 0304 	and.w	r3, r3, #4
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d005      	beq.n	8005a00 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80059f4:	4b59      	ldr	r3, [pc, #356]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 80059f6:	689b      	ldr	r3, [r3, #8]
 80059f8:	4a58      	ldr	r2, [pc, #352]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 80059fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80059fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 0308 	and.w	r3, r3, #8
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d005      	beq.n	8005a18 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005a0c:	4b53      	ldr	r3, [pc, #332]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a0e:	689b      	ldr	r3, [r3, #8]
 8005a10:	4a52      	ldr	r2, [pc, #328]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a12:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005a16:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005a18:	4b50      	ldr	r3, [pc, #320]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	494d      	ldr	r1, [pc, #308]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a26:	4313      	orrs	r3, r2
 8005a28:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f003 0301 	and.w	r3, r3, #1
 8005a32:	2b00      	cmp	r3, #0
 8005a34:	d044      	beq.n	8005ac0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	685b      	ldr	r3, [r3, #4]
 8005a3a:	2b01      	cmp	r3, #1
 8005a3c:	d107      	bne.n	8005a4e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005a3e:	4b47      	ldr	r3, [pc, #284]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d119      	bne.n	8005a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e07f      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	685b      	ldr	r3, [r3, #4]
 8005a52:	2b02      	cmp	r3, #2
 8005a54:	d003      	beq.n	8005a5e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005a5a:	2b03      	cmp	r3, #3
 8005a5c:	d107      	bne.n	8005a6e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005a5e:	4b3f      	ldr	r3, [pc, #252]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d109      	bne.n	8005a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e06f      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005a6e:	4b3b      	ldr	r3, [pc, #236]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f003 0302 	and.w	r3, r3, #2
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d101      	bne.n	8005a7e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	e067      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005a7e:	4b37      	ldr	r3, [pc, #220]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a80:	689b      	ldr	r3, [r3, #8]
 8005a82:	f023 0203 	bic.w	r2, r3, #3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	4934      	ldr	r1, [pc, #208]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005a8c:	4313      	orrs	r3, r2
 8005a8e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005a90:	f7fc fc60 	bl	8002354 <HAL_GetTick>
 8005a94:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005a96:	e00a      	b.n	8005aae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005a98:	f7fc fc5c 	bl	8002354 <HAL_GetTick>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	1ad3      	subs	r3, r2, r3
 8005aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005aa6:	4293      	cmp	r3, r2
 8005aa8:	d901      	bls.n	8005aae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005aaa:	2303      	movs	r3, #3
 8005aac:	e04f      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005aae:	4b2b      	ldr	r3, [pc, #172]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 020c 	and.w	r2, r3, #12
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	009b      	lsls	r3, r3, #2
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d1eb      	bne.n	8005a98 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005ac0:	4b25      	ldr	r3, [pc, #148]	; (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f003 0307 	and.w	r3, r3, #7
 8005ac8:	683a      	ldr	r2, [r7, #0]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d20c      	bcs.n	8005ae8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005ace:	4b22      	ldr	r3, [pc, #136]	; (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad0:	683a      	ldr	r2, [r7, #0]
 8005ad2:	b2d2      	uxtb	r2, r2
 8005ad4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ad6:	4b20      	ldr	r3, [pc, #128]	; (8005b58 <HAL_RCC_ClockConfig+0x1b8>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 0307 	and.w	r3, r3, #7
 8005ade:	683a      	ldr	r2, [r7, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d001      	beq.n	8005ae8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e032      	b.n	8005b4e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f003 0304 	and.w	r3, r3, #4
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d008      	beq.n	8005b06 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005af4:	4b19      	ldr	r3, [pc, #100]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005af6:	689b      	ldr	r3, [r3, #8]
 8005af8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	4916      	ldr	r1, [pc, #88]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b02:	4313      	orrs	r3, r2
 8005b04:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d009      	beq.n	8005b26 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005b12:	4b12      	ldr	r3, [pc, #72]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	691b      	ldr	r3, [r3, #16]
 8005b1e:	00db      	lsls	r3, r3, #3
 8005b20:	490e      	ldr	r1, [pc, #56]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b22:	4313      	orrs	r3, r2
 8005b24:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005b26:	f000 f821 	bl	8005b6c <HAL_RCC_GetSysClockFreq>
 8005b2a:	4602      	mov	r2, r0
 8005b2c:	4b0b      	ldr	r3, [pc, #44]	; (8005b5c <HAL_RCC_ClockConfig+0x1bc>)
 8005b2e:	689b      	ldr	r3, [r3, #8]
 8005b30:	091b      	lsrs	r3, r3, #4
 8005b32:	f003 030f 	and.w	r3, r3, #15
 8005b36:	490a      	ldr	r1, [pc, #40]	; (8005b60 <HAL_RCC_ClockConfig+0x1c0>)
 8005b38:	5ccb      	ldrb	r3, [r1, r3]
 8005b3a:	fa22 f303 	lsr.w	r3, r2, r3
 8005b3e:	4a09      	ldr	r2, [pc, #36]	; (8005b64 <HAL_RCC_ClockConfig+0x1c4>)
 8005b40:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005b42:	4b09      	ldr	r3, [pc, #36]	; (8005b68 <HAL_RCC_ClockConfig+0x1c8>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7fc fbc0 	bl	80022cc <HAL_InitTick>

  return HAL_OK;
 8005b4c:	2300      	movs	r3, #0
}
 8005b4e:	4618      	mov	r0, r3
 8005b50:	3710      	adds	r7, #16
 8005b52:	46bd      	mov	sp, r7
 8005b54:	bd80      	pop	{r7, pc}
 8005b56:	bf00      	nop
 8005b58:	40023c00 	.word	0x40023c00
 8005b5c:	40023800 	.word	0x40023800
 8005b60:	0800d254 	.word	0x0800d254
 8005b64:	20000038 	.word	0x20000038
 8005b68:	2000003c 	.word	0x2000003c

08005b6c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005b6c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005b70:	b094      	sub	sp, #80	; 0x50
 8005b72:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005b74:	2300      	movs	r3, #0
 8005b76:	647b      	str	r3, [r7, #68]	; 0x44
 8005b78:	2300      	movs	r3, #0
 8005b7a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005b80:	2300      	movs	r3, #0
 8005b82:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005b84:	4b79      	ldr	r3, [pc, #484]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b86:	689b      	ldr	r3, [r3, #8]
 8005b88:	f003 030c 	and.w	r3, r3, #12
 8005b8c:	2b08      	cmp	r3, #8
 8005b8e:	d00d      	beq.n	8005bac <HAL_RCC_GetSysClockFreq+0x40>
 8005b90:	2b08      	cmp	r3, #8
 8005b92:	f200 80e1 	bhi.w	8005d58 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d002      	beq.n	8005ba0 <HAL_RCC_GetSysClockFreq+0x34>
 8005b9a:	2b04      	cmp	r3, #4
 8005b9c:	d003      	beq.n	8005ba6 <HAL_RCC_GetSysClockFreq+0x3a>
 8005b9e:	e0db      	b.n	8005d58 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005ba0:	4b73      	ldr	r3, [pc, #460]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8005ba2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005ba4:	e0db      	b.n	8005d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005ba6:	4b73      	ldr	r3, [pc, #460]	; (8005d74 <HAL_RCC_GetSysClockFreq+0x208>)
 8005ba8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005baa:	e0d8      	b.n	8005d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005bac:	4b6f      	ldr	r3, [pc, #444]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005bb4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005bb6:	4b6d      	ldr	r3, [pc, #436]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005bb8:	685b      	ldr	r3, [r3, #4]
 8005bba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d063      	beq.n	8005c8a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005bc2:	4b6a      	ldr	r3, [pc, #424]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	099b      	lsrs	r3, r3, #6
 8005bc8:	2200      	movs	r2, #0
 8005bca:	63bb      	str	r3, [r7, #56]	; 0x38
 8005bcc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005bce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bd0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bd4:	633b      	str	r3, [r7, #48]	; 0x30
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	637b      	str	r3, [r7, #52]	; 0x34
 8005bda:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005bde:	4622      	mov	r2, r4
 8005be0:	462b      	mov	r3, r5
 8005be2:	f04f 0000 	mov.w	r0, #0
 8005be6:	f04f 0100 	mov.w	r1, #0
 8005bea:	0159      	lsls	r1, r3, #5
 8005bec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005bf0:	0150      	lsls	r0, r2, #5
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4621      	mov	r1, r4
 8005bf8:	1a51      	subs	r1, r2, r1
 8005bfa:	6139      	str	r1, [r7, #16]
 8005bfc:	4629      	mov	r1, r5
 8005bfe:	eb63 0301 	sbc.w	r3, r3, r1
 8005c02:	617b      	str	r3, [r7, #20]
 8005c04:	f04f 0200 	mov.w	r2, #0
 8005c08:	f04f 0300 	mov.w	r3, #0
 8005c0c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005c10:	4659      	mov	r1, fp
 8005c12:	018b      	lsls	r3, r1, #6
 8005c14:	4651      	mov	r1, sl
 8005c16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005c1a:	4651      	mov	r1, sl
 8005c1c:	018a      	lsls	r2, r1, #6
 8005c1e:	4651      	mov	r1, sl
 8005c20:	ebb2 0801 	subs.w	r8, r2, r1
 8005c24:	4659      	mov	r1, fp
 8005c26:	eb63 0901 	sbc.w	r9, r3, r1
 8005c2a:	f04f 0200 	mov.w	r2, #0
 8005c2e:	f04f 0300 	mov.w	r3, #0
 8005c32:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005c36:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005c3a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005c3e:	4690      	mov	r8, r2
 8005c40:	4699      	mov	r9, r3
 8005c42:	4623      	mov	r3, r4
 8005c44:	eb18 0303 	adds.w	r3, r8, r3
 8005c48:	60bb      	str	r3, [r7, #8]
 8005c4a:	462b      	mov	r3, r5
 8005c4c:	eb49 0303 	adc.w	r3, r9, r3
 8005c50:	60fb      	str	r3, [r7, #12]
 8005c52:	f04f 0200 	mov.w	r2, #0
 8005c56:	f04f 0300 	mov.w	r3, #0
 8005c5a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005c5e:	4629      	mov	r1, r5
 8005c60:	024b      	lsls	r3, r1, #9
 8005c62:	4621      	mov	r1, r4
 8005c64:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005c68:	4621      	mov	r1, r4
 8005c6a:	024a      	lsls	r2, r1, #9
 8005c6c:	4610      	mov	r0, r2
 8005c6e:	4619      	mov	r1, r3
 8005c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005c72:	2200      	movs	r2, #0
 8005c74:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c76:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005c78:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005c7c:	f7fb f804 	bl	8000c88 <__aeabi_uldivmod>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4613      	mov	r3, r2
 8005c86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c88:	e058      	b.n	8005d3c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005c8a:	4b38      	ldr	r3, [pc, #224]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c8c:	685b      	ldr	r3, [r3, #4]
 8005c8e:	099b      	lsrs	r3, r3, #6
 8005c90:	2200      	movs	r2, #0
 8005c92:	4618      	mov	r0, r3
 8005c94:	4611      	mov	r1, r2
 8005c96:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005c9a:	623b      	str	r3, [r7, #32]
 8005c9c:	2300      	movs	r3, #0
 8005c9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ca0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005ca4:	4642      	mov	r2, r8
 8005ca6:	464b      	mov	r3, r9
 8005ca8:	f04f 0000 	mov.w	r0, #0
 8005cac:	f04f 0100 	mov.w	r1, #0
 8005cb0:	0159      	lsls	r1, r3, #5
 8005cb2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005cb6:	0150      	lsls	r0, r2, #5
 8005cb8:	4602      	mov	r2, r0
 8005cba:	460b      	mov	r3, r1
 8005cbc:	4641      	mov	r1, r8
 8005cbe:	ebb2 0a01 	subs.w	sl, r2, r1
 8005cc2:	4649      	mov	r1, r9
 8005cc4:	eb63 0b01 	sbc.w	fp, r3, r1
 8005cc8:	f04f 0200 	mov.w	r2, #0
 8005ccc:	f04f 0300 	mov.w	r3, #0
 8005cd0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005cd4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005cd8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005cdc:	ebb2 040a 	subs.w	r4, r2, sl
 8005ce0:	eb63 050b 	sbc.w	r5, r3, fp
 8005ce4:	f04f 0200 	mov.w	r2, #0
 8005ce8:	f04f 0300 	mov.w	r3, #0
 8005cec:	00eb      	lsls	r3, r5, #3
 8005cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005cf2:	00e2      	lsls	r2, r4, #3
 8005cf4:	4614      	mov	r4, r2
 8005cf6:	461d      	mov	r5, r3
 8005cf8:	4643      	mov	r3, r8
 8005cfa:	18e3      	adds	r3, r4, r3
 8005cfc:	603b      	str	r3, [r7, #0]
 8005cfe:	464b      	mov	r3, r9
 8005d00:	eb45 0303 	adc.w	r3, r5, r3
 8005d04:	607b      	str	r3, [r7, #4]
 8005d06:	f04f 0200 	mov.w	r2, #0
 8005d0a:	f04f 0300 	mov.w	r3, #0
 8005d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005d12:	4629      	mov	r1, r5
 8005d14:	028b      	lsls	r3, r1, #10
 8005d16:	4621      	mov	r1, r4
 8005d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005d1c:	4621      	mov	r1, r4
 8005d1e:	028a      	lsls	r2, r1, #10
 8005d20:	4610      	mov	r0, r2
 8005d22:	4619      	mov	r1, r3
 8005d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005d26:	2200      	movs	r2, #0
 8005d28:	61bb      	str	r3, [r7, #24]
 8005d2a:	61fa      	str	r2, [r7, #28]
 8005d2c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005d30:	f7fa ffaa 	bl	8000c88 <__aeabi_uldivmod>
 8005d34:	4602      	mov	r2, r0
 8005d36:	460b      	mov	r3, r1
 8005d38:	4613      	mov	r3, r2
 8005d3a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005d3c:	4b0b      	ldr	r3, [pc, #44]	; (8005d6c <HAL_RCC_GetSysClockFreq+0x200>)
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	0c1b      	lsrs	r3, r3, #16
 8005d42:	f003 0303 	and.w	r3, r3, #3
 8005d46:	3301      	adds	r3, #1
 8005d48:	005b      	lsls	r3, r3, #1
 8005d4a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005d4c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005d50:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d54:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d56:	e002      	b.n	8005d5e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005d58:	4b05      	ldr	r3, [pc, #20]	; (8005d70 <HAL_RCC_GetSysClockFreq+0x204>)
 8005d5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005d5c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005d5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3750      	adds	r7, #80	; 0x50
 8005d64:	46bd      	mov	sp, r7
 8005d66:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005d6a:	bf00      	nop
 8005d6c:	40023800 	.word	0x40023800
 8005d70:	00f42400 	.word	0x00f42400
 8005d74:	007a1200 	.word	0x007a1200

08005d78 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005d7c:	4b03      	ldr	r3, [pc, #12]	; (8005d8c <HAL_RCC_GetHCLKFreq+0x14>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	46bd      	mov	sp, r7
 8005d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	20000038 	.word	0x20000038

08005d90 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005d94:	f7ff fff0 	bl	8005d78 <HAL_RCC_GetHCLKFreq>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005d9c:	689b      	ldr	r3, [r3, #8]
 8005d9e:	0a9b      	lsrs	r3, r3, #10
 8005da0:	f003 0307 	and.w	r3, r3, #7
 8005da4:	4903      	ldr	r1, [pc, #12]	; (8005db4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005da6:	5ccb      	ldrb	r3, [r1, r3]
 8005da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005dac:	4618      	mov	r0, r3
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	40023800 	.word	0x40023800
 8005db4:	0800d264 	.word	0x0800d264

08005db8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b086      	sub	sp, #24
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8005dc0:	2300      	movs	r3, #0
 8005dc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d105      	bne.n	8005de0 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d035      	beq.n	8005e4c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005de0:	4b62      	ldr	r3, [pc, #392]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005de6:	f7fc fab5 	bl	8002354 <HAL_GetTick>
 8005dea:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005dec:	e008      	b.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005dee:	f7fc fab1 	bl	8002354 <HAL_GetTick>
 8005df2:	4602      	mov	r2, r0
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	1ad3      	subs	r3, r2, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d901      	bls.n	8005e00 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005dfc:	2303      	movs	r3, #3
 8005dfe:	e0b0      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005e00:	4b5b      	ldr	r3, [pc, #364]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d1f0      	bne.n	8005dee <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	685b      	ldr	r3, [r3, #4]
 8005e10:	019a      	lsls	r2, r3, #6
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	071b      	lsls	r3, r3, #28
 8005e18:	4955      	ldr	r1, [pc, #340]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005e20:	4b52      	ldr	r3, [pc, #328]	; (8005f6c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005e22:	2201      	movs	r2, #1
 8005e24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e26:	f7fc fa95 	bl	8002354 <HAL_GetTick>
 8005e2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e2c:	e008      	b.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005e2e:	f7fc fa91 	bl	8002354 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	697b      	ldr	r3, [r7, #20]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e090      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005e40:	4b4b      	ldr	r3, [pc, #300]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d0f0      	beq.n	8005e2e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f003 0302 	and.w	r3, r3, #2
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	f000 8083 	beq.w	8005f60 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005e5a:	2300      	movs	r3, #0
 8005e5c:	60fb      	str	r3, [r7, #12]
 8005e5e:	4b44      	ldr	r3, [pc, #272]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e62:	4a43      	ldr	r2, [pc, #268]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e68:	6413      	str	r3, [r2, #64]	; 0x40
 8005e6a:	4b41      	ldr	r3, [pc, #260]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8005e76:	4b3f      	ldr	r3, [pc, #252]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	4a3e      	ldr	r2, [pc, #248]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e80:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005e82:	f7fc fa67 	bl	8002354 <HAL_GetTick>
 8005e86:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e88:	e008      	b.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005e8a:	f7fc fa63 	bl	8002354 <HAL_GetTick>
 8005e8e:	4602      	mov	r2, r0
 8005e90:	697b      	ldr	r3, [r7, #20]
 8005e92:	1ad3      	subs	r3, r2, r3
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	d901      	bls.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e062      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005e9c:	4b35      	ldr	r3, [pc, #212]	; (8005f74 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0f0      	beq.n	8005e8a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005ea8:	4b31      	ldr	r3, [pc, #196]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005eaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005eb0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d02f      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68db      	ldr	r3, [r3, #12]
 8005ebc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ec0:	693a      	ldr	r2, [r7, #16]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d028      	beq.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005ec6:	4b2a      	ldr	r3, [pc, #168]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ece:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005ed0:	4b29      	ldr	r3, [pc, #164]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005ed6:	4b28      	ldr	r3, [pc, #160]	; (8005f78 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8005ed8:	2200      	movs	r2, #0
 8005eda:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8005edc:	4a24      	ldr	r2, [pc, #144]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005ee2:	4b23      	ldr	r3, [pc, #140]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005ee4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee6:	f003 0301 	and.w	r3, r3, #1
 8005eea:	2b01      	cmp	r3, #1
 8005eec:	d114      	bne.n	8005f18 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8005eee:	f7fc fa31 	bl	8002354 <HAL_GetTick>
 8005ef2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005ef4:	e00a      	b.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005ef6:	f7fc fa2d 	bl	8002354 <HAL_GetTick>
 8005efa:	4602      	mov	r2, r0
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	1ad3      	subs	r3, r2, r3
 8005f00:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d901      	bls.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005f08:	2303      	movs	r3, #3
 8005f0a:	e02a      	b.n	8005f62 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005f0c:	4b18      	ldr	r3, [pc, #96]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d0ee      	beq.n	8005ef6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f20:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f24:	d10d      	bne.n	8005f42 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8005f26:	4b12      	ldr	r3, [pc, #72]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f28:	689b      	ldr	r3, [r3, #8]
 8005f2a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	68db      	ldr	r3, [r3, #12]
 8005f32:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8005f36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f3a:	490d      	ldr	r1, [pc, #52]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f3c:	4313      	orrs	r3, r2
 8005f3e:	608b      	str	r3, [r1, #8]
 8005f40:	e005      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005f42:	4b0b      	ldr	r3, [pc, #44]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	4a0a      	ldr	r2, [pc, #40]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f48:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005f4c:	6093      	str	r3, [r2, #8]
 8005f4e:	4b08      	ldr	r3, [pc, #32]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f50:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68db      	ldr	r3, [r3, #12]
 8005f56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005f5a:	4905      	ldr	r1, [pc, #20]	; (8005f70 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005f60:	2300      	movs	r3, #0
}
 8005f62:	4618      	mov	r0, r3
 8005f64:	3718      	adds	r7, #24
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd80      	pop	{r7, pc}
 8005f6a:	bf00      	nop
 8005f6c:	42470068 	.word	0x42470068
 8005f70:	40023800 	.word	0x40023800
 8005f74:	40007000 	.word	0x40007000
 8005f78:	42470e40 	.word	0x42470e40

08005f7c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005f7c:	b480      	push	{r7}
 8005f7e:	b087      	sub	sp, #28
 8005f80:	af00      	add	r7, sp, #0
 8005f82:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005f84:	2300      	movs	r3, #0
 8005f86:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005f88:	2300      	movs	r3, #0
 8005f8a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005f90:	2300      	movs	r3, #0
 8005f92:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b01      	cmp	r3, #1
 8005f98:	d13e      	bne.n	8006018 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8005f9a:	4b23      	ldr	r3, [pc, #140]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005f9c:	689b      	ldr	r3, [r3, #8]
 8005f9e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005fa2:	60fb      	str	r3, [r7, #12]
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d005      	beq.n	8005fb6 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	2b01      	cmp	r3, #1
 8005fae:	d12f      	bne.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8005fb0:	4b1e      	ldr	r3, [pc, #120]	; (800602c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005fb2:	617b      	str	r3, [r7, #20]
          break;
 8005fb4:	e02f      	b.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8005fb6:	4b1c      	ldr	r3, [pc, #112]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005fc2:	d108      	bne.n	8005fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005fc4:	4b18      	ldr	r3, [pc, #96]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fcc:	4a18      	ldr	r2, [pc, #96]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8005fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fd2:	613b      	str	r3, [r7, #16]
 8005fd4:	e007      	b.n	8005fe6 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8005fd6:	4b14      	ldr	r3, [pc, #80]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fde:	4a15      	ldr	r2, [pc, #84]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8005fe0:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fe4:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8005fe6:	4b10      	ldr	r3, [pc, #64]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005fec:	099b      	lsrs	r3, r3, #6
 8005fee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005ff2:	693b      	ldr	r3, [r7, #16]
 8005ff4:	fb02 f303 	mul.w	r3, r2, r3
 8005ff8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005ffa:	4b0b      	ldr	r3, [pc, #44]	; (8006028 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8005ffc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006000:	0f1b      	lsrs	r3, r3, #28
 8006002:	f003 0307 	and.w	r3, r3, #7
 8006006:	68ba      	ldr	r2, [r7, #8]
 8006008:	fbb2 f3f3 	udiv	r3, r2, r3
 800600c:	617b      	str	r3, [r7, #20]
          break;
 800600e:	e002      	b.n	8006016 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8006010:	2300      	movs	r3, #0
 8006012:	617b      	str	r3, [r7, #20]
          break;
 8006014:	bf00      	nop
        }
      }
      break;
 8006016:	bf00      	nop
    }
  }
  return frequency;
 8006018:	697b      	ldr	r3, [r7, #20]
}
 800601a:	4618      	mov	r0, r3
 800601c:	371c      	adds	r7, #28
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40023800 	.word	0x40023800
 800602c:	00bb8000 	.word	0x00bb8000
 8006030:	007a1200 	.word	0x007a1200
 8006034:	00f42400 	.word	0x00f42400

08006038 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b082      	sub	sp, #8
 800603c:	af00      	add	r7, sp, #0
 800603e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2b00      	cmp	r3, #0
 8006044:	d101      	bne.n	800604a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e07b      	b.n	8006142 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800604e:	2b00      	cmp	r3, #0
 8006050:	d108      	bne.n	8006064 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	685b      	ldr	r3, [r3, #4]
 8006056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800605a:	d009      	beq.n	8006070 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2200      	movs	r2, #0
 8006060:	61da      	str	r2, [r3, #28]
 8006062:	e005      	b.n	8006070 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	2200      	movs	r2, #0
 8006068:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	2200      	movs	r2, #0
 800606e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2200      	movs	r2, #0
 8006074:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d106      	bne.n	8006090 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	2200      	movs	r2, #0
 8006086:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7fb ff5c 	bl	8001f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	2202      	movs	r2, #2
 8006094:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	681a      	ldr	r2, [r3, #0]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060a6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	685b      	ldr	r3, [r3, #4]
 80060ac:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80060b8:	431a      	orrs	r2, r3
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	68db      	ldr	r3, [r3, #12]
 80060be:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80060c2:	431a      	orrs	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	691b      	ldr	r3, [r3, #16]
 80060c8:	f003 0302 	and.w	r3, r3, #2
 80060cc:	431a      	orrs	r2, r3
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	695b      	ldr	r3, [r3, #20]
 80060d2:	f003 0301 	and.w	r3, r3, #1
 80060d6:	431a      	orrs	r2, r3
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	699b      	ldr	r3, [r3, #24]
 80060dc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80060e0:	431a      	orrs	r2, r3
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	69db      	ldr	r3, [r3, #28]
 80060e6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80060ea:	431a      	orrs	r2, r3
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6a1b      	ldr	r3, [r3, #32]
 80060f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060f4:	ea42 0103 	orr.w	r1, r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060fc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	430a      	orrs	r2, r1
 8006106:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	699b      	ldr	r3, [r3, #24]
 800610c:	0c1b      	lsrs	r3, r3, #16
 800610e:	f003 0104 	and.w	r1, r3, #4
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006116:	f003 0210 	and.w	r2, r3, #16
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	430a      	orrs	r2, r1
 8006120:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69da      	ldr	r2, [r3, #28]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006130:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2201      	movs	r2, #1
 800613c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8006140:	2300      	movs	r3, #0
}
 8006142:	4618      	mov	r0, r3
 8006144:	3708      	adds	r7, #8
 8006146:	46bd      	mov	sp, r7
 8006148:	bd80      	pop	{r7, pc}

0800614a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d101      	bne.n	800615c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e041      	b.n	80061e0 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006162:	b2db      	uxtb	r3, r3
 8006164:	2b00      	cmp	r3, #0
 8006166:	d106      	bne.n	8006176 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006170:	6878      	ldr	r0, [r7, #4]
 8006172:	f7fb ff31 	bl	8001fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	2202      	movs	r2, #2
 800617a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	3304      	adds	r3, #4
 8006186:	4619      	mov	r1, r3
 8006188:	4610      	mov	r0, r2
 800618a:	f000 f82d 	bl	80061e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2201      	movs	r2, #1
 800619a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	2201      	movs	r2, #1
 80061a2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2201      	movs	r2, #1
 80061aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2201      	movs	r2, #1
 80061b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	2201      	movs	r2, #1
 80061ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2201      	movs	r2, #1
 80061c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2201      	movs	r2, #1
 80061d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	2201      	movs	r2, #1
 80061da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061de:	2300      	movs	r3, #0
}
 80061e0:	4618      	mov	r0, r3
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80061e8:	b480      	push	{r7}
 80061ea:	b085      	sub	sp, #20
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
 80061f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	4a40      	ldr	r2, [pc, #256]	; (80062fc <TIM_Base_SetConfig+0x114>)
 80061fc:	4293      	cmp	r3, r2
 80061fe:	d013      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006206:	d00f      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a3d      	ldr	r2, [pc, #244]	; (8006300 <TIM_Base_SetConfig+0x118>)
 800620c:	4293      	cmp	r3, r2
 800620e:	d00b      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	4a3c      	ldr	r2, [pc, #240]	; (8006304 <TIM_Base_SetConfig+0x11c>)
 8006214:	4293      	cmp	r3, r2
 8006216:	d007      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	4a3b      	ldr	r2, [pc, #236]	; (8006308 <TIM_Base_SetConfig+0x120>)
 800621c:	4293      	cmp	r3, r2
 800621e:	d003      	beq.n	8006228 <TIM_Base_SetConfig+0x40>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	4a3a      	ldr	r2, [pc, #232]	; (800630c <TIM_Base_SetConfig+0x124>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d108      	bne.n	800623a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006230:	683b      	ldr	r3, [r7, #0]
 8006232:	685b      	ldr	r3, [r3, #4]
 8006234:	68fa      	ldr	r2, [r7, #12]
 8006236:	4313      	orrs	r3, r2
 8006238:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	4a2f      	ldr	r2, [pc, #188]	; (80062fc <TIM_Base_SetConfig+0x114>)
 800623e:	4293      	cmp	r3, r2
 8006240:	d02b      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006248:	d027      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	4a2c      	ldr	r2, [pc, #176]	; (8006300 <TIM_Base_SetConfig+0x118>)
 800624e:	4293      	cmp	r3, r2
 8006250:	d023      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	4a2b      	ldr	r2, [pc, #172]	; (8006304 <TIM_Base_SetConfig+0x11c>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d01f      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	4a2a      	ldr	r2, [pc, #168]	; (8006308 <TIM_Base_SetConfig+0x120>)
 800625e:	4293      	cmp	r3, r2
 8006260:	d01b      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	4a29      	ldr	r2, [pc, #164]	; (800630c <TIM_Base_SetConfig+0x124>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d017      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	4a28      	ldr	r2, [pc, #160]	; (8006310 <TIM_Base_SetConfig+0x128>)
 800626e:	4293      	cmp	r3, r2
 8006270:	d013      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	4a27      	ldr	r2, [pc, #156]	; (8006314 <TIM_Base_SetConfig+0x12c>)
 8006276:	4293      	cmp	r3, r2
 8006278:	d00f      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a26      	ldr	r2, [pc, #152]	; (8006318 <TIM_Base_SetConfig+0x130>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d00b      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	4a25      	ldr	r2, [pc, #148]	; (800631c <TIM_Base_SetConfig+0x134>)
 8006286:	4293      	cmp	r3, r2
 8006288:	d007      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	4a24      	ldr	r2, [pc, #144]	; (8006320 <TIM_Base_SetConfig+0x138>)
 800628e:	4293      	cmp	r3, r2
 8006290:	d003      	beq.n	800629a <TIM_Base_SetConfig+0xb2>
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4a23      	ldr	r2, [pc, #140]	; (8006324 <TIM_Base_SetConfig+0x13c>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d108      	bne.n	80062ac <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	68db      	ldr	r3, [r3, #12]
 80062a6:	68fa      	ldr	r2, [r7, #12]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80062b2:	683b      	ldr	r3, [r7, #0]
 80062b4:	695b      	ldr	r3, [r3, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	68fa      	ldr	r2, [r7, #12]
 80062be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	689a      	ldr	r2, [r3, #8]
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	681a      	ldr	r2, [r3, #0]
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	4a0a      	ldr	r2, [pc, #40]	; (80062fc <TIM_Base_SetConfig+0x114>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d003      	beq.n	80062e0 <TIM_Base_SetConfig+0xf8>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a0c      	ldr	r2, [pc, #48]	; (800630c <TIM_Base_SetConfig+0x124>)
 80062dc:	4293      	cmp	r3, r2
 80062de:	d103      	bne.n	80062e8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	691a      	ldr	r2, [r3, #16]
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2201      	movs	r2, #1
 80062ec:	615a      	str	r2, [r3, #20]
}
 80062ee:	bf00      	nop
 80062f0:	3714      	adds	r7, #20
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	40010000 	.word	0x40010000
 8006300:	40000400 	.word	0x40000400
 8006304:	40000800 	.word	0x40000800
 8006308:	40000c00 	.word	0x40000c00
 800630c:	40010400 	.word	0x40010400
 8006310:	40014000 	.word	0x40014000
 8006314:	40014400 	.word	0x40014400
 8006318:	40014800 	.word	0x40014800
 800631c:	40001800 	.word	0x40001800
 8006320:	40001c00 	.word	0x40001c00
 8006324:	40002000 	.word	0x40002000

08006328 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006328:	b084      	sub	sp, #16
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	6078      	str	r0, [r7, #4]
 8006332:	f107 001c 	add.w	r0, r7, #28
 8006336:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800633a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800633c:	2b01      	cmp	r3, #1
 800633e:	d122      	bne.n	8006386 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006344:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8006354:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006368:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800636a:	2b01      	cmp	r3, #1
 800636c:	d105      	bne.n	800637a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	68db      	ldr	r3, [r3, #12]
 8006372:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f000 f9c0 	bl	8006700 <USB_CoreReset>
 8006380:	4603      	mov	r3, r0
 8006382:	73fb      	strb	r3, [r7, #15]
 8006384:	e01a      	b.n	80063bc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68db      	ldr	r3, [r3, #12]
 800638a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 f9b4 	bl	8006700 <USB_CoreReset>
 8006398:	4603      	mov	r3, r0
 800639a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800639c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800639e:	2b00      	cmp	r3, #0
 80063a0:	d106      	bne.n	80063b0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063a6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	639a      	str	r2, [r3, #56]	; 0x38
 80063ae:	e005      	b.n	80063bc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	2b01      	cmp	r3, #1
 80063c0:	d10b      	bne.n	80063da <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f043 0206 	orr.w	r2, r3, #6
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	689b      	ldr	r3, [r3, #8]
 80063d2:	f043 0220 	orr.w	r2, r3, #32
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80063da:	7bfb      	ldrb	r3, [r7, #15]
}
 80063dc:	4618      	mov	r0, r3
 80063de:	3710      	adds	r7, #16
 80063e0:	46bd      	mov	sp, r7
 80063e2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80063e6:	b004      	add	sp, #16
 80063e8:	4770      	bx	lr

080063ea <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80063ea:	b480      	push	{r7}
 80063ec:	b083      	sub	sp, #12
 80063ee:	af00      	add	r7, sp, #0
 80063f0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f043 0201 	orr.w	r2, r3, #1
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80063fe:	2300      	movs	r3, #0
}
 8006400:	4618      	mov	r0, r3
 8006402:	370c      	adds	r7, #12
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr

0800640c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800640c:	b480      	push	{r7}
 800640e:	b083      	sub	sp, #12
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f023 0201 	bic.w	r2, r3, #1
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006420:	2300      	movs	r3, #0
}
 8006422:	4618      	mov	r0, r3
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr

0800642e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b084      	sub	sp, #16
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
 8006436:	460b      	mov	r3, r1
 8006438:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800643a:	2300      	movs	r3, #0
 800643c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800644a:	78fb      	ldrb	r3, [r7, #3]
 800644c:	2b01      	cmp	r3, #1
 800644e:	d115      	bne.n	800647c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800645c:	2001      	movs	r0, #1
 800645e:	f7fb ff85 	bl	800236c <HAL_Delay>
      ms++;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 f93a 	bl	80066e2 <USB_GetMode>
 800646e:	4603      	mov	r3, r0
 8006470:	2b01      	cmp	r3, #1
 8006472:	d01e      	beq.n	80064b2 <USB_SetCurrentMode+0x84>
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	2b31      	cmp	r3, #49	; 0x31
 8006478:	d9f0      	bls.n	800645c <USB_SetCurrentMode+0x2e>
 800647a:	e01a      	b.n	80064b2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800647c:	78fb      	ldrb	r3, [r7, #3]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d115      	bne.n	80064ae <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800648e:	2001      	movs	r0, #1
 8006490:	f7fb ff6c 	bl	800236c <HAL_Delay>
      ms++;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	3301      	adds	r3, #1
 8006498:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800649a:	6878      	ldr	r0, [r7, #4]
 800649c:	f000 f921 	bl	80066e2 <USB_GetMode>
 80064a0:	4603      	mov	r3, r0
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d005      	beq.n	80064b2 <USB_SetCurrentMode+0x84>
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b31      	cmp	r3, #49	; 0x31
 80064aa:	d9f0      	bls.n	800648e <USB_SetCurrentMode+0x60>
 80064ac:	e001      	b.n	80064b2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80064ae:	2301      	movs	r3, #1
 80064b0:	e005      	b.n	80064be <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	2b32      	cmp	r3, #50	; 0x32
 80064b6:	d101      	bne.n	80064bc <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80064b8:	2301      	movs	r3, #1
 80064ba:	e000      	b.n	80064be <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80064bc:	2300      	movs	r3, #0
}
 80064be:	4618      	mov	r0, r3
 80064c0:	3710      	adds	r7, #16
 80064c2:	46bd      	mov	sp, r7
 80064c4:	bd80      	pop	{r7, pc}
	...

080064c8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b085      	sub	sp, #20
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80064d2:	2300      	movs	r3, #0
 80064d4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3301      	adds	r3, #1
 80064da:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	4a13      	ldr	r2, [pc, #76]	; (800652c <USB_FlushTxFifo+0x64>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d901      	bls.n	80064e8 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80064e4:	2303      	movs	r3, #3
 80064e6:	e01b      	b.n	8006520 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	691b      	ldr	r3, [r3, #16]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	daf2      	bge.n	80064d6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80064f4:	683b      	ldr	r3, [r7, #0]
 80064f6:	019b      	lsls	r3, r3, #6
 80064f8:	f043 0220 	orr.w	r2, r3, #32
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	3301      	adds	r3, #1
 8006504:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	4a08      	ldr	r2, [pc, #32]	; (800652c <USB_FlushTxFifo+0x64>)
 800650a:	4293      	cmp	r3, r2
 800650c:	d901      	bls.n	8006512 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800650e:	2303      	movs	r3, #3
 8006510:	e006      	b.n	8006520 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	691b      	ldr	r3, [r3, #16]
 8006516:	f003 0320 	and.w	r3, r3, #32
 800651a:	2b20      	cmp	r3, #32
 800651c:	d0f0      	beq.n	8006500 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800651e:	2300      	movs	r3, #0
}
 8006520:	4618      	mov	r0, r3
 8006522:	3714      	adds	r7, #20
 8006524:	46bd      	mov	sp, r7
 8006526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652a:	4770      	bx	lr
 800652c:	00030d40 	.word	0x00030d40

08006530 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006538:	2300      	movs	r3, #0
 800653a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	3301      	adds	r3, #1
 8006540:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4a11      	ldr	r2, [pc, #68]	; (800658c <USB_FlushRxFifo+0x5c>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d901      	bls.n	800654e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800654a:	2303      	movs	r3, #3
 800654c:	e018      	b.n	8006580 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	daf2      	bge.n	800653c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006556:	2300      	movs	r3, #0
 8006558:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	2210      	movs	r2, #16
 800655e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	3301      	adds	r3, #1
 8006564:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	4a08      	ldr	r2, [pc, #32]	; (800658c <USB_FlushRxFifo+0x5c>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d901      	bls.n	8006572 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800656e:	2303      	movs	r3, #3
 8006570:	e006      	b.n	8006580 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	691b      	ldr	r3, [r3, #16]
 8006576:	f003 0310 	and.w	r3, r3, #16
 800657a:	2b10      	cmp	r3, #16
 800657c:	d0f0      	beq.n	8006560 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800657e:	2300      	movs	r3, #0
}
 8006580:	4618      	mov	r0, r3
 8006582:	3714      	adds	r7, #20
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	00030d40 	.word	0x00030d40

08006590 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006590:	b480      	push	{r7}
 8006592:	b089      	sub	sp, #36	; 0x24
 8006594:	af00      	add	r7, sp, #0
 8006596:	60f8      	str	r0, [r7, #12]
 8006598:	60b9      	str	r1, [r7, #8]
 800659a:	4611      	mov	r1, r2
 800659c:	461a      	mov	r2, r3
 800659e:	460b      	mov	r3, r1
 80065a0:	71fb      	strb	r3, [r7, #7]
 80065a2:	4613      	mov	r3, r2
 80065a4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80065ae:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d123      	bne.n	80065fe <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80065b6:	88bb      	ldrh	r3, [r7, #4]
 80065b8:	3303      	adds	r3, #3
 80065ba:	089b      	lsrs	r3, r3, #2
 80065bc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80065be:	2300      	movs	r3, #0
 80065c0:	61bb      	str	r3, [r7, #24]
 80065c2:	e018      	b.n	80065f6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80065c4:	79fb      	ldrb	r3, [r7, #7]
 80065c6:	031a      	lsls	r2, r3, #12
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	4413      	add	r3, r2
 80065cc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80065d0:	461a      	mov	r2, r3
 80065d2:	69fb      	ldr	r3, [r7, #28]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	3301      	adds	r3, #1
 80065dc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	3301      	adds	r3, #1
 80065e2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065e4:	69fb      	ldr	r3, [r7, #28]
 80065e6:	3301      	adds	r3, #1
 80065e8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80065ea:	69fb      	ldr	r3, [r7, #28]
 80065ec:	3301      	adds	r3, #1
 80065ee:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	3301      	adds	r3, #1
 80065f4:	61bb      	str	r3, [r7, #24]
 80065f6:	69ba      	ldr	r2, [r7, #24]
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d3e2      	bcc.n	80065c4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80065fe:	2300      	movs	r3, #0
}
 8006600:	4618      	mov	r0, r3
 8006602:	3724      	adds	r7, #36	; 0x24
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr

0800660c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800660c:	b480      	push	{r7}
 800660e:	b08b      	sub	sp, #44	; 0x2c
 8006610:	af00      	add	r7, sp, #0
 8006612:	60f8      	str	r0, [r7, #12]
 8006614:	60b9      	str	r1, [r7, #8]
 8006616:	4613      	mov	r3, r2
 8006618:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800661e:	68bb      	ldr	r3, [r7, #8]
 8006620:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006622:	88fb      	ldrh	r3, [r7, #6]
 8006624:	089b      	lsrs	r3, r3, #2
 8006626:	b29b      	uxth	r3, r3
 8006628:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800662a:	88fb      	ldrh	r3, [r7, #6]
 800662c:	f003 0303 	and.w	r3, r3, #3
 8006630:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006632:	2300      	movs	r3, #0
 8006634:	623b      	str	r3, [r7, #32]
 8006636:	e014      	b.n	8006662 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800663e:	681a      	ldr	r2, [r3, #0]
 8006640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006642:	601a      	str	r2, [r3, #0]
    pDest++;
 8006644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006646:	3301      	adds	r3, #1
 8006648:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800664a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800664c:	3301      	adds	r3, #1
 800664e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006652:	3301      	adds	r3, #1
 8006654:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006658:	3301      	adds	r3, #1
 800665a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800665c:	6a3b      	ldr	r3, [r7, #32]
 800665e:	3301      	adds	r3, #1
 8006660:	623b      	str	r3, [r7, #32]
 8006662:	6a3a      	ldr	r2, [r7, #32]
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	429a      	cmp	r2, r3
 8006668:	d3e6      	bcc.n	8006638 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800666a:	8bfb      	ldrh	r3, [r7, #30]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d01e      	beq.n	80066ae <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006670:	2300      	movs	r3, #0
 8006672:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006674:	69bb      	ldr	r3, [r7, #24]
 8006676:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800667a:	461a      	mov	r2, r3
 800667c:	f107 0310 	add.w	r3, r7, #16
 8006680:	6812      	ldr	r2, [r2, #0]
 8006682:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006684:	693a      	ldr	r2, [r7, #16]
 8006686:	6a3b      	ldr	r3, [r7, #32]
 8006688:	b2db      	uxtb	r3, r3
 800668a:	00db      	lsls	r3, r3, #3
 800668c:	fa22 f303 	lsr.w	r3, r2, r3
 8006690:	b2da      	uxtb	r2, r3
 8006692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006694:	701a      	strb	r2, [r3, #0]
      i++;
 8006696:	6a3b      	ldr	r3, [r7, #32]
 8006698:	3301      	adds	r3, #1
 800669a:	623b      	str	r3, [r7, #32]
      pDest++;
 800669c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800669e:	3301      	adds	r3, #1
 80066a0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80066a2:	8bfb      	ldrh	r3, [r7, #30]
 80066a4:	3b01      	subs	r3, #1
 80066a6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80066a8:	8bfb      	ldrh	r3, [r7, #30]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1ea      	bne.n	8006684 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80066ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80066b0:	4618      	mov	r0, r3
 80066b2:	372c      	adds	r7, #44	; 0x2c
 80066b4:	46bd      	mov	sp, r7
 80066b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ba:	4770      	bx	lr

080066bc <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	695b      	ldr	r3, [r3, #20]
 80066c8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	699b      	ldr	r3, [r3, #24]
 80066ce:	68fa      	ldr	r2, [r7, #12]
 80066d0:	4013      	ands	r3, r2
 80066d2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80066d4:	68fb      	ldr	r3, [r7, #12]
}
 80066d6:	4618      	mov	r0, r3
 80066d8:	3714      	adds	r7, #20
 80066da:	46bd      	mov	sp, r7
 80066dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066e0:	4770      	bx	lr

080066e2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 80066e2:	b480      	push	{r7}
 80066e4:	b083      	sub	sp, #12
 80066e6:	af00      	add	r7, sp, #0
 80066e8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	695b      	ldr	r3, [r3, #20]
 80066ee:	f003 0301 	and.w	r3, r3, #1
}
 80066f2:	4618      	mov	r0, r3
 80066f4:	370c      	adds	r7, #12
 80066f6:	46bd      	mov	sp, r7
 80066f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fc:	4770      	bx	lr
	...

08006700 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006700:	b480      	push	{r7}
 8006702:	b085      	sub	sp, #20
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006708:	2300      	movs	r3, #0
 800670a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	3301      	adds	r3, #1
 8006710:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	4a13      	ldr	r2, [pc, #76]	; (8006764 <USB_CoreReset+0x64>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d901      	bls.n	800671e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800671a:	2303      	movs	r3, #3
 800671c:	e01b      	b.n	8006756 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	691b      	ldr	r3, [r3, #16]
 8006722:	2b00      	cmp	r3, #0
 8006724:	daf2      	bge.n	800670c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006726:	2300      	movs	r3, #0
 8006728:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	691b      	ldr	r3, [r3, #16]
 800672e:	f043 0201 	orr.w	r2, r3, #1
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	3301      	adds	r3, #1
 800673a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	4a09      	ldr	r2, [pc, #36]	; (8006764 <USB_CoreReset+0x64>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d901      	bls.n	8006748 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006744:	2303      	movs	r3, #3
 8006746:	e006      	b.n	8006756 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	691b      	ldr	r3, [r3, #16]
 800674c:	f003 0301 	and.w	r3, r3, #1
 8006750:	2b01      	cmp	r3, #1
 8006752:	d0f0      	beq.n	8006736 <USB_CoreReset+0x36>

  return HAL_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	3714      	adds	r7, #20
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr
 8006762:	bf00      	nop
 8006764:	00030d40 	.word	0x00030d40

08006768 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006768:	b084      	sub	sp, #16
 800676a:	b580      	push	{r7, lr}
 800676c:	b086      	sub	sp, #24
 800676e:	af00      	add	r7, sp, #0
 8006770:	6078      	str	r0, [r7, #4]
 8006772:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006776:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800677a:	2300      	movs	r3, #0
 800677c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006788:	461a      	mov	r2, r3
 800678a:	2300      	movs	r3, #0
 800678c:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006792:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800679e:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067aa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d018      	beq.n	80067f0 <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80067be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067c0:	2b01      	cmp	r3, #1
 80067c2:	d10a      	bne.n	80067da <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	68fa      	ldr	r2, [r7, #12]
 80067ce:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067d2:	f043 0304 	orr.w	r3, r3, #4
 80067d6:	6013      	str	r3, [r2, #0]
 80067d8:	e014      	b.n	8006804 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	68fa      	ldr	r2, [r7, #12]
 80067e4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067e8:	f023 0304 	bic.w	r3, r3, #4
 80067ec:	6013      	str	r3, [r2, #0]
 80067ee:	e009      	b.n	8006804 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68fa      	ldr	r2, [r7, #12]
 80067fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80067fe:	f023 0304 	bic.w	r3, r3, #4
 8006802:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006804:	2110      	movs	r1, #16
 8006806:	6878      	ldr	r0, [r7, #4]
 8006808:	f7ff fe5e 	bl	80064c8 <USB_FlushTxFifo>
 800680c:	4603      	mov	r3, r0
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 8006812:	2301      	movs	r3, #1
 8006814:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f7ff fe8a 	bl	8006530 <USB_FlushRxFifo>
 800681c:	4603      	mov	r3, r0
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 8006822:	2301      	movs	r3, #1
 8006824:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006826:	2300      	movs	r3, #0
 8006828:	613b      	str	r3, [r7, #16]
 800682a:	e015      	b.n	8006858 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 800682c:	693b      	ldr	r3, [r7, #16]
 800682e:	015a      	lsls	r2, r3, #5
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006838:	461a      	mov	r2, r3
 800683a:	f04f 33ff 	mov.w	r3, #4294967295
 800683e:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	015a      	lsls	r2, r3, #5
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	4413      	add	r3, r2
 8006848:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800684c:	461a      	mov	r2, r3
 800684e:	2300      	movs	r3, #0
 8006850:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	3301      	adds	r3, #1
 8006856:	613b      	str	r3, [r7, #16]
 8006858:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685a:	693a      	ldr	r2, [r7, #16]
 800685c:	429a      	cmp	r2, r3
 800685e:	d3e5      	bcc.n	800682c <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	2200      	movs	r2, #0
 8006864:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	f04f 32ff 	mov.w	r2, #4294967295
 800686c:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006872:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00b      	beq.n	8006892 <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006880:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	4a13      	ldr	r2, [pc, #76]	; (80068d4 <USB_HostInit+0x16c>)
 8006886:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	4a13      	ldr	r2, [pc, #76]	; (80068d8 <USB_HostInit+0x170>)
 800688c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8006890:	e009      	b.n	80068a6 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	2280      	movs	r2, #128	; 0x80
 8006896:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	4a10      	ldr	r2, [pc, #64]	; (80068dc <USB_HostInit+0x174>)
 800689c:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a0f      	ldr	r2, [pc, #60]	; (80068e0 <USB_HostInit+0x178>)
 80068a2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80068a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	d105      	bne.n	80068b8 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	699b      	ldr	r3, [r3, #24]
 80068b0:	f043 0210 	orr.w	r2, r3, #16
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	699a      	ldr	r2, [r3, #24]
 80068bc:	4b09      	ldr	r3, [pc, #36]	; (80068e4 <USB_HostInit+0x17c>)
 80068be:	4313      	orrs	r3, r2
 80068c0:	687a      	ldr	r2, [r7, #4]
 80068c2:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80068c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80068c6:	4618      	mov	r0, r3
 80068c8:	3718      	adds	r7, #24
 80068ca:	46bd      	mov	sp, r7
 80068cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80068d0:	b004      	add	sp, #16
 80068d2:	4770      	bx	lr
 80068d4:	01000200 	.word	0x01000200
 80068d8:	00e00300 	.word	0x00e00300
 80068dc:	00600080 	.word	0x00600080
 80068e0:	004000e0 	.word	0x004000e0
 80068e4:	a3200008 	.word	0xa3200008

080068e8 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80068e8:	b480      	push	{r7}
 80068ea:	b085      	sub	sp, #20
 80068ec:	af00      	add	r7, sp, #0
 80068ee:	6078      	str	r0, [r7, #4]
 80068f0:	460b      	mov	r3, r1
 80068f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006906:	f023 0303 	bic.w	r3, r3, #3
 800690a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006912:	681a      	ldr	r2, [r3, #0]
 8006914:	78fb      	ldrb	r3, [r7, #3]
 8006916:	f003 0303 	and.w	r3, r3, #3
 800691a:	68f9      	ldr	r1, [r7, #12]
 800691c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006920:	4313      	orrs	r3, r2
 8006922:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006924:	78fb      	ldrb	r3, [r7, #3]
 8006926:	2b01      	cmp	r3, #1
 8006928:	d107      	bne.n	800693a <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006930:	461a      	mov	r2, r3
 8006932:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006936:	6053      	str	r3, [r2, #4]
 8006938:	e009      	b.n	800694e <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 800693a:	78fb      	ldrb	r3, [r7, #3]
 800693c:	2b02      	cmp	r3, #2
 800693e:	d106      	bne.n	800694e <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006946:	461a      	mov	r2, r3
 8006948:	f241 7370 	movw	r3, #6000	; 0x1770
 800694c:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800694e:	2300      	movs	r3, #0
}
 8006950:	4618      	mov	r0, r3
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800695c:	b480      	push	{r7}
 800695e:	b085      	sub	sp, #20
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800696c:	2300      	movs	r3, #0
 800696e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006980:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006988:	2b00      	cmp	r3, #0
 800698a:	d109      	bne.n	80069a0 <USB_DriveVbus+0x44>
 800698c:	78fb      	ldrb	r3, [r7, #3]
 800698e:	2b01      	cmp	r3, #1
 8006990:	d106      	bne.n	80069a0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	68fa      	ldr	r2, [r7, #12]
 8006996:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800699a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800699e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80069a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069aa:	d109      	bne.n	80069c0 <USB_DriveVbus+0x64>
 80069ac:	78fb      	ldrb	r3, [r7, #3]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d106      	bne.n	80069c0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80069ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80069be:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80069c0:	2300      	movs	r3, #0
}
 80069c2:	4618      	mov	r0, r3
 80069c4:	3714      	adds	r7, #20
 80069c6:	46bd      	mov	sp, r7
 80069c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069cc:	4770      	bx	lr

080069ce <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b085      	sub	sp, #20
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80069da:	2300      	movs	r3, #0
 80069dc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	0c5b      	lsrs	r3, r3, #17
 80069ec:	f003 0303 	and.w	r3, r3, #3
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3714      	adds	r7, #20
 80069f4:	46bd      	mov	sp, r7
 80069f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fa:	4770      	bx	lr

080069fc <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 80069fc:	b480      	push	{r7}
 80069fe:	b085      	sub	sp, #20
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a0e:	689b      	ldr	r3, [r3, #8]
 8006a10:	b29b      	uxth	r3, r3
}
 8006a12:	4618      	mov	r0, r3
 8006a14:	3714      	adds	r7, #20
 8006a16:	46bd      	mov	sp, r7
 8006a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a1c:	4770      	bx	lr
	...

08006a20 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b088      	sub	sp, #32
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	4608      	mov	r0, r1
 8006a2a:	4611      	mov	r1, r2
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	4603      	mov	r3, r0
 8006a30:	70fb      	strb	r3, [r7, #3]
 8006a32:	460b      	mov	r3, r1
 8006a34:	70bb      	strb	r3, [r7, #2]
 8006a36:	4613      	mov	r3, r2
 8006a38:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006a42:	78fb      	ldrb	r3, [r7, #3]
 8006a44:	015a      	lsls	r2, r3, #5
 8006a46:	693b      	ldr	r3, [r7, #16]
 8006a48:	4413      	add	r3, r2
 8006a4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a4e:	461a      	mov	r2, r3
 8006a50:	f04f 33ff 	mov.w	r3, #4294967295
 8006a54:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006a56:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006a5a:	2b03      	cmp	r3, #3
 8006a5c:	d87e      	bhi.n	8006b5c <USB_HC_Init+0x13c>
 8006a5e:	a201      	add	r2, pc, #4	; (adr r2, 8006a64 <USB_HC_Init+0x44>)
 8006a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a64:	08006a75 	.word	0x08006a75
 8006a68:	08006b1f 	.word	0x08006b1f
 8006a6c:	08006a75 	.word	0x08006a75
 8006a70:	08006ae1 	.word	0x08006ae1
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006a74:	78fb      	ldrb	r3, [r7, #3]
 8006a76:	015a      	lsls	r2, r3, #5
 8006a78:	693b      	ldr	r3, [r7, #16]
 8006a7a:	4413      	add	r3, r2
 8006a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a80:	461a      	mov	r2, r3
 8006a82:	f240 439d 	movw	r3, #1181	; 0x49d
 8006a86:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006a88:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	da10      	bge.n	8006ab2 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006a90:	78fb      	ldrb	r3, [r7, #3]
 8006a92:	015a      	lsls	r2, r3, #5
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	4413      	add	r3, r2
 8006a98:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006a9c:	68db      	ldr	r3, [r3, #12]
 8006a9e:	78fa      	ldrb	r2, [r7, #3]
 8006aa0:	0151      	lsls	r1, r2, #5
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	440a      	add	r2, r1
 8006aa6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006aaa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aae:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8006ab0:	e057      	b.n	8006b62 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d051      	beq.n	8006b62 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 8006abe:	78fb      	ldrb	r3, [r7, #3]
 8006ac0:	015a      	lsls	r2, r3, #5
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	4413      	add	r3, r2
 8006ac6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aca:	68db      	ldr	r3, [r3, #12]
 8006acc:	78fa      	ldrb	r2, [r7, #3]
 8006ace:	0151      	lsls	r1, r2, #5
 8006ad0:	693a      	ldr	r2, [r7, #16]
 8006ad2:	440a      	add	r2, r1
 8006ad4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ad8:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8006adc:	60d3      	str	r3, [r2, #12]
      break;
 8006ade:	e040      	b.n	8006b62 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006ae0:	78fb      	ldrb	r3, [r7, #3]
 8006ae2:	015a      	lsls	r2, r3, #5
 8006ae4:	693b      	ldr	r3, [r7, #16]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006aec:	461a      	mov	r2, r3
 8006aee:	f240 639d 	movw	r3, #1693	; 0x69d
 8006af2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006af4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	da34      	bge.n	8006b66 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006afc:	78fb      	ldrb	r3, [r7, #3]
 8006afe:	015a      	lsls	r2, r3, #5
 8006b00:	693b      	ldr	r3, [r7, #16]
 8006b02:	4413      	add	r3, r2
 8006b04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b08:	68db      	ldr	r3, [r3, #12]
 8006b0a:	78fa      	ldrb	r2, [r7, #3]
 8006b0c:	0151      	lsls	r1, r2, #5
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	440a      	add	r2, r1
 8006b12:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b16:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b1a:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006b1c:	e023      	b.n	8006b66 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006b1e:	78fb      	ldrb	r3, [r7, #3]
 8006b20:	015a      	lsls	r2, r3, #5
 8006b22:	693b      	ldr	r3, [r7, #16]
 8006b24:	4413      	add	r3, r2
 8006b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b2a:	461a      	mov	r2, r3
 8006b2c:	f240 2325 	movw	r3, #549	; 0x225
 8006b30:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006b32:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	da17      	bge.n	8006b6a <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006b3a:	78fb      	ldrb	r3, [r7, #3]
 8006b3c:	015a      	lsls	r2, r3, #5
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	4413      	add	r3, r2
 8006b42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b46:	68db      	ldr	r3, [r3, #12]
 8006b48:	78fa      	ldrb	r2, [r7, #3]
 8006b4a:	0151      	lsls	r1, r2, #5
 8006b4c:	693a      	ldr	r2, [r7, #16]
 8006b4e:	440a      	add	r2, r1
 8006b50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b54:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006b58:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006b5a:	e006      	b.n	8006b6a <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 8006b5c:	2301      	movs	r3, #1
 8006b5e:	77fb      	strb	r3, [r7, #31]
      break;
 8006b60:	e004      	b.n	8006b6c <USB_HC_Init+0x14c>
      break;
 8006b62:	bf00      	nop
 8006b64:	e002      	b.n	8006b6c <USB_HC_Init+0x14c>
      break;
 8006b66:	bf00      	nop
 8006b68:	e000      	b.n	8006b6c <USB_HC_Init+0x14c>
      break;
 8006b6a:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006b6c:	78fb      	ldrb	r3, [r7, #3]
 8006b6e:	015a      	lsls	r2, r3, #5
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	4413      	add	r3, r2
 8006b74:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006b78:	68db      	ldr	r3, [r3, #12]
 8006b7a:	78fa      	ldrb	r2, [r7, #3]
 8006b7c:	0151      	lsls	r1, r2, #5
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	440a      	add	r2, r1
 8006b82:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006b86:	f043 0302 	orr.w	r3, r3, #2
 8006b8a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b92:	699a      	ldr	r2, [r3, #24]
 8006b94:	78fb      	ldrb	r3, [r7, #3]
 8006b96:	f003 030f 	and.w	r3, r3, #15
 8006b9a:	2101      	movs	r1, #1
 8006b9c:	fa01 f303 	lsl.w	r3, r1, r3
 8006ba0:	6939      	ldr	r1, [r7, #16]
 8006ba2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	699b      	ldr	r3, [r3, #24]
 8006bae:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006bb6:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	da03      	bge.n	8006bc6 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006bc2:	61bb      	str	r3, [r7, #24]
 8006bc4:	e001      	b.n	8006bca <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8006bc6:	2300      	movs	r3, #0
 8006bc8:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	f7ff feff 	bl	80069ce <USB_GetHostSpeed>
 8006bd0:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006bd2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006bd6:	2b02      	cmp	r3, #2
 8006bd8:	d106      	bne.n	8006be8 <USB_HC_Init+0x1c8>
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	2b02      	cmp	r3, #2
 8006bde:	d003      	beq.n	8006be8 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006be0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	e001      	b.n	8006bec <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006be8:	2300      	movs	r3, #0
 8006bea:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006bec:	787b      	ldrb	r3, [r7, #1]
 8006bee:	059b      	lsls	r3, r3, #22
 8006bf0:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006bf4:	78bb      	ldrb	r3, [r7, #2]
 8006bf6:	02db      	lsls	r3, r3, #11
 8006bf8:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006bfc:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006bfe:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c02:	049b      	lsls	r3, r3, #18
 8006c04:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006c08:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006c0a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006c0c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006c10:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006c12:	69bb      	ldr	r3, [r7, #24]
 8006c14:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006c16:	78fb      	ldrb	r3, [r7, #3]
 8006c18:	0159      	lsls	r1, r3, #5
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	440b      	add	r3, r1
 8006c1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c22:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006c24:	697b      	ldr	r3, [r7, #20]
 8006c26:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006c28:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006c2a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c2e:	2b03      	cmp	r3, #3
 8006c30:	d003      	beq.n	8006c3a <USB_HC_Init+0x21a>
 8006c32:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006c36:	2b01      	cmp	r3, #1
 8006c38:	d10f      	bne.n	8006c5a <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006c3a:	78fb      	ldrb	r3, [r7, #3]
 8006c3c:	015a      	lsls	r2, r3, #5
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	4413      	add	r3, r2
 8006c42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	78fa      	ldrb	r2, [r7, #3]
 8006c4a:	0151      	lsls	r1, r2, #5
 8006c4c:	693a      	ldr	r2, [r7, #16]
 8006c4e:	440a      	add	r2, r1
 8006c50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006c54:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006c58:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006c5a:	7ffb      	ldrb	r3, [r7, #31]
}
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	3720      	adds	r7, #32
 8006c60:	46bd      	mov	sp, r7
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08c      	sub	sp, #48	; 0x30
 8006c68:	af02      	add	r7, sp, #8
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	60b9      	str	r1, [r7, #8]
 8006c6e:	4613      	mov	r3, r2
 8006c70:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006c76:	68bb      	ldr	r3, [r7, #8]
 8006c78:	785b      	ldrb	r3, [r3, #1]
 8006c7a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006c7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c80:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d02d      	beq.n	8006cea <USB_HC_StartXfer+0x86>
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	791b      	ldrb	r3, [r3, #4]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d129      	bne.n	8006cea <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8006c96:	79fb      	ldrb	r3, [r7, #7]
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d117      	bne.n	8006ccc <USB_HC_StartXfer+0x68>
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	79db      	ldrb	r3, [r3, #7]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d003      	beq.n	8006cac <USB_HC_StartXfer+0x48>
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	79db      	ldrb	r3, [r3, #7]
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d10f      	bne.n	8006ccc <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8006cac:	69fb      	ldr	r3, [r7, #28]
 8006cae:	015a      	lsls	r2, r3, #5
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	4413      	add	r3, r2
 8006cb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006cb8:	68db      	ldr	r3, [r3, #12]
 8006cba:	69fa      	ldr	r2, [r7, #28]
 8006cbc:	0151      	lsls	r1, r2, #5
 8006cbe:	6a3a      	ldr	r2, [r7, #32]
 8006cc0:	440a      	add	r2, r1
 8006cc2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006cca:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8006ccc:	79fb      	ldrb	r3, [r7, #7]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d10b      	bne.n	8006cea <USB_HC_StartXfer+0x86>
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	795b      	ldrb	r3, [r3, #5]
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d107      	bne.n	8006cea <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	785b      	ldrb	r3, [r3, #1]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	68f8      	ldr	r0, [r7, #12]
 8006ce2:	f000 fa0f 	bl	8007104 <USB_DoPing>
      return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e0f8      	b.n	8006edc <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006cea:	68bb      	ldr	r3, [r7, #8]
 8006cec:	695b      	ldr	r3, [r3, #20]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d018      	beq.n	8006d24 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006cf2:	68bb      	ldr	r3, [r7, #8]
 8006cf4:	695b      	ldr	r3, [r3, #20]
 8006cf6:	68ba      	ldr	r2, [r7, #8]
 8006cf8:	8912      	ldrh	r2, [r2, #8]
 8006cfa:	4413      	add	r3, r2
 8006cfc:	3b01      	subs	r3, #1
 8006cfe:	68ba      	ldr	r2, [r7, #8]
 8006d00:	8912      	ldrh	r2, [r2, #8]
 8006d02:	fbb3 f3f2 	udiv	r3, r3, r2
 8006d06:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8006d08:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8006d0a:	8b7b      	ldrh	r3, [r7, #26]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	d90b      	bls.n	8006d28 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8006d10:	8b7b      	ldrh	r3, [r7, #26]
 8006d12:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006d14:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d16:	68ba      	ldr	r2, [r7, #8]
 8006d18:	8912      	ldrh	r2, [r2, #8]
 8006d1a:	fb03 f202 	mul.w	r2, r3, r2
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	611a      	str	r2, [r3, #16]
 8006d22:	e001      	b.n	8006d28 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8006d24:	2301      	movs	r3, #1
 8006d26:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	78db      	ldrb	r3, [r3, #3]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d007      	beq.n	8006d40 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006d30:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	8912      	ldrh	r2, [r2, #8]
 8006d36:	fb03 f202 	mul.w	r2, r3, r2
 8006d3a:	68bb      	ldr	r3, [r7, #8]
 8006d3c:	611a      	str	r2, [r3, #16]
 8006d3e:	e003      	b.n	8006d48 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	695a      	ldr	r2, [r3, #20]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d48:	68bb      	ldr	r3, [r7, #8]
 8006d4a:	691b      	ldr	r3, [r3, #16]
 8006d4c:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006d50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8006d52:	04d9      	lsls	r1, r3, #19
 8006d54:	4b63      	ldr	r3, [pc, #396]	; (8006ee4 <USB_HC_StartXfer+0x280>)
 8006d56:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d58:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	7a9b      	ldrb	r3, [r3, #10]
 8006d5e:	075b      	lsls	r3, r3, #29
 8006d60:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d64:	69f9      	ldr	r1, [r7, #28]
 8006d66:	0148      	lsls	r0, r1, #5
 8006d68:	6a39      	ldr	r1, [r7, #32]
 8006d6a:	4401      	add	r1, r0
 8006d6c:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8006d70:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8006d72:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8006d74:	79fb      	ldrb	r3, [r7, #7]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d009      	beq.n	8006d8e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	68d9      	ldr	r1, [r3, #12]
 8006d7e:	69fb      	ldr	r3, [r7, #28]
 8006d80:	015a      	lsls	r2, r3, #5
 8006d82:	6a3b      	ldr	r3, [r7, #32]
 8006d84:	4413      	add	r3, r2
 8006d86:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006d8a:	460a      	mov	r2, r1
 8006d8c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8006d8e:	6a3b      	ldr	r3, [r7, #32]
 8006d90:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d94:	689b      	ldr	r3, [r3, #8]
 8006d96:	f003 0301 	and.w	r3, r3, #1
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	bf0c      	ite	eq
 8006d9e:	2301      	moveq	r3, #1
 8006da0:	2300      	movne	r3, #0
 8006da2:	b2db      	uxtb	r3, r3
 8006da4:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	015a      	lsls	r2, r3, #5
 8006daa:	6a3b      	ldr	r3, [r7, #32]
 8006dac:	4413      	add	r3, r2
 8006dae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	69fa      	ldr	r2, [r7, #28]
 8006db6:	0151      	lsls	r1, r2, #5
 8006db8:	6a3a      	ldr	r2, [r7, #32]
 8006dba:	440a      	add	r2, r1
 8006dbc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006dc0:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006dc4:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8006dc6:	69fb      	ldr	r3, [r7, #28]
 8006dc8:	015a      	lsls	r2, r3, #5
 8006dca:	6a3b      	ldr	r3, [r7, #32]
 8006dcc:	4413      	add	r3, r2
 8006dce:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	7e7b      	ldrb	r3, [r7, #25]
 8006dd6:	075b      	lsls	r3, r3, #29
 8006dd8:	69f9      	ldr	r1, [r7, #28]
 8006dda:	0148      	lsls	r0, r1, #5
 8006ddc:	6a39      	ldr	r1, [r7, #32]
 8006dde:	4401      	add	r1, r0
 8006de0:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8006de4:	4313      	orrs	r3, r2
 8006de6:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8006de8:	69fb      	ldr	r3, [r7, #28]
 8006dea:	015a      	lsls	r2, r3, #5
 8006dec:	6a3b      	ldr	r3, [r7, #32]
 8006dee:	4413      	add	r3, r2
 8006df0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006dfe:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8006e00:	68bb      	ldr	r3, [r7, #8]
 8006e02:	78db      	ldrb	r3, [r3, #3]
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d004      	beq.n	8006e12 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e0e:	613b      	str	r3, [r7, #16]
 8006e10:	e003      	b.n	8006e1a <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006e18:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8006e1a:	693b      	ldr	r3, [r7, #16]
 8006e1c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006e20:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	015a      	lsls	r2, r3, #5
 8006e26:	6a3b      	ldr	r3, [r7, #32]
 8006e28:	4413      	add	r3, r2
 8006e2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e2e:	461a      	mov	r2, r3
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8006e34:	79fb      	ldrb	r3, [r7, #7]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d001      	beq.n	8006e3e <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8006e3a:	2300      	movs	r3, #0
 8006e3c:	e04e      	b.n	8006edc <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	78db      	ldrb	r3, [r3, #3]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d149      	bne.n	8006eda <USB_HC_StartXfer+0x276>
 8006e46:	68bb      	ldr	r3, [r7, #8]
 8006e48:	695b      	ldr	r3, [r3, #20]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d045      	beq.n	8006eda <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8006e4e:	68bb      	ldr	r3, [r7, #8]
 8006e50:	79db      	ldrb	r3, [r3, #7]
 8006e52:	2b03      	cmp	r3, #3
 8006e54:	d830      	bhi.n	8006eb8 <USB_HC_StartXfer+0x254>
 8006e56:	a201      	add	r2, pc, #4	; (adr r2, 8006e5c <USB_HC_StartXfer+0x1f8>)
 8006e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5c:	08006e6d 	.word	0x08006e6d
 8006e60:	08006e91 	.word	0x08006e91
 8006e64:	08006e6d 	.word	0x08006e6d
 8006e68:	08006e91 	.word	0x08006e91
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e6c:	68bb      	ldr	r3, [r7, #8]
 8006e6e:	695b      	ldr	r3, [r3, #20]
 8006e70:	3303      	adds	r3, #3
 8006e72:	089b      	lsrs	r3, r3, #2
 8006e74:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8006e76:	8afa      	ldrh	r2, [r7, #22]
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e7c:	b29b      	uxth	r3, r3
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d91c      	bls.n	8006ebc <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	699b      	ldr	r3, [r3, #24]
 8006e86:	f043 0220 	orr.w	r2, r3, #32
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	619a      	str	r2, [r3, #24]
        }
        break;
 8006e8e:	e015      	b.n	8006ebc <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	695b      	ldr	r3, [r3, #20]
 8006e94:	3303      	adds	r3, #3
 8006e96:	089b      	lsrs	r3, r3, #2
 8006e98:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8006e9a:	8afa      	ldrh	r2, [r7, #22]
 8006e9c:	6a3b      	ldr	r3, [r7, #32]
 8006e9e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	b29b      	uxth	r3, r3
 8006ea6:	429a      	cmp	r2, r3
 8006ea8:	d90a      	bls.n	8006ec0 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	699b      	ldr	r3, [r3, #24]
 8006eae:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	619a      	str	r2, [r3, #24]
        }
        break;
 8006eb6:	e003      	b.n	8006ec0 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8006eb8:	bf00      	nop
 8006eba:	e002      	b.n	8006ec2 <USB_HC_StartXfer+0x25e>
        break;
 8006ebc:	bf00      	nop
 8006ebe:	e000      	b.n	8006ec2 <USB_HC_StartXfer+0x25e>
        break;
 8006ec0:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	68d9      	ldr	r1, [r3, #12]
 8006ec6:	68bb      	ldr	r3, [r7, #8]
 8006ec8:	785a      	ldrb	r2, [r3, #1]
 8006eca:	68bb      	ldr	r3, [r7, #8]
 8006ecc:	695b      	ldr	r3, [r3, #20]
 8006ece:	b29b      	uxth	r3, r3
 8006ed0:	2000      	movs	r0, #0
 8006ed2:	9000      	str	r0, [sp, #0]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f7ff fb5b 	bl	8006590 <USB_WritePacket>
  }

  return HAL_OK;
 8006eda:	2300      	movs	r3, #0
}
 8006edc:	4618      	mov	r0, r3
 8006ede:	3728      	adds	r7, #40	; 0x28
 8006ee0:	46bd      	mov	sp, r7
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	1ff80000 	.word	0x1ff80000

08006ee8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006efa:	695b      	ldr	r3, [r3, #20]
 8006efc:	b29b      	uxth	r3, r3
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f08:	4770      	bx	lr

08006f0a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8006f0a:	b480      	push	{r7}
 8006f0c:	b089      	sub	sp, #36	; 0x24
 8006f0e:	af00      	add	r7, sp, #0
 8006f10:	6078      	str	r0, [r7, #4]
 8006f12:	460b      	mov	r3, r1
 8006f14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	015a      	lsls	r2, r3, #5
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	4413      	add	r3, r2
 8006f2a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	0c9b      	lsrs	r3, r3, #18
 8006f32:	f003 0303 	and.w	r3, r3, #3
 8006f36:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	4413      	add	r3, r2
 8006f40:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	0fdb      	lsrs	r3, r3, #31
 8006f48:	f003 0301 	and.w	r3, r3, #1
 8006f4c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	689b      	ldr	r3, [r3, #8]
 8006f52:	f003 0320 	and.w	r3, r3, #32
 8006f56:	2b20      	cmp	r3, #32
 8006f58:	d104      	bne.n	8006f64 <USB_HC_Halt+0x5a>
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d101      	bne.n	8006f64 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8006f60:	2300      	movs	r3, #0
 8006f62:	e0c8      	b.n	80070f6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8006f64:	697b      	ldr	r3, [r7, #20]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d002      	beq.n	8006f70 <USB_HC_Halt+0x66>
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	2b02      	cmp	r3, #2
 8006f6e:	d163      	bne.n	8007038 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8006f70:	69bb      	ldr	r3, [r7, #24]
 8006f72:	015a      	lsls	r2, r3, #5
 8006f74:	69fb      	ldr	r3, [r7, #28]
 8006f76:	4413      	add	r3, r2
 8006f78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	69ba      	ldr	r2, [r7, #24]
 8006f80:	0151      	lsls	r1, r2, #5
 8006f82:	69fa      	ldr	r2, [r7, #28]
 8006f84:	440a      	add	r2, r1
 8006f86:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006f8a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006f8e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	689b      	ldr	r3, [r3, #8]
 8006f94:	f003 0320 	and.w	r3, r3, #32
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	f040 80ab 	bne.w	80070f4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006fa2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d133      	bne.n	8007012 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	015a      	lsls	r2, r3, #5
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	0151      	lsls	r1, r2, #5
 8006fbc:	69fa      	ldr	r2, [r7, #28]
 8006fbe:	440a      	add	r2, r1
 8006fc0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fc4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006fc8:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8006fca:	69bb      	ldr	r3, [r7, #24]
 8006fcc:	015a      	lsls	r2, r3, #5
 8006fce:	69fb      	ldr	r3, [r7, #28]
 8006fd0:	4413      	add	r3, r2
 8006fd2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	69ba      	ldr	r2, [r7, #24]
 8006fda:	0151      	lsls	r1, r2, #5
 8006fdc:	69fa      	ldr	r2, [r7, #28]
 8006fde:	440a      	add	r2, r1
 8006fe0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fe4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006fe8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	3301      	adds	r3, #1
 8006fee:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006ff6:	d81d      	bhi.n	8007034 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	015a      	lsls	r2, r3, #5
 8006ffc:	69fb      	ldr	r3, [r7, #28]
 8006ffe:	4413      	add	r3, r2
 8007000:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007004:	681b      	ldr	r3, [r3, #0]
 8007006:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800700a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800700e:	d0ec      	beq.n	8006fea <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007010:	e070      	b.n	80070f4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	015a      	lsls	r2, r3, #5
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	4413      	add	r3, r2
 800701a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	69ba      	ldr	r2, [r7, #24]
 8007022:	0151      	lsls	r1, r2, #5
 8007024:	69fa      	ldr	r2, [r7, #28]
 8007026:	440a      	add	r2, r1
 8007028:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800702c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007030:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007032:	e05f      	b.n	80070f4 <USB_HC_Halt+0x1ea>
            break;
 8007034:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007036:	e05d      	b.n	80070f4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007038:	69bb      	ldr	r3, [r7, #24]
 800703a:	015a      	lsls	r2, r3, #5
 800703c:	69fb      	ldr	r3, [r7, #28]
 800703e:	4413      	add	r3, r2
 8007040:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	69ba      	ldr	r2, [r7, #24]
 8007048:	0151      	lsls	r1, r2, #5
 800704a:	69fa      	ldr	r2, [r7, #28]
 800704c:	440a      	add	r2, r1
 800704e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007052:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007056:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007058:	69fb      	ldr	r3, [r7, #28]
 800705a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800705e:	691b      	ldr	r3, [r3, #16]
 8007060:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007064:	2b00      	cmp	r3, #0
 8007066:	d133      	bne.n	80070d0 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007068:	69bb      	ldr	r3, [r7, #24]
 800706a:	015a      	lsls	r2, r3, #5
 800706c:	69fb      	ldr	r3, [r7, #28]
 800706e:	4413      	add	r3, r2
 8007070:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	69ba      	ldr	r2, [r7, #24]
 8007078:	0151      	lsls	r1, r2, #5
 800707a:	69fa      	ldr	r2, [r7, #28]
 800707c:	440a      	add	r2, r1
 800707e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007082:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007086:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007088:	69bb      	ldr	r3, [r7, #24]
 800708a:	015a      	lsls	r2, r3, #5
 800708c:	69fb      	ldr	r3, [r7, #28]
 800708e:	4413      	add	r3, r2
 8007090:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	0151      	lsls	r1, r2, #5
 800709a:	69fa      	ldr	r2, [r7, #28]
 800709c:	440a      	add	r2, r1
 800709e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070a2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070a6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	3301      	adds	r3, #1
 80070ac:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80070b4:	d81d      	bhi.n	80070f2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80070b6:	69bb      	ldr	r3, [r7, #24]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80070c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80070cc:	d0ec      	beq.n	80070a8 <USB_HC_Halt+0x19e>
 80070ce:	e011      	b.n	80070f4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80070d0:	69bb      	ldr	r3, [r7, #24]
 80070d2:	015a      	lsls	r2, r3, #5
 80070d4:	69fb      	ldr	r3, [r7, #28]
 80070d6:	4413      	add	r3, r2
 80070d8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	69ba      	ldr	r2, [r7, #24]
 80070e0:	0151      	lsls	r1, r2, #5
 80070e2:	69fa      	ldr	r2, [r7, #28]
 80070e4:	440a      	add	r2, r1
 80070e6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80070ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070ee:	6013      	str	r3, [r2, #0]
 80070f0:	e000      	b.n	80070f4 <USB_HC_Halt+0x1ea>
          break;
 80070f2:	bf00      	nop
    }
  }

  return HAL_OK;
 80070f4:	2300      	movs	r3, #0
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3724      	adds	r7, #36	; 0x24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007100:	4770      	bx	lr
	...

08007104 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007104:	b480      	push	{r7}
 8007106:	b087      	sub	sp, #28
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
 800710c:	460b      	mov	r3, r1
 800710e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007114:	78fb      	ldrb	r3, [r7, #3]
 8007116:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007118:	2301      	movs	r3, #1
 800711a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	04da      	lsls	r2, r3, #19
 8007120:	4b15      	ldr	r3, [pc, #84]	; (8007178 <USB_DoPing+0x74>)
 8007122:	4013      	ands	r3, r2
 8007124:	693a      	ldr	r2, [r7, #16]
 8007126:	0151      	lsls	r1, r2, #5
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	440a      	add	r2, r1
 800712c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007130:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007134:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007136:	693b      	ldr	r3, [r7, #16]
 8007138:	015a      	lsls	r2, r3, #5
 800713a:	697b      	ldr	r3, [r7, #20]
 800713c:	4413      	add	r3, r2
 800713e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007146:	68bb      	ldr	r3, [r7, #8]
 8007148:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800714c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007154:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007156:	693b      	ldr	r3, [r7, #16]
 8007158:	015a      	lsls	r2, r3, #5
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	4413      	add	r3, r2
 800715e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007162:	461a      	mov	r2, r3
 8007164:	68bb      	ldr	r3, [r7, #8]
 8007166:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007168:	2300      	movs	r3, #0
}
 800716a:	4618      	mov	r0, r3
 800716c:	371c      	adds	r7, #28
 800716e:	46bd      	mov	sp, r7
 8007170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007174:	4770      	bx	lr
 8007176:	bf00      	nop
 8007178:	1ff80000 	.word	0x1ff80000

0800717c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b088      	sub	sp, #32
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007184:	2300      	movs	r3, #0
 8007186:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800718c:	2300      	movs	r3, #0
 800718e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f7ff f93b 	bl	800640c <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007196:	2110      	movs	r1, #16
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f7ff f995 	bl	80064c8 <USB_FlushTxFifo>
 800719e:	4603      	mov	r3, r0
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d001      	beq.n	80071a8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80071a4:	2301      	movs	r3, #1
 80071a6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f7ff f9c1 	bl	8006530 <USB_FlushRxFifo>
 80071ae:	4603      	mov	r3, r0
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d001      	beq.n	80071b8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80071b4:	2301      	movs	r3, #1
 80071b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80071b8:	2300      	movs	r3, #0
 80071ba:	61bb      	str	r3, [r7, #24]
 80071bc:	e01f      	b.n	80071fe <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80071be:	69bb      	ldr	r3, [r7, #24]
 80071c0:	015a      	lsls	r2, r3, #5
 80071c2:	697b      	ldr	r3, [r7, #20]
 80071c4:	4413      	add	r3, r2
 80071c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80071ce:	693b      	ldr	r3, [r7, #16]
 80071d0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80071d4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80071d6:	693b      	ldr	r3, [r7, #16]
 80071d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80071dc:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80071de:	693b      	ldr	r3, [r7, #16]
 80071e0:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80071e4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80071e6:	69bb      	ldr	r3, [r7, #24]
 80071e8:	015a      	lsls	r2, r3, #5
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	4413      	add	r3, r2
 80071ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071f2:	461a      	mov	r2, r3
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	3301      	adds	r3, #1
 80071fc:	61bb      	str	r3, [r7, #24]
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	2b0f      	cmp	r3, #15
 8007202:	d9dc      	bls.n	80071be <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007204:	2300      	movs	r3, #0
 8007206:	61bb      	str	r3, [r7, #24]
 8007208:	e034      	b.n	8007274 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	015a      	lsls	r2, r3, #5
 800720e:	697b      	ldr	r3, [r7, #20]
 8007210:	4413      	add	r3, r2
 8007212:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007220:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007222:	693b      	ldr	r3, [r7, #16]
 8007224:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007228:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007230:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007232:	69bb      	ldr	r3, [r7, #24]
 8007234:	015a      	lsls	r2, r3, #5
 8007236:	697b      	ldr	r3, [r7, #20]
 8007238:	4413      	add	r3, r2
 800723a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723e:	461a      	mov	r2, r3
 8007240:	693b      	ldr	r3, [r7, #16]
 8007242:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3301      	adds	r3, #1
 8007248:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007250:	d80c      	bhi.n	800726c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007252:	69bb      	ldr	r3, [r7, #24]
 8007254:	015a      	lsls	r2, r3, #5
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	4413      	add	r3, r2
 800725a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007264:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007268:	d0ec      	beq.n	8007244 <USB_StopHost+0xc8>
 800726a:	e000      	b.n	800726e <USB_StopHost+0xf2>
        break;
 800726c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800726e:	69bb      	ldr	r3, [r7, #24]
 8007270:	3301      	adds	r3, #1
 8007272:	61bb      	str	r3, [r7, #24]
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	2b0f      	cmp	r3, #15
 8007278:	d9c7      	bls.n	800720a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007280:	461a      	mov	r2, r3
 8007282:	f04f 33ff 	mov.w	r3, #4294967295
 8007286:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f04f 32ff 	mov.w	r2, #4294967295
 800728e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007290:	6878      	ldr	r0, [r7, #4]
 8007292:	f7ff f8aa 	bl	80063ea <USB_EnableGlobalInt>

  return ret;
 8007296:	7ffb      	ldrb	r3, [r7, #31]
}
 8007298:	4618      	mov	r0, r3
 800729a:	3720      	adds	r7, #32
 800729c:	46bd      	mov	sp, r7
 800729e:	bd80      	pop	{r7, pc}

080072a0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80072a0:	b590      	push	{r4, r7, lr}
 80072a2:	b089      	sub	sp, #36	; 0x24
 80072a4:	af04      	add	r7, sp, #16
 80072a6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80072a8:	2301      	movs	r3, #1
 80072aa:	2202      	movs	r2, #2
 80072ac:	2102      	movs	r1, #2
 80072ae:	6878      	ldr	r0, [r7, #4]
 80072b0:	f000 fc66 	bl	8007b80 <USBH_FindInterface>
 80072b4:	4603      	mov	r3, r0
 80072b6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80072b8:	7bfb      	ldrb	r3, [r7, #15]
 80072ba:	2bff      	cmp	r3, #255	; 0xff
 80072bc:	d002      	beq.n	80072c4 <USBH_CDC_InterfaceInit+0x24>
 80072be:	7bfb      	ldrb	r3, [r7, #15]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d901      	bls.n	80072c8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80072c4:	2302      	movs	r3, #2
 80072c6:	e13d      	b.n	8007544 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80072c8:	7bfb      	ldrb	r3, [r7, #15]
 80072ca:	4619      	mov	r1, r3
 80072cc:	6878      	ldr	r0, [r7, #4]
 80072ce:	f000 fc3b 	bl	8007b48 <USBH_SelectInterface>
 80072d2:	4603      	mov	r3, r0
 80072d4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80072d6:	7bbb      	ldrb	r3, [r7, #14]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d001      	beq.n	80072e0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80072dc:	2302      	movs	r3, #2
 80072de:	e131      	b.n	8007544 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 80072e6:	2050      	movs	r0, #80	; 0x50
 80072e8:	f001 fb12 	bl	8008910 <malloc>
 80072ec:	4603      	mov	r3, r0
 80072ee:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80072f6:	69db      	ldr	r3, [r3, #28]
 80072f8:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 80072fa:	68bb      	ldr	r3, [r7, #8]
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d101      	bne.n	8007304 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007300:	2302      	movs	r3, #2
 8007302:	e11f      	b.n	8007544 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007304:	2250      	movs	r2, #80	; 0x50
 8007306:	2100      	movs	r1, #0
 8007308:	68b8      	ldr	r0, [r7, #8]
 800730a:	f001 fb11 	bl	8008930 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800730e:	7bfb      	ldrb	r3, [r7, #15]
 8007310:	687a      	ldr	r2, [r7, #4]
 8007312:	211a      	movs	r1, #26
 8007314:	fb01 f303 	mul.w	r3, r1, r3
 8007318:	4413      	add	r3, r2
 800731a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800731e:	781b      	ldrb	r3, [r3, #0]
 8007320:	b25b      	sxtb	r3, r3
 8007322:	2b00      	cmp	r3, #0
 8007324:	da15      	bge.n	8007352 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	687a      	ldr	r2, [r7, #4]
 800732a:	211a      	movs	r1, #26
 800732c:	fb01 f303 	mul.w	r3, r1, r3
 8007330:	4413      	add	r3, r2
 8007332:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007336:	781a      	ldrb	r2, [r3, #0]
 8007338:	68bb      	ldr	r3, [r7, #8]
 800733a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800733c:	7bfb      	ldrb	r3, [r7, #15]
 800733e:	687a      	ldr	r2, [r7, #4]
 8007340:	211a      	movs	r1, #26
 8007342:	fb01 f303 	mul.w	r3, r1, r3
 8007346:	4413      	add	r3, r2
 8007348:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800734c:	881a      	ldrh	r2, [r3, #0]
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007352:	68bb      	ldr	r3, [r7, #8]
 8007354:	785b      	ldrb	r3, [r3, #1]
 8007356:	4619      	mov	r1, r3
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 ff9c 	bl	8008296 <USBH_AllocPipe>
 800735e:	4603      	mov	r3, r0
 8007360:	461a      	mov	r2, r3
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	7819      	ldrb	r1, [r3, #0]
 800736a:	68bb      	ldr	r3, [r7, #8]
 800736c:	7858      	ldrb	r0, [r3, #1]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800737a:	68ba      	ldr	r2, [r7, #8]
 800737c:	8952      	ldrh	r2, [r2, #10]
 800737e:	9202      	str	r2, [sp, #8]
 8007380:	2203      	movs	r2, #3
 8007382:	9201      	str	r2, [sp, #4]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	4623      	mov	r3, r4
 8007388:	4602      	mov	r2, r0
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 ff54 	bl	8008238 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007390:	68bb      	ldr	r3, [r7, #8]
 8007392:	781b      	ldrb	r3, [r3, #0]
 8007394:	2200      	movs	r2, #0
 8007396:	4619      	mov	r1, r3
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	f001 fa17 	bl	80087cc <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800739e:	2300      	movs	r3, #0
 80073a0:	2200      	movs	r2, #0
 80073a2:	210a      	movs	r1, #10
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 fbeb 	bl	8007b80 <USBH_FindInterface>
 80073aa:	4603      	mov	r3, r0
 80073ac:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
 80073b0:	2bff      	cmp	r3, #255	; 0xff
 80073b2:	d002      	beq.n	80073ba <USBH_CDC_InterfaceInit+0x11a>
 80073b4:	7bfb      	ldrb	r3, [r7, #15]
 80073b6:	2b01      	cmp	r3, #1
 80073b8:	d901      	bls.n	80073be <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80073ba:	2302      	movs	r3, #2
 80073bc:	e0c2      	b.n	8007544 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80073be:	7bfb      	ldrb	r3, [r7, #15]
 80073c0:	687a      	ldr	r2, [r7, #4]
 80073c2:	211a      	movs	r1, #26
 80073c4:	fb01 f303 	mul.w	r3, r1, r3
 80073c8:	4413      	add	r3, r2
 80073ca:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80073ce:	781b      	ldrb	r3, [r3, #0]
 80073d0:	b25b      	sxtb	r3, r3
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	da16      	bge.n	8007404 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80073d6:	7bfb      	ldrb	r3, [r7, #15]
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	211a      	movs	r1, #26
 80073dc:	fb01 f303 	mul.w	r3, r1, r3
 80073e0:	4413      	add	r3, r2
 80073e2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80073e6:	781a      	ldrb	r2, [r3, #0]
 80073e8:	68bb      	ldr	r3, [r7, #8]
 80073ea:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80073ec:	7bfb      	ldrb	r3, [r7, #15]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	211a      	movs	r1, #26
 80073f2:	fb01 f303 	mul.w	r3, r1, r3
 80073f6:	4413      	add	r3, r2
 80073f8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80073fc:	881a      	ldrh	r2, [r3, #0]
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	835a      	strh	r2, [r3, #26]
 8007402:	e015      	b.n	8007430 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007404:	7bfb      	ldrb	r3, [r7, #15]
 8007406:	687a      	ldr	r2, [r7, #4]
 8007408:	211a      	movs	r1, #26
 800740a:	fb01 f303 	mul.w	r3, r1, r3
 800740e:	4413      	add	r3, r2
 8007410:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007414:	781a      	ldrb	r2, [r3, #0]
 8007416:	68bb      	ldr	r3, [r7, #8]
 8007418:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800741a:	7bfb      	ldrb	r3, [r7, #15]
 800741c:	687a      	ldr	r2, [r7, #4]
 800741e:	211a      	movs	r1, #26
 8007420:	fb01 f303 	mul.w	r3, r1, r3
 8007424:	4413      	add	r3, r2
 8007426:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800742a:	881a      	ldrh	r2, [r3, #0]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007430:	7bfb      	ldrb	r3, [r7, #15]
 8007432:	687a      	ldr	r2, [r7, #4]
 8007434:	211a      	movs	r1, #26
 8007436:	fb01 f303 	mul.w	r3, r1, r3
 800743a:	4413      	add	r3, r2
 800743c:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007440:	781b      	ldrb	r3, [r3, #0]
 8007442:	b25b      	sxtb	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	da16      	bge.n	8007476 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	687a      	ldr	r2, [r7, #4]
 800744c:	211a      	movs	r1, #26
 800744e:	fb01 f303 	mul.w	r3, r1, r3
 8007452:	4413      	add	r3, r2
 8007454:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007458:	781a      	ldrb	r2, [r3, #0]
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800745e:	7bfb      	ldrb	r3, [r7, #15]
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	211a      	movs	r1, #26
 8007464:	fb01 f303 	mul.w	r3, r1, r3
 8007468:	4413      	add	r3, r2
 800746a:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800746e:	881a      	ldrh	r2, [r3, #0]
 8007470:	68bb      	ldr	r3, [r7, #8]
 8007472:	835a      	strh	r2, [r3, #26]
 8007474:	e015      	b.n	80074a2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007476:	7bfb      	ldrb	r3, [r7, #15]
 8007478:	687a      	ldr	r2, [r7, #4]
 800747a:	211a      	movs	r1, #26
 800747c:	fb01 f303 	mul.w	r3, r1, r3
 8007480:	4413      	add	r3, r2
 8007482:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007486:	781a      	ldrb	r2, [r3, #0]
 8007488:	68bb      	ldr	r3, [r7, #8]
 800748a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800748c:	7bfb      	ldrb	r3, [r7, #15]
 800748e:	687a      	ldr	r2, [r7, #4]
 8007490:	211a      	movs	r1, #26
 8007492:	fb01 f303 	mul.w	r3, r1, r3
 8007496:	4413      	add	r3, r2
 8007498:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800749c:	881a      	ldrh	r2, [r3, #0]
 800749e:	68bb      	ldr	r3, [r7, #8]
 80074a0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	7b9b      	ldrb	r3, [r3, #14]
 80074a6:	4619      	mov	r1, r3
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fef4 	bl	8008296 <USBH_AllocPipe>
 80074ae:	4603      	mov	r3, r0
 80074b0:	461a      	mov	r2, r3
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80074b6:	68bb      	ldr	r3, [r7, #8]
 80074b8:	7bdb      	ldrb	r3, [r3, #15]
 80074ba:	4619      	mov	r1, r3
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f000 feea 	bl	8008296 <USBH_AllocPipe>
 80074c2:	4603      	mov	r3, r0
 80074c4:	461a      	mov	r2, r3
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	7b59      	ldrb	r1, [r3, #13]
 80074ce:	68bb      	ldr	r3, [r7, #8]
 80074d0:	7b98      	ldrb	r0, [r3, #14]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80074de:	68ba      	ldr	r2, [r7, #8]
 80074e0:	8b12      	ldrh	r2, [r2, #24]
 80074e2:	9202      	str	r2, [sp, #8]
 80074e4:	2202      	movs	r2, #2
 80074e6:	9201      	str	r2, [sp, #4]
 80074e8:	9300      	str	r3, [sp, #0]
 80074ea:	4623      	mov	r3, r4
 80074ec:	4602      	mov	r2, r0
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f000 fea2 	bl	8008238 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	7b19      	ldrb	r1, [r3, #12]
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	7bd8      	ldrb	r0, [r3, #15]
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007508:	68ba      	ldr	r2, [r7, #8]
 800750a:	8b52      	ldrh	r2, [r2, #26]
 800750c:	9202      	str	r2, [sp, #8]
 800750e:	2202      	movs	r2, #2
 8007510:	9201      	str	r2, [sp, #4]
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	4623      	mov	r3, r4
 8007516:	4602      	mov	r2, r0
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 fe8d 	bl	8008238 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2200      	movs	r2, #0
 8007522:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8007526:	68bb      	ldr	r3, [r7, #8]
 8007528:	7b5b      	ldrb	r3, [r3, #13]
 800752a:	2200      	movs	r2, #0
 800752c:	4619      	mov	r1, r3
 800752e:	6878      	ldr	r0, [r7, #4]
 8007530:	f001 f94c 	bl	80087cc <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	7b1b      	ldrb	r3, [r3, #12]
 8007538:	2200      	movs	r2, #0
 800753a:	4619      	mov	r1, r3
 800753c:	6878      	ldr	r0, [r7, #4]
 800753e:	f001 f945 	bl	80087cc <USBH_LL_SetToggle>

  return USBH_OK;
 8007542:	2300      	movs	r3, #0
}
 8007544:	4618      	mov	r0, r3
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	bd90      	pop	{r4, r7, pc}

0800754c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800754c:	b580      	push	{r7, lr}
 800754e:	b084      	sub	sp, #16
 8007550:	af00      	add	r7, sp, #0
 8007552:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800755a:	69db      	ldr	r3, [r3, #28]
 800755c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	2b00      	cmp	r3, #0
 8007564:	d00e      	beq.n	8007584 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	4619      	mov	r1, r3
 800756c:	6878      	ldr	r0, [r7, #4]
 800756e:	f000 fe82 	bl	8008276 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	781b      	ldrb	r3, [r3, #0]
 8007576:	4619      	mov	r1, r3
 8007578:	6878      	ldr	r0, [r7, #4]
 800757a:	f000 fead 	bl	80082d8 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8007584:	68fb      	ldr	r3, [r7, #12]
 8007586:	7b1b      	ldrb	r3, [r3, #12]
 8007588:	2b00      	cmp	r3, #0
 800758a:	d00e      	beq.n	80075aa <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	7b1b      	ldrb	r3, [r3, #12]
 8007590:	4619      	mov	r1, r3
 8007592:	6878      	ldr	r0, [r7, #4]
 8007594:	f000 fe6f 	bl	8008276 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	7b1b      	ldrb	r3, [r3, #12]
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 fe9a 	bl	80082d8 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2200      	movs	r2, #0
 80075a8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	7b5b      	ldrb	r3, [r3, #13]
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00e      	beq.n	80075d0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	7b5b      	ldrb	r3, [r3, #13]
 80075b6:	4619      	mov	r1, r3
 80075b8:	6878      	ldr	r0, [r7, #4]
 80075ba:	f000 fe5c 	bl	8008276 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	7b5b      	ldrb	r3, [r3, #13]
 80075c2:	4619      	mov	r1, r3
 80075c4:	6878      	ldr	r0, [r7, #4]
 80075c6:	f000 fe87 	bl	80082d8 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	2200      	movs	r2, #0
 80075ce:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075d6:	69db      	ldr	r3, [r3, #28]
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00b      	beq.n	80075f4 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075e2:	69db      	ldr	r3, [r3, #28]
 80075e4:	4618      	mov	r0, r3
 80075e6:	f001 f99b 	bl	8008920 <free>
    phost->pActiveClass->pData = 0U;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80075f0:	2200      	movs	r2, #0
 80075f2:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 80075f4:	2300      	movs	r3, #0
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800760c:	69db      	ldr	r3, [r3, #28]
 800760e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	3340      	adds	r3, #64	; 0x40
 8007614:	4619      	mov	r1, r3
 8007616:	6878      	ldr	r0, [r7, #4]
 8007618:	f000 f8b1 	bl	800777e <GetLineCoding>
 800761c:	4603      	mov	r3, r0
 800761e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007620:	7afb      	ldrb	r3, [r7, #11]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d105      	bne.n	8007632 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 800762c:	2102      	movs	r1, #2
 800762e:	6878      	ldr	r0, [r7, #4]
 8007630:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007632:	7afb      	ldrb	r3, [r7, #11]
}
 8007634:	4618      	mov	r0, r3
 8007636:	3710      	adds	r7, #16
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}

0800763c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b084      	sub	sp, #16
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8007644:	2301      	movs	r3, #1
 8007646:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8007656:	68bb      	ldr	r3, [r7, #8]
 8007658:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 800765c:	2b04      	cmp	r3, #4
 800765e:	d877      	bhi.n	8007750 <USBH_CDC_Process+0x114>
 8007660:	a201      	add	r2, pc, #4	; (adr r2, 8007668 <USBH_CDC_Process+0x2c>)
 8007662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007666:	bf00      	nop
 8007668:	0800767d 	.word	0x0800767d
 800766c:	08007683 	.word	0x08007683
 8007670:	080076b3 	.word	0x080076b3
 8007674:	08007727 	.word	0x08007727
 8007678:	08007735 	.word	0x08007735
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800767c:	2300      	movs	r3, #0
 800767e:	73fb      	strb	r3, [r7, #15]
      break;
 8007680:	e06d      	b.n	800775e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007686:	4619      	mov	r1, r3
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 f897 	bl	80077bc <SetLineCoding>
 800768e:	4603      	mov	r3, r0
 8007690:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007692:	7bbb      	ldrb	r3, [r7, #14]
 8007694:	2b00      	cmp	r3, #0
 8007696:	d104      	bne.n	80076a2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	2202      	movs	r2, #2
 800769c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80076a0:	e058      	b.n	8007754 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80076a2:	7bbb      	ldrb	r3, [r7, #14]
 80076a4:	2b01      	cmp	r3, #1
 80076a6:	d055      	beq.n	8007754 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80076a8:	68bb      	ldr	r3, [r7, #8]
 80076aa:	2204      	movs	r2, #4
 80076ac:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80076b0:	e050      	b.n	8007754 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80076b2:	68bb      	ldr	r3, [r7, #8]
 80076b4:	3340      	adds	r3, #64	; 0x40
 80076b6:	4619      	mov	r1, r3
 80076b8:	6878      	ldr	r0, [r7, #4]
 80076ba:	f000 f860 	bl	800777e <GetLineCoding>
 80076be:	4603      	mov	r3, r0
 80076c0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80076c2:	7bbb      	ldrb	r3, [r7, #14]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d126      	bne.n	8007716 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80076d6:	68bb      	ldr	r3, [r7, #8]
 80076d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076da:	791b      	ldrb	r3, [r3, #4]
 80076dc:	429a      	cmp	r2, r3
 80076de:	d13b      	bne.n	8007758 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80076e0:	68bb      	ldr	r3, [r7, #8]
 80076e2:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076ea:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80076ec:	429a      	cmp	r2, r3
 80076ee:	d133      	bne.n	8007758 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 80076f6:	68bb      	ldr	r3, [r7, #8]
 80076f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80076fa:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d12b      	bne.n	8007758 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007708:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800770a:	429a      	cmp	r2, r3
 800770c:	d124      	bne.n	8007758 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f958 	bl	80079c4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8007714:	e020      	b.n	8007758 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8007716:	7bbb      	ldrb	r3, [r7, #14]
 8007718:	2b01      	cmp	r3, #1
 800771a:	d01d      	beq.n	8007758 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800771c:	68bb      	ldr	r3, [r7, #8]
 800771e:	2204      	movs	r2, #4
 8007720:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8007724:	e018      	b.n	8007758 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8007726:	6878      	ldr	r0, [r7, #4]
 8007728:	f000 f867 	bl	80077fa <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800772c:	6878      	ldr	r0, [r7, #4]
 800772e:	f000 f8da 	bl	80078e6 <CDC_ProcessReception>
      break;
 8007732:	e014      	b.n	800775e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8007734:	2100      	movs	r1, #0
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fb08 	bl	8007d4c <USBH_ClrFeature>
 800773c:	4603      	mov	r3, r0
 800773e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007740:	7bbb      	ldrb	r3, [r7, #14]
 8007742:	2b00      	cmp	r3, #0
 8007744:	d10a      	bne.n	800775c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	2200      	movs	r2, #0
 800774a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 800774e:	e005      	b.n	800775c <USBH_CDC_Process+0x120>

    default:
      break;
 8007750:	bf00      	nop
 8007752:	e004      	b.n	800775e <USBH_CDC_Process+0x122>
      break;
 8007754:	bf00      	nop
 8007756:	e002      	b.n	800775e <USBH_CDC_Process+0x122>
      break;
 8007758:	bf00      	nop
 800775a:	e000      	b.n	800775e <USBH_CDC_Process+0x122>
      break;
 800775c:	bf00      	nop

  }

  return status;
 800775e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007760:	4618      	mov	r0, r3
 8007762:	3710      	adds	r7, #16
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8007770:	2300      	movs	r3, #0
}
 8007772:	4618      	mov	r0, r3
 8007774:	370c      	adds	r7, #12
 8007776:	46bd      	mov	sp, r7
 8007778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777c:	4770      	bx	lr

0800777e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800777e:	b580      	push	{r7, lr}
 8007780:	b082      	sub	sp, #8
 8007782:	af00      	add	r7, sp, #0
 8007784:	6078      	str	r0, [r7, #4]
 8007786:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	22a1      	movs	r2, #161	; 0xa1
 800778c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2221      	movs	r2, #33	; 0x21
 8007792:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	2200      	movs	r2, #0
 800779e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2207      	movs	r2, #7
 80077a4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80077a6:	683b      	ldr	r3, [r7, #0]
 80077a8:	2207      	movs	r2, #7
 80077aa:	4619      	mov	r1, r3
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 faf1 	bl	8007d94 <USBH_CtlReq>
 80077b2:	4603      	mov	r3, r0
}
 80077b4:	4618      	mov	r0, r3
 80077b6:	3708      	adds	r7, #8
 80077b8:	46bd      	mov	sp, r7
 80077ba:	bd80      	pop	{r7, pc}

080077bc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b082      	sub	sp, #8
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
 80077c4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2221      	movs	r2, #33	; 0x21
 80077ca:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2220      	movs	r2, #32
 80077d0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2200      	movs	r2, #0
 80077d6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2207      	movs	r2, #7
 80077e2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80077e4:	683b      	ldr	r3, [r7, #0]
 80077e6:	2207      	movs	r2, #7
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 fad2 	bl	8007d94 <USBH_CtlReq>
 80077f0:	4603      	mov	r3, r0
}
 80077f2:	4618      	mov	r0, r3
 80077f4:	3708      	adds	r7, #8
 80077f6:	46bd      	mov	sp, r7
 80077f8:	bd80      	pop	{r7, pc}

080077fa <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 80077fa:	b580      	push	{r7, lr}
 80077fc:	b086      	sub	sp, #24
 80077fe:	af02      	add	r7, sp, #8
 8007800:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007808:	69db      	ldr	r3, [r3, #28]
 800780a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800780c:	2300      	movs	r3, #0
 800780e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007816:	2b01      	cmp	r3, #1
 8007818:	d002      	beq.n	8007820 <CDC_ProcessTransmission+0x26>
 800781a:	2b02      	cmp	r3, #2
 800781c:	d023      	beq.n	8007866 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800781e:	e05e      	b.n	80078de <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	8b12      	ldrh	r2, [r2, #24]
 8007828:	4293      	cmp	r3, r2
 800782a:	d90b      	bls.n	8007844 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	69d9      	ldr	r1, [r3, #28]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	8b1a      	ldrh	r2, [r3, #24]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	7b5b      	ldrb	r3, [r3, #13]
 8007838:	2001      	movs	r0, #1
 800783a:	9000      	str	r0, [sp, #0]
 800783c:	6878      	ldr	r0, [r7, #4]
 800783e:	f000 fcb8 	bl	80081b2 <USBH_BulkSendData>
 8007842:	e00b      	b.n	800785c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 800784c:	b29a      	uxth	r2, r3
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	7b5b      	ldrb	r3, [r3, #13]
 8007852:	2001      	movs	r0, #1
 8007854:	9000      	str	r0, [sp, #0]
 8007856:	6878      	ldr	r0, [r7, #4]
 8007858:	f000 fcab 	bl	80081b2 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2202      	movs	r2, #2
 8007860:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007864:	e03b      	b.n	80078de <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	7b5b      	ldrb	r3, [r3, #13]
 800786a:	4619      	mov	r1, r3
 800786c:	6878      	ldr	r0, [r7, #4]
 800786e:	f000 ff83 	bl	8008778 <USBH_LL_GetURBState>
 8007872:	4603      	mov	r3, r0
 8007874:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007876:	7afb      	ldrb	r3, [r7, #11]
 8007878:	2b01      	cmp	r3, #1
 800787a:	d128      	bne.n	80078ce <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	8b12      	ldrh	r2, [r2, #24]
 8007884:	4293      	cmp	r3, r2
 8007886:	d90e      	bls.n	80078a6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	68fa      	ldr	r2, [r7, #12]
 800788e:	8b12      	ldrh	r2, [r2, #24]
 8007890:	1a9a      	subs	r2, r3, r2
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	69db      	ldr	r3, [r3, #28]
 800789a:	68fa      	ldr	r2, [r7, #12]
 800789c:	8b12      	ldrh	r2, [r2, #24]
 800789e:	441a      	add	r2, r3
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	61da      	str	r2, [r3, #28]
 80078a4:	e002      	b.n	80078ac <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	2200      	movs	r2, #0
 80078aa:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078b0:	2b00      	cmp	r3, #0
 80078b2:	d004      	beq.n	80078be <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	2201      	movs	r2, #1
 80078b8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80078bc:	e00e      	b.n	80078dc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 80078c6:	6878      	ldr	r0, [r7, #4]
 80078c8:	f000 f868 	bl	800799c <USBH_CDC_TransmitCallback>
      break;
 80078cc:	e006      	b.n	80078dc <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80078ce:	7afb      	ldrb	r3, [r7, #11]
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d103      	bne.n	80078dc <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2201      	movs	r2, #1
 80078d8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80078dc:	bf00      	nop
  }
}
 80078de:	bf00      	nop
 80078e0:	3710      	adds	r7, #16
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}

080078e6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80078e6:	b580      	push	{r7, lr}
 80078e8:	b086      	sub	sp, #24
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80078f4:	69db      	ldr	r3, [r3, #28]
 80078f6:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80078f8:	2300      	movs	r3, #0
 80078fa:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 80078fc:	697b      	ldr	r3, [r7, #20]
 80078fe:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007902:	2b03      	cmp	r3, #3
 8007904:	d002      	beq.n	800790c <CDC_ProcessReception+0x26>
 8007906:	2b04      	cmp	r3, #4
 8007908:	d00e      	beq.n	8007928 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800790a:	e043      	b.n	8007994 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	6a19      	ldr	r1, [r3, #32]
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	8b5a      	ldrh	r2, [r3, #26]
 8007914:	697b      	ldr	r3, [r7, #20]
 8007916:	7b1b      	ldrb	r3, [r3, #12]
 8007918:	6878      	ldr	r0, [r7, #4]
 800791a:	f000 fc6f 	bl	80081fc <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800791e:	697b      	ldr	r3, [r7, #20]
 8007920:	2204      	movs	r2, #4
 8007922:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007926:	e035      	b.n	8007994 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007928:	697b      	ldr	r3, [r7, #20]
 800792a:	7b1b      	ldrb	r3, [r3, #12]
 800792c:	4619      	mov	r1, r3
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 ff22 	bl	8008778 <USBH_LL_GetURBState>
 8007934:	4603      	mov	r3, r0
 8007936:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007938:	7cfb      	ldrb	r3, [r7, #19]
 800793a:	2b01      	cmp	r3, #1
 800793c:	d129      	bne.n	8007992 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800793e:	697b      	ldr	r3, [r7, #20]
 8007940:	7b1b      	ldrb	r3, [r3, #12]
 8007942:	4619      	mov	r1, r3
 8007944:	6878      	ldr	r0, [r7, #4]
 8007946:	f000 fe85 	bl	8008654 <USBH_LL_GetLastXferSize>
 800794a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800794c:	697b      	ldr	r3, [r7, #20]
 800794e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007950:	68fa      	ldr	r2, [r7, #12]
 8007952:	429a      	cmp	r2, r3
 8007954:	d016      	beq.n	8007984 <CDC_ProcessReception+0x9e>
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	8b5b      	ldrh	r3, [r3, #26]
 800795a:	461a      	mov	r2, r3
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	4293      	cmp	r3, r2
 8007960:	d910      	bls.n	8007984 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007962:	697b      	ldr	r3, [r7, #20]
 8007964:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	1ad2      	subs	r2, r2, r3
 800796a:	697b      	ldr	r3, [r7, #20]
 800796c:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 800796e:	697b      	ldr	r3, [r7, #20]
 8007970:	6a1a      	ldr	r2, [r3, #32]
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	441a      	add	r2, r3
 8007976:	697b      	ldr	r3, [r7, #20]
 8007978:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	2203      	movs	r2, #3
 800797e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007982:	e006      	b.n	8007992 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007984:	697b      	ldr	r3, [r7, #20]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800798c:	6878      	ldr	r0, [r7, #4]
 800798e:	f000 f80f 	bl	80079b0 <USBH_CDC_ReceiveCallback>
      break;
 8007992:	bf00      	nop
  }
}
 8007994:	bf00      	nop
 8007996:	3718      	adds	r7, #24
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80079c4:	b480      	push	{r7}
 80079c6:	b083      	sub	sp, #12
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80079cc:	bf00      	nop
 80079ce:	370c      	adds	r7, #12
 80079d0:	46bd      	mov	sp, r7
 80079d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d6:	4770      	bx	lr

080079d8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 80079d8:	b580      	push	{r7, lr}
 80079da:	b084      	sub	sp, #16
 80079dc:	af00      	add	r7, sp, #0
 80079de:	60f8      	str	r0, [r7, #12]
 80079e0:	60b9      	str	r1, [r7, #8]
 80079e2:	4613      	mov	r3, r2
 80079e4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d101      	bne.n	80079f0 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80079ec:	2302      	movs	r3, #2
 80079ee:	e029      	b.n	8007a44 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	79fa      	ldrb	r2, [r7, #7]
 80079f4:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	2200      	movs	r2, #0
 80079fc:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	2200      	movs	r2, #0
 8007a04:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8007a08:	68f8      	ldr	r0, [r7, #12]
 8007a0a:	f000 f81f 	bl	8007a4c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	2200      	movs	r2, #0
 8007a12:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	2200      	movs	r2, #0
 8007a22:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007a2e:	68bb      	ldr	r3, [r7, #8]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d003      	beq.n	8007a3c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 fd97 	bl	8008570 <USBH_LL_Init>

  return USBH_OK;
 8007a42:	2300      	movs	r3, #0
}
 8007a44:	4618      	mov	r0, r3
 8007a46:	3710      	adds	r7, #16
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007a4c:	b480      	push	{r7}
 8007a4e:	b085      	sub	sp, #20
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007a54:	2300      	movs	r3, #0
 8007a56:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a58:	2300      	movs	r3, #0
 8007a5a:	60fb      	str	r3, [r7, #12]
 8007a5c:	e009      	b.n	8007a72 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007a5e:	687a      	ldr	r2, [r7, #4]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	33e0      	adds	r3, #224	; 0xe0
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4413      	add	r3, r2
 8007a68:	2200      	movs	r2, #0
 8007a6a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	3301      	adds	r3, #1
 8007a70:	60fb      	str	r3, [r7, #12]
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	2b0f      	cmp	r3, #15
 8007a76:	d9f2      	bls.n	8007a5e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a78:	2300      	movs	r3, #0
 8007a7a:	60fb      	str	r3, [r7, #12]
 8007a7c:	e009      	b.n	8007a92 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007a7e:	687a      	ldr	r2, [r7, #4]
 8007a80:	68fb      	ldr	r3, [r7, #12]
 8007a82:	4413      	add	r3, r2
 8007a84:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007a88:	2200      	movs	r2, #0
 8007a8a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	3301      	adds	r3, #1
 8007a90:	60fb      	str	r3, [r7, #12]
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a98:	d3f1      	bcc.n	8007a7e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	2200      	movs	r2, #0
 8007aa4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2201      	movs	r2, #1
 8007aaa:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2201      	movs	r2, #1
 8007ab8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2240      	movs	r2, #64	; 0x40
 8007abe:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2201      	movs	r2, #1
 8007ad2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	2200      	movs	r2, #0
 8007ada:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	2200      	movs	r2, #0
 8007ae2:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007ae6:	2300      	movs	r3, #0
}
 8007ae8:	4618      	mov	r0, r3
 8007aea:	3714      	adds	r7, #20
 8007aec:	46bd      	mov	sp, r7
 8007aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af2:	4770      	bx	lr

08007af4 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007afe:	2300      	movs	r3, #0
 8007b00:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d016      	beq.n	8007b36 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10e      	bne.n	8007b30 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007b18:	1c59      	adds	r1, r3, #1
 8007b1a:	687a      	ldr	r2, [r7, #4]
 8007b1c:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007b20:	687a      	ldr	r2, [r7, #4]
 8007b22:	33de      	adds	r3, #222	; 0xde
 8007b24:	6839      	ldr	r1, [r7, #0]
 8007b26:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	73fb      	strb	r3, [r7, #15]
 8007b2e:	e004      	b.n	8007b3a <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007b30:	2302      	movs	r3, #2
 8007b32:	73fb      	strb	r3, [r7, #15]
 8007b34:	e001      	b.n	8007b3a <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007b36:	2302      	movs	r3, #2
 8007b38:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3714      	adds	r7, #20
 8007b40:	46bd      	mov	sp, r7
 8007b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b46:	4770      	bx	lr

08007b48 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007b48:	b480      	push	{r7}
 8007b4a:	b085      	sub	sp, #20
 8007b4c:	af00      	add	r7, sp, #0
 8007b4e:	6078      	str	r0, [r7, #4]
 8007b50:	460b      	mov	r3, r1
 8007b52:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007b54:	2300      	movs	r3, #0
 8007b56:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007b5e:	78fa      	ldrb	r2, [r7, #3]
 8007b60:	429a      	cmp	r2, r3
 8007b62:	d204      	bcs.n	8007b6e <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	78fa      	ldrb	r2, [r7, #3]
 8007b68:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007b6c:	e001      	b.n	8007b72 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007b6e:	2302      	movs	r3, #2
 8007b70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b74:	4618      	mov	r0, r3
 8007b76:	3714      	adds	r7, #20
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007b80:	b480      	push	{r7}
 8007b82:	b087      	sub	sp, #28
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	6078      	str	r0, [r7, #4]
 8007b88:	4608      	mov	r0, r1
 8007b8a:	4611      	mov	r1, r2
 8007b8c:	461a      	mov	r2, r3
 8007b8e:	4603      	mov	r3, r0
 8007b90:	70fb      	strb	r3, [r7, #3]
 8007b92:	460b      	mov	r3, r1
 8007b94:	70bb      	strb	r3, [r7, #2]
 8007b96:	4613      	mov	r3, r2
 8007b98:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007b9a:	2300      	movs	r3, #0
 8007b9c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8007b9e:	2300      	movs	r3, #0
 8007ba0:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007ba8:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007baa:	e025      	b.n	8007bf8 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007bac:	7dfb      	ldrb	r3, [r7, #23]
 8007bae:	221a      	movs	r2, #26
 8007bb0:	fb02 f303 	mul.w	r3, r2, r3
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	68fa      	ldr	r2, [r7, #12]
 8007bb8:	4413      	add	r3, r2
 8007bba:	3302      	adds	r3, #2
 8007bbc:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007bbe:	693b      	ldr	r3, [r7, #16]
 8007bc0:	795b      	ldrb	r3, [r3, #5]
 8007bc2:	78fa      	ldrb	r2, [r7, #3]
 8007bc4:	429a      	cmp	r2, r3
 8007bc6:	d002      	beq.n	8007bce <USBH_FindInterface+0x4e>
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	2bff      	cmp	r3, #255	; 0xff
 8007bcc:	d111      	bne.n	8007bf2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bce:	693b      	ldr	r3, [r7, #16]
 8007bd0:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007bd2:	78ba      	ldrb	r2, [r7, #2]
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	d002      	beq.n	8007bde <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007bd8:	78bb      	ldrb	r3, [r7, #2]
 8007bda:	2bff      	cmp	r3, #255	; 0xff
 8007bdc:	d109      	bne.n	8007bf2 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007bde:	693b      	ldr	r3, [r7, #16]
 8007be0:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007be2:	787a      	ldrb	r2, [r7, #1]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	d002      	beq.n	8007bee <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007be8:	787b      	ldrb	r3, [r7, #1]
 8007bea:	2bff      	cmp	r3, #255	; 0xff
 8007bec:	d101      	bne.n	8007bf2 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007bee:	7dfb      	ldrb	r3, [r7, #23]
 8007bf0:	e006      	b.n	8007c00 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007bf2:	7dfb      	ldrb	r3, [r7, #23]
 8007bf4:	3301      	adds	r3, #1
 8007bf6:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007bf8:	7dfb      	ldrb	r3, [r7, #23]
 8007bfa:	2b01      	cmp	r3, #1
 8007bfc:	d9d6      	bls.n	8007bac <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007bfe:	23ff      	movs	r3, #255	; 0xff
}
 8007c00:	4618      	mov	r0, r3
 8007c02:	371c      	adds	r7, #28
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b082      	sub	sp, #8
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8007c14:	6878      	ldr	r0, [r7, #4]
 8007c16:	f000 fce7 	bl	80085e8 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8007c1a:	2101      	movs	r1, #1
 8007c1c:	6878      	ldr	r0, [r7, #4]
 8007c1e:	f000 fdbe 	bl	800879e <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007c22:	2300      	movs	r3, #0
}
 8007c24:	4618      	mov	r0, r3
 8007c26:	3708      	adds	r7, #8
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	bd80      	pop	{r7, pc}

08007c2c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007c2c:	b480      	push	{r7}
 8007c2e:	b083      	sub	sp, #12
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	683a      	ldr	r2, [r7, #0]
 8007c3a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007c3e:	bf00      	nop
 8007c40:	370c      	adds	r7, #12
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr

08007c4a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007c4a:	b580      	push	{r7, lr}
 8007c4c:	b082      	sub	sp, #8
 8007c4e:	af00      	add	r7, sp, #0
 8007c50:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c58:	1c5a      	adds	r2, r3, #1
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007c60:	6878      	ldr	r0, [r7, #4]
 8007c62:	f000 f804 	bl	8007c6e <USBH_HandleSof>
}
 8007c66:	bf00      	nop
 8007c68:	3708      	adds	r7, #8
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	bd80      	pop	{r7, pc}

08007c6e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007c6e:	b580      	push	{r7, lr}
 8007c70:	b082      	sub	sp, #8
 8007c72:	af00      	add	r7, sp, #0
 8007c74:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	781b      	ldrb	r3, [r3, #0]
 8007c7a:	b2db      	uxtb	r3, r3
 8007c7c:	2b0b      	cmp	r3, #11
 8007c7e:	d10a      	bne.n	8007c96 <USBH_HandleSof+0x28>
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d005      	beq.n	8007c96 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007c90:	699b      	ldr	r3, [r3, #24]
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	4798      	blx	r3
  }
}
 8007c96:	bf00      	nop
 8007c98:	3708      	adds	r7, #8
 8007c9a:	46bd      	mov	sp, r7
 8007c9c:	bd80      	pop	{r7, pc}

08007c9e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007c9e:	b480      	push	{r7}
 8007ca0:	b083      	sub	sp, #12
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	2201      	movs	r2, #1
 8007caa:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8007cae:	bf00      	nop
}
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr

08007cba <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007cba:	b480      	push	{r7}
 8007cbc:	b083      	sub	sp, #12
 8007cbe:	af00      	add	r7, sp, #0
 8007cc0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2200      	movs	r2, #0
 8007cc6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007cca:	bf00      	nop
}
 8007ccc:	370c      	adds	r7, #12
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd4:	4770      	bx	lr

08007cd6 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007cd6:	b480      	push	{r7}
 8007cd8:	b083      	sub	sp, #12
 8007cda:	af00      	add	r7, sp, #0
 8007cdc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2201      	movs	r2, #1
 8007ce2:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007cf6:	2300      	movs	r3, #0
}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	370c      	adds	r7, #12
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d02:	4770      	bx	lr

08007d04 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	2201      	movs	r2, #1
 8007d10:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2200      	movs	r2, #0
 8007d18:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2200      	movs	r2, #0
 8007d20:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007d24:	6878      	ldr	r0, [r7, #4]
 8007d26:	f000 fc7a 	bl	800861e <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	791b      	ldrb	r3, [r3, #4]
 8007d2e:	4619      	mov	r1, r3
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 fad1 	bl	80082d8 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	795b      	ldrb	r3, [r3, #5]
 8007d3a:	4619      	mov	r1, r3
 8007d3c:	6878      	ldr	r0, [r7, #4]
 8007d3e:	f000 facb 	bl	80082d8 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007d42:	2300      	movs	r3, #0
}
 8007d44:	4618      	mov	r0, r3
 8007d46:	3708      	adds	r7, #8
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	bd80      	pop	{r7, pc}

08007d4c <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b082      	sub	sp, #8
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	460b      	mov	r3, r1
 8007d56:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	789b      	ldrb	r3, [r3, #2]
 8007d5c:	2b01      	cmp	r3, #1
 8007d5e:	d10f      	bne.n	8007d80 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	2202      	movs	r2, #2
 8007d64:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	2201      	movs	r2, #1
 8007d6a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	2200      	movs	r2, #0
 8007d70:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007d72:	78fb      	ldrb	r3, [r7, #3]
 8007d74:	b29a      	uxth	r2, r3
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	2200      	movs	r2, #0
 8007d7e:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 8007d80:	2200      	movs	r2, #0
 8007d82:	2100      	movs	r1, #0
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f805 	bl	8007d94 <USBH_CtlReq>
 8007d8a:	4603      	mov	r3, r0
}
 8007d8c:	4618      	mov	r0, r3
 8007d8e:	3708      	adds	r7, #8
 8007d90:	46bd      	mov	sp, r7
 8007d92:	bd80      	pop	{r7, pc}

08007d94 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007d94:	b580      	push	{r7, lr}
 8007d96:	b086      	sub	sp, #24
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	60f8      	str	r0, [r7, #12]
 8007d9c:	60b9      	str	r1, [r7, #8]
 8007d9e:	4613      	mov	r3, r2
 8007da0:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007da2:	2301      	movs	r3, #1
 8007da4:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	789b      	ldrb	r3, [r3, #2]
 8007daa:	2b01      	cmp	r3, #1
 8007dac:	d002      	beq.n	8007db4 <USBH_CtlReq+0x20>
 8007dae:	2b02      	cmp	r3, #2
 8007db0:	d00f      	beq.n	8007dd2 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007db2:	e027      	b.n	8007e04 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007db4:	68fb      	ldr	r3, [r7, #12]
 8007db6:	68ba      	ldr	r2, [r7, #8]
 8007db8:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	88fa      	ldrh	r2, [r7, #6]
 8007dbe:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	2201      	movs	r2, #1
 8007dc4:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	2202      	movs	r2, #2
 8007dca:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007dcc:	2301      	movs	r3, #1
 8007dce:	75fb      	strb	r3, [r7, #23]
      break;
 8007dd0:	e018      	b.n	8007e04 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 f81c 	bl	8007e10 <USBH_HandleControl>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007ddc:	7dfb      	ldrb	r3, [r7, #23]
 8007dde:	2b00      	cmp	r3, #0
 8007de0:	d002      	beq.n	8007de8 <USBH_CtlReq+0x54>
 8007de2:	7dfb      	ldrb	r3, [r7, #23]
 8007de4:	2b03      	cmp	r3, #3
 8007de6:	d106      	bne.n	8007df6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	2201      	movs	r2, #1
 8007dec:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	2200      	movs	r2, #0
 8007df2:	761a      	strb	r2, [r3, #24]
      break;
 8007df4:	e005      	b.n	8007e02 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007df6:	7dfb      	ldrb	r3, [r7, #23]
 8007df8:	2b02      	cmp	r3, #2
 8007dfa:	d102      	bne.n	8007e02 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2201      	movs	r2, #1
 8007e00:	709a      	strb	r2, [r3, #2]
      break;
 8007e02:	bf00      	nop
  }
  return status;
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e06:	4618      	mov	r0, r3
 8007e08:	3718      	adds	r7, #24
 8007e0a:	46bd      	mov	sp, r7
 8007e0c:	bd80      	pop	{r7, pc}
	...

08007e10 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007e10:	b580      	push	{r7, lr}
 8007e12:	b086      	sub	sp, #24
 8007e14:	af02      	add	r7, sp, #8
 8007e16:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007e18:	2301      	movs	r3, #1
 8007e1a:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007e1c:	2300      	movs	r3, #0
 8007e1e:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	7e1b      	ldrb	r3, [r3, #24]
 8007e24:	3b01      	subs	r3, #1
 8007e26:	2b0a      	cmp	r3, #10
 8007e28:	f200 8156 	bhi.w	80080d8 <USBH_HandleControl+0x2c8>
 8007e2c:	a201      	add	r2, pc, #4	; (adr r2, 8007e34 <USBH_HandleControl+0x24>)
 8007e2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e32:	bf00      	nop
 8007e34:	08007e61 	.word	0x08007e61
 8007e38:	08007e7b 	.word	0x08007e7b
 8007e3c:	08007ee5 	.word	0x08007ee5
 8007e40:	08007f0b 	.word	0x08007f0b
 8007e44:	08007f43 	.word	0x08007f43
 8007e48:	08007f6d 	.word	0x08007f6d
 8007e4c:	08007fbf 	.word	0x08007fbf
 8007e50:	08007fe1 	.word	0x08007fe1
 8007e54:	0800801d 	.word	0x0800801d
 8007e58:	08008043 	.word	0x08008043
 8007e5c:	08008081 	.word	0x08008081
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f103 0110 	add.w	r1, r3, #16
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	795b      	ldrb	r3, [r3, #5]
 8007e6a:	461a      	mov	r2, r3
 8007e6c:	6878      	ldr	r0, [r7, #4]
 8007e6e:	f000 f943 	bl	80080f8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	2202      	movs	r2, #2
 8007e76:	761a      	strb	r2, [r3, #24]
      break;
 8007e78:	e139      	b.n	80080ee <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	795b      	ldrb	r3, [r3, #5]
 8007e7e:	4619      	mov	r1, r3
 8007e80:	6878      	ldr	r0, [r7, #4]
 8007e82:	f000 fc79 	bl	8008778 <USBH_LL_GetURBState>
 8007e86:	4603      	mov	r3, r0
 8007e88:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007e8a:	7bbb      	ldrb	r3, [r7, #14]
 8007e8c:	2b01      	cmp	r3, #1
 8007e8e:	d11e      	bne.n	8007ece <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	7c1b      	ldrb	r3, [r3, #16]
 8007e94:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007e98:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	8adb      	ldrh	r3, [r3, #22]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d00a      	beq.n	8007eb8 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007ea2:	7b7b      	ldrb	r3, [r7, #13]
 8007ea4:	2b80      	cmp	r3, #128	; 0x80
 8007ea6:	d103      	bne.n	8007eb0 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2203      	movs	r2, #3
 8007eac:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007eae:	e115      	b.n	80080dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	2205      	movs	r2, #5
 8007eb4:	761a      	strb	r2, [r3, #24]
      break;
 8007eb6:	e111      	b.n	80080dc <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007eb8:	7b7b      	ldrb	r3, [r7, #13]
 8007eba:	2b80      	cmp	r3, #128	; 0x80
 8007ebc:	d103      	bne.n	8007ec6 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2209      	movs	r2, #9
 8007ec2:	761a      	strb	r2, [r3, #24]
      break;
 8007ec4:	e10a      	b.n	80080dc <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2207      	movs	r2, #7
 8007eca:	761a      	strb	r2, [r3, #24]
      break;
 8007ecc:	e106      	b.n	80080dc <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	d003      	beq.n	8007edc <USBH_HandleControl+0xcc>
 8007ed4:	7bbb      	ldrb	r3, [r7, #14]
 8007ed6:	2b02      	cmp	r3, #2
 8007ed8:	f040 8100 	bne.w	80080dc <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	220b      	movs	r2, #11
 8007ee0:	761a      	strb	r2, [r3, #24]
      break;
 8007ee2:	e0fb      	b.n	80080dc <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007eea:	b29a      	uxth	r2, r3
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	6899      	ldr	r1, [r3, #8]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	899a      	ldrh	r2, [r3, #12]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	791b      	ldrb	r3, [r3, #4]
 8007efc:	6878      	ldr	r0, [r7, #4]
 8007efe:	f000 f93a 	bl	8008176 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	2204      	movs	r2, #4
 8007f06:	761a      	strb	r2, [r3, #24]
      break;
 8007f08:	e0f1      	b.n	80080ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	791b      	ldrb	r3, [r3, #4]
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 fc31 	bl	8008778 <USBH_LL_GetURBState>
 8007f16:	4603      	mov	r3, r0
 8007f18:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007f1a:	7bbb      	ldrb	r3, [r7, #14]
 8007f1c:	2b01      	cmp	r3, #1
 8007f1e:	d102      	bne.n	8007f26 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	2209      	movs	r2, #9
 8007f24:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
 8007f28:	2b05      	cmp	r3, #5
 8007f2a:	d102      	bne.n	8007f32 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007f2c:	2303      	movs	r3, #3
 8007f2e:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f30:	e0d6      	b.n	80080e0 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007f32:	7bbb      	ldrb	r3, [r7, #14]
 8007f34:	2b04      	cmp	r3, #4
 8007f36:	f040 80d3 	bne.w	80080e0 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	220b      	movs	r2, #11
 8007f3e:	761a      	strb	r2, [r3, #24]
      break;
 8007f40:	e0ce      	b.n	80080e0 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6899      	ldr	r1, [r3, #8]
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	899a      	ldrh	r2, [r3, #12]
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	795b      	ldrb	r3, [r3, #5]
 8007f4e:	2001      	movs	r0, #1
 8007f50:	9000      	str	r0, [sp, #0]
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f8ea 	bl	800812c <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007f5e:	b29a      	uxth	r2, r3
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2206      	movs	r2, #6
 8007f68:	761a      	strb	r2, [r3, #24]
      break;
 8007f6a:	e0c0      	b.n	80080ee <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	795b      	ldrb	r3, [r3, #5]
 8007f70:	4619      	mov	r1, r3
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f000 fc00 	bl	8008778 <USBH_LL_GetURBState>
 8007f78:	4603      	mov	r3, r0
 8007f7a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007f7c:	7bbb      	ldrb	r3, [r7, #14]
 8007f7e:	2b01      	cmp	r3, #1
 8007f80:	d103      	bne.n	8007f8a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2207      	movs	r2, #7
 8007f86:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007f88:	e0ac      	b.n	80080e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007f8a:	7bbb      	ldrb	r3, [r7, #14]
 8007f8c:	2b05      	cmp	r3, #5
 8007f8e:	d105      	bne.n	8007f9c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	220c      	movs	r2, #12
 8007f94:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007f96:	2303      	movs	r3, #3
 8007f98:	73fb      	strb	r3, [r7, #15]
      break;
 8007f9a:	e0a3      	b.n	80080e4 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007f9c:	7bbb      	ldrb	r3, [r7, #14]
 8007f9e:	2b02      	cmp	r3, #2
 8007fa0:	d103      	bne.n	8007faa <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	2205      	movs	r2, #5
 8007fa6:	761a      	strb	r2, [r3, #24]
      break;
 8007fa8:	e09c      	b.n	80080e4 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007faa:	7bbb      	ldrb	r3, [r7, #14]
 8007fac:	2b04      	cmp	r3, #4
 8007fae:	f040 8099 	bne.w	80080e4 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	220b      	movs	r2, #11
 8007fb6:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007fb8:	2302      	movs	r3, #2
 8007fba:	73fb      	strb	r3, [r7, #15]
      break;
 8007fbc:	e092      	b.n	80080e4 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	791b      	ldrb	r3, [r3, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	2100      	movs	r1, #0
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f000 f8d5 	bl	8008176 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007fd2:	b29a      	uxth	r2, r3
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2208      	movs	r2, #8
 8007fdc:	761a      	strb	r2, [r3, #24]

      break;
 8007fde:	e086      	b.n	80080ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	791b      	ldrb	r3, [r3, #4]
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	6878      	ldr	r0, [r7, #4]
 8007fe8:	f000 fbc6 	bl	8008778 <USBH_LL_GetURBState>
 8007fec:	4603      	mov	r3, r0
 8007fee:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ff0:	7bbb      	ldrb	r3, [r7, #14]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d105      	bne.n	8008002 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	220d      	movs	r2, #13
 8007ffa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008000:	e072      	b.n	80080e8 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8008002:	7bbb      	ldrb	r3, [r7, #14]
 8008004:	2b04      	cmp	r3, #4
 8008006:	d103      	bne.n	8008010 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	220b      	movs	r2, #11
 800800c:	761a      	strb	r2, [r3, #24]
      break;
 800800e:	e06b      	b.n	80080e8 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008010:	7bbb      	ldrb	r3, [r7, #14]
 8008012:	2b05      	cmp	r3, #5
 8008014:	d168      	bne.n	80080e8 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8008016:	2303      	movs	r3, #3
 8008018:	73fb      	strb	r3, [r7, #15]
      break;
 800801a:	e065      	b.n	80080e8 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	795b      	ldrb	r3, [r3, #5]
 8008020:	2201      	movs	r2, #1
 8008022:	9200      	str	r2, [sp, #0]
 8008024:	2200      	movs	r2, #0
 8008026:	2100      	movs	r1, #0
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f000 f87f 	bl	800812c <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008034:	b29a      	uxth	r2, r3
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	220a      	movs	r2, #10
 800803e:	761a      	strb	r2, [r3, #24]
      break;
 8008040:	e055      	b.n	80080ee <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	795b      	ldrb	r3, [r3, #5]
 8008046:	4619      	mov	r1, r3
 8008048:	6878      	ldr	r0, [r7, #4]
 800804a:	f000 fb95 	bl	8008778 <USBH_LL_GetURBState>
 800804e:	4603      	mov	r3, r0
 8008050:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8008052:	7bbb      	ldrb	r3, [r7, #14]
 8008054:	2b01      	cmp	r3, #1
 8008056:	d105      	bne.n	8008064 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8008058:	2300      	movs	r3, #0
 800805a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	220d      	movs	r2, #13
 8008060:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8008062:	e043      	b.n	80080ec <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8008064:	7bbb      	ldrb	r3, [r7, #14]
 8008066:	2b02      	cmp	r3, #2
 8008068:	d103      	bne.n	8008072 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	2209      	movs	r2, #9
 800806e:	761a      	strb	r2, [r3, #24]
      break;
 8008070:	e03c      	b.n	80080ec <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8008072:	7bbb      	ldrb	r3, [r7, #14]
 8008074:	2b04      	cmp	r3, #4
 8008076:	d139      	bne.n	80080ec <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	220b      	movs	r2, #11
 800807c:	761a      	strb	r2, [r3, #24]
      break;
 800807e:	e035      	b.n	80080ec <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	7e5b      	ldrb	r3, [r3, #25]
 8008084:	3301      	adds	r3, #1
 8008086:	b2da      	uxtb	r2, r3
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	765a      	strb	r2, [r3, #25]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	7e5b      	ldrb	r3, [r3, #25]
 8008090:	2b02      	cmp	r3, #2
 8008092:	d806      	bhi.n	80080a2 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2201      	movs	r2, #1
 8008098:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	2201      	movs	r2, #1
 800809e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80080a0:	e025      	b.n	80080ee <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80080a8:	2106      	movs	r1, #6
 80080aa:	6878      	ldr	r0, [r7, #4]
 80080ac:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	2200      	movs	r2, #0
 80080b2:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	795b      	ldrb	r3, [r3, #5]
 80080b8:	4619      	mov	r1, r3
 80080ba:	6878      	ldr	r0, [r7, #4]
 80080bc:	f000 f90c 	bl	80082d8 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	791b      	ldrb	r3, [r3, #4]
 80080c4:	4619      	mov	r1, r3
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f906 	bl	80082d8 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 80080d2:	2302      	movs	r3, #2
 80080d4:	73fb      	strb	r3, [r7, #15]
      break;
 80080d6:	e00a      	b.n	80080ee <USBH_HandleControl+0x2de>

    default:
      break;
 80080d8:	bf00      	nop
 80080da:	e008      	b.n	80080ee <USBH_HandleControl+0x2de>
      break;
 80080dc:	bf00      	nop
 80080de:	e006      	b.n	80080ee <USBH_HandleControl+0x2de>
      break;
 80080e0:	bf00      	nop
 80080e2:	e004      	b.n	80080ee <USBH_HandleControl+0x2de>
      break;
 80080e4:	bf00      	nop
 80080e6:	e002      	b.n	80080ee <USBH_HandleControl+0x2de>
      break;
 80080e8:	bf00      	nop
 80080ea:	e000      	b.n	80080ee <USBH_HandleControl+0x2de>
      break;
 80080ec:	bf00      	nop
  }

  return status;
 80080ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3710      	adds	r7, #16
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b088      	sub	sp, #32
 80080fc:	af04      	add	r7, sp, #16
 80080fe:	60f8      	str	r0, [r7, #12]
 8008100:	60b9      	str	r1, [r7, #8]
 8008102:	4613      	mov	r3, r2
 8008104:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008106:	79f9      	ldrb	r1, [r7, #7]
 8008108:	2300      	movs	r3, #0
 800810a:	9303      	str	r3, [sp, #12]
 800810c:	2308      	movs	r3, #8
 800810e:	9302      	str	r3, [sp, #8]
 8008110:	68bb      	ldr	r3, [r7, #8]
 8008112:	9301      	str	r3, [sp, #4]
 8008114:	2300      	movs	r3, #0
 8008116:	9300      	str	r3, [sp, #0]
 8008118:	2300      	movs	r3, #0
 800811a:	2200      	movs	r2, #0
 800811c:	68f8      	ldr	r0, [r7, #12]
 800811e:	f000 fafa 	bl	8008716 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3710      	adds	r7, #16
 8008128:	46bd      	mov	sp, r7
 800812a:	bd80      	pop	{r7, pc}

0800812c <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800812c:	b580      	push	{r7, lr}
 800812e:	b088      	sub	sp, #32
 8008130:	af04      	add	r7, sp, #16
 8008132:	60f8      	str	r0, [r7, #12]
 8008134:	60b9      	str	r1, [r7, #8]
 8008136:	4611      	mov	r1, r2
 8008138:	461a      	mov	r2, r3
 800813a:	460b      	mov	r3, r1
 800813c:	80fb      	strh	r3, [r7, #6]
 800813e:	4613      	mov	r3, r2
 8008140:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008148:	2b00      	cmp	r3, #0
 800814a:	d001      	beq.n	8008150 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800814c:	2300      	movs	r3, #0
 800814e:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008150:	7979      	ldrb	r1, [r7, #5]
 8008152:	7e3b      	ldrb	r3, [r7, #24]
 8008154:	9303      	str	r3, [sp, #12]
 8008156:	88fb      	ldrh	r3, [r7, #6]
 8008158:	9302      	str	r3, [sp, #8]
 800815a:	68bb      	ldr	r3, [r7, #8]
 800815c:	9301      	str	r3, [sp, #4]
 800815e:	2301      	movs	r3, #1
 8008160:	9300      	str	r3, [sp, #0]
 8008162:	2300      	movs	r3, #0
 8008164:	2200      	movs	r2, #0
 8008166:	68f8      	ldr	r0, [r7, #12]
 8008168:	f000 fad5 	bl	8008716 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800816c:	2300      	movs	r3, #0
}
 800816e:	4618      	mov	r0, r3
 8008170:	3710      	adds	r7, #16
 8008172:	46bd      	mov	sp, r7
 8008174:	bd80      	pop	{r7, pc}

08008176 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8008176:	b580      	push	{r7, lr}
 8008178:	b088      	sub	sp, #32
 800817a:	af04      	add	r7, sp, #16
 800817c:	60f8      	str	r0, [r7, #12]
 800817e:	60b9      	str	r1, [r7, #8]
 8008180:	4611      	mov	r1, r2
 8008182:	461a      	mov	r2, r3
 8008184:	460b      	mov	r3, r1
 8008186:	80fb      	strh	r3, [r7, #6]
 8008188:	4613      	mov	r3, r2
 800818a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800818c:	7979      	ldrb	r1, [r7, #5]
 800818e:	2300      	movs	r3, #0
 8008190:	9303      	str	r3, [sp, #12]
 8008192:	88fb      	ldrh	r3, [r7, #6]
 8008194:	9302      	str	r3, [sp, #8]
 8008196:	68bb      	ldr	r3, [r7, #8]
 8008198:	9301      	str	r3, [sp, #4]
 800819a:	2301      	movs	r3, #1
 800819c:	9300      	str	r3, [sp, #0]
 800819e:	2300      	movs	r3, #0
 80081a0:	2201      	movs	r2, #1
 80081a2:	68f8      	ldr	r0, [r7, #12]
 80081a4:	f000 fab7 	bl	8008716 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 80081a8:	2300      	movs	r3, #0

}
 80081aa:	4618      	mov	r0, r3
 80081ac:	3710      	adds	r7, #16
 80081ae:	46bd      	mov	sp, r7
 80081b0:	bd80      	pop	{r7, pc}

080081b2 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80081b2:	b580      	push	{r7, lr}
 80081b4:	b088      	sub	sp, #32
 80081b6:	af04      	add	r7, sp, #16
 80081b8:	60f8      	str	r0, [r7, #12]
 80081ba:	60b9      	str	r1, [r7, #8]
 80081bc:	4611      	mov	r1, r2
 80081be:	461a      	mov	r2, r3
 80081c0:	460b      	mov	r3, r1
 80081c2:	80fb      	strh	r3, [r7, #6]
 80081c4:	4613      	mov	r3, r2
 80081c6:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d001      	beq.n	80081d6 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 80081d2:	2300      	movs	r3, #0
 80081d4:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 80081d6:	7979      	ldrb	r1, [r7, #5]
 80081d8:	7e3b      	ldrb	r3, [r7, #24]
 80081da:	9303      	str	r3, [sp, #12]
 80081dc:	88fb      	ldrh	r3, [r7, #6]
 80081de:	9302      	str	r3, [sp, #8]
 80081e0:	68bb      	ldr	r3, [r7, #8]
 80081e2:	9301      	str	r3, [sp, #4]
 80081e4:	2301      	movs	r3, #1
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	2302      	movs	r3, #2
 80081ea:	2200      	movs	r2, #0
 80081ec:	68f8      	ldr	r0, [r7, #12]
 80081ee:	f000 fa92 	bl	8008716 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 80081f2:	2300      	movs	r3, #0
}
 80081f4:	4618      	mov	r0, r3
 80081f6:	3710      	adds	r7, #16
 80081f8:	46bd      	mov	sp, r7
 80081fa:	bd80      	pop	{r7, pc}

080081fc <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b088      	sub	sp, #32
 8008200:	af04      	add	r7, sp, #16
 8008202:	60f8      	str	r0, [r7, #12]
 8008204:	60b9      	str	r1, [r7, #8]
 8008206:	4611      	mov	r1, r2
 8008208:	461a      	mov	r2, r3
 800820a:	460b      	mov	r3, r1
 800820c:	80fb      	strh	r3, [r7, #6]
 800820e:	4613      	mov	r3, r2
 8008210:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8008212:	7979      	ldrb	r1, [r7, #5]
 8008214:	2300      	movs	r3, #0
 8008216:	9303      	str	r3, [sp, #12]
 8008218:	88fb      	ldrh	r3, [r7, #6]
 800821a:	9302      	str	r3, [sp, #8]
 800821c:	68bb      	ldr	r3, [r7, #8]
 800821e:	9301      	str	r3, [sp, #4]
 8008220:	2301      	movs	r3, #1
 8008222:	9300      	str	r3, [sp, #0]
 8008224:	2302      	movs	r3, #2
 8008226:	2201      	movs	r2, #1
 8008228:	68f8      	ldr	r0, [r7, #12]
 800822a:	f000 fa74 	bl	8008716 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800822e:	2300      	movs	r3, #0
}
 8008230:	4618      	mov	r0, r3
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b086      	sub	sp, #24
 800823c:	af04      	add	r7, sp, #16
 800823e:	6078      	str	r0, [r7, #4]
 8008240:	4608      	mov	r0, r1
 8008242:	4611      	mov	r1, r2
 8008244:	461a      	mov	r2, r3
 8008246:	4603      	mov	r3, r0
 8008248:	70fb      	strb	r3, [r7, #3]
 800824a:	460b      	mov	r3, r1
 800824c:	70bb      	strb	r3, [r7, #2]
 800824e:	4613      	mov	r3, r2
 8008250:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8008252:	7878      	ldrb	r0, [r7, #1]
 8008254:	78ba      	ldrb	r2, [r7, #2]
 8008256:	78f9      	ldrb	r1, [r7, #3]
 8008258:	8b3b      	ldrh	r3, [r7, #24]
 800825a:	9302      	str	r3, [sp, #8]
 800825c:	7d3b      	ldrb	r3, [r7, #20]
 800825e:	9301      	str	r3, [sp, #4]
 8008260:	7c3b      	ldrb	r3, [r7, #16]
 8008262:	9300      	str	r3, [sp, #0]
 8008264:	4603      	mov	r3, r0
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa07 	bl	800867a <USBH_LL_OpenPipe>

  return USBH_OK;
 800826c:	2300      	movs	r3, #0
}
 800826e:	4618      	mov	r0, r3
 8008270:	3708      	adds	r7, #8
 8008272:	46bd      	mov	sp, r7
 8008274:	bd80      	pop	{r7, pc}

08008276 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8008276:	b580      	push	{r7, lr}
 8008278:	b082      	sub	sp, #8
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	460b      	mov	r3, r1
 8008280:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8008282:	78fb      	ldrb	r3, [r7, #3]
 8008284:	4619      	mov	r1, r3
 8008286:	6878      	ldr	r0, [r7, #4]
 8008288:	f000 fa26 	bl	80086d8 <USBH_LL_ClosePipe>

  return USBH_OK;
 800828c:	2300      	movs	r3, #0
}
 800828e:	4618      	mov	r0, r3
 8008290:	3708      	adds	r7, #8
 8008292:	46bd      	mov	sp, r7
 8008294:	bd80      	pop	{r7, pc}

08008296 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8008296:	b580      	push	{r7, lr}
 8008298:	b084      	sub	sp, #16
 800829a:	af00      	add	r7, sp, #0
 800829c:	6078      	str	r0, [r7, #4]
 800829e:	460b      	mov	r3, r1
 80082a0:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80082a2:	6878      	ldr	r0, [r7, #4]
 80082a4:	f000 f836 	bl	8008314 <USBH_GetFreePipe>
 80082a8:	4603      	mov	r3, r0
 80082aa:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80082ac:	89fb      	ldrh	r3, [r7, #14]
 80082ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d00a      	beq.n	80082cc <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 80082b6:	78fa      	ldrb	r2, [r7, #3]
 80082b8:	89fb      	ldrh	r3, [r7, #14]
 80082ba:	f003 030f 	and.w	r3, r3, #15
 80082be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80082c2:	6879      	ldr	r1, [r7, #4]
 80082c4:	33e0      	adds	r3, #224	; 0xe0
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	440b      	add	r3, r1
 80082ca:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 80082cc:	89fb      	ldrh	r3, [r7, #14]
 80082ce:	b2db      	uxtb	r3, r3
}
 80082d0:	4618      	mov	r0, r3
 80082d2:	3710      	adds	r7, #16
 80082d4:	46bd      	mov	sp, r7
 80082d6:	bd80      	pop	{r7, pc}

080082d8 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 80082d8:	b480      	push	{r7}
 80082da:	b083      	sub	sp, #12
 80082dc:	af00      	add	r7, sp, #0
 80082de:	6078      	str	r0, [r7, #4]
 80082e0:	460b      	mov	r3, r1
 80082e2:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 80082e4:	78fb      	ldrb	r3, [r7, #3]
 80082e6:	2b0f      	cmp	r3, #15
 80082e8:	d80d      	bhi.n	8008306 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 80082ea:	78fb      	ldrb	r3, [r7, #3]
 80082ec:	687a      	ldr	r2, [r7, #4]
 80082ee:	33e0      	adds	r3, #224	; 0xe0
 80082f0:	009b      	lsls	r3, r3, #2
 80082f2:	4413      	add	r3, r2
 80082f4:	685a      	ldr	r2, [r3, #4]
 80082f6:	78fb      	ldrb	r3, [r7, #3]
 80082f8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 80082fc:	6879      	ldr	r1, [r7, #4]
 80082fe:	33e0      	adds	r3, #224	; 0xe0
 8008300:	009b      	lsls	r3, r3, #2
 8008302:	440b      	add	r3, r1
 8008304:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8008306:	2300      	movs	r3, #0
}
 8008308:	4618      	mov	r0, r3
 800830a:	370c      	adds	r7, #12
 800830c:	46bd      	mov	sp, r7
 800830e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008312:	4770      	bx	lr

08008314 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8008314:	b480      	push	{r7}
 8008316:	b085      	sub	sp, #20
 8008318:	af00      	add	r7, sp, #0
 800831a:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800831c:	2300      	movs	r3, #0
 800831e:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008320:	2300      	movs	r3, #0
 8008322:	73fb      	strb	r3, [r7, #15]
 8008324:	e00f      	b.n	8008346 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8008326:	7bfb      	ldrb	r3, [r7, #15]
 8008328:	687a      	ldr	r2, [r7, #4]
 800832a:	33e0      	adds	r3, #224	; 0xe0
 800832c:	009b      	lsls	r3, r3, #2
 800832e:	4413      	add	r3, r2
 8008330:	685b      	ldr	r3, [r3, #4]
 8008332:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008336:	2b00      	cmp	r3, #0
 8008338:	d102      	bne.n	8008340 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800833a:	7bfb      	ldrb	r3, [r7, #15]
 800833c:	b29b      	uxth	r3, r3
 800833e:	e007      	b.n	8008350 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8008340:	7bfb      	ldrb	r3, [r7, #15]
 8008342:	3301      	adds	r3, #1
 8008344:	73fb      	strb	r3, [r7, #15]
 8008346:	7bfb      	ldrb	r3, [r7, #15]
 8008348:	2b0f      	cmp	r3, #15
 800834a:	d9ec      	bls.n	8008326 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800834c:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008350:	4618      	mov	r0, r3
 8008352:	3714      	adds	r7, #20
 8008354:	46bd      	mov	sp, r7
 8008356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835a:	4770      	bx	lr

0800835c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008360:	2201      	movs	r2, #1
 8008362:	490e      	ldr	r1, [pc, #56]	; (800839c <MX_USB_HOST_Init+0x40>)
 8008364:	480e      	ldr	r0, [pc, #56]	; (80083a0 <MX_USB_HOST_Init+0x44>)
 8008366:	f7ff fb37 	bl	80079d8 <USBH_Init>
 800836a:	4603      	mov	r3, r0
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008370:	f7f9 fcb0 	bl	8001cd4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008374:	490b      	ldr	r1, [pc, #44]	; (80083a4 <MX_USB_HOST_Init+0x48>)
 8008376:	480a      	ldr	r0, [pc, #40]	; (80083a0 <MX_USB_HOST_Init+0x44>)
 8008378:	f7ff fbbc 	bl	8007af4 <USBH_RegisterClass>
 800837c:	4603      	mov	r3, r0
 800837e:	2b00      	cmp	r3, #0
 8008380:	d001      	beq.n	8008386 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008382:	f7f9 fca7 	bl	8001cd4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008386:	4806      	ldr	r0, [pc, #24]	; (80083a0 <MX_USB_HOST_Init+0x44>)
 8008388:	f7ff fc40 	bl	8007c0c <USBH_Start>
 800838c:	4603      	mov	r3, r0
 800838e:	2b00      	cmp	r3, #0
 8008390:	d001      	beq.n	8008396 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008392:	f7f9 fc9f 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008396:	bf00      	nop
 8008398:	bd80      	pop	{r7, pc}
 800839a:	bf00      	nop
 800839c:	080083a9 	.word	0x080083a9
 80083a0:	20000404 	.word	0x20000404
 80083a4:	20000044 	.word	0x20000044

080083a8 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80083a8:	b480      	push	{r7}
 80083aa:	b083      	sub	sp, #12
 80083ac:	af00      	add	r7, sp, #0
 80083ae:	6078      	str	r0, [r7, #4]
 80083b0:	460b      	mov	r3, r1
 80083b2:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80083b4:	78fb      	ldrb	r3, [r7, #3]
 80083b6:	3b01      	subs	r3, #1
 80083b8:	2b04      	cmp	r3, #4
 80083ba:	d819      	bhi.n	80083f0 <USBH_UserProcess+0x48>
 80083bc:	a201      	add	r2, pc, #4	; (adr r2, 80083c4 <USBH_UserProcess+0x1c>)
 80083be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083c2:	bf00      	nop
 80083c4:	080083f1 	.word	0x080083f1
 80083c8:	080083e1 	.word	0x080083e1
 80083cc:	080083f1 	.word	0x080083f1
 80083d0:	080083e9 	.word	0x080083e9
 80083d4:	080083d9 	.word	0x080083d9
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 80083d8:	4b09      	ldr	r3, [pc, #36]	; (8008400 <USBH_UserProcess+0x58>)
 80083da:	2203      	movs	r2, #3
 80083dc:	701a      	strb	r2, [r3, #0]
  break;
 80083de:	e008      	b.n	80083f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80083e0:	4b07      	ldr	r3, [pc, #28]	; (8008400 <USBH_UserProcess+0x58>)
 80083e2:	2202      	movs	r2, #2
 80083e4:	701a      	strb	r2, [r3, #0]
  break;
 80083e6:	e004      	b.n	80083f2 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80083e8:	4b05      	ldr	r3, [pc, #20]	; (8008400 <USBH_UserProcess+0x58>)
 80083ea:	2201      	movs	r2, #1
 80083ec:	701a      	strb	r2, [r3, #0]
  break;
 80083ee:	e000      	b.n	80083f2 <USBH_UserProcess+0x4a>

  default:
  break;
 80083f0:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80083f2:	bf00      	nop
 80083f4:	370c      	adds	r7, #12
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	200007dc 	.word	0x200007dc

08008404 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b08a      	sub	sp, #40	; 0x28
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800840c:	f107 0314 	add.w	r3, r7, #20
 8008410:	2200      	movs	r2, #0
 8008412:	601a      	str	r2, [r3, #0]
 8008414:	605a      	str	r2, [r3, #4]
 8008416:	609a      	str	r2, [r3, #8]
 8008418:	60da      	str	r2, [r3, #12]
 800841a:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8008424:	d147      	bne.n	80084b6 <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8008426:	2300      	movs	r3, #0
 8008428:	613b      	str	r3, [r7, #16]
 800842a:	4b25      	ldr	r3, [pc, #148]	; (80084c0 <HAL_HCD_MspInit+0xbc>)
 800842c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800842e:	4a24      	ldr	r2, [pc, #144]	; (80084c0 <HAL_HCD_MspInit+0xbc>)
 8008430:	f043 0301 	orr.w	r3, r3, #1
 8008434:	6313      	str	r3, [r2, #48]	; 0x30
 8008436:	4b22      	ldr	r3, [pc, #136]	; (80084c0 <HAL_HCD_MspInit+0xbc>)
 8008438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800843a:	f003 0301 	and.w	r3, r3, #1
 800843e:	613b      	str	r3, [r7, #16]
 8008440:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008442:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008446:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8008448:	2300      	movs	r3, #0
 800844a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800844c:	2300      	movs	r3, #0
 800844e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008450:	f107 0314 	add.w	r3, r7, #20
 8008454:	4619      	mov	r1, r3
 8008456:	481b      	ldr	r0, [pc, #108]	; (80084c4 <HAL_HCD_MspInit+0xc0>)
 8008458:	f7fa fc8a 	bl	8002d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800845c:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008462:	2302      	movs	r3, #2
 8008464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008466:	2300      	movs	r3, #0
 8008468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800846a:	2300      	movs	r3, #0
 800846c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800846e:	230a      	movs	r3, #10
 8008470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008472:	f107 0314 	add.w	r3, r7, #20
 8008476:	4619      	mov	r1, r3
 8008478:	4812      	ldr	r0, [pc, #72]	; (80084c4 <HAL_HCD_MspInit+0xc0>)
 800847a:	f7fa fc79 	bl	8002d70 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800847e:	4b10      	ldr	r3, [pc, #64]	; (80084c0 <HAL_HCD_MspInit+0xbc>)
 8008480:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008482:	4a0f      	ldr	r2, [pc, #60]	; (80084c0 <HAL_HCD_MspInit+0xbc>)
 8008484:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008488:	6353      	str	r3, [r2, #52]	; 0x34
 800848a:	2300      	movs	r3, #0
 800848c:	60fb      	str	r3, [r7, #12]
 800848e:	4b0c      	ldr	r3, [pc, #48]	; (80084c0 <HAL_HCD_MspInit+0xbc>)
 8008490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008492:	4a0b      	ldr	r2, [pc, #44]	; (80084c0 <HAL_HCD_MspInit+0xbc>)
 8008494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008498:	6453      	str	r3, [r2, #68]	; 0x44
 800849a:	4b09      	ldr	r3, [pc, #36]	; (80084c0 <HAL_HCD_MspInit+0xbc>)
 800849c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800849e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084a2:	60fb      	str	r3, [r7, #12]
 80084a4:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80084a6:	2200      	movs	r2, #0
 80084a8:	2100      	movs	r1, #0
 80084aa:	2043      	movs	r0, #67	; 0x43
 80084ac:	f7fa fc29 	bl	8002d02 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80084b0:	2043      	movs	r0, #67	; 0x43
 80084b2:	f7fa fc42 	bl	8002d3a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80084b6:	bf00      	nop
 80084b8:	3728      	adds	r7, #40	; 0x28
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	40023800 	.word	0x40023800
 80084c4:	40020000 	.word	0x40020000

080084c8 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7ff fbb7 	bl	8007c4a <USBH_LL_IncTimer>
}
 80084dc:	bf00      	nop
 80084de:	3708      	adds	r7, #8
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80084e4:	b580      	push	{r7, lr}
 80084e6:	b082      	sub	sp, #8
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80084f2:	4618      	mov	r0, r3
 80084f4:	f7ff fbef 	bl	8007cd6 <USBH_LL_Connect>
}
 80084f8:	bf00      	nop
 80084fa:	3708      	adds	r7, #8
 80084fc:	46bd      	mov	sp, r7
 80084fe:	bd80      	pop	{r7, pc}

08008500 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008500:	b580      	push	{r7, lr}
 8008502:	b082      	sub	sp, #8
 8008504:	af00      	add	r7, sp, #0
 8008506:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800850e:	4618      	mov	r0, r3
 8008510:	f7ff fbf8 	bl	8007d04 <USBH_LL_Disconnect>
}
 8008514:	bf00      	nop
 8008516:	3708      	adds	r7, #8
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
 8008524:	460b      	mov	r3, r1
 8008526:	70fb      	strb	r3, [r7, #3]
 8008528:	4613      	mov	r3, r2
 800852a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800852c:	bf00      	nop
 800852e:	370c      	adds	r7, #12
 8008530:	46bd      	mov	sp, r7
 8008532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008536:	4770      	bx	lr

08008538 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b082      	sub	sp, #8
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008546:	4618      	mov	r0, r3
 8008548:	f7ff fba9 	bl	8007c9e <USBH_LL_PortEnabled>
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}

08008554 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008554:	b580      	push	{r7, lr}
 8008556:	b082      	sub	sp, #8
 8008558:	af00      	add	r7, sp, #0
 800855a:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008562:	4618      	mov	r0, r3
 8008564:	f7ff fba9 	bl	8007cba <USBH_LL_PortDisabled>
}
 8008568:	bf00      	nop
 800856a:	3708      	adds	r7, #8
 800856c:	46bd      	mov	sp, r7
 800856e:	bd80      	pop	{r7, pc}

08008570 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008570:	b580      	push	{r7, lr}
 8008572:	b082      	sub	sp, #8
 8008574:	af00      	add	r7, sp, #0
 8008576:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 800857e:	2b01      	cmp	r3, #1
 8008580:	d12a      	bne.n	80085d8 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008582:	4a18      	ldr	r2, [pc, #96]	; (80085e4 <USBH_LL_Init+0x74>)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	4a15      	ldr	r2, [pc, #84]	; (80085e4 <USBH_LL_Init+0x74>)
 800858e:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008592:	4b14      	ldr	r3, [pc, #80]	; (80085e4 <USBH_LL_Init+0x74>)
 8008594:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8008598:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800859a:	4b12      	ldr	r3, [pc, #72]	; (80085e4 <USBH_LL_Init+0x74>)
 800859c:	2208      	movs	r2, #8
 800859e:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80085a0:	4b10      	ldr	r3, [pc, #64]	; (80085e4 <USBH_LL_Init+0x74>)
 80085a2:	2201      	movs	r2, #1
 80085a4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80085a6:	4b0f      	ldr	r3, [pc, #60]	; (80085e4 <USBH_LL_Init+0x74>)
 80085a8:	2200      	movs	r2, #0
 80085aa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80085ac:	4b0d      	ldr	r3, [pc, #52]	; (80085e4 <USBH_LL_Init+0x74>)
 80085ae:	2202      	movs	r2, #2
 80085b0:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80085b2:	4b0c      	ldr	r3, [pc, #48]	; (80085e4 <USBH_LL_Init+0x74>)
 80085b4:	2200      	movs	r2, #0
 80085b6:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80085b8:	480a      	ldr	r0, [pc, #40]	; (80085e4 <USBH_LL_Init+0x74>)
 80085ba:	f7fa fda6 	bl	800310a <HAL_HCD_Init>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d001      	beq.n	80085c8 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 80085c4:	f7f9 fb86 	bl	8001cd4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 80085c8:	4806      	ldr	r0, [pc, #24]	; (80085e4 <USBH_LL_Init+0x74>)
 80085ca:	f7fb f97c 	bl	80038c6 <HAL_HCD_GetCurrentFrame>
 80085ce:	4603      	mov	r3, r0
 80085d0:	4619      	mov	r1, r3
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f7ff fb2a 	bl	8007c2c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 80085d8:	2300      	movs	r3, #0
}
 80085da:	4618      	mov	r0, r3
 80085dc:	3708      	adds	r7, #8
 80085de:	46bd      	mov	sp, r7
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	200007e0 	.word	0x200007e0

080085e8 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80085e8:	b580      	push	{r7, lr}
 80085ea:	b084      	sub	sp, #16
 80085ec:	af00      	add	r7, sp, #0
 80085ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80085f0:	2300      	movs	r3, #0
 80085f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80085f4:	2300      	movs	r3, #0
 80085f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80085fe:	4618      	mov	r0, r3
 8008600:	f7fb f8f9 	bl	80037f6 <HAL_HCD_Start>
 8008604:	4603      	mov	r3, r0
 8008606:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008608:	7bfb      	ldrb	r3, [r7, #15]
 800860a:	4618      	mov	r0, r3
 800860c:	f000 f90e 	bl	800882c <USBH_Get_USB_Status>
 8008610:	4603      	mov	r3, r0
 8008612:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008614:	7bbb      	ldrb	r3, [r7, #14]
}
 8008616:	4618      	mov	r0, r3
 8008618:	3710      	adds	r7, #16
 800861a:	46bd      	mov	sp, r7
 800861c:	bd80      	pop	{r7, pc}

0800861e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800861e:	b580      	push	{r7, lr}
 8008620:	b084      	sub	sp, #16
 8008622:	af00      	add	r7, sp, #0
 8008624:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008626:	2300      	movs	r3, #0
 8008628:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800862a:	2300      	movs	r3, #0
 800862c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008634:	4618      	mov	r0, r3
 8008636:	f7fb f901 	bl	800383c <HAL_HCD_Stop>
 800863a:	4603      	mov	r3, r0
 800863c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800863e:	7bfb      	ldrb	r3, [r7, #15]
 8008640:	4618      	mov	r0, r3
 8008642:	f000 f8f3 	bl	800882c <USBH_Get_USB_Status>
 8008646:	4603      	mov	r3, r0
 8008648:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800864a:	7bbb      	ldrb	r3, [r7, #14]
}
 800864c:	4618      	mov	r0, r3
 800864e:	3710      	adds	r7, #16
 8008650:	46bd      	mov	sp, r7
 8008652:	bd80      	pop	{r7, pc}

08008654 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008654:	b580      	push	{r7, lr}
 8008656:	b082      	sub	sp, #8
 8008658:	af00      	add	r7, sp, #0
 800865a:	6078      	str	r0, [r7, #4]
 800865c:	460b      	mov	r3, r1
 800865e:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008666:	78fa      	ldrb	r2, [r7, #3]
 8008668:	4611      	mov	r1, r2
 800866a:	4618      	mov	r0, r3
 800866c:	f7fb f917 	bl	800389e <HAL_HCD_HC_GetXferCount>
 8008670:	4603      	mov	r3, r0
}
 8008672:	4618      	mov	r0, r3
 8008674:	3708      	adds	r7, #8
 8008676:	46bd      	mov	sp, r7
 8008678:	bd80      	pop	{r7, pc}

0800867a <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800867a:	b590      	push	{r4, r7, lr}
 800867c:	b089      	sub	sp, #36	; 0x24
 800867e:	af04      	add	r7, sp, #16
 8008680:	6078      	str	r0, [r7, #4]
 8008682:	4608      	mov	r0, r1
 8008684:	4611      	mov	r1, r2
 8008686:	461a      	mov	r2, r3
 8008688:	4603      	mov	r3, r0
 800868a:	70fb      	strb	r3, [r7, #3]
 800868c:	460b      	mov	r3, r1
 800868e:	70bb      	strb	r3, [r7, #2]
 8008690:	4613      	mov	r3, r2
 8008692:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008694:	2300      	movs	r3, #0
 8008696:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008698:	2300      	movs	r3, #0
 800869a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80086a2:	787c      	ldrb	r4, [r7, #1]
 80086a4:	78ba      	ldrb	r2, [r7, #2]
 80086a6:	78f9      	ldrb	r1, [r7, #3]
 80086a8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80086aa:	9302      	str	r3, [sp, #8]
 80086ac:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80086b0:	9301      	str	r3, [sp, #4]
 80086b2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80086b6:	9300      	str	r3, [sp, #0]
 80086b8:	4623      	mov	r3, r4
 80086ba:	f7fa fd88 	bl	80031ce <HAL_HCD_HC_Init>
 80086be:	4603      	mov	r3, r0
 80086c0:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 80086c2:	7bfb      	ldrb	r3, [r7, #15]
 80086c4:	4618      	mov	r0, r3
 80086c6:	f000 f8b1 	bl	800882c <USBH_Get_USB_Status>
 80086ca:	4603      	mov	r3, r0
 80086cc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80086ce:	7bbb      	ldrb	r3, [r7, #14]
}
 80086d0:	4618      	mov	r0, r3
 80086d2:	3714      	adds	r7, #20
 80086d4:	46bd      	mov	sp, r7
 80086d6:	bd90      	pop	{r4, r7, pc}

080086d8 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80086d8:	b580      	push	{r7, lr}
 80086da:	b084      	sub	sp, #16
 80086dc:	af00      	add	r7, sp, #0
 80086de:	6078      	str	r0, [r7, #4]
 80086e0:	460b      	mov	r3, r1
 80086e2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80086e4:	2300      	movs	r3, #0
 80086e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80086f2:	78fa      	ldrb	r2, [r7, #3]
 80086f4:	4611      	mov	r1, r2
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fa fdf8 	bl	80032ec <HAL_HCD_HC_Halt>
 80086fc:	4603      	mov	r3, r0
 80086fe:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008700:	7bfb      	ldrb	r3, [r7, #15]
 8008702:	4618      	mov	r0, r3
 8008704:	f000 f892 	bl	800882c <USBH_Get_USB_Status>
 8008708:	4603      	mov	r3, r0
 800870a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800870c:	7bbb      	ldrb	r3, [r7, #14]
}
 800870e:	4618      	mov	r0, r3
 8008710:	3710      	adds	r7, #16
 8008712:	46bd      	mov	sp, r7
 8008714:	bd80      	pop	{r7, pc}

08008716 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008716:	b590      	push	{r4, r7, lr}
 8008718:	b089      	sub	sp, #36	; 0x24
 800871a:	af04      	add	r7, sp, #16
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	4608      	mov	r0, r1
 8008720:	4611      	mov	r1, r2
 8008722:	461a      	mov	r2, r3
 8008724:	4603      	mov	r3, r0
 8008726:	70fb      	strb	r3, [r7, #3]
 8008728:	460b      	mov	r3, r1
 800872a:	70bb      	strb	r3, [r7, #2]
 800872c:	4613      	mov	r3, r2
 800872e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008730:	2300      	movs	r3, #0
 8008732:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008734:	2300      	movs	r3, #0
 8008736:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800873e:	787c      	ldrb	r4, [r7, #1]
 8008740:	78ba      	ldrb	r2, [r7, #2]
 8008742:	78f9      	ldrb	r1, [r7, #3]
 8008744:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008748:	9303      	str	r3, [sp, #12]
 800874a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800874c:	9302      	str	r3, [sp, #8]
 800874e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008750:	9301      	str	r3, [sp, #4]
 8008752:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008756:	9300      	str	r3, [sp, #0]
 8008758:	4623      	mov	r3, r4
 800875a:	f7fa fdeb 	bl	8003334 <HAL_HCD_HC_SubmitRequest>
 800875e:	4603      	mov	r3, r0
 8008760:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 8008762:	7bfb      	ldrb	r3, [r7, #15]
 8008764:	4618      	mov	r0, r3
 8008766:	f000 f861 	bl	800882c <USBH_Get_USB_Status>
 800876a:	4603      	mov	r3, r0
 800876c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800876e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3714      	adds	r7, #20
 8008774:	46bd      	mov	sp, r7
 8008776:	bd90      	pop	{r4, r7, pc}

08008778 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	460b      	mov	r3, r1
 8008782:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800878a:	78fa      	ldrb	r2, [r7, #3]
 800878c:	4611      	mov	r1, r2
 800878e:	4618      	mov	r0, r3
 8008790:	f7fb f871 	bl	8003876 <HAL_HCD_HC_GetURBState>
 8008794:	4603      	mov	r3, r0
}
 8008796:	4618      	mov	r0, r3
 8008798:	3708      	adds	r7, #8
 800879a:	46bd      	mov	sp, r7
 800879c:	bd80      	pop	{r7, pc}

0800879e <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800879e:	b580      	push	{r7, lr}
 80087a0:	b082      	sub	sp, #8
 80087a2:	af00      	add	r7, sp, #0
 80087a4:	6078      	str	r0, [r7, #4]
 80087a6:	460b      	mov	r3, r1
 80087a8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80087b0:	2b01      	cmp	r3, #1
 80087b2:	d103      	bne.n	80087bc <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80087b4:	78fb      	ldrb	r3, [r7, #3]
 80087b6:	4618      	mov	r0, r3
 80087b8:	f000 f864 	bl	8008884 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 80087bc:	20c8      	movs	r0, #200	; 0xc8
 80087be:	f7f9 fdd5 	bl	800236c <HAL_Delay>
  return USBH_OK;
 80087c2:	2300      	movs	r3, #0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 80087cc:	b480      	push	{r7}
 80087ce:	b085      	sub	sp, #20
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	460b      	mov	r3, r1
 80087d6:	70fb      	strb	r3, [r7, #3]
 80087d8:	4613      	mov	r3, r2
 80087da:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80087e2:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 80087e4:	78fb      	ldrb	r3, [r7, #3]
 80087e6:	68fa      	ldr	r2, [r7, #12]
 80087e8:	212c      	movs	r1, #44	; 0x2c
 80087ea:	fb01 f303 	mul.w	r3, r1, r3
 80087ee:	4413      	add	r3, r2
 80087f0:	333b      	adds	r3, #59	; 0x3b
 80087f2:	781b      	ldrb	r3, [r3, #0]
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d009      	beq.n	800880c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 80087f8:	78fb      	ldrb	r3, [r7, #3]
 80087fa:	68fa      	ldr	r2, [r7, #12]
 80087fc:	212c      	movs	r1, #44	; 0x2c
 80087fe:	fb01 f303 	mul.w	r3, r1, r3
 8008802:	4413      	add	r3, r2
 8008804:	3354      	adds	r3, #84	; 0x54
 8008806:	78ba      	ldrb	r2, [r7, #2]
 8008808:	701a      	strb	r2, [r3, #0]
 800880a:	e008      	b.n	800881e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800880c:	78fb      	ldrb	r3, [r7, #3]
 800880e:	68fa      	ldr	r2, [r7, #12]
 8008810:	212c      	movs	r1, #44	; 0x2c
 8008812:	fb01 f303 	mul.w	r3, r1, r3
 8008816:	4413      	add	r3, r2
 8008818:	3355      	adds	r3, #85	; 0x55
 800881a:	78ba      	ldrb	r2, [r7, #2]
 800881c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800881e:	2300      	movs	r3, #0
}
 8008820:	4618      	mov	r0, r3
 8008822:	3714      	adds	r7, #20
 8008824:	46bd      	mov	sp, r7
 8008826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800882a:	4770      	bx	lr

0800882c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800882c:	b480      	push	{r7}
 800882e:	b085      	sub	sp, #20
 8008830:	af00      	add	r7, sp, #0
 8008832:	4603      	mov	r3, r0
 8008834:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008836:	2300      	movs	r3, #0
 8008838:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800883a:	79fb      	ldrb	r3, [r7, #7]
 800883c:	2b03      	cmp	r3, #3
 800883e:	d817      	bhi.n	8008870 <USBH_Get_USB_Status+0x44>
 8008840:	a201      	add	r2, pc, #4	; (adr r2, 8008848 <USBH_Get_USB_Status+0x1c>)
 8008842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008846:	bf00      	nop
 8008848:	08008859 	.word	0x08008859
 800884c:	0800885f 	.word	0x0800885f
 8008850:	08008865 	.word	0x08008865
 8008854:	0800886b 	.word	0x0800886b
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008858:	2300      	movs	r3, #0
 800885a:	73fb      	strb	r3, [r7, #15]
    break;
 800885c:	e00b      	b.n	8008876 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800885e:	2302      	movs	r3, #2
 8008860:	73fb      	strb	r3, [r7, #15]
    break;
 8008862:	e008      	b.n	8008876 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008864:	2301      	movs	r3, #1
 8008866:	73fb      	strb	r3, [r7, #15]
    break;
 8008868:	e005      	b.n	8008876 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800886a:	2302      	movs	r3, #2
 800886c:	73fb      	strb	r3, [r7, #15]
    break;
 800886e:	e002      	b.n	8008876 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008870:	2302      	movs	r3, #2
 8008872:	73fb      	strb	r3, [r7, #15]
    break;
 8008874:	bf00      	nop
  }
  return usb_status;
 8008876:	7bfb      	ldrb	r3, [r7, #15]
}
 8008878:	4618      	mov	r0, r3
 800887a:	3714      	adds	r7, #20
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008884:	b580      	push	{r7, lr}
 8008886:	b084      	sub	sp, #16
 8008888:	af00      	add	r7, sp, #0
 800888a:	4603      	mov	r3, r0
 800888c:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800888e:	79fb      	ldrb	r3, [r7, #7]
 8008890:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008892:	79fb      	ldrb	r3, [r7, #7]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d102      	bne.n	800889e <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008898:	2300      	movs	r3, #0
 800889a:	73fb      	strb	r3, [r7, #15]
 800889c:	e001      	b.n	80088a2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800889e:	2301      	movs	r3, #1
 80088a0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 80088a2:	7bfb      	ldrb	r3, [r7, #15]
 80088a4:	461a      	mov	r2, r3
 80088a6:	2101      	movs	r1, #1
 80088a8:	4803      	ldr	r0, [pc, #12]	; (80088b8 <MX_DriverVbusFS+0x34>)
 80088aa:	f7fa fc15 	bl	80030d8 <HAL_GPIO_WritePin>
}
 80088ae:	bf00      	nop
 80088b0:	3710      	adds	r7, #16
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}
 80088b6:	bf00      	nop
 80088b8:	40020800 	.word	0x40020800

080088bc <__errno>:
 80088bc:	4b01      	ldr	r3, [pc, #4]	; (80088c4 <__errno+0x8>)
 80088be:	6818      	ldr	r0, [r3, #0]
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	20000064 	.word	0x20000064

080088c8 <__libc_init_array>:
 80088c8:	b570      	push	{r4, r5, r6, lr}
 80088ca:	4d0d      	ldr	r5, [pc, #52]	; (8008900 <__libc_init_array+0x38>)
 80088cc:	4c0d      	ldr	r4, [pc, #52]	; (8008904 <__libc_init_array+0x3c>)
 80088ce:	1b64      	subs	r4, r4, r5
 80088d0:	10a4      	asrs	r4, r4, #2
 80088d2:	2600      	movs	r6, #0
 80088d4:	42a6      	cmp	r6, r4
 80088d6:	d109      	bne.n	80088ec <__libc_init_array+0x24>
 80088d8:	4d0b      	ldr	r5, [pc, #44]	; (8008908 <__libc_init_array+0x40>)
 80088da:	4c0c      	ldr	r4, [pc, #48]	; (800890c <__libc_init_array+0x44>)
 80088dc:	f004 fc94 	bl	800d208 <_init>
 80088e0:	1b64      	subs	r4, r4, r5
 80088e2:	10a4      	asrs	r4, r4, #2
 80088e4:	2600      	movs	r6, #0
 80088e6:	42a6      	cmp	r6, r4
 80088e8:	d105      	bne.n	80088f6 <__libc_init_array+0x2e>
 80088ea:	bd70      	pop	{r4, r5, r6, pc}
 80088ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80088f0:	4798      	blx	r3
 80088f2:	3601      	adds	r6, #1
 80088f4:	e7ee      	b.n	80088d4 <__libc_init_array+0xc>
 80088f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80088fa:	4798      	blx	r3
 80088fc:	3601      	adds	r6, #1
 80088fe:	e7f2      	b.n	80088e6 <__libc_init_array+0x1e>
 8008900:	0800d71c 	.word	0x0800d71c
 8008904:	0800d71c 	.word	0x0800d71c
 8008908:	0800d71c 	.word	0x0800d71c
 800890c:	0800d720 	.word	0x0800d720

08008910 <malloc>:
 8008910:	4b02      	ldr	r3, [pc, #8]	; (800891c <malloc+0xc>)
 8008912:	4601      	mov	r1, r0
 8008914:	6818      	ldr	r0, [r3, #0]
 8008916:	f000 b87f 	b.w	8008a18 <_malloc_r>
 800891a:	bf00      	nop
 800891c:	20000064 	.word	0x20000064

08008920 <free>:
 8008920:	4b02      	ldr	r3, [pc, #8]	; (800892c <free+0xc>)
 8008922:	4601      	mov	r1, r0
 8008924:	6818      	ldr	r0, [r3, #0]
 8008926:	f000 b80b 	b.w	8008940 <_free_r>
 800892a:	bf00      	nop
 800892c:	20000064 	.word	0x20000064

08008930 <memset>:
 8008930:	4402      	add	r2, r0
 8008932:	4603      	mov	r3, r0
 8008934:	4293      	cmp	r3, r2
 8008936:	d100      	bne.n	800893a <memset+0xa>
 8008938:	4770      	bx	lr
 800893a:	f803 1b01 	strb.w	r1, [r3], #1
 800893e:	e7f9      	b.n	8008934 <memset+0x4>

08008940 <_free_r>:
 8008940:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008942:	2900      	cmp	r1, #0
 8008944:	d044      	beq.n	80089d0 <_free_r+0x90>
 8008946:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800894a:	9001      	str	r0, [sp, #4]
 800894c:	2b00      	cmp	r3, #0
 800894e:	f1a1 0404 	sub.w	r4, r1, #4
 8008952:	bfb8      	it	lt
 8008954:	18e4      	addlt	r4, r4, r3
 8008956:	f003 f83d 	bl	800b9d4 <__malloc_lock>
 800895a:	4a1e      	ldr	r2, [pc, #120]	; (80089d4 <_free_r+0x94>)
 800895c:	9801      	ldr	r0, [sp, #4]
 800895e:	6813      	ldr	r3, [r2, #0]
 8008960:	b933      	cbnz	r3, 8008970 <_free_r+0x30>
 8008962:	6063      	str	r3, [r4, #4]
 8008964:	6014      	str	r4, [r2, #0]
 8008966:	b003      	add	sp, #12
 8008968:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800896c:	f003 b838 	b.w	800b9e0 <__malloc_unlock>
 8008970:	42a3      	cmp	r3, r4
 8008972:	d908      	bls.n	8008986 <_free_r+0x46>
 8008974:	6825      	ldr	r5, [r4, #0]
 8008976:	1961      	adds	r1, r4, r5
 8008978:	428b      	cmp	r3, r1
 800897a:	bf01      	itttt	eq
 800897c:	6819      	ldreq	r1, [r3, #0]
 800897e:	685b      	ldreq	r3, [r3, #4]
 8008980:	1949      	addeq	r1, r1, r5
 8008982:	6021      	streq	r1, [r4, #0]
 8008984:	e7ed      	b.n	8008962 <_free_r+0x22>
 8008986:	461a      	mov	r2, r3
 8008988:	685b      	ldr	r3, [r3, #4]
 800898a:	b10b      	cbz	r3, 8008990 <_free_r+0x50>
 800898c:	42a3      	cmp	r3, r4
 800898e:	d9fa      	bls.n	8008986 <_free_r+0x46>
 8008990:	6811      	ldr	r1, [r2, #0]
 8008992:	1855      	adds	r5, r2, r1
 8008994:	42a5      	cmp	r5, r4
 8008996:	d10b      	bne.n	80089b0 <_free_r+0x70>
 8008998:	6824      	ldr	r4, [r4, #0]
 800899a:	4421      	add	r1, r4
 800899c:	1854      	adds	r4, r2, r1
 800899e:	42a3      	cmp	r3, r4
 80089a0:	6011      	str	r1, [r2, #0]
 80089a2:	d1e0      	bne.n	8008966 <_free_r+0x26>
 80089a4:	681c      	ldr	r4, [r3, #0]
 80089a6:	685b      	ldr	r3, [r3, #4]
 80089a8:	6053      	str	r3, [r2, #4]
 80089aa:	4421      	add	r1, r4
 80089ac:	6011      	str	r1, [r2, #0]
 80089ae:	e7da      	b.n	8008966 <_free_r+0x26>
 80089b0:	d902      	bls.n	80089b8 <_free_r+0x78>
 80089b2:	230c      	movs	r3, #12
 80089b4:	6003      	str	r3, [r0, #0]
 80089b6:	e7d6      	b.n	8008966 <_free_r+0x26>
 80089b8:	6825      	ldr	r5, [r4, #0]
 80089ba:	1961      	adds	r1, r4, r5
 80089bc:	428b      	cmp	r3, r1
 80089be:	bf04      	itt	eq
 80089c0:	6819      	ldreq	r1, [r3, #0]
 80089c2:	685b      	ldreq	r3, [r3, #4]
 80089c4:	6063      	str	r3, [r4, #4]
 80089c6:	bf04      	itt	eq
 80089c8:	1949      	addeq	r1, r1, r5
 80089ca:	6021      	streq	r1, [r4, #0]
 80089cc:	6054      	str	r4, [r2, #4]
 80089ce:	e7ca      	b.n	8008966 <_free_r+0x26>
 80089d0:	b003      	add	sp, #12
 80089d2:	bd30      	pop	{r4, r5, pc}
 80089d4:	20000ae4 	.word	0x20000ae4

080089d8 <sbrk_aligned>:
 80089d8:	b570      	push	{r4, r5, r6, lr}
 80089da:	4e0e      	ldr	r6, [pc, #56]	; (8008a14 <sbrk_aligned+0x3c>)
 80089dc:	460c      	mov	r4, r1
 80089de:	6831      	ldr	r1, [r6, #0]
 80089e0:	4605      	mov	r5, r0
 80089e2:	b911      	cbnz	r1, 80089ea <sbrk_aligned+0x12>
 80089e4:	f000 ff06 	bl	80097f4 <_sbrk_r>
 80089e8:	6030      	str	r0, [r6, #0]
 80089ea:	4621      	mov	r1, r4
 80089ec:	4628      	mov	r0, r5
 80089ee:	f000 ff01 	bl	80097f4 <_sbrk_r>
 80089f2:	1c43      	adds	r3, r0, #1
 80089f4:	d00a      	beq.n	8008a0c <sbrk_aligned+0x34>
 80089f6:	1cc4      	adds	r4, r0, #3
 80089f8:	f024 0403 	bic.w	r4, r4, #3
 80089fc:	42a0      	cmp	r0, r4
 80089fe:	d007      	beq.n	8008a10 <sbrk_aligned+0x38>
 8008a00:	1a21      	subs	r1, r4, r0
 8008a02:	4628      	mov	r0, r5
 8008a04:	f000 fef6 	bl	80097f4 <_sbrk_r>
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d101      	bne.n	8008a10 <sbrk_aligned+0x38>
 8008a0c:	f04f 34ff 	mov.w	r4, #4294967295
 8008a10:	4620      	mov	r0, r4
 8008a12:	bd70      	pop	{r4, r5, r6, pc}
 8008a14:	20000ae8 	.word	0x20000ae8

08008a18 <_malloc_r>:
 8008a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1c:	1ccd      	adds	r5, r1, #3
 8008a1e:	f025 0503 	bic.w	r5, r5, #3
 8008a22:	3508      	adds	r5, #8
 8008a24:	2d0c      	cmp	r5, #12
 8008a26:	bf38      	it	cc
 8008a28:	250c      	movcc	r5, #12
 8008a2a:	2d00      	cmp	r5, #0
 8008a2c:	4607      	mov	r7, r0
 8008a2e:	db01      	blt.n	8008a34 <_malloc_r+0x1c>
 8008a30:	42a9      	cmp	r1, r5
 8008a32:	d905      	bls.n	8008a40 <_malloc_r+0x28>
 8008a34:	230c      	movs	r3, #12
 8008a36:	603b      	str	r3, [r7, #0]
 8008a38:	2600      	movs	r6, #0
 8008a3a:	4630      	mov	r0, r6
 8008a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a40:	4e2e      	ldr	r6, [pc, #184]	; (8008afc <_malloc_r+0xe4>)
 8008a42:	f002 ffc7 	bl	800b9d4 <__malloc_lock>
 8008a46:	6833      	ldr	r3, [r6, #0]
 8008a48:	461c      	mov	r4, r3
 8008a4a:	bb34      	cbnz	r4, 8008a9a <_malloc_r+0x82>
 8008a4c:	4629      	mov	r1, r5
 8008a4e:	4638      	mov	r0, r7
 8008a50:	f7ff ffc2 	bl	80089d8 <sbrk_aligned>
 8008a54:	1c43      	adds	r3, r0, #1
 8008a56:	4604      	mov	r4, r0
 8008a58:	d14d      	bne.n	8008af6 <_malloc_r+0xde>
 8008a5a:	6834      	ldr	r4, [r6, #0]
 8008a5c:	4626      	mov	r6, r4
 8008a5e:	2e00      	cmp	r6, #0
 8008a60:	d140      	bne.n	8008ae4 <_malloc_r+0xcc>
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	4631      	mov	r1, r6
 8008a66:	4638      	mov	r0, r7
 8008a68:	eb04 0803 	add.w	r8, r4, r3
 8008a6c:	f000 fec2 	bl	80097f4 <_sbrk_r>
 8008a70:	4580      	cmp	r8, r0
 8008a72:	d13a      	bne.n	8008aea <_malloc_r+0xd2>
 8008a74:	6821      	ldr	r1, [r4, #0]
 8008a76:	3503      	adds	r5, #3
 8008a78:	1a6d      	subs	r5, r5, r1
 8008a7a:	f025 0503 	bic.w	r5, r5, #3
 8008a7e:	3508      	adds	r5, #8
 8008a80:	2d0c      	cmp	r5, #12
 8008a82:	bf38      	it	cc
 8008a84:	250c      	movcc	r5, #12
 8008a86:	4629      	mov	r1, r5
 8008a88:	4638      	mov	r0, r7
 8008a8a:	f7ff ffa5 	bl	80089d8 <sbrk_aligned>
 8008a8e:	3001      	adds	r0, #1
 8008a90:	d02b      	beq.n	8008aea <_malloc_r+0xd2>
 8008a92:	6823      	ldr	r3, [r4, #0]
 8008a94:	442b      	add	r3, r5
 8008a96:	6023      	str	r3, [r4, #0]
 8008a98:	e00e      	b.n	8008ab8 <_malloc_r+0xa0>
 8008a9a:	6822      	ldr	r2, [r4, #0]
 8008a9c:	1b52      	subs	r2, r2, r5
 8008a9e:	d41e      	bmi.n	8008ade <_malloc_r+0xc6>
 8008aa0:	2a0b      	cmp	r2, #11
 8008aa2:	d916      	bls.n	8008ad2 <_malloc_r+0xba>
 8008aa4:	1961      	adds	r1, r4, r5
 8008aa6:	42a3      	cmp	r3, r4
 8008aa8:	6025      	str	r5, [r4, #0]
 8008aaa:	bf18      	it	ne
 8008aac:	6059      	strne	r1, [r3, #4]
 8008aae:	6863      	ldr	r3, [r4, #4]
 8008ab0:	bf08      	it	eq
 8008ab2:	6031      	streq	r1, [r6, #0]
 8008ab4:	5162      	str	r2, [r4, r5]
 8008ab6:	604b      	str	r3, [r1, #4]
 8008ab8:	4638      	mov	r0, r7
 8008aba:	f104 060b 	add.w	r6, r4, #11
 8008abe:	f002 ff8f 	bl	800b9e0 <__malloc_unlock>
 8008ac2:	f026 0607 	bic.w	r6, r6, #7
 8008ac6:	1d23      	adds	r3, r4, #4
 8008ac8:	1af2      	subs	r2, r6, r3
 8008aca:	d0b6      	beq.n	8008a3a <_malloc_r+0x22>
 8008acc:	1b9b      	subs	r3, r3, r6
 8008ace:	50a3      	str	r3, [r4, r2]
 8008ad0:	e7b3      	b.n	8008a3a <_malloc_r+0x22>
 8008ad2:	6862      	ldr	r2, [r4, #4]
 8008ad4:	42a3      	cmp	r3, r4
 8008ad6:	bf0c      	ite	eq
 8008ad8:	6032      	streq	r2, [r6, #0]
 8008ada:	605a      	strne	r2, [r3, #4]
 8008adc:	e7ec      	b.n	8008ab8 <_malloc_r+0xa0>
 8008ade:	4623      	mov	r3, r4
 8008ae0:	6864      	ldr	r4, [r4, #4]
 8008ae2:	e7b2      	b.n	8008a4a <_malloc_r+0x32>
 8008ae4:	4634      	mov	r4, r6
 8008ae6:	6876      	ldr	r6, [r6, #4]
 8008ae8:	e7b9      	b.n	8008a5e <_malloc_r+0x46>
 8008aea:	230c      	movs	r3, #12
 8008aec:	603b      	str	r3, [r7, #0]
 8008aee:	4638      	mov	r0, r7
 8008af0:	f002 ff76 	bl	800b9e0 <__malloc_unlock>
 8008af4:	e7a1      	b.n	8008a3a <_malloc_r+0x22>
 8008af6:	6025      	str	r5, [r4, #0]
 8008af8:	e7de      	b.n	8008ab8 <_malloc_r+0xa0>
 8008afa:	bf00      	nop
 8008afc:	20000ae4 	.word	0x20000ae4

08008b00 <__cvt>:
 8008b00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b04:	ec55 4b10 	vmov	r4, r5, d0
 8008b08:	2d00      	cmp	r5, #0
 8008b0a:	460e      	mov	r6, r1
 8008b0c:	4619      	mov	r1, r3
 8008b0e:	462b      	mov	r3, r5
 8008b10:	bfbb      	ittet	lt
 8008b12:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008b16:	461d      	movlt	r5, r3
 8008b18:	2300      	movge	r3, #0
 8008b1a:	232d      	movlt	r3, #45	; 0x2d
 8008b1c:	700b      	strb	r3, [r1, #0]
 8008b1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008b20:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008b24:	4691      	mov	r9, r2
 8008b26:	f023 0820 	bic.w	r8, r3, #32
 8008b2a:	bfbc      	itt	lt
 8008b2c:	4622      	movlt	r2, r4
 8008b2e:	4614      	movlt	r4, r2
 8008b30:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b34:	d005      	beq.n	8008b42 <__cvt+0x42>
 8008b36:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008b3a:	d100      	bne.n	8008b3e <__cvt+0x3e>
 8008b3c:	3601      	adds	r6, #1
 8008b3e:	2102      	movs	r1, #2
 8008b40:	e000      	b.n	8008b44 <__cvt+0x44>
 8008b42:	2103      	movs	r1, #3
 8008b44:	ab03      	add	r3, sp, #12
 8008b46:	9301      	str	r3, [sp, #4]
 8008b48:	ab02      	add	r3, sp, #8
 8008b4a:	9300      	str	r3, [sp, #0]
 8008b4c:	ec45 4b10 	vmov	d0, r4, r5
 8008b50:	4653      	mov	r3, sl
 8008b52:	4632      	mov	r2, r6
 8008b54:	f001 fdbc 	bl	800a6d0 <_dtoa_r>
 8008b58:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008b5c:	4607      	mov	r7, r0
 8008b5e:	d102      	bne.n	8008b66 <__cvt+0x66>
 8008b60:	f019 0f01 	tst.w	r9, #1
 8008b64:	d022      	beq.n	8008bac <__cvt+0xac>
 8008b66:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008b6a:	eb07 0906 	add.w	r9, r7, r6
 8008b6e:	d110      	bne.n	8008b92 <__cvt+0x92>
 8008b70:	783b      	ldrb	r3, [r7, #0]
 8008b72:	2b30      	cmp	r3, #48	; 0x30
 8008b74:	d10a      	bne.n	8008b8c <__cvt+0x8c>
 8008b76:	2200      	movs	r2, #0
 8008b78:	2300      	movs	r3, #0
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	4629      	mov	r1, r5
 8008b7e:	f7f7 ffa3 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b82:	b918      	cbnz	r0, 8008b8c <__cvt+0x8c>
 8008b84:	f1c6 0601 	rsb	r6, r6, #1
 8008b88:	f8ca 6000 	str.w	r6, [sl]
 8008b8c:	f8da 3000 	ldr.w	r3, [sl]
 8008b90:	4499      	add	r9, r3
 8008b92:	2200      	movs	r2, #0
 8008b94:	2300      	movs	r3, #0
 8008b96:	4620      	mov	r0, r4
 8008b98:	4629      	mov	r1, r5
 8008b9a:	f7f7 ff95 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b9e:	b108      	cbz	r0, 8008ba4 <__cvt+0xa4>
 8008ba0:	f8cd 900c 	str.w	r9, [sp, #12]
 8008ba4:	2230      	movs	r2, #48	; 0x30
 8008ba6:	9b03      	ldr	r3, [sp, #12]
 8008ba8:	454b      	cmp	r3, r9
 8008baa:	d307      	bcc.n	8008bbc <__cvt+0xbc>
 8008bac:	9b03      	ldr	r3, [sp, #12]
 8008bae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008bb0:	1bdb      	subs	r3, r3, r7
 8008bb2:	4638      	mov	r0, r7
 8008bb4:	6013      	str	r3, [r2, #0]
 8008bb6:	b004      	add	sp, #16
 8008bb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bbc:	1c59      	adds	r1, r3, #1
 8008bbe:	9103      	str	r1, [sp, #12]
 8008bc0:	701a      	strb	r2, [r3, #0]
 8008bc2:	e7f0      	b.n	8008ba6 <__cvt+0xa6>

08008bc4 <__exponent>:
 8008bc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	2900      	cmp	r1, #0
 8008bca:	bfb8      	it	lt
 8008bcc:	4249      	neglt	r1, r1
 8008bce:	f803 2b02 	strb.w	r2, [r3], #2
 8008bd2:	bfb4      	ite	lt
 8008bd4:	222d      	movlt	r2, #45	; 0x2d
 8008bd6:	222b      	movge	r2, #43	; 0x2b
 8008bd8:	2909      	cmp	r1, #9
 8008bda:	7042      	strb	r2, [r0, #1]
 8008bdc:	dd2a      	ble.n	8008c34 <__exponent+0x70>
 8008bde:	f10d 0407 	add.w	r4, sp, #7
 8008be2:	46a4      	mov	ip, r4
 8008be4:	270a      	movs	r7, #10
 8008be6:	46a6      	mov	lr, r4
 8008be8:	460a      	mov	r2, r1
 8008bea:	fb91 f6f7 	sdiv	r6, r1, r7
 8008bee:	fb07 1516 	mls	r5, r7, r6, r1
 8008bf2:	3530      	adds	r5, #48	; 0x30
 8008bf4:	2a63      	cmp	r2, #99	; 0x63
 8008bf6:	f104 34ff 	add.w	r4, r4, #4294967295
 8008bfa:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8008bfe:	4631      	mov	r1, r6
 8008c00:	dcf1      	bgt.n	8008be6 <__exponent+0x22>
 8008c02:	3130      	adds	r1, #48	; 0x30
 8008c04:	f1ae 0502 	sub.w	r5, lr, #2
 8008c08:	f804 1c01 	strb.w	r1, [r4, #-1]
 8008c0c:	1c44      	adds	r4, r0, #1
 8008c0e:	4629      	mov	r1, r5
 8008c10:	4561      	cmp	r1, ip
 8008c12:	d30a      	bcc.n	8008c2a <__exponent+0x66>
 8008c14:	f10d 0209 	add.w	r2, sp, #9
 8008c18:	eba2 020e 	sub.w	r2, r2, lr
 8008c1c:	4565      	cmp	r5, ip
 8008c1e:	bf88      	it	hi
 8008c20:	2200      	movhi	r2, #0
 8008c22:	4413      	add	r3, r2
 8008c24:	1a18      	subs	r0, r3, r0
 8008c26:	b003      	add	sp, #12
 8008c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008c2e:	f804 2f01 	strb.w	r2, [r4, #1]!
 8008c32:	e7ed      	b.n	8008c10 <__exponent+0x4c>
 8008c34:	2330      	movs	r3, #48	; 0x30
 8008c36:	3130      	adds	r1, #48	; 0x30
 8008c38:	7083      	strb	r3, [r0, #2]
 8008c3a:	70c1      	strb	r1, [r0, #3]
 8008c3c:	1d03      	adds	r3, r0, #4
 8008c3e:	e7f1      	b.n	8008c24 <__exponent+0x60>

08008c40 <_printf_float>:
 8008c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c44:	ed2d 8b02 	vpush	{d8}
 8008c48:	b08d      	sub	sp, #52	; 0x34
 8008c4a:	460c      	mov	r4, r1
 8008c4c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008c50:	4616      	mov	r6, r2
 8008c52:	461f      	mov	r7, r3
 8008c54:	4605      	mov	r5, r0
 8008c56:	f002 fe99 	bl	800b98c <_localeconv_r>
 8008c5a:	f8d0 a000 	ldr.w	sl, [r0]
 8008c5e:	4650      	mov	r0, sl
 8008c60:	f7f7 fab6 	bl	80001d0 <strlen>
 8008c64:	2300      	movs	r3, #0
 8008c66:	930a      	str	r3, [sp, #40]	; 0x28
 8008c68:	6823      	ldr	r3, [r4, #0]
 8008c6a:	9305      	str	r3, [sp, #20]
 8008c6c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c70:	f894 b018 	ldrb.w	fp, [r4, #24]
 8008c74:	3307      	adds	r3, #7
 8008c76:	f023 0307 	bic.w	r3, r3, #7
 8008c7a:	f103 0208 	add.w	r2, r3, #8
 8008c7e:	f8c8 2000 	str.w	r2, [r8]
 8008c82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c86:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8008c8a:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8008c8e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8008c92:	9307      	str	r3, [sp, #28]
 8008c94:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c98:	ee08 0a10 	vmov	s16, r0
 8008c9c:	4b9f      	ldr	r3, [pc, #636]	; (8008f1c <_printf_float+0x2dc>)
 8008c9e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008ca2:	f04f 32ff 	mov.w	r2, #4294967295
 8008ca6:	f7f7 ff41 	bl	8000b2c <__aeabi_dcmpun>
 8008caa:	bb88      	cbnz	r0, 8008d10 <_printf_float+0xd0>
 8008cac:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008cb0:	4b9a      	ldr	r3, [pc, #616]	; (8008f1c <_printf_float+0x2dc>)
 8008cb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb6:	f7f7 ff1b 	bl	8000af0 <__aeabi_dcmple>
 8008cba:	bb48      	cbnz	r0, 8008d10 <_printf_float+0xd0>
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	2300      	movs	r3, #0
 8008cc0:	4640      	mov	r0, r8
 8008cc2:	4649      	mov	r1, r9
 8008cc4:	f7f7 ff0a 	bl	8000adc <__aeabi_dcmplt>
 8008cc8:	b110      	cbz	r0, 8008cd0 <_printf_float+0x90>
 8008cca:	232d      	movs	r3, #45	; 0x2d
 8008ccc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008cd0:	4b93      	ldr	r3, [pc, #588]	; (8008f20 <_printf_float+0x2e0>)
 8008cd2:	4894      	ldr	r0, [pc, #592]	; (8008f24 <_printf_float+0x2e4>)
 8008cd4:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008cd8:	bf94      	ite	ls
 8008cda:	4698      	movls	r8, r3
 8008cdc:	4680      	movhi	r8, r0
 8008cde:	2303      	movs	r3, #3
 8008ce0:	6123      	str	r3, [r4, #16]
 8008ce2:	9b05      	ldr	r3, [sp, #20]
 8008ce4:	f023 0204 	bic.w	r2, r3, #4
 8008ce8:	6022      	str	r2, [r4, #0]
 8008cea:	f04f 0900 	mov.w	r9, #0
 8008cee:	9700      	str	r7, [sp, #0]
 8008cf0:	4633      	mov	r3, r6
 8008cf2:	aa0b      	add	r2, sp, #44	; 0x2c
 8008cf4:	4621      	mov	r1, r4
 8008cf6:	4628      	mov	r0, r5
 8008cf8:	f000 f9d8 	bl	80090ac <_printf_common>
 8008cfc:	3001      	adds	r0, #1
 8008cfe:	f040 8090 	bne.w	8008e22 <_printf_float+0x1e2>
 8008d02:	f04f 30ff 	mov.w	r0, #4294967295
 8008d06:	b00d      	add	sp, #52	; 0x34
 8008d08:	ecbd 8b02 	vpop	{d8}
 8008d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d10:	4642      	mov	r2, r8
 8008d12:	464b      	mov	r3, r9
 8008d14:	4640      	mov	r0, r8
 8008d16:	4649      	mov	r1, r9
 8008d18:	f7f7 ff08 	bl	8000b2c <__aeabi_dcmpun>
 8008d1c:	b140      	cbz	r0, 8008d30 <_printf_float+0xf0>
 8008d1e:	464b      	mov	r3, r9
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	bfbc      	itt	lt
 8008d24:	232d      	movlt	r3, #45	; 0x2d
 8008d26:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008d2a:	487f      	ldr	r0, [pc, #508]	; (8008f28 <_printf_float+0x2e8>)
 8008d2c:	4b7f      	ldr	r3, [pc, #508]	; (8008f2c <_printf_float+0x2ec>)
 8008d2e:	e7d1      	b.n	8008cd4 <_printf_float+0x94>
 8008d30:	6863      	ldr	r3, [r4, #4]
 8008d32:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008d36:	9206      	str	r2, [sp, #24]
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	d13f      	bne.n	8008dbc <_printf_float+0x17c>
 8008d3c:	2306      	movs	r3, #6
 8008d3e:	6063      	str	r3, [r4, #4]
 8008d40:	9b05      	ldr	r3, [sp, #20]
 8008d42:	6861      	ldr	r1, [r4, #4]
 8008d44:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008d48:	2300      	movs	r3, #0
 8008d4a:	9303      	str	r3, [sp, #12]
 8008d4c:	ab0a      	add	r3, sp, #40	; 0x28
 8008d4e:	e9cd b301 	strd	fp, r3, [sp, #4]
 8008d52:	ab09      	add	r3, sp, #36	; 0x24
 8008d54:	ec49 8b10 	vmov	d0, r8, r9
 8008d58:	9300      	str	r3, [sp, #0]
 8008d5a:	6022      	str	r2, [r4, #0]
 8008d5c:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8008d60:	4628      	mov	r0, r5
 8008d62:	f7ff fecd 	bl	8008b00 <__cvt>
 8008d66:	9b06      	ldr	r3, [sp, #24]
 8008d68:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008d6a:	2b47      	cmp	r3, #71	; 0x47
 8008d6c:	4680      	mov	r8, r0
 8008d6e:	d108      	bne.n	8008d82 <_printf_float+0x142>
 8008d70:	1cc8      	adds	r0, r1, #3
 8008d72:	db02      	blt.n	8008d7a <_printf_float+0x13a>
 8008d74:	6863      	ldr	r3, [r4, #4]
 8008d76:	4299      	cmp	r1, r3
 8008d78:	dd41      	ble.n	8008dfe <_printf_float+0x1be>
 8008d7a:	f1ab 0b02 	sub.w	fp, fp, #2
 8008d7e:	fa5f fb8b 	uxtb.w	fp, fp
 8008d82:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008d86:	d820      	bhi.n	8008dca <_printf_float+0x18a>
 8008d88:	3901      	subs	r1, #1
 8008d8a:	465a      	mov	r2, fp
 8008d8c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8008d90:	9109      	str	r1, [sp, #36]	; 0x24
 8008d92:	f7ff ff17 	bl	8008bc4 <__exponent>
 8008d96:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008d98:	1813      	adds	r3, r2, r0
 8008d9a:	2a01      	cmp	r2, #1
 8008d9c:	4681      	mov	r9, r0
 8008d9e:	6123      	str	r3, [r4, #16]
 8008da0:	dc02      	bgt.n	8008da8 <_printf_float+0x168>
 8008da2:	6822      	ldr	r2, [r4, #0]
 8008da4:	07d2      	lsls	r2, r2, #31
 8008da6:	d501      	bpl.n	8008dac <_printf_float+0x16c>
 8008da8:	3301      	adds	r3, #1
 8008daa:	6123      	str	r3, [r4, #16]
 8008dac:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d09c      	beq.n	8008cee <_printf_float+0xae>
 8008db4:	232d      	movs	r3, #45	; 0x2d
 8008db6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008dba:	e798      	b.n	8008cee <_printf_float+0xae>
 8008dbc:	9a06      	ldr	r2, [sp, #24]
 8008dbe:	2a47      	cmp	r2, #71	; 0x47
 8008dc0:	d1be      	bne.n	8008d40 <_printf_float+0x100>
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d1bc      	bne.n	8008d40 <_printf_float+0x100>
 8008dc6:	2301      	movs	r3, #1
 8008dc8:	e7b9      	b.n	8008d3e <_printf_float+0xfe>
 8008dca:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8008dce:	d118      	bne.n	8008e02 <_printf_float+0x1c2>
 8008dd0:	2900      	cmp	r1, #0
 8008dd2:	6863      	ldr	r3, [r4, #4]
 8008dd4:	dd0b      	ble.n	8008dee <_printf_float+0x1ae>
 8008dd6:	6121      	str	r1, [r4, #16]
 8008dd8:	b913      	cbnz	r3, 8008de0 <_printf_float+0x1a0>
 8008dda:	6822      	ldr	r2, [r4, #0]
 8008ddc:	07d0      	lsls	r0, r2, #31
 8008dde:	d502      	bpl.n	8008de6 <_printf_float+0x1a6>
 8008de0:	3301      	adds	r3, #1
 8008de2:	440b      	add	r3, r1
 8008de4:	6123      	str	r3, [r4, #16]
 8008de6:	65a1      	str	r1, [r4, #88]	; 0x58
 8008de8:	f04f 0900 	mov.w	r9, #0
 8008dec:	e7de      	b.n	8008dac <_printf_float+0x16c>
 8008dee:	b913      	cbnz	r3, 8008df6 <_printf_float+0x1b6>
 8008df0:	6822      	ldr	r2, [r4, #0]
 8008df2:	07d2      	lsls	r2, r2, #31
 8008df4:	d501      	bpl.n	8008dfa <_printf_float+0x1ba>
 8008df6:	3302      	adds	r3, #2
 8008df8:	e7f4      	b.n	8008de4 <_printf_float+0x1a4>
 8008dfa:	2301      	movs	r3, #1
 8008dfc:	e7f2      	b.n	8008de4 <_printf_float+0x1a4>
 8008dfe:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8008e02:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e04:	4299      	cmp	r1, r3
 8008e06:	db05      	blt.n	8008e14 <_printf_float+0x1d4>
 8008e08:	6823      	ldr	r3, [r4, #0]
 8008e0a:	6121      	str	r1, [r4, #16]
 8008e0c:	07d8      	lsls	r0, r3, #31
 8008e0e:	d5ea      	bpl.n	8008de6 <_printf_float+0x1a6>
 8008e10:	1c4b      	adds	r3, r1, #1
 8008e12:	e7e7      	b.n	8008de4 <_printf_float+0x1a4>
 8008e14:	2900      	cmp	r1, #0
 8008e16:	bfd4      	ite	le
 8008e18:	f1c1 0202 	rsble	r2, r1, #2
 8008e1c:	2201      	movgt	r2, #1
 8008e1e:	4413      	add	r3, r2
 8008e20:	e7e0      	b.n	8008de4 <_printf_float+0x1a4>
 8008e22:	6823      	ldr	r3, [r4, #0]
 8008e24:	055a      	lsls	r2, r3, #21
 8008e26:	d407      	bmi.n	8008e38 <_printf_float+0x1f8>
 8008e28:	6923      	ldr	r3, [r4, #16]
 8008e2a:	4642      	mov	r2, r8
 8008e2c:	4631      	mov	r1, r6
 8008e2e:	4628      	mov	r0, r5
 8008e30:	47b8      	blx	r7
 8008e32:	3001      	adds	r0, #1
 8008e34:	d12c      	bne.n	8008e90 <_printf_float+0x250>
 8008e36:	e764      	b.n	8008d02 <_printf_float+0xc2>
 8008e38:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008e3c:	f240 80e0 	bls.w	8009000 <_printf_float+0x3c0>
 8008e40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008e44:	2200      	movs	r2, #0
 8008e46:	2300      	movs	r3, #0
 8008e48:	f7f7 fe3e 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	d034      	beq.n	8008eba <_printf_float+0x27a>
 8008e50:	4a37      	ldr	r2, [pc, #220]	; (8008f30 <_printf_float+0x2f0>)
 8008e52:	2301      	movs	r3, #1
 8008e54:	4631      	mov	r1, r6
 8008e56:	4628      	mov	r0, r5
 8008e58:	47b8      	blx	r7
 8008e5a:	3001      	adds	r0, #1
 8008e5c:	f43f af51 	beq.w	8008d02 <_printf_float+0xc2>
 8008e60:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008e64:	429a      	cmp	r2, r3
 8008e66:	db02      	blt.n	8008e6e <_printf_float+0x22e>
 8008e68:	6823      	ldr	r3, [r4, #0]
 8008e6a:	07d8      	lsls	r0, r3, #31
 8008e6c:	d510      	bpl.n	8008e90 <_printf_float+0x250>
 8008e6e:	ee18 3a10 	vmov	r3, s16
 8008e72:	4652      	mov	r2, sl
 8008e74:	4631      	mov	r1, r6
 8008e76:	4628      	mov	r0, r5
 8008e78:	47b8      	blx	r7
 8008e7a:	3001      	adds	r0, #1
 8008e7c:	f43f af41 	beq.w	8008d02 <_printf_float+0xc2>
 8008e80:	f04f 0800 	mov.w	r8, #0
 8008e84:	f104 091a 	add.w	r9, r4, #26
 8008e88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e8a:	3b01      	subs	r3, #1
 8008e8c:	4543      	cmp	r3, r8
 8008e8e:	dc09      	bgt.n	8008ea4 <_printf_float+0x264>
 8008e90:	6823      	ldr	r3, [r4, #0]
 8008e92:	079b      	lsls	r3, r3, #30
 8008e94:	f100 8105 	bmi.w	80090a2 <_printf_float+0x462>
 8008e98:	68e0      	ldr	r0, [r4, #12]
 8008e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e9c:	4298      	cmp	r0, r3
 8008e9e:	bfb8      	it	lt
 8008ea0:	4618      	movlt	r0, r3
 8008ea2:	e730      	b.n	8008d06 <_printf_float+0xc6>
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	464a      	mov	r2, r9
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4628      	mov	r0, r5
 8008eac:	47b8      	blx	r7
 8008eae:	3001      	adds	r0, #1
 8008eb0:	f43f af27 	beq.w	8008d02 <_printf_float+0xc2>
 8008eb4:	f108 0801 	add.w	r8, r8, #1
 8008eb8:	e7e6      	b.n	8008e88 <_printf_float+0x248>
 8008eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	dc39      	bgt.n	8008f34 <_printf_float+0x2f4>
 8008ec0:	4a1b      	ldr	r2, [pc, #108]	; (8008f30 <_printf_float+0x2f0>)
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	4631      	mov	r1, r6
 8008ec6:	4628      	mov	r0, r5
 8008ec8:	47b8      	blx	r7
 8008eca:	3001      	adds	r0, #1
 8008ecc:	f43f af19 	beq.w	8008d02 <_printf_float+0xc2>
 8008ed0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008ed4:	4313      	orrs	r3, r2
 8008ed6:	d102      	bne.n	8008ede <_printf_float+0x29e>
 8008ed8:	6823      	ldr	r3, [r4, #0]
 8008eda:	07d9      	lsls	r1, r3, #31
 8008edc:	d5d8      	bpl.n	8008e90 <_printf_float+0x250>
 8008ede:	ee18 3a10 	vmov	r3, s16
 8008ee2:	4652      	mov	r2, sl
 8008ee4:	4631      	mov	r1, r6
 8008ee6:	4628      	mov	r0, r5
 8008ee8:	47b8      	blx	r7
 8008eea:	3001      	adds	r0, #1
 8008eec:	f43f af09 	beq.w	8008d02 <_printf_float+0xc2>
 8008ef0:	f04f 0900 	mov.w	r9, #0
 8008ef4:	f104 0a1a 	add.w	sl, r4, #26
 8008ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008efa:	425b      	negs	r3, r3
 8008efc:	454b      	cmp	r3, r9
 8008efe:	dc01      	bgt.n	8008f04 <_printf_float+0x2c4>
 8008f00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f02:	e792      	b.n	8008e2a <_printf_float+0x1ea>
 8008f04:	2301      	movs	r3, #1
 8008f06:	4652      	mov	r2, sl
 8008f08:	4631      	mov	r1, r6
 8008f0a:	4628      	mov	r0, r5
 8008f0c:	47b8      	blx	r7
 8008f0e:	3001      	adds	r0, #1
 8008f10:	f43f aef7 	beq.w	8008d02 <_printf_float+0xc2>
 8008f14:	f109 0901 	add.w	r9, r9, #1
 8008f18:	e7ee      	b.n	8008ef8 <_printf_float+0x2b8>
 8008f1a:	bf00      	nop
 8008f1c:	7fefffff 	.word	0x7fefffff
 8008f20:	0800d270 	.word	0x0800d270
 8008f24:	0800d274 	.word	0x0800d274
 8008f28:	0800d27c 	.word	0x0800d27c
 8008f2c:	0800d278 	.word	0x0800d278
 8008f30:	0800d280 	.word	0x0800d280
 8008f34:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008f36:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f38:	429a      	cmp	r2, r3
 8008f3a:	bfa8      	it	ge
 8008f3c:	461a      	movge	r2, r3
 8008f3e:	2a00      	cmp	r2, #0
 8008f40:	4691      	mov	r9, r2
 8008f42:	dc37      	bgt.n	8008fb4 <_printf_float+0x374>
 8008f44:	f04f 0b00 	mov.w	fp, #0
 8008f48:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f4c:	f104 021a 	add.w	r2, r4, #26
 8008f50:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008f52:	9305      	str	r3, [sp, #20]
 8008f54:	eba3 0309 	sub.w	r3, r3, r9
 8008f58:	455b      	cmp	r3, fp
 8008f5a:	dc33      	bgt.n	8008fc4 <_printf_float+0x384>
 8008f5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f60:	429a      	cmp	r2, r3
 8008f62:	db3b      	blt.n	8008fdc <_printf_float+0x39c>
 8008f64:	6823      	ldr	r3, [r4, #0]
 8008f66:	07da      	lsls	r2, r3, #31
 8008f68:	d438      	bmi.n	8008fdc <_printf_float+0x39c>
 8008f6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008f6c:	9a05      	ldr	r2, [sp, #20]
 8008f6e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008f70:	1a9a      	subs	r2, r3, r2
 8008f72:	eba3 0901 	sub.w	r9, r3, r1
 8008f76:	4591      	cmp	r9, r2
 8008f78:	bfa8      	it	ge
 8008f7a:	4691      	movge	r9, r2
 8008f7c:	f1b9 0f00 	cmp.w	r9, #0
 8008f80:	dc35      	bgt.n	8008fee <_printf_float+0x3ae>
 8008f82:	f04f 0800 	mov.w	r8, #0
 8008f86:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f8a:	f104 0a1a 	add.w	sl, r4, #26
 8008f8e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8008f92:	1a9b      	subs	r3, r3, r2
 8008f94:	eba3 0309 	sub.w	r3, r3, r9
 8008f98:	4543      	cmp	r3, r8
 8008f9a:	f77f af79 	ble.w	8008e90 <_printf_float+0x250>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	4652      	mov	r2, sl
 8008fa2:	4631      	mov	r1, r6
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	47b8      	blx	r7
 8008fa8:	3001      	adds	r0, #1
 8008faa:	f43f aeaa 	beq.w	8008d02 <_printf_float+0xc2>
 8008fae:	f108 0801 	add.w	r8, r8, #1
 8008fb2:	e7ec      	b.n	8008f8e <_printf_float+0x34e>
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	4631      	mov	r1, r6
 8008fb8:	4642      	mov	r2, r8
 8008fba:	4628      	mov	r0, r5
 8008fbc:	47b8      	blx	r7
 8008fbe:	3001      	adds	r0, #1
 8008fc0:	d1c0      	bne.n	8008f44 <_printf_float+0x304>
 8008fc2:	e69e      	b.n	8008d02 <_printf_float+0xc2>
 8008fc4:	2301      	movs	r3, #1
 8008fc6:	4631      	mov	r1, r6
 8008fc8:	4628      	mov	r0, r5
 8008fca:	9205      	str	r2, [sp, #20]
 8008fcc:	47b8      	blx	r7
 8008fce:	3001      	adds	r0, #1
 8008fd0:	f43f ae97 	beq.w	8008d02 <_printf_float+0xc2>
 8008fd4:	9a05      	ldr	r2, [sp, #20]
 8008fd6:	f10b 0b01 	add.w	fp, fp, #1
 8008fda:	e7b9      	b.n	8008f50 <_printf_float+0x310>
 8008fdc:	ee18 3a10 	vmov	r3, s16
 8008fe0:	4652      	mov	r2, sl
 8008fe2:	4631      	mov	r1, r6
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	47b8      	blx	r7
 8008fe8:	3001      	adds	r0, #1
 8008fea:	d1be      	bne.n	8008f6a <_printf_float+0x32a>
 8008fec:	e689      	b.n	8008d02 <_printf_float+0xc2>
 8008fee:	9a05      	ldr	r2, [sp, #20]
 8008ff0:	464b      	mov	r3, r9
 8008ff2:	4442      	add	r2, r8
 8008ff4:	4631      	mov	r1, r6
 8008ff6:	4628      	mov	r0, r5
 8008ff8:	47b8      	blx	r7
 8008ffa:	3001      	adds	r0, #1
 8008ffc:	d1c1      	bne.n	8008f82 <_printf_float+0x342>
 8008ffe:	e680      	b.n	8008d02 <_printf_float+0xc2>
 8009000:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009002:	2a01      	cmp	r2, #1
 8009004:	dc01      	bgt.n	800900a <_printf_float+0x3ca>
 8009006:	07db      	lsls	r3, r3, #31
 8009008:	d538      	bpl.n	800907c <_printf_float+0x43c>
 800900a:	2301      	movs	r3, #1
 800900c:	4642      	mov	r2, r8
 800900e:	4631      	mov	r1, r6
 8009010:	4628      	mov	r0, r5
 8009012:	47b8      	blx	r7
 8009014:	3001      	adds	r0, #1
 8009016:	f43f ae74 	beq.w	8008d02 <_printf_float+0xc2>
 800901a:	ee18 3a10 	vmov	r3, s16
 800901e:	4652      	mov	r2, sl
 8009020:	4631      	mov	r1, r6
 8009022:	4628      	mov	r0, r5
 8009024:	47b8      	blx	r7
 8009026:	3001      	adds	r0, #1
 8009028:	f43f ae6b 	beq.w	8008d02 <_printf_float+0xc2>
 800902c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009030:	2200      	movs	r2, #0
 8009032:	2300      	movs	r3, #0
 8009034:	f7f7 fd48 	bl	8000ac8 <__aeabi_dcmpeq>
 8009038:	b9d8      	cbnz	r0, 8009072 <_printf_float+0x432>
 800903a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800903c:	f108 0201 	add.w	r2, r8, #1
 8009040:	3b01      	subs	r3, #1
 8009042:	4631      	mov	r1, r6
 8009044:	4628      	mov	r0, r5
 8009046:	47b8      	blx	r7
 8009048:	3001      	adds	r0, #1
 800904a:	d10e      	bne.n	800906a <_printf_float+0x42a>
 800904c:	e659      	b.n	8008d02 <_printf_float+0xc2>
 800904e:	2301      	movs	r3, #1
 8009050:	4652      	mov	r2, sl
 8009052:	4631      	mov	r1, r6
 8009054:	4628      	mov	r0, r5
 8009056:	47b8      	blx	r7
 8009058:	3001      	adds	r0, #1
 800905a:	f43f ae52 	beq.w	8008d02 <_printf_float+0xc2>
 800905e:	f108 0801 	add.w	r8, r8, #1
 8009062:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009064:	3b01      	subs	r3, #1
 8009066:	4543      	cmp	r3, r8
 8009068:	dcf1      	bgt.n	800904e <_printf_float+0x40e>
 800906a:	464b      	mov	r3, r9
 800906c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009070:	e6dc      	b.n	8008e2c <_printf_float+0x1ec>
 8009072:	f04f 0800 	mov.w	r8, #0
 8009076:	f104 0a1a 	add.w	sl, r4, #26
 800907a:	e7f2      	b.n	8009062 <_printf_float+0x422>
 800907c:	2301      	movs	r3, #1
 800907e:	4642      	mov	r2, r8
 8009080:	e7df      	b.n	8009042 <_printf_float+0x402>
 8009082:	2301      	movs	r3, #1
 8009084:	464a      	mov	r2, r9
 8009086:	4631      	mov	r1, r6
 8009088:	4628      	mov	r0, r5
 800908a:	47b8      	blx	r7
 800908c:	3001      	adds	r0, #1
 800908e:	f43f ae38 	beq.w	8008d02 <_printf_float+0xc2>
 8009092:	f108 0801 	add.w	r8, r8, #1
 8009096:	68e3      	ldr	r3, [r4, #12]
 8009098:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800909a:	1a5b      	subs	r3, r3, r1
 800909c:	4543      	cmp	r3, r8
 800909e:	dcf0      	bgt.n	8009082 <_printf_float+0x442>
 80090a0:	e6fa      	b.n	8008e98 <_printf_float+0x258>
 80090a2:	f04f 0800 	mov.w	r8, #0
 80090a6:	f104 0919 	add.w	r9, r4, #25
 80090aa:	e7f4      	b.n	8009096 <_printf_float+0x456>

080090ac <_printf_common>:
 80090ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090b0:	4616      	mov	r6, r2
 80090b2:	4699      	mov	r9, r3
 80090b4:	688a      	ldr	r2, [r1, #8]
 80090b6:	690b      	ldr	r3, [r1, #16]
 80090b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80090bc:	4293      	cmp	r3, r2
 80090be:	bfb8      	it	lt
 80090c0:	4613      	movlt	r3, r2
 80090c2:	6033      	str	r3, [r6, #0]
 80090c4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80090c8:	4607      	mov	r7, r0
 80090ca:	460c      	mov	r4, r1
 80090cc:	b10a      	cbz	r2, 80090d2 <_printf_common+0x26>
 80090ce:	3301      	adds	r3, #1
 80090d0:	6033      	str	r3, [r6, #0]
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	0699      	lsls	r1, r3, #26
 80090d6:	bf42      	ittt	mi
 80090d8:	6833      	ldrmi	r3, [r6, #0]
 80090da:	3302      	addmi	r3, #2
 80090dc:	6033      	strmi	r3, [r6, #0]
 80090de:	6825      	ldr	r5, [r4, #0]
 80090e0:	f015 0506 	ands.w	r5, r5, #6
 80090e4:	d106      	bne.n	80090f4 <_printf_common+0x48>
 80090e6:	f104 0a19 	add.w	sl, r4, #25
 80090ea:	68e3      	ldr	r3, [r4, #12]
 80090ec:	6832      	ldr	r2, [r6, #0]
 80090ee:	1a9b      	subs	r3, r3, r2
 80090f0:	42ab      	cmp	r3, r5
 80090f2:	dc26      	bgt.n	8009142 <_printf_common+0x96>
 80090f4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80090f8:	1e13      	subs	r3, r2, #0
 80090fa:	6822      	ldr	r2, [r4, #0]
 80090fc:	bf18      	it	ne
 80090fe:	2301      	movne	r3, #1
 8009100:	0692      	lsls	r2, r2, #26
 8009102:	d42b      	bmi.n	800915c <_printf_common+0xb0>
 8009104:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009108:	4649      	mov	r1, r9
 800910a:	4638      	mov	r0, r7
 800910c:	47c0      	blx	r8
 800910e:	3001      	adds	r0, #1
 8009110:	d01e      	beq.n	8009150 <_printf_common+0xa4>
 8009112:	6823      	ldr	r3, [r4, #0]
 8009114:	68e5      	ldr	r5, [r4, #12]
 8009116:	6832      	ldr	r2, [r6, #0]
 8009118:	f003 0306 	and.w	r3, r3, #6
 800911c:	2b04      	cmp	r3, #4
 800911e:	bf08      	it	eq
 8009120:	1aad      	subeq	r5, r5, r2
 8009122:	68a3      	ldr	r3, [r4, #8]
 8009124:	6922      	ldr	r2, [r4, #16]
 8009126:	bf0c      	ite	eq
 8009128:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800912c:	2500      	movne	r5, #0
 800912e:	4293      	cmp	r3, r2
 8009130:	bfc4      	itt	gt
 8009132:	1a9b      	subgt	r3, r3, r2
 8009134:	18ed      	addgt	r5, r5, r3
 8009136:	2600      	movs	r6, #0
 8009138:	341a      	adds	r4, #26
 800913a:	42b5      	cmp	r5, r6
 800913c:	d11a      	bne.n	8009174 <_printf_common+0xc8>
 800913e:	2000      	movs	r0, #0
 8009140:	e008      	b.n	8009154 <_printf_common+0xa8>
 8009142:	2301      	movs	r3, #1
 8009144:	4652      	mov	r2, sl
 8009146:	4649      	mov	r1, r9
 8009148:	4638      	mov	r0, r7
 800914a:	47c0      	blx	r8
 800914c:	3001      	adds	r0, #1
 800914e:	d103      	bne.n	8009158 <_printf_common+0xac>
 8009150:	f04f 30ff 	mov.w	r0, #4294967295
 8009154:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009158:	3501      	adds	r5, #1
 800915a:	e7c6      	b.n	80090ea <_printf_common+0x3e>
 800915c:	18e1      	adds	r1, r4, r3
 800915e:	1c5a      	adds	r2, r3, #1
 8009160:	2030      	movs	r0, #48	; 0x30
 8009162:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009166:	4422      	add	r2, r4
 8009168:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800916c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009170:	3302      	adds	r3, #2
 8009172:	e7c7      	b.n	8009104 <_printf_common+0x58>
 8009174:	2301      	movs	r3, #1
 8009176:	4622      	mov	r2, r4
 8009178:	4649      	mov	r1, r9
 800917a:	4638      	mov	r0, r7
 800917c:	47c0      	blx	r8
 800917e:	3001      	adds	r0, #1
 8009180:	d0e6      	beq.n	8009150 <_printf_common+0xa4>
 8009182:	3601      	adds	r6, #1
 8009184:	e7d9      	b.n	800913a <_printf_common+0x8e>
	...

08009188 <_printf_i>:
 8009188:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800918c:	7e0f      	ldrb	r7, [r1, #24]
 800918e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009190:	2f78      	cmp	r7, #120	; 0x78
 8009192:	4691      	mov	r9, r2
 8009194:	4680      	mov	r8, r0
 8009196:	460c      	mov	r4, r1
 8009198:	469a      	mov	sl, r3
 800919a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800919e:	d807      	bhi.n	80091b0 <_printf_i+0x28>
 80091a0:	2f62      	cmp	r7, #98	; 0x62
 80091a2:	d80a      	bhi.n	80091ba <_printf_i+0x32>
 80091a4:	2f00      	cmp	r7, #0
 80091a6:	f000 80d8 	beq.w	800935a <_printf_i+0x1d2>
 80091aa:	2f58      	cmp	r7, #88	; 0x58
 80091ac:	f000 80a3 	beq.w	80092f6 <_printf_i+0x16e>
 80091b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80091b4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80091b8:	e03a      	b.n	8009230 <_printf_i+0xa8>
 80091ba:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80091be:	2b15      	cmp	r3, #21
 80091c0:	d8f6      	bhi.n	80091b0 <_printf_i+0x28>
 80091c2:	a101      	add	r1, pc, #4	; (adr r1, 80091c8 <_printf_i+0x40>)
 80091c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80091c8:	08009221 	.word	0x08009221
 80091cc:	08009235 	.word	0x08009235
 80091d0:	080091b1 	.word	0x080091b1
 80091d4:	080091b1 	.word	0x080091b1
 80091d8:	080091b1 	.word	0x080091b1
 80091dc:	080091b1 	.word	0x080091b1
 80091e0:	08009235 	.word	0x08009235
 80091e4:	080091b1 	.word	0x080091b1
 80091e8:	080091b1 	.word	0x080091b1
 80091ec:	080091b1 	.word	0x080091b1
 80091f0:	080091b1 	.word	0x080091b1
 80091f4:	08009341 	.word	0x08009341
 80091f8:	08009265 	.word	0x08009265
 80091fc:	08009323 	.word	0x08009323
 8009200:	080091b1 	.word	0x080091b1
 8009204:	080091b1 	.word	0x080091b1
 8009208:	08009363 	.word	0x08009363
 800920c:	080091b1 	.word	0x080091b1
 8009210:	08009265 	.word	0x08009265
 8009214:	080091b1 	.word	0x080091b1
 8009218:	080091b1 	.word	0x080091b1
 800921c:	0800932b 	.word	0x0800932b
 8009220:	682b      	ldr	r3, [r5, #0]
 8009222:	1d1a      	adds	r2, r3, #4
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	602a      	str	r2, [r5, #0]
 8009228:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800922c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009230:	2301      	movs	r3, #1
 8009232:	e0a3      	b.n	800937c <_printf_i+0x1f4>
 8009234:	6820      	ldr	r0, [r4, #0]
 8009236:	6829      	ldr	r1, [r5, #0]
 8009238:	0606      	lsls	r6, r0, #24
 800923a:	f101 0304 	add.w	r3, r1, #4
 800923e:	d50a      	bpl.n	8009256 <_printf_i+0xce>
 8009240:	680e      	ldr	r6, [r1, #0]
 8009242:	602b      	str	r3, [r5, #0]
 8009244:	2e00      	cmp	r6, #0
 8009246:	da03      	bge.n	8009250 <_printf_i+0xc8>
 8009248:	232d      	movs	r3, #45	; 0x2d
 800924a:	4276      	negs	r6, r6
 800924c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009250:	485e      	ldr	r0, [pc, #376]	; (80093cc <_printf_i+0x244>)
 8009252:	230a      	movs	r3, #10
 8009254:	e019      	b.n	800928a <_printf_i+0x102>
 8009256:	680e      	ldr	r6, [r1, #0]
 8009258:	602b      	str	r3, [r5, #0]
 800925a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800925e:	bf18      	it	ne
 8009260:	b236      	sxthne	r6, r6
 8009262:	e7ef      	b.n	8009244 <_printf_i+0xbc>
 8009264:	682b      	ldr	r3, [r5, #0]
 8009266:	6820      	ldr	r0, [r4, #0]
 8009268:	1d19      	adds	r1, r3, #4
 800926a:	6029      	str	r1, [r5, #0]
 800926c:	0601      	lsls	r1, r0, #24
 800926e:	d501      	bpl.n	8009274 <_printf_i+0xec>
 8009270:	681e      	ldr	r6, [r3, #0]
 8009272:	e002      	b.n	800927a <_printf_i+0xf2>
 8009274:	0646      	lsls	r6, r0, #25
 8009276:	d5fb      	bpl.n	8009270 <_printf_i+0xe8>
 8009278:	881e      	ldrh	r6, [r3, #0]
 800927a:	4854      	ldr	r0, [pc, #336]	; (80093cc <_printf_i+0x244>)
 800927c:	2f6f      	cmp	r7, #111	; 0x6f
 800927e:	bf0c      	ite	eq
 8009280:	2308      	moveq	r3, #8
 8009282:	230a      	movne	r3, #10
 8009284:	2100      	movs	r1, #0
 8009286:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800928a:	6865      	ldr	r5, [r4, #4]
 800928c:	60a5      	str	r5, [r4, #8]
 800928e:	2d00      	cmp	r5, #0
 8009290:	bfa2      	ittt	ge
 8009292:	6821      	ldrge	r1, [r4, #0]
 8009294:	f021 0104 	bicge.w	r1, r1, #4
 8009298:	6021      	strge	r1, [r4, #0]
 800929a:	b90e      	cbnz	r6, 80092a0 <_printf_i+0x118>
 800929c:	2d00      	cmp	r5, #0
 800929e:	d04d      	beq.n	800933c <_printf_i+0x1b4>
 80092a0:	4615      	mov	r5, r2
 80092a2:	fbb6 f1f3 	udiv	r1, r6, r3
 80092a6:	fb03 6711 	mls	r7, r3, r1, r6
 80092aa:	5dc7      	ldrb	r7, [r0, r7]
 80092ac:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80092b0:	4637      	mov	r7, r6
 80092b2:	42bb      	cmp	r3, r7
 80092b4:	460e      	mov	r6, r1
 80092b6:	d9f4      	bls.n	80092a2 <_printf_i+0x11a>
 80092b8:	2b08      	cmp	r3, #8
 80092ba:	d10b      	bne.n	80092d4 <_printf_i+0x14c>
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	07de      	lsls	r6, r3, #31
 80092c0:	d508      	bpl.n	80092d4 <_printf_i+0x14c>
 80092c2:	6923      	ldr	r3, [r4, #16]
 80092c4:	6861      	ldr	r1, [r4, #4]
 80092c6:	4299      	cmp	r1, r3
 80092c8:	bfde      	ittt	le
 80092ca:	2330      	movle	r3, #48	; 0x30
 80092cc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80092d0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80092d4:	1b52      	subs	r2, r2, r5
 80092d6:	6122      	str	r2, [r4, #16]
 80092d8:	f8cd a000 	str.w	sl, [sp]
 80092dc:	464b      	mov	r3, r9
 80092de:	aa03      	add	r2, sp, #12
 80092e0:	4621      	mov	r1, r4
 80092e2:	4640      	mov	r0, r8
 80092e4:	f7ff fee2 	bl	80090ac <_printf_common>
 80092e8:	3001      	adds	r0, #1
 80092ea:	d14c      	bne.n	8009386 <_printf_i+0x1fe>
 80092ec:	f04f 30ff 	mov.w	r0, #4294967295
 80092f0:	b004      	add	sp, #16
 80092f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092f6:	4835      	ldr	r0, [pc, #212]	; (80093cc <_printf_i+0x244>)
 80092f8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80092fc:	6829      	ldr	r1, [r5, #0]
 80092fe:	6823      	ldr	r3, [r4, #0]
 8009300:	f851 6b04 	ldr.w	r6, [r1], #4
 8009304:	6029      	str	r1, [r5, #0]
 8009306:	061d      	lsls	r5, r3, #24
 8009308:	d514      	bpl.n	8009334 <_printf_i+0x1ac>
 800930a:	07df      	lsls	r7, r3, #31
 800930c:	bf44      	itt	mi
 800930e:	f043 0320 	orrmi.w	r3, r3, #32
 8009312:	6023      	strmi	r3, [r4, #0]
 8009314:	b91e      	cbnz	r6, 800931e <_printf_i+0x196>
 8009316:	6823      	ldr	r3, [r4, #0]
 8009318:	f023 0320 	bic.w	r3, r3, #32
 800931c:	6023      	str	r3, [r4, #0]
 800931e:	2310      	movs	r3, #16
 8009320:	e7b0      	b.n	8009284 <_printf_i+0xfc>
 8009322:	6823      	ldr	r3, [r4, #0]
 8009324:	f043 0320 	orr.w	r3, r3, #32
 8009328:	6023      	str	r3, [r4, #0]
 800932a:	2378      	movs	r3, #120	; 0x78
 800932c:	4828      	ldr	r0, [pc, #160]	; (80093d0 <_printf_i+0x248>)
 800932e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009332:	e7e3      	b.n	80092fc <_printf_i+0x174>
 8009334:	0659      	lsls	r1, r3, #25
 8009336:	bf48      	it	mi
 8009338:	b2b6      	uxthmi	r6, r6
 800933a:	e7e6      	b.n	800930a <_printf_i+0x182>
 800933c:	4615      	mov	r5, r2
 800933e:	e7bb      	b.n	80092b8 <_printf_i+0x130>
 8009340:	682b      	ldr	r3, [r5, #0]
 8009342:	6826      	ldr	r6, [r4, #0]
 8009344:	6961      	ldr	r1, [r4, #20]
 8009346:	1d18      	adds	r0, r3, #4
 8009348:	6028      	str	r0, [r5, #0]
 800934a:	0635      	lsls	r5, r6, #24
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	d501      	bpl.n	8009354 <_printf_i+0x1cc>
 8009350:	6019      	str	r1, [r3, #0]
 8009352:	e002      	b.n	800935a <_printf_i+0x1d2>
 8009354:	0670      	lsls	r0, r6, #25
 8009356:	d5fb      	bpl.n	8009350 <_printf_i+0x1c8>
 8009358:	8019      	strh	r1, [r3, #0]
 800935a:	2300      	movs	r3, #0
 800935c:	6123      	str	r3, [r4, #16]
 800935e:	4615      	mov	r5, r2
 8009360:	e7ba      	b.n	80092d8 <_printf_i+0x150>
 8009362:	682b      	ldr	r3, [r5, #0]
 8009364:	1d1a      	adds	r2, r3, #4
 8009366:	602a      	str	r2, [r5, #0]
 8009368:	681d      	ldr	r5, [r3, #0]
 800936a:	6862      	ldr	r2, [r4, #4]
 800936c:	2100      	movs	r1, #0
 800936e:	4628      	mov	r0, r5
 8009370:	f7f6 ff36 	bl	80001e0 <memchr>
 8009374:	b108      	cbz	r0, 800937a <_printf_i+0x1f2>
 8009376:	1b40      	subs	r0, r0, r5
 8009378:	6060      	str	r0, [r4, #4]
 800937a:	6863      	ldr	r3, [r4, #4]
 800937c:	6123      	str	r3, [r4, #16]
 800937e:	2300      	movs	r3, #0
 8009380:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009384:	e7a8      	b.n	80092d8 <_printf_i+0x150>
 8009386:	6923      	ldr	r3, [r4, #16]
 8009388:	462a      	mov	r2, r5
 800938a:	4649      	mov	r1, r9
 800938c:	4640      	mov	r0, r8
 800938e:	47d0      	blx	sl
 8009390:	3001      	adds	r0, #1
 8009392:	d0ab      	beq.n	80092ec <_printf_i+0x164>
 8009394:	6823      	ldr	r3, [r4, #0]
 8009396:	079b      	lsls	r3, r3, #30
 8009398:	d413      	bmi.n	80093c2 <_printf_i+0x23a>
 800939a:	68e0      	ldr	r0, [r4, #12]
 800939c:	9b03      	ldr	r3, [sp, #12]
 800939e:	4298      	cmp	r0, r3
 80093a0:	bfb8      	it	lt
 80093a2:	4618      	movlt	r0, r3
 80093a4:	e7a4      	b.n	80092f0 <_printf_i+0x168>
 80093a6:	2301      	movs	r3, #1
 80093a8:	4632      	mov	r2, r6
 80093aa:	4649      	mov	r1, r9
 80093ac:	4640      	mov	r0, r8
 80093ae:	47d0      	blx	sl
 80093b0:	3001      	adds	r0, #1
 80093b2:	d09b      	beq.n	80092ec <_printf_i+0x164>
 80093b4:	3501      	adds	r5, #1
 80093b6:	68e3      	ldr	r3, [r4, #12]
 80093b8:	9903      	ldr	r1, [sp, #12]
 80093ba:	1a5b      	subs	r3, r3, r1
 80093bc:	42ab      	cmp	r3, r5
 80093be:	dcf2      	bgt.n	80093a6 <_printf_i+0x21e>
 80093c0:	e7eb      	b.n	800939a <_printf_i+0x212>
 80093c2:	2500      	movs	r5, #0
 80093c4:	f104 0619 	add.w	r6, r4, #25
 80093c8:	e7f5      	b.n	80093b6 <_printf_i+0x22e>
 80093ca:	bf00      	nop
 80093cc:	0800d282 	.word	0x0800d282
 80093d0:	0800d293 	.word	0x0800d293

080093d4 <_scanf_float>:
 80093d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093d8:	b087      	sub	sp, #28
 80093da:	4617      	mov	r7, r2
 80093dc:	9303      	str	r3, [sp, #12]
 80093de:	688b      	ldr	r3, [r1, #8]
 80093e0:	1e5a      	subs	r2, r3, #1
 80093e2:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 80093e6:	bf83      	ittte	hi
 80093e8:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 80093ec:	195b      	addhi	r3, r3, r5
 80093ee:	9302      	strhi	r3, [sp, #8]
 80093f0:	2300      	movls	r3, #0
 80093f2:	bf86      	itte	hi
 80093f4:	f240 135d 	movwhi	r3, #349	; 0x15d
 80093f8:	608b      	strhi	r3, [r1, #8]
 80093fa:	9302      	strls	r3, [sp, #8]
 80093fc:	680b      	ldr	r3, [r1, #0]
 80093fe:	468b      	mov	fp, r1
 8009400:	2500      	movs	r5, #0
 8009402:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009406:	f84b 3b1c 	str.w	r3, [fp], #28
 800940a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800940e:	4680      	mov	r8, r0
 8009410:	460c      	mov	r4, r1
 8009412:	465e      	mov	r6, fp
 8009414:	46aa      	mov	sl, r5
 8009416:	46a9      	mov	r9, r5
 8009418:	9501      	str	r5, [sp, #4]
 800941a:	68a2      	ldr	r2, [r4, #8]
 800941c:	b152      	cbz	r2, 8009434 <_scanf_float+0x60>
 800941e:	683b      	ldr	r3, [r7, #0]
 8009420:	781b      	ldrb	r3, [r3, #0]
 8009422:	2b4e      	cmp	r3, #78	; 0x4e
 8009424:	d864      	bhi.n	80094f0 <_scanf_float+0x11c>
 8009426:	2b40      	cmp	r3, #64	; 0x40
 8009428:	d83c      	bhi.n	80094a4 <_scanf_float+0xd0>
 800942a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800942e:	b2c8      	uxtb	r0, r1
 8009430:	280e      	cmp	r0, #14
 8009432:	d93a      	bls.n	80094aa <_scanf_float+0xd6>
 8009434:	f1b9 0f00 	cmp.w	r9, #0
 8009438:	d003      	beq.n	8009442 <_scanf_float+0x6e>
 800943a:	6823      	ldr	r3, [r4, #0]
 800943c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009440:	6023      	str	r3, [r4, #0]
 8009442:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009446:	f1ba 0f01 	cmp.w	sl, #1
 800944a:	f200 8113 	bhi.w	8009674 <_scanf_float+0x2a0>
 800944e:	455e      	cmp	r6, fp
 8009450:	f200 8105 	bhi.w	800965e <_scanf_float+0x28a>
 8009454:	2501      	movs	r5, #1
 8009456:	4628      	mov	r0, r5
 8009458:	b007      	add	sp, #28
 800945a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800945e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009462:	2a0d      	cmp	r2, #13
 8009464:	d8e6      	bhi.n	8009434 <_scanf_float+0x60>
 8009466:	a101      	add	r1, pc, #4	; (adr r1, 800946c <_scanf_float+0x98>)
 8009468:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800946c:	080095ab 	.word	0x080095ab
 8009470:	08009435 	.word	0x08009435
 8009474:	08009435 	.word	0x08009435
 8009478:	08009435 	.word	0x08009435
 800947c:	0800960b 	.word	0x0800960b
 8009480:	080095e3 	.word	0x080095e3
 8009484:	08009435 	.word	0x08009435
 8009488:	08009435 	.word	0x08009435
 800948c:	080095b9 	.word	0x080095b9
 8009490:	08009435 	.word	0x08009435
 8009494:	08009435 	.word	0x08009435
 8009498:	08009435 	.word	0x08009435
 800949c:	08009435 	.word	0x08009435
 80094a0:	08009571 	.word	0x08009571
 80094a4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80094a8:	e7db      	b.n	8009462 <_scanf_float+0x8e>
 80094aa:	290e      	cmp	r1, #14
 80094ac:	d8c2      	bhi.n	8009434 <_scanf_float+0x60>
 80094ae:	a001      	add	r0, pc, #4	; (adr r0, 80094b4 <_scanf_float+0xe0>)
 80094b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80094b4:	08009563 	.word	0x08009563
 80094b8:	08009435 	.word	0x08009435
 80094bc:	08009563 	.word	0x08009563
 80094c0:	080095f7 	.word	0x080095f7
 80094c4:	08009435 	.word	0x08009435
 80094c8:	08009511 	.word	0x08009511
 80094cc:	0800954d 	.word	0x0800954d
 80094d0:	0800954d 	.word	0x0800954d
 80094d4:	0800954d 	.word	0x0800954d
 80094d8:	0800954d 	.word	0x0800954d
 80094dc:	0800954d 	.word	0x0800954d
 80094e0:	0800954d 	.word	0x0800954d
 80094e4:	0800954d 	.word	0x0800954d
 80094e8:	0800954d 	.word	0x0800954d
 80094ec:	0800954d 	.word	0x0800954d
 80094f0:	2b6e      	cmp	r3, #110	; 0x6e
 80094f2:	d809      	bhi.n	8009508 <_scanf_float+0x134>
 80094f4:	2b60      	cmp	r3, #96	; 0x60
 80094f6:	d8b2      	bhi.n	800945e <_scanf_float+0x8a>
 80094f8:	2b54      	cmp	r3, #84	; 0x54
 80094fa:	d077      	beq.n	80095ec <_scanf_float+0x218>
 80094fc:	2b59      	cmp	r3, #89	; 0x59
 80094fe:	d199      	bne.n	8009434 <_scanf_float+0x60>
 8009500:	2d07      	cmp	r5, #7
 8009502:	d197      	bne.n	8009434 <_scanf_float+0x60>
 8009504:	2508      	movs	r5, #8
 8009506:	e029      	b.n	800955c <_scanf_float+0x188>
 8009508:	2b74      	cmp	r3, #116	; 0x74
 800950a:	d06f      	beq.n	80095ec <_scanf_float+0x218>
 800950c:	2b79      	cmp	r3, #121	; 0x79
 800950e:	e7f6      	b.n	80094fe <_scanf_float+0x12a>
 8009510:	6821      	ldr	r1, [r4, #0]
 8009512:	05c8      	lsls	r0, r1, #23
 8009514:	d51a      	bpl.n	800954c <_scanf_float+0x178>
 8009516:	9b02      	ldr	r3, [sp, #8]
 8009518:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800951c:	6021      	str	r1, [r4, #0]
 800951e:	f109 0901 	add.w	r9, r9, #1
 8009522:	b11b      	cbz	r3, 800952c <_scanf_float+0x158>
 8009524:	3b01      	subs	r3, #1
 8009526:	3201      	adds	r2, #1
 8009528:	9302      	str	r3, [sp, #8]
 800952a:	60a2      	str	r2, [r4, #8]
 800952c:	68a3      	ldr	r3, [r4, #8]
 800952e:	3b01      	subs	r3, #1
 8009530:	60a3      	str	r3, [r4, #8]
 8009532:	6923      	ldr	r3, [r4, #16]
 8009534:	3301      	adds	r3, #1
 8009536:	6123      	str	r3, [r4, #16]
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	3b01      	subs	r3, #1
 800953c:	2b00      	cmp	r3, #0
 800953e:	607b      	str	r3, [r7, #4]
 8009540:	f340 8084 	ble.w	800964c <_scanf_float+0x278>
 8009544:	683b      	ldr	r3, [r7, #0]
 8009546:	3301      	adds	r3, #1
 8009548:	603b      	str	r3, [r7, #0]
 800954a:	e766      	b.n	800941a <_scanf_float+0x46>
 800954c:	eb1a 0f05 	cmn.w	sl, r5
 8009550:	f47f af70 	bne.w	8009434 <_scanf_float+0x60>
 8009554:	6822      	ldr	r2, [r4, #0]
 8009556:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800955a:	6022      	str	r2, [r4, #0]
 800955c:	f806 3b01 	strb.w	r3, [r6], #1
 8009560:	e7e4      	b.n	800952c <_scanf_float+0x158>
 8009562:	6822      	ldr	r2, [r4, #0]
 8009564:	0610      	lsls	r0, r2, #24
 8009566:	f57f af65 	bpl.w	8009434 <_scanf_float+0x60>
 800956a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800956e:	e7f4      	b.n	800955a <_scanf_float+0x186>
 8009570:	f1ba 0f00 	cmp.w	sl, #0
 8009574:	d10e      	bne.n	8009594 <_scanf_float+0x1c0>
 8009576:	f1b9 0f00 	cmp.w	r9, #0
 800957a:	d10e      	bne.n	800959a <_scanf_float+0x1c6>
 800957c:	6822      	ldr	r2, [r4, #0]
 800957e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009582:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009586:	d108      	bne.n	800959a <_scanf_float+0x1c6>
 8009588:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800958c:	6022      	str	r2, [r4, #0]
 800958e:	f04f 0a01 	mov.w	sl, #1
 8009592:	e7e3      	b.n	800955c <_scanf_float+0x188>
 8009594:	f1ba 0f02 	cmp.w	sl, #2
 8009598:	d055      	beq.n	8009646 <_scanf_float+0x272>
 800959a:	2d01      	cmp	r5, #1
 800959c:	d002      	beq.n	80095a4 <_scanf_float+0x1d0>
 800959e:	2d04      	cmp	r5, #4
 80095a0:	f47f af48 	bne.w	8009434 <_scanf_float+0x60>
 80095a4:	3501      	adds	r5, #1
 80095a6:	b2ed      	uxtb	r5, r5
 80095a8:	e7d8      	b.n	800955c <_scanf_float+0x188>
 80095aa:	f1ba 0f01 	cmp.w	sl, #1
 80095ae:	f47f af41 	bne.w	8009434 <_scanf_float+0x60>
 80095b2:	f04f 0a02 	mov.w	sl, #2
 80095b6:	e7d1      	b.n	800955c <_scanf_float+0x188>
 80095b8:	b97d      	cbnz	r5, 80095da <_scanf_float+0x206>
 80095ba:	f1b9 0f00 	cmp.w	r9, #0
 80095be:	f47f af3c 	bne.w	800943a <_scanf_float+0x66>
 80095c2:	6822      	ldr	r2, [r4, #0]
 80095c4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80095c8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80095cc:	f47f af39 	bne.w	8009442 <_scanf_float+0x6e>
 80095d0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80095d4:	6022      	str	r2, [r4, #0]
 80095d6:	2501      	movs	r5, #1
 80095d8:	e7c0      	b.n	800955c <_scanf_float+0x188>
 80095da:	2d03      	cmp	r5, #3
 80095dc:	d0e2      	beq.n	80095a4 <_scanf_float+0x1d0>
 80095de:	2d05      	cmp	r5, #5
 80095e0:	e7de      	b.n	80095a0 <_scanf_float+0x1cc>
 80095e2:	2d02      	cmp	r5, #2
 80095e4:	f47f af26 	bne.w	8009434 <_scanf_float+0x60>
 80095e8:	2503      	movs	r5, #3
 80095ea:	e7b7      	b.n	800955c <_scanf_float+0x188>
 80095ec:	2d06      	cmp	r5, #6
 80095ee:	f47f af21 	bne.w	8009434 <_scanf_float+0x60>
 80095f2:	2507      	movs	r5, #7
 80095f4:	e7b2      	b.n	800955c <_scanf_float+0x188>
 80095f6:	6822      	ldr	r2, [r4, #0]
 80095f8:	0591      	lsls	r1, r2, #22
 80095fa:	f57f af1b 	bpl.w	8009434 <_scanf_float+0x60>
 80095fe:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009602:	6022      	str	r2, [r4, #0]
 8009604:	f8cd 9004 	str.w	r9, [sp, #4]
 8009608:	e7a8      	b.n	800955c <_scanf_float+0x188>
 800960a:	6822      	ldr	r2, [r4, #0]
 800960c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009610:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009614:	d006      	beq.n	8009624 <_scanf_float+0x250>
 8009616:	0550      	lsls	r0, r2, #21
 8009618:	f57f af0c 	bpl.w	8009434 <_scanf_float+0x60>
 800961c:	f1b9 0f00 	cmp.w	r9, #0
 8009620:	f43f af0f 	beq.w	8009442 <_scanf_float+0x6e>
 8009624:	0591      	lsls	r1, r2, #22
 8009626:	bf58      	it	pl
 8009628:	9901      	ldrpl	r1, [sp, #4]
 800962a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800962e:	bf58      	it	pl
 8009630:	eba9 0101 	subpl.w	r1, r9, r1
 8009634:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009638:	bf58      	it	pl
 800963a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800963e:	6022      	str	r2, [r4, #0]
 8009640:	f04f 0900 	mov.w	r9, #0
 8009644:	e78a      	b.n	800955c <_scanf_float+0x188>
 8009646:	f04f 0a03 	mov.w	sl, #3
 800964a:	e787      	b.n	800955c <_scanf_float+0x188>
 800964c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009650:	4639      	mov	r1, r7
 8009652:	4640      	mov	r0, r8
 8009654:	4798      	blx	r3
 8009656:	2800      	cmp	r0, #0
 8009658:	f43f aedf 	beq.w	800941a <_scanf_float+0x46>
 800965c:	e6ea      	b.n	8009434 <_scanf_float+0x60>
 800965e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009662:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009666:	463a      	mov	r2, r7
 8009668:	4640      	mov	r0, r8
 800966a:	4798      	blx	r3
 800966c:	6923      	ldr	r3, [r4, #16]
 800966e:	3b01      	subs	r3, #1
 8009670:	6123      	str	r3, [r4, #16]
 8009672:	e6ec      	b.n	800944e <_scanf_float+0x7a>
 8009674:	1e6b      	subs	r3, r5, #1
 8009676:	2b06      	cmp	r3, #6
 8009678:	d825      	bhi.n	80096c6 <_scanf_float+0x2f2>
 800967a:	2d02      	cmp	r5, #2
 800967c:	d836      	bhi.n	80096ec <_scanf_float+0x318>
 800967e:	455e      	cmp	r6, fp
 8009680:	f67f aee8 	bls.w	8009454 <_scanf_float+0x80>
 8009684:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009688:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800968c:	463a      	mov	r2, r7
 800968e:	4640      	mov	r0, r8
 8009690:	4798      	blx	r3
 8009692:	6923      	ldr	r3, [r4, #16]
 8009694:	3b01      	subs	r3, #1
 8009696:	6123      	str	r3, [r4, #16]
 8009698:	e7f1      	b.n	800967e <_scanf_float+0x2aa>
 800969a:	9802      	ldr	r0, [sp, #8]
 800969c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096a0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80096a4:	9002      	str	r0, [sp, #8]
 80096a6:	463a      	mov	r2, r7
 80096a8:	4640      	mov	r0, r8
 80096aa:	4798      	blx	r3
 80096ac:	6923      	ldr	r3, [r4, #16]
 80096ae:	3b01      	subs	r3, #1
 80096b0:	6123      	str	r3, [r4, #16]
 80096b2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80096b6:	fa5f fa8a 	uxtb.w	sl, sl
 80096ba:	f1ba 0f02 	cmp.w	sl, #2
 80096be:	d1ec      	bne.n	800969a <_scanf_float+0x2c6>
 80096c0:	3d03      	subs	r5, #3
 80096c2:	b2ed      	uxtb	r5, r5
 80096c4:	1b76      	subs	r6, r6, r5
 80096c6:	6823      	ldr	r3, [r4, #0]
 80096c8:	05da      	lsls	r2, r3, #23
 80096ca:	d52f      	bpl.n	800972c <_scanf_float+0x358>
 80096cc:	055b      	lsls	r3, r3, #21
 80096ce:	d510      	bpl.n	80096f2 <_scanf_float+0x31e>
 80096d0:	455e      	cmp	r6, fp
 80096d2:	f67f aebf 	bls.w	8009454 <_scanf_float+0x80>
 80096d6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80096da:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80096de:	463a      	mov	r2, r7
 80096e0:	4640      	mov	r0, r8
 80096e2:	4798      	blx	r3
 80096e4:	6923      	ldr	r3, [r4, #16]
 80096e6:	3b01      	subs	r3, #1
 80096e8:	6123      	str	r3, [r4, #16]
 80096ea:	e7f1      	b.n	80096d0 <_scanf_float+0x2fc>
 80096ec:	46aa      	mov	sl, r5
 80096ee:	9602      	str	r6, [sp, #8]
 80096f0:	e7df      	b.n	80096b2 <_scanf_float+0x2de>
 80096f2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80096f6:	6923      	ldr	r3, [r4, #16]
 80096f8:	2965      	cmp	r1, #101	; 0x65
 80096fa:	f103 33ff 	add.w	r3, r3, #4294967295
 80096fe:	f106 35ff 	add.w	r5, r6, #4294967295
 8009702:	6123      	str	r3, [r4, #16]
 8009704:	d00c      	beq.n	8009720 <_scanf_float+0x34c>
 8009706:	2945      	cmp	r1, #69	; 0x45
 8009708:	d00a      	beq.n	8009720 <_scanf_float+0x34c>
 800970a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800970e:	463a      	mov	r2, r7
 8009710:	4640      	mov	r0, r8
 8009712:	4798      	blx	r3
 8009714:	6923      	ldr	r3, [r4, #16]
 8009716:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800971a:	3b01      	subs	r3, #1
 800971c:	1eb5      	subs	r5, r6, #2
 800971e:	6123      	str	r3, [r4, #16]
 8009720:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009724:	463a      	mov	r2, r7
 8009726:	4640      	mov	r0, r8
 8009728:	4798      	blx	r3
 800972a:	462e      	mov	r6, r5
 800972c:	6825      	ldr	r5, [r4, #0]
 800972e:	f015 0510 	ands.w	r5, r5, #16
 8009732:	d159      	bne.n	80097e8 <_scanf_float+0x414>
 8009734:	7035      	strb	r5, [r6, #0]
 8009736:	6823      	ldr	r3, [r4, #0]
 8009738:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800973c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009740:	d11b      	bne.n	800977a <_scanf_float+0x3a6>
 8009742:	9b01      	ldr	r3, [sp, #4]
 8009744:	454b      	cmp	r3, r9
 8009746:	eba3 0209 	sub.w	r2, r3, r9
 800974a:	d123      	bne.n	8009794 <_scanf_float+0x3c0>
 800974c:	2200      	movs	r2, #0
 800974e:	4659      	mov	r1, fp
 8009750:	4640      	mov	r0, r8
 8009752:	f000 fea7 	bl	800a4a4 <_strtod_r>
 8009756:	6822      	ldr	r2, [r4, #0]
 8009758:	9b03      	ldr	r3, [sp, #12]
 800975a:	f012 0f02 	tst.w	r2, #2
 800975e:	ec57 6b10 	vmov	r6, r7, d0
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	d021      	beq.n	80097aa <_scanf_float+0x3d6>
 8009766:	9903      	ldr	r1, [sp, #12]
 8009768:	1d1a      	adds	r2, r3, #4
 800976a:	600a      	str	r2, [r1, #0]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	e9c3 6700 	strd	r6, r7, [r3]
 8009772:	68e3      	ldr	r3, [r4, #12]
 8009774:	3301      	adds	r3, #1
 8009776:	60e3      	str	r3, [r4, #12]
 8009778:	e66d      	b.n	8009456 <_scanf_float+0x82>
 800977a:	9b04      	ldr	r3, [sp, #16]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d0e5      	beq.n	800974c <_scanf_float+0x378>
 8009780:	9905      	ldr	r1, [sp, #20]
 8009782:	230a      	movs	r3, #10
 8009784:	462a      	mov	r2, r5
 8009786:	3101      	adds	r1, #1
 8009788:	4640      	mov	r0, r8
 800978a:	f000 ff13 	bl	800a5b4 <_strtol_r>
 800978e:	9b04      	ldr	r3, [sp, #16]
 8009790:	9e05      	ldr	r6, [sp, #20]
 8009792:	1ac2      	subs	r2, r0, r3
 8009794:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009798:	429e      	cmp	r6, r3
 800979a:	bf28      	it	cs
 800979c:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80097a0:	4912      	ldr	r1, [pc, #72]	; (80097ec <_scanf_float+0x418>)
 80097a2:	4630      	mov	r0, r6
 80097a4:	f000 f83c 	bl	8009820 <siprintf>
 80097a8:	e7d0      	b.n	800974c <_scanf_float+0x378>
 80097aa:	9903      	ldr	r1, [sp, #12]
 80097ac:	f012 0f04 	tst.w	r2, #4
 80097b0:	f103 0204 	add.w	r2, r3, #4
 80097b4:	600a      	str	r2, [r1, #0]
 80097b6:	d1d9      	bne.n	800976c <_scanf_float+0x398>
 80097b8:	f8d3 8000 	ldr.w	r8, [r3]
 80097bc:	ee10 2a10 	vmov	r2, s0
 80097c0:	ee10 0a10 	vmov	r0, s0
 80097c4:	463b      	mov	r3, r7
 80097c6:	4639      	mov	r1, r7
 80097c8:	f7f7 f9b0 	bl	8000b2c <__aeabi_dcmpun>
 80097cc:	b128      	cbz	r0, 80097da <_scanf_float+0x406>
 80097ce:	4808      	ldr	r0, [pc, #32]	; (80097f0 <_scanf_float+0x41c>)
 80097d0:	f000 f820 	bl	8009814 <nanf>
 80097d4:	ed88 0a00 	vstr	s0, [r8]
 80097d8:	e7cb      	b.n	8009772 <_scanf_float+0x39e>
 80097da:	4630      	mov	r0, r6
 80097dc:	4639      	mov	r1, r7
 80097de:	f7f7 fa03 	bl	8000be8 <__aeabi_d2f>
 80097e2:	f8c8 0000 	str.w	r0, [r8]
 80097e6:	e7c4      	b.n	8009772 <_scanf_float+0x39e>
 80097e8:	2500      	movs	r5, #0
 80097ea:	e634      	b.n	8009456 <_scanf_float+0x82>
 80097ec:	0800d2a4 	.word	0x0800d2a4
 80097f0:	0800d6b0 	.word	0x0800d6b0

080097f4 <_sbrk_r>:
 80097f4:	b538      	push	{r3, r4, r5, lr}
 80097f6:	4d06      	ldr	r5, [pc, #24]	; (8009810 <_sbrk_r+0x1c>)
 80097f8:	2300      	movs	r3, #0
 80097fa:	4604      	mov	r4, r0
 80097fc:	4608      	mov	r0, r1
 80097fe:	602b      	str	r3, [r5, #0]
 8009800:	f7f8 fcd0 	bl	80021a4 <_sbrk>
 8009804:	1c43      	adds	r3, r0, #1
 8009806:	d102      	bne.n	800980e <_sbrk_r+0x1a>
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	b103      	cbz	r3, 800980e <_sbrk_r+0x1a>
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	20000aec 	.word	0x20000aec

08009814 <nanf>:
 8009814:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800981c <nanf+0x8>
 8009818:	4770      	bx	lr
 800981a:	bf00      	nop
 800981c:	7fc00000 	.word	0x7fc00000

08009820 <siprintf>:
 8009820:	b40e      	push	{r1, r2, r3}
 8009822:	b500      	push	{lr}
 8009824:	b09c      	sub	sp, #112	; 0x70
 8009826:	ab1d      	add	r3, sp, #116	; 0x74
 8009828:	9002      	str	r0, [sp, #8]
 800982a:	9006      	str	r0, [sp, #24]
 800982c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009830:	4809      	ldr	r0, [pc, #36]	; (8009858 <siprintf+0x38>)
 8009832:	9107      	str	r1, [sp, #28]
 8009834:	9104      	str	r1, [sp, #16]
 8009836:	4909      	ldr	r1, [pc, #36]	; (800985c <siprintf+0x3c>)
 8009838:	f853 2b04 	ldr.w	r2, [r3], #4
 800983c:	9105      	str	r1, [sp, #20]
 800983e:	6800      	ldr	r0, [r0, #0]
 8009840:	9301      	str	r3, [sp, #4]
 8009842:	a902      	add	r1, sp, #8
 8009844:	f002 fe04 	bl	800c450 <_svfiprintf_r>
 8009848:	9b02      	ldr	r3, [sp, #8]
 800984a:	2200      	movs	r2, #0
 800984c:	701a      	strb	r2, [r3, #0]
 800984e:	b01c      	add	sp, #112	; 0x70
 8009850:	f85d eb04 	ldr.w	lr, [sp], #4
 8009854:	b003      	add	sp, #12
 8009856:	4770      	bx	lr
 8009858:	20000064 	.word	0x20000064
 800985c:	ffff0208 	.word	0xffff0208

08009860 <sulp>:
 8009860:	b570      	push	{r4, r5, r6, lr}
 8009862:	4604      	mov	r4, r0
 8009864:	460d      	mov	r5, r1
 8009866:	ec45 4b10 	vmov	d0, r4, r5
 800986a:	4616      	mov	r6, r2
 800986c:	f002 fc30 	bl	800c0d0 <__ulp>
 8009870:	ec51 0b10 	vmov	r0, r1, d0
 8009874:	b17e      	cbz	r6, 8009896 <sulp+0x36>
 8009876:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800987a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800987e:	2b00      	cmp	r3, #0
 8009880:	dd09      	ble.n	8009896 <sulp+0x36>
 8009882:	051b      	lsls	r3, r3, #20
 8009884:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009888:	2400      	movs	r4, #0
 800988a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800988e:	4622      	mov	r2, r4
 8009890:	462b      	mov	r3, r5
 8009892:	f7f6 feb1 	bl	80005f8 <__aeabi_dmul>
 8009896:	bd70      	pop	{r4, r5, r6, pc}

08009898 <_strtod_l>:
 8009898:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800989c:	ed2d 8b02 	vpush	{d8}
 80098a0:	b09d      	sub	sp, #116	; 0x74
 80098a2:	461f      	mov	r7, r3
 80098a4:	2300      	movs	r3, #0
 80098a6:	9318      	str	r3, [sp, #96]	; 0x60
 80098a8:	4ba2      	ldr	r3, [pc, #648]	; (8009b34 <_strtod_l+0x29c>)
 80098aa:	9213      	str	r2, [sp, #76]	; 0x4c
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	9305      	str	r3, [sp, #20]
 80098b0:	4604      	mov	r4, r0
 80098b2:	4618      	mov	r0, r3
 80098b4:	4688      	mov	r8, r1
 80098b6:	f7f6 fc8b 	bl	80001d0 <strlen>
 80098ba:	f04f 0a00 	mov.w	sl, #0
 80098be:	4605      	mov	r5, r0
 80098c0:	f04f 0b00 	mov.w	fp, #0
 80098c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80098c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80098ca:	781a      	ldrb	r2, [r3, #0]
 80098cc:	2a2b      	cmp	r2, #43	; 0x2b
 80098ce:	d04e      	beq.n	800996e <_strtod_l+0xd6>
 80098d0:	d83b      	bhi.n	800994a <_strtod_l+0xb2>
 80098d2:	2a0d      	cmp	r2, #13
 80098d4:	d834      	bhi.n	8009940 <_strtod_l+0xa8>
 80098d6:	2a08      	cmp	r2, #8
 80098d8:	d834      	bhi.n	8009944 <_strtod_l+0xac>
 80098da:	2a00      	cmp	r2, #0
 80098dc:	d03e      	beq.n	800995c <_strtod_l+0xc4>
 80098de:	2300      	movs	r3, #0
 80098e0:	930a      	str	r3, [sp, #40]	; 0x28
 80098e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 80098e4:	7833      	ldrb	r3, [r6, #0]
 80098e6:	2b30      	cmp	r3, #48	; 0x30
 80098e8:	f040 80b0 	bne.w	8009a4c <_strtod_l+0x1b4>
 80098ec:	7873      	ldrb	r3, [r6, #1]
 80098ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80098f2:	2b58      	cmp	r3, #88	; 0x58
 80098f4:	d168      	bne.n	80099c8 <_strtod_l+0x130>
 80098f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80098f8:	9301      	str	r3, [sp, #4]
 80098fa:	ab18      	add	r3, sp, #96	; 0x60
 80098fc:	9702      	str	r7, [sp, #8]
 80098fe:	9300      	str	r3, [sp, #0]
 8009900:	4a8d      	ldr	r2, [pc, #564]	; (8009b38 <_strtod_l+0x2a0>)
 8009902:	ab19      	add	r3, sp, #100	; 0x64
 8009904:	a917      	add	r1, sp, #92	; 0x5c
 8009906:	4620      	mov	r0, r4
 8009908:	f001 fd38 	bl	800b37c <__gethex>
 800990c:	f010 0707 	ands.w	r7, r0, #7
 8009910:	4605      	mov	r5, r0
 8009912:	d005      	beq.n	8009920 <_strtod_l+0x88>
 8009914:	2f06      	cmp	r7, #6
 8009916:	d12c      	bne.n	8009972 <_strtod_l+0xda>
 8009918:	3601      	adds	r6, #1
 800991a:	2300      	movs	r3, #0
 800991c:	9617      	str	r6, [sp, #92]	; 0x5c
 800991e:	930a      	str	r3, [sp, #40]	; 0x28
 8009920:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009922:	2b00      	cmp	r3, #0
 8009924:	f040 8590 	bne.w	800a448 <_strtod_l+0xbb0>
 8009928:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800992a:	b1eb      	cbz	r3, 8009968 <_strtod_l+0xd0>
 800992c:	4652      	mov	r2, sl
 800992e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009932:	ec43 2b10 	vmov	d0, r2, r3
 8009936:	b01d      	add	sp, #116	; 0x74
 8009938:	ecbd 8b02 	vpop	{d8}
 800993c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009940:	2a20      	cmp	r2, #32
 8009942:	d1cc      	bne.n	80098de <_strtod_l+0x46>
 8009944:	3301      	adds	r3, #1
 8009946:	9317      	str	r3, [sp, #92]	; 0x5c
 8009948:	e7be      	b.n	80098c8 <_strtod_l+0x30>
 800994a:	2a2d      	cmp	r2, #45	; 0x2d
 800994c:	d1c7      	bne.n	80098de <_strtod_l+0x46>
 800994e:	2201      	movs	r2, #1
 8009950:	920a      	str	r2, [sp, #40]	; 0x28
 8009952:	1c5a      	adds	r2, r3, #1
 8009954:	9217      	str	r2, [sp, #92]	; 0x5c
 8009956:	785b      	ldrb	r3, [r3, #1]
 8009958:	2b00      	cmp	r3, #0
 800995a:	d1c2      	bne.n	80098e2 <_strtod_l+0x4a>
 800995c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800995e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009962:	2b00      	cmp	r3, #0
 8009964:	f040 856e 	bne.w	800a444 <_strtod_l+0xbac>
 8009968:	4652      	mov	r2, sl
 800996a:	465b      	mov	r3, fp
 800996c:	e7e1      	b.n	8009932 <_strtod_l+0x9a>
 800996e:	2200      	movs	r2, #0
 8009970:	e7ee      	b.n	8009950 <_strtod_l+0xb8>
 8009972:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009974:	b13a      	cbz	r2, 8009986 <_strtod_l+0xee>
 8009976:	2135      	movs	r1, #53	; 0x35
 8009978:	a81a      	add	r0, sp, #104	; 0x68
 800997a:	f002 fcb4 	bl	800c2e6 <__copybits>
 800997e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009980:	4620      	mov	r0, r4
 8009982:	f002 f873 	bl	800ba6c <_Bfree>
 8009986:	3f01      	subs	r7, #1
 8009988:	2f04      	cmp	r7, #4
 800998a:	d806      	bhi.n	800999a <_strtod_l+0x102>
 800998c:	e8df f007 	tbb	[pc, r7]
 8009990:	1714030a 	.word	0x1714030a
 8009994:	0a          	.byte	0x0a
 8009995:	00          	.byte	0x00
 8009996:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800999a:	0728      	lsls	r0, r5, #28
 800999c:	d5c0      	bpl.n	8009920 <_strtod_l+0x88>
 800999e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80099a2:	e7bd      	b.n	8009920 <_strtod_l+0x88>
 80099a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80099a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80099aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80099ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80099b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80099b6:	e7f0      	b.n	800999a <_strtod_l+0x102>
 80099b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 8009b3c <_strtod_l+0x2a4>
 80099bc:	e7ed      	b.n	800999a <_strtod_l+0x102>
 80099be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80099c2:	f04f 3aff 	mov.w	sl, #4294967295
 80099c6:	e7e8      	b.n	800999a <_strtod_l+0x102>
 80099c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099ca:	1c5a      	adds	r2, r3, #1
 80099cc:	9217      	str	r2, [sp, #92]	; 0x5c
 80099ce:	785b      	ldrb	r3, [r3, #1]
 80099d0:	2b30      	cmp	r3, #48	; 0x30
 80099d2:	d0f9      	beq.n	80099c8 <_strtod_l+0x130>
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d0a3      	beq.n	8009920 <_strtod_l+0x88>
 80099d8:	2301      	movs	r3, #1
 80099da:	f04f 0900 	mov.w	r9, #0
 80099de:	9304      	str	r3, [sp, #16]
 80099e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80099e2:	9308      	str	r3, [sp, #32]
 80099e4:	f8cd 901c 	str.w	r9, [sp, #28]
 80099e8:	464f      	mov	r7, r9
 80099ea:	220a      	movs	r2, #10
 80099ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80099ee:	7806      	ldrb	r6, [r0, #0]
 80099f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80099f4:	b2d9      	uxtb	r1, r3
 80099f6:	2909      	cmp	r1, #9
 80099f8:	d92a      	bls.n	8009a50 <_strtod_l+0x1b8>
 80099fa:	9905      	ldr	r1, [sp, #20]
 80099fc:	462a      	mov	r2, r5
 80099fe:	f002 fe2f 	bl	800c660 <strncmp>
 8009a02:	b398      	cbz	r0, 8009a6c <_strtod_l+0x1d4>
 8009a04:	2000      	movs	r0, #0
 8009a06:	4632      	mov	r2, r6
 8009a08:	463d      	mov	r5, r7
 8009a0a:	9005      	str	r0, [sp, #20]
 8009a0c:	4603      	mov	r3, r0
 8009a0e:	2a65      	cmp	r2, #101	; 0x65
 8009a10:	d001      	beq.n	8009a16 <_strtod_l+0x17e>
 8009a12:	2a45      	cmp	r2, #69	; 0x45
 8009a14:	d118      	bne.n	8009a48 <_strtod_l+0x1b0>
 8009a16:	b91d      	cbnz	r5, 8009a20 <_strtod_l+0x188>
 8009a18:	9a04      	ldr	r2, [sp, #16]
 8009a1a:	4302      	orrs	r2, r0
 8009a1c:	d09e      	beq.n	800995c <_strtod_l+0xc4>
 8009a1e:	2500      	movs	r5, #0
 8009a20:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 8009a24:	f108 0201 	add.w	r2, r8, #1
 8009a28:	9217      	str	r2, [sp, #92]	; 0x5c
 8009a2a:	f898 2001 	ldrb.w	r2, [r8, #1]
 8009a2e:	2a2b      	cmp	r2, #43	; 0x2b
 8009a30:	d075      	beq.n	8009b1e <_strtod_l+0x286>
 8009a32:	2a2d      	cmp	r2, #45	; 0x2d
 8009a34:	d07b      	beq.n	8009b2e <_strtod_l+0x296>
 8009a36:	f04f 0c00 	mov.w	ip, #0
 8009a3a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009a3e:	2909      	cmp	r1, #9
 8009a40:	f240 8082 	bls.w	8009b48 <_strtod_l+0x2b0>
 8009a44:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8009a48:	2600      	movs	r6, #0
 8009a4a:	e09d      	b.n	8009b88 <_strtod_l+0x2f0>
 8009a4c:	2300      	movs	r3, #0
 8009a4e:	e7c4      	b.n	80099da <_strtod_l+0x142>
 8009a50:	2f08      	cmp	r7, #8
 8009a52:	bfd8      	it	le
 8009a54:	9907      	ldrle	r1, [sp, #28]
 8009a56:	f100 0001 	add.w	r0, r0, #1
 8009a5a:	bfda      	itte	le
 8009a5c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009a60:	9307      	strle	r3, [sp, #28]
 8009a62:	fb02 3909 	mlagt	r9, r2, r9, r3
 8009a66:	3701      	adds	r7, #1
 8009a68:	9017      	str	r0, [sp, #92]	; 0x5c
 8009a6a:	e7bf      	b.n	80099ec <_strtod_l+0x154>
 8009a6c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a6e:	195a      	adds	r2, r3, r5
 8009a70:	9217      	str	r2, [sp, #92]	; 0x5c
 8009a72:	5d5a      	ldrb	r2, [r3, r5]
 8009a74:	2f00      	cmp	r7, #0
 8009a76:	d037      	beq.n	8009ae8 <_strtod_l+0x250>
 8009a78:	9005      	str	r0, [sp, #20]
 8009a7a:	463d      	mov	r5, r7
 8009a7c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009a80:	2b09      	cmp	r3, #9
 8009a82:	d912      	bls.n	8009aaa <_strtod_l+0x212>
 8009a84:	2301      	movs	r3, #1
 8009a86:	e7c2      	b.n	8009a0e <_strtod_l+0x176>
 8009a88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009a8a:	1c5a      	adds	r2, r3, #1
 8009a8c:	9217      	str	r2, [sp, #92]	; 0x5c
 8009a8e:	785a      	ldrb	r2, [r3, #1]
 8009a90:	3001      	adds	r0, #1
 8009a92:	2a30      	cmp	r2, #48	; 0x30
 8009a94:	d0f8      	beq.n	8009a88 <_strtod_l+0x1f0>
 8009a96:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009a9a:	2b08      	cmp	r3, #8
 8009a9c:	f200 84d9 	bhi.w	800a452 <_strtod_l+0xbba>
 8009aa0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009aa2:	9005      	str	r0, [sp, #20]
 8009aa4:	2000      	movs	r0, #0
 8009aa6:	9308      	str	r3, [sp, #32]
 8009aa8:	4605      	mov	r5, r0
 8009aaa:	3a30      	subs	r2, #48	; 0x30
 8009aac:	f100 0301 	add.w	r3, r0, #1
 8009ab0:	d014      	beq.n	8009adc <_strtod_l+0x244>
 8009ab2:	9905      	ldr	r1, [sp, #20]
 8009ab4:	4419      	add	r1, r3
 8009ab6:	9105      	str	r1, [sp, #20]
 8009ab8:	462b      	mov	r3, r5
 8009aba:	eb00 0e05 	add.w	lr, r0, r5
 8009abe:	210a      	movs	r1, #10
 8009ac0:	4573      	cmp	r3, lr
 8009ac2:	d113      	bne.n	8009aec <_strtod_l+0x254>
 8009ac4:	182b      	adds	r3, r5, r0
 8009ac6:	2b08      	cmp	r3, #8
 8009ac8:	f105 0501 	add.w	r5, r5, #1
 8009acc:	4405      	add	r5, r0
 8009ace:	dc1c      	bgt.n	8009b0a <_strtod_l+0x272>
 8009ad0:	9907      	ldr	r1, [sp, #28]
 8009ad2:	230a      	movs	r3, #10
 8009ad4:	fb03 2301 	mla	r3, r3, r1, r2
 8009ad8:	9307      	str	r3, [sp, #28]
 8009ada:	2300      	movs	r3, #0
 8009adc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009ade:	1c51      	adds	r1, r2, #1
 8009ae0:	9117      	str	r1, [sp, #92]	; 0x5c
 8009ae2:	7852      	ldrb	r2, [r2, #1]
 8009ae4:	4618      	mov	r0, r3
 8009ae6:	e7c9      	b.n	8009a7c <_strtod_l+0x1e4>
 8009ae8:	4638      	mov	r0, r7
 8009aea:	e7d2      	b.n	8009a92 <_strtod_l+0x1fa>
 8009aec:	2b08      	cmp	r3, #8
 8009aee:	dc04      	bgt.n	8009afa <_strtod_l+0x262>
 8009af0:	9e07      	ldr	r6, [sp, #28]
 8009af2:	434e      	muls	r6, r1
 8009af4:	9607      	str	r6, [sp, #28]
 8009af6:	3301      	adds	r3, #1
 8009af8:	e7e2      	b.n	8009ac0 <_strtod_l+0x228>
 8009afa:	f103 0c01 	add.w	ip, r3, #1
 8009afe:	f1bc 0f10 	cmp.w	ip, #16
 8009b02:	bfd8      	it	le
 8009b04:	fb01 f909 	mulle.w	r9, r1, r9
 8009b08:	e7f5      	b.n	8009af6 <_strtod_l+0x25e>
 8009b0a:	2d10      	cmp	r5, #16
 8009b0c:	bfdc      	itt	le
 8009b0e:	230a      	movle	r3, #10
 8009b10:	fb03 2909 	mlale	r9, r3, r9, r2
 8009b14:	e7e1      	b.n	8009ada <_strtod_l+0x242>
 8009b16:	2300      	movs	r3, #0
 8009b18:	9305      	str	r3, [sp, #20]
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e77c      	b.n	8009a18 <_strtod_l+0x180>
 8009b1e:	f04f 0c00 	mov.w	ip, #0
 8009b22:	f108 0202 	add.w	r2, r8, #2
 8009b26:	9217      	str	r2, [sp, #92]	; 0x5c
 8009b28:	f898 2002 	ldrb.w	r2, [r8, #2]
 8009b2c:	e785      	b.n	8009a3a <_strtod_l+0x1a2>
 8009b2e:	f04f 0c01 	mov.w	ip, #1
 8009b32:	e7f6      	b.n	8009b22 <_strtod_l+0x28a>
 8009b34:	0800d4f8 	.word	0x0800d4f8
 8009b38:	0800d2ac 	.word	0x0800d2ac
 8009b3c:	7ff00000 	.word	0x7ff00000
 8009b40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009b42:	1c51      	adds	r1, r2, #1
 8009b44:	9117      	str	r1, [sp, #92]	; 0x5c
 8009b46:	7852      	ldrb	r2, [r2, #1]
 8009b48:	2a30      	cmp	r2, #48	; 0x30
 8009b4a:	d0f9      	beq.n	8009b40 <_strtod_l+0x2a8>
 8009b4c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009b50:	2908      	cmp	r1, #8
 8009b52:	f63f af79 	bhi.w	8009a48 <_strtod_l+0x1b0>
 8009b56:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009b5a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009b5c:	9206      	str	r2, [sp, #24]
 8009b5e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8009b60:	1c51      	adds	r1, r2, #1
 8009b62:	9117      	str	r1, [sp, #92]	; 0x5c
 8009b64:	7852      	ldrb	r2, [r2, #1]
 8009b66:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 8009b6a:	2e09      	cmp	r6, #9
 8009b6c:	d937      	bls.n	8009bde <_strtod_l+0x346>
 8009b6e:	9e06      	ldr	r6, [sp, #24]
 8009b70:	1b89      	subs	r1, r1, r6
 8009b72:	2908      	cmp	r1, #8
 8009b74:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8009b78:	dc02      	bgt.n	8009b80 <_strtod_l+0x2e8>
 8009b7a:	4576      	cmp	r6, lr
 8009b7c:	bfa8      	it	ge
 8009b7e:	4676      	movge	r6, lr
 8009b80:	f1bc 0f00 	cmp.w	ip, #0
 8009b84:	d000      	beq.n	8009b88 <_strtod_l+0x2f0>
 8009b86:	4276      	negs	r6, r6
 8009b88:	2d00      	cmp	r5, #0
 8009b8a:	d14d      	bne.n	8009c28 <_strtod_l+0x390>
 8009b8c:	9904      	ldr	r1, [sp, #16]
 8009b8e:	4301      	orrs	r1, r0
 8009b90:	f47f aec6 	bne.w	8009920 <_strtod_l+0x88>
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	f47f aee1 	bne.w	800995c <_strtod_l+0xc4>
 8009b9a:	2a69      	cmp	r2, #105	; 0x69
 8009b9c:	d027      	beq.n	8009bee <_strtod_l+0x356>
 8009b9e:	dc24      	bgt.n	8009bea <_strtod_l+0x352>
 8009ba0:	2a49      	cmp	r2, #73	; 0x49
 8009ba2:	d024      	beq.n	8009bee <_strtod_l+0x356>
 8009ba4:	2a4e      	cmp	r2, #78	; 0x4e
 8009ba6:	f47f aed9 	bne.w	800995c <_strtod_l+0xc4>
 8009baa:	499f      	ldr	r1, [pc, #636]	; (8009e28 <_strtod_l+0x590>)
 8009bac:	a817      	add	r0, sp, #92	; 0x5c
 8009bae:	f001 fe3d 	bl	800b82c <__match>
 8009bb2:	2800      	cmp	r0, #0
 8009bb4:	f43f aed2 	beq.w	800995c <_strtod_l+0xc4>
 8009bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bba:	781b      	ldrb	r3, [r3, #0]
 8009bbc:	2b28      	cmp	r3, #40	; 0x28
 8009bbe:	d12d      	bne.n	8009c1c <_strtod_l+0x384>
 8009bc0:	499a      	ldr	r1, [pc, #616]	; (8009e2c <_strtod_l+0x594>)
 8009bc2:	aa1a      	add	r2, sp, #104	; 0x68
 8009bc4:	a817      	add	r0, sp, #92	; 0x5c
 8009bc6:	f001 fe45 	bl	800b854 <__hexnan>
 8009bca:	2805      	cmp	r0, #5
 8009bcc:	d126      	bne.n	8009c1c <_strtod_l+0x384>
 8009bce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8009bd0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8009bd4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8009bd8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8009bdc:	e6a0      	b.n	8009920 <_strtod_l+0x88>
 8009bde:	210a      	movs	r1, #10
 8009be0:	fb01 2e0e 	mla	lr, r1, lr, r2
 8009be4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8009be8:	e7b9      	b.n	8009b5e <_strtod_l+0x2c6>
 8009bea:	2a6e      	cmp	r2, #110	; 0x6e
 8009bec:	e7db      	b.n	8009ba6 <_strtod_l+0x30e>
 8009bee:	4990      	ldr	r1, [pc, #576]	; (8009e30 <_strtod_l+0x598>)
 8009bf0:	a817      	add	r0, sp, #92	; 0x5c
 8009bf2:	f001 fe1b 	bl	800b82c <__match>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	f43f aeb0 	beq.w	800995c <_strtod_l+0xc4>
 8009bfc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009bfe:	498d      	ldr	r1, [pc, #564]	; (8009e34 <_strtod_l+0x59c>)
 8009c00:	3b01      	subs	r3, #1
 8009c02:	a817      	add	r0, sp, #92	; 0x5c
 8009c04:	9317      	str	r3, [sp, #92]	; 0x5c
 8009c06:	f001 fe11 	bl	800b82c <__match>
 8009c0a:	b910      	cbnz	r0, 8009c12 <_strtod_l+0x37a>
 8009c0c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8009c0e:	3301      	adds	r3, #1
 8009c10:	9317      	str	r3, [sp, #92]	; 0x5c
 8009c12:	f8df b230 	ldr.w	fp, [pc, #560]	; 8009e44 <_strtod_l+0x5ac>
 8009c16:	f04f 0a00 	mov.w	sl, #0
 8009c1a:	e681      	b.n	8009920 <_strtod_l+0x88>
 8009c1c:	4886      	ldr	r0, [pc, #536]	; (8009e38 <_strtod_l+0x5a0>)
 8009c1e:	f002 fd17 	bl	800c650 <nan>
 8009c22:	ec5b ab10 	vmov	sl, fp, d0
 8009c26:	e67b      	b.n	8009920 <_strtod_l+0x88>
 8009c28:	9b05      	ldr	r3, [sp, #20]
 8009c2a:	9807      	ldr	r0, [sp, #28]
 8009c2c:	1af3      	subs	r3, r6, r3
 8009c2e:	2f00      	cmp	r7, #0
 8009c30:	bf08      	it	eq
 8009c32:	462f      	moveq	r7, r5
 8009c34:	2d10      	cmp	r5, #16
 8009c36:	9306      	str	r3, [sp, #24]
 8009c38:	46a8      	mov	r8, r5
 8009c3a:	bfa8      	it	ge
 8009c3c:	f04f 0810 	movge.w	r8, #16
 8009c40:	f7f6 fc60 	bl	8000504 <__aeabi_ui2d>
 8009c44:	2d09      	cmp	r5, #9
 8009c46:	4682      	mov	sl, r0
 8009c48:	468b      	mov	fp, r1
 8009c4a:	dd13      	ble.n	8009c74 <_strtod_l+0x3dc>
 8009c4c:	4b7b      	ldr	r3, [pc, #492]	; (8009e3c <_strtod_l+0x5a4>)
 8009c4e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8009c52:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009c56:	f7f6 fccf 	bl	80005f8 <__aeabi_dmul>
 8009c5a:	4682      	mov	sl, r0
 8009c5c:	4648      	mov	r0, r9
 8009c5e:	468b      	mov	fp, r1
 8009c60:	f7f6 fc50 	bl	8000504 <__aeabi_ui2d>
 8009c64:	4602      	mov	r2, r0
 8009c66:	460b      	mov	r3, r1
 8009c68:	4650      	mov	r0, sl
 8009c6a:	4659      	mov	r1, fp
 8009c6c:	f7f6 fb0e 	bl	800028c <__adddf3>
 8009c70:	4682      	mov	sl, r0
 8009c72:	468b      	mov	fp, r1
 8009c74:	2d0f      	cmp	r5, #15
 8009c76:	dc38      	bgt.n	8009cea <_strtod_l+0x452>
 8009c78:	9b06      	ldr	r3, [sp, #24]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f43f ae50 	beq.w	8009920 <_strtod_l+0x88>
 8009c80:	dd24      	ble.n	8009ccc <_strtod_l+0x434>
 8009c82:	2b16      	cmp	r3, #22
 8009c84:	dc0b      	bgt.n	8009c9e <_strtod_l+0x406>
 8009c86:	496d      	ldr	r1, [pc, #436]	; (8009e3c <_strtod_l+0x5a4>)
 8009c88:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009c8c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c90:	4652      	mov	r2, sl
 8009c92:	465b      	mov	r3, fp
 8009c94:	f7f6 fcb0 	bl	80005f8 <__aeabi_dmul>
 8009c98:	4682      	mov	sl, r0
 8009c9a:	468b      	mov	fp, r1
 8009c9c:	e640      	b.n	8009920 <_strtod_l+0x88>
 8009c9e:	9a06      	ldr	r2, [sp, #24]
 8009ca0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8009ca4:	4293      	cmp	r3, r2
 8009ca6:	db20      	blt.n	8009cea <_strtod_l+0x452>
 8009ca8:	4c64      	ldr	r4, [pc, #400]	; (8009e3c <_strtod_l+0x5a4>)
 8009caa:	f1c5 050f 	rsb	r5, r5, #15
 8009cae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009cb2:	4652      	mov	r2, sl
 8009cb4:	465b      	mov	r3, fp
 8009cb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009cba:	f7f6 fc9d 	bl	80005f8 <__aeabi_dmul>
 8009cbe:	9b06      	ldr	r3, [sp, #24]
 8009cc0:	1b5d      	subs	r5, r3, r5
 8009cc2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009cc6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009cca:	e7e3      	b.n	8009c94 <_strtod_l+0x3fc>
 8009ccc:	9b06      	ldr	r3, [sp, #24]
 8009cce:	3316      	adds	r3, #22
 8009cd0:	db0b      	blt.n	8009cea <_strtod_l+0x452>
 8009cd2:	9b05      	ldr	r3, [sp, #20]
 8009cd4:	1b9e      	subs	r6, r3, r6
 8009cd6:	4b59      	ldr	r3, [pc, #356]	; (8009e3c <_strtod_l+0x5a4>)
 8009cd8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8009cdc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009ce0:	4650      	mov	r0, sl
 8009ce2:	4659      	mov	r1, fp
 8009ce4:	f7f6 fdb2 	bl	800084c <__aeabi_ddiv>
 8009ce8:	e7d6      	b.n	8009c98 <_strtod_l+0x400>
 8009cea:	9b06      	ldr	r3, [sp, #24]
 8009cec:	eba5 0808 	sub.w	r8, r5, r8
 8009cf0:	4498      	add	r8, r3
 8009cf2:	f1b8 0f00 	cmp.w	r8, #0
 8009cf6:	dd74      	ble.n	8009de2 <_strtod_l+0x54a>
 8009cf8:	f018 030f 	ands.w	r3, r8, #15
 8009cfc:	d00a      	beq.n	8009d14 <_strtod_l+0x47c>
 8009cfe:	494f      	ldr	r1, [pc, #316]	; (8009e3c <_strtod_l+0x5a4>)
 8009d00:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009d04:	4652      	mov	r2, sl
 8009d06:	465b      	mov	r3, fp
 8009d08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009d0c:	f7f6 fc74 	bl	80005f8 <__aeabi_dmul>
 8009d10:	4682      	mov	sl, r0
 8009d12:	468b      	mov	fp, r1
 8009d14:	f038 080f 	bics.w	r8, r8, #15
 8009d18:	d04f      	beq.n	8009dba <_strtod_l+0x522>
 8009d1a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8009d1e:	dd22      	ble.n	8009d66 <_strtod_l+0x4ce>
 8009d20:	2500      	movs	r5, #0
 8009d22:	462e      	mov	r6, r5
 8009d24:	9507      	str	r5, [sp, #28]
 8009d26:	9505      	str	r5, [sp, #20]
 8009d28:	2322      	movs	r3, #34	; 0x22
 8009d2a:	f8df b118 	ldr.w	fp, [pc, #280]	; 8009e44 <_strtod_l+0x5ac>
 8009d2e:	6023      	str	r3, [r4, #0]
 8009d30:	f04f 0a00 	mov.w	sl, #0
 8009d34:	9b07      	ldr	r3, [sp, #28]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	f43f adf2 	beq.w	8009920 <_strtod_l+0x88>
 8009d3c:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f001 fe94 	bl	800ba6c <_Bfree>
 8009d44:	9905      	ldr	r1, [sp, #20]
 8009d46:	4620      	mov	r0, r4
 8009d48:	f001 fe90 	bl	800ba6c <_Bfree>
 8009d4c:	4631      	mov	r1, r6
 8009d4e:	4620      	mov	r0, r4
 8009d50:	f001 fe8c 	bl	800ba6c <_Bfree>
 8009d54:	9907      	ldr	r1, [sp, #28]
 8009d56:	4620      	mov	r0, r4
 8009d58:	f001 fe88 	bl	800ba6c <_Bfree>
 8009d5c:	4629      	mov	r1, r5
 8009d5e:	4620      	mov	r0, r4
 8009d60:	f001 fe84 	bl	800ba6c <_Bfree>
 8009d64:	e5dc      	b.n	8009920 <_strtod_l+0x88>
 8009d66:	4b36      	ldr	r3, [pc, #216]	; (8009e40 <_strtod_l+0x5a8>)
 8009d68:	9304      	str	r3, [sp, #16]
 8009d6a:	2300      	movs	r3, #0
 8009d6c:	ea4f 1828 	mov.w	r8, r8, asr #4
 8009d70:	4650      	mov	r0, sl
 8009d72:	4659      	mov	r1, fp
 8009d74:	4699      	mov	r9, r3
 8009d76:	f1b8 0f01 	cmp.w	r8, #1
 8009d7a:	dc21      	bgt.n	8009dc0 <_strtod_l+0x528>
 8009d7c:	b10b      	cbz	r3, 8009d82 <_strtod_l+0x4ea>
 8009d7e:	4682      	mov	sl, r0
 8009d80:	468b      	mov	fp, r1
 8009d82:	4b2f      	ldr	r3, [pc, #188]	; (8009e40 <_strtod_l+0x5a8>)
 8009d84:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8009d88:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8009d8c:	4652      	mov	r2, sl
 8009d8e:	465b      	mov	r3, fp
 8009d90:	e9d9 0100 	ldrd	r0, r1, [r9]
 8009d94:	f7f6 fc30 	bl	80005f8 <__aeabi_dmul>
 8009d98:	4b2a      	ldr	r3, [pc, #168]	; (8009e44 <_strtod_l+0x5ac>)
 8009d9a:	460a      	mov	r2, r1
 8009d9c:	400b      	ands	r3, r1
 8009d9e:	492a      	ldr	r1, [pc, #168]	; (8009e48 <_strtod_l+0x5b0>)
 8009da0:	428b      	cmp	r3, r1
 8009da2:	4682      	mov	sl, r0
 8009da4:	d8bc      	bhi.n	8009d20 <_strtod_l+0x488>
 8009da6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009daa:	428b      	cmp	r3, r1
 8009dac:	bf86      	itte	hi
 8009dae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8009e4c <_strtod_l+0x5b4>
 8009db2:	f04f 3aff 	movhi.w	sl, #4294967295
 8009db6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8009dba:	2300      	movs	r3, #0
 8009dbc:	9304      	str	r3, [sp, #16]
 8009dbe:	e084      	b.n	8009eca <_strtod_l+0x632>
 8009dc0:	f018 0f01 	tst.w	r8, #1
 8009dc4:	d005      	beq.n	8009dd2 <_strtod_l+0x53a>
 8009dc6:	9b04      	ldr	r3, [sp, #16]
 8009dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dcc:	f7f6 fc14 	bl	80005f8 <__aeabi_dmul>
 8009dd0:	2301      	movs	r3, #1
 8009dd2:	9a04      	ldr	r2, [sp, #16]
 8009dd4:	3208      	adds	r2, #8
 8009dd6:	f109 0901 	add.w	r9, r9, #1
 8009dda:	ea4f 0868 	mov.w	r8, r8, asr #1
 8009dde:	9204      	str	r2, [sp, #16]
 8009de0:	e7c9      	b.n	8009d76 <_strtod_l+0x4de>
 8009de2:	d0ea      	beq.n	8009dba <_strtod_l+0x522>
 8009de4:	f1c8 0800 	rsb	r8, r8, #0
 8009de8:	f018 020f 	ands.w	r2, r8, #15
 8009dec:	d00a      	beq.n	8009e04 <_strtod_l+0x56c>
 8009dee:	4b13      	ldr	r3, [pc, #76]	; (8009e3c <_strtod_l+0x5a4>)
 8009df0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009df4:	4650      	mov	r0, sl
 8009df6:	4659      	mov	r1, fp
 8009df8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dfc:	f7f6 fd26 	bl	800084c <__aeabi_ddiv>
 8009e00:	4682      	mov	sl, r0
 8009e02:	468b      	mov	fp, r1
 8009e04:	ea5f 1828 	movs.w	r8, r8, asr #4
 8009e08:	d0d7      	beq.n	8009dba <_strtod_l+0x522>
 8009e0a:	f1b8 0f1f 	cmp.w	r8, #31
 8009e0e:	dd1f      	ble.n	8009e50 <_strtod_l+0x5b8>
 8009e10:	2500      	movs	r5, #0
 8009e12:	462e      	mov	r6, r5
 8009e14:	9507      	str	r5, [sp, #28]
 8009e16:	9505      	str	r5, [sp, #20]
 8009e18:	2322      	movs	r3, #34	; 0x22
 8009e1a:	f04f 0a00 	mov.w	sl, #0
 8009e1e:	f04f 0b00 	mov.w	fp, #0
 8009e22:	6023      	str	r3, [r4, #0]
 8009e24:	e786      	b.n	8009d34 <_strtod_l+0x49c>
 8009e26:	bf00      	nop
 8009e28:	0800d27d 	.word	0x0800d27d
 8009e2c:	0800d2c0 	.word	0x0800d2c0
 8009e30:	0800d275 	.word	0x0800d275
 8009e34:	0800d404 	.word	0x0800d404
 8009e38:	0800d6b0 	.word	0x0800d6b0
 8009e3c:	0800d590 	.word	0x0800d590
 8009e40:	0800d568 	.word	0x0800d568
 8009e44:	7ff00000 	.word	0x7ff00000
 8009e48:	7ca00000 	.word	0x7ca00000
 8009e4c:	7fefffff 	.word	0x7fefffff
 8009e50:	f018 0310 	ands.w	r3, r8, #16
 8009e54:	bf18      	it	ne
 8009e56:	236a      	movne	r3, #106	; 0x6a
 8009e58:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800a208 <_strtod_l+0x970>
 8009e5c:	9304      	str	r3, [sp, #16]
 8009e5e:	4650      	mov	r0, sl
 8009e60:	4659      	mov	r1, fp
 8009e62:	2300      	movs	r3, #0
 8009e64:	f018 0f01 	tst.w	r8, #1
 8009e68:	d004      	beq.n	8009e74 <_strtod_l+0x5dc>
 8009e6a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009e6e:	f7f6 fbc3 	bl	80005f8 <__aeabi_dmul>
 8009e72:	2301      	movs	r3, #1
 8009e74:	ea5f 0868 	movs.w	r8, r8, asr #1
 8009e78:	f109 0908 	add.w	r9, r9, #8
 8009e7c:	d1f2      	bne.n	8009e64 <_strtod_l+0x5cc>
 8009e7e:	b10b      	cbz	r3, 8009e84 <_strtod_l+0x5ec>
 8009e80:	4682      	mov	sl, r0
 8009e82:	468b      	mov	fp, r1
 8009e84:	9b04      	ldr	r3, [sp, #16]
 8009e86:	b1c3      	cbz	r3, 8009eba <_strtod_l+0x622>
 8009e88:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009e8c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	4659      	mov	r1, fp
 8009e94:	dd11      	ble.n	8009eba <_strtod_l+0x622>
 8009e96:	2b1f      	cmp	r3, #31
 8009e98:	f340 8124 	ble.w	800a0e4 <_strtod_l+0x84c>
 8009e9c:	2b34      	cmp	r3, #52	; 0x34
 8009e9e:	bfde      	ittt	le
 8009ea0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009ea4:	f04f 33ff 	movle.w	r3, #4294967295
 8009ea8:	fa03 f202 	lslle.w	r2, r3, r2
 8009eac:	f04f 0a00 	mov.w	sl, #0
 8009eb0:	bfcc      	ite	gt
 8009eb2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8009eb6:	ea02 0b01 	andle.w	fp, r2, r1
 8009eba:	2200      	movs	r2, #0
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	4650      	mov	r0, sl
 8009ec0:	4659      	mov	r1, fp
 8009ec2:	f7f6 fe01 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ec6:	2800      	cmp	r0, #0
 8009ec8:	d1a2      	bne.n	8009e10 <_strtod_l+0x578>
 8009eca:	9b07      	ldr	r3, [sp, #28]
 8009ecc:	9300      	str	r3, [sp, #0]
 8009ece:	9908      	ldr	r1, [sp, #32]
 8009ed0:	462b      	mov	r3, r5
 8009ed2:	463a      	mov	r2, r7
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f001 fe31 	bl	800bb3c <__s2b>
 8009eda:	9007      	str	r0, [sp, #28]
 8009edc:	2800      	cmp	r0, #0
 8009ede:	f43f af1f 	beq.w	8009d20 <_strtod_l+0x488>
 8009ee2:	9b05      	ldr	r3, [sp, #20]
 8009ee4:	1b9e      	subs	r6, r3, r6
 8009ee6:	9b06      	ldr	r3, [sp, #24]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	bfb4      	ite	lt
 8009eec:	4633      	movlt	r3, r6
 8009eee:	2300      	movge	r3, #0
 8009ef0:	930c      	str	r3, [sp, #48]	; 0x30
 8009ef2:	9b06      	ldr	r3, [sp, #24]
 8009ef4:	2500      	movs	r5, #0
 8009ef6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8009efa:	9312      	str	r3, [sp, #72]	; 0x48
 8009efc:	462e      	mov	r6, r5
 8009efe:	9b07      	ldr	r3, [sp, #28]
 8009f00:	4620      	mov	r0, r4
 8009f02:	6859      	ldr	r1, [r3, #4]
 8009f04:	f001 fd72 	bl	800b9ec <_Balloc>
 8009f08:	9005      	str	r0, [sp, #20]
 8009f0a:	2800      	cmp	r0, #0
 8009f0c:	f43f af0c 	beq.w	8009d28 <_strtod_l+0x490>
 8009f10:	9b07      	ldr	r3, [sp, #28]
 8009f12:	691a      	ldr	r2, [r3, #16]
 8009f14:	3202      	adds	r2, #2
 8009f16:	f103 010c 	add.w	r1, r3, #12
 8009f1a:	0092      	lsls	r2, r2, #2
 8009f1c:	300c      	adds	r0, #12
 8009f1e:	f001 fd4b 	bl	800b9b8 <memcpy>
 8009f22:	ec4b ab10 	vmov	d0, sl, fp
 8009f26:	aa1a      	add	r2, sp, #104	; 0x68
 8009f28:	a919      	add	r1, sp, #100	; 0x64
 8009f2a:	4620      	mov	r0, r4
 8009f2c:	f002 f94c 	bl	800c1c8 <__d2b>
 8009f30:	ec4b ab18 	vmov	d8, sl, fp
 8009f34:	9018      	str	r0, [sp, #96]	; 0x60
 8009f36:	2800      	cmp	r0, #0
 8009f38:	f43f aef6 	beq.w	8009d28 <_strtod_l+0x490>
 8009f3c:	2101      	movs	r1, #1
 8009f3e:	4620      	mov	r0, r4
 8009f40:	f001 fe96 	bl	800bc70 <__i2b>
 8009f44:	4606      	mov	r6, r0
 8009f46:	2800      	cmp	r0, #0
 8009f48:	f43f aeee 	beq.w	8009d28 <_strtod_l+0x490>
 8009f4c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009f4e:	9904      	ldr	r1, [sp, #16]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	bfab      	itete	ge
 8009f54:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8009f56:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8009f58:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009f5a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8009f5e:	bfac      	ite	ge
 8009f60:	eb03 0902 	addge.w	r9, r3, r2
 8009f64:	1ad7      	sublt	r7, r2, r3
 8009f66:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8009f68:	eba3 0801 	sub.w	r8, r3, r1
 8009f6c:	4490      	add	r8, r2
 8009f6e:	4ba1      	ldr	r3, [pc, #644]	; (800a1f4 <_strtod_l+0x95c>)
 8009f70:	f108 38ff 	add.w	r8, r8, #4294967295
 8009f74:	4598      	cmp	r8, r3
 8009f76:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009f7a:	f280 80c7 	bge.w	800a10c <_strtod_l+0x874>
 8009f7e:	eba3 0308 	sub.w	r3, r3, r8
 8009f82:	2b1f      	cmp	r3, #31
 8009f84:	eba2 0203 	sub.w	r2, r2, r3
 8009f88:	f04f 0101 	mov.w	r1, #1
 8009f8c:	f300 80b1 	bgt.w	800a0f2 <_strtod_l+0x85a>
 8009f90:	fa01 f303 	lsl.w	r3, r1, r3
 8009f94:	930d      	str	r3, [sp, #52]	; 0x34
 8009f96:	2300      	movs	r3, #0
 8009f98:	9308      	str	r3, [sp, #32]
 8009f9a:	eb09 0802 	add.w	r8, r9, r2
 8009f9e:	9b04      	ldr	r3, [sp, #16]
 8009fa0:	45c1      	cmp	r9, r8
 8009fa2:	4417      	add	r7, r2
 8009fa4:	441f      	add	r7, r3
 8009fa6:	464b      	mov	r3, r9
 8009fa8:	bfa8      	it	ge
 8009faa:	4643      	movge	r3, r8
 8009fac:	42bb      	cmp	r3, r7
 8009fae:	bfa8      	it	ge
 8009fb0:	463b      	movge	r3, r7
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	bfc2      	ittt	gt
 8009fb6:	eba8 0803 	subgt.w	r8, r8, r3
 8009fba:	1aff      	subgt	r7, r7, r3
 8009fbc:	eba9 0903 	subgt.w	r9, r9, r3
 8009fc0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009fc2:	2b00      	cmp	r3, #0
 8009fc4:	dd17      	ble.n	8009ff6 <_strtod_l+0x75e>
 8009fc6:	4631      	mov	r1, r6
 8009fc8:	461a      	mov	r2, r3
 8009fca:	4620      	mov	r0, r4
 8009fcc:	f001 ff10 	bl	800bdf0 <__pow5mult>
 8009fd0:	4606      	mov	r6, r0
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	f43f aea8 	beq.w	8009d28 <_strtod_l+0x490>
 8009fd8:	4601      	mov	r1, r0
 8009fda:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f001 fe5d 	bl	800bc9c <__multiply>
 8009fe2:	900b      	str	r0, [sp, #44]	; 0x2c
 8009fe4:	2800      	cmp	r0, #0
 8009fe6:	f43f ae9f 	beq.w	8009d28 <_strtod_l+0x490>
 8009fea:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009fec:	4620      	mov	r0, r4
 8009fee:	f001 fd3d 	bl	800ba6c <_Bfree>
 8009ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ff4:	9318      	str	r3, [sp, #96]	; 0x60
 8009ff6:	f1b8 0f00 	cmp.w	r8, #0
 8009ffa:	f300 808c 	bgt.w	800a116 <_strtod_l+0x87e>
 8009ffe:	9b06      	ldr	r3, [sp, #24]
 800a000:	2b00      	cmp	r3, #0
 800a002:	dd08      	ble.n	800a016 <_strtod_l+0x77e>
 800a004:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a006:	9905      	ldr	r1, [sp, #20]
 800a008:	4620      	mov	r0, r4
 800a00a:	f001 fef1 	bl	800bdf0 <__pow5mult>
 800a00e:	9005      	str	r0, [sp, #20]
 800a010:	2800      	cmp	r0, #0
 800a012:	f43f ae89 	beq.w	8009d28 <_strtod_l+0x490>
 800a016:	2f00      	cmp	r7, #0
 800a018:	dd08      	ble.n	800a02c <_strtod_l+0x794>
 800a01a:	9905      	ldr	r1, [sp, #20]
 800a01c:	463a      	mov	r2, r7
 800a01e:	4620      	mov	r0, r4
 800a020:	f001 ff40 	bl	800bea4 <__lshift>
 800a024:	9005      	str	r0, [sp, #20]
 800a026:	2800      	cmp	r0, #0
 800a028:	f43f ae7e 	beq.w	8009d28 <_strtod_l+0x490>
 800a02c:	f1b9 0f00 	cmp.w	r9, #0
 800a030:	dd08      	ble.n	800a044 <_strtod_l+0x7ac>
 800a032:	4631      	mov	r1, r6
 800a034:	464a      	mov	r2, r9
 800a036:	4620      	mov	r0, r4
 800a038:	f001 ff34 	bl	800bea4 <__lshift>
 800a03c:	4606      	mov	r6, r0
 800a03e:	2800      	cmp	r0, #0
 800a040:	f43f ae72 	beq.w	8009d28 <_strtod_l+0x490>
 800a044:	9a05      	ldr	r2, [sp, #20]
 800a046:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a048:	4620      	mov	r0, r4
 800a04a:	f001 ffb7 	bl	800bfbc <__mdiff>
 800a04e:	4605      	mov	r5, r0
 800a050:	2800      	cmp	r0, #0
 800a052:	f43f ae69 	beq.w	8009d28 <_strtod_l+0x490>
 800a056:	68c3      	ldr	r3, [r0, #12]
 800a058:	930b      	str	r3, [sp, #44]	; 0x2c
 800a05a:	2300      	movs	r3, #0
 800a05c:	60c3      	str	r3, [r0, #12]
 800a05e:	4631      	mov	r1, r6
 800a060:	f001 ff90 	bl	800bf84 <__mcmp>
 800a064:	2800      	cmp	r0, #0
 800a066:	da60      	bge.n	800a12a <_strtod_l+0x892>
 800a068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a06a:	ea53 030a 	orrs.w	r3, r3, sl
 800a06e:	f040 8082 	bne.w	800a176 <_strtod_l+0x8de>
 800a072:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a076:	2b00      	cmp	r3, #0
 800a078:	d17d      	bne.n	800a176 <_strtod_l+0x8de>
 800a07a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a07e:	0d1b      	lsrs	r3, r3, #20
 800a080:	051b      	lsls	r3, r3, #20
 800a082:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a086:	d976      	bls.n	800a176 <_strtod_l+0x8de>
 800a088:	696b      	ldr	r3, [r5, #20]
 800a08a:	b913      	cbnz	r3, 800a092 <_strtod_l+0x7fa>
 800a08c:	692b      	ldr	r3, [r5, #16]
 800a08e:	2b01      	cmp	r3, #1
 800a090:	dd71      	ble.n	800a176 <_strtod_l+0x8de>
 800a092:	4629      	mov	r1, r5
 800a094:	2201      	movs	r2, #1
 800a096:	4620      	mov	r0, r4
 800a098:	f001 ff04 	bl	800bea4 <__lshift>
 800a09c:	4631      	mov	r1, r6
 800a09e:	4605      	mov	r5, r0
 800a0a0:	f001 ff70 	bl	800bf84 <__mcmp>
 800a0a4:	2800      	cmp	r0, #0
 800a0a6:	dd66      	ble.n	800a176 <_strtod_l+0x8de>
 800a0a8:	9904      	ldr	r1, [sp, #16]
 800a0aa:	4a53      	ldr	r2, [pc, #332]	; (800a1f8 <_strtod_l+0x960>)
 800a0ac:	465b      	mov	r3, fp
 800a0ae:	2900      	cmp	r1, #0
 800a0b0:	f000 8081 	beq.w	800a1b6 <_strtod_l+0x91e>
 800a0b4:	ea02 010b 	and.w	r1, r2, fp
 800a0b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a0bc:	dc7b      	bgt.n	800a1b6 <_strtod_l+0x91e>
 800a0be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a0c2:	f77f aea9 	ble.w	8009e18 <_strtod_l+0x580>
 800a0c6:	4b4d      	ldr	r3, [pc, #308]	; (800a1fc <_strtod_l+0x964>)
 800a0c8:	4650      	mov	r0, sl
 800a0ca:	4659      	mov	r1, fp
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f7f6 fa93 	bl	80005f8 <__aeabi_dmul>
 800a0d2:	460b      	mov	r3, r1
 800a0d4:	4303      	orrs	r3, r0
 800a0d6:	bf08      	it	eq
 800a0d8:	2322      	moveq	r3, #34	; 0x22
 800a0da:	4682      	mov	sl, r0
 800a0dc:	468b      	mov	fp, r1
 800a0de:	bf08      	it	eq
 800a0e0:	6023      	streq	r3, [r4, #0]
 800a0e2:	e62b      	b.n	8009d3c <_strtod_l+0x4a4>
 800a0e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a0e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a0ec:	ea03 0a0a 	and.w	sl, r3, sl
 800a0f0:	e6e3      	b.n	8009eba <_strtod_l+0x622>
 800a0f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a0f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a0fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a0fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a102:	fa01 f308 	lsl.w	r3, r1, r8
 800a106:	9308      	str	r3, [sp, #32]
 800a108:	910d      	str	r1, [sp, #52]	; 0x34
 800a10a:	e746      	b.n	8009f9a <_strtod_l+0x702>
 800a10c:	2300      	movs	r3, #0
 800a10e:	9308      	str	r3, [sp, #32]
 800a110:	2301      	movs	r3, #1
 800a112:	930d      	str	r3, [sp, #52]	; 0x34
 800a114:	e741      	b.n	8009f9a <_strtod_l+0x702>
 800a116:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a118:	4642      	mov	r2, r8
 800a11a:	4620      	mov	r0, r4
 800a11c:	f001 fec2 	bl	800bea4 <__lshift>
 800a120:	9018      	str	r0, [sp, #96]	; 0x60
 800a122:	2800      	cmp	r0, #0
 800a124:	f47f af6b 	bne.w	8009ffe <_strtod_l+0x766>
 800a128:	e5fe      	b.n	8009d28 <_strtod_l+0x490>
 800a12a:	465f      	mov	r7, fp
 800a12c:	d16e      	bne.n	800a20c <_strtod_l+0x974>
 800a12e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a130:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a134:	b342      	cbz	r2, 800a188 <_strtod_l+0x8f0>
 800a136:	4a32      	ldr	r2, [pc, #200]	; (800a200 <_strtod_l+0x968>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d128      	bne.n	800a18e <_strtod_l+0x8f6>
 800a13c:	9b04      	ldr	r3, [sp, #16]
 800a13e:	4651      	mov	r1, sl
 800a140:	b1eb      	cbz	r3, 800a17e <_strtod_l+0x8e6>
 800a142:	4b2d      	ldr	r3, [pc, #180]	; (800a1f8 <_strtod_l+0x960>)
 800a144:	403b      	ands	r3, r7
 800a146:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a14a:	f04f 32ff 	mov.w	r2, #4294967295
 800a14e:	d819      	bhi.n	800a184 <_strtod_l+0x8ec>
 800a150:	0d1b      	lsrs	r3, r3, #20
 800a152:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a156:	fa02 f303 	lsl.w	r3, r2, r3
 800a15a:	4299      	cmp	r1, r3
 800a15c:	d117      	bne.n	800a18e <_strtod_l+0x8f6>
 800a15e:	4b29      	ldr	r3, [pc, #164]	; (800a204 <_strtod_l+0x96c>)
 800a160:	429f      	cmp	r7, r3
 800a162:	d102      	bne.n	800a16a <_strtod_l+0x8d2>
 800a164:	3101      	adds	r1, #1
 800a166:	f43f addf 	beq.w	8009d28 <_strtod_l+0x490>
 800a16a:	4b23      	ldr	r3, [pc, #140]	; (800a1f8 <_strtod_l+0x960>)
 800a16c:	403b      	ands	r3, r7
 800a16e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a172:	f04f 0a00 	mov.w	sl, #0
 800a176:	9b04      	ldr	r3, [sp, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d1a4      	bne.n	800a0c6 <_strtod_l+0x82e>
 800a17c:	e5de      	b.n	8009d3c <_strtod_l+0x4a4>
 800a17e:	f04f 33ff 	mov.w	r3, #4294967295
 800a182:	e7ea      	b.n	800a15a <_strtod_l+0x8c2>
 800a184:	4613      	mov	r3, r2
 800a186:	e7e8      	b.n	800a15a <_strtod_l+0x8c2>
 800a188:	ea53 030a 	orrs.w	r3, r3, sl
 800a18c:	d08c      	beq.n	800a0a8 <_strtod_l+0x810>
 800a18e:	9b08      	ldr	r3, [sp, #32]
 800a190:	b1db      	cbz	r3, 800a1ca <_strtod_l+0x932>
 800a192:	423b      	tst	r3, r7
 800a194:	d0ef      	beq.n	800a176 <_strtod_l+0x8de>
 800a196:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a198:	9a04      	ldr	r2, [sp, #16]
 800a19a:	4650      	mov	r0, sl
 800a19c:	4659      	mov	r1, fp
 800a19e:	b1c3      	cbz	r3, 800a1d2 <_strtod_l+0x93a>
 800a1a0:	f7ff fb5e 	bl	8009860 <sulp>
 800a1a4:	4602      	mov	r2, r0
 800a1a6:	460b      	mov	r3, r1
 800a1a8:	ec51 0b18 	vmov	r0, r1, d8
 800a1ac:	f7f6 f86e 	bl	800028c <__adddf3>
 800a1b0:	4682      	mov	sl, r0
 800a1b2:	468b      	mov	fp, r1
 800a1b4:	e7df      	b.n	800a176 <_strtod_l+0x8de>
 800a1b6:	4013      	ands	r3, r2
 800a1b8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a1bc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a1c0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a1c4:	f04f 3aff 	mov.w	sl, #4294967295
 800a1c8:	e7d5      	b.n	800a176 <_strtod_l+0x8de>
 800a1ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1cc:	ea13 0f0a 	tst.w	r3, sl
 800a1d0:	e7e0      	b.n	800a194 <_strtod_l+0x8fc>
 800a1d2:	f7ff fb45 	bl	8009860 <sulp>
 800a1d6:	4602      	mov	r2, r0
 800a1d8:	460b      	mov	r3, r1
 800a1da:	ec51 0b18 	vmov	r0, r1, d8
 800a1de:	f7f6 f853 	bl	8000288 <__aeabi_dsub>
 800a1e2:	2200      	movs	r2, #0
 800a1e4:	2300      	movs	r3, #0
 800a1e6:	4682      	mov	sl, r0
 800a1e8:	468b      	mov	fp, r1
 800a1ea:	f7f6 fc6d 	bl	8000ac8 <__aeabi_dcmpeq>
 800a1ee:	2800      	cmp	r0, #0
 800a1f0:	d0c1      	beq.n	800a176 <_strtod_l+0x8de>
 800a1f2:	e611      	b.n	8009e18 <_strtod_l+0x580>
 800a1f4:	fffffc02 	.word	0xfffffc02
 800a1f8:	7ff00000 	.word	0x7ff00000
 800a1fc:	39500000 	.word	0x39500000
 800a200:	000fffff 	.word	0x000fffff
 800a204:	7fefffff 	.word	0x7fefffff
 800a208:	0800d2d8 	.word	0x0800d2d8
 800a20c:	4631      	mov	r1, r6
 800a20e:	4628      	mov	r0, r5
 800a210:	f002 f836 	bl	800c280 <__ratio>
 800a214:	ec59 8b10 	vmov	r8, r9, d0
 800a218:	ee10 0a10 	vmov	r0, s0
 800a21c:	2200      	movs	r2, #0
 800a21e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a222:	4649      	mov	r1, r9
 800a224:	f7f6 fc64 	bl	8000af0 <__aeabi_dcmple>
 800a228:	2800      	cmp	r0, #0
 800a22a:	d07a      	beq.n	800a322 <_strtod_l+0xa8a>
 800a22c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d04a      	beq.n	800a2c8 <_strtod_l+0xa30>
 800a232:	4b95      	ldr	r3, [pc, #596]	; (800a488 <_strtod_l+0xbf0>)
 800a234:	2200      	movs	r2, #0
 800a236:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a23a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800a488 <_strtod_l+0xbf0>
 800a23e:	f04f 0800 	mov.w	r8, #0
 800a242:	4b92      	ldr	r3, [pc, #584]	; (800a48c <_strtod_l+0xbf4>)
 800a244:	403b      	ands	r3, r7
 800a246:	930d      	str	r3, [sp, #52]	; 0x34
 800a248:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a24a:	4b91      	ldr	r3, [pc, #580]	; (800a490 <_strtod_l+0xbf8>)
 800a24c:	429a      	cmp	r2, r3
 800a24e:	f040 80b0 	bne.w	800a3b2 <_strtod_l+0xb1a>
 800a252:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a256:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800a25a:	ec4b ab10 	vmov	d0, sl, fp
 800a25e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a262:	f001 ff35 	bl	800c0d0 <__ulp>
 800a266:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a26a:	ec53 2b10 	vmov	r2, r3, d0
 800a26e:	f7f6 f9c3 	bl	80005f8 <__aeabi_dmul>
 800a272:	4652      	mov	r2, sl
 800a274:	465b      	mov	r3, fp
 800a276:	f7f6 f809 	bl	800028c <__adddf3>
 800a27a:	460b      	mov	r3, r1
 800a27c:	4983      	ldr	r1, [pc, #524]	; (800a48c <_strtod_l+0xbf4>)
 800a27e:	4a85      	ldr	r2, [pc, #532]	; (800a494 <_strtod_l+0xbfc>)
 800a280:	4019      	ands	r1, r3
 800a282:	4291      	cmp	r1, r2
 800a284:	4682      	mov	sl, r0
 800a286:	d960      	bls.n	800a34a <_strtod_l+0xab2>
 800a288:	ee18 3a90 	vmov	r3, s17
 800a28c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800a290:	4293      	cmp	r3, r2
 800a292:	d104      	bne.n	800a29e <_strtod_l+0xa06>
 800a294:	ee18 3a10 	vmov	r3, s16
 800a298:	3301      	adds	r3, #1
 800a29a:	f43f ad45 	beq.w	8009d28 <_strtod_l+0x490>
 800a29e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800a4a0 <_strtod_l+0xc08>
 800a2a2:	f04f 3aff 	mov.w	sl, #4294967295
 800a2a6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a2a8:	4620      	mov	r0, r4
 800a2aa:	f001 fbdf 	bl	800ba6c <_Bfree>
 800a2ae:	9905      	ldr	r1, [sp, #20]
 800a2b0:	4620      	mov	r0, r4
 800a2b2:	f001 fbdb 	bl	800ba6c <_Bfree>
 800a2b6:	4631      	mov	r1, r6
 800a2b8:	4620      	mov	r0, r4
 800a2ba:	f001 fbd7 	bl	800ba6c <_Bfree>
 800a2be:	4629      	mov	r1, r5
 800a2c0:	4620      	mov	r0, r4
 800a2c2:	f001 fbd3 	bl	800ba6c <_Bfree>
 800a2c6:	e61a      	b.n	8009efe <_strtod_l+0x666>
 800a2c8:	f1ba 0f00 	cmp.w	sl, #0
 800a2cc:	d11b      	bne.n	800a306 <_strtod_l+0xa6e>
 800a2ce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a2d2:	b9f3      	cbnz	r3, 800a312 <_strtod_l+0xa7a>
 800a2d4:	4b6c      	ldr	r3, [pc, #432]	; (800a488 <_strtod_l+0xbf0>)
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	4640      	mov	r0, r8
 800a2da:	4649      	mov	r1, r9
 800a2dc:	f7f6 fbfe 	bl	8000adc <__aeabi_dcmplt>
 800a2e0:	b9d0      	cbnz	r0, 800a318 <_strtod_l+0xa80>
 800a2e2:	4640      	mov	r0, r8
 800a2e4:	4649      	mov	r1, r9
 800a2e6:	4b6c      	ldr	r3, [pc, #432]	; (800a498 <_strtod_l+0xc00>)
 800a2e8:	2200      	movs	r2, #0
 800a2ea:	f7f6 f985 	bl	80005f8 <__aeabi_dmul>
 800a2ee:	4680      	mov	r8, r0
 800a2f0:	4689      	mov	r9, r1
 800a2f2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a2f6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800a2fa:	9315      	str	r3, [sp, #84]	; 0x54
 800a2fc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800a300:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a304:	e79d      	b.n	800a242 <_strtod_l+0x9aa>
 800a306:	f1ba 0f01 	cmp.w	sl, #1
 800a30a:	d102      	bne.n	800a312 <_strtod_l+0xa7a>
 800a30c:	2f00      	cmp	r7, #0
 800a30e:	f43f ad83 	beq.w	8009e18 <_strtod_l+0x580>
 800a312:	4b62      	ldr	r3, [pc, #392]	; (800a49c <_strtod_l+0xc04>)
 800a314:	2200      	movs	r2, #0
 800a316:	e78e      	b.n	800a236 <_strtod_l+0x99e>
 800a318:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800a498 <_strtod_l+0xc00>
 800a31c:	f04f 0800 	mov.w	r8, #0
 800a320:	e7e7      	b.n	800a2f2 <_strtod_l+0xa5a>
 800a322:	4b5d      	ldr	r3, [pc, #372]	; (800a498 <_strtod_l+0xc00>)
 800a324:	4640      	mov	r0, r8
 800a326:	4649      	mov	r1, r9
 800a328:	2200      	movs	r2, #0
 800a32a:	f7f6 f965 	bl	80005f8 <__aeabi_dmul>
 800a32e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a330:	4680      	mov	r8, r0
 800a332:	4689      	mov	r9, r1
 800a334:	b933      	cbnz	r3, 800a344 <_strtod_l+0xaac>
 800a336:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a33a:	900e      	str	r0, [sp, #56]	; 0x38
 800a33c:	930f      	str	r3, [sp, #60]	; 0x3c
 800a33e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800a342:	e7dd      	b.n	800a300 <_strtod_l+0xa68>
 800a344:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800a348:	e7f9      	b.n	800a33e <_strtod_l+0xaa6>
 800a34a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800a34e:	9b04      	ldr	r3, [sp, #16]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d1a8      	bne.n	800a2a6 <_strtod_l+0xa0e>
 800a354:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a358:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a35a:	0d1b      	lsrs	r3, r3, #20
 800a35c:	051b      	lsls	r3, r3, #20
 800a35e:	429a      	cmp	r2, r3
 800a360:	d1a1      	bne.n	800a2a6 <_strtod_l+0xa0e>
 800a362:	4640      	mov	r0, r8
 800a364:	4649      	mov	r1, r9
 800a366:	f7f6 fca7 	bl	8000cb8 <__aeabi_d2lz>
 800a36a:	f7f6 f917 	bl	800059c <__aeabi_l2d>
 800a36e:	4602      	mov	r2, r0
 800a370:	460b      	mov	r3, r1
 800a372:	4640      	mov	r0, r8
 800a374:	4649      	mov	r1, r9
 800a376:	f7f5 ff87 	bl	8000288 <__aeabi_dsub>
 800a37a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a37c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a380:	ea43 030a 	orr.w	r3, r3, sl
 800a384:	4313      	orrs	r3, r2
 800a386:	4680      	mov	r8, r0
 800a388:	4689      	mov	r9, r1
 800a38a:	d055      	beq.n	800a438 <_strtod_l+0xba0>
 800a38c:	a336      	add	r3, pc, #216	; (adr r3, 800a468 <_strtod_l+0xbd0>)
 800a38e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a392:	f7f6 fba3 	bl	8000adc <__aeabi_dcmplt>
 800a396:	2800      	cmp	r0, #0
 800a398:	f47f acd0 	bne.w	8009d3c <_strtod_l+0x4a4>
 800a39c:	a334      	add	r3, pc, #208	; (adr r3, 800a470 <_strtod_l+0xbd8>)
 800a39e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3a2:	4640      	mov	r0, r8
 800a3a4:	4649      	mov	r1, r9
 800a3a6:	f7f6 fbb7 	bl	8000b18 <__aeabi_dcmpgt>
 800a3aa:	2800      	cmp	r0, #0
 800a3ac:	f43f af7b 	beq.w	800a2a6 <_strtod_l+0xa0e>
 800a3b0:	e4c4      	b.n	8009d3c <_strtod_l+0x4a4>
 800a3b2:	9b04      	ldr	r3, [sp, #16]
 800a3b4:	b333      	cbz	r3, 800a404 <_strtod_l+0xb6c>
 800a3b6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3b8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a3bc:	d822      	bhi.n	800a404 <_strtod_l+0xb6c>
 800a3be:	a32e      	add	r3, pc, #184	; (adr r3, 800a478 <_strtod_l+0xbe0>)
 800a3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a3c4:	4640      	mov	r0, r8
 800a3c6:	4649      	mov	r1, r9
 800a3c8:	f7f6 fb92 	bl	8000af0 <__aeabi_dcmple>
 800a3cc:	b1a0      	cbz	r0, 800a3f8 <_strtod_l+0xb60>
 800a3ce:	4649      	mov	r1, r9
 800a3d0:	4640      	mov	r0, r8
 800a3d2:	f7f6 fbe9 	bl	8000ba8 <__aeabi_d2uiz>
 800a3d6:	2801      	cmp	r0, #1
 800a3d8:	bf38      	it	cc
 800a3da:	2001      	movcc	r0, #1
 800a3dc:	f7f6 f892 	bl	8000504 <__aeabi_ui2d>
 800a3e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a3e2:	4680      	mov	r8, r0
 800a3e4:	4689      	mov	r9, r1
 800a3e6:	bb23      	cbnz	r3, 800a432 <_strtod_l+0xb9a>
 800a3e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a3ec:	9010      	str	r0, [sp, #64]	; 0x40
 800a3ee:	9311      	str	r3, [sp, #68]	; 0x44
 800a3f0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a3f4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800a3f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3fa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a3fc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a400:	1a9b      	subs	r3, r3, r2
 800a402:	9309      	str	r3, [sp, #36]	; 0x24
 800a404:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a408:	eeb0 0a48 	vmov.f32	s0, s16
 800a40c:	eef0 0a68 	vmov.f32	s1, s17
 800a410:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800a414:	f001 fe5c 	bl	800c0d0 <__ulp>
 800a418:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800a41c:	ec53 2b10 	vmov	r2, r3, d0
 800a420:	f7f6 f8ea 	bl	80005f8 <__aeabi_dmul>
 800a424:	ec53 2b18 	vmov	r2, r3, d8
 800a428:	f7f5 ff30 	bl	800028c <__adddf3>
 800a42c:	4682      	mov	sl, r0
 800a42e:	468b      	mov	fp, r1
 800a430:	e78d      	b.n	800a34e <_strtod_l+0xab6>
 800a432:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800a436:	e7db      	b.n	800a3f0 <_strtod_l+0xb58>
 800a438:	a311      	add	r3, pc, #68	; (adr r3, 800a480 <_strtod_l+0xbe8>)
 800a43a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a43e:	f7f6 fb4d 	bl	8000adc <__aeabi_dcmplt>
 800a442:	e7b2      	b.n	800a3aa <_strtod_l+0xb12>
 800a444:	2300      	movs	r3, #0
 800a446:	930a      	str	r3, [sp, #40]	; 0x28
 800a448:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a44a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a44c:	6013      	str	r3, [r2, #0]
 800a44e:	f7ff ba6b 	b.w	8009928 <_strtod_l+0x90>
 800a452:	2a65      	cmp	r2, #101	; 0x65
 800a454:	f43f ab5f 	beq.w	8009b16 <_strtod_l+0x27e>
 800a458:	2a45      	cmp	r2, #69	; 0x45
 800a45a:	f43f ab5c 	beq.w	8009b16 <_strtod_l+0x27e>
 800a45e:	2301      	movs	r3, #1
 800a460:	f7ff bb94 	b.w	8009b8c <_strtod_l+0x2f4>
 800a464:	f3af 8000 	nop.w
 800a468:	94a03595 	.word	0x94a03595
 800a46c:	3fdfffff 	.word	0x3fdfffff
 800a470:	35afe535 	.word	0x35afe535
 800a474:	3fe00000 	.word	0x3fe00000
 800a478:	ffc00000 	.word	0xffc00000
 800a47c:	41dfffff 	.word	0x41dfffff
 800a480:	94a03595 	.word	0x94a03595
 800a484:	3fcfffff 	.word	0x3fcfffff
 800a488:	3ff00000 	.word	0x3ff00000
 800a48c:	7ff00000 	.word	0x7ff00000
 800a490:	7fe00000 	.word	0x7fe00000
 800a494:	7c9fffff 	.word	0x7c9fffff
 800a498:	3fe00000 	.word	0x3fe00000
 800a49c:	bff00000 	.word	0xbff00000
 800a4a0:	7fefffff 	.word	0x7fefffff

0800a4a4 <_strtod_r>:
 800a4a4:	4b01      	ldr	r3, [pc, #4]	; (800a4ac <_strtod_r+0x8>)
 800a4a6:	f7ff b9f7 	b.w	8009898 <_strtod_l>
 800a4aa:	bf00      	nop
 800a4ac:	200000cc 	.word	0x200000cc

0800a4b0 <_strtol_l.constprop.0>:
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4b6:	d001      	beq.n	800a4bc <_strtol_l.constprop.0+0xc>
 800a4b8:	2b24      	cmp	r3, #36	; 0x24
 800a4ba:	d906      	bls.n	800a4ca <_strtol_l.constprop.0+0x1a>
 800a4bc:	f7fe f9fe 	bl	80088bc <__errno>
 800a4c0:	2316      	movs	r3, #22
 800a4c2:	6003      	str	r3, [r0, #0]
 800a4c4:	2000      	movs	r0, #0
 800a4c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4ca:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a5b0 <_strtol_l.constprop.0+0x100>
 800a4ce:	460d      	mov	r5, r1
 800a4d0:	462e      	mov	r6, r5
 800a4d2:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4d6:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a4da:	f017 0708 	ands.w	r7, r7, #8
 800a4de:	d1f7      	bne.n	800a4d0 <_strtol_l.constprop.0+0x20>
 800a4e0:	2c2d      	cmp	r4, #45	; 0x2d
 800a4e2:	d132      	bne.n	800a54a <_strtol_l.constprop.0+0x9a>
 800a4e4:	782c      	ldrb	r4, [r5, #0]
 800a4e6:	2701      	movs	r7, #1
 800a4e8:	1cb5      	adds	r5, r6, #2
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	d05b      	beq.n	800a5a6 <_strtol_l.constprop.0+0xf6>
 800a4ee:	2b10      	cmp	r3, #16
 800a4f0:	d109      	bne.n	800a506 <_strtol_l.constprop.0+0x56>
 800a4f2:	2c30      	cmp	r4, #48	; 0x30
 800a4f4:	d107      	bne.n	800a506 <_strtol_l.constprop.0+0x56>
 800a4f6:	782c      	ldrb	r4, [r5, #0]
 800a4f8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a4fc:	2c58      	cmp	r4, #88	; 0x58
 800a4fe:	d14d      	bne.n	800a59c <_strtol_l.constprop.0+0xec>
 800a500:	786c      	ldrb	r4, [r5, #1]
 800a502:	2310      	movs	r3, #16
 800a504:	3502      	adds	r5, #2
 800a506:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a50a:	f108 38ff 	add.w	r8, r8, #4294967295
 800a50e:	f04f 0c00 	mov.w	ip, #0
 800a512:	fbb8 f9f3 	udiv	r9, r8, r3
 800a516:	4666      	mov	r6, ip
 800a518:	fb03 8a19 	mls	sl, r3, r9, r8
 800a51c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a520:	f1be 0f09 	cmp.w	lr, #9
 800a524:	d816      	bhi.n	800a554 <_strtol_l.constprop.0+0xa4>
 800a526:	4674      	mov	r4, lr
 800a528:	42a3      	cmp	r3, r4
 800a52a:	dd24      	ble.n	800a576 <_strtol_l.constprop.0+0xc6>
 800a52c:	f1bc 0f00 	cmp.w	ip, #0
 800a530:	db1e      	blt.n	800a570 <_strtol_l.constprop.0+0xc0>
 800a532:	45b1      	cmp	r9, r6
 800a534:	d31c      	bcc.n	800a570 <_strtol_l.constprop.0+0xc0>
 800a536:	d101      	bne.n	800a53c <_strtol_l.constprop.0+0x8c>
 800a538:	45a2      	cmp	sl, r4
 800a53a:	db19      	blt.n	800a570 <_strtol_l.constprop.0+0xc0>
 800a53c:	fb06 4603 	mla	r6, r6, r3, r4
 800a540:	f04f 0c01 	mov.w	ip, #1
 800a544:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a548:	e7e8      	b.n	800a51c <_strtol_l.constprop.0+0x6c>
 800a54a:	2c2b      	cmp	r4, #43	; 0x2b
 800a54c:	bf04      	itt	eq
 800a54e:	782c      	ldrbeq	r4, [r5, #0]
 800a550:	1cb5      	addeq	r5, r6, #2
 800a552:	e7ca      	b.n	800a4ea <_strtol_l.constprop.0+0x3a>
 800a554:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a558:	f1be 0f19 	cmp.w	lr, #25
 800a55c:	d801      	bhi.n	800a562 <_strtol_l.constprop.0+0xb2>
 800a55e:	3c37      	subs	r4, #55	; 0x37
 800a560:	e7e2      	b.n	800a528 <_strtol_l.constprop.0+0x78>
 800a562:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a566:	f1be 0f19 	cmp.w	lr, #25
 800a56a:	d804      	bhi.n	800a576 <_strtol_l.constprop.0+0xc6>
 800a56c:	3c57      	subs	r4, #87	; 0x57
 800a56e:	e7db      	b.n	800a528 <_strtol_l.constprop.0+0x78>
 800a570:	f04f 3cff 	mov.w	ip, #4294967295
 800a574:	e7e6      	b.n	800a544 <_strtol_l.constprop.0+0x94>
 800a576:	f1bc 0f00 	cmp.w	ip, #0
 800a57a:	da05      	bge.n	800a588 <_strtol_l.constprop.0+0xd8>
 800a57c:	2322      	movs	r3, #34	; 0x22
 800a57e:	6003      	str	r3, [r0, #0]
 800a580:	4646      	mov	r6, r8
 800a582:	b942      	cbnz	r2, 800a596 <_strtol_l.constprop.0+0xe6>
 800a584:	4630      	mov	r0, r6
 800a586:	e79e      	b.n	800a4c6 <_strtol_l.constprop.0+0x16>
 800a588:	b107      	cbz	r7, 800a58c <_strtol_l.constprop.0+0xdc>
 800a58a:	4276      	negs	r6, r6
 800a58c:	2a00      	cmp	r2, #0
 800a58e:	d0f9      	beq.n	800a584 <_strtol_l.constprop.0+0xd4>
 800a590:	f1bc 0f00 	cmp.w	ip, #0
 800a594:	d000      	beq.n	800a598 <_strtol_l.constprop.0+0xe8>
 800a596:	1e69      	subs	r1, r5, #1
 800a598:	6011      	str	r1, [r2, #0]
 800a59a:	e7f3      	b.n	800a584 <_strtol_l.constprop.0+0xd4>
 800a59c:	2430      	movs	r4, #48	; 0x30
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d1b1      	bne.n	800a506 <_strtol_l.constprop.0+0x56>
 800a5a2:	2308      	movs	r3, #8
 800a5a4:	e7af      	b.n	800a506 <_strtol_l.constprop.0+0x56>
 800a5a6:	2c30      	cmp	r4, #48	; 0x30
 800a5a8:	d0a5      	beq.n	800a4f6 <_strtol_l.constprop.0+0x46>
 800a5aa:	230a      	movs	r3, #10
 800a5ac:	e7ab      	b.n	800a506 <_strtol_l.constprop.0+0x56>
 800a5ae:	bf00      	nop
 800a5b0:	0800d301 	.word	0x0800d301

0800a5b4 <_strtol_r>:
 800a5b4:	f7ff bf7c 	b.w	800a4b0 <_strtol_l.constprop.0>

0800a5b8 <quorem>:
 800a5b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5bc:	6903      	ldr	r3, [r0, #16]
 800a5be:	690c      	ldr	r4, [r1, #16]
 800a5c0:	42a3      	cmp	r3, r4
 800a5c2:	4607      	mov	r7, r0
 800a5c4:	f2c0 8081 	blt.w	800a6ca <quorem+0x112>
 800a5c8:	3c01      	subs	r4, #1
 800a5ca:	f101 0814 	add.w	r8, r1, #20
 800a5ce:	f100 0514 	add.w	r5, r0, #20
 800a5d2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a5d6:	9301      	str	r3, [sp, #4]
 800a5d8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a5dc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a5e0:	3301      	adds	r3, #1
 800a5e2:	429a      	cmp	r2, r3
 800a5e4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a5e8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a5ec:	fbb2 f6f3 	udiv	r6, r2, r3
 800a5f0:	d331      	bcc.n	800a656 <quorem+0x9e>
 800a5f2:	f04f 0e00 	mov.w	lr, #0
 800a5f6:	4640      	mov	r0, r8
 800a5f8:	46ac      	mov	ip, r5
 800a5fa:	46f2      	mov	sl, lr
 800a5fc:	f850 2b04 	ldr.w	r2, [r0], #4
 800a600:	b293      	uxth	r3, r2
 800a602:	fb06 e303 	mla	r3, r6, r3, lr
 800a606:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800a60a:	b29b      	uxth	r3, r3
 800a60c:	ebaa 0303 	sub.w	r3, sl, r3
 800a610:	f8dc a000 	ldr.w	sl, [ip]
 800a614:	0c12      	lsrs	r2, r2, #16
 800a616:	fa13 f38a 	uxtah	r3, r3, sl
 800a61a:	fb06 e202 	mla	r2, r6, r2, lr
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	9b00      	ldr	r3, [sp, #0]
 800a622:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a626:	b292      	uxth	r2, r2
 800a628:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a62c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a630:	f8bd 3000 	ldrh.w	r3, [sp]
 800a634:	4581      	cmp	r9, r0
 800a636:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a63a:	f84c 3b04 	str.w	r3, [ip], #4
 800a63e:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a642:	d2db      	bcs.n	800a5fc <quorem+0x44>
 800a644:	f855 300b 	ldr.w	r3, [r5, fp]
 800a648:	b92b      	cbnz	r3, 800a656 <quorem+0x9e>
 800a64a:	9b01      	ldr	r3, [sp, #4]
 800a64c:	3b04      	subs	r3, #4
 800a64e:	429d      	cmp	r5, r3
 800a650:	461a      	mov	r2, r3
 800a652:	d32e      	bcc.n	800a6b2 <quorem+0xfa>
 800a654:	613c      	str	r4, [r7, #16]
 800a656:	4638      	mov	r0, r7
 800a658:	f001 fc94 	bl	800bf84 <__mcmp>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	db24      	blt.n	800a6aa <quorem+0xf2>
 800a660:	3601      	adds	r6, #1
 800a662:	4628      	mov	r0, r5
 800a664:	f04f 0c00 	mov.w	ip, #0
 800a668:	f858 2b04 	ldr.w	r2, [r8], #4
 800a66c:	f8d0 e000 	ldr.w	lr, [r0]
 800a670:	b293      	uxth	r3, r2
 800a672:	ebac 0303 	sub.w	r3, ip, r3
 800a676:	0c12      	lsrs	r2, r2, #16
 800a678:	fa13 f38e 	uxtah	r3, r3, lr
 800a67c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800a680:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a684:	b29b      	uxth	r3, r3
 800a686:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a68a:	45c1      	cmp	r9, r8
 800a68c:	f840 3b04 	str.w	r3, [r0], #4
 800a690:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800a694:	d2e8      	bcs.n	800a668 <quorem+0xb0>
 800a696:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a69a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a69e:	b922      	cbnz	r2, 800a6aa <quorem+0xf2>
 800a6a0:	3b04      	subs	r3, #4
 800a6a2:	429d      	cmp	r5, r3
 800a6a4:	461a      	mov	r2, r3
 800a6a6:	d30a      	bcc.n	800a6be <quorem+0x106>
 800a6a8:	613c      	str	r4, [r7, #16]
 800a6aa:	4630      	mov	r0, r6
 800a6ac:	b003      	add	sp, #12
 800a6ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a6b2:	6812      	ldr	r2, [r2, #0]
 800a6b4:	3b04      	subs	r3, #4
 800a6b6:	2a00      	cmp	r2, #0
 800a6b8:	d1cc      	bne.n	800a654 <quorem+0x9c>
 800a6ba:	3c01      	subs	r4, #1
 800a6bc:	e7c7      	b.n	800a64e <quorem+0x96>
 800a6be:	6812      	ldr	r2, [r2, #0]
 800a6c0:	3b04      	subs	r3, #4
 800a6c2:	2a00      	cmp	r2, #0
 800a6c4:	d1f0      	bne.n	800a6a8 <quorem+0xf0>
 800a6c6:	3c01      	subs	r4, #1
 800a6c8:	e7eb      	b.n	800a6a2 <quorem+0xea>
 800a6ca:	2000      	movs	r0, #0
 800a6cc:	e7ee      	b.n	800a6ac <quorem+0xf4>
	...

0800a6d0 <_dtoa_r>:
 800a6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a6d4:	ed2d 8b04 	vpush	{d8-d9}
 800a6d8:	ec57 6b10 	vmov	r6, r7, d0
 800a6dc:	b093      	sub	sp, #76	; 0x4c
 800a6de:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800a6e0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a6e4:	9106      	str	r1, [sp, #24]
 800a6e6:	ee10 aa10 	vmov	sl, s0
 800a6ea:	4604      	mov	r4, r0
 800a6ec:	9209      	str	r2, [sp, #36]	; 0x24
 800a6ee:	930c      	str	r3, [sp, #48]	; 0x30
 800a6f0:	46bb      	mov	fp, r7
 800a6f2:	b975      	cbnz	r5, 800a712 <_dtoa_r+0x42>
 800a6f4:	2010      	movs	r0, #16
 800a6f6:	f7fe f90b 	bl	8008910 <malloc>
 800a6fa:	4602      	mov	r2, r0
 800a6fc:	6260      	str	r0, [r4, #36]	; 0x24
 800a6fe:	b920      	cbnz	r0, 800a70a <_dtoa_r+0x3a>
 800a700:	4ba7      	ldr	r3, [pc, #668]	; (800a9a0 <_dtoa_r+0x2d0>)
 800a702:	21ea      	movs	r1, #234	; 0xea
 800a704:	48a7      	ldr	r0, [pc, #668]	; (800a9a4 <_dtoa_r+0x2d4>)
 800a706:	f001 ffcd 	bl	800c6a4 <__assert_func>
 800a70a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a70e:	6005      	str	r5, [r0, #0]
 800a710:	60c5      	str	r5, [r0, #12]
 800a712:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a714:	6819      	ldr	r1, [r3, #0]
 800a716:	b151      	cbz	r1, 800a72e <_dtoa_r+0x5e>
 800a718:	685a      	ldr	r2, [r3, #4]
 800a71a:	604a      	str	r2, [r1, #4]
 800a71c:	2301      	movs	r3, #1
 800a71e:	4093      	lsls	r3, r2
 800a720:	608b      	str	r3, [r1, #8]
 800a722:	4620      	mov	r0, r4
 800a724:	f001 f9a2 	bl	800ba6c <_Bfree>
 800a728:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a72a:	2200      	movs	r2, #0
 800a72c:	601a      	str	r2, [r3, #0]
 800a72e:	1e3b      	subs	r3, r7, #0
 800a730:	bfaa      	itet	ge
 800a732:	2300      	movge	r3, #0
 800a734:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800a738:	f8c8 3000 	strge.w	r3, [r8]
 800a73c:	4b9a      	ldr	r3, [pc, #616]	; (800a9a8 <_dtoa_r+0x2d8>)
 800a73e:	bfbc      	itt	lt
 800a740:	2201      	movlt	r2, #1
 800a742:	f8c8 2000 	strlt.w	r2, [r8]
 800a746:	ea33 030b 	bics.w	r3, r3, fp
 800a74a:	d11b      	bne.n	800a784 <_dtoa_r+0xb4>
 800a74c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a74e:	f242 730f 	movw	r3, #9999	; 0x270f
 800a752:	6013      	str	r3, [r2, #0]
 800a754:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a758:	4333      	orrs	r3, r6
 800a75a:	f000 8592 	beq.w	800b282 <_dtoa_r+0xbb2>
 800a75e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a760:	b963      	cbnz	r3, 800a77c <_dtoa_r+0xac>
 800a762:	4b92      	ldr	r3, [pc, #584]	; (800a9ac <_dtoa_r+0x2dc>)
 800a764:	e022      	b.n	800a7ac <_dtoa_r+0xdc>
 800a766:	4b92      	ldr	r3, [pc, #584]	; (800a9b0 <_dtoa_r+0x2e0>)
 800a768:	9301      	str	r3, [sp, #4]
 800a76a:	3308      	adds	r3, #8
 800a76c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a76e:	6013      	str	r3, [r2, #0]
 800a770:	9801      	ldr	r0, [sp, #4]
 800a772:	b013      	add	sp, #76	; 0x4c
 800a774:	ecbd 8b04 	vpop	{d8-d9}
 800a778:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a77c:	4b8b      	ldr	r3, [pc, #556]	; (800a9ac <_dtoa_r+0x2dc>)
 800a77e:	9301      	str	r3, [sp, #4]
 800a780:	3303      	adds	r3, #3
 800a782:	e7f3      	b.n	800a76c <_dtoa_r+0x9c>
 800a784:	2200      	movs	r2, #0
 800a786:	2300      	movs	r3, #0
 800a788:	4650      	mov	r0, sl
 800a78a:	4659      	mov	r1, fp
 800a78c:	f7f6 f99c 	bl	8000ac8 <__aeabi_dcmpeq>
 800a790:	ec4b ab19 	vmov	d9, sl, fp
 800a794:	4680      	mov	r8, r0
 800a796:	b158      	cbz	r0, 800a7b0 <_dtoa_r+0xe0>
 800a798:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a79a:	2301      	movs	r3, #1
 800a79c:	6013      	str	r3, [r2, #0]
 800a79e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	f000 856b 	beq.w	800b27c <_dtoa_r+0xbac>
 800a7a6:	4883      	ldr	r0, [pc, #524]	; (800a9b4 <_dtoa_r+0x2e4>)
 800a7a8:	6018      	str	r0, [r3, #0]
 800a7aa:	1e43      	subs	r3, r0, #1
 800a7ac:	9301      	str	r3, [sp, #4]
 800a7ae:	e7df      	b.n	800a770 <_dtoa_r+0xa0>
 800a7b0:	ec4b ab10 	vmov	d0, sl, fp
 800a7b4:	aa10      	add	r2, sp, #64	; 0x40
 800a7b6:	a911      	add	r1, sp, #68	; 0x44
 800a7b8:	4620      	mov	r0, r4
 800a7ba:	f001 fd05 	bl	800c1c8 <__d2b>
 800a7be:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800a7c2:	ee08 0a10 	vmov	s16, r0
 800a7c6:	2d00      	cmp	r5, #0
 800a7c8:	f000 8084 	beq.w	800a8d4 <_dtoa_r+0x204>
 800a7cc:	ee19 3a90 	vmov	r3, s19
 800a7d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a7d4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800a7d8:	4656      	mov	r6, sl
 800a7da:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800a7de:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a7e2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800a7e6:	4b74      	ldr	r3, [pc, #464]	; (800a9b8 <_dtoa_r+0x2e8>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	4630      	mov	r0, r6
 800a7ec:	4639      	mov	r1, r7
 800a7ee:	f7f5 fd4b 	bl	8000288 <__aeabi_dsub>
 800a7f2:	a365      	add	r3, pc, #404	; (adr r3, 800a988 <_dtoa_r+0x2b8>)
 800a7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a7f8:	f7f5 fefe 	bl	80005f8 <__aeabi_dmul>
 800a7fc:	a364      	add	r3, pc, #400	; (adr r3, 800a990 <_dtoa_r+0x2c0>)
 800a7fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a802:	f7f5 fd43 	bl	800028c <__adddf3>
 800a806:	4606      	mov	r6, r0
 800a808:	4628      	mov	r0, r5
 800a80a:	460f      	mov	r7, r1
 800a80c:	f7f5 fe8a 	bl	8000524 <__aeabi_i2d>
 800a810:	a361      	add	r3, pc, #388	; (adr r3, 800a998 <_dtoa_r+0x2c8>)
 800a812:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a816:	f7f5 feef 	bl	80005f8 <__aeabi_dmul>
 800a81a:	4602      	mov	r2, r0
 800a81c:	460b      	mov	r3, r1
 800a81e:	4630      	mov	r0, r6
 800a820:	4639      	mov	r1, r7
 800a822:	f7f5 fd33 	bl	800028c <__adddf3>
 800a826:	4606      	mov	r6, r0
 800a828:	460f      	mov	r7, r1
 800a82a:	f7f6 f995 	bl	8000b58 <__aeabi_d2iz>
 800a82e:	2200      	movs	r2, #0
 800a830:	9000      	str	r0, [sp, #0]
 800a832:	2300      	movs	r3, #0
 800a834:	4630      	mov	r0, r6
 800a836:	4639      	mov	r1, r7
 800a838:	f7f6 f950 	bl	8000adc <__aeabi_dcmplt>
 800a83c:	b150      	cbz	r0, 800a854 <_dtoa_r+0x184>
 800a83e:	9800      	ldr	r0, [sp, #0]
 800a840:	f7f5 fe70 	bl	8000524 <__aeabi_i2d>
 800a844:	4632      	mov	r2, r6
 800a846:	463b      	mov	r3, r7
 800a848:	f7f6 f93e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a84c:	b910      	cbnz	r0, 800a854 <_dtoa_r+0x184>
 800a84e:	9b00      	ldr	r3, [sp, #0]
 800a850:	3b01      	subs	r3, #1
 800a852:	9300      	str	r3, [sp, #0]
 800a854:	9b00      	ldr	r3, [sp, #0]
 800a856:	2b16      	cmp	r3, #22
 800a858:	d85a      	bhi.n	800a910 <_dtoa_r+0x240>
 800a85a:	9a00      	ldr	r2, [sp, #0]
 800a85c:	4b57      	ldr	r3, [pc, #348]	; (800a9bc <_dtoa_r+0x2ec>)
 800a85e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a862:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a866:	ec51 0b19 	vmov	r0, r1, d9
 800a86a:	f7f6 f937 	bl	8000adc <__aeabi_dcmplt>
 800a86e:	2800      	cmp	r0, #0
 800a870:	d050      	beq.n	800a914 <_dtoa_r+0x244>
 800a872:	9b00      	ldr	r3, [sp, #0]
 800a874:	3b01      	subs	r3, #1
 800a876:	9300      	str	r3, [sp, #0]
 800a878:	2300      	movs	r3, #0
 800a87a:	930b      	str	r3, [sp, #44]	; 0x2c
 800a87c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a87e:	1b5d      	subs	r5, r3, r5
 800a880:	1e6b      	subs	r3, r5, #1
 800a882:	9305      	str	r3, [sp, #20]
 800a884:	bf45      	ittet	mi
 800a886:	f1c5 0301 	rsbmi	r3, r5, #1
 800a88a:	9304      	strmi	r3, [sp, #16]
 800a88c:	2300      	movpl	r3, #0
 800a88e:	2300      	movmi	r3, #0
 800a890:	bf4c      	ite	mi
 800a892:	9305      	strmi	r3, [sp, #20]
 800a894:	9304      	strpl	r3, [sp, #16]
 800a896:	9b00      	ldr	r3, [sp, #0]
 800a898:	2b00      	cmp	r3, #0
 800a89a:	db3d      	blt.n	800a918 <_dtoa_r+0x248>
 800a89c:	9b05      	ldr	r3, [sp, #20]
 800a89e:	9a00      	ldr	r2, [sp, #0]
 800a8a0:	920a      	str	r2, [sp, #40]	; 0x28
 800a8a2:	4413      	add	r3, r2
 800a8a4:	9305      	str	r3, [sp, #20]
 800a8a6:	2300      	movs	r3, #0
 800a8a8:	9307      	str	r3, [sp, #28]
 800a8aa:	9b06      	ldr	r3, [sp, #24]
 800a8ac:	2b09      	cmp	r3, #9
 800a8ae:	f200 8089 	bhi.w	800a9c4 <_dtoa_r+0x2f4>
 800a8b2:	2b05      	cmp	r3, #5
 800a8b4:	bfc4      	itt	gt
 800a8b6:	3b04      	subgt	r3, #4
 800a8b8:	9306      	strgt	r3, [sp, #24]
 800a8ba:	9b06      	ldr	r3, [sp, #24]
 800a8bc:	f1a3 0302 	sub.w	r3, r3, #2
 800a8c0:	bfcc      	ite	gt
 800a8c2:	2500      	movgt	r5, #0
 800a8c4:	2501      	movle	r5, #1
 800a8c6:	2b03      	cmp	r3, #3
 800a8c8:	f200 8087 	bhi.w	800a9da <_dtoa_r+0x30a>
 800a8cc:	e8df f003 	tbb	[pc, r3]
 800a8d0:	59383a2d 	.word	0x59383a2d
 800a8d4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a8d8:	441d      	add	r5, r3
 800a8da:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a8de:	2b20      	cmp	r3, #32
 800a8e0:	bfc1      	itttt	gt
 800a8e2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a8e6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800a8ea:	fa0b f303 	lslgt.w	r3, fp, r3
 800a8ee:	fa26 f000 	lsrgt.w	r0, r6, r0
 800a8f2:	bfda      	itte	le
 800a8f4:	f1c3 0320 	rsble	r3, r3, #32
 800a8f8:	fa06 f003 	lslle.w	r0, r6, r3
 800a8fc:	4318      	orrgt	r0, r3
 800a8fe:	f7f5 fe01 	bl	8000504 <__aeabi_ui2d>
 800a902:	2301      	movs	r3, #1
 800a904:	4606      	mov	r6, r0
 800a906:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800a90a:	3d01      	subs	r5, #1
 800a90c:	930e      	str	r3, [sp, #56]	; 0x38
 800a90e:	e76a      	b.n	800a7e6 <_dtoa_r+0x116>
 800a910:	2301      	movs	r3, #1
 800a912:	e7b2      	b.n	800a87a <_dtoa_r+0x1aa>
 800a914:	900b      	str	r0, [sp, #44]	; 0x2c
 800a916:	e7b1      	b.n	800a87c <_dtoa_r+0x1ac>
 800a918:	9b04      	ldr	r3, [sp, #16]
 800a91a:	9a00      	ldr	r2, [sp, #0]
 800a91c:	1a9b      	subs	r3, r3, r2
 800a91e:	9304      	str	r3, [sp, #16]
 800a920:	4253      	negs	r3, r2
 800a922:	9307      	str	r3, [sp, #28]
 800a924:	2300      	movs	r3, #0
 800a926:	930a      	str	r3, [sp, #40]	; 0x28
 800a928:	e7bf      	b.n	800a8aa <_dtoa_r+0x1da>
 800a92a:	2300      	movs	r3, #0
 800a92c:	9308      	str	r3, [sp, #32]
 800a92e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a930:	2b00      	cmp	r3, #0
 800a932:	dc55      	bgt.n	800a9e0 <_dtoa_r+0x310>
 800a934:	2301      	movs	r3, #1
 800a936:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a93a:	461a      	mov	r2, r3
 800a93c:	9209      	str	r2, [sp, #36]	; 0x24
 800a93e:	e00c      	b.n	800a95a <_dtoa_r+0x28a>
 800a940:	2301      	movs	r3, #1
 800a942:	e7f3      	b.n	800a92c <_dtoa_r+0x25c>
 800a944:	2300      	movs	r3, #0
 800a946:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a948:	9308      	str	r3, [sp, #32]
 800a94a:	9b00      	ldr	r3, [sp, #0]
 800a94c:	4413      	add	r3, r2
 800a94e:	9302      	str	r3, [sp, #8]
 800a950:	3301      	adds	r3, #1
 800a952:	2b01      	cmp	r3, #1
 800a954:	9303      	str	r3, [sp, #12]
 800a956:	bfb8      	it	lt
 800a958:	2301      	movlt	r3, #1
 800a95a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800a95c:	2200      	movs	r2, #0
 800a95e:	6042      	str	r2, [r0, #4]
 800a960:	2204      	movs	r2, #4
 800a962:	f102 0614 	add.w	r6, r2, #20
 800a966:	429e      	cmp	r6, r3
 800a968:	6841      	ldr	r1, [r0, #4]
 800a96a:	d93d      	bls.n	800a9e8 <_dtoa_r+0x318>
 800a96c:	4620      	mov	r0, r4
 800a96e:	f001 f83d 	bl	800b9ec <_Balloc>
 800a972:	9001      	str	r0, [sp, #4]
 800a974:	2800      	cmp	r0, #0
 800a976:	d13b      	bne.n	800a9f0 <_dtoa_r+0x320>
 800a978:	4b11      	ldr	r3, [pc, #68]	; (800a9c0 <_dtoa_r+0x2f0>)
 800a97a:	4602      	mov	r2, r0
 800a97c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800a980:	e6c0      	b.n	800a704 <_dtoa_r+0x34>
 800a982:	2301      	movs	r3, #1
 800a984:	e7df      	b.n	800a946 <_dtoa_r+0x276>
 800a986:	bf00      	nop
 800a988:	636f4361 	.word	0x636f4361
 800a98c:	3fd287a7 	.word	0x3fd287a7
 800a990:	8b60c8b3 	.word	0x8b60c8b3
 800a994:	3fc68a28 	.word	0x3fc68a28
 800a998:	509f79fb 	.word	0x509f79fb
 800a99c:	3fd34413 	.word	0x3fd34413
 800a9a0:	0800d40e 	.word	0x0800d40e
 800a9a4:	0800d425 	.word	0x0800d425
 800a9a8:	7ff00000 	.word	0x7ff00000
 800a9ac:	0800d40a 	.word	0x0800d40a
 800a9b0:	0800d401 	.word	0x0800d401
 800a9b4:	0800d281 	.word	0x0800d281
 800a9b8:	3ff80000 	.word	0x3ff80000
 800a9bc:	0800d590 	.word	0x0800d590
 800a9c0:	0800d480 	.word	0x0800d480
 800a9c4:	2501      	movs	r5, #1
 800a9c6:	2300      	movs	r3, #0
 800a9c8:	9306      	str	r3, [sp, #24]
 800a9ca:	9508      	str	r5, [sp, #32]
 800a9cc:	f04f 33ff 	mov.w	r3, #4294967295
 800a9d0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a9d4:	2200      	movs	r2, #0
 800a9d6:	2312      	movs	r3, #18
 800a9d8:	e7b0      	b.n	800a93c <_dtoa_r+0x26c>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	9308      	str	r3, [sp, #32]
 800a9de:	e7f5      	b.n	800a9cc <_dtoa_r+0x2fc>
 800a9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9e2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800a9e6:	e7b8      	b.n	800a95a <_dtoa_r+0x28a>
 800a9e8:	3101      	adds	r1, #1
 800a9ea:	6041      	str	r1, [r0, #4]
 800a9ec:	0052      	lsls	r2, r2, #1
 800a9ee:	e7b8      	b.n	800a962 <_dtoa_r+0x292>
 800a9f0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9f2:	9a01      	ldr	r2, [sp, #4]
 800a9f4:	601a      	str	r2, [r3, #0]
 800a9f6:	9b03      	ldr	r3, [sp, #12]
 800a9f8:	2b0e      	cmp	r3, #14
 800a9fa:	f200 809d 	bhi.w	800ab38 <_dtoa_r+0x468>
 800a9fe:	2d00      	cmp	r5, #0
 800aa00:	f000 809a 	beq.w	800ab38 <_dtoa_r+0x468>
 800aa04:	9b00      	ldr	r3, [sp, #0]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	dd32      	ble.n	800aa70 <_dtoa_r+0x3a0>
 800aa0a:	4ab7      	ldr	r2, [pc, #732]	; (800ace8 <_dtoa_r+0x618>)
 800aa0c:	f003 030f 	and.w	r3, r3, #15
 800aa10:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800aa14:	e9d3 8900 	ldrd	r8, r9, [r3]
 800aa18:	9b00      	ldr	r3, [sp, #0]
 800aa1a:	05d8      	lsls	r0, r3, #23
 800aa1c:	ea4f 1723 	mov.w	r7, r3, asr #4
 800aa20:	d516      	bpl.n	800aa50 <_dtoa_r+0x380>
 800aa22:	4bb2      	ldr	r3, [pc, #712]	; (800acec <_dtoa_r+0x61c>)
 800aa24:	ec51 0b19 	vmov	r0, r1, d9
 800aa28:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aa2c:	f7f5 ff0e 	bl	800084c <__aeabi_ddiv>
 800aa30:	f007 070f 	and.w	r7, r7, #15
 800aa34:	4682      	mov	sl, r0
 800aa36:	468b      	mov	fp, r1
 800aa38:	2503      	movs	r5, #3
 800aa3a:	4eac      	ldr	r6, [pc, #688]	; (800acec <_dtoa_r+0x61c>)
 800aa3c:	b957      	cbnz	r7, 800aa54 <_dtoa_r+0x384>
 800aa3e:	4642      	mov	r2, r8
 800aa40:	464b      	mov	r3, r9
 800aa42:	4650      	mov	r0, sl
 800aa44:	4659      	mov	r1, fp
 800aa46:	f7f5 ff01 	bl	800084c <__aeabi_ddiv>
 800aa4a:	4682      	mov	sl, r0
 800aa4c:	468b      	mov	fp, r1
 800aa4e:	e028      	b.n	800aaa2 <_dtoa_r+0x3d2>
 800aa50:	2502      	movs	r5, #2
 800aa52:	e7f2      	b.n	800aa3a <_dtoa_r+0x36a>
 800aa54:	07f9      	lsls	r1, r7, #31
 800aa56:	d508      	bpl.n	800aa6a <_dtoa_r+0x39a>
 800aa58:	4640      	mov	r0, r8
 800aa5a:	4649      	mov	r1, r9
 800aa5c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800aa60:	f7f5 fdca 	bl	80005f8 <__aeabi_dmul>
 800aa64:	3501      	adds	r5, #1
 800aa66:	4680      	mov	r8, r0
 800aa68:	4689      	mov	r9, r1
 800aa6a:	107f      	asrs	r7, r7, #1
 800aa6c:	3608      	adds	r6, #8
 800aa6e:	e7e5      	b.n	800aa3c <_dtoa_r+0x36c>
 800aa70:	f000 809b 	beq.w	800abaa <_dtoa_r+0x4da>
 800aa74:	9b00      	ldr	r3, [sp, #0]
 800aa76:	4f9d      	ldr	r7, [pc, #628]	; (800acec <_dtoa_r+0x61c>)
 800aa78:	425e      	negs	r6, r3
 800aa7a:	4b9b      	ldr	r3, [pc, #620]	; (800ace8 <_dtoa_r+0x618>)
 800aa7c:	f006 020f 	and.w	r2, r6, #15
 800aa80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aa84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aa88:	ec51 0b19 	vmov	r0, r1, d9
 800aa8c:	f7f5 fdb4 	bl	80005f8 <__aeabi_dmul>
 800aa90:	1136      	asrs	r6, r6, #4
 800aa92:	4682      	mov	sl, r0
 800aa94:	468b      	mov	fp, r1
 800aa96:	2300      	movs	r3, #0
 800aa98:	2502      	movs	r5, #2
 800aa9a:	2e00      	cmp	r6, #0
 800aa9c:	d17a      	bne.n	800ab94 <_dtoa_r+0x4c4>
 800aa9e:	2b00      	cmp	r3, #0
 800aaa0:	d1d3      	bne.n	800aa4a <_dtoa_r+0x37a>
 800aaa2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	f000 8082 	beq.w	800abae <_dtoa_r+0x4de>
 800aaaa:	4b91      	ldr	r3, [pc, #580]	; (800acf0 <_dtoa_r+0x620>)
 800aaac:	2200      	movs	r2, #0
 800aaae:	4650      	mov	r0, sl
 800aab0:	4659      	mov	r1, fp
 800aab2:	f7f6 f813 	bl	8000adc <__aeabi_dcmplt>
 800aab6:	2800      	cmp	r0, #0
 800aab8:	d079      	beq.n	800abae <_dtoa_r+0x4de>
 800aaba:	9b03      	ldr	r3, [sp, #12]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d076      	beq.n	800abae <_dtoa_r+0x4de>
 800aac0:	9b02      	ldr	r3, [sp, #8]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	dd36      	ble.n	800ab34 <_dtoa_r+0x464>
 800aac6:	9b00      	ldr	r3, [sp, #0]
 800aac8:	4650      	mov	r0, sl
 800aaca:	4659      	mov	r1, fp
 800aacc:	1e5f      	subs	r7, r3, #1
 800aace:	2200      	movs	r2, #0
 800aad0:	4b88      	ldr	r3, [pc, #544]	; (800acf4 <_dtoa_r+0x624>)
 800aad2:	f7f5 fd91 	bl	80005f8 <__aeabi_dmul>
 800aad6:	9e02      	ldr	r6, [sp, #8]
 800aad8:	4682      	mov	sl, r0
 800aada:	468b      	mov	fp, r1
 800aadc:	3501      	adds	r5, #1
 800aade:	4628      	mov	r0, r5
 800aae0:	f7f5 fd20 	bl	8000524 <__aeabi_i2d>
 800aae4:	4652      	mov	r2, sl
 800aae6:	465b      	mov	r3, fp
 800aae8:	f7f5 fd86 	bl	80005f8 <__aeabi_dmul>
 800aaec:	4b82      	ldr	r3, [pc, #520]	; (800acf8 <_dtoa_r+0x628>)
 800aaee:	2200      	movs	r2, #0
 800aaf0:	f7f5 fbcc 	bl	800028c <__adddf3>
 800aaf4:	46d0      	mov	r8, sl
 800aaf6:	46d9      	mov	r9, fp
 800aaf8:	4682      	mov	sl, r0
 800aafa:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800aafe:	2e00      	cmp	r6, #0
 800ab00:	d158      	bne.n	800abb4 <_dtoa_r+0x4e4>
 800ab02:	4b7e      	ldr	r3, [pc, #504]	; (800acfc <_dtoa_r+0x62c>)
 800ab04:	2200      	movs	r2, #0
 800ab06:	4640      	mov	r0, r8
 800ab08:	4649      	mov	r1, r9
 800ab0a:	f7f5 fbbd 	bl	8000288 <__aeabi_dsub>
 800ab0e:	4652      	mov	r2, sl
 800ab10:	465b      	mov	r3, fp
 800ab12:	4680      	mov	r8, r0
 800ab14:	4689      	mov	r9, r1
 800ab16:	f7f5 ffff 	bl	8000b18 <__aeabi_dcmpgt>
 800ab1a:	2800      	cmp	r0, #0
 800ab1c:	f040 8295 	bne.w	800b04a <_dtoa_r+0x97a>
 800ab20:	4652      	mov	r2, sl
 800ab22:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ab26:	4640      	mov	r0, r8
 800ab28:	4649      	mov	r1, r9
 800ab2a:	f7f5 ffd7 	bl	8000adc <__aeabi_dcmplt>
 800ab2e:	2800      	cmp	r0, #0
 800ab30:	f040 8289 	bne.w	800b046 <_dtoa_r+0x976>
 800ab34:	ec5b ab19 	vmov	sl, fp, d9
 800ab38:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f2c0 8148 	blt.w	800add0 <_dtoa_r+0x700>
 800ab40:	9a00      	ldr	r2, [sp, #0]
 800ab42:	2a0e      	cmp	r2, #14
 800ab44:	f300 8144 	bgt.w	800add0 <_dtoa_r+0x700>
 800ab48:	4b67      	ldr	r3, [pc, #412]	; (800ace8 <_dtoa_r+0x618>)
 800ab4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab4e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ab52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f280 80d5 	bge.w	800ad04 <_dtoa_r+0x634>
 800ab5a:	9b03      	ldr	r3, [sp, #12]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	f300 80d1 	bgt.w	800ad04 <_dtoa_r+0x634>
 800ab62:	f040 826f 	bne.w	800b044 <_dtoa_r+0x974>
 800ab66:	4b65      	ldr	r3, [pc, #404]	; (800acfc <_dtoa_r+0x62c>)
 800ab68:	2200      	movs	r2, #0
 800ab6a:	4640      	mov	r0, r8
 800ab6c:	4649      	mov	r1, r9
 800ab6e:	f7f5 fd43 	bl	80005f8 <__aeabi_dmul>
 800ab72:	4652      	mov	r2, sl
 800ab74:	465b      	mov	r3, fp
 800ab76:	f7f5 ffc5 	bl	8000b04 <__aeabi_dcmpge>
 800ab7a:	9e03      	ldr	r6, [sp, #12]
 800ab7c:	4637      	mov	r7, r6
 800ab7e:	2800      	cmp	r0, #0
 800ab80:	f040 8245 	bne.w	800b00e <_dtoa_r+0x93e>
 800ab84:	9d01      	ldr	r5, [sp, #4]
 800ab86:	2331      	movs	r3, #49	; 0x31
 800ab88:	f805 3b01 	strb.w	r3, [r5], #1
 800ab8c:	9b00      	ldr	r3, [sp, #0]
 800ab8e:	3301      	adds	r3, #1
 800ab90:	9300      	str	r3, [sp, #0]
 800ab92:	e240      	b.n	800b016 <_dtoa_r+0x946>
 800ab94:	07f2      	lsls	r2, r6, #31
 800ab96:	d505      	bpl.n	800aba4 <_dtoa_r+0x4d4>
 800ab98:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ab9c:	f7f5 fd2c 	bl	80005f8 <__aeabi_dmul>
 800aba0:	3501      	adds	r5, #1
 800aba2:	2301      	movs	r3, #1
 800aba4:	1076      	asrs	r6, r6, #1
 800aba6:	3708      	adds	r7, #8
 800aba8:	e777      	b.n	800aa9a <_dtoa_r+0x3ca>
 800abaa:	2502      	movs	r5, #2
 800abac:	e779      	b.n	800aaa2 <_dtoa_r+0x3d2>
 800abae:	9f00      	ldr	r7, [sp, #0]
 800abb0:	9e03      	ldr	r6, [sp, #12]
 800abb2:	e794      	b.n	800aade <_dtoa_r+0x40e>
 800abb4:	9901      	ldr	r1, [sp, #4]
 800abb6:	4b4c      	ldr	r3, [pc, #304]	; (800ace8 <_dtoa_r+0x618>)
 800abb8:	4431      	add	r1, r6
 800abba:	910d      	str	r1, [sp, #52]	; 0x34
 800abbc:	9908      	ldr	r1, [sp, #32]
 800abbe:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800abc2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800abc6:	2900      	cmp	r1, #0
 800abc8:	d043      	beq.n	800ac52 <_dtoa_r+0x582>
 800abca:	494d      	ldr	r1, [pc, #308]	; (800ad00 <_dtoa_r+0x630>)
 800abcc:	2000      	movs	r0, #0
 800abce:	f7f5 fe3d 	bl	800084c <__aeabi_ddiv>
 800abd2:	4652      	mov	r2, sl
 800abd4:	465b      	mov	r3, fp
 800abd6:	f7f5 fb57 	bl	8000288 <__aeabi_dsub>
 800abda:	9d01      	ldr	r5, [sp, #4]
 800abdc:	4682      	mov	sl, r0
 800abde:	468b      	mov	fp, r1
 800abe0:	4649      	mov	r1, r9
 800abe2:	4640      	mov	r0, r8
 800abe4:	f7f5 ffb8 	bl	8000b58 <__aeabi_d2iz>
 800abe8:	4606      	mov	r6, r0
 800abea:	f7f5 fc9b 	bl	8000524 <__aeabi_i2d>
 800abee:	4602      	mov	r2, r0
 800abf0:	460b      	mov	r3, r1
 800abf2:	4640      	mov	r0, r8
 800abf4:	4649      	mov	r1, r9
 800abf6:	f7f5 fb47 	bl	8000288 <__aeabi_dsub>
 800abfa:	3630      	adds	r6, #48	; 0x30
 800abfc:	f805 6b01 	strb.w	r6, [r5], #1
 800ac00:	4652      	mov	r2, sl
 800ac02:	465b      	mov	r3, fp
 800ac04:	4680      	mov	r8, r0
 800ac06:	4689      	mov	r9, r1
 800ac08:	f7f5 ff68 	bl	8000adc <__aeabi_dcmplt>
 800ac0c:	2800      	cmp	r0, #0
 800ac0e:	d163      	bne.n	800acd8 <_dtoa_r+0x608>
 800ac10:	4642      	mov	r2, r8
 800ac12:	464b      	mov	r3, r9
 800ac14:	4936      	ldr	r1, [pc, #216]	; (800acf0 <_dtoa_r+0x620>)
 800ac16:	2000      	movs	r0, #0
 800ac18:	f7f5 fb36 	bl	8000288 <__aeabi_dsub>
 800ac1c:	4652      	mov	r2, sl
 800ac1e:	465b      	mov	r3, fp
 800ac20:	f7f5 ff5c 	bl	8000adc <__aeabi_dcmplt>
 800ac24:	2800      	cmp	r0, #0
 800ac26:	f040 80b5 	bne.w	800ad94 <_dtoa_r+0x6c4>
 800ac2a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac2c:	429d      	cmp	r5, r3
 800ac2e:	d081      	beq.n	800ab34 <_dtoa_r+0x464>
 800ac30:	4b30      	ldr	r3, [pc, #192]	; (800acf4 <_dtoa_r+0x624>)
 800ac32:	2200      	movs	r2, #0
 800ac34:	4650      	mov	r0, sl
 800ac36:	4659      	mov	r1, fp
 800ac38:	f7f5 fcde 	bl	80005f8 <__aeabi_dmul>
 800ac3c:	4b2d      	ldr	r3, [pc, #180]	; (800acf4 <_dtoa_r+0x624>)
 800ac3e:	4682      	mov	sl, r0
 800ac40:	468b      	mov	fp, r1
 800ac42:	4640      	mov	r0, r8
 800ac44:	4649      	mov	r1, r9
 800ac46:	2200      	movs	r2, #0
 800ac48:	f7f5 fcd6 	bl	80005f8 <__aeabi_dmul>
 800ac4c:	4680      	mov	r8, r0
 800ac4e:	4689      	mov	r9, r1
 800ac50:	e7c6      	b.n	800abe0 <_dtoa_r+0x510>
 800ac52:	4650      	mov	r0, sl
 800ac54:	4659      	mov	r1, fp
 800ac56:	f7f5 fccf 	bl	80005f8 <__aeabi_dmul>
 800ac5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac5c:	9d01      	ldr	r5, [sp, #4]
 800ac5e:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac60:	4682      	mov	sl, r0
 800ac62:	468b      	mov	fp, r1
 800ac64:	4649      	mov	r1, r9
 800ac66:	4640      	mov	r0, r8
 800ac68:	f7f5 ff76 	bl	8000b58 <__aeabi_d2iz>
 800ac6c:	4606      	mov	r6, r0
 800ac6e:	f7f5 fc59 	bl	8000524 <__aeabi_i2d>
 800ac72:	3630      	adds	r6, #48	; 0x30
 800ac74:	4602      	mov	r2, r0
 800ac76:	460b      	mov	r3, r1
 800ac78:	4640      	mov	r0, r8
 800ac7a:	4649      	mov	r1, r9
 800ac7c:	f7f5 fb04 	bl	8000288 <__aeabi_dsub>
 800ac80:	f805 6b01 	strb.w	r6, [r5], #1
 800ac84:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ac86:	429d      	cmp	r5, r3
 800ac88:	4680      	mov	r8, r0
 800ac8a:	4689      	mov	r9, r1
 800ac8c:	f04f 0200 	mov.w	r2, #0
 800ac90:	d124      	bne.n	800acdc <_dtoa_r+0x60c>
 800ac92:	4b1b      	ldr	r3, [pc, #108]	; (800ad00 <_dtoa_r+0x630>)
 800ac94:	4650      	mov	r0, sl
 800ac96:	4659      	mov	r1, fp
 800ac98:	f7f5 faf8 	bl	800028c <__adddf3>
 800ac9c:	4602      	mov	r2, r0
 800ac9e:	460b      	mov	r3, r1
 800aca0:	4640      	mov	r0, r8
 800aca2:	4649      	mov	r1, r9
 800aca4:	f7f5 ff38 	bl	8000b18 <__aeabi_dcmpgt>
 800aca8:	2800      	cmp	r0, #0
 800acaa:	d173      	bne.n	800ad94 <_dtoa_r+0x6c4>
 800acac:	4652      	mov	r2, sl
 800acae:	465b      	mov	r3, fp
 800acb0:	4913      	ldr	r1, [pc, #76]	; (800ad00 <_dtoa_r+0x630>)
 800acb2:	2000      	movs	r0, #0
 800acb4:	f7f5 fae8 	bl	8000288 <__aeabi_dsub>
 800acb8:	4602      	mov	r2, r0
 800acba:	460b      	mov	r3, r1
 800acbc:	4640      	mov	r0, r8
 800acbe:	4649      	mov	r1, r9
 800acc0:	f7f5 ff0c 	bl	8000adc <__aeabi_dcmplt>
 800acc4:	2800      	cmp	r0, #0
 800acc6:	f43f af35 	beq.w	800ab34 <_dtoa_r+0x464>
 800acca:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800accc:	1e6b      	subs	r3, r5, #1
 800acce:	930f      	str	r3, [sp, #60]	; 0x3c
 800acd0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800acd4:	2b30      	cmp	r3, #48	; 0x30
 800acd6:	d0f8      	beq.n	800acca <_dtoa_r+0x5fa>
 800acd8:	9700      	str	r7, [sp, #0]
 800acda:	e049      	b.n	800ad70 <_dtoa_r+0x6a0>
 800acdc:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <_dtoa_r+0x624>)
 800acde:	f7f5 fc8b 	bl	80005f8 <__aeabi_dmul>
 800ace2:	4680      	mov	r8, r0
 800ace4:	4689      	mov	r9, r1
 800ace6:	e7bd      	b.n	800ac64 <_dtoa_r+0x594>
 800ace8:	0800d590 	.word	0x0800d590
 800acec:	0800d568 	.word	0x0800d568
 800acf0:	3ff00000 	.word	0x3ff00000
 800acf4:	40240000 	.word	0x40240000
 800acf8:	401c0000 	.word	0x401c0000
 800acfc:	40140000 	.word	0x40140000
 800ad00:	3fe00000 	.word	0x3fe00000
 800ad04:	9d01      	ldr	r5, [sp, #4]
 800ad06:	4656      	mov	r6, sl
 800ad08:	465f      	mov	r7, fp
 800ad0a:	4642      	mov	r2, r8
 800ad0c:	464b      	mov	r3, r9
 800ad0e:	4630      	mov	r0, r6
 800ad10:	4639      	mov	r1, r7
 800ad12:	f7f5 fd9b 	bl	800084c <__aeabi_ddiv>
 800ad16:	f7f5 ff1f 	bl	8000b58 <__aeabi_d2iz>
 800ad1a:	4682      	mov	sl, r0
 800ad1c:	f7f5 fc02 	bl	8000524 <__aeabi_i2d>
 800ad20:	4642      	mov	r2, r8
 800ad22:	464b      	mov	r3, r9
 800ad24:	f7f5 fc68 	bl	80005f8 <__aeabi_dmul>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	4639      	mov	r1, r7
 800ad30:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800ad34:	f7f5 faa8 	bl	8000288 <__aeabi_dsub>
 800ad38:	f805 6b01 	strb.w	r6, [r5], #1
 800ad3c:	9e01      	ldr	r6, [sp, #4]
 800ad3e:	9f03      	ldr	r7, [sp, #12]
 800ad40:	1bae      	subs	r6, r5, r6
 800ad42:	42b7      	cmp	r7, r6
 800ad44:	4602      	mov	r2, r0
 800ad46:	460b      	mov	r3, r1
 800ad48:	d135      	bne.n	800adb6 <_dtoa_r+0x6e6>
 800ad4a:	f7f5 fa9f 	bl	800028c <__adddf3>
 800ad4e:	4642      	mov	r2, r8
 800ad50:	464b      	mov	r3, r9
 800ad52:	4606      	mov	r6, r0
 800ad54:	460f      	mov	r7, r1
 800ad56:	f7f5 fedf 	bl	8000b18 <__aeabi_dcmpgt>
 800ad5a:	b9d0      	cbnz	r0, 800ad92 <_dtoa_r+0x6c2>
 800ad5c:	4642      	mov	r2, r8
 800ad5e:	464b      	mov	r3, r9
 800ad60:	4630      	mov	r0, r6
 800ad62:	4639      	mov	r1, r7
 800ad64:	f7f5 feb0 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad68:	b110      	cbz	r0, 800ad70 <_dtoa_r+0x6a0>
 800ad6a:	f01a 0f01 	tst.w	sl, #1
 800ad6e:	d110      	bne.n	800ad92 <_dtoa_r+0x6c2>
 800ad70:	4620      	mov	r0, r4
 800ad72:	ee18 1a10 	vmov	r1, s16
 800ad76:	f000 fe79 	bl	800ba6c <_Bfree>
 800ad7a:	2300      	movs	r3, #0
 800ad7c:	9800      	ldr	r0, [sp, #0]
 800ad7e:	702b      	strb	r3, [r5, #0]
 800ad80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad82:	3001      	adds	r0, #1
 800ad84:	6018      	str	r0, [r3, #0]
 800ad86:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	f43f acf1 	beq.w	800a770 <_dtoa_r+0xa0>
 800ad8e:	601d      	str	r5, [r3, #0]
 800ad90:	e4ee      	b.n	800a770 <_dtoa_r+0xa0>
 800ad92:	9f00      	ldr	r7, [sp, #0]
 800ad94:	462b      	mov	r3, r5
 800ad96:	461d      	mov	r5, r3
 800ad98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ad9c:	2a39      	cmp	r2, #57	; 0x39
 800ad9e:	d106      	bne.n	800adae <_dtoa_r+0x6de>
 800ada0:	9a01      	ldr	r2, [sp, #4]
 800ada2:	429a      	cmp	r2, r3
 800ada4:	d1f7      	bne.n	800ad96 <_dtoa_r+0x6c6>
 800ada6:	9901      	ldr	r1, [sp, #4]
 800ada8:	2230      	movs	r2, #48	; 0x30
 800adaa:	3701      	adds	r7, #1
 800adac:	700a      	strb	r2, [r1, #0]
 800adae:	781a      	ldrb	r2, [r3, #0]
 800adb0:	3201      	adds	r2, #1
 800adb2:	701a      	strb	r2, [r3, #0]
 800adb4:	e790      	b.n	800acd8 <_dtoa_r+0x608>
 800adb6:	4ba6      	ldr	r3, [pc, #664]	; (800b050 <_dtoa_r+0x980>)
 800adb8:	2200      	movs	r2, #0
 800adba:	f7f5 fc1d 	bl	80005f8 <__aeabi_dmul>
 800adbe:	2200      	movs	r2, #0
 800adc0:	2300      	movs	r3, #0
 800adc2:	4606      	mov	r6, r0
 800adc4:	460f      	mov	r7, r1
 800adc6:	f7f5 fe7f 	bl	8000ac8 <__aeabi_dcmpeq>
 800adca:	2800      	cmp	r0, #0
 800adcc:	d09d      	beq.n	800ad0a <_dtoa_r+0x63a>
 800adce:	e7cf      	b.n	800ad70 <_dtoa_r+0x6a0>
 800add0:	9a08      	ldr	r2, [sp, #32]
 800add2:	2a00      	cmp	r2, #0
 800add4:	f000 80d7 	beq.w	800af86 <_dtoa_r+0x8b6>
 800add8:	9a06      	ldr	r2, [sp, #24]
 800adda:	2a01      	cmp	r2, #1
 800addc:	f300 80ba 	bgt.w	800af54 <_dtoa_r+0x884>
 800ade0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ade2:	2a00      	cmp	r2, #0
 800ade4:	f000 80b2 	beq.w	800af4c <_dtoa_r+0x87c>
 800ade8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800adec:	9e07      	ldr	r6, [sp, #28]
 800adee:	9d04      	ldr	r5, [sp, #16]
 800adf0:	9a04      	ldr	r2, [sp, #16]
 800adf2:	441a      	add	r2, r3
 800adf4:	9204      	str	r2, [sp, #16]
 800adf6:	9a05      	ldr	r2, [sp, #20]
 800adf8:	2101      	movs	r1, #1
 800adfa:	441a      	add	r2, r3
 800adfc:	4620      	mov	r0, r4
 800adfe:	9205      	str	r2, [sp, #20]
 800ae00:	f000 ff36 	bl	800bc70 <__i2b>
 800ae04:	4607      	mov	r7, r0
 800ae06:	2d00      	cmp	r5, #0
 800ae08:	dd0c      	ble.n	800ae24 <_dtoa_r+0x754>
 800ae0a:	9b05      	ldr	r3, [sp, #20]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	dd09      	ble.n	800ae24 <_dtoa_r+0x754>
 800ae10:	42ab      	cmp	r3, r5
 800ae12:	9a04      	ldr	r2, [sp, #16]
 800ae14:	bfa8      	it	ge
 800ae16:	462b      	movge	r3, r5
 800ae18:	1ad2      	subs	r2, r2, r3
 800ae1a:	9204      	str	r2, [sp, #16]
 800ae1c:	9a05      	ldr	r2, [sp, #20]
 800ae1e:	1aed      	subs	r5, r5, r3
 800ae20:	1ad3      	subs	r3, r2, r3
 800ae22:	9305      	str	r3, [sp, #20]
 800ae24:	9b07      	ldr	r3, [sp, #28]
 800ae26:	b31b      	cbz	r3, 800ae70 <_dtoa_r+0x7a0>
 800ae28:	9b08      	ldr	r3, [sp, #32]
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	f000 80af 	beq.w	800af8e <_dtoa_r+0x8be>
 800ae30:	2e00      	cmp	r6, #0
 800ae32:	dd13      	ble.n	800ae5c <_dtoa_r+0x78c>
 800ae34:	4639      	mov	r1, r7
 800ae36:	4632      	mov	r2, r6
 800ae38:	4620      	mov	r0, r4
 800ae3a:	f000 ffd9 	bl	800bdf0 <__pow5mult>
 800ae3e:	ee18 2a10 	vmov	r2, s16
 800ae42:	4601      	mov	r1, r0
 800ae44:	4607      	mov	r7, r0
 800ae46:	4620      	mov	r0, r4
 800ae48:	f000 ff28 	bl	800bc9c <__multiply>
 800ae4c:	ee18 1a10 	vmov	r1, s16
 800ae50:	4680      	mov	r8, r0
 800ae52:	4620      	mov	r0, r4
 800ae54:	f000 fe0a 	bl	800ba6c <_Bfree>
 800ae58:	ee08 8a10 	vmov	s16, r8
 800ae5c:	9b07      	ldr	r3, [sp, #28]
 800ae5e:	1b9a      	subs	r2, r3, r6
 800ae60:	d006      	beq.n	800ae70 <_dtoa_r+0x7a0>
 800ae62:	ee18 1a10 	vmov	r1, s16
 800ae66:	4620      	mov	r0, r4
 800ae68:	f000 ffc2 	bl	800bdf0 <__pow5mult>
 800ae6c:	ee08 0a10 	vmov	s16, r0
 800ae70:	2101      	movs	r1, #1
 800ae72:	4620      	mov	r0, r4
 800ae74:	f000 fefc 	bl	800bc70 <__i2b>
 800ae78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	f340 8088 	ble.w	800af92 <_dtoa_r+0x8c2>
 800ae82:	461a      	mov	r2, r3
 800ae84:	4601      	mov	r1, r0
 800ae86:	4620      	mov	r0, r4
 800ae88:	f000 ffb2 	bl	800bdf0 <__pow5mult>
 800ae8c:	9b06      	ldr	r3, [sp, #24]
 800ae8e:	2b01      	cmp	r3, #1
 800ae90:	4606      	mov	r6, r0
 800ae92:	f340 8081 	ble.w	800af98 <_dtoa_r+0x8c8>
 800ae96:	f04f 0800 	mov.w	r8, #0
 800ae9a:	6933      	ldr	r3, [r6, #16]
 800ae9c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800aea0:	6918      	ldr	r0, [r3, #16]
 800aea2:	f000 fe95 	bl	800bbd0 <__hi0bits>
 800aea6:	f1c0 0020 	rsb	r0, r0, #32
 800aeaa:	9b05      	ldr	r3, [sp, #20]
 800aeac:	4418      	add	r0, r3
 800aeae:	f010 001f 	ands.w	r0, r0, #31
 800aeb2:	f000 8092 	beq.w	800afda <_dtoa_r+0x90a>
 800aeb6:	f1c0 0320 	rsb	r3, r0, #32
 800aeba:	2b04      	cmp	r3, #4
 800aebc:	f340 808a 	ble.w	800afd4 <_dtoa_r+0x904>
 800aec0:	f1c0 001c 	rsb	r0, r0, #28
 800aec4:	9b04      	ldr	r3, [sp, #16]
 800aec6:	4403      	add	r3, r0
 800aec8:	9304      	str	r3, [sp, #16]
 800aeca:	9b05      	ldr	r3, [sp, #20]
 800aecc:	4403      	add	r3, r0
 800aece:	4405      	add	r5, r0
 800aed0:	9305      	str	r3, [sp, #20]
 800aed2:	9b04      	ldr	r3, [sp, #16]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	dd07      	ble.n	800aee8 <_dtoa_r+0x818>
 800aed8:	ee18 1a10 	vmov	r1, s16
 800aedc:	461a      	mov	r2, r3
 800aede:	4620      	mov	r0, r4
 800aee0:	f000 ffe0 	bl	800bea4 <__lshift>
 800aee4:	ee08 0a10 	vmov	s16, r0
 800aee8:	9b05      	ldr	r3, [sp, #20]
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	dd05      	ble.n	800aefa <_dtoa_r+0x82a>
 800aeee:	4631      	mov	r1, r6
 800aef0:	461a      	mov	r2, r3
 800aef2:	4620      	mov	r0, r4
 800aef4:	f000 ffd6 	bl	800bea4 <__lshift>
 800aef8:	4606      	mov	r6, r0
 800aefa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aefc:	2b00      	cmp	r3, #0
 800aefe:	d06e      	beq.n	800afde <_dtoa_r+0x90e>
 800af00:	ee18 0a10 	vmov	r0, s16
 800af04:	4631      	mov	r1, r6
 800af06:	f001 f83d 	bl	800bf84 <__mcmp>
 800af0a:	2800      	cmp	r0, #0
 800af0c:	da67      	bge.n	800afde <_dtoa_r+0x90e>
 800af0e:	9b00      	ldr	r3, [sp, #0]
 800af10:	3b01      	subs	r3, #1
 800af12:	ee18 1a10 	vmov	r1, s16
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	220a      	movs	r2, #10
 800af1a:	2300      	movs	r3, #0
 800af1c:	4620      	mov	r0, r4
 800af1e:	f000 fdc7 	bl	800bab0 <__multadd>
 800af22:	9b08      	ldr	r3, [sp, #32]
 800af24:	ee08 0a10 	vmov	s16, r0
 800af28:	2b00      	cmp	r3, #0
 800af2a:	f000 81b1 	beq.w	800b290 <_dtoa_r+0xbc0>
 800af2e:	2300      	movs	r3, #0
 800af30:	4639      	mov	r1, r7
 800af32:	220a      	movs	r2, #10
 800af34:	4620      	mov	r0, r4
 800af36:	f000 fdbb 	bl	800bab0 <__multadd>
 800af3a:	9b02      	ldr	r3, [sp, #8]
 800af3c:	2b00      	cmp	r3, #0
 800af3e:	4607      	mov	r7, r0
 800af40:	f300 808e 	bgt.w	800b060 <_dtoa_r+0x990>
 800af44:	9b06      	ldr	r3, [sp, #24]
 800af46:	2b02      	cmp	r3, #2
 800af48:	dc51      	bgt.n	800afee <_dtoa_r+0x91e>
 800af4a:	e089      	b.n	800b060 <_dtoa_r+0x990>
 800af4c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800af4e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800af52:	e74b      	b.n	800adec <_dtoa_r+0x71c>
 800af54:	9b03      	ldr	r3, [sp, #12]
 800af56:	1e5e      	subs	r6, r3, #1
 800af58:	9b07      	ldr	r3, [sp, #28]
 800af5a:	42b3      	cmp	r3, r6
 800af5c:	bfbf      	itttt	lt
 800af5e:	9b07      	ldrlt	r3, [sp, #28]
 800af60:	9607      	strlt	r6, [sp, #28]
 800af62:	1af2      	sublt	r2, r6, r3
 800af64:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800af66:	bfb6      	itet	lt
 800af68:	189b      	addlt	r3, r3, r2
 800af6a:	1b9e      	subge	r6, r3, r6
 800af6c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800af6e:	9b03      	ldr	r3, [sp, #12]
 800af70:	bfb8      	it	lt
 800af72:	2600      	movlt	r6, #0
 800af74:	2b00      	cmp	r3, #0
 800af76:	bfb7      	itett	lt
 800af78:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800af7c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800af80:	1a9d      	sublt	r5, r3, r2
 800af82:	2300      	movlt	r3, #0
 800af84:	e734      	b.n	800adf0 <_dtoa_r+0x720>
 800af86:	9e07      	ldr	r6, [sp, #28]
 800af88:	9d04      	ldr	r5, [sp, #16]
 800af8a:	9f08      	ldr	r7, [sp, #32]
 800af8c:	e73b      	b.n	800ae06 <_dtoa_r+0x736>
 800af8e:	9a07      	ldr	r2, [sp, #28]
 800af90:	e767      	b.n	800ae62 <_dtoa_r+0x792>
 800af92:	9b06      	ldr	r3, [sp, #24]
 800af94:	2b01      	cmp	r3, #1
 800af96:	dc18      	bgt.n	800afca <_dtoa_r+0x8fa>
 800af98:	f1ba 0f00 	cmp.w	sl, #0
 800af9c:	d115      	bne.n	800afca <_dtoa_r+0x8fa>
 800af9e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800afa2:	b993      	cbnz	r3, 800afca <_dtoa_r+0x8fa>
 800afa4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800afa8:	0d1b      	lsrs	r3, r3, #20
 800afaa:	051b      	lsls	r3, r3, #20
 800afac:	b183      	cbz	r3, 800afd0 <_dtoa_r+0x900>
 800afae:	9b04      	ldr	r3, [sp, #16]
 800afb0:	3301      	adds	r3, #1
 800afb2:	9304      	str	r3, [sp, #16]
 800afb4:	9b05      	ldr	r3, [sp, #20]
 800afb6:	3301      	adds	r3, #1
 800afb8:	9305      	str	r3, [sp, #20]
 800afba:	f04f 0801 	mov.w	r8, #1
 800afbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	f47f af6a 	bne.w	800ae9a <_dtoa_r+0x7ca>
 800afc6:	2001      	movs	r0, #1
 800afc8:	e76f      	b.n	800aeaa <_dtoa_r+0x7da>
 800afca:	f04f 0800 	mov.w	r8, #0
 800afce:	e7f6      	b.n	800afbe <_dtoa_r+0x8ee>
 800afd0:	4698      	mov	r8, r3
 800afd2:	e7f4      	b.n	800afbe <_dtoa_r+0x8ee>
 800afd4:	f43f af7d 	beq.w	800aed2 <_dtoa_r+0x802>
 800afd8:	4618      	mov	r0, r3
 800afda:	301c      	adds	r0, #28
 800afdc:	e772      	b.n	800aec4 <_dtoa_r+0x7f4>
 800afde:	9b03      	ldr	r3, [sp, #12]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	dc37      	bgt.n	800b054 <_dtoa_r+0x984>
 800afe4:	9b06      	ldr	r3, [sp, #24]
 800afe6:	2b02      	cmp	r3, #2
 800afe8:	dd34      	ble.n	800b054 <_dtoa_r+0x984>
 800afea:	9b03      	ldr	r3, [sp, #12]
 800afec:	9302      	str	r3, [sp, #8]
 800afee:	9b02      	ldr	r3, [sp, #8]
 800aff0:	b96b      	cbnz	r3, 800b00e <_dtoa_r+0x93e>
 800aff2:	4631      	mov	r1, r6
 800aff4:	2205      	movs	r2, #5
 800aff6:	4620      	mov	r0, r4
 800aff8:	f000 fd5a 	bl	800bab0 <__multadd>
 800affc:	4601      	mov	r1, r0
 800affe:	4606      	mov	r6, r0
 800b000:	ee18 0a10 	vmov	r0, s16
 800b004:	f000 ffbe 	bl	800bf84 <__mcmp>
 800b008:	2800      	cmp	r0, #0
 800b00a:	f73f adbb 	bgt.w	800ab84 <_dtoa_r+0x4b4>
 800b00e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b010:	9d01      	ldr	r5, [sp, #4]
 800b012:	43db      	mvns	r3, r3
 800b014:	9300      	str	r3, [sp, #0]
 800b016:	f04f 0800 	mov.w	r8, #0
 800b01a:	4631      	mov	r1, r6
 800b01c:	4620      	mov	r0, r4
 800b01e:	f000 fd25 	bl	800ba6c <_Bfree>
 800b022:	2f00      	cmp	r7, #0
 800b024:	f43f aea4 	beq.w	800ad70 <_dtoa_r+0x6a0>
 800b028:	f1b8 0f00 	cmp.w	r8, #0
 800b02c:	d005      	beq.n	800b03a <_dtoa_r+0x96a>
 800b02e:	45b8      	cmp	r8, r7
 800b030:	d003      	beq.n	800b03a <_dtoa_r+0x96a>
 800b032:	4641      	mov	r1, r8
 800b034:	4620      	mov	r0, r4
 800b036:	f000 fd19 	bl	800ba6c <_Bfree>
 800b03a:	4639      	mov	r1, r7
 800b03c:	4620      	mov	r0, r4
 800b03e:	f000 fd15 	bl	800ba6c <_Bfree>
 800b042:	e695      	b.n	800ad70 <_dtoa_r+0x6a0>
 800b044:	2600      	movs	r6, #0
 800b046:	4637      	mov	r7, r6
 800b048:	e7e1      	b.n	800b00e <_dtoa_r+0x93e>
 800b04a:	9700      	str	r7, [sp, #0]
 800b04c:	4637      	mov	r7, r6
 800b04e:	e599      	b.n	800ab84 <_dtoa_r+0x4b4>
 800b050:	40240000 	.word	0x40240000
 800b054:	9b08      	ldr	r3, [sp, #32]
 800b056:	2b00      	cmp	r3, #0
 800b058:	f000 80ca 	beq.w	800b1f0 <_dtoa_r+0xb20>
 800b05c:	9b03      	ldr	r3, [sp, #12]
 800b05e:	9302      	str	r3, [sp, #8]
 800b060:	2d00      	cmp	r5, #0
 800b062:	dd05      	ble.n	800b070 <_dtoa_r+0x9a0>
 800b064:	4639      	mov	r1, r7
 800b066:	462a      	mov	r2, r5
 800b068:	4620      	mov	r0, r4
 800b06a:	f000 ff1b 	bl	800bea4 <__lshift>
 800b06e:	4607      	mov	r7, r0
 800b070:	f1b8 0f00 	cmp.w	r8, #0
 800b074:	d05b      	beq.n	800b12e <_dtoa_r+0xa5e>
 800b076:	6879      	ldr	r1, [r7, #4]
 800b078:	4620      	mov	r0, r4
 800b07a:	f000 fcb7 	bl	800b9ec <_Balloc>
 800b07e:	4605      	mov	r5, r0
 800b080:	b928      	cbnz	r0, 800b08e <_dtoa_r+0x9be>
 800b082:	4b87      	ldr	r3, [pc, #540]	; (800b2a0 <_dtoa_r+0xbd0>)
 800b084:	4602      	mov	r2, r0
 800b086:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b08a:	f7ff bb3b 	b.w	800a704 <_dtoa_r+0x34>
 800b08e:	693a      	ldr	r2, [r7, #16]
 800b090:	3202      	adds	r2, #2
 800b092:	0092      	lsls	r2, r2, #2
 800b094:	f107 010c 	add.w	r1, r7, #12
 800b098:	300c      	adds	r0, #12
 800b09a:	f000 fc8d 	bl	800b9b8 <memcpy>
 800b09e:	2201      	movs	r2, #1
 800b0a0:	4629      	mov	r1, r5
 800b0a2:	4620      	mov	r0, r4
 800b0a4:	f000 fefe 	bl	800bea4 <__lshift>
 800b0a8:	9b01      	ldr	r3, [sp, #4]
 800b0aa:	f103 0901 	add.w	r9, r3, #1
 800b0ae:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b0b2:	4413      	add	r3, r2
 800b0b4:	9305      	str	r3, [sp, #20]
 800b0b6:	f00a 0301 	and.w	r3, sl, #1
 800b0ba:	46b8      	mov	r8, r7
 800b0bc:	9304      	str	r3, [sp, #16]
 800b0be:	4607      	mov	r7, r0
 800b0c0:	4631      	mov	r1, r6
 800b0c2:	ee18 0a10 	vmov	r0, s16
 800b0c6:	f7ff fa77 	bl	800a5b8 <quorem>
 800b0ca:	4641      	mov	r1, r8
 800b0cc:	9002      	str	r0, [sp, #8]
 800b0ce:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b0d2:	ee18 0a10 	vmov	r0, s16
 800b0d6:	f000 ff55 	bl	800bf84 <__mcmp>
 800b0da:	463a      	mov	r2, r7
 800b0dc:	9003      	str	r0, [sp, #12]
 800b0de:	4631      	mov	r1, r6
 800b0e0:	4620      	mov	r0, r4
 800b0e2:	f000 ff6b 	bl	800bfbc <__mdiff>
 800b0e6:	68c2      	ldr	r2, [r0, #12]
 800b0e8:	f109 3bff 	add.w	fp, r9, #4294967295
 800b0ec:	4605      	mov	r5, r0
 800b0ee:	bb02      	cbnz	r2, 800b132 <_dtoa_r+0xa62>
 800b0f0:	4601      	mov	r1, r0
 800b0f2:	ee18 0a10 	vmov	r0, s16
 800b0f6:	f000 ff45 	bl	800bf84 <__mcmp>
 800b0fa:	4602      	mov	r2, r0
 800b0fc:	4629      	mov	r1, r5
 800b0fe:	4620      	mov	r0, r4
 800b100:	9207      	str	r2, [sp, #28]
 800b102:	f000 fcb3 	bl	800ba6c <_Bfree>
 800b106:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b10a:	ea43 0102 	orr.w	r1, r3, r2
 800b10e:	9b04      	ldr	r3, [sp, #16]
 800b110:	430b      	orrs	r3, r1
 800b112:	464d      	mov	r5, r9
 800b114:	d10f      	bne.n	800b136 <_dtoa_r+0xa66>
 800b116:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b11a:	d02a      	beq.n	800b172 <_dtoa_r+0xaa2>
 800b11c:	9b03      	ldr	r3, [sp, #12]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	dd02      	ble.n	800b128 <_dtoa_r+0xa58>
 800b122:	9b02      	ldr	r3, [sp, #8]
 800b124:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b128:	f88b a000 	strb.w	sl, [fp]
 800b12c:	e775      	b.n	800b01a <_dtoa_r+0x94a>
 800b12e:	4638      	mov	r0, r7
 800b130:	e7ba      	b.n	800b0a8 <_dtoa_r+0x9d8>
 800b132:	2201      	movs	r2, #1
 800b134:	e7e2      	b.n	800b0fc <_dtoa_r+0xa2c>
 800b136:	9b03      	ldr	r3, [sp, #12]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	db04      	blt.n	800b146 <_dtoa_r+0xa76>
 800b13c:	9906      	ldr	r1, [sp, #24]
 800b13e:	430b      	orrs	r3, r1
 800b140:	9904      	ldr	r1, [sp, #16]
 800b142:	430b      	orrs	r3, r1
 800b144:	d122      	bne.n	800b18c <_dtoa_r+0xabc>
 800b146:	2a00      	cmp	r2, #0
 800b148:	ddee      	ble.n	800b128 <_dtoa_r+0xa58>
 800b14a:	ee18 1a10 	vmov	r1, s16
 800b14e:	2201      	movs	r2, #1
 800b150:	4620      	mov	r0, r4
 800b152:	f000 fea7 	bl	800bea4 <__lshift>
 800b156:	4631      	mov	r1, r6
 800b158:	ee08 0a10 	vmov	s16, r0
 800b15c:	f000 ff12 	bl	800bf84 <__mcmp>
 800b160:	2800      	cmp	r0, #0
 800b162:	dc03      	bgt.n	800b16c <_dtoa_r+0xa9c>
 800b164:	d1e0      	bne.n	800b128 <_dtoa_r+0xa58>
 800b166:	f01a 0f01 	tst.w	sl, #1
 800b16a:	d0dd      	beq.n	800b128 <_dtoa_r+0xa58>
 800b16c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b170:	d1d7      	bne.n	800b122 <_dtoa_r+0xa52>
 800b172:	2339      	movs	r3, #57	; 0x39
 800b174:	f88b 3000 	strb.w	r3, [fp]
 800b178:	462b      	mov	r3, r5
 800b17a:	461d      	mov	r5, r3
 800b17c:	3b01      	subs	r3, #1
 800b17e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b182:	2a39      	cmp	r2, #57	; 0x39
 800b184:	d071      	beq.n	800b26a <_dtoa_r+0xb9a>
 800b186:	3201      	adds	r2, #1
 800b188:	701a      	strb	r2, [r3, #0]
 800b18a:	e746      	b.n	800b01a <_dtoa_r+0x94a>
 800b18c:	2a00      	cmp	r2, #0
 800b18e:	dd07      	ble.n	800b1a0 <_dtoa_r+0xad0>
 800b190:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b194:	d0ed      	beq.n	800b172 <_dtoa_r+0xaa2>
 800b196:	f10a 0301 	add.w	r3, sl, #1
 800b19a:	f88b 3000 	strb.w	r3, [fp]
 800b19e:	e73c      	b.n	800b01a <_dtoa_r+0x94a>
 800b1a0:	9b05      	ldr	r3, [sp, #20]
 800b1a2:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b1a6:	4599      	cmp	r9, r3
 800b1a8:	d047      	beq.n	800b23a <_dtoa_r+0xb6a>
 800b1aa:	ee18 1a10 	vmov	r1, s16
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	220a      	movs	r2, #10
 800b1b2:	4620      	mov	r0, r4
 800b1b4:	f000 fc7c 	bl	800bab0 <__multadd>
 800b1b8:	45b8      	cmp	r8, r7
 800b1ba:	ee08 0a10 	vmov	s16, r0
 800b1be:	f04f 0300 	mov.w	r3, #0
 800b1c2:	f04f 020a 	mov.w	r2, #10
 800b1c6:	4641      	mov	r1, r8
 800b1c8:	4620      	mov	r0, r4
 800b1ca:	d106      	bne.n	800b1da <_dtoa_r+0xb0a>
 800b1cc:	f000 fc70 	bl	800bab0 <__multadd>
 800b1d0:	4680      	mov	r8, r0
 800b1d2:	4607      	mov	r7, r0
 800b1d4:	f109 0901 	add.w	r9, r9, #1
 800b1d8:	e772      	b.n	800b0c0 <_dtoa_r+0x9f0>
 800b1da:	f000 fc69 	bl	800bab0 <__multadd>
 800b1de:	4639      	mov	r1, r7
 800b1e0:	4680      	mov	r8, r0
 800b1e2:	2300      	movs	r3, #0
 800b1e4:	220a      	movs	r2, #10
 800b1e6:	4620      	mov	r0, r4
 800b1e8:	f000 fc62 	bl	800bab0 <__multadd>
 800b1ec:	4607      	mov	r7, r0
 800b1ee:	e7f1      	b.n	800b1d4 <_dtoa_r+0xb04>
 800b1f0:	9b03      	ldr	r3, [sp, #12]
 800b1f2:	9302      	str	r3, [sp, #8]
 800b1f4:	9d01      	ldr	r5, [sp, #4]
 800b1f6:	ee18 0a10 	vmov	r0, s16
 800b1fa:	4631      	mov	r1, r6
 800b1fc:	f7ff f9dc 	bl	800a5b8 <quorem>
 800b200:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b204:	9b01      	ldr	r3, [sp, #4]
 800b206:	f805 ab01 	strb.w	sl, [r5], #1
 800b20a:	1aea      	subs	r2, r5, r3
 800b20c:	9b02      	ldr	r3, [sp, #8]
 800b20e:	4293      	cmp	r3, r2
 800b210:	dd09      	ble.n	800b226 <_dtoa_r+0xb56>
 800b212:	ee18 1a10 	vmov	r1, s16
 800b216:	2300      	movs	r3, #0
 800b218:	220a      	movs	r2, #10
 800b21a:	4620      	mov	r0, r4
 800b21c:	f000 fc48 	bl	800bab0 <__multadd>
 800b220:	ee08 0a10 	vmov	s16, r0
 800b224:	e7e7      	b.n	800b1f6 <_dtoa_r+0xb26>
 800b226:	9b02      	ldr	r3, [sp, #8]
 800b228:	2b00      	cmp	r3, #0
 800b22a:	bfc8      	it	gt
 800b22c:	461d      	movgt	r5, r3
 800b22e:	9b01      	ldr	r3, [sp, #4]
 800b230:	bfd8      	it	le
 800b232:	2501      	movle	r5, #1
 800b234:	441d      	add	r5, r3
 800b236:	f04f 0800 	mov.w	r8, #0
 800b23a:	ee18 1a10 	vmov	r1, s16
 800b23e:	2201      	movs	r2, #1
 800b240:	4620      	mov	r0, r4
 800b242:	f000 fe2f 	bl	800bea4 <__lshift>
 800b246:	4631      	mov	r1, r6
 800b248:	ee08 0a10 	vmov	s16, r0
 800b24c:	f000 fe9a 	bl	800bf84 <__mcmp>
 800b250:	2800      	cmp	r0, #0
 800b252:	dc91      	bgt.n	800b178 <_dtoa_r+0xaa8>
 800b254:	d102      	bne.n	800b25c <_dtoa_r+0xb8c>
 800b256:	f01a 0f01 	tst.w	sl, #1
 800b25a:	d18d      	bne.n	800b178 <_dtoa_r+0xaa8>
 800b25c:	462b      	mov	r3, r5
 800b25e:	461d      	mov	r5, r3
 800b260:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b264:	2a30      	cmp	r2, #48	; 0x30
 800b266:	d0fa      	beq.n	800b25e <_dtoa_r+0xb8e>
 800b268:	e6d7      	b.n	800b01a <_dtoa_r+0x94a>
 800b26a:	9a01      	ldr	r2, [sp, #4]
 800b26c:	429a      	cmp	r2, r3
 800b26e:	d184      	bne.n	800b17a <_dtoa_r+0xaaa>
 800b270:	9b00      	ldr	r3, [sp, #0]
 800b272:	3301      	adds	r3, #1
 800b274:	9300      	str	r3, [sp, #0]
 800b276:	2331      	movs	r3, #49	; 0x31
 800b278:	7013      	strb	r3, [r2, #0]
 800b27a:	e6ce      	b.n	800b01a <_dtoa_r+0x94a>
 800b27c:	4b09      	ldr	r3, [pc, #36]	; (800b2a4 <_dtoa_r+0xbd4>)
 800b27e:	f7ff ba95 	b.w	800a7ac <_dtoa_r+0xdc>
 800b282:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b284:	2b00      	cmp	r3, #0
 800b286:	f47f aa6e 	bne.w	800a766 <_dtoa_r+0x96>
 800b28a:	4b07      	ldr	r3, [pc, #28]	; (800b2a8 <_dtoa_r+0xbd8>)
 800b28c:	f7ff ba8e 	b.w	800a7ac <_dtoa_r+0xdc>
 800b290:	9b02      	ldr	r3, [sp, #8]
 800b292:	2b00      	cmp	r3, #0
 800b294:	dcae      	bgt.n	800b1f4 <_dtoa_r+0xb24>
 800b296:	9b06      	ldr	r3, [sp, #24]
 800b298:	2b02      	cmp	r3, #2
 800b29a:	f73f aea8 	bgt.w	800afee <_dtoa_r+0x91e>
 800b29e:	e7a9      	b.n	800b1f4 <_dtoa_r+0xb24>
 800b2a0:	0800d480 	.word	0x0800d480
 800b2a4:	0800d280 	.word	0x0800d280
 800b2a8:	0800d401 	.word	0x0800d401

0800b2ac <rshift>:
 800b2ac:	6903      	ldr	r3, [r0, #16]
 800b2ae:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800b2b2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b2b6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800b2ba:	f100 0414 	add.w	r4, r0, #20
 800b2be:	dd45      	ble.n	800b34c <rshift+0xa0>
 800b2c0:	f011 011f 	ands.w	r1, r1, #31
 800b2c4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800b2c8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800b2cc:	d10c      	bne.n	800b2e8 <rshift+0x3c>
 800b2ce:	f100 0710 	add.w	r7, r0, #16
 800b2d2:	4629      	mov	r1, r5
 800b2d4:	42b1      	cmp	r1, r6
 800b2d6:	d334      	bcc.n	800b342 <rshift+0x96>
 800b2d8:	1a9b      	subs	r3, r3, r2
 800b2da:	009b      	lsls	r3, r3, #2
 800b2dc:	1eea      	subs	r2, r5, #3
 800b2de:	4296      	cmp	r6, r2
 800b2e0:	bf38      	it	cc
 800b2e2:	2300      	movcc	r3, #0
 800b2e4:	4423      	add	r3, r4
 800b2e6:	e015      	b.n	800b314 <rshift+0x68>
 800b2e8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800b2ec:	f1c1 0820 	rsb	r8, r1, #32
 800b2f0:	40cf      	lsrs	r7, r1
 800b2f2:	f105 0e04 	add.w	lr, r5, #4
 800b2f6:	46a1      	mov	r9, r4
 800b2f8:	4576      	cmp	r6, lr
 800b2fa:	46f4      	mov	ip, lr
 800b2fc:	d815      	bhi.n	800b32a <rshift+0x7e>
 800b2fe:	1a9a      	subs	r2, r3, r2
 800b300:	0092      	lsls	r2, r2, #2
 800b302:	3a04      	subs	r2, #4
 800b304:	3501      	adds	r5, #1
 800b306:	42ae      	cmp	r6, r5
 800b308:	bf38      	it	cc
 800b30a:	2200      	movcc	r2, #0
 800b30c:	18a3      	adds	r3, r4, r2
 800b30e:	50a7      	str	r7, [r4, r2]
 800b310:	b107      	cbz	r7, 800b314 <rshift+0x68>
 800b312:	3304      	adds	r3, #4
 800b314:	1b1a      	subs	r2, r3, r4
 800b316:	42a3      	cmp	r3, r4
 800b318:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800b31c:	bf08      	it	eq
 800b31e:	2300      	moveq	r3, #0
 800b320:	6102      	str	r2, [r0, #16]
 800b322:	bf08      	it	eq
 800b324:	6143      	streq	r3, [r0, #20]
 800b326:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b32a:	f8dc c000 	ldr.w	ip, [ip]
 800b32e:	fa0c fc08 	lsl.w	ip, ip, r8
 800b332:	ea4c 0707 	orr.w	r7, ip, r7
 800b336:	f849 7b04 	str.w	r7, [r9], #4
 800b33a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b33e:	40cf      	lsrs	r7, r1
 800b340:	e7da      	b.n	800b2f8 <rshift+0x4c>
 800b342:	f851 cb04 	ldr.w	ip, [r1], #4
 800b346:	f847 cf04 	str.w	ip, [r7, #4]!
 800b34a:	e7c3      	b.n	800b2d4 <rshift+0x28>
 800b34c:	4623      	mov	r3, r4
 800b34e:	e7e1      	b.n	800b314 <rshift+0x68>

0800b350 <__hexdig_fun>:
 800b350:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800b354:	2b09      	cmp	r3, #9
 800b356:	d802      	bhi.n	800b35e <__hexdig_fun+0xe>
 800b358:	3820      	subs	r0, #32
 800b35a:	b2c0      	uxtb	r0, r0
 800b35c:	4770      	bx	lr
 800b35e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800b362:	2b05      	cmp	r3, #5
 800b364:	d801      	bhi.n	800b36a <__hexdig_fun+0x1a>
 800b366:	3847      	subs	r0, #71	; 0x47
 800b368:	e7f7      	b.n	800b35a <__hexdig_fun+0xa>
 800b36a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800b36e:	2b05      	cmp	r3, #5
 800b370:	d801      	bhi.n	800b376 <__hexdig_fun+0x26>
 800b372:	3827      	subs	r0, #39	; 0x27
 800b374:	e7f1      	b.n	800b35a <__hexdig_fun+0xa>
 800b376:	2000      	movs	r0, #0
 800b378:	4770      	bx	lr
	...

0800b37c <__gethex>:
 800b37c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b380:	ed2d 8b02 	vpush	{d8}
 800b384:	b089      	sub	sp, #36	; 0x24
 800b386:	ee08 0a10 	vmov	s16, r0
 800b38a:	9304      	str	r3, [sp, #16]
 800b38c:	4bb4      	ldr	r3, [pc, #720]	; (800b660 <__gethex+0x2e4>)
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	9301      	str	r3, [sp, #4]
 800b392:	4618      	mov	r0, r3
 800b394:	468b      	mov	fp, r1
 800b396:	4690      	mov	r8, r2
 800b398:	f7f4 ff1a 	bl	80001d0 <strlen>
 800b39c:	9b01      	ldr	r3, [sp, #4]
 800b39e:	f8db 2000 	ldr.w	r2, [fp]
 800b3a2:	4403      	add	r3, r0
 800b3a4:	4682      	mov	sl, r0
 800b3a6:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800b3aa:	9305      	str	r3, [sp, #20]
 800b3ac:	1c93      	adds	r3, r2, #2
 800b3ae:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800b3b2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800b3b6:	32fe      	adds	r2, #254	; 0xfe
 800b3b8:	18d1      	adds	r1, r2, r3
 800b3ba:	461f      	mov	r7, r3
 800b3bc:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b3c0:	9100      	str	r1, [sp, #0]
 800b3c2:	2830      	cmp	r0, #48	; 0x30
 800b3c4:	d0f8      	beq.n	800b3b8 <__gethex+0x3c>
 800b3c6:	f7ff ffc3 	bl	800b350 <__hexdig_fun>
 800b3ca:	4604      	mov	r4, r0
 800b3cc:	2800      	cmp	r0, #0
 800b3ce:	d13a      	bne.n	800b446 <__gethex+0xca>
 800b3d0:	9901      	ldr	r1, [sp, #4]
 800b3d2:	4652      	mov	r2, sl
 800b3d4:	4638      	mov	r0, r7
 800b3d6:	f001 f943 	bl	800c660 <strncmp>
 800b3da:	4605      	mov	r5, r0
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d168      	bne.n	800b4b2 <__gethex+0x136>
 800b3e0:	f817 000a 	ldrb.w	r0, [r7, sl]
 800b3e4:	eb07 060a 	add.w	r6, r7, sl
 800b3e8:	f7ff ffb2 	bl	800b350 <__hexdig_fun>
 800b3ec:	2800      	cmp	r0, #0
 800b3ee:	d062      	beq.n	800b4b6 <__gethex+0x13a>
 800b3f0:	4633      	mov	r3, r6
 800b3f2:	7818      	ldrb	r0, [r3, #0]
 800b3f4:	2830      	cmp	r0, #48	; 0x30
 800b3f6:	461f      	mov	r7, r3
 800b3f8:	f103 0301 	add.w	r3, r3, #1
 800b3fc:	d0f9      	beq.n	800b3f2 <__gethex+0x76>
 800b3fe:	f7ff ffa7 	bl	800b350 <__hexdig_fun>
 800b402:	2301      	movs	r3, #1
 800b404:	fab0 f480 	clz	r4, r0
 800b408:	0964      	lsrs	r4, r4, #5
 800b40a:	4635      	mov	r5, r6
 800b40c:	9300      	str	r3, [sp, #0]
 800b40e:	463a      	mov	r2, r7
 800b410:	4616      	mov	r6, r2
 800b412:	3201      	adds	r2, #1
 800b414:	7830      	ldrb	r0, [r6, #0]
 800b416:	f7ff ff9b 	bl	800b350 <__hexdig_fun>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	d1f8      	bne.n	800b410 <__gethex+0x94>
 800b41e:	9901      	ldr	r1, [sp, #4]
 800b420:	4652      	mov	r2, sl
 800b422:	4630      	mov	r0, r6
 800b424:	f001 f91c 	bl	800c660 <strncmp>
 800b428:	b980      	cbnz	r0, 800b44c <__gethex+0xd0>
 800b42a:	b94d      	cbnz	r5, 800b440 <__gethex+0xc4>
 800b42c:	eb06 050a 	add.w	r5, r6, sl
 800b430:	462a      	mov	r2, r5
 800b432:	4616      	mov	r6, r2
 800b434:	3201      	adds	r2, #1
 800b436:	7830      	ldrb	r0, [r6, #0]
 800b438:	f7ff ff8a 	bl	800b350 <__hexdig_fun>
 800b43c:	2800      	cmp	r0, #0
 800b43e:	d1f8      	bne.n	800b432 <__gethex+0xb6>
 800b440:	1bad      	subs	r5, r5, r6
 800b442:	00ad      	lsls	r5, r5, #2
 800b444:	e004      	b.n	800b450 <__gethex+0xd4>
 800b446:	2400      	movs	r4, #0
 800b448:	4625      	mov	r5, r4
 800b44a:	e7e0      	b.n	800b40e <__gethex+0x92>
 800b44c:	2d00      	cmp	r5, #0
 800b44e:	d1f7      	bne.n	800b440 <__gethex+0xc4>
 800b450:	7833      	ldrb	r3, [r6, #0]
 800b452:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b456:	2b50      	cmp	r3, #80	; 0x50
 800b458:	d13b      	bne.n	800b4d2 <__gethex+0x156>
 800b45a:	7873      	ldrb	r3, [r6, #1]
 800b45c:	2b2b      	cmp	r3, #43	; 0x2b
 800b45e:	d02c      	beq.n	800b4ba <__gethex+0x13e>
 800b460:	2b2d      	cmp	r3, #45	; 0x2d
 800b462:	d02e      	beq.n	800b4c2 <__gethex+0x146>
 800b464:	1c71      	adds	r1, r6, #1
 800b466:	f04f 0900 	mov.w	r9, #0
 800b46a:	7808      	ldrb	r0, [r1, #0]
 800b46c:	f7ff ff70 	bl	800b350 <__hexdig_fun>
 800b470:	1e43      	subs	r3, r0, #1
 800b472:	b2db      	uxtb	r3, r3
 800b474:	2b18      	cmp	r3, #24
 800b476:	d82c      	bhi.n	800b4d2 <__gethex+0x156>
 800b478:	f1a0 0210 	sub.w	r2, r0, #16
 800b47c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800b480:	f7ff ff66 	bl	800b350 <__hexdig_fun>
 800b484:	1e43      	subs	r3, r0, #1
 800b486:	b2db      	uxtb	r3, r3
 800b488:	2b18      	cmp	r3, #24
 800b48a:	d91d      	bls.n	800b4c8 <__gethex+0x14c>
 800b48c:	f1b9 0f00 	cmp.w	r9, #0
 800b490:	d000      	beq.n	800b494 <__gethex+0x118>
 800b492:	4252      	negs	r2, r2
 800b494:	4415      	add	r5, r2
 800b496:	f8cb 1000 	str.w	r1, [fp]
 800b49a:	b1e4      	cbz	r4, 800b4d6 <__gethex+0x15a>
 800b49c:	9b00      	ldr	r3, [sp, #0]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	bf14      	ite	ne
 800b4a2:	2700      	movne	r7, #0
 800b4a4:	2706      	moveq	r7, #6
 800b4a6:	4638      	mov	r0, r7
 800b4a8:	b009      	add	sp, #36	; 0x24
 800b4aa:	ecbd 8b02 	vpop	{d8}
 800b4ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4b2:	463e      	mov	r6, r7
 800b4b4:	4625      	mov	r5, r4
 800b4b6:	2401      	movs	r4, #1
 800b4b8:	e7ca      	b.n	800b450 <__gethex+0xd4>
 800b4ba:	f04f 0900 	mov.w	r9, #0
 800b4be:	1cb1      	adds	r1, r6, #2
 800b4c0:	e7d3      	b.n	800b46a <__gethex+0xee>
 800b4c2:	f04f 0901 	mov.w	r9, #1
 800b4c6:	e7fa      	b.n	800b4be <__gethex+0x142>
 800b4c8:	230a      	movs	r3, #10
 800b4ca:	fb03 0202 	mla	r2, r3, r2, r0
 800b4ce:	3a10      	subs	r2, #16
 800b4d0:	e7d4      	b.n	800b47c <__gethex+0x100>
 800b4d2:	4631      	mov	r1, r6
 800b4d4:	e7df      	b.n	800b496 <__gethex+0x11a>
 800b4d6:	1bf3      	subs	r3, r6, r7
 800b4d8:	3b01      	subs	r3, #1
 800b4da:	4621      	mov	r1, r4
 800b4dc:	2b07      	cmp	r3, #7
 800b4de:	dc0b      	bgt.n	800b4f8 <__gethex+0x17c>
 800b4e0:	ee18 0a10 	vmov	r0, s16
 800b4e4:	f000 fa82 	bl	800b9ec <_Balloc>
 800b4e8:	4604      	mov	r4, r0
 800b4ea:	b940      	cbnz	r0, 800b4fe <__gethex+0x182>
 800b4ec:	4b5d      	ldr	r3, [pc, #372]	; (800b664 <__gethex+0x2e8>)
 800b4ee:	4602      	mov	r2, r0
 800b4f0:	21de      	movs	r1, #222	; 0xde
 800b4f2:	485d      	ldr	r0, [pc, #372]	; (800b668 <__gethex+0x2ec>)
 800b4f4:	f001 f8d6 	bl	800c6a4 <__assert_func>
 800b4f8:	3101      	adds	r1, #1
 800b4fa:	105b      	asrs	r3, r3, #1
 800b4fc:	e7ee      	b.n	800b4dc <__gethex+0x160>
 800b4fe:	f100 0914 	add.w	r9, r0, #20
 800b502:	f04f 0b00 	mov.w	fp, #0
 800b506:	f1ca 0301 	rsb	r3, sl, #1
 800b50a:	f8cd 9008 	str.w	r9, [sp, #8]
 800b50e:	f8cd b000 	str.w	fp, [sp]
 800b512:	9306      	str	r3, [sp, #24]
 800b514:	42b7      	cmp	r7, r6
 800b516:	d340      	bcc.n	800b59a <__gethex+0x21e>
 800b518:	9802      	ldr	r0, [sp, #8]
 800b51a:	9b00      	ldr	r3, [sp, #0]
 800b51c:	f840 3b04 	str.w	r3, [r0], #4
 800b520:	eba0 0009 	sub.w	r0, r0, r9
 800b524:	1080      	asrs	r0, r0, #2
 800b526:	0146      	lsls	r6, r0, #5
 800b528:	6120      	str	r0, [r4, #16]
 800b52a:	4618      	mov	r0, r3
 800b52c:	f000 fb50 	bl	800bbd0 <__hi0bits>
 800b530:	1a30      	subs	r0, r6, r0
 800b532:	f8d8 6000 	ldr.w	r6, [r8]
 800b536:	42b0      	cmp	r0, r6
 800b538:	dd63      	ble.n	800b602 <__gethex+0x286>
 800b53a:	1b87      	subs	r7, r0, r6
 800b53c:	4639      	mov	r1, r7
 800b53e:	4620      	mov	r0, r4
 800b540:	f000 fef4 	bl	800c32c <__any_on>
 800b544:	4682      	mov	sl, r0
 800b546:	b1a8      	cbz	r0, 800b574 <__gethex+0x1f8>
 800b548:	1e7b      	subs	r3, r7, #1
 800b54a:	1159      	asrs	r1, r3, #5
 800b54c:	f003 021f 	and.w	r2, r3, #31
 800b550:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800b554:	f04f 0a01 	mov.w	sl, #1
 800b558:	fa0a f202 	lsl.w	r2, sl, r2
 800b55c:	420a      	tst	r2, r1
 800b55e:	d009      	beq.n	800b574 <__gethex+0x1f8>
 800b560:	4553      	cmp	r3, sl
 800b562:	dd05      	ble.n	800b570 <__gethex+0x1f4>
 800b564:	1eb9      	subs	r1, r7, #2
 800b566:	4620      	mov	r0, r4
 800b568:	f000 fee0 	bl	800c32c <__any_on>
 800b56c:	2800      	cmp	r0, #0
 800b56e:	d145      	bne.n	800b5fc <__gethex+0x280>
 800b570:	f04f 0a02 	mov.w	sl, #2
 800b574:	4639      	mov	r1, r7
 800b576:	4620      	mov	r0, r4
 800b578:	f7ff fe98 	bl	800b2ac <rshift>
 800b57c:	443d      	add	r5, r7
 800b57e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b582:	42ab      	cmp	r3, r5
 800b584:	da4c      	bge.n	800b620 <__gethex+0x2a4>
 800b586:	ee18 0a10 	vmov	r0, s16
 800b58a:	4621      	mov	r1, r4
 800b58c:	f000 fa6e 	bl	800ba6c <_Bfree>
 800b590:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b592:	2300      	movs	r3, #0
 800b594:	6013      	str	r3, [r2, #0]
 800b596:	27a3      	movs	r7, #163	; 0xa3
 800b598:	e785      	b.n	800b4a6 <__gethex+0x12a>
 800b59a:	1e73      	subs	r3, r6, #1
 800b59c:	9a05      	ldr	r2, [sp, #20]
 800b59e:	9303      	str	r3, [sp, #12]
 800b5a0:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800b5a4:	4293      	cmp	r3, r2
 800b5a6:	d019      	beq.n	800b5dc <__gethex+0x260>
 800b5a8:	f1bb 0f20 	cmp.w	fp, #32
 800b5ac:	d107      	bne.n	800b5be <__gethex+0x242>
 800b5ae:	9b02      	ldr	r3, [sp, #8]
 800b5b0:	9a00      	ldr	r2, [sp, #0]
 800b5b2:	f843 2b04 	str.w	r2, [r3], #4
 800b5b6:	9302      	str	r3, [sp, #8]
 800b5b8:	2300      	movs	r3, #0
 800b5ba:	9300      	str	r3, [sp, #0]
 800b5bc:	469b      	mov	fp, r3
 800b5be:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800b5c2:	f7ff fec5 	bl	800b350 <__hexdig_fun>
 800b5c6:	9b00      	ldr	r3, [sp, #0]
 800b5c8:	f000 000f 	and.w	r0, r0, #15
 800b5cc:	fa00 f00b 	lsl.w	r0, r0, fp
 800b5d0:	4303      	orrs	r3, r0
 800b5d2:	9300      	str	r3, [sp, #0]
 800b5d4:	f10b 0b04 	add.w	fp, fp, #4
 800b5d8:	9b03      	ldr	r3, [sp, #12]
 800b5da:	e00d      	b.n	800b5f8 <__gethex+0x27c>
 800b5dc:	9b03      	ldr	r3, [sp, #12]
 800b5de:	9a06      	ldr	r2, [sp, #24]
 800b5e0:	4413      	add	r3, r2
 800b5e2:	42bb      	cmp	r3, r7
 800b5e4:	d3e0      	bcc.n	800b5a8 <__gethex+0x22c>
 800b5e6:	4618      	mov	r0, r3
 800b5e8:	9901      	ldr	r1, [sp, #4]
 800b5ea:	9307      	str	r3, [sp, #28]
 800b5ec:	4652      	mov	r2, sl
 800b5ee:	f001 f837 	bl	800c660 <strncmp>
 800b5f2:	9b07      	ldr	r3, [sp, #28]
 800b5f4:	2800      	cmp	r0, #0
 800b5f6:	d1d7      	bne.n	800b5a8 <__gethex+0x22c>
 800b5f8:	461e      	mov	r6, r3
 800b5fa:	e78b      	b.n	800b514 <__gethex+0x198>
 800b5fc:	f04f 0a03 	mov.w	sl, #3
 800b600:	e7b8      	b.n	800b574 <__gethex+0x1f8>
 800b602:	da0a      	bge.n	800b61a <__gethex+0x29e>
 800b604:	1a37      	subs	r7, r6, r0
 800b606:	4621      	mov	r1, r4
 800b608:	ee18 0a10 	vmov	r0, s16
 800b60c:	463a      	mov	r2, r7
 800b60e:	f000 fc49 	bl	800bea4 <__lshift>
 800b612:	1bed      	subs	r5, r5, r7
 800b614:	4604      	mov	r4, r0
 800b616:	f100 0914 	add.w	r9, r0, #20
 800b61a:	f04f 0a00 	mov.w	sl, #0
 800b61e:	e7ae      	b.n	800b57e <__gethex+0x202>
 800b620:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800b624:	42a8      	cmp	r0, r5
 800b626:	dd72      	ble.n	800b70e <__gethex+0x392>
 800b628:	1b45      	subs	r5, r0, r5
 800b62a:	42ae      	cmp	r6, r5
 800b62c:	dc36      	bgt.n	800b69c <__gethex+0x320>
 800b62e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b632:	2b02      	cmp	r3, #2
 800b634:	d02a      	beq.n	800b68c <__gethex+0x310>
 800b636:	2b03      	cmp	r3, #3
 800b638:	d02c      	beq.n	800b694 <__gethex+0x318>
 800b63a:	2b01      	cmp	r3, #1
 800b63c:	d11c      	bne.n	800b678 <__gethex+0x2fc>
 800b63e:	42ae      	cmp	r6, r5
 800b640:	d11a      	bne.n	800b678 <__gethex+0x2fc>
 800b642:	2e01      	cmp	r6, #1
 800b644:	d112      	bne.n	800b66c <__gethex+0x2f0>
 800b646:	9a04      	ldr	r2, [sp, #16]
 800b648:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800b64c:	6013      	str	r3, [r2, #0]
 800b64e:	2301      	movs	r3, #1
 800b650:	6123      	str	r3, [r4, #16]
 800b652:	f8c9 3000 	str.w	r3, [r9]
 800b656:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b658:	2762      	movs	r7, #98	; 0x62
 800b65a:	601c      	str	r4, [r3, #0]
 800b65c:	e723      	b.n	800b4a6 <__gethex+0x12a>
 800b65e:	bf00      	nop
 800b660:	0800d4f8 	.word	0x0800d4f8
 800b664:	0800d480 	.word	0x0800d480
 800b668:	0800d491 	.word	0x0800d491
 800b66c:	1e71      	subs	r1, r6, #1
 800b66e:	4620      	mov	r0, r4
 800b670:	f000 fe5c 	bl	800c32c <__any_on>
 800b674:	2800      	cmp	r0, #0
 800b676:	d1e6      	bne.n	800b646 <__gethex+0x2ca>
 800b678:	ee18 0a10 	vmov	r0, s16
 800b67c:	4621      	mov	r1, r4
 800b67e:	f000 f9f5 	bl	800ba6c <_Bfree>
 800b682:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800b684:	2300      	movs	r3, #0
 800b686:	6013      	str	r3, [r2, #0]
 800b688:	2750      	movs	r7, #80	; 0x50
 800b68a:	e70c      	b.n	800b4a6 <__gethex+0x12a>
 800b68c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d1f2      	bne.n	800b678 <__gethex+0x2fc>
 800b692:	e7d8      	b.n	800b646 <__gethex+0x2ca>
 800b694:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b696:	2b00      	cmp	r3, #0
 800b698:	d1d5      	bne.n	800b646 <__gethex+0x2ca>
 800b69a:	e7ed      	b.n	800b678 <__gethex+0x2fc>
 800b69c:	1e6f      	subs	r7, r5, #1
 800b69e:	f1ba 0f00 	cmp.w	sl, #0
 800b6a2:	d131      	bne.n	800b708 <__gethex+0x38c>
 800b6a4:	b127      	cbz	r7, 800b6b0 <__gethex+0x334>
 800b6a6:	4639      	mov	r1, r7
 800b6a8:	4620      	mov	r0, r4
 800b6aa:	f000 fe3f 	bl	800c32c <__any_on>
 800b6ae:	4682      	mov	sl, r0
 800b6b0:	117b      	asrs	r3, r7, #5
 800b6b2:	2101      	movs	r1, #1
 800b6b4:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800b6b8:	f007 071f 	and.w	r7, r7, #31
 800b6bc:	fa01 f707 	lsl.w	r7, r1, r7
 800b6c0:	421f      	tst	r7, r3
 800b6c2:	4629      	mov	r1, r5
 800b6c4:	4620      	mov	r0, r4
 800b6c6:	bf18      	it	ne
 800b6c8:	f04a 0a02 	orrne.w	sl, sl, #2
 800b6cc:	1b76      	subs	r6, r6, r5
 800b6ce:	f7ff fded 	bl	800b2ac <rshift>
 800b6d2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800b6d6:	2702      	movs	r7, #2
 800b6d8:	f1ba 0f00 	cmp.w	sl, #0
 800b6dc:	d048      	beq.n	800b770 <__gethex+0x3f4>
 800b6de:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b6e2:	2b02      	cmp	r3, #2
 800b6e4:	d015      	beq.n	800b712 <__gethex+0x396>
 800b6e6:	2b03      	cmp	r3, #3
 800b6e8:	d017      	beq.n	800b71a <__gethex+0x39e>
 800b6ea:	2b01      	cmp	r3, #1
 800b6ec:	d109      	bne.n	800b702 <__gethex+0x386>
 800b6ee:	f01a 0f02 	tst.w	sl, #2
 800b6f2:	d006      	beq.n	800b702 <__gethex+0x386>
 800b6f4:	f8d9 0000 	ldr.w	r0, [r9]
 800b6f8:	ea4a 0a00 	orr.w	sl, sl, r0
 800b6fc:	f01a 0f01 	tst.w	sl, #1
 800b700:	d10e      	bne.n	800b720 <__gethex+0x3a4>
 800b702:	f047 0710 	orr.w	r7, r7, #16
 800b706:	e033      	b.n	800b770 <__gethex+0x3f4>
 800b708:	f04f 0a01 	mov.w	sl, #1
 800b70c:	e7d0      	b.n	800b6b0 <__gethex+0x334>
 800b70e:	2701      	movs	r7, #1
 800b710:	e7e2      	b.n	800b6d8 <__gethex+0x35c>
 800b712:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b714:	f1c3 0301 	rsb	r3, r3, #1
 800b718:	9315      	str	r3, [sp, #84]	; 0x54
 800b71a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d0f0      	beq.n	800b702 <__gethex+0x386>
 800b720:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b724:	f104 0314 	add.w	r3, r4, #20
 800b728:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b72c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b730:	f04f 0c00 	mov.w	ip, #0
 800b734:	4618      	mov	r0, r3
 800b736:	f853 2b04 	ldr.w	r2, [r3], #4
 800b73a:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b73e:	d01c      	beq.n	800b77a <__gethex+0x3fe>
 800b740:	3201      	adds	r2, #1
 800b742:	6002      	str	r2, [r0, #0]
 800b744:	2f02      	cmp	r7, #2
 800b746:	f104 0314 	add.w	r3, r4, #20
 800b74a:	d13f      	bne.n	800b7cc <__gethex+0x450>
 800b74c:	f8d8 2000 	ldr.w	r2, [r8]
 800b750:	3a01      	subs	r2, #1
 800b752:	42b2      	cmp	r2, r6
 800b754:	d10a      	bne.n	800b76c <__gethex+0x3f0>
 800b756:	1171      	asrs	r1, r6, #5
 800b758:	2201      	movs	r2, #1
 800b75a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b75e:	f006 061f 	and.w	r6, r6, #31
 800b762:	fa02 f606 	lsl.w	r6, r2, r6
 800b766:	421e      	tst	r6, r3
 800b768:	bf18      	it	ne
 800b76a:	4617      	movne	r7, r2
 800b76c:	f047 0720 	orr.w	r7, r7, #32
 800b770:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800b772:	601c      	str	r4, [r3, #0]
 800b774:	9b04      	ldr	r3, [sp, #16]
 800b776:	601d      	str	r5, [r3, #0]
 800b778:	e695      	b.n	800b4a6 <__gethex+0x12a>
 800b77a:	4299      	cmp	r1, r3
 800b77c:	f843 cc04 	str.w	ip, [r3, #-4]
 800b780:	d8d8      	bhi.n	800b734 <__gethex+0x3b8>
 800b782:	68a3      	ldr	r3, [r4, #8]
 800b784:	459b      	cmp	fp, r3
 800b786:	db19      	blt.n	800b7bc <__gethex+0x440>
 800b788:	6861      	ldr	r1, [r4, #4]
 800b78a:	ee18 0a10 	vmov	r0, s16
 800b78e:	3101      	adds	r1, #1
 800b790:	f000 f92c 	bl	800b9ec <_Balloc>
 800b794:	4681      	mov	r9, r0
 800b796:	b918      	cbnz	r0, 800b7a0 <__gethex+0x424>
 800b798:	4b1a      	ldr	r3, [pc, #104]	; (800b804 <__gethex+0x488>)
 800b79a:	4602      	mov	r2, r0
 800b79c:	2184      	movs	r1, #132	; 0x84
 800b79e:	e6a8      	b.n	800b4f2 <__gethex+0x176>
 800b7a0:	6922      	ldr	r2, [r4, #16]
 800b7a2:	3202      	adds	r2, #2
 800b7a4:	f104 010c 	add.w	r1, r4, #12
 800b7a8:	0092      	lsls	r2, r2, #2
 800b7aa:	300c      	adds	r0, #12
 800b7ac:	f000 f904 	bl	800b9b8 <memcpy>
 800b7b0:	4621      	mov	r1, r4
 800b7b2:	ee18 0a10 	vmov	r0, s16
 800b7b6:	f000 f959 	bl	800ba6c <_Bfree>
 800b7ba:	464c      	mov	r4, r9
 800b7bc:	6923      	ldr	r3, [r4, #16]
 800b7be:	1c5a      	adds	r2, r3, #1
 800b7c0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b7c4:	6122      	str	r2, [r4, #16]
 800b7c6:	2201      	movs	r2, #1
 800b7c8:	615a      	str	r2, [r3, #20]
 800b7ca:	e7bb      	b.n	800b744 <__gethex+0x3c8>
 800b7cc:	6922      	ldr	r2, [r4, #16]
 800b7ce:	455a      	cmp	r2, fp
 800b7d0:	dd0b      	ble.n	800b7ea <__gethex+0x46e>
 800b7d2:	2101      	movs	r1, #1
 800b7d4:	4620      	mov	r0, r4
 800b7d6:	f7ff fd69 	bl	800b2ac <rshift>
 800b7da:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b7de:	3501      	adds	r5, #1
 800b7e0:	42ab      	cmp	r3, r5
 800b7e2:	f6ff aed0 	blt.w	800b586 <__gethex+0x20a>
 800b7e6:	2701      	movs	r7, #1
 800b7e8:	e7c0      	b.n	800b76c <__gethex+0x3f0>
 800b7ea:	f016 061f 	ands.w	r6, r6, #31
 800b7ee:	d0fa      	beq.n	800b7e6 <__gethex+0x46a>
 800b7f0:	4453      	add	r3, sl
 800b7f2:	f1c6 0620 	rsb	r6, r6, #32
 800b7f6:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b7fa:	f000 f9e9 	bl	800bbd0 <__hi0bits>
 800b7fe:	42b0      	cmp	r0, r6
 800b800:	dbe7      	blt.n	800b7d2 <__gethex+0x456>
 800b802:	e7f0      	b.n	800b7e6 <__gethex+0x46a>
 800b804:	0800d480 	.word	0x0800d480

0800b808 <L_shift>:
 800b808:	f1c2 0208 	rsb	r2, r2, #8
 800b80c:	0092      	lsls	r2, r2, #2
 800b80e:	b570      	push	{r4, r5, r6, lr}
 800b810:	f1c2 0620 	rsb	r6, r2, #32
 800b814:	6843      	ldr	r3, [r0, #4]
 800b816:	6804      	ldr	r4, [r0, #0]
 800b818:	fa03 f506 	lsl.w	r5, r3, r6
 800b81c:	432c      	orrs	r4, r5
 800b81e:	40d3      	lsrs	r3, r2
 800b820:	6004      	str	r4, [r0, #0]
 800b822:	f840 3f04 	str.w	r3, [r0, #4]!
 800b826:	4288      	cmp	r0, r1
 800b828:	d3f4      	bcc.n	800b814 <L_shift+0xc>
 800b82a:	bd70      	pop	{r4, r5, r6, pc}

0800b82c <__match>:
 800b82c:	b530      	push	{r4, r5, lr}
 800b82e:	6803      	ldr	r3, [r0, #0]
 800b830:	3301      	adds	r3, #1
 800b832:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b836:	b914      	cbnz	r4, 800b83e <__match+0x12>
 800b838:	6003      	str	r3, [r0, #0]
 800b83a:	2001      	movs	r0, #1
 800b83c:	bd30      	pop	{r4, r5, pc}
 800b83e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b842:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800b846:	2d19      	cmp	r5, #25
 800b848:	bf98      	it	ls
 800b84a:	3220      	addls	r2, #32
 800b84c:	42a2      	cmp	r2, r4
 800b84e:	d0f0      	beq.n	800b832 <__match+0x6>
 800b850:	2000      	movs	r0, #0
 800b852:	e7f3      	b.n	800b83c <__match+0x10>

0800b854 <__hexnan>:
 800b854:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b858:	680b      	ldr	r3, [r1, #0]
 800b85a:	115e      	asrs	r6, r3, #5
 800b85c:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b860:	f013 031f 	ands.w	r3, r3, #31
 800b864:	b087      	sub	sp, #28
 800b866:	bf18      	it	ne
 800b868:	3604      	addne	r6, #4
 800b86a:	2500      	movs	r5, #0
 800b86c:	1f37      	subs	r7, r6, #4
 800b86e:	4690      	mov	r8, r2
 800b870:	6802      	ldr	r2, [r0, #0]
 800b872:	9301      	str	r3, [sp, #4]
 800b874:	4682      	mov	sl, r0
 800b876:	f846 5c04 	str.w	r5, [r6, #-4]
 800b87a:	46b9      	mov	r9, r7
 800b87c:	463c      	mov	r4, r7
 800b87e:	9502      	str	r5, [sp, #8]
 800b880:	46ab      	mov	fp, r5
 800b882:	7851      	ldrb	r1, [r2, #1]
 800b884:	1c53      	adds	r3, r2, #1
 800b886:	9303      	str	r3, [sp, #12]
 800b888:	b341      	cbz	r1, 800b8dc <__hexnan+0x88>
 800b88a:	4608      	mov	r0, r1
 800b88c:	9205      	str	r2, [sp, #20]
 800b88e:	9104      	str	r1, [sp, #16]
 800b890:	f7ff fd5e 	bl	800b350 <__hexdig_fun>
 800b894:	2800      	cmp	r0, #0
 800b896:	d14f      	bne.n	800b938 <__hexnan+0xe4>
 800b898:	9904      	ldr	r1, [sp, #16]
 800b89a:	9a05      	ldr	r2, [sp, #20]
 800b89c:	2920      	cmp	r1, #32
 800b89e:	d818      	bhi.n	800b8d2 <__hexnan+0x7e>
 800b8a0:	9b02      	ldr	r3, [sp, #8]
 800b8a2:	459b      	cmp	fp, r3
 800b8a4:	dd13      	ble.n	800b8ce <__hexnan+0x7a>
 800b8a6:	454c      	cmp	r4, r9
 800b8a8:	d206      	bcs.n	800b8b8 <__hexnan+0x64>
 800b8aa:	2d07      	cmp	r5, #7
 800b8ac:	dc04      	bgt.n	800b8b8 <__hexnan+0x64>
 800b8ae:	462a      	mov	r2, r5
 800b8b0:	4649      	mov	r1, r9
 800b8b2:	4620      	mov	r0, r4
 800b8b4:	f7ff ffa8 	bl	800b808 <L_shift>
 800b8b8:	4544      	cmp	r4, r8
 800b8ba:	d950      	bls.n	800b95e <__hexnan+0x10a>
 800b8bc:	2300      	movs	r3, #0
 800b8be:	f1a4 0904 	sub.w	r9, r4, #4
 800b8c2:	f844 3c04 	str.w	r3, [r4, #-4]
 800b8c6:	f8cd b008 	str.w	fp, [sp, #8]
 800b8ca:	464c      	mov	r4, r9
 800b8cc:	461d      	mov	r5, r3
 800b8ce:	9a03      	ldr	r2, [sp, #12]
 800b8d0:	e7d7      	b.n	800b882 <__hexnan+0x2e>
 800b8d2:	2929      	cmp	r1, #41	; 0x29
 800b8d4:	d156      	bne.n	800b984 <__hexnan+0x130>
 800b8d6:	3202      	adds	r2, #2
 800b8d8:	f8ca 2000 	str.w	r2, [sl]
 800b8dc:	f1bb 0f00 	cmp.w	fp, #0
 800b8e0:	d050      	beq.n	800b984 <__hexnan+0x130>
 800b8e2:	454c      	cmp	r4, r9
 800b8e4:	d206      	bcs.n	800b8f4 <__hexnan+0xa0>
 800b8e6:	2d07      	cmp	r5, #7
 800b8e8:	dc04      	bgt.n	800b8f4 <__hexnan+0xa0>
 800b8ea:	462a      	mov	r2, r5
 800b8ec:	4649      	mov	r1, r9
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f7ff ff8a 	bl	800b808 <L_shift>
 800b8f4:	4544      	cmp	r4, r8
 800b8f6:	d934      	bls.n	800b962 <__hexnan+0x10e>
 800b8f8:	f1a8 0204 	sub.w	r2, r8, #4
 800b8fc:	4623      	mov	r3, r4
 800b8fe:	f853 1b04 	ldr.w	r1, [r3], #4
 800b902:	f842 1f04 	str.w	r1, [r2, #4]!
 800b906:	429f      	cmp	r7, r3
 800b908:	d2f9      	bcs.n	800b8fe <__hexnan+0xaa>
 800b90a:	1b3b      	subs	r3, r7, r4
 800b90c:	f023 0303 	bic.w	r3, r3, #3
 800b910:	3304      	adds	r3, #4
 800b912:	3401      	adds	r4, #1
 800b914:	3e03      	subs	r6, #3
 800b916:	42b4      	cmp	r4, r6
 800b918:	bf88      	it	hi
 800b91a:	2304      	movhi	r3, #4
 800b91c:	4443      	add	r3, r8
 800b91e:	2200      	movs	r2, #0
 800b920:	f843 2b04 	str.w	r2, [r3], #4
 800b924:	429f      	cmp	r7, r3
 800b926:	d2fb      	bcs.n	800b920 <__hexnan+0xcc>
 800b928:	683b      	ldr	r3, [r7, #0]
 800b92a:	b91b      	cbnz	r3, 800b934 <__hexnan+0xe0>
 800b92c:	4547      	cmp	r7, r8
 800b92e:	d127      	bne.n	800b980 <__hexnan+0x12c>
 800b930:	2301      	movs	r3, #1
 800b932:	603b      	str	r3, [r7, #0]
 800b934:	2005      	movs	r0, #5
 800b936:	e026      	b.n	800b986 <__hexnan+0x132>
 800b938:	3501      	adds	r5, #1
 800b93a:	2d08      	cmp	r5, #8
 800b93c:	f10b 0b01 	add.w	fp, fp, #1
 800b940:	dd06      	ble.n	800b950 <__hexnan+0xfc>
 800b942:	4544      	cmp	r4, r8
 800b944:	d9c3      	bls.n	800b8ce <__hexnan+0x7a>
 800b946:	2300      	movs	r3, #0
 800b948:	f844 3c04 	str.w	r3, [r4, #-4]
 800b94c:	2501      	movs	r5, #1
 800b94e:	3c04      	subs	r4, #4
 800b950:	6822      	ldr	r2, [r4, #0]
 800b952:	f000 000f 	and.w	r0, r0, #15
 800b956:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800b95a:	6022      	str	r2, [r4, #0]
 800b95c:	e7b7      	b.n	800b8ce <__hexnan+0x7a>
 800b95e:	2508      	movs	r5, #8
 800b960:	e7b5      	b.n	800b8ce <__hexnan+0x7a>
 800b962:	9b01      	ldr	r3, [sp, #4]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d0df      	beq.n	800b928 <__hexnan+0xd4>
 800b968:	f04f 32ff 	mov.w	r2, #4294967295
 800b96c:	f1c3 0320 	rsb	r3, r3, #32
 800b970:	fa22 f303 	lsr.w	r3, r2, r3
 800b974:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b978:	401a      	ands	r2, r3
 800b97a:	f846 2c04 	str.w	r2, [r6, #-4]
 800b97e:	e7d3      	b.n	800b928 <__hexnan+0xd4>
 800b980:	3f04      	subs	r7, #4
 800b982:	e7d1      	b.n	800b928 <__hexnan+0xd4>
 800b984:	2004      	movs	r0, #4
 800b986:	b007      	add	sp, #28
 800b988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b98c <_localeconv_r>:
 800b98c:	4800      	ldr	r0, [pc, #0]	; (800b990 <_localeconv_r+0x4>)
 800b98e:	4770      	bx	lr
 800b990:	200001bc 	.word	0x200001bc

0800b994 <__ascii_mbtowc>:
 800b994:	b082      	sub	sp, #8
 800b996:	b901      	cbnz	r1, 800b99a <__ascii_mbtowc+0x6>
 800b998:	a901      	add	r1, sp, #4
 800b99a:	b142      	cbz	r2, 800b9ae <__ascii_mbtowc+0x1a>
 800b99c:	b14b      	cbz	r3, 800b9b2 <__ascii_mbtowc+0x1e>
 800b99e:	7813      	ldrb	r3, [r2, #0]
 800b9a0:	600b      	str	r3, [r1, #0]
 800b9a2:	7812      	ldrb	r2, [r2, #0]
 800b9a4:	1e10      	subs	r0, r2, #0
 800b9a6:	bf18      	it	ne
 800b9a8:	2001      	movne	r0, #1
 800b9aa:	b002      	add	sp, #8
 800b9ac:	4770      	bx	lr
 800b9ae:	4610      	mov	r0, r2
 800b9b0:	e7fb      	b.n	800b9aa <__ascii_mbtowc+0x16>
 800b9b2:	f06f 0001 	mvn.w	r0, #1
 800b9b6:	e7f8      	b.n	800b9aa <__ascii_mbtowc+0x16>

0800b9b8 <memcpy>:
 800b9b8:	440a      	add	r2, r1
 800b9ba:	4291      	cmp	r1, r2
 800b9bc:	f100 33ff 	add.w	r3, r0, #4294967295
 800b9c0:	d100      	bne.n	800b9c4 <memcpy+0xc>
 800b9c2:	4770      	bx	lr
 800b9c4:	b510      	push	{r4, lr}
 800b9c6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b9ca:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b9ce:	4291      	cmp	r1, r2
 800b9d0:	d1f9      	bne.n	800b9c6 <memcpy+0xe>
 800b9d2:	bd10      	pop	{r4, pc}

0800b9d4 <__malloc_lock>:
 800b9d4:	4801      	ldr	r0, [pc, #4]	; (800b9dc <__malloc_lock+0x8>)
 800b9d6:	f000 be96 	b.w	800c706 <__retarget_lock_acquire_recursive>
 800b9da:	bf00      	nop
 800b9dc:	20000af0 	.word	0x20000af0

0800b9e0 <__malloc_unlock>:
 800b9e0:	4801      	ldr	r0, [pc, #4]	; (800b9e8 <__malloc_unlock+0x8>)
 800b9e2:	f000 be91 	b.w	800c708 <__retarget_lock_release_recursive>
 800b9e6:	bf00      	nop
 800b9e8:	20000af0 	.word	0x20000af0

0800b9ec <_Balloc>:
 800b9ec:	b570      	push	{r4, r5, r6, lr}
 800b9ee:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800b9f0:	4604      	mov	r4, r0
 800b9f2:	460d      	mov	r5, r1
 800b9f4:	b976      	cbnz	r6, 800ba14 <_Balloc+0x28>
 800b9f6:	2010      	movs	r0, #16
 800b9f8:	f7fc ff8a 	bl	8008910 <malloc>
 800b9fc:	4602      	mov	r2, r0
 800b9fe:	6260      	str	r0, [r4, #36]	; 0x24
 800ba00:	b920      	cbnz	r0, 800ba0c <_Balloc+0x20>
 800ba02:	4b18      	ldr	r3, [pc, #96]	; (800ba64 <_Balloc+0x78>)
 800ba04:	4818      	ldr	r0, [pc, #96]	; (800ba68 <_Balloc+0x7c>)
 800ba06:	2166      	movs	r1, #102	; 0x66
 800ba08:	f000 fe4c 	bl	800c6a4 <__assert_func>
 800ba0c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba10:	6006      	str	r6, [r0, #0]
 800ba12:	60c6      	str	r6, [r0, #12]
 800ba14:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ba16:	68f3      	ldr	r3, [r6, #12]
 800ba18:	b183      	cbz	r3, 800ba3c <_Balloc+0x50>
 800ba1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ba22:	b9b8      	cbnz	r0, 800ba54 <_Balloc+0x68>
 800ba24:	2101      	movs	r1, #1
 800ba26:	fa01 f605 	lsl.w	r6, r1, r5
 800ba2a:	1d72      	adds	r2, r6, #5
 800ba2c:	0092      	lsls	r2, r2, #2
 800ba2e:	4620      	mov	r0, r4
 800ba30:	f000 fc9d 	bl	800c36e <_calloc_r>
 800ba34:	b160      	cbz	r0, 800ba50 <_Balloc+0x64>
 800ba36:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ba3a:	e00e      	b.n	800ba5a <_Balloc+0x6e>
 800ba3c:	2221      	movs	r2, #33	; 0x21
 800ba3e:	2104      	movs	r1, #4
 800ba40:	4620      	mov	r0, r4
 800ba42:	f000 fc94 	bl	800c36e <_calloc_r>
 800ba46:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ba48:	60f0      	str	r0, [r6, #12]
 800ba4a:	68db      	ldr	r3, [r3, #12]
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d1e4      	bne.n	800ba1a <_Balloc+0x2e>
 800ba50:	2000      	movs	r0, #0
 800ba52:	bd70      	pop	{r4, r5, r6, pc}
 800ba54:	6802      	ldr	r2, [r0, #0]
 800ba56:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ba5a:	2300      	movs	r3, #0
 800ba5c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ba60:	e7f7      	b.n	800ba52 <_Balloc+0x66>
 800ba62:	bf00      	nop
 800ba64:	0800d40e 	.word	0x0800d40e
 800ba68:	0800d50c 	.word	0x0800d50c

0800ba6c <_Bfree>:
 800ba6c:	b570      	push	{r4, r5, r6, lr}
 800ba6e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ba70:	4605      	mov	r5, r0
 800ba72:	460c      	mov	r4, r1
 800ba74:	b976      	cbnz	r6, 800ba94 <_Bfree+0x28>
 800ba76:	2010      	movs	r0, #16
 800ba78:	f7fc ff4a 	bl	8008910 <malloc>
 800ba7c:	4602      	mov	r2, r0
 800ba7e:	6268      	str	r0, [r5, #36]	; 0x24
 800ba80:	b920      	cbnz	r0, 800ba8c <_Bfree+0x20>
 800ba82:	4b09      	ldr	r3, [pc, #36]	; (800baa8 <_Bfree+0x3c>)
 800ba84:	4809      	ldr	r0, [pc, #36]	; (800baac <_Bfree+0x40>)
 800ba86:	218a      	movs	r1, #138	; 0x8a
 800ba88:	f000 fe0c 	bl	800c6a4 <__assert_func>
 800ba8c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ba90:	6006      	str	r6, [r0, #0]
 800ba92:	60c6      	str	r6, [r0, #12]
 800ba94:	b13c      	cbz	r4, 800baa6 <_Bfree+0x3a>
 800ba96:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800ba98:	6862      	ldr	r2, [r4, #4]
 800ba9a:	68db      	ldr	r3, [r3, #12]
 800ba9c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800baa0:	6021      	str	r1, [r4, #0]
 800baa2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800baa6:	bd70      	pop	{r4, r5, r6, pc}
 800baa8:	0800d40e 	.word	0x0800d40e
 800baac:	0800d50c 	.word	0x0800d50c

0800bab0 <__multadd>:
 800bab0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bab4:	690d      	ldr	r5, [r1, #16]
 800bab6:	4607      	mov	r7, r0
 800bab8:	460c      	mov	r4, r1
 800baba:	461e      	mov	r6, r3
 800babc:	f101 0c14 	add.w	ip, r1, #20
 800bac0:	2000      	movs	r0, #0
 800bac2:	f8dc 3000 	ldr.w	r3, [ip]
 800bac6:	b299      	uxth	r1, r3
 800bac8:	fb02 6101 	mla	r1, r2, r1, r6
 800bacc:	0c1e      	lsrs	r6, r3, #16
 800bace:	0c0b      	lsrs	r3, r1, #16
 800bad0:	fb02 3306 	mla	r3, r2, r6, r3
 800bad4:	b289      	uxth	r1, r1
 800bad6:	3001      	adds	r0, #1
 800bad8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800badc:	4285      	cmp	r5, r0
 800bade:	f84c 1b04 	str.w	r1, [ip], #4
 800bae2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bae6:	dcec      	bgt.n	800bac2 <__multadd+0x12>
 800bae8:	b30e      	cbz	r6, 800bb2e <__multadd+0x7e>
 800baea:	68a3      	ldr	r3, [r4, #8]
 800baec:	42ab      	cmp	r3, r5
 800baee:	dc19      	bgt.n	800bb24 <__multadd+0x74>
 800baf0:	6861      	ldr	r1, [r4, #4]
 800baf2:	4638      	mov	r0, r7
 800baf4:	3101      	adds	r1, #1
 800baf6:	f7ff ff79 	bl	800b9ec <_Balloc>
 800bafa:	4680      	mov	r8, r0
 800bafc:	b928      	cbnz	r0, 800bb0a <__multadd+0x5a>
 800bafe:	4602      	mov	r2, r0
 800bb00:	4b0c      	ldr	r3, [pc, #48]	; (800bb34 <__multadd+0x84>)
 800bb02:	480d      	ldr	r0, [pc, #52]	; (800bb38 <__multadd+0x88>)
 800bb04:	21b5      	movs	r1, #181	; 0xb5
 800bb06:	f000 fdcd 	bl	800c6a4 <__assert_func>
 800bb0a:	6922      	ldr	r2, [r4, #16]
 800bb0c:	3202      	adds	r2, #2
 800bb0e:	f104 010c 	add.w	r1, r4, #12
 800bb12:	0092      	lsls	r2, r2, #2
 800bb14:	300c      	adds	r0, #12
 800bb16:	f7ff ff4f 	bl	800b9b8 <memcpy>
 800bb1a:	4621      	mov	r1, r4
 800bb1c:	4638      	mov	r0, r7
 800bb1e:	f7ff ffa5 	bl	800ba6c <_Bfree>
 800bb22:	4644      	mov	r4, r8
 800bb24:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bb28:	3501      	adds	r5, #1
 800bb2a:	615e      	str	r6, [r3, #20]
 800bb2c:	6125      	str	r5, [r4, #16]
 800bb2e:	4620      	mov	r0, r4
 800bb30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb34:	0800d480 	.word	0x0800d480
 800bb38:	0800d50c 	.word	0x0800d50c

0800bb3c <__s2b>:
 800bb3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bb40:	460c      	mov	r4, r1
 800bb42:	4615      	mov	r5, r2
 800bb44:	461f      	mov	r7, r3
 800bb46:	2209      	movs	r2, #9
 800bb48:	3308      	adds	r3, #8
 800bb4a:	4606      	mov	r6, r0
 800bb4c:	fb93 f3f2 	sdiv	r3, r3, r2
 800bb50:	2100      	movs	r1, #0
 800bb52:	2201      	movs	r2, #1
 800bb54:	429a      	cmp	r2, r3
 800bb56:	db09      	blt.n	800bb6c <__s2b+0x30>
 800bb58:	4630      	mov	r0, r6
 800bb5a:	f7ff ff47 	bl	800b9ec <_Balloc>
 800bb5e:	b940      	cbnz	r0, 800bb72 <__s2b+0x36>
 800bb60:	4602      	mov	r2, r0
 800bb62:	4b19      	ldr	r3, [pc, #100]	; (800bbc8 <__s2b+0x8c>)
 800bb64:	4819      	ldr	r0, [pc, #100]	; (800bbcc <__s2b+0x90>)
 800bb66:	21ce      	movs	r1, #206	; 0xce
 800bb68:	f000 fd9c 	bl	800c6a4 <__assert_func>
 800bb6c:	0052      	lsls	r2, r2, #1
 800bb6e:	3101      	adds	r1, #1
 800bb70:	e7f0      	b.n	800bb54 <__s2b+0x18>
 800bb72:	9b08      	ldr	r3, [sp, #32]
 800bb74:	6143      	str	r3, [r0, #20]
 800bb76:	2d09      	cmp	r5, #9
 800bb78:	f04f 0301 	mov.w	r3, #1
 800bb7c:	6103      	str	r3, [r0, #16]
 800bb7e:	dd16      	ble.n	800bbae <__s2b+0x72>
 800bb80:	f104 0909 	add.w	r9, r4, #9
 800bb84:	46c8      	mov	r8, r9
 800bb86:	442c      	add	r4, r5
 800bb88:	f818 3b01 	ldrb.w	r3, [r8], #1
 800bb8c:	4601      	mov	r1, r0
 800bb8e:	3b30      	subs	r3, #48	; 0x30
 800bb90:	220a      	movs	r2, #10
 800bb92:	4630      	mov	r0, r6
 800bb94:	f7ff ff8c 	bl	800bab0 <__multadd>
 800bb98:	45a0      	cmp	r8, r4
 800bb9a:	d1f5      	bne.n	800bb88 <__s2b+0x4c>
 800bb9c:	f1a5 0408 	sub.w	r4, r5, #8
 800bba0:	444c      	add	r4, r9
 800bba2:	1b2d      	subs	r5, r5, r4
 800bba4:	1963      	adds	r3, r4, r5
 800bba6:	42bb      	cmp	r3, r7
 800bba8:	db04      	blt.n	800bbb4 <__s2b+0x78>
 800bbaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bbae:	340a      	adds	r4, #10
 800bbb0:	2509      	movs	r5, #9
 800bbb2:	e7f6      	b.n	800bba2 <__s2b+0x66>
 800bbb4:	f814 3b01 	ldrb.w	r3, [r4], #1
 800bbb8:	4601      	mov	r1, r0
 800bbba:	3b30      	subs	r3, #48	; 0x30
 800bbbc:	220a      	movs	r2, #10
 800bbbe:	4630      	mov	r0, r6
 800bbc0:	f7ff ff76 	bl	800bab0 <__multadd>
 800bbc4:	e7ee      	b.n	800bba4 <__s2b+0x68>
 800bbc6:	bf00      	nop
 800bbc8:	0800d480 	.word	0x0800d480
 800bbcc:	0800d50c 	.word	0x0800d50c

0800bbd0 <__hi0bits>:
 800bbd0:	0c03      	lsrs	r3, r0, #16
 800bbd2:	041b      	lsls	r3, r3, #16
 800bbd4:	b9d3      	cbnz	r3, 800bc0c <__hi0bits+0x3c>
 800bbd6:	0400      	lsls	r0, r0, #16
 800bbd8:	2310      	movs	r3, #16
 800bbda:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bbde:	bf04      	itt	eq
 800bbe0:	0200      	lsleq	r0, r0, #8
 800bbe2:	3308      	addeq	r3, #8
 800bbe4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bbe8:	bf04      	itt	eq
 800bbea:	0100      	lsleq	r0, r0, #4
 800bbec:	3304      	addeq	r3, #4
 800bbee:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bbf2:	bf04      	itt	eq
 800bbf4:	0080      	lsleq	r0, r0, #2
 800bbf6:	3302      	addeq	r3, #2
 800bbf8:	2800      	cmp	r0, #0
 800bbfa:	db05      	blt.n	800bc08 <__hi0bits+0x38>
 800bbfc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc00:	f103 0301 	add.w	r3, r3, #1
 800bc04:	bf08      	it	eq
 800bc06:	2320      	moveq	r3, #32
 800bc08:	4618      	mov	r0, r3
 800bc0a:	4770      	bx	lr
 800bc0c:	2300      	movs	r3, #0
 800bc0e:	e7e4      	b.n	800bbda <__hi0bits+0xa>

0800bc10 <__lo0bits>:
 800bc10:	6803      	ldr	r3, [r0, #0]
 800bc12:	f013 0207 	ands.w	r2, r3, #7
 800bc16:	4601      	mov	r1, r0
 800bc18:	d00b      	beq.n	800bc32 <__lo0bits+0x22>
 800bc1a:	07da      	lsls	r2, r3, #31
 800bc1c:	d423      	bmi.n	800bc66 <__lo0bits+0x56>
 800bc1e:	0798      	lsls	r0, r3, #30
 800bc20:	bf49      	itett	mi
 800bc22:	085b      	lsrmi	r3, r3, #1
 800bc24:	089b      	lsrpl	r3, r3, #2
 800bc26:	2001      	movmi	r0, #1
 800bc28:	600b      	strmi	r3, [r1, #0]
 800bc2a:	bf5c      	itt	pl
 800bc2c:	600b      	strpl	r3, [r1, #0]
 800bc2e:	2002      	movpl	r0, #2
 800bc30:	4770      	bx	lr
 800bc32:	b298      	uxth	r0, r3
 800bc34:	b9a8      	cbnz	r0, 800bc62 <__lo0bits+0x52>
 800bc36:	0c1b      	lsrs	r3, r3, #16
 800bc38:	2010      	movs	r0, #16
 800bc3a:	b2da      	uxtb	r2, r3
 800bc3c:	b90a      	cbnz	r2, 800bc42 <__lo0bits+0x32>
 800bc3e:	3008      	adds	r0, #8
 800bc40:	0a1b      	lsrs	r3, r3, #8
 800bc42:	071a      	lsls	r2, r3, #28
 800bc44:	bf04      	itt	eq
 800bc46:	091b      	lsreq	r3, r3, #4
 800bc48:	3004      	addeq	r0, #4
 800bc4a:	079a      	lsls	r2, r3, #30
 800bc4c:	bf04      	itt	eq
 800bc4e:	089b      	lsreq	r3, r3, #2
 800bc50:	3002      	addeq	r0, #2
 800bc52:	07da      	lsls	r2, r3, #31
 800bc54:	d403      	bmi.n	800bc5e <__lo0bits+0x4e>
 800bc56:	085b      	lsrs	r3, r3, #1
 800bc58:	f100 0001 	add.w	r0, r0, #1
 800bc5c:	d005      	beq.n	800bc6a <__lo0bits+0x5a>
 800bc5e:	600b      	str	r3, [r1, #0]
 800bc60:	4770      	bx	lr
 800bc62:	4610      	mov	r0, r2
 800bc64:	e7e9      	b.n	800bc3a <__lo0bits+0x2a>
 800bc66:	2000      	movs	r0, #0
 800bc68:	4770      	bx	lr
 800bc6a:	2020      	movs	r0, #32
 800bc6c:	4770      	bx	lr
	...

0800bc70 <__i2b>:
 800bc70:	b510      	push	{r4, lr}
 800bc72:	460c      	mov	r4, r1
 800bc74:	2101      	movs	r1, #1
 800bc76:	f7ff feb9 	bl	800b9ec <_Balloc>
 800bc7a:	4602      	mov	r2, r0
 800bc7c:	b928      	cbnz	r0, 800bc8a <__i2b+0x1a>
 800bc7e:	4b05      	ldr	r3, [pc, #20]	; (800bc94 <__i2b+0x24>)
 800bc80:	4805      	ldr	r0, [pc, #20]	; (800bc98 <__i2b+0x28>)
 800bc82:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800bc86:	f000 fd0d 	bl	800c6a4 <__assert_func>
 800bc8a:	2301      	movs	r3, #1
 800bc8c:	6144      	str	r4, [r0, #20]
 800bc8e:	6103      	str	r3, [r0, #16]
 800bc90:	bd10      	pop	{r4, pc}
 800bc92:	bf00      	nop
 800bc94:	0800d480 	.word	0x0800d480
 800bc98:	0800d50c 	.word	0x0800d50c

0800bc9c <__multiply>:
 800bc9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bca0:	4691      	mov	r9, r2
 800bca2:	690a      	ldr	r2, [r1, #16]
 800bca4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bca8:	429a      	cmp	r2, r3
 800bcaa:	bfb8      	it	lt
 800bcac:	460b      	movlt	r3, r1
 800bcae:	460c      	mov	r4, r1
 800bcb0:	bfbc      	itt	lt
 800bcb2:	464c      	movlt	r4, r9
 800bcb4:	4699      	movlt	r9, r3
 800bcb6:	6927      	ldr	r7, [r4, #16]
 800bcb8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bcbc:	68a3      	ldr	r3, [r4, #8]
 800bcbe:	6861      	ldr	r1, [r4, #4]
 800bcc0:	eb07 060a 	add.w	r6, r7, sl
 800bcc4:	42b3      	cmp	r3, r6
 800bcc6:	b085      	sub	sp, #20
 800bcc8:	bfb8      	it	lt
 800bcca:	3101      	addlt	r1, #1
 800bccc:	f7ff fe8e 	bl	800b9ec <_Balloc>
 800bcd0:	b930      	cbnz	r0, 800bce0 <__multiply+0x44>
 800bcd2:	4602      	mov	r2, r0
 800bcd4:	4b44      	ldr	r3, [pc, #272]	; (800bde8 <__multiply+0x14c>)
 800bcd6:	4845      	ldr	r0, [pc, #276]	; (800bdec <__multiply+0x150>)
 800bcd8:	f240 115d 	movw	r1, #349	; 0x15d
 800bcdc:	f000 fce2 	bl	800c6a4 <__assert_func>
 800bce0:	f100 0514 	add.w	r5, r0, #20
 800bce4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bce8:	462b      	mov	r3, r5
 800bcea:	2200      	movs	r2, #0
 800bcec:	4543      	cmp	r3, r8
 800bcee:	d321      	bcc.n	800bd34 <__multiply+0x98>
 800bcf0:	f104 0314 	add.w	r3, r4, #20
 800bcf4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bcf8:	f109 0314 	add.w	r3, r9, #20
 800bcfc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd00:	9202      	str	r2, [sp, #8]
 800bd02:	1b3a      	subs	r2, r7, r4
 800bd04:	3a15      	subs	r2, #21
 800bd06:	f022 0203 	bic.w	r2, r2, #3
 800bd0a:	3204      	adds	r2, #4
 800bd0c:	f104 0115 	add.w	r1, r4, #21
 800bd10:	428f      	cmp	r7, r1
 800bd12:	bf38      	it	cc
 800bd14:	2204      	movcc	r2, #4
 800bd16:	9201      	str	r2, [sp, #4]
 800bd18:	9a02      	ldr	r2, [sp, #8]
 800bd1a:	9303      	str	r3, [sp, #12]
 800bd1c:	429a      	cmp	r2, r3
 800bd1e:	d80c      	bhi.n	800bd3a <__multiply+0x9e>
 800bd20:	2e00      	cmp	r6, #0
 800bd22:	dd03      	ble.n	800bd2c <__multiply+0x90>
 800bd24:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d05a      	beq.n	800bde2 <__multiply+0x146>
 800bd2c:	6106      	str	r6, [r0, #16]
 800bd2e:	b005      	add	sp, #20
 800bd30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd34:	f843 2b04 	str.w	r2, [r3], #4
 800bd38:	e7d8      	b.n	800bcec <__multiply+0x50>
 800bd3a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd3e:	f1ba 0f00 	cmp.w	sl, #0
 800bd42:	d024      	beq.n	800bd8e <__multiply+0xf2>
 800bd44:	f104 0e14 	add.w	lr, r4, #20
 800bd48:	46a9      	mov	r9, r5
 800bd4a:	f04f 0c00 	mov.w	ip, #0
 800bd4e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd52:	f8d9 1000 	ldr.w	r1, [r9]
 800bd56:	fa1f fb82 	uxth.w	fp, r2
 800bd5a:	b289      	uxth	r1, r1
 800bd5c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd60:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd64:	f8d9 2000 	ldr.w	r2, [r9]
 800bd68:	4461      	add	r1, ip
 800bd6a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd6e:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd72:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd76:	b289      	uxth	r1, r1
 800bd78:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd7c:	4577      	cmp	r7, lr
 800bd7e:	f849 1b04 	str.w	r1, [r9], #4
 800bd82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd86:	d8e2      	bhi.n	800bd4e <__multiply+0xb2>
 800bd88:	9a01      	ldr	r2, [sp, #4]
 800bd8a:	f845 c002 	str.w	ip, [r5, r2]
 800bd8e:	9a03      	ldr	r2, [sp, #12]
 800bd90:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bd94:	3304      	adds	r3, #4
 800bd96:	f1b9 0f00 	cmp.w	r9, #0
 800bd9a:	d020      	beq.n	800bdde <__multiply+0x142>
 800bd9c:	6829      	ldr	r1, [r5, #0]
 800bd9e:	f104 0c14 	add.w	ip, r4, #20
 800bda2:	46ae      	mov	lr, r5
 800bda4:	f04f 0a00 	mov.w	sl, #0
 800bda8:	f8bc b000 	ldrh.w	fp, [ip]
 800bdac:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bdb0:	fb09 220b 	mla	r2, r9, fp, r2
 800bdb4:	4492      	add	sl, r2
 800bdb6:	b289      	uxth	r1, r1
 800bdb8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800bdbc:	f84e 1b04 	str.w	r1, [lr], #4
 800bdc0:	f85c 2b04 	ldr.w	r2, [ip], #4
 800bdc4:	f8be 1000 	ldrh.w	r1, [lr]
 800bdc8:	0c12      	lsrs	r2, r2, #16
 800bdca:	fb09 1102 	mla	r1, r9, r2, r1
 800bdce:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800bdd2:	4567      	cmp	r7, ip
 800bdd4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bdd8:	d8e6      	bhi.n	800bda8 <__multiply+0x10c>
 800bdda:	9a01      	ldr	r2, [sp, #4]
 800bddc:	50a9      	str	r1, [r5, r2]
 800bdde:	3504      	adds	r5, #4
 800bde0:	e79a      	b.n	800bd18 <__multiply+0x7c>
 800bde2:	3e01      	subs	r6, #1
 800bde4:	e79c      	b.n	800bd20 <__multiply+0x84>
 800bde6:	bf00      	nop
 800bde8:	0800d480 	.word	0x0800d480
 800bdec:	0800d50c 	.word	0x0800d50c

0800bdf0 <__pow5mult>:
 800bdf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bdf4:	4615      	mov	r5, r2
 800bdf6:	f012 0203 	ands.w	r2, r2, #3
 800bdfa:	4606      	mov	r6, r0
 800bdfc:	460f      	mov	r7, r1
 800bdfe:	d007      	beq.n	800be10 <__pow5mult+0x20>
 800be00:	4c25      	ldr	r4, [pc, #148]	; (800be98 <__pow5mult+0xa8>)
 800be02:	3a01      	subs	r2, #1
 800be04:	2300      	movs	r3, #0
 800be06:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be0a:	f7ff fe51 	bl	800bab0 <__multadd>
 800be0e:	4607      	mov	r7, r0
 800be10:	10ad      	asrs	r5, r5, #2
 800be12:	d03d      	beq.n	800be90 <__pow5mult+0xa0>
 800be14:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800be16:	b97c      	cbnz	r4, 800be38 <__pow5mult+0x48>
 800be18:	2010      	movs	r0, #16
 800be1a:	f7fc fd79 	bl	8008910 <malloc>
 800be1e:	4602      	mov	r2, r0
 800be20:	6270      	str	r0, [r6, #36]	; 0x24
 800be22:	b928      	cbnz	r0, 800be30 <__pow5mult+0x40>
 800be24:	4b1d      	ldr	r3, [pc, #116]	; (800be9c <__pow5mult+0xac>)
 800be26:	481e      	ldr	r0, [pc, #120]	; (800bea0 <__pow5mult+0xb0>)
 800be28:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800be2c:	f000 fc3a 	bl	800c6a4 <__assert_func>
 800be30:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be34:	6004      	str	r4, [r0, #0]
 800be36:	60c4      	str	r4, [r0, #12]
 800be38:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800be3c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be40:	b94c      	cbnz	r4, 800be56 <__pow5mult+0x66>
 800be42:	f240 2171 	movw	r1, #625	; 0x271
 800be46:	4630      	mov	r0, r6
 800be48:	f7ff ff12 	bl	800bc70 <__i2b>
 800be4c:	2300      	movs	r3, #0
 800be4e:	f8c8 0008 	str.w	r0, [r8, #8]
 800be52:	4604      	mov	r4, r0
 800be54:	6003      	str	r3, [r0, #0]
 800be56:	f04f 0900 	mov.w	r9, #0
 800be5a:	07eb      	lsls	r3, r5, #31
 800be5c:	d50a      	bpl.n	800be74 <__pow5mult+0x84>
 800be5e:	4639      	mov	r1, r7
 800be60:	4622      	mov	r2, r4
 800be62:	4630      	mov	r0, r6
 800be64:	f7ff ff1a 	bl	800bc9c <__multiply>
 800be68:	4639      	mov	r1, r7
 800be6a:	4680      	mov	r8, r0
 800be6c:	4630      	mov	r0, r6
 800be6e:	f7ff fdfd 	bl	800ba6c <_Bfree>
 800be72:	4647      	mov	r7, r8
 800be74:	106d      	asrs	r5, r5, #1
 800be76:	d00b      	beq.n	800be90 <__pow5mult+0xa0>
 800be78:	6820      	ldr	r0, [r4, #0]
 800be7a:	b938      	cbnz	r0, 800be8c <__pow5mult+0x9c>
 800be7c:	4622      	mov	r2, r4
 800be7e:	4621      	mov	r1, r4
 800be80:	4630      	mov	r0, r6
 800be82:	f7ff ff0b 	bl	800bc9c <__multiply>
 800be86:	6020      	str	r0, [r4, #0]
 800be88:	f8c0 9000 	str.w	r9, [r0]
 800be8c:	4604      	mov	r4, r0
 800be8e:	e7e4      	b.n	800be5a <__pow5mult+0x6a>
 800be90:	4638      	mov	r0, r7
 800be92:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800be96:	bf00      	nop
 800be98:	0800d658 	.word	0x0800d658
 800be9c:	0800d40e 	.word	0x0800d40e
 800bea0:	0800d50c 	.word	0x0800d50c

0800bea4 <__lshift>:
 800bea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bea8:	460c      	mov	r4, r1
 800beaa:	6849      	ldr	r1, [r1, #4]
 800beac:	6923      	ldr	r3, [r4, #16]
 800beae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800beb2:	68a3      	ldr	r3, [r4, #8]
 800beb4:	4607      	mov	r7, r0
 800beb6:	4691      	mov	r9, r2
 800beb8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bebc:	f108 0601 	add.w	r6, r8, #1
 800bec0:	42b3      	cmp	r3, r6
 800bec2:	db0b      	blt.n	800bedc <__lshift+0x38>
 800bec4:	4638      	mov	r0, r7
 800bec6:	f7ff fd91 	bl	800b9ec <_Balloc>
 800beca:	4605      	mov	r5, r0
 800becc:	b948      	cbnz	r0, 800bee2 <__lshift+0x3e>
 800bece:	4602      	mov	r2, r0
 800bed0:	4b2a      	ldr	r3, [pc, #168]	; (800bf7c <__lshift+0xd8>)
 800bed2:	482b      	ldr	r0, [pc, #172]	; (800bf80 <__lshift+0xdc>)
 800bed4:	f240 11d9 	movw	r1, #473	; 0x1d9
 800bed8:	f000 fbe4 	bl	800c6a4 <__assert_func>
 800bedc:	3101      	adds	r1, #1
 800bede:	005b      	lsls	r3, r3, #1
 800bee0:	e7ee      	b.n	800bec0 <__lshift+0x1c>
 800bee2:	2300      	movs	r3, #0
 800bee4:	f100 0114 	add.w	r1, r0, #20
 800bee8:	f100 0210 	add.w	r2, r0, #16
 800beec:	4618      	mov	r0, r3
 800beee:	4553      	cmp	r3, sl
 800bef0:	db37      	blt.n	800bf62 <__lshift+0xbe>
 800bef2:	6920      	ldr	r0, [r4, #16]
 800bef4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bef8:	f104 0314 	add.w	r3, r4, #20
 800befc:	f019 091f 	ands.w	r9, r9, #31
 800bf00:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf04:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800bf08:	d02f      	beq.n	800bf6a <__lshift+0xc6>
 800bf0a:	f1c9 0e20 	rsb	lr, r9, #32
 800bf0e:	468a      	mov	sl, r1
 800bf10:	f04f 0c00 	mov.w	ip, #0
 800bf14:	681a      	ldr	r2, [r3, #0]
 800bf16:	fa02 f209 	lsl.w	r2, r2, r9
 800bf1a:	ea42 020c 	orr.w	r2, r2, ip
 800bf1e:	f84a 2b04 	str.w	r2, [sl], #4
 800bf22:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf26:	4298      	cmp	r0, r3
 800bf28:	fa22 fc0e 	lsr.w	ip, r2, lr
 800bf2c:	d8f2      	bhi.n	800bf14 <__lshift+0x70>
 800bf2e:	1b03      	subs	r3, r0, r4
 800bf30:	3b15      	subs	r3, #21
 800bf32:	f023 0303 	bic.w	r3, r3, #3
 800bf36:	3304      	adds	r3, #4
 800bf38:	f104 0215 	add.w	r2, r4, #21
 800bf3c:	4290      	cmp	r0, r2
 800bf3e:	bf38      	it	cc
 800bf40:	2304      	movcc	r3, #4
 800bf42:	f841 c003 	str.w	ip, [r1, r3]
 800bf46:	f1bc 0f00 	cmp.w	ip, #0
 800bf4a:	d001      	beq.n	800bf50 <__lshift+0xac>
 800bf4c:	f108 0602 	add.w	r6, r8, #2
 800bf50:	3e01      	subs	r6, #1
 800bf52:	4638      	mov	r0, r7
 800bf54:	612e      	str	r6, [r5, #16]
 800bf56:	4621      	mov	r1, r4
 800bf58:	f7ff fd88 	bl	800ba6c <_Bfree>
 800bf5c:	4628      	mov	r0, r5
 800bf5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf62:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf66:	3301      	adds	r3, #1
 800bf68:	e7c1      	b.n	800beee <__lshift+0x4a>
 800bf6a:	3904      	subs	r1, #4
 800bf6c:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf70:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf74:	4298      	cmp	r0, r3
 800bf76:	d8f9      	bhi.n	800bf6c <__lshift+0xc8>
 800bf78:	e7ea      	b.n	800bf50 <__lshift+0xac>
 800bf7a:	bf00      	nop
 800bf7c:	0800d480 	.word	0x0800d480
 800bf80:	0800d50c 	.word	0x0800d50c

0800bf84 <__mcmp>:
 800bf84:	b530      	push	{r4, r5, lr}
 800bf86:	6902      	ldr	r2, [r0, #16]
 800bf88:	690c      	ldr	r4, [r1, #16]
 800bf8a:	1b12      	subs	r2, r2, r4
 800bf8c:	d10e      	bne.n	800bfac <__mcmp+0x28>
 800bf8e:	f100 0314 	add.w	r3, r0, #20
 800bf92:	3114      	adds	r1, #20
 800bf94:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bf98:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bf9c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bfa0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bfa4:	42a5      	cmp	r5, r4
 800bfa6:	d003      	beq.n	800bfb0 <__mcmp+0x2c>
 800bfa8:	d305      	bcc.n	800bfb6 <__mcmp+0x32>
 800bfaa:	2201      	movs	r2, #1
 800bfac:	4610      	mov	r0, r2
 800bfae:	bd30      	pop	{r4, r5, pc}
 800bfb0:	4283      	cmp	r3, r0
 800bfb2:	d3f3      	bcc.n	800bf9c <__mcmp+0x18>
 800bfb4:	e7fa      	b.n	800bfac <__mcmp+0x28>
 800bfb6:	f04f 32ff 	mov.w	r2, #4294967295
 800bfba:	e7f7      	b.n	800bfac <__mcmp+0x28>

0800bfbc <__mdiff>:
 800bfbc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc0:	460c      	mov	r4, r1
 800bfc2:	4606      	mov	r6, r0
 800bfc4:	4611      	mov	r1, r2
 800bfc6:	4620      	mov	r0, r4
 800bfc8:	4690      	mov	r8, r2
 800bfca:	f7ff ffdb 	bl	800bf84 <__mcmp>
 800bfce:	1e05      	subs	r5, r0, #0
 800bfd0:	d110      	bne.n	800bff4 <__mdiff+0x38>
 800bfd2:	4629      	mov	r1, r5
 800bfd4:	4630      	mov	r0, r6
 800bfd6:	f7ff fd09 	bl	800b9ec <_Balloc>
 800bfda:	b930      	cbnz	r0, 800bfea <__mdiff+0x2e>
 800bfdc:	4b3a      	ldr	r3, [pc, #232]	; (800c0c8 <__mdiff+0x10c>)
 800bfde:	4602      	mov	r2, r0
 800bfe0:	f240 2132 	movw	r1, #562	; 0x232
 800bfe4:	4839      	ldr	r0, [pc, #228]	; (800c0cc <__mdiff+0x110>)
 800bfe6:	f000 fb5d 	bl	800c6a4 <__assert_func>
 800bfea:	2301      	movs	r3, #1
 800bfec:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bff0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bff4:	bfa4      	itt	ge
 800bff6:	4643      	movge	r3, r8
 800bff8:	46a0      	movge	r8, r4
 800bffa:	4630      	mov	r0, r6
 800bffc:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c000:	bfa6      	itte	ge
 800c002:	461c      	movge	r4, r3
 800c004:	2500      	movge	r5, #0
 800c006:	2501      	movlt	r5, #1
 800c008:	f7ff fcf0 	bl	800b9ec <_Balloc>
 800c00c:	b920      	cbnz	r0, 800c018 <__mdiff+0x5c>
 800c00e:	4b2e      	ldr	r3, [pc, #184]	; (800c0c8 <__mdiff+0x10c>)
 800c010:	4602      	mov	r2, r0
 800c012:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c016:	e7e5      	b.n	800bfe4 <__mdiff+0x28>
 800c018:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c01c:	6926      	ldr	r6, [r4, #16]
 800c01e:	60c5      	str	r5, [r0, #12]
 800c020:	f104 0914 	add.w	r9, r4, #20
 800c024:	f108 0514 	add.w	r5, r8, #20
 800c028:	f100 0e14 	add.w	lr, r0, #20
 800c02c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c030:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c034:	f108 0210 	add.w	r2, r8, #16
 800c038:	46f2      	mov	sl, lr
 800c03a:	2100      	movs	r1, #0
 800c03c:	f859 3b04 	ldr.w	r3, [r9], #4
 800c040:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c044:	fa1f f883 	uxth.w	r8, r3
 800c048:	fa11 f18b 	uxtah	r1, r1, fp
 800c04c:	0c1b      	lsrs	r3, r3, #16
 800c04e:	eba1 0808 	sub.w	r8, r1, r8
 800c052:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c056:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c05a:	fa1f f888 	uxth.w	r8, r8
 800c05e:	1419      	asrs	r1, r3, #16
 800c060:	454e      	cmp	r6, r9
 800c062:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c066:	f84a 3b04 	str.w	r3, [sl], #4
 800c06a:	d8e7      	bhi.n	800c03c <__mdiff+0x80>
 800c06c:	1b33      	subs	r3, r6, r4
 800c06e:	3b15      	subs	r3, #21
 800c070:	f023 0303 	bic.w	r3, r3, #3
 800c074:	3304      	adds	r3, #4
 800c076:	3415      	adds	r4, #21
 800c078:	42a6      	cmp	r6, r4
 800c07a:	bf38      	it	cc
 800c07c:	2304      	movcc	r3, #4
 800c07e:	441d      	add	r5, r3
 800c080:	4473      	add	r3, lr
 800c082:	469e      	mov	lr, r3
 800c084:	462e      	mov	r6, r5
 800c086:	4566      	cmp	r6, ip
 800c088:	d30e      	bcc.n	800c0a8 <__mdiff+0xec>
 800c08a:	f10c 0203 	add.w	r2, ip, #3
 800c08e:	1b52      	subs	r2, r2, r5
 800c090:	f022 0203 	bic.w	r2, r2, #3
 800c094:	3d03      	subs	r5, #3
 800c096:	45ac      	cmp	ip, r5
 800c098:	bf38      	it	cc
 800c09a:	2200      	movcc	r2, #0
 800c09c:	441a      	add	r2, r3
 800c09e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c0a2:	b17b      	cbz	r3, 800c0c4 <__mdiff+0x108>
 800c0a4:	6107      	str	r7, [r0, #16]
 800c0a6:	e7a3      	b.n	800bff0 <__mdiff+0x34>
 800c0a8:	f856 8b04 	ldr.w	r8, [r6], #4
 800c0ac:	fa11 f288 	uxtah	r2, r1, r8
 800c0b0:	1414      	asrs	r4, r2, #16
 800c0b2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c0b6:	b292      	uxth	r2, r2
 800c0b8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c0bc:	f84e 2b04 	str.w	r2, [lr], #4
 800c0c0:	1421      	asrs	r1, r4, #16
 800c0c2:	e7e0      	b.n	800c086 <__mdiff+0xca>
 800c0c4:	3f01      	subs	r7, #1
 800c0c6:	e7ea      	b.n	800c09e <__mdiff+0xe2>
 800c0c8:	0800d480 	.word	0x0800d480
 800c0cc:	0800d50c 	.word	0x0800d50c

0800c0d0 <__ulp>:
 800c0d0:	b082      	sub	sp, #8
 800c0d2:	ed8d 0b00 	vstr	d0, [sp]
 800c0d6:	9b01      	ldr	r3, [sp, #4]
 800c0d8:	4912      	ldr	r1, [pc, #72]	; (800c124 <__ulp+0x54>)
 800c0da:	4019      	ands	r1, r3
 800c0dc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c0e0:	2900      	cmp	r1, #0
 800c0e2:	dd05      	ble.n	800c0f0 <__ulp+0x20>
 800c0e4:	2200      	movs	r2, #0
 800c0e6:	460b      	mov	r3, r1
 800c0e8:	ec43 2b10 	vmov	d0, r2, r3
 800c0ec:	b002      	add	sp, #8
 800c0ee:	4770      	bx	lr
 800c0f0:	4249      	negs	r1, r1
 800c0f2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c0f6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c0fa:	f04f 0200 	mov.w	r2, #0
 800c0fe:	f04f 0300 	mov.w	r3, #0
 800c102:	da04      	bge.n	800c10e <__ulp+0x3e>
 800c104:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c108:	fa41 f300 	asr.w	r3, r1, r0
 800c10c:	e7ec      	b.n	800c0e8 <__ulp+0x18>
 800c10e:	f1a0 0114 	sub.w	r1, r0, #20
 800c112:	291e      	cmp	r1, #30
 800c114:	bfda      	itte	le
 800c116:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c11a:	fa20 f101 	lsrle.w	r1, r0, r1
 800c11e:	2101      	movgt	r1, #1
 800c120:	460a      	mov	r2, r1
 800c122:	e7e1      	b.n	800c0e8 <__ulp+0x18>
 800c124:	7ff00000 	.word	0x7ff00000

0800c128 <__b2d>:
 800c128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c12a:	6905      	ldr	r5, [r0, #16]
 800c12c:	f100 0714 	add.w	r7, r0, #20
 800c130:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c134:	1f2e      	subs	r6, r5, #4
 800c136:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c13a:	4620      	mov	r0, r4
 800c13c:	f7ff fd48 	bl	800bbd0 <__hi0bits>
 800c140:	f1c0 0320 	rsb	r3, r0, #32
 800c144:	280a      	cmp	r0, #10
 800c146:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800c1c4 <__b2d+0x9c>
 800c14a:	600b      	str	r3, [r1, #0]
 800c14c:	dc14      	bgt.n	800c178 <__b2d+0x50>
 800c14e:	f1c0 0e0b 	rsb	lr, r0, #11
 800c152:	fa24 f10e 	lsr.w	r1, r4, lr
 800c156:	42b7      	cmp	r7, r6
 800c158:	ea41 030c 	orr.w	r3, r1, ip
 800c15c:	bf34      	ite	cc
 800c15e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c162:	2100      	movcs	r1, #0
 800c164:	3015      	adds	r0, #21
 800c166:	fa04 f000 	lsl.w	r0, r4, r0
 800c16a:	fa21 f10e 	lsr.w	r1, r1, lr
 800c16e:	ea40 0201 	orr.w	r2, r0, r1
 800c172:	ec43 2b10 	vmov	d0, r2, r3
 800c176:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c178:	42b7      	cmp	r7, r6
 800c17a:	bf3a      	itte	cc
 800c17c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c180:	f1a5 0608 	subcc.w	r6, r5, #8
 800c184:	2100      	movcs	r1, #0
 800c186:	380b      	subs	r0, #11
 800c188:	d017      	beq.n	800c1ba <__b2d+0x92>
 800c18a:	f1c0 0c20 	rsb	ip, r0, #32
 800c18e:	fa04 f500 	lsl.w	r5, r4, r0
 800c192:	42be      	cmp	r6, r7
 800c194:	fa21 f40c 	lsr.w	r4, r1, ip
 800c198:	ea45 0504 	orr.w	r5, r5, r4
 800c19c:	bf8c      	ite	hi
 800c19e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c1a2:	2400      	movls	r4, #0
 800c1a4:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c1a8:	fa01 f000 	lsl.w	r0, r1, r0
 800c1ac:	fa24 f40c 	lsr.w	r4, r4, ip
 800c1b0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800c1b4:	ea40 0204 	orr.w	r2, r0, r4
 800c1b8:	e7db      	b.n	800c172 <__b2d+0x4a>
 800c1ba:	ea44 030c 	orr.w	r3, r4, ip
 800c1be:	460a      	mov	r2, r1
 800c1c0:	e7d7      	b.n	800c172 <__b2d+0x4a>
 800c1c2:	bf00      	nop
 800c1c4:	3ff00000 	.word	0x3ff00000

0800c1c8 <__d2b>:
 800c1c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c1cc:	4689      	mov	r9, r1
 800c1ce:	2101      	movs	r1, #1
 800c1d0:	ec57 6b10 	vmov	r6, r7, d0
 800c1d4:	4690      	mov	r8, r2
 800c1d6:	f7ff fc09 	bl	800b9ec <_Balloc>
 800c1da:	4604      	mov	r4, r0
 800c1dc:	b930      	cbnz	r0, 800c1ec <__d2b+0x24>
 800c1de:	4602      	mov	r2, r0
 800c1e0:	4b25      	ldr	r3, [pc, #148]	; (800c278 <__d2b+0xb0>)
 800c1e2:	4826      	ldr	r0, [pc, #152]	; (800c27c <__d2b+0xb4>)
 800c1e4:	f240 310a 	movw	r1, #778	; 0x30a
 800c1e8:	f000 fa5c 	bl	800c6a4 <__assert_func>
 800c1ec:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800c1f0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800c1f4:	bb35      	cbnz	r5, 800c244 <__d2b+0x7c>
 800c1f6:	2e00      	cmp	r6, #0
 800c1f8:	9301      	str	r3, [sp, #4]
 800c1fa:	d028      	beq.n	800c24e <__d2b+0x86>
 800c1fc:	4668      	mov	r0, sp
 800c1fe:	9600      	str	r6, [sp, #0]
 800c200:	f7ff fd06 	bl	800bc10 <__lo0bits>
 800c204:	9900      	ldr	r1, [sp, #0]
 800c206:	b300      	cbz	r0, 800c24a <__d2b+0x82>
 800c208:	9a01      	ldr	r2, [sp, #4]
 800c20a:	f1c0 0320 	rsb	r3, r0, #32
 800c20e:	fa02 f303 	lsl.w	r3, r2, r3
 800c212:	430b      	orrs	r3, r1
 800c214:	40c2      	lsrs	r2, r0
 800c216:	6163      	str	r3, [r4, #20]
 800c218:	9201      	str	r2, [sp, #4]
 800c21a:	9b01      	ldr	r3, [sp, #4]
 800c21c:	61a3      	str	r3, [r4, #24]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	bf14      	ite	ne
 800c222:	2202      	movne	r2, #2
 800c224:	2201      	moveq	r2, #1
 800c226:	6122      	str	r2, [r4, #16]
 800c228:	b1d5      	cbz	r5, 800c260 <__d2b+0x98>
 800c22a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c22e:	4405      	add	r5, r0
 800c230:	f8c9 5000 	str.w	r5, [r9]
 800c234:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c238:	f8c8 0000 	str.w	r0, [r8]
 800c23c:	4620      	mov	r0, r4
 800c23e:	b003      	add	sp, #12
 800c240:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c244:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c248:	e7d5      	b.n	800c1f6 <__d2b+0x2e>
 800c24a:	6161      	str	r1, [r4, #20]
 800c24c:	e7e5      	b.n	800c21a <__d2b+0x52>
 800c24e:	a801      	add	r0, sp, #4
 800c250:	f7ff fcde 	bl	800bc10 <__lo0bits>
 800c254:	9b01      	ldr	r3, [sp, #4]
 800c256:	6163      	str	r3, [r4, #20]
 800c258:	2201      	movs	r2, #1
 800c25a:	6122      	str	r2, [r4, #16]
 800c25c:	3020      	adds	r0, #32
 800c25e:	e7e3      	b.n	800c228 <__d2b+0x60>
 800c260:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c264:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c268:	f8c9 0000 	str.w	r0, [r9]
 800c26c:	6918      	ldr	r0, [r3, #16]
 800c26e:	f7ff fcaf 	bl	800bbd0 <__hi0bits>
 800c272:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c276:	e7df      	b.n	800c238 <__d2b+0x70>
 800c278:	0800d480 	.word	0x0800d480
 800c27c:	0800d50c 	.word	0x0800d50c

0800c280 <__ratio>:
 800c280:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c284:	4688      	mov	r8, r1
 800c286:	4669      	mov	r1, sp
 800c288:	4681      	mov	r9, r0
 800c28a:	f7ff ff4d 	bl	800c128 <__b2d>
 800c28e:	a901      	add	r1, sp, #4
 800c290:	4640      	mov	r0, r8
 800c292:	ec55 4b10 	vmov	r4, r5, d0
 800c296:	f7ff ff47 	bl	800c128 <__b2d>
 800c29a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c29e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800c2a2:	eba3 0c02 	sub.w	ip, r3, r2
 800c2a6:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c2aa:	1a9b      	subs	r3, r3, r2
 800c2ac:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800c2b0:	ec51 0b10 	vmov	r0, r1, d0
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	bfd6      	itet	le
 800c2b8:	460a      	movle	r2, r1
 800c2ba:	462a      	movgt	r2, r5
 800c2bc:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800c2c0:	468b      	mov	fp, r1
 800c2c2:	462f      	mov	r7, r5
 800c2c4:	bfd4      	ite	le
 800c2c6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800c2ca:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800c2ce:	4620      	mov	r0, r4
 800c2d0:	ee10 2a10 	vmov	r2, s0
 800c2d4:	465b      	mov	r3, fp
 800c2d6:	4639      	mov	r1, r7
 800c2d8:	f7f4 fab8 	bl	800084c <__aeabi_ddiv>
 800c2dc:	ec41 0b10 	vmov	d0, r0, r1
 800c2e0:	b003      	add	sp, #12
 800c2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c2e6 <__copybits>:
 800c2e6:	3901      	subs	r1, #1
 800c2e8:	b570      	push	{r4, r5, r6, lr}
 800c2ea:	1149      	asrs	r1, r1, #5
 800c2ec:	6914      	ldr	r4, [r2, #16]
 800c2ee:	3101      	adds	r1, #1
 800c2f0:	f102 0314 	add.w	r3, r2, #20
 800c2f4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800c2f8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800c2fc:	1f05      	subs	r5, r0, #4
 800c2fe:	42a3      	cmp	r3, r4
 800c300:	d30c      	bcc.n	800c31c <__copybits+0x36>
 800c302:	1aa3      	subs	r3, r4, r2
 800c304:	3b11      	subs	r3, #17
 800c306:	f023 0303 	bic.w	r3, r3, #3
 800c30a:	3211      	adds	r2, #17
 800c30c:	42a2      	cmp	r2, r4
 800c30e:	bf88      	it	hi
 800c310:	2300      	movhi	r3, #0
 800c312:	4418      	add	r0, r3
 800c314:	2300      	movs	r3, #0
 800c316:	4288      	cmp	r0, r1
 800c318:	d305      	bcc.n	800c326 <__copybits+0x40>
 800c31a:	bd70      	pop	{r4, r5, r6, pc}
 800c31c:	f853 6b04 	ldr.w	r6, [r3], #4
 800c320:	f845 6f04 	str.w	r6, [r5, #4]!
 800c324:	e7eb      	b.n	800c2fe <__copybits+0x18>
 800c326:	f840 3b04 	str.w	r3, [r0], #4
 800c32a:	e7f4      	b.n	800c316 <__copybits+0x30>

0800c32c <__any_on>:
 800c32c:	f100 0214 	add.w	r2, r0, #20
 800c330:	6900      	ldr	r0, [r0, #16]
 800c332:	114b      	asrs	r3, r1, #5
 800c334:	4298      	cmp	r0, r3
 800c336:	b510      	push	{r4, lr}
 800c338:	db11      	blt.n	800c35e <__any_on+0x32>
 800c33a:	dd0a      	ble.n	800c352 <__any_on+0x26>
 800c33c:	f011 011f 	ands.w	r1, r1, #31
 800c340:	d007      	beq.n	800c352 <__any_on+0x26>
 800c342:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800c346:	fa24 f001 	lsr.w	r0, r4, r1
 800c34a:	fa00 f101 	lsl.w	r1, r0, r1
 800c34e:	428c      	cmp	r4, r1
 800c350:	d10b      	bne.n	800c36a <__any_on+0x3e>
 800c352:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800c356:	4293      	cmp	r3, r2
 800c358:	d803      	bhi.n	800c362 <__any_on+0x36>
 800c35a:	2000      	movs	r0, #0
 800c35c:	bd10      	pop	{r4, pc}
 800c35e:	4603      	mov	r3, r0
 800c360:	e7f7      	b.n	800c352 <__any_on+0x26>
 800c362:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800c366:	2900      	cmp	r1, #0
 800c368:	d0f5      	beq.n	800c356 <__any_on+0x2a>
 800c36a:	2001      	movs	r0, #1
 800c36c:	e7f6      	b.n	800c35c <__any_on+0x30>

0800c36e <_calloc_r>:
 800c36e:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c370:	fba1 2402 	umull	r2, r4, r1, r2
 800c374:	b94c      	cbnz	r4, 800c38a <_calloc_r+0x1c>
 800c376:	4611      	mov	r1, r2
 800c378:	9201      	str	r2, [sp, #4]
 800c37a:	f7fc fb4d 	bl	8008a18 <_malloc_r>
 800c37e:	9a01      	ldr	r2, [sp, #4]
 800c380:	4605      	mov	r5, r0
 800c382:	b930      	cbnz	r0, 800c392 <_calloc_r+0x24>
 800c384:	4628      	mov	r0, r5
 800c386:	b003      	add	sp, #12
 800c388:	bd30      	pop	{r4, r5, pc}
 800c38a:	220c      	movs	r2, #12
 800c38c:	6002      	str	r2, [r0, #0]
 800c38e:	2500      	movs	r5, #0
 800c390:	e7f8      	b.n	800c384 <_calloc_r+0x16>
 800c392:	4621      	mov	r1, r4
 800c394:	f7fc facc 	bl	8008930 <memset>
 800c398:	e7f4      	b.n	800c384 <_calloc_r+0x16>

0800c39a <__ssputs_r>:
 800c39a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c39e:	688e      	ldr	r6, [r1, #8]
 800c3a0:	429e      	cmp	r6, r3
 800c3a2:	4682      	mov	sl, r0
 800c3a4:	460c      	mov	r4, r1
 800c3a6:	4690      	mov	r8, r2
 800c3a8:	461f      	mov	r7, r3
 800c3aa:	d838      	bhi.n	800c41e <__ssputs_r+0x84>
 800c3ac:	898a      	ldrh	r2, [r1, #12]
 800c3ae:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c3b2:	d032      	beq.n	800c41a <__ssputs_r+0x80>
 800c3b4:	6825      	ldr	r5, [r4, #0]
 800c3b6:	6909      	ldr	r1, [r1, #16]
 800c3b8:	eba5 0901 	sub.w	r9, r5, r1
 800c3bc:	6965      	ldr	r5, [r4, #20]
 800c3be:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c3c2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c3c6:	3301      	adds	r3, #1
 800c3c8:	444b      	add	r3, r9
 800c3ca:	106d      	asrs	r5, r5, #1
 800c3cc:	429d      	cmp	r5, r3
 800c3ce:	bf38      	it	cc
 800c3d0:	461d      	movcc	r5, r3
 800c3d2:	0553      	lsls	r3, r2, #21
 800c3d4:	d531      	bpl.n	800c43a <__ssputs_r+0xa0>
 800c3d6:	4629      	mov	r1, r5
 800c3d8:	f7fc fb1e 	bl	8008a18 <_malloc_r>
 800c3dc:	4606      	mov	r6, r0
 800c3de:	b950      	cbnz	r0, 800c3f6 <__ssputs_r+0x5c>
 800c3e0:	230c      	movs	r3, #12
 800c3e2:	f8ca 3000 	str.w	r3, [sl]
 800c3e6:	89a3      	ldrh	r3, [r4, #12]
 800c3e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c3ec:	81a3      	strh	r3, [r4, #12]
 800c3ee:	f04f 30ff 	mov.w	r0, #4294967295
 800c3f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3f6:	6921      	ldr	r1, [r4, #16]
 800c3f8:	464a      	mov	r2, r9
 800c3fa:	f7ff fadd 	bl	800b9b8 <memcpy>
 800c3fe:	89a3      	ldrh	r3, [r4, #12]
 800c400:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c404:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c408:	81a3      	strh	r3, [r4, #12]
 800c40a:	6126      	str	r6, [r4, #16]
 800c40c:	6165      	str	r5, [r4, #20]
 800c40e:	444e      	add	r6, r9
 800c410:	eba5 0509 	sub.w	r5, r5, r9
 800c414:	6026      	str	r6, [r4, #0]
 800c416:	60a5      	str	r5, [r4, #8]
 800c418:	463e      	mov	r6, r7
 800c41a:	42be      	cmp	r6, r7
 800c41c:	d900      	bls.n	800c420 <__ssputs_r+0x86>
 800c41e:	463e      	mov	r6, r7
 800c420:	6820      	ldr	r0, [r4, #0]
 800c422:	4632      	mov	r2, r6
 800c424:	4641      	mov	r1, r8
 800c426:	f000 f970 	bl	800c70a <memmove>
 800c42a:	68a3      	ldr	r3, [r4, #8]
 800c42c:	1b9b      	subs	r3, r3, r6
 800c42e:	60a3      	str	r3, [r4, #8]
 800c430:	6823      	ldr	r3, [r4, #0]
 800c432:	4433      	add	r3, r6
 800c434:	6023      	str	r3, [r4, #0]
 800c436:	2000      	movs	r0, #0
 800c438:	e7db      	b.n	800c3f2 <__ssputs_r+0x58>
 800c43a:	462a      	mov	r2, r5
 800c43c:	f000 f97f 	bl	800c73e <_realloc_r>
 800c440:	4606      	mov	r6, r0
 800c442:	2800      	cmp	r0, #0
 800c444:	d1e1      	bne.n	800c40a <__ssputs_r+0x70>
 800c446:	6921      	ldr	r1, [r4, #16]
 800c448:	4650      	mov	r0, sl
 800c44a:	f7fc fa79 	bl	8008940 <_free_r>
 800c44e:	e7c7      	b.n	800c3e0 <__ssputs_r+0x46>

0800c450 <_svfiprintf_r>:
 800c450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c454:	4698      	mov	r8, r3
 800c456:	898b      	ldrh	r3, [r1, #12]
 800c458:	061b      	lsls	r3, r3, #24
 800c45a:	b09d      	sub	sp, #116	; 0x74
 800c45c:	4607      	mov	r7, r0
 800c45e:	460d      	mov	r5, r1
 800c460:	4614      	mov	r4, r2
 800c462:	d50e      	bpl.n	800c482 <_svfiprintf_r+0x32>
 800c464:	690b      	ldr	r3, [r1, #16]
 800c466:	b963      	cbnz	r3, 800c482 <_svfiprintf_r+0x32>
 800c468:	2140      	movs	r1, #64	; 0x40
 800c46a:	f7fc fad5 	bl	8008a18 <_malloc_r>
 800c46e:	6028      	str	r0, [r5, #0]
 800c470:	6128      	str	r0, [r5, #16]
 800c472:	b920      	cbnz	r0, 800c47e <_svfiprintf_r+0x2e>
 800c474:	230c      	movs	r3, #12
 800c476:	603b      	str	r3, [r7, #0]
 800c478:	f04f 30ff 	mov.w	r0, #4294967295
 800c47c:	e0d1      	b.n	800c622 <_svfiprintf_r+0x1d2>
 800c47e:	2340      	movs	r3, #64	; 0x40
 800c480:	616b      	str	r3, [r5, #20]
 800c482:	2300      	movs	r3, #0
 800c484:	9309      	str	r3, [sp, #36]	; 0x24
 800c486:	2320      	movs	r3, #32
 800c488:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c48c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c490:	2330      	movs	r3, #48	; 0x30
 800c492:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800c63c <_svfiprintf_r+0x1ec>
 800c496:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c49a:	f04f 0901 	mov.w	r9, #1
 800c49e:	4623      	mov	r3, r4
 800c4a0:	469a      	mov	sl, r3
 800c4a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c4a6:	b10a      	cbz	r2, 800c4ac <_svfiprintf_r+0x5c>
 800c4a8:	2a25      	cmp	r2, #37	; 0x25
 800c4aa:	d1f9      	bne.n	800c4a0 <_svfiprintf_r+0x50>
 800c4ac:	ebba 0b04 	subs.w	fp, sl, r4
 800c4b0:	d00b      	beq.n	800c4ca <_svfiprintf_r+0x7a>
 800c4b2:	465b      	mov	r3, fp
 800c4b4:	4622      	mov	r2, r4
 800c4b6:	4629      	mov	r1, r5
 800c4b8:	4638      	mov	r0, r7
 800c4ba:	f7ff ff6e 	bl	800c39a <__ssputs_r>
 800c4be:	3001      	adds	r0, #1
 800c4c0:	f000 80aa 	beq.w	800c618 <_svfiprintf_r+0x1c8>
 800c4c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c4c6:	445a      	add	r2, fp
 800c4c8:	9209      	str	r2, [sp, #36]	; 0x24
 800c4ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	f000 80a2 	beq.w	800c618 <_svfiprintf_r+0x1c8>
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c4da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c4de:	f10a 0a01 	add.w	sl, sl, #1
 800c4e2:	9304      	str	r3, [sp, #16]
 800c4e4:	9307      	str	r3, [sp, #28]
 800c4e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c4ea:	931a      	str	r3, [sp, #104]	; 0x68
 800c4ec:	4654      	mov	r4, sl
 800c4ee:	2205      	movs	r2, #5
 800c4f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c4f4:	4851      	ldr	r0, [pc, #324]	; (800c63c <_svfiprintf_r+0x1ec>)
 800c4f6:	f7f3 fe73 	bl	80001e0 <memchr>
 800c4fa:	9a04      	ldr	r2, [sp, #16]
 800c4fc:	b9d8      	cbnz	r0, 800c536 <_svfiprintf_r+0xe6>
 800c4fe:	06d0      	lsls	r0, r2, #27
 800c500:	bf44      	itt	mi
 800c502:	2320      	movmi	r3, #32
 800c504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c508:	0711      	lsls	r1, r2, #28
 800c50a:	bf44      	itt	mi
 800c50c:	232b      	movmi	r3, #43	; 0x2b
 800c50e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c512:	f89a 3000 	ldrb.w	r3, [sl]
 800c516:	2b2a      	cmp	r3, #42	; 0x2a
 800c518:	d015      	beq.n	800c546 <_svfiprintf_r+0xf6>
 800c51a:	9a07      	ldr	r2, [sp, #28]
 800c51c:	4654      	mov	r4, sl
 800c51e:	2000      	movs	r0, #0
 800c520:	f04f 0c0a 	mov.w	ip, #10
 800c524:	4621      	mov	r1, r4
 800c526:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c52a:	3b30      	subs	r3, #48	; 0x30
 800c52c:	2b09      	cmp	r3, #9
 800c52e:	d94e      	bls.n	800c5ce <_svfiprintf_r+0x17e>
 800c530:	b1b0      	cbz	r0, 800c560 <_svfiprintf_r+0x110>
 800c532:	9207      	str	r2, [sp, #28]
 800c534:	e014      	b.n	800c560 <_svfiprintf_r+0x110>
 800c536:	eba0 0308 	sub.w	r3, r0, r8
 800c53a:	fa09 f303 	lsl.w	r3, r9, r3
 800c53e:	4313      	orrs	r3, r2
 800c540:	9304      	str	r3, [sp, #16]
 800c542:	46a2      	mov	sl, r4
 800c544:	e7d2      	b.n	800c4ec <_svfiprintf_r+0x9c>
 800c546:	9b03      	ldr	r3, [sp, #12]
 800c548:	1d19      	adds	r1, r3, #4
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	9103      	str	r1, [sp, #12]
 800c54e:	2b00      	cmp	r3, #0
 800c550:	bfbb      	ittet	lt
 800c552:	425b      	neglt	r3, r3
 800c554:	f042 0202 	orrlt.w	r2, r2, #2
 800c558:	9307      	strge	r3, [sp, #28]
 800c55a:	9307      	strlt	r3, [sp, #28]
 800c55c:	bfb8      	it	lt
 800c55e:	9204      	strlt	r2, [sp, #16]
 800c560:	7823      	ldrb	r3, [r4, #0]
 800c562:	2b2e      	cmp	r3, #46	; 0x2e
 800c564:	d10c      	bne.n	800c580 <_svfiprintf_r+0x130>
 800c566:	7863      	ldrb	r3, [r4, #1]
 800c568:	2b2a      	cmp	r3, #42	; 0x2a
 800c56a:	d135      	bne.n	800c5d8 <_svfiprintf_r+0x188>
 800c56c:	9b03      	ldr	r3, [sp, #12]
 800c56e:	1d1a      	adds	r2, r3, #4
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	9203      	str	r2, [sp, #12]
 800c574:	2b00      	cmp	r3, #0
 800c576:	bfb8      	it	lt
 800c578:	f04f 33ff 	movlt.w	r3, #4294967295
 800c57c:	3402      	adds	r4, #2
 800c57e:	9305      	str	r3, [sp, #20]
 800c580:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800c64c <_svfiprintf_r+0x1fc>
 800c584:	7821      	ldrb	r1, [r4, #0]
 800c586:	2203      	movs	r2, #3
 800c588:	4650      	mov	r0, sl
 800c58a:	f7f3 fe29 	bl	80001e0 <memchr>
 800c58e:	b140      	cbz	r0, 800c5a2 <_svfiprintf_r+0x152>
 800c590:	2340      	movs	r3, #64	; 0x40
 800c592:	eba0 000a 	sub.w	r0, r0, sl
 800c596:	fa03 f000 	lsl.w	r0, r3, r0
 800c59a:	9b04      	ldr	r3, [sp, #16]
 800c59c:	4303      	orrs	r3, r0
 800c59e:	3401      	adds	r4, #1
 800c5a0:	9304      	str	r3, [sp, #16]
 800c5a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c5a6:	4826      	ldr	r0, [pc, #152]	; (800c640 <_svfiprintf_r+0x1f0>)
 800c5a8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c5ac:	2206      	movs	r2, #6
 800c5ae:	f7f3 fe17 	bl	80001e0 <memchr>
 800c5b2:	2800      	cmp	r0, #0
 800c5b4:	d038      	beq.n	800c628 <_svfiprintf_r+0x1d8>
 800c5b6:	4b23      	ldr	r3, [pc, #140]	; (800c644 <_svfiprintf_r+0x1f4>)
 800c5b8:	bb1b      	cbnz	r3, 800c602 <_svfiprintf_r+0x1b2>
 800c5ba:	9b03      	ldr	r3, [sp, #12]
 800c5bc:	3307      	adds	r3, #7
 800c5be:	f023 0307 	bic.w	r3, r3, #7
 800c5c2:	3308      	adds	r3, #8
 800c5c4:	9303      	str	r3, [sp, #12]
 800c5c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5c8:	4433      	add	r3, r6
 800c5ca:	9309      	str	r3, [sp, #36]	; 0x24
 800c5cc:	e767      	b.n	800c49e <_svfiprintf_r+0x4e>
 800c5ce:	fb0c 3202 	mla	r2, ip, r2, r3
 800c5d2:	460c      	mov	r4, r1
 800c5d4:	2001      	movs	r0, #1
 800c5d6:	e7a5      	b.n	800c524 <_svfiprintf_r+0xd4>
 800c5d8:	2300      	movs	r3, #0
 800c5da:	3401      	adds	r4, #1
 800c5dc:	9305      	str	r3, [sp, #20]
 800c5de:	4619      	mov	r1, r3
 800c5e0:	f04f 0c0a 	mov.w	ip, #10
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c5ea:	3a30      	subs	r2, #48	; 0x30
 800c5ec:	2a09      	cmp	r2, #9
 800c5ee:	d903      	bls.n	800c5f8 <_svfiprintf_r+0x1a8>
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d0c5      	beq.n	800c580 <_svfiprintf_r+0x130>
 800c5f4:	9105      	str	r1, [sp, #20]
 800c5f6:	e7c3      	b.n	800c580 <_svfiprintf_r+0x130>
 800c5f8:	fb0c 2101 	mla	r1, ip, r1, r2
 800c5fc:	4604      	mov	r4, r0
 800c5fe:	2301      	movs	r3, #1
 800c600:	e7f0      	b.n	800c5e4 <_svfiprintf_r+0x194>
 800c602:	ab03      	add	r3, sp, #12
 800c604:	9300      	str	r3, [sp, #0]
 800c606:	462a      	mov	r2, r5
 800c608:	4b0f      	ldr	r3, [pc, #60]	; (800c648 <_svfiprintf_r+0x1f8>)
 800c60a:	a904      	add	r1, sp, #16
 800c60c:	4638      	mov	r0, r7
 800c60e:	f7fc fb17 	bl	8008c40 <_printf_float>
 800c612:	1c42      	adds	r2, r0, #1
 800c614:	4606      	mov	r6, r0
 800c616:	d1d6      	bne.n	800c5c6 <_svfiprintf_r+0x176>
 800c618:	89ab      	ldrh	r3, [r5, #12]
 800c61a:	065b      	lsls	r3, r3, #25
 800c61c:	f53f af2c 	bmi.w	800c478 <_svfiprintf_r+0x28>
 800c620:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c622:	b01d      	add	sp, #116	; 0x74
 800c624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c628:	ab03      	add	r3, sp, #12
 800c62a:	9300      	str	r3, [sp, #0]
 800c62c:	462a      	mov	r2, r5
 800c62e:	4b06      	ldr	r3, [pc, #24]	; (800c648 <_svfiprintf_r+0x1f8>)
 800c630:	a904      	add	r1, sp, #16
 800c632:	4638      	mov	r0, r7
 800c634:	f7fc fda8 	bl	8009188 <_printf_i>
 800c638:	e7eb      	b.n	800c612 <_svfiprintf_r+0x1c2>
 800c63a:	bf00      	nop
 800c63c:	0800d664 	.word	0x0800d664
 800c640:	0800d66e 	.word	0x0800d66e
 800c644:	08008c41 	.word	0x08008c41
 800c648:	0800c39b 	.word	0x0800c39b
 800c64c:	0800d66a 	.word	0x0800d66a

0800c650 <nan>:
 800c650:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c658 <nan+0x8>
 800c654:	4770      	bx	lr
 800c656:	bf00      	nop
 800c658:	00000000 	.word	0x00000000
 800c65c:	7ff80000 	.word	0x7ff80000

0800c660 <strncmp>:
 800c660:	b510      	push	{r4, lr}
 800c662:	b17a      	cbz	r2, 800c684 <strncmp+0x24>
 800c664:	4603      	mov	r3, r0
 800c666:	3901      	subs	r1, #1
 800c668:	1884      	adds	r4, r0, r2
 800c66a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c66e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800c672:	4290      	cmp	r0, r2
 800c674:	d101      	bne.n	800c67a <strncmp+0x1a>
 800c676:	42a3      	cmp	r3, r4
 800c678:	d101      	bne.n	800c67e <strncmp+0x1e>
 800c67a:	1a80      	subs	r0, r0, r2
 800c67c:	bd10      	pop	{r4, pc}
 800c67e:	2800      	cmp	r0, #0
 800c680:	d1f3      	bne.n	800c66a <strncmp+0xa>
 800c682:	e7fa      	b.n	800c67a <strncmp+0x1a>
 800c684:	4610      	mov	r0, r2
 800c686:	e7f9      	b.n	800c67c <strncmp+0x1c>

0800c688 <__ascii_wctomb>:
 800c688:	b149      	cbz	r1, 800c69e <__ascii_wctomb+0x16>
 800c68a:	2aff      	cmp	r2, #255	; 0xff
 800c68c:	bf85      	ittet	hi
 800c68e:	238a      	movhi	r3, #138	; 0x8a
 800c690:	6003      	strhi	r3, [r0, #0]
 800c692:	700a      	strbls	r2, [r1, #0]
 800c694:	f04f 30ff 	movhi.w	r0, #4294967295
 800c698:	bf98      	it	ls
 800c69a:	2001      	movls	r0, #1
 800c69c:	4770      	bx	lr
 800c69e:	4608      	mov	r0, r1
 800c6a0:	4770      	bx	lr
	...

0800c6a4 <__assert_func>:
 800c6a4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c6a6:	4614      	mov	r4, r2
 800c6a8:	461a      	mov	r2, r3
 800c6aa:	4b09      	ldr	r3, [pc, #36]	; (800c6d0 <__assert_func+0x2c>)
 800c6ac:	681b      	ldr	r3, [r3, #0]
 800c6ae:	4605      	mov	r5, r0
 800c6b0:	68d8      	ldr	r0, [r3, #12]
 800c6b2:	b14c      	cbz	r4, 800c6c8 <__assert_func+0x24>
 800c6b4:	4b07      	ldr	r3, [pc, #28]	; (800c6d4 <__assert_func+0x30>)
 800c6b6:	9100      	str	r1, [sp, #0]
 800c6b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c6bc:	4906      	ldr	r1, [pc, #24]	; (800c6d8 <__assert_func+0x34>)
 800c6be:	462b      	mov	r3, r5
 800c6c0:	f000 f80e 	bl	800c6e0 <fiprintf>
 800c6c4:	f000 fa84 	bl	800cbd0 <abort>
 800c6c8:	4b04      	ldr	r3, [pc, #16]	; (800c6dc <__assert_func+0x38>)
 800c6ca:	461c      	mov	r4, r3
 800c6cc:	e7f3      	b.n	800c6b6 <__assert_func+0x12>
 800c6ce:	bf00      	nop
 800c6d0:	20000064 	.word	0x20000064
 800c6d4:	0800d675 	.word	0x0800d675
 800c6d8:	0800d682 	.word	0x0800d682
 800c6dc:	0800d6b0 	.word	0x0800d6b0

0800c6e0 <fiprintf>:
 800c6e0:	b40e      	push	{r1, r2, r3}
 800c6e2:	b503      	push	{r0, r1, lr}
 800c6e4:	4601      	mov	r1, r0
 800c6e6:	ab03      	add	r3, sp, #12
 800c6e8:	4805      	ldr	r0, [pc, #20]	; (800c700 <fiprintf+0x20>)
 800c6ea:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6ee:	6800      	ldr	r0, [r0, #0]
 800c6f0:	9301      	str	r3, [sp, #4]
 800c6f2:	f000 f87d 	bl	800c7f0 <_vfiprintf_r>
 800c6f6:	b002      	add	sp, #8
 800c6f8:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6fc:	b003      	add	sp, #12
 800c6fe:	4770      	bx	lr
 800c700:	20000064 	.word	0x20000064

0800c704 <__retarget_lock_init_recursive>:
 800c704:	4770      	bx	lr

0800c706 <__retarget_lock_acquire_recursive>:
 800c706:	4770      	bx	lr

0800c708 <__retarget_lock_release_recursive>:
 800c708:	4770      	bx	lr

0800c70a <memmove>:
 800c70a:	4288      	cmp	r0, r1
 800c70c:	b510      	push	{r4, lr}
 800c70e:	eb01 0402 	add.w	r4, r1, r2
 800c712:	d902      	bls.n	800c71a <memmove+0x10>
 800c714:	4284      	cmp	r4, r0
 800c716:	4623      	mov	r3, r4
 800c718:	d807      	bhi.n	800c72a <memmove+0x20>
 800c71a:	1e43      	subs	r3, r0, #1
 800c71c:	42a1      	cmp	r1, r4
 800c71e:	d008      	beq.n	800c732 <memmove+0x28>
 800c720:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c724:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c728:	e7f8      	b.n	800c71c <memmove+0x12>
 800c72a:	4402      	add	r2, r0
 800c72c:	4601      	mov	r1, r0
 800c72e:	428a      	cmp	r2, r1
 800c730:	d100      	bne.n	800c734 <memmove+0x2a>
 800c732:	bd10      	pop	{r4, pc}
 800c734:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c738:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c73c:	e7f7      	b.n	800c72e <memmove+0x24>

0800c73e <_realloc_r>:
 800c73e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c742:	4680      	mov	r8, r0
 800c744:	4614      	mov	r4, r2
 800c746:	460e      	mov	r6, r1
 800c748:	b921      	cbnz	r1, 800c754 <_realloc_r+0x16>
 800c74a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c74e:	4611      	mov	r1, r2
 800c750:	f7fc b962 	b.w	8008a18 <_malloc_r>
 800c754:	b92a      	cbnz	r2, 800c762 <_realloc_r+0x24>
 800c756:	f7fc f8f3 	bl	8008940 <_free_r>
 800c75a:	4625      	mov	r5, r4
 800c75c:	4628      	mov	r0, r5
 800c75e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c762:	f000 fc59 	bl	800d018 <_malloc_usable_size_r>
 800c766:	4284      	cmp	r4, r0
 800c768:	4607      	mov	r7, r0
 800c76a:	d802      	bhi.n	800c772 <_realloc_r+0x34>
 800c76c:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c770:	d812      	bhi.n	800c798 <_realloc_r+0x5a>
 800c772:	4621      	mov	r1, r4
 800c774:	4640      	mov	r0, r8
 800c776:	f7fc f94f 	bl	8008a18 <_malloc_r>
 800c77a:	4605      	mov	r5, r0
 800c77c:	2800      	cmp	r0, #0
 800c77e:	d0ed      	beq.n	800c75c <_realloc_r+0x1e>
 800c780:	42bc      	cmp	r4, r7
 800c782:	4622      	mov	r2, r4
 800c784:	4631      	mov	r1, r6
 800c786:	bf28      	it	cs
 800c788:	463a      	movcs	r2, r7
 800c78a:	f7ff f915 	bl	800b9b8 <memcpy>
 800c78e:	4631      	mov	r1, r6
 800c790:	4640      	mov	r0, r8
 800c792:	f7fc f8d5 	bl	8008940 <_free_r>
 800c796:	e7e1      	b.n	800c75c <_realloc_r+0x1e>
 800c798:	4635      	mov	r5, r6
 800c79a:	e7df      	b.n	800c75c <_realloc_r+0x1e>

0800c79c <__sfputc_r>:
 800c79c:	6893      	ldr	r3, [r2, #8]
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	2b00      	cmp	r3, #0
 800c7a2:	b410      	push	{r4}
 800c7a4:	6093      	str	r3, [r2, #8]
 800c7a6:	da08      	bge.n	800c7ba <__sfputc_r+0x1e>
 800c7a8:	6994      	ldr	r4, [r2, #24]
 800c7aa:	42a3      	cmp	r3, r4
 800c7ac:	db01      	blt.n	800c7b2 <__sfputc_r+0x16>
 800c7ae:	290a      	cmp	r1, #10
 800c7b0:	d103      	bne.n	800c7ba <__sfputc_r+0x1e>
 800c7b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7b6:	f000 b94b 	b.w	800ca50 <__swbuf_r>
 800c7ba:	6813      	ldr	r3, [r2, #0]
 800c7bc:	1c58      	adds	r0, r3, #1
 800c7be:	6010      	str	r0, [r2, #0]
 800c7c0:	7019      	strb	r1, [r3, #0]
 800c7c2:	4608      	mov	r0, r1
 800c7c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c7c8:	4770      	bx	lr

0800c7ca <__sfputs_r>:
 800c7ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c7cc:	4606      	mov	r6, r0
 800c7ce:	460f      	mov	r7, r1
 800c7d0:	4614      	mov	r4, r2
 800c7d2:	18d5      	adds	r5, r2, r3
 800c7d4:	42ac      	cmp	r4, r5
 800c7d6:	d101      	bne.n	800c7dc <__sfputs_r+0x12>
 800c7d8:	2000      	movs	r0, #0
 800c7da:	e007      	b.n	800c7ec <__sfputs_r+0x22>
 800c7dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7e0:	463a      	mov	r2, r7
 800c7e2:	4630      	mov	r0, r6
 800c7e4:	f7ff ffda 	bl	800c79c <__sfputc_r>
 800c7e8:	1c43      	adds	r3, r0, #1
 800c7ea:	d1f3      	bne.n	800c7d4 <__sfputs_r+0xa>
 800c7ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800c7f0 <_vfiprintf_r>:
 800c7f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7f4:	460d      	mov	r5, r1
 800c7f6:	b09d      	sub	sp, #116	; 0x74
 800c7f8:	4614      	mov	r4, r2
 800c7fa:	4698      	mov	r8, r3
 800c7fc:	4606      	mov	r6, r0
 800c7fe:	b118      	cbz	r0, 800c808 <_vfiprintf_r+0x18>
 800c800:	6983      	ldr	r3, [r0, #24]
 800c802:	b90b      	cbnz	r3, 800c808 <_vfiprintf_r+0x18>
 800c804:	f000 fb06 	bl	800ce14 <__sinit>
 800c808:	4b89      	ldr	r3, [pc, #548]	; (800ca30 <_vfiprintf_r+0x240>)
 800c80a:	429d      	cmp	r5, r3
 800c80c:	d11b      	bne.n	800c846 <_vfiprintf_r+0x56>
 800c80e:	6875      	ldr	r5, [r6, #4]
 800c810:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c812:	07d9      	lsls	r1, r3, #31
 800c814:	d405      	bmi.n	800c822 <_vfiprintf_r+0x32>
 800c816:	89ab      	ldrh	r3, [r5, #12]
 800c818:	059a      	lsls	r2, r3, #22
 800c81a:	d402      	bmi.n	800c822 <_vfiprintf_r+0x32>
 800c81c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c81e:	f7ff ff72 	bl	800c706 <__retarget_lock_acquire_recursive>
 800c822:	89ab      	ldrh	r3, [r5, #12]
 800c824:	071b      	lsls	r3, r3, #28
 800c826:	d501      	bpl.n	800c82c <_vfiprintf_r+0x3c>
 800c828:	692b      	ldr	r3, [r5, #16]
 800c82a:	b9eb      	cbnz	r3, 800c868 <_vfiprintf_r+0x78>
 800c82c:	4629      	mov	r1, r5
 800c82e:	4630      	mov	r0, r6
 800c830:	f000 f960 	bl	800caf4 <__swsetup_r>
 800c834:	b1c0      	cbz	r0, 800c868 <_vfiprintf_r+0x78>
 800c836:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c838:	07dc      	lsls	r4, r3, #31
 800c83a:	d50e      	bpl.n	800c85a <_vfiprintf_r+0x6a>
 800c83c:	f04f 30ff 	mov.w	r0, #4294967295
 800c840:	b01d      	add	sp, #116	; 0x74
 800c842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c846:	4b7b      	ldr	r3, [pc, #492]	; (800ca34 <_vfiprintf_r+0x244>)
 800c848:	429d      	cmp	r5, r3
 800c84a:	d101      	bne.n	800c850 <_vfiprintf_r+0x60>
 800c84c:	68b5      	ldr	r5, [r6, #8]
 800c84e:	e7df      	b.n	800c810 <_vfiprintf_r+0x20>
 800c850:	4b79      	ldr	r3, [pc, #484]	; (800ca38 <_vfiprintf_r+0x248>)
 800c852:	429d      	cmp	r5, r3
 800c854:	bf08      	it	eq
 800c856:	68f5      	ldreq	r5, [r6, #12]
 800c858:	e7da      	b.n	800c810 <_vfiprintf_r+0x20>
 800c85a:	89ab      	ldrh	r3, [r5, #12]
 800c85c:	0598      	lsls	r0, r3, #22
 800c85e:	d4ed      	bmi.n	800c83c <_vfiprintf_r+0x4c>
 800c860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c862:	f7ff ff51 	bl	800c708 <__retarget_lock_release_recursive>
 800c866:	e7e9      	b.n	800c83c <_vfiprintf_r+0x4c>
 800c868:	2300      	movs	r3, #0
 800c86a:	9309      	str	r3, [sp, #36]	; 0x24
 800c86c:	2320      	movs	r3, #32
 800c86e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c872:	f8cd 800c 	str.w	r8, [sp, #12]
 800c876:	2330      	movs	r3, #48	; 0x30
 800c878:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ca3c <_vfiprintf_r+0x24c>
 800c87c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c880:	f04f 0901 	mov.w	r9, #1
 800c884:	4623      	mov	r3, r4
 800c886:	469a      	mov	sl, r3
 800c888:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c88c:	b10a      	cbz	r2, 800c892 <_vfiprintf_r+0xa2>
 800c88e:	2a25      	cmp	r2, #37	; 0x25
 800c890:	d1f9      	bne.n	800c886 <_vfiprintf_r+0x96>
 800c892:	ebba 0b04 	subs.w	fp, sl, r4
 800c896:	d00b      	beq.n	800c8b0 <_vfiprintf_r+0xc0>
 800c898:	465b      	mov	r3, fp
 800c89a:	4622      	mov	r2, r4
 800c89c:	4629      	mov	r1, r5
 800c89e:	4630      	mov	r0, r6
 800c8a0:	f7ff ff93 	bl	800c7ca <__sfputs_r>
 800c8a4:	3001      	adds	r0, #1
 800c8a6:	f000 80aa 	beq.w	800c9fe <_vfiprintf_r+0x20e>
 800c8aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8ac:	445a      	add	r2, fp
 800c8ae:	9209      	str	r2, [sp, #36]	; 0x24
 800c8b0:	f89a 3000 	ldrb.w	r3, [sl]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	f000 80a2 	beq.w	800c9fe <_vfiprintf_r+0x20e>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	f04f 32ff 	mov.w	r2, #4294967295
 800c8c0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c8c4:	f10a 0a01 	add.w	sl, sl, #1
 800c8c8:	9304      	str	r3, [sp, #16]
 800c8ca:	9307      	str	r3, [sp, #28]
 800c8cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c8d0:	931a      	str	r3, [sp, #104]	; 0x68
 800c8d2:	4654      	mov	r4, sl
 800c8d4:	2205      	movs	r2, #5
 800c8d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8da:	4858      	ldr	r0, [pc, #352]	; (800ca3c <_vfiprintf_r+0x24c>)
 800c8dc:	f7f3 fc80 	bl	80001e0 <memchr>
 800c8e0:	9a04      	ldr	r2, [sp, #16]
 800c8e2:	b9d8      	cbnz	r0, 800c91c <_vfiprintf_r+0x12c>
 800c8e4:	06d1      	lsls	r1, r2, #27
 800c8e6:	bf44      	itt	mi
 800c8e8:	2320      	movmi	r3, #32
 800c8ea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8ee:	0713      	lsls	r3, r2, #28
 800c8f0:	bf44      	itt	mi
 800c8f2:	232b      	movmi	r3, #43	; 0x2b
 800c8f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c8f8:	f89a 3000 	ldrb.w	r3, [sl]
 800c8fc:	2b2a      	cmp	r3, #42	; 0x2a
 800c8fe:	d015      	beq.n	800c92c <_vfiprintf_r+0x13c>
 800c900:	9a07      	ldr	r2, [sp, #28]
 800c902:	4654      	mov	r4, sl
 800c904:	2000      	movs	r0, #0
 800c906:	f04f 0c0a 	mov.w	ip, #10
 800c90a:	4621      	mov	r1, r4
 800c90c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c910:	3b30      	subs	r3, #48	; 0x30
 800c912:	2b09      	cmp	r3, #9
 800c914:	d94e      	bls.n	800c9b4 <_vfiprintf_r+0x1c4>
 800c916:	b1b0      	cbz	r0, 800c946 <_vfiprintf_r+0x156>
 800c918:	9207      	str	r2, [sp, #28]
 800c91a:	e014      	b.n	800c946 <_vfiprintf_r+0x156>
 800c91c:	eba0 0308 	sub.w	r3, r0, r8
 800c920:	fa09 f303 	lsl.w	r3, r9, r3
 800c924:	4313      	orrs	r3, r2
 800c926:	9304      	str	r3, [sp, #16]
 800c928:	46a2      	mov	sl, r4
 800c92a:	e7d2      	b.n	800c8d2 <_vfiprintf_r+0xe2>
 800c92c:	9b03      	ldr	r3, [sp, #12]
 800c92e:	1d19      	adds	r1, r3, #4
 800c930:	681b      	ldr	r3, [r3, #0]
 800c932:	9103      	str	r1, [sp, #12]
 800c934:	2b00      	cmp	r3, #0
 800c936:	bfbb      	ittet	lt
 800c938:	425b      	neglt	r3, r3
 800c93a:	f042 0202 	orrlt.w	r2, r2, #2
 800c93e:	9307      	strge	r3, [sp, #28]
 800c940:	9307      	strlt	r3, [sp, #28]
 800c942:	bfb8      	it	lt
 800c944:	9204      	strlt	r2, [sp, #16]
 800c946:	7823      	ldrb	r3, [r4, #0]
 800c948:	2b2e      	cmp	r3, #46	; 0x2e
 800c94a:	d10c      	bne.n	800c966 <_vfiprintf_r+0x176>
 800c94c:	7863      	ldrb	r3, [r4, #1]
 800c94e:	2b2a      	cmp	r3, #42	; 0x2a
 800c950:	d135      	bne.n	800c9be <_vfiprintf_r+0x1ce>
 800c952:	9b03      	ldr	r3, [sp, #12]
 800c954:	1d1a      	adds	r2, r3, #4
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	9203      	str	r2, [sp, #12]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	bfb8      	it	lt
 800c95e:	f04f 33ff 	movlt.w	r3, #4294967295
 800c962:	3402      	adds	r4, #2
 800c964:	9305      	str	r3, [sp, #20]
 800c966:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ca4c <_vfiprintf_r+0x25c>
 800c96a:	7821      	ldrb	r1, [r4, #0]
 800c96c:	2203      	movs	r2, #3
 800c96e:	4650      	mov	r0, sl
 800c970:	f7f3 fc36 	bl	80001e0 <memchr>
 800c974:	b140      	cbz	r0, 800c988 <_vfiprintf_r+0x198>
 800c976:	2340      	movs	r3, #64	; 0x40
 800c978:	eba0 000a 	sub.w	r0, r0, sl
 800c97c:	fa03 f000 	lsl.w	r0, r3, r0
 800c980:	9b04      	ldr	r3, [sp, #16]
 800c982:	4303      	orrs	r3, r0
 800c984:	3401      	adds	r4, #1
 800c986:	9304      	str	r3, [sp, #16]
 800c988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c98c:	482c      	ldr	r0, [pc, #176]	; (800ca40 <_vfiprintf_r+0x250>)
 800c98e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c992:	2206      	movs	r2, #6
 800c994:	f7f3 fc24 	bl	80001e0 <memchr>
 800c998:	2800      	cmp	r0, #0
 800c99a:	d03f      	beq.n	800ca1c <_vfiprintf_r+0x22c>
 800c99c:	4b29      	ldr	r3, [pc, #164]	; (800ca44 <_vfiprintf_r+0x254>)
 800c99e:	bb1b      	cbnz	r3, 800c9e8 <_vfiprintf_r+0x1f8>
 800c9a0:	9b03      	ldr	r3, [sp, #12]
 800c9a2:	3307      	adds	r3, #7
 800c9a4:	f023 0307 	bic.w	r3, r3, #7
 800c9a8:	3308      	adds	r3, #8
 800c9aa:	9303      	str	r3, [sp, #12]
 800c9ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c9ae:	443b      	add	r3, r7
 800c9b0:	9309      	str	r3, [sp, #36]	; 0x24
 800c9b2:	e767      	b.n	800c884 <_vfiprintf_r+0x94>
 800c9b4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c9b8:	460c      	mov	r4, r1
 800c9ba:	2001      	movs	r0, #1
 800c9bc:	e7a5      	b.n	800c90a <_vfiprintf_r+0x11a>
 800c9be:	2300      	movs	r3, #0
 800c9c0:	3401      	adds	r4, #1
 800c9c2:	9305      	str	r3, [sp, #20]
 800c9c4:	4619      	mov	r1, r3
 800c9c6:	f04f 0c0a 	mov.w	ip, #10
 800c9ca:	4620      	mov	r0, r4
 800c9cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9d0:	3a30      	subs	r2, #48	; 0x30
 800c9d2:	2a09      	cmp	r2, #9
 800c9d4:	d903      	bls.n	800c9de <_vfiprintf_r+0x1ee>
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d0c5      	beq.n	800c966 <_vfiprintf_r+0x176>
 800c9da:	9105      	str	r1, [sp, #20]
 800c9dc:	e7c3      	b.n	800c966 <_vfiprintf_r+0x176>
 800c9de:	fb0c 2101 	mla	r1, ip, r1, r2
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	e7f0      	b.n	800c9ca <_vfiprintf_r+0x1da>
 800c9e8:	ab03      	add	r3, sp, #12
 800c9ea:	9300      	str	r3, [sp, #0]
 800c9ec:	462a      	mov	r2, r5
 800c9ee:	4b16      	ldr	r3, [pc, #88]	; (800ca48 <_vfiprintf_r+0x258>)
 800c9f0:	a904      	add	r1, sp, #16
 800c9f2:	4630      	mov	r0, r6
 800c9f4:	f7fc f924 	bl	8008c40 <_printf_float>
 800c9f8:	4607      	mov	r7, r0
 800c9fa:	1c78      	adds	r0, r7, #1
 800c9fc:	d1d6      	bne.n	800c9ac <_vfiprintf_r+0x1bc>
 800c9fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ca00:	07d9      	lsls	r1, r3, #31
 800ca02:	d405      	bmi.n	800ca10 <_vfiprintf_r+0x220>
 800ca04:	89ab      	ldrh	r3, [r5, #12]
 800ca06:	059a      	lsls	r2, r3, #22
 800ca08:	d402      	bmi.n	800ca10 <_vfiprintf_r+0x220>
 800ca0a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ca0c:	f7ff fe7c 	bl	800c708 <__retarget_lock_release_recursive>
 800ca10:	89ab      	ldrh	r3, [r5, #12]
 800ca12:	065b      	lsls	r3, r3, #25
 800ca14:	f53f af12 	bmi.w	800c83c <_vfiprintf_r+0x4c>
 800ca18:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ca1a:	e711      	b.n	800c840 <_vfiprintf_r+0x50>
 800ca1c:	ab03      	add	r3, sp, #12
 800ca1e:	9300      	str	r3, [sp, #0]
 800ca20:	462a      	mov	r2, r5
 800ca22:	4b09      	ldr	r3, [pc, #36]	; (800ca48 <_vfiprintf_r+0x258>)
 800ca24:	a904      	add	r1, sp, #16
 800ca26:	4630      	mov	r0, r6
 800ca28:	f7fc fbae 	bl	8009188 <_printf_i>
 800ca2c:	e7e4      	b.n	800c9f8 <_vfiprintf_r+0x208>
 800ca2e:	bf00      	nop
 800ca30:	0800d6d4 	.word	0x0800d6d4
 800ca34:	0800d6f4 	.word	0x0800d6f4
 800ca38:	0800d6b4 	.word	0x0800d6b4
 800ca3c:	0800d664 	.word	0x0800d664
 800ca40:	0800d66e 	.word	0x0800d66e
 800ca44:	08008c41 	.word	0x08008c41
 800ca48:	0800c7cb 	.word	0x0800c7cb
 800ca4c:	0800d66a 	.word	0x0800d66a

0800ca50 <__swbuf_r>:
 800ca50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca52:	460e      	mov	r6, r1
 800ca54:	4614      	mov	r4, r2
 800ca56:	4605      	mov	r5, r0
 800ca58:	b118      	cbz	r0, 800ca62 <__swbuf_r+0x12>
 800ca5a:	6983      	ldr	r3, [r0, #24]
 800ca5c:	b90b      	cbnz	r3, 800ca62 <__swbuf_r+0x12>
 800ca5e:	f000 f9d9 	bl	800ce14 <__sinit>
 800ca62:	4b21      	ldr	r3, [pc, #132]	; (800cae8 <__swbuf_r+0x98>)
 800ca64:	429c      	cmp	r4, r3
 800ca66:	d12b      	bne.n	800cac0 <__swbuf_r+0x70>
 800ca68:	686c      	ldr	r4, [r5, #4]
 800ca6a:	69a3      	ldr	r3, [r4, #24]
 800ca6c:	60a3      	str	r3, [r4, #8]
 800ca6e:	89a3      	ldrh	r3, [r4, #12]
 800ca70:	071a      	lsls	r2, r3, #28
 800ca72:	d52f      	bpl.n	800cad4 <__swbuf_r+0x84>
 800ca74:	6923      	ldr	r3, [r4, #16]
 800ca76:	b36b      	cbz	r3, 800cad4 <__swbuf_r+0x84>
 800ca78:	6923      	ldr	r3, [r4, #16]
 800ca7a:	6820      	ldr	r0, [r4, #0]
 800ca7c:	1ac0      	subs	r0, r0, r3
 800ca7e:	6963      	ldr	r3, [r4, #20]
 800ca80:	b2f6      	uxtb	r6, r6
 800ca82:	4283      	cmp	r3, r0
 800ca84:	4637      	mov	r7, r6
 800ca86:	dc04      	bgt.n	800ca92 <__swbuf_r+0x42>
 800ca88:	4621      	mov	r1, r4
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	f000 f92e 	bl	800ccec <_fflush_r>
 800ca90:	bb30      	cbnz	r0, 800cae0 <__swbuf_r+0x90>
 800ca92:	68a3      	ldr	r3, [r4, #8]
 800ca94:	3b01      	subs	r3, #1
 800ca96:	60a3      	str	r3, [r4, #8]
 800ca98:	6823      	ldr	r3, [r4, #0]
 800ca9a:	1c5a      	adds	r2, r3, #1
 800ca9c:	6022      	str	r2, [r4, #0]
 800ca9e:	701e      	strb	r6, [r3, #0]
 800caa0:	6963      	ldr	r3, [r4, #20]
 800caa2:	3001      	adds	r0, #1
 800caa4:	4283      	cmp	r3, r0
 800caa6:	d004      	beq.n	800cab2 <__swbuf_r+0x62>
 800caa8:	89a3      	ldrh	r3, [r4, #12]
 800caaa:	07db      	lsls	r3, r3, #31
 800caac:	d506      	bpl.n	800cabc <__swbuf_r+0x6c>
 800caae:	2e0a      	cmp	r6, #10
 800cab0:	d104      	bne.n	800cabc <__swbuf_r+0x6c>
 800cab2:	4621      	mov	r1, r4
 800cab4:	4628      	mov	r0, r5
 800cab6:	f000 f919 	bl	800ccec <_fflush_r>
 800caba:	b988      	cbnz	r0, 800cae0 <__swbuf_r+0x90>
 800cabc:	4638      	mov	r0, r7
 800cabe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cac0:	4b0a      	ldr	r3, [pc, #40]	; (800caec <__swbuf_r+0x9c>)
 800cac2:	429c      	cmp	r4, r3
 800cac4:	d101      	bne.n	800caca <__swbuf_r+0x7a>
 800cac6:	68ac      	ldr	r4, [r5, #8]
 800cac8:	e7cf      	b.n	800ca6a <__swbuf_r+0x1a>
 800caca:	4b09      	ldr	r3, [pc, #36]	; (800caf0 <__swbuf_r+0xa0>)
 800cacc:	429c      	cmp	r4, r3
 800cace:	bf08      	it	eq
 800cad0:	68ec      	ldreq	r4, [r5, #12]
 800cad2:	e7ca      	b.n	800ca6a <__swbuf_r+0x1a>
 800cad4:	4621      	mov	r1, r4
 800cad6:	4628      	mov	r0, r5
 800cad8:	f000 f80c 	bl	800caf4 <__swsetup_r>
 800cadc:	2800      	cmp	r0, #0
 800cade:	d0cb      	beq.n	800ca78 <__swbuf_r+0x28>
 800cae0:	f04f 37ff 	mov.w	r7, #4294967295
 800cae4:	e7ea      	b.n	800cabc <__swbuf_r+0x6c>
 800cae6:	bf00      	nop
 800cae8:	0800d6d4 	.word	0x0800d6d4
 800caec:	0800d6f4 	.word	0x0800d6f4
 800caf0:	0800d6b4 	.word	0x0800d6b4

0800caf4 <__swsetup_r>:
 800caf4:	4b32      	ldr	r3, [pc, #200]	; (800cbc0 <__swsetup_r+0xcc>)
 800caf6:	b570      	push	{r4, r5, r6, lr}
 800caf8:	681d      	ldr	r5, [r3, #0]
 800cafa:	4606      	mov	r6, r0
 800cafc:	460c      	mov	r4, r1
 800cafe:	b125      	cbz	r5, 800cb0a <__swsetup_r+0x16>
 800cb00:	69ab      	ldr	r3, [r5, #24]
 800cb02:	b913      	cbnz	r3, 800cb0a <__swsetup_r+0x16>
 800cb04:	4628      	mov	r0, r5
 800cb06:	f000 f985 	bl	800ce14 <__sinit>
 800cb0a:	4b2e      	ldr	r3, [pc, #184]	; (800cbc4 <__swsetup_r+0xd0>)
 800cb0c:	429c      	cmp	r4, r3
 800cb0e:	d10f      	bne.n	800cb30 <__swsetup_r+0x3c>
 800cb10:	686c      	ldr	r4, [r5, #4]
 800cb12:	89a3      	ldrh	r3, [r4, #12]
 800cb14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb18:	0719      	lsls	r1, r3, #28
 800cb1a:	d42c      	bmi.n	800cb76 <__swsetup_r+0x82>
 800cb1c:	06dd      	lsls	r5, r3, #27
 800cb1e:	d411      	bmi.n	800cb44 <__swsetup_r+0x50>
 800cb20:	2309      	movs	r3, #9
 800cb22:	6033      	str	r3, [r6, #0]
 800cb24:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800cb28:	81a3      	strh	r3, [r4, #12]
 800cb2a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb2e:	e03e      	b.n	800cbae <__swsetup_r+0xba>
 800cb30:	4b25      	ldr	r3, [pc, #148]	; (800cbc8 <__swsetup_r+0xd4>)
 800cb32:	429c      	cmp	r4, r3
 800cb34:	d101      	bne.n	800cb3a <__swsetup_r+0x46>
 800cb36:	68ac      	ldr	r4, [r5, #8]
 800cb38:	e7eb      	b.n	800cb12 <__swsetup_r+0x1e>
 800cb3a:	4b24      	ldr	r3, [pc, #144]	; (800cbcc <__swsetup_r+0xd8>)
 800cb3c:	429c      	cmp	r4, r3
 800cb3e:	bf08      	it	eq
 800cb40:	68ec      	ldreq	r4, [r5, #12]
 800cb42:	e7e6      	b.n	800cb12 <__swsetup_r+0x1e>
 800cb44:	0758      	lsls	r0, r3, #29
 800cb46:	d512      	bpl.n	800cb6e <__swsetup_r+0x7a>
 800cb48:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb4a:	b141      	cbz	r1, 800cb5e <__swsetup_r+0x6a>
 800cb4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cb50:	4299      	cmp	r1, r3
 800cb52:	d002      	beq.n	800cb5a <__swsetup_r+0x66>
 800cb54:	4630      	mov	r0, r6
 800cb56:	f7fb fef3 	bl	8008940 <_free_r>
 800cb5a:	2300      	movs	r3, #0
 800cb5c:	6363      	str	r3, [r4, #52]	; 0x34
 800cb5e:	89a3      	ldrh	r3, [r4, #12]
 800cb60:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800cb64:	81a3      	strh	r3, [r4, #12]
 800cb66:	2300      	movs	r3, #0
 800cb68:	6063      	str	r3, [r4, #4]
 800cb6a:	6923      	ldr	r3, [r4, #16]
 800cb6c:	6023      	str	r3, [r4, #0]
 800cb6e:	89a3      	ldrh	r3, [r4, #12]
 800cb70:	f043 0308 	orr.w	r3, r3, #8
 800cb74:	81a3      	strh	r3, [r4, #12]
 800cb76:	6923      	ldr	r3, [r4, #16]
 800cb78:	b94b      	cbnz	r3, 800cb8e <__swsetup_r+0x9a>
 800cb7a:	89a3      	ldrh	r3, [r4, #12]
 800cb7c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cb80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cb84:	d003      	beq.n	800cb8e <__swsetup_r+0x9a>
 800cb86:	4621      	mov	r1, r4
 800cb88:	4630      	mov	r0, r6
 800cb8a:	f000 fa05 	bl	800cf98 <__smakebuf_r>
 800cb8e:	89a0      	ldrh	r0, [r4, #12]
 800cb90:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800cb94:	f010 0301 	ands.w	r3, r0, #1
 800cb98:	d00a      	beq.n	800cbb0 <__swsetup_r+0xbc>
 800cb9a:	2300      	movs	r3, #0
 800cb9c:	60a3      	str	r3, [r4, #8]
 800cb9e:	6963      	ldr	r3, [r4, #20]
 800cba0:	425b      	negs	r3, r3
 800cba2:	61a3      	str	r3, [r4, #24]
 800cba4:	6923      	ldr	r3, [r4, #16]
 800cba6:	b943      	cbnz	r3, 800cbba <__swsetup_r+0xc6>
 800cba8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cbac:	d1ba      	bne.n	800cb24 <__swsetup_r+0x30>
 800cbae:	bd70      	pop	{r4, r5, r6, pc}
 800cbb0:	0781      	lsls	r1, r0, #30
 800cbb2:	bf58      	it	pl
 800cbb4:	6963      	ldrpl	r3, [r4, #20]
 800cbb6:	60a3      	str	r3, [r4, #8]
 800cbb8:	e7f4      	b.n	800cba4 <__swsetup_r+0xb0>
 800cbba:	2000      	movs	r0, #0
 800cbbc:	e7f7      	b.n	800cbae <__swsetup_r+0xba>
 800cbbe:	bf00      	nop
 800cbc0:	20000064 	.word	0x20000064
 800cbc4:	0800d6d4 	.word	0x0800d6d4
 800cbc8:	0800d6f4 	.word	0x0800d6f4
 800cbcc:	0800d6b4 	.word	0x0800d6b4

0800cbd0 <abort>:
 800cbd0:	b508      	push	{r3, lr}
 800cbd2:	2006      	movs	r0, #6
 800cbd4:	f000 fa50 	bl	800d078 <raise>
 800cbd8:	2001      	movs	r0, #1
 800cbda:	f7f5 fa6b 	bl	80020b4 <_exit>
	...

0800cbe0 <__sflush_r>:
 800cbe0:	898a      	ldrh	r2, [r1, #12]
 800cbe2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbe6:	4605      	mov	r5, r0
 800cbe8:	0710      	lsls	r0, r2, #28
 800cbea:	460c      	mov	r4, r1
 800cbec:	d458      	bmi.n	800cca0 <__sflush_r+0xc0>
 800cbee:	684b      	ldr	r3, [r1, #4]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	dc05      	bgt.n	800cc00 <__sflush_r+0x20>
 800cbf4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	dc02      	bgt.n	800cc00 <__sflush_r+0x20>
 800cbfa:	2000      	movs	r0, #0
 800cbfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc02:	2e00      	cmp	r6, #0
 800cc04:	d0f9      	beq.n	800cbfa <__sflush_r+0x1a>
 800cc06:	2300      	movs	r3, #0
 800cc08:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800cc0c:	682f      	ldr	r7, [r5, #0]
 800cc0e:	602b      	str	r3, [r5, #0]
 800cc10:	d032      	beq.n	800cc78 <__sflush_r+0x98>
 800cc12:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800cc14:	89a3      	ldrh	r3, [r4, #12]
 800cc16:	075a      	lsls	r2, r3, #29
 800cc18:	d505      	bpl.n	800cc26 <__sflush_r+0x46>
 800cc1a:	6863      	ldr	r3, [r4, #4]
 800cc1c:	1ac0      	subs	r0, r0, r3
 800cc1e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800cc20:	b10b      	cbz	r3, 800cc26 <__sflush_r+0x46>
 800cc22:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800cc24:	1ac0      	subs	r0, r0, r3
 800cc26:	2300      	movs	r3, #0
 800cc28:	4602      	mov	r2, r0
 800cc2a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800cc2c:	6a21      	ldr	r1, [r4, #32]
 800cc2e:	4628      	mov	r0, r5
 800cc30:	47b0      	blx	r6
 800cc32:	1c43      	adds	r3, r0, #1
 800cc34:	89a3      	ldrh	r3, [r4, #12]
 800cc36:	d106      	bne.n	800cc46 <__sflush_r+0x66>
 800cc38:	6829      	ldr	r1, [r5, #0]
 800cc3a:	291d      	cmp	r1, #29
 800cc3c:	d82c      	bhi.n	800cc98 <__sflush_r+0xb8>
 800cc3e:	4a2a      	ldr	r2, [pc, #168]	; (800cce8 <__sflush_r+0x108>)
 800cc40:	40ca      	lsrs	r2, r1
 800cc42:	07d6      	lsls	r6, r2, #31
 800cc44:	d528      	bpl.n	800cc98 <__sflush_r+0xb8>
 800cc46:	2200      	movs	r2, #0
 800cc48:	6062      	str	r2, [r4, #4]
 800cc4a:	04d9      	lsls	r1, r3, #19
 800cc4c:	6922      	ldr	r2, [r4, #16]
 800cc4e:	6022      	str	r2, [r4, #0]
 800cc50:	d504      	bpl.n	800cc5c <__sflush_r+0x7c>
 800cc52:	1c42      	adds	r2, r0, #1
 800cc54:	d101      	bne.n	800cc5a <__sflush_r+0x7a>
 800cc56:	682b      	ldr	r3, [r5, #0]
 800cc58:	b903      	cbnz	r3, 800cc5c <__sflush_r+0x7c>
 800cc5a:	6560      	str	r0, [r4, #84]	; 0x54
 800cc5c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cc5e:	602f      	str	r7, [r5, #0]
 800cc60:	2900      	cmp	r1, #0
 800cc62:	d0ca      	beq.n	800cbfa <__sflush_r+0x1a>
 800cc64:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800cc68:	4299      	cmp	r1, r3
 800cc6a:	d002      	beq.n	800cc72 <__sflush_r+0x92>
 800cc6c:	4628      	mov	r0, r5
 800cc6e:	f7fb fe67 	bl	8008940 <_free_r>
 800cc72:	2000      	movs	r0, #0
 800cc74:	6360      	str	r0, [r4, #52]	; 0x34
 800cc76:	e7c1      	b.n	800cbfc <__sflush_r+0x1c>
 800cc78:	6a21      	ldr	r1, [r4, #32]
 800cc7a:	2301      	movs	r3, #1
 800cc7c:	4628      	mov	r0, r5
 800cc7e:	47b0      	blx	r6
 800cc80:	1c41      	adds	r1, r0, #1
 800cc82:	d1c7      	bne.n	800cc14 <__sflush_r+0x34>
 800cc84:	682b      	ldr	r3, [r5, #0]
 800cc86:	2b00      	cmp	r3, #0
 800cc88:	d0c4      	beq.n	800cc14 <__sflush_r+0x34>
 800cc8a:	2b1d      	cmp	r3, #29
 800cc8c:	d001      	beq.n	800cc92 <__sflush_r+0xb2>
 800cc8e:	2b16      	cmp	r3, #22
 800cc90:	d101      	bne.n	800cc96 <__sflush_r+0xb6>
 800cc92:	602f      	str	r7, [r5, #0]
 800cc94:	e7b1      	b.n	800cbfa <__sflush_r+0x1a>
 800cc96:	89a3      	ldrh	r3, [r4, #12]
 800cc98:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cc9c:	81a3      	strh	r3, [r4, #12]
 800cc9e:	e7ad      	b.n	800cbfc <__sflush_r+0x1c>
 800cca0:	690f      	ldr	r7, [r1, #16]
 800cca2:	2f00      	cmp	r7, #0
 800cca4:	d0a9      	beq.n	800cbfa <__sflush_r+0x1a>
 800cca6:	0793      	lsls	r3, r2, #30
 800cca8:	680e      	ldr	r6, [r1, #0]
 800ccaa:	bf08      	it	eq
 800ccac:	694b      	ldreq	r3, [r1, #20]
 800ccae:	600f      	str	r7, [r1, #0]
 800ccb0:	bf18      	it	ne
 800ccb2:	2300      	movne	r3, #0
 800ccb4:	eba6 0807 	sub.w	r8, r6, r7
 800ccb8:	608b      	str	r3, [r1, #8]
 800ccba:	f1b8 0f00 	cmp.w	r8, #0
 800ccbe:	dd9c      	ble.n	800cbfa <__sflush_r+0x1a>
 800ccc0:	6a21      	ldr	r1, [r4, #32]
 800ccc2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ccc4:	4643      	mov	r3, r8
 800ccc6:	463a      	mov	r2, r7
 800ccc8:	4628      	mov	r0, r5
 800ccca:	47b0      	blx	r6
 800cccc:	2800      	cmp	r0, #0
 800ccce:	dc06      	bgt.n	800ccde <__sflush_r+0xfe>
 800ccd0:	89a3      	ldrh	r3, [r4, #12]
 800ccd2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ccd6:	81a3      	strh	r3, [r4, #12]
 800ccd8:	f04f 30ff 	mov.w	r0, #4294967295
 800ccdc:	e78e      	b.n	800cbfc <__sflush_r+0x1c>
 800ccde:	4407      	add	r7, r0
 800cce0:	eba8 0800 	sub.w	r8, r8, r0
 800cce4:	e7e9      	b.n	800ccba <__sflush_r+0xda>
 800cce6:	bf00      	nop
 800cce8:	20400001 	.word	0x20400001

0800ccec <_fflush_r>:
 800ccec:	b538      	push	{r3, r4, r5, lr}
 800ccee:	690b      	ldr	r3, [r1, #16]
 800ccf0:	4605      	mov	r5, r0
 800ccf2:	460c      	mov	r4, r1
 800ccf4:	b913      	cbnz	r3, 800ccfc <_fflush_r+0x10>
 800ccf6:	2500      	movs	r5, #0
 800ccf8:	4628      	mov	r0, r5
 800ccfa:	bd38      	pop	{r3, r4, r5, pc}
 800ccfc:	b118      	cbz	r0, 800cd06 <_fflush_r+0x1a>
 800ccfe:	6983      	ldr	r3, [r0, #24]
 800cd00:	b90b      	cbnz	r3, 800cd06 <_fflush_r+0x1a>
 800cd02:	f000 f887 	bl	800ce14 <__sinit>
 800cd06:	4b14      	ldr	r3, [pc, #80]	; (800cd58 <_fflush_r+0x6c>)
 800cd08:	429c      	cmp	r4, r3
 800cd0a:	d11b      	bne.n	800cd44 <_fflush_r+0x58>
 800cd0c:	686c      	ldr	r4, [r5, #4]
 800cd0e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d0ef      	beq.n	800ccf6 <_fflush_r+0xa>
 800cd16:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800cd18:	07d0      	lsls	r0, r2, #31
 800cd1a:	d404      	bmi.n	800cd26 <_fflush_r+0x3a>
 800cd1c:	0599      	lsls	r1, r3, #22
 800cd1e:	d402      	bmi.n	800cd26 <_fflush_r+0x3a>
 800cd20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd22:	f7ff fcf0 	bl	800c706 <__retarget_lock_acquire_recursive>
 800cd26:	4628      	mov	r0, r5
 800cd28:	4621      	mov	r1, r4
 800cd2a:	f7ff ff59 	bl	800cbe0 <__sflush_r>
 800cd2e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800cd30:	07da      	lsls	r2, r3, #31
 800cd32:	4605      	mov	r5, r0
 800cd34:	d4e0      	bmi.n	800ccf8 <_fflush_r+0xc>
 800cd36:	89a3      	ldrh	r3, [r4, #12]
 800cd38:	059b      	lsls	r3, r3, #22
 800cd3a:	d4dd      	bmi.n	800ccf8 <_fflush_r+0xc>
 800cd3c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800cd3e:	f7ff fce3 	bl	800c708 <__retarget_lock_release_recursive>
 800cd42:	e7d9      	b.n	800ccf8 <_fflush_r+0xc>
 800cd44:	4b05      	ldr	r3, [pc, #20]	; (800cd5c <_fflush_r+0x70>)
 800cd46:	429c      	cmp	r4, r3
 800cd48:	d101      	bne.n	800cd4e <_fflush_r+0x62>
 800cd4a:	68ac      	ldr	r4, [r5, #8]
 800cd4c:	e7df      	b.n	800cd0e <_fflush_r+0x22>
 800cd4e:	4b04      	ldr	r3, [pc, #16]	; (800cd60 <_fflush_r+0x74>)
 800cd50:	429c      	cmp	r4, r3
 800cd52:	bf08      	it	eq
 800cd54:	68ec      	ldreq	r4, [r5, #12]
 800cd56:	e7da      	b.n	800cd0e <_fflush_r+0x22>
 800cd58:	0800d6d4 	.word	0x0800d6d4
 800cd5c:	0800d6f4 	.word	0x0800d6f4
 800cd60:	0800d6b4 	.word	0x0800d6b4

0800cd64 <std>:
 800cd64:	2300      	movs	r3, #0
 800cd66:	b510      	push	{r4, lr}
 800cd68:	4604      	mov	r4, r0
 800cd6a:	e9c0 3300 	strd	r3, r3, [r0]
 800cd6e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cd72:	6083      	str	r3, [r0, #8]
 800cd74:	8181      	strh	r1, [r0, #12]
 800cd76:	6643      	str	r3, [r0, #100]	; 0x64
 800cd78:	81c2      	strh	r2, [r0, #14]
 800cd7a:	6183      	str	r3, [r0, #24]
 800cd7c:	4619      	mov	r1, r3
 800cd7e:	2208      	movs	r2, #8
 800cd80:	305c      	adds	r0, #92	; 0x5c
 800cd82:	f7fb fdd5 	bl	8008930 <memset>
 800cd86:	4b05      	ldr	r3, [pc, #20]	; (800cd9c <std+0x38>)
 800cd88:	6263      	str	r3, [r4, #36]	; 0x24
 800cd8a:	4b05      	ldr	r3, [pc, #20]	; (800cda0 <std+0x3c>)
 800cd8c:	62a3      	str	r3, [r4, #40]	; 0x28
 800cd8e:	4b05      	ldr	r3, [pc, #20]	; (800cda4 <std+0x40>)
 800cd90:	62e3      	str	r3, [r4, #44]	; 0x2c
 800cd92:	4b05      	ldr	r3, [pc, #20]	; (800cda8 <std+0x44>)
 800cd94:	6224      	str	r4, [r4, #32]
 800cd96:	6323      	str	r3, [r4, #48]	; 0x30
 800cd98:	bd10      	pop	{r4, pc}
 800cd9a:	bf00      	nop
 800cd9c:	0800d0b1 	.word	0x0800d0b1
 800cda0:	0800d0d3 	.word	0x0800d0d3
 800cda4:	0800d10b 	.word	0x0800d10b
 800cda8:	0800d12f 	.word	0x0800d12f

0800cdac <_cleanup_r>:
 800cdac:	4901      	ldr	r1, [pc, #4]	; (800cdb4 <_cleanup_r+0x8>)
 800cdae:	f000 b8af 	b.w	800cf10 <_fwalk_reent>
 800cdb2:	bf00      	nop
 800cdb4:	0800cced 	.word	0x0800cced

0800cdb8 <__sfmoreglue>:
 800cdb8:	b570      	push	{r4, r5, r6, lr}
 800cdba:	2268      	movs	r2, #104	; 0x68
 800cdbc:	1e4d      	subs	r5, r1, #1
 800cdbe:	4355      	muls	r5, r2
 800cdc0:	460e      	mov	r6, r1
 800cdc2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800cdc6:	f7fb fe27 	bl	8008a18 <_malloc_r>
 800cdca:	4604      	mov	r4, r0
 800cdcc:	b140      	cbz	r0, 800cde0 <__sfmoreglue+0x28>
 800cdce:	2100      	movs	r1, #0
 800cdd0:	e9c0 1600 	strd	r1, r6, [r0]
 800cdd4:	300c      	adds	r0, #12
 800cdd6:	60a0      	str	r0, [r4, #8]
 800cdd8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800cddc:	f7fb fda8 	bl	8008930 <memset>
 800cde0:	4620      	mov	r0, r4
 800cde2:	bd70      	pop	{r4, r5, r6, pc}

0800cde4 <__sfp_lock_acquire>:
 800cde4:	4801      	ldr	r0, [pc, #4]	; (800cdec <__sfp_lock_acquire+0x8>)
 800cde6:	f7ff bc8e 	b.w	800c706 <__retarget_lock_acquire_recursive>
 800cdea:	bf00      	nop
 800cdec:	20000af1 	.word	0x20000af1

0800cdf0 <__sfp_lock_release>:
 800cdf0:	4801      	ldr	r0, [pc, #4]	; (800cdf8 <__sfp_lock_release+0x8>)
 800cdf2:	f7ff bc89 	b.w	800c708 <__retarget_lock_release_recursive>
 800cdf6:	bf00      	nop
 800cdf8:	20000af1 	.word	0x20000af1

0800cdfc <__sinit_lock_acquire>:
 800cdfc:	4801      	ldr	r0, [pc, #4]	; (800ce04 <__sinit_lock_acquire+0x8>)
 800cdfe:	f7ff bc82 	b.w	800c706 <__retarget_lock_acquire_recursive>
 800ce02:	bf00      	nop
 800ce04:	20000af2 	.word	0x20000af2

0800ce08 <__sinit_lock_release>:
 800ce08:	4801      	ldr	r0, [pc, #4]	; (800ce10 <__sinit_lock_release+0x8>)
 800ce0a:	f7ff bc7d 	b.w	800c708 <__retarget_lock_release_recursive>
 800ce0e:	bf00      	nop
 800ce10:	20000af2 	.word	0x20000af2

0800ce14 <__sinit>:
 800ce14:	b510      	push	{r4, lr}
 800ce16:	4604      	mov	r4, r0
 800ce18:	f7ff fff0 	bl	800cdfc <__sinit_lock_acquire>
 800ce1c:	69a3      	ldr	r3, [r4, #24]
 800ce1e:	b11b      	cbz	r3, 800ce28 <__sinit+0x14>
 800ce20:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ce24:	f7ff bff0 	b.w	800ce08 <__sinit_lock_release>
 800ce28:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800ce2c:	6523      	str	r3, [r4, #80]	; 0x50
 800ce2e:	4b13      	ldr	r3, [pc, #76]	; (800ce7c <__sinit+0x68>)
 800ce30:	4a13      	ldr	r2, [pc, #76]	; (800ce80 <__sinit+0x6c>)
 800ce32:	681b      	ldr	r3, [r3, #0]
 800ce34:	62a2      	str	r2, [r4, #40]	; 0x28
 800ce36:	42a3      	cmp	r3, r4
 800ce38:	bf04      	itt	eq
 800ce3a:	2301      	moveq	r3, #1
 800ce3c:	61a3      	streq	r3, [r4, #24]
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f000 f820 	bl	800ce84 <__sfp>
 800ce44:	6060      	str	r0, [r4, #4]
 800ce46:	4620      	mov	r0, r4
 800ce48:	f000 f81c 	bl	800ce84 <__sfp>
 800ce4c:	60a0      	str	r0, [r4, #8]
 800ce4e:	4620      	mov	r0, r4
 800ce50:	f000 f818 	bl	800ce84 <__sfp>
 800ce54:	2200      	movs	r2, #0
 800ce56:	60e0      	str	r0, [r4, #12]
 800ce58:	2104      	movs	r1, #4
 800ce5a:	6860      	ldr	r0, [r4, #4]
 800ce5c:	f7ff ff82 	bl	800cd64 <std>
 800ce60:	68a0      	ldr	r0, [r4, #8]
 800ce62:	2201      	movs	r2, #1
 800ce64:	2109      	movs	r1, #9
 800ce66:	f7ff ff7d 	bl	800cd64 <std>
 800ce6a:	68e0      	ldr	r0, [r4, #12]
 800ce6c:	2202      	movs	r2, #2
 800ce6e:	2112      	movs	r1, #18
 800ce70:	f7ff ff78 	bl	800cd64 <std>
 800ce74:	2301      	movs	r3, #1
 800ce76:	61a3      	str	r3, [r4, #24]
 800ce78:	e7d2      	b.n	800ce20 <__sinit+0xc>
 800ce7a:	bf00      	nop
 800ce7c:	0800d26c 	.word	0x0800d26c
 800ce80:	0800cdad 	.word	0x0800cdad

0800ce84 <__sfp>:
 800ce84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ce86:	4607      	mov	r7, r0
 800ce88:	f7ff ffac 	bl	800cde4 <__sfp_lock_acquire>
 800ce8c:	4b1e      	ldr	r3, [pc, #120]	; (800cf08 <__sfp+0x84>)
 800ce8e:	681e      	ldr	r6, [r3, #0]
 800ce90:	69b3      	ldr	r3, [r6, #24]
 800ce92:	b913      	cbnz	r3, 800ce9a <__sfp+0x16>
 800ce94:	4630      	mov	r0, r6
 800ce96:	f7ff ffbd 	bl	800ce14 <__sinit>
 800ce9a:	3648      	adds	r6, #72	; 0x48
 800ce9c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800cea0:	3b01      	subs	r3, #1
 800cea2:	d503      	bpl.n	800ceac <__sfp+0x28>
 800cea4:	6833      	ldr	r3, [r6, #0]
 800cea6:	b30b      	cbz	r3, 800ceec <__sfp+0x68>
 800cea8:	6836      	ldr	r6, [r6, #0]
 800ceaa:	e7f7      	b.n	800ce9c <__sfp+0x18>
 800ceac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800ceb0:	b9d5      	cbnz	r5, 800cee8 <__sfp+0x64>
 800ceb2:	4b16      	ldr	r3, [pc, #88]	; (800cf0c <__sfp+0x88>)
 800ceb4:	60e3      	str	r3, [r4, #12]
 800ceb6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800ceba:	6665      	str	r5, [r4, #100]	; 0x64
 800cebc:	f7ff fc22 	bl	800c704 <__retarget_lock_init_recursive>
 800cec0:	f7ff ff96 	bl	800cdf0 <__sfp_lock_release>
 800cec4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800cec8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800cecc:	6025      	str	r5, [r4, #0]
 800cece:	61a5      	str	r5, [r4, #24]
 800ced0:	2208      	movs	r2, #8
 800ced2:	4629      	mov	r1, r5
 800ced4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800ced8:	f7fb fd2a 	bl	8008930 <memset>
 800cedc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800cee0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800cee4:	4620      	mov	r0, r4
 800cee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cee8:	3468      	adds	r4, #104	; 0x68
 800ceea:	e7d9      	b.n	800cea0 <__sfp+0x1c>
 800ceec:	2104      	movs	r1, #4
 800ceee:	4638      	mov	r0, r7
 800cef0:	f7ff ff62 	bl	800cdb8 <__sfmoreglue>
 800cef4:	4604      	mov	r4, r0
 800cef6:	6030      	str	r0, [r6, #0]
 800cef8:	2800      	cmp	r0, #0
 800cefa:	d1d5      	bne.n	800cea8 <__sfp+0x24>
 800cefc:	f7ff ff78 	bl	800cdf0 <__sfp_lock_release>
 800cf00:	230c      	movs	r3, #12
 800cf02:	603b      	str	r3, [r7, #0]
 800cf04:	e7ee      	b.n	800cee4 <__sfp+0x60>
 800cf06:	bf00      	nop
 800cf08:	0800d26c 	.word	0x0800d26c
 800cf0c:	ffff0001 	.word	0xffff0001

0800cf10 <_fwalk_reent>:
 800cf10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf14:	4606      	mov	r6, r0
 800cf16:	4688      	mov	r8, r1
 800cf18:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800cf1c:	2700      	movs	r7, #0
 800cf1e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cf22:	f1b9 0901 	subs.w	r9, r9, #1
 800cf26:	d505      	bpl.n	800cf34 <_fwalk_reent+0x24>
 800cf28:	6824      	ldr	r4, [r4, #0]
 800cf2a:	2c00      	cmp	r4, #0
 800cf2c:	d1f7      	bne.n	800cf1e <_fwalk_reent+0xe>
 800cf2e:	4638      	mov	r0, r7
 800cf30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf34:	89ab      	ldrh	r3, [r5, #12]
 800cf36:	2b01      	cmp	r3, #1
 800cf38:	d907      	bls.n	800cf4a <_fwalk_reent+0x3a>
 800cf3a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cf3e:	3301      	adds	r3, #1
 800cf40:	d003      	beq.n	800cf4a <_fwalk_reent+0x3a>
 800cf42:	4629      	mov	r1, r5
 800cf44:	4630      	mov	r0, r6
 800cf46:	47c0      	blx	r8
 800cf48:	4307      	orrs	r7, r0
 800cf4a:	3568      	adds	r5, #104	; 0x68
 800cf4c:	e7e9      	b.n	800cf22 <_fwalk_reent+0x12>

0800cf4e <__swhatbuf_r>:
 800cf4e:	b570      	push	{r4, r5, r6, lr}
 800cf50:	460e      	mov	r6, r1
 800cf52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cf56:	2900      	cmp	r1, #0
 800cf58:	b096      	sub	sp, #88	; 0x58
 800cf5a:	4614      	mov	r4, r2
 800cf5c:	461d      	mov	r5, r3
 800cf5e:	da08      	bge.n	800cf72 <__swhatbuf_r+0x24>
 800cf60:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800cf64:	2200      	movs	r2, #0
 800cf66:	602a      	str	r2, [r5, #0]
 800cf68:	061a      	lsls	r2, r3, #24
 800cf6a:	d410      	bmi.n	800cf8e <__swhatbuf_r+0x40>
 800cf6c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cf70:	e00e      	b.n	800cf90 <__swhatbuf_r+0x42>
 800cf72:	466a      	mov	r2, sp
 800cf74:	f000 f902 	bl	800d17c <_fstat_r>
 800cf78:	2800      	cmp	r0, #0
 800cf7a:	dbf1      	blt.n	800cf60 <__swhatbuf_r+0x12>
 800cf7c:	9a01      	ldr	r2, [sp, #4]
 800cf7e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800cf82:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800cf86:	425a      	negs	r2, r3
 800cf88:	415a      	adcs	r2, r3
 800cf8a:	602a      	str	r2, [r5, #0]
 800cf8c:	e7ee      	b.n	800cf6c <__swhatbuf_r+0x1e>
 800cf8e:	2340      	movs	r3, #64	; 0x40
 800cf90:	2000      	movs	r0, #0
 800cf92:	6023      	str	r3, [r4, #0]
 800cf94:	b016      	add	sp, #88	; 0x58
 800cf96:	bd70      	pop	{r4, r5, r6, pc}

0800cf98 <__smakebuf_r>:
 800cf98:	898b      	ldrh	r3, [r1, #12]
 800cf9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cf9c:	079d      	lsls	r5, r3, #30
 800cf9e:	4606      	mov	r6, r0
 800cfa0:	460c      	mov	r4, r1
 800cfa2:	d507      	bpl.n	800cfb4 <__smakebuf_r+0x1c>
 800cfa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cfa8:	6023      	str	r3, [r4, #0]
 800cfaa:	6123      	str	r3, [r4, #16]
 800cfac:	2301      	movs	r3, #1
 800cfae:	6163      	str	r3, [r4, #20]
 800cfb0:	b002      	add	sp, #8
 800cfb2:	bd70      	pop	{r4, r5, r6, pc}
 800cfb4:	ab01      	add	r3, sp, #4
 800cfb6:	466a      	mov	r2, sp
 800cfb8:	f7ff ffc9 	bl	800cf4e <__swhatbuf_r>
 800cfbc:	9900      	ldr	r1, [sp, #0]
 800cfbe:	4605      	mov	r5, r0
 800cfc0:	4630      	mov	r0, r6
 800cfc2:	f7fb fd29 	bl	8008a18 <_malloc_r>
 800cfc6:	b948      	cbnz	r0, 800cfdc <__smakebuf_r+0x44>
 800cfc8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfcc:	059a      	lsls	r2, r3, #22
 800cfce:	d4ef      	bmi.n	800cfb0 <__smakebuf_r+0x18>
 800cfd0:	f023 0303 	bic.w	r3, r3, #3
 800cfd4:	f043 0302 	orr.w	r3, r3, #2
 800cfd8:	81a3      	strh	r3, [r4, #12]
 800cfda:	e7e3      	b.n	800cfa4 <__smakebuf_r+0xc>
 800cfdc:	4b0d      	ldr	r3, [pc, #52]	; (800d014 <__smakebuf_r+0x7c>)
 800cfde:	62b3      	str	r3, [r6, #40]	; 0x28
 800cfe0:	89a3      	ldrh	r3, [r4, #12]
 800cfe2:	6020      	str	r0, [r4, #0]
 800cfe4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cfe8:	81a3      	strh	r3, [r4, #12]
 800cfea:	9b00      	ldr	r3, [sp, #0]
 800cfec:	6163      	str	r3, [r4, #20]
 800cfee:	9b01      	ldr	r3, [sp, #4]
 800cff0:	6120      	str	r0, [r4, #16]
 800cff2:	b15b      	cbz	r3, 800d00c <__smakebuf_r+0x74>
 800cff4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cff8:	4630      	mov	r0, r6
 800cffa:	f000 f8d1 	bl	800d1a0 <_isatty_r>
 800cffe:	b128      	cbz	r0, 800d00c <__smakebuf_r+0x74>
 800d000:	89a3      	ldrh	r3, [r4, #12]
 800d002:	f023 0303 	bic.w	r3, r3, #3
 800d006:	f043 0301 	orr.w	r3, r3, #1
 800d00a:	81a3      	strh	r3, [r4, #12]
 800d00c:	89a0      	ldrh	r0, [r4, #12]
 800d00e:	4305      	orrs	r5, r0
 800d010:	81a5      	strh	r5, [r4, #12]
 800d012:	e7cd      	b.n	800cfb0 <__smakebuf_r+0x18>
 800d014:	0800cdad 	.word	0x0800cdad

0800d018 <_malloc_usable_size_r>:
 800d018:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d01c:	1f18      	subs	r0, r3, #4
 800d01e:	2b00      	cmp	r3, #0
 800d020:	bfbc      	itt	lt
 800d022:	580b      	ldrlt	r3, [r1, r0]
 800d024:	18c0      	addlt	r0, r0, r3
 800d026:	4770      	bx	lr

0800d028 <_raise_r>:
 800d028:	291f      	cmp	r1, #31
 800d02a:	b538      	push	{r3, r4, r5, lr}
 800d02c:	4604      	mov	r4, r0
 800d02e:	460d      	mov	r5, r1
 800d030:	d904      	bls.n	800d03c <_raise_r+0x14>
 800d032:	2316      	movs	r3, #22
 800d034:	6003      	str	r3, [r0, #0]
 800d036:	f04f 30ff 	mov.w	r0, #4294967295
 800d03a:	bd38      	pop	{r3, r4, r5, pc}
 800d03c:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800d03e:	b112      	cbz	r2, 800d046 <_raise_r+0x1e>
 800d040:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d044:	b94b      	cbnz	r3, 800d05a <_raise_r+0x32>
 800d046:	4620      	mov	r0, r4
 800d048:	f000 f830 	bl	800d0ac <_getpid_r>
 800d04c:	462a      	mov	r2, r5
 800d04e:	4601      	mov	r1, r0
 800d050:	4620      	mov	r0, r4
 800d052:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d056:	f000 b817 	b.w	800d088 <_kill_r>
 800d05a:	2b01      	cmp	r3, #1
 800d05c:	d00a      	beq.n	800d074 <_raise_r+0x4c>
 800d05e:	1c59      	adds	r1, r3, #1
 800d060:	d103      	bne.n	800d06a <_raise_r+0x42>
 800d062:	2316      	movs	r3, #22
 800d064:	6003      	str	r3, [r0, #0]
 800d066:	2001      	movs	r0, #1
 800d068:	e7e7      	b.n	800d03a <_raise_r+0x12>
 800d06a:	2400      	movs	r4, #0
 800d06c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d070:	4628      	mov	r0, r5
 800d072:	4798      	blx	r3
 800d074:	2000      	movs	r0, #0
 800d076:	e7e0      	b.n	800d03a <_raise_r+0x12>

0800d078 <raise>:
 800d078:	4b02      	ldr	r3, [pc, #8]	; (800d084 <raise+0xc>)
 800d07a:	4601      	mov	r1, r0
 800d07c:	6818      	ldr	r0, [r3, #0]
 800d07e:	f7ff bfd3 	b.w	800d028 <_raise_r>
 800d082:	bf00      	nop
 800d084:	20000064 	.word	0x20000064

0800d088 <_kill_r>:
 800d088:	b538      	push	{r3, r4, r5, lr}
 800d08a:	4d07      	ldr	r5, [pc, #28]	; (800d0a8 <_kill_r+0x20>)
 800d08c:	2300      	movs	r3, #0
 800d08e:	4604      	mov	r4, r0
 800d090:	4608      	mov	r0, r1
 800d092:	4611      	mov	r1, r2
 800d094:	602b      	str	r3, [r5, #0]
 800d096:	f7f4 fffd 	bl	8002094 <_kill>
 800d09a:	1c43      	adds	r3, r0, #1
 800d09c:	d102      	bne.n	800d0a4 <_kill_r+0x1c>
 800d09e:	682b      	ldr	r3, [r5, #0]
 800d0a0:	b103      	cbz	r3, 800d0a4 <_kill_r+0x1c>
 800d0a2:	6023      	str	r3, [r4, #0]
 800d0a4:	bd38      	pop	{r3, r4, r5, pc}
 800d0a6:	bf00      	nop
 800d0a8:	20000aec 	.word	0x20000aec

0800d0ac <_getpid_r>:
 800d0ac:	f7f4 bfea 	b.w	8002084 <_getpid>

0800d0b0 <__sread>:
 800d0b0:	b510      	push	{r4, lr}
 800d0b2:	460c      	mov	r4, r1
 800d0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0b8:	f000 f894 	bl	800d1e4 <_read_r>
 800d0bc:	2800      	cmp	r0, #0
 800d0be:	bfab      	itete	ge
 800d0c0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800d0c2:	89a3      	ldrhlt	r3, [r4, #12]
 800d0c4:	181b      	addge	r3, r3, r0
 800d0c6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800d0ca:	bfac      	ite	ge
 800d0cc:	6563      	strge	r3, [r4, #84]	; 0x54
 800d0ce:	81a3      	strhlt	r3, [r4, #12]
 800d0d0:	bd10      	pop	{r4, pc}

0800d0d2 <__swrite>:
 800d0d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0d6:	461f      	mov	r7, r3
 800d0d8:	898b      	ldrh	r3, [r1, #12]
 800d0da:	05db      	lsls	r3, r3, #23
 800d0dc:	4605      	mov	r5, r0
 800d0de:	460c      	mov	r4, r1
 800d0e0:	4616      	mov	r6, r2
 800d0e2:	d505      	bpl.n	800d0f0 <__swrite+0x1e>
 800d0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0e8:	2302      	movs	r3, #2
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	f000 f868 	bl	800d1c0 <_lseek_r>
 800d0f0:	89a3      	ldrh	r3, [r4, #12]
 800d0f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d0f6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d0fa:	81a3      	strh	r3, [r4, #12]
 800d0fc:	4632      	mov	r2, r6
 800d0fe:	463b      	mov	r3, r7
 800d100:	4628      	mov	r0, r5
 800d102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d106:	f000 b817 	b.w	800d138 <_write_r>

0800d10a <__sseek>:
 800d10a:	b510      	push	{r4, lr}
 800d10c:	460c      	mov	r4, r1
 800d10e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d112:	f000 f855 	bl	800d1c0 <_lseek_r>
 800d116:	1c43      	adds	r3, r0, #1
 800d118:	89a3      	ldrh	r3, [r4, #12]
 800d11a:	bf15      	itete	ne
 800d11c:	6560      	strne	r0, [r4, #84]	; 0x54
 800d11e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800d122:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800d126:	81a3      	strheq	r3, [r4, #12]
 800d128:	bf18      	it	ne
 800d12a:	81a3      	strhne	r3, [r4, #12]
 800d12c:	bd10      	pop	{r4, pc}

0800d12e <__sclose>:
 800d12e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d132:	f000 b813 	b.w	800d15c <_close_r>
	...

0800d138 <_write_r>:
 800d138:	b538      	push	{r3, r4, r5, lr}
 800d13a:	4d07      	ldr	r5, [pc, #28]	; (800d158 <_write_r+0x20>)
 800d13c:	4604      	mov	r4, r0
 800d13e:	4608      	mov	r0, r1
 800d140:	4611      	mov	r1, r2
 800d142:	2200      	movs	r2, #0
 800d144:	602a      	str	r2, [r5, #0]
 800d146:	461a      	mov	r2, r3
 800d148:	f7f4 ffdb 	bl	8002102 <_write>
 800d14c:	1c43      	adds	r3, r0, #1
 800d14e:	d102      	bne.n	800d156 <_write_r+0x1e>
 800d150:	682b      	ldr	r3, [r5, #0]
 800d152:	b103      	cbz	r3, 800d156 <_write_r+0x1e>
 800d154:	6023      	str	r3, [r4, #0]
 800d156:	bd38      	pop	{r3, r4, r5, pc}
 800d158:	20000aec 	.word	0x20000aec

0800d15c <_close_r>:
 800d15c:	b538      	push	{r3, r4, r5, lr}
 800d15e:	4d06      	ldr	r5, [pc, #24]	; (800d178 <_close_r+0x1c>)
 800d160:	2300      	movs	r3, #0
 800d162:	4604      	mov	r4, r0
 800d164:	4608      	mov	r0, r1
 800d166:	602b      	str	r3, [r5, #0]
 800d168:	f7f4 ffe7 	bl	800213a <_close>
 800d16c:	1c43      	adds	r3, r0, #1
 800d16e:	d102      	bne.n	800d176 <_close_r+0x1a>
 800d170:	682b      	ldr	r3, [r5, #0]
 800d172:	b103      	cbz	r3, 800d176 <_close_r+0x1a>
 800d174:	6023      	str	r3, [r4, #0]
 800d176:	bd38      	pop	{r3, r4, r5, pc}
 800d178:	20000aec 	.word	0x20000aec

0800d17c <_fstat_r>:
 800d17c:	b538      	push	{r3, r4, r5, lr}
 800d17e:	4d07      	ldr	r5, [pc, #28]	; (800d19c <_fstat_r+0x20>)
 800d180:	2300      	movs	r3, #0
 800d182:	4604      	mov	r4, r0
 800d184:	4608      	mov	r0, r1
 800d186:	4611      	mov	r1, r2
 800d188:	602b      	str	r3, [r5, #0]
 800d18a:	f7f4 ffe2 	bl	8002152 <_fstat>
 800d18e:	1c43      	adds	r3, r0, #1
 800d190:	d102      	bne.n	800d198 <_fstat_r+0x1c>
 800d192:	682b      	ldr	r3, [r5, #0]
 800d194:	b103      	cbz	r3, 800d198 <_fstat_r+0x1c>
 800d196:	6023      	str	r3, [r4, #0]
 800d198:	bd38      	pop	{r3, r4, r5, pc}
 800d19a:	bf00      	nop
 800d19c:	20000aec 	.word	0x20000aec

0800d1a0 <_isatty_r>:
 800d1a0:	b538      	push	{r3, r4, r5, lr}
 800d1a2:	4d06      	ldr	r5, [pc, #24]	; (800d1bc <_isatty_r+0x1c>)
 800d1a4:	2300      	movs	r3, #0
 800d1a6:	4604      	mov	r4, r0
 800d1a8:	4608      	mov	r0, r1
 800d1aa:	602b      	str	r3, [r5, #0]
 800d1ac:	f7f4 ffe1 	bl	8002172 <_isatty>
 800d1b0:	1c43      	adds	r3, r0, #1
 800d1b2:	d102      	bne.n	800d1ba <_isatty_r+0x1a>
 800d1b4:	682b      	ldr	r3, [r5, #0]
 800d1b6:	b103      	cbz	r3, 800d1ba <_isatty_r+0x1a>
 800d1b8:	6023      	str	r3, [r4, #0]
 800d1ba:	bd38      	pop	{r3, r4, r5, pc}
 800d1bc:	20000aec 	.word	0x20000aec

0800d1c0 <_lseek_r>:
 800d1c0:	b538      	push	{r3, r4, r5, lr}
 800d1c2:	4d07      	ldr	r5, [pc, #28]	; (800d1e0 <_lseek_r+0x20>)
 800d1c4:	4604      	mov	r4, r0
 800d1c6:	4608      	mov	r0, r1
 800d1c8:	4611      	mov	r1, r2
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	602a      	str	r2, [r5, #0]
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	f7f4 ffda 	bl	8002188 <_lseek>
 800d1d4:	1c43      	adds	r3, r0, #1
 800d1d6:	d102      	bne.n	800d1de <_lseek_r+0x1e>
 800d1d8:	682b      	ldr	r3, [r5, #0]
 800d1da:	b103      	cbz	r3, 800d1de <_lseek_r+0x1e>
 800d1dc:	6023      	str	r3, [r4, #0]
 800d1de:	bd38      	pop	{r3, r4, r5, pc}
 800d1e0:	20000aec 	.word	0x20000aec

0800d1e4 <_read_r>:
 800d1e4:	b538      	push	{r3, r4, r5, lr}
 800d1e6:	4d07      	ldr	r5, [pc, #28]	; (800d204 <_read_r+0x20>)
 800d1e8:	4604      	mov	r4, r0
 800d1ea:	4608      	mov	r0, r1
 800d1ec:	4611      	mov	r1, r2
 800d1ee:	2200      	movs	r2, #0
 800d1f0:	602a      	str	r2, [r5, #0]
 800d1f2:	461a      	mov	r2, r3
 800d1f4:	f7f4 ff68 	bl	80020c8 <_read>
 800d1f8:	1c43      	adds	r3, r0, #1
 800d1fa:	d102      	bne.n	800d202 <_read_r+0x1e>
 800d1fc:	682b      	ldr	r3, [r5, #0]
 800d1fe:	b103      	cbz	r3, 800d202 <_read_r+0x1e>
 800d200:	6023      	str	r3, [r4, #0]
 800d202:	bd38      	pop	{r3, r4, r5, pc}
 800d204:	20000aec 	.word	0x20000aec

0800d208 <_init>:
 800d208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d20a:	bf00      	nop
 800d20c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d20e:	bc08      	pop	{r3}
 800d210:	469e      	mov	lr, r3
 800d212:	4770      	bx	lr

0800d214 <_fini>:
 800d214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d216:	bf00      	nop
 800d218:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d21a:	bc08      	pop	{r3}
 800d21c:	469e      	mov	lr, r3
 800d21e:	4770      	bx	lr
