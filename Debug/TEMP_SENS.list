
TEMP_SENS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008f94  08008f94  00018f94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800900c  0800900c  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800900c  0800900c  0001900c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009014  08009014  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009014  08009014  00019014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009018  08009018  00019018  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800901c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020090  2**0
                  CONTENTS
 10 .bss          00000898  20000090  20000090  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000928  20000928  00020090  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a600  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003df5  00000000  00000000  0003a6c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001660  00000000  00000000  0003e4b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000014c0  00000000  00000000  0003fb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026d1b  00000000  00000000  00040fd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d606  00000000  00000000  00067cf3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e04f4  00000000  00000000  000852f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001657ed  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000062f0  00000000  00000000  00165840  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000090 	.word	0x20000090
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008f7c 	.word	0x08008f7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000094 	.word	0x20000094
 80001cc:	08008f7c 	.word	0x08008f7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <Lcd_create>:
 */
Lcd_HandleTypeDef Lcd_create(
		Lcd_PortType port[], Lcd_PinType pin[],
		Lcd_PortType rs_port, Lcd_PinType rs_pin,
		Lcd_PortType en_port, Lcd_PinType en_pin, Lcd_ModeTypeDef mode)
{
 8000584:	b5b0      	push	{r4, r5, r7, lr}
 8000586:	b08a      	sub	sp, #40	; 0x28
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
 8000590:	603b      	str	r3, [r7, #0]
	Lcd_HandleTypeDef lcd;

	lcd.mode = mode;
 8000592:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8000596:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

	lcd.en_pin = en_pin;
 800059a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800059e:	84bb      	strh	r3, [r7, #36]	; 0x24
	lcd.en_port = en_port;
 80005a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80005a2:	623b      	str	r3, [r7, #32]

	lcd.rs_pin = rs_pin;
 80005a4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80005a6:	83bb      	strh	r3, [r7, #28]
	lcd.rs_port = rs_port;
 80005a8:	683b      	ldr	r3, [r7, #0]
 80005aa:	61bb      	str	r3, [r7, #24]

	lcd.data_pin = pin;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	617b      	str	r3, [r7, #20]
	lcd.data_port = port;
 80005b0:	68bb      	ldr	r3, [r7, #8]
 80005b2:	613b      	str	r3, [r7, #16]

	Lcd_init(&lcd);
 80005b4:	f107 0310 	add.w	r3, r7, #16
 80005b8:	4618      	mov	r0, r3
 80005ba:	f000 f80e 	bl	80005da <Lcd_init>

	return lcd;
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	461d      	mov	r5, r3
 80005c2:	f107 0410 	add.w	r4, r7, #16
 80005c6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80005c8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80005ca:	e894 0003 	ldmia.w	r4, {r0, r1}
 80005ce:	e885 0003 	stmia.w	r5, {r0, r1}
}
 80005d2:	68f8      	ldr	r0, [r7, #12]
 80005d4:	3728      	adds	r7, #40	; 0x28
 80005d6:	46bd      	mov	sp, r7
 80005d8:	bdb0      	pop	{r4, r5, r7, pc}

080005da <Lcd_init>:

/**
 * Initialize 16x2-lcd without cursor
 */
void Lcd_init(Lcd_HandleTypeDef * lcd)
{
 80005da:	b580      	push	{r7, lr}
 80005dc:	b082      	sub	sp, #8
 80005de:	af00      	add	r7, sp, #0
 80005e0:	6078      	str	r0, [r7, #4]
	if(lcd->mode == LCD_4_BIT_MODE)
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	7d9b      	ldrb	r3, [r3, #22]
 80005e6:	2b00      	cmp	r3, #0
 80005e8:	d10c      	bne.n	8000604 <Lcd_init+0x2a>
	{
			lcd_write_command(lcd, 0x33);
 80005ea:	2133      	movs	r1, #51	; 0x33
 80005ec:	6878      	ldr	r0, [r7, #4]
 80005ee:	f000 f86f 	bl	80006d0 <lcd_write_command>
			lcd_write_command(lcd, 0x32);
 80005f2:	2132      	movs	r1, #50	; 0x32
 80005f4:	6878      	ldr	r0, [r7, #4]
 80005f6:	f000 f86b 	bl	80006d0 <lcd_write_command>
			lcd_write_command(lcd, FUNCTION_SET | OPT_N);				// 4-bit mode
 80005fa:	2128      	movs	r1, #40	; 0x28
 80005fc:	6878      	ldr	r0, [r7, #4]
 80005fe:	f000 f867 	bl	80006d0 <lcd_write_command>
 8000602:	e003      	b.n	800060c <Lcd_init+0x32>
	}
	else
		lcd_write_command(lcd, FUNCTION_SET | OPT_DL | OPT_N);
 8000604:	2138      	movs	r1, #56	; 0x38
 8000606:	6878      	ldr	r0, [r7, #4]
 8000608:	f000 f862 	bl	80006d0 <lcd_write_command>


	lcd_write_command(lcd, CLEAR_DISPLAY);						// Clear screen
 800060c:	2101      	movs	r1, #1
 800060e:	6878      	ldr	r0, [r7, #4]
 8000610:	f000 f85e 	bl	80006d0 <lcd_write_command>
	lcd_write_command(lcd, DISPLAY_ON_OFF_CONTROL | OPT_D);		// Lcd-on, cursor-off, no-blink
 8000614:	210c      	movs	r1, #12
 8000616:	6878      	ldr	r0, [r7, #4]
 8000618:	f000 f85a 	bl	80006d0 <lcd_write_command>
	lcd_write_command(lcd, ENTRY_MODE_SET | OPT_INC);			// Increment cursor
 800061c:	2106      	movs	r1, #6
 800061e:	6878      	ldr	r0, [r7, #4]
 8000620:	f000 f856 	bl	80006d0 <lcd_write_command>
}
 8000624:	bf00      	nop
 8000626:	3708      	adds	r7, #8
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <Lcd_int>:

/**
 * Write a number on the current position
 */
void Lcd_int(Lcd_HandleTypeDef * lcd, int number)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b086      	sub	sp, #24
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
 8000634:	6039      	str	r1, [r7, #0]
	char buffer[11];
	sprintf(buffer, "%d", number);
 8000636:	f107 030c 	add.w	r3, r7, #12
 800063a:	683a      	ldr	r2, [r7, #0]
 800063c:	4906      	ldr	r1, [pc, #24]	; (8000658 <Lcd_int+0x2c>)
 800063e:	4618      	mov	r0, r3
 8000640:	f008 f91e 	bl	8008880 <siprintf>

	Lcd_string(lcd, buffer);
 8000644:	f107 030c 	add.w	r3, r7, #12
 8000648:	4619      	mov	r1, r3
 800064a:	6878      	ldr	r0, [r7, #4]
 800064c:	f000 f806 	bl	800065c <Lcd_string>
}
 8000650:	bf00      	nop
 8000652:	3718      	adds	r7, #24
 8000654:	46bd      	mov	sp, r7
 8000656:	bd80      	pop	{r7, pc}
 8000658:	08008f94 	.word	0x08008f94

0800065c <Lcd_string>:

/**
 * Write a string on the current position
 */
void Lcd_string(Lcd_HandleTypeDef * lcd, char * string)
{
 800065c:	b590      	push	{r4, r7, lr}
 800065e:	b085      	sub	sp, #20
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
	for(uint8_t i = 0; i < strlen(string); i++)
 8000666:	2300      	movs	r3, #0
 8000668:	73fb      	strb	r3, [r7, #15]
 800066a:	e00a      	b.n	8000682 <Lcd_string+0x26>
	{
		lcd_write_data(lcd, string[i]);
 800066c:	7bfb      	ldrb	r3, [r7, #15]
 800066e:	683a      	ldr	r2, [r7, #0]
 8000670:	4413      	add	r3, r2
 8000672:	781b      	ldrb	r3, [r3, #0]
 8000674:	4619      	mov	r1, r3
 8000676:	6878      	ldr	r0, [r7, #4]
 8000678:	f000 f858 	bl	800072c <lcd_write_data>
	for(uint8_t i = 0; i < strlen(string); i++)
 800067c:	7bfb      	ldrb	r3, [r7, #15]
 800067e:	3301      	adds	r3, #1
 8000680:	73fb      	strb	r3, [r7, #15]
 8000682:	7bfc      	ldrb	r4, [r7, #15]
 8000684:	6838      	ldr	r0, [r7, #0]
 8000686:	f7ff fda3 	bl	80001d0 <strlen>
 800068a:	4603      	mov	r3, r0
 800068c:	429c      	cmp	r4, r3
 800068e:	d3ed      	bcc.n	800066c <Lcd_string+0x10>
	}
}
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	3714      	adds	r7, #20
 8000696:	46bd      	mov	sp, r7
 8000698:	bd90      	pop	{r4, r7, pc}
	...

0800069c <Lcd_cursor>:

/**
 * Set the cursor position
 */
void Lcd_cursor(Lcd_HandleTypeDef * lcd, uint8_t row, uint8_t col)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b082      	sub	sp, #8
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	70fb      	strb	r3, [r7, #3]
 80006a8:	4613      	mov	r3, r2
 80006aa:	70bb      	strb	r3, [r7, #2]
	#ifdef LCD20xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_20[row] + col);
	#endif

	#ifdef LCD16xN
	lcd_write_command(lcd, SET_DDRAM_ADDR + ROW_16[row] + col);
 80006ac:	78fb      	ldrb	r3, [r7, #3]
 80006ae:	4a07      	ldr	r2, [pc, #28]	; (80006cc <Lcd_cursor+0x30>)
 80006b0:	5cd2      	ldrb	r2, [r2, r3]
 80006b2:	78bb      	ldrb	r3, [r7, #2]
 80006b4:	4413      	add	r3, r2
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	3b80      	subs	r3, #128	; 0x80
 80006ba:	b2db      	uxtb	r3, r3
 80006bc:	4619      	mov	r1, r3
 80006be:	6878      	ldr	r0, [r7, #4]
 80006c0:	f000 f806 	bl	80006d0 <lcd_write_command>
	#endif
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}
 80006cc:	08008fbc 	.word	0x08008fbc

080006d0 <lcd_write_command>:

/**
 * Write a byte to the command register
 */
void lcd_write_command(Lcd_HandleTypeDef * lcd, uint8_t command)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b082      	sub	sp, #8
 80006d4:	af00      	add	r7, sp, #0
 80006d6:	6078      	str	r0, [r7, #4]
 80006d8:	460b      	mov	r3, r1
 80006da:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_COMMAND_REG);		// Write to command register
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	6898      	ldr	r0, [r3, #8]
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	899b      	ldrh	r3, [r3, #12]
 80006e4:	2200      	movs	r2, #0
 80006e6:	4619      	mov	r1, r3
 80006e8:	f001 fb78 	bl	8001ddc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	7d9b      	ldrb	r3, [r3, #22]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d111      	bne.n	8000718 <lcd_write_command+0x48>
	{
		lcd_write(lcd, (command >> 4), LCD_NIB);
 80006f4:	78fb      	ldrb	r3, [r7, #3]
 80006f6:	091b      	lsrs	r3, r3, #4
 80006f8:	b2db      	uxtb	r3, r3
 80006fa:	2204      	movs	r2, #4
 80006fc:	4619      	mov	r1, r3
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f842 	bl	8000788 <lcd_write>
		lcd_write(lcd, command & 0x0F, LCD_NIB);
 8000704:	78fb      	ldrb	r3, [r7, #3]
 8000706:	f003 030f 	and.w	r3, r3, #15
 800070a:	b2db      	uxtb	r3, r3
 800070c:	2204      	movs	r2, #4
 800070e:	4619      	mov	r1, r3
 8000710:	6878      	ldr	r0, [r7, #4]
 8000712:	f000 f839 	bl	8000788 <lcd_write>
	else
	{
		lcd_write(lcd, command, LCD_BYTE);
	}

}
 8000716:	e005      	b.n	8000724 <lcd_write_command+0x54>
		lcd_write(lcd, command, LCD_BYTE);
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	2208      	movs	r2, #8
 800071c:	4619      	mov	r1, r3
 800071e:	6878      	ldr	r0, [r7, #4]
 8000720:	f000 f832 	bl	8000788 <lcd_write>
}
 8000724:	bf00      	nop
 8000726:	3708      	adds	r7, #8
 8000728:	46bd      	mov	sp, r7
 800072a:	bd80      	pop	{r7, pc}

0800072c <lcd_write_data>:

/**
 * Write a byte to the data register
 */
void lcd_write_data(Lcd_HandleTypeDef * lcd, uint8_t data)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
 8000732:	6078      	str	r0, [r7, #4]
 8000734:	460b      	mov	r3, r1
 8000736:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(lcd->rs_port, lcd->rs_pin, LCD_DATA_REG);			// Write to data register
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	6898      	ldr	r0, [r3, #8]
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	899b      	ldrh	r3, [r3, #12]
 8000740:	2201      	movs	r2, #1
 8000742:	4619      	mov	r1, r3
 8000744:	f001 fb4a 	bl	8001ddc <HAL_GPIO_WritePin>

	if(lcd->mode == LCD_4_BIT_MODE)
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	7d9b      	ldrb	r3, [r3, #22]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d111      	bne.n	8000774 <lcd_write_data+0x48>
	{
		lcd_write(lcd, data >> 4, LCD_NIB);
 8000750:	78fb      	ldrb	r3, [r7, #3]
 8000752:	091b      	lsrs	r3, r3, #4
 8000754:	b2db      	uxtb	r3, r3
 8000756:	2204      	movs	r2, #4
 8000758:	4619      	mov	r1, r3
 800075a:	6878      	ldr	r0, [r7, #4]
 800075c:	f000 f814 	bl	8000788 <lcd_write>
		lcd_write(lcd, data & 0x0F, LCD_NIB);
 8000760:	78fb      	ldrb	r3, [r7, #3]
 8000762:	f003 030f 	and.w	r3, r3, #15
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2204      	movs	r2, #4
 800076a:	4619      	mov	r1, r3
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f000 f80b 	bl	8000788 <lcd_write>
	else
	{
		lcd_write(lcd, data, LCD_BYTE);
	}

}
 8000772:	e005      	b.n	8000780 <lcd_write_data+0x54>
		lcd_write(lcd, data, LCD_BYTE);
 8000774:	78fb      	ldrb	r3, [r7, #3]
 8000776:	2208      	movs	r2, #8
 8000778:	4619      	mov	r1, r3
 800077a:	6878      	ldr	r0, [r7, #4]
 800077c:	f000 f804 	bl	8000788 <lcd_write>
}
 8000780:	bf00      	nop
 8000782:	3708      	adds	r7, #8
 8000784:	46bd      	mov	sp, r7
 8000786:	bd80      	pop	{r7, pc}

08000788 <lcd_write>:

/**
 * Set len bits on the bus and toggle the enable line
 */
void lcd_write(Lcd_HandleTypeDef * lcd, uint8_t data, uint8_t len)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
 8000790:	460b      	mov	r3, r1
 8000792:	70fb      	strb	r3, [r7, #3]
 8000794:	4613      	mov	r3, r2
 8000796:	70bb      	strb	r3, [r7, #2]
	for(uint8_t i = 0; i < len; i++)
 8000798:	2300      	movs	r3, #0
 800079a:	73fb      	strb	r3, [r7, #15]
 800079c:	e019      	b.n	80007d2 <lcd_write+0x4a>
	{
		HAL_GPIO_WritePin(lcd->data_port[i], lcd->data_pin[i], (data >> i) & 0x01);
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	7bfb      	ldrb	r3, [r7, #15]
 80007a4:	009b      	lsls	r3, r3, #2
 80007a6:	4413      	add	r3, r2
 80007a8:	6818      	ldr	r0, [r3, #0]
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	685a      	ldr	r2, [r3, #4]
 80007ae:	7bfb      	ldrb	r3, [r7, #15]
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	4413      	add	r3, r2
 80007b4:	8819      	ldrh	r1, [r3, #0]
 80007b6:	78fa      	ldrb	r2, [r7, #3]
 80007b8:	7bfb      	ldrb	r3, [r7, #15]
 80007ba:	fa42 f303 	asr.w	r3, r2, r3
 80007be:	b2db      	uxtb	r3, r3
 80007c0:	f003 0301 	and.w	r3, r3, #1
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	461a      	mov	r2, r3
 80007c8:	f001 fb08 	bl	8001ddc <HAL_GPIO_WritePin>
	for(uint8_t i = 0; i < len; i++)
 80007cc:	7bfb      	ldrb	r3, [r7, #15]
 80007ce:	3301      	adds	r3, #1
 80007d0:	73fb      	strb	r3, [r7, #15]
 80007d2:	7bfa      	ldrb	r2, [r7, #15]
 80007d4:	78bb      	ldrb	r3, [r7, #2]
 80007d6:	429a      	cmp	r2, r3
 80007d8:	d3e1      	bcc.n	800079e <lcd_write+0x16>
	}

	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 1);
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	6918      	ldr	r0, [r3, #16]
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	8a9b      	ldrh	r3, [r3, #20]
 80007e2:	2201      	movs	r2, #1
 80007e4:	4619      	mov	r1, r3
 80007e6:	f001 faf9 	bl	8001ddc <HAL_GPIO_WritePin>
	DELAY(1);
 80007ea:	2001      	movs	r0, #1
 80007ec:	f000 fdc2 	bl	8001374 <HAL_Delay>
	HAL_GPIO_WritePin(lcd->en_port, lcd->en_pin, 0); 		// Data receive on falling edge
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	6918      	ldr	r0, [r3, #16]
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	8a9b      	ldrh	r3, [r3, #20]
 80007f8:	2200      	movs	r2, #0
 80007fa:	4619      	mov	r1, r3
 80007fc:	f001 faee 	bl	8001ddc <HAL_GPIO_WritePin>
}
 8000800:	bf00      	nop
 8000802:	3710      	adds	r7, #16
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b590      	push	{r4, r7, lr}
 800080a:	b091      	sub	sp, #68	; 0x44
 800080c:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800080e:	f000 fd3f 	bl	8001290 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000812:	f000 f84d 	bl	80008b0 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000816:	f000 f9bf 	bl	8000b98 <MX_GPIO_Init>
	MX_ADC1_Init();
 800081a:	f000 f8b3 	bl	8000984 <MX_ADC1_Init>
	MX_I2C1_Init();
 800081e:	f000 f903 	bl	8000a28 <MX_I2C1_Init>
	MX_I2S3_Init();
 8000822:	f000 f92f 	bl	8000a84 <MX_I2S3_Init>
	MX_SPI1_Init();
 8000826:	f000 f95d 	bl	8000ae4 <MX_SPI1_Init>
	MX_USB_HOST_Init();
 800082a:	f007 fbef 	bl	800800c <MX_USB_HOST_Init>
	MX_TIM11_Init();
 800082e:	f000 f98f 	bl	8000b50 <MX_TIM11_Init>
	/* USER CODE BEGIN 2 */

	Lcd_PortType ports[] = {
 8000832:	4b1a      	ldr	r3, [pc, #104]	; (800089c <main+0x94>)
 8000834:	f107 0420 	add.w	r4, r7, #32
 8000838:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800083a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			LCD_DB5_GPIO_Port,
			LCD_DB6_GPIO_Port,
			LCD_DB7_GPIO_Port
	};

	Lcd_PinType pins[] = {
 800083e:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <main+0x98>)
 8000840:	f107 0318 	add.w	r3, r7, #24
 8000844:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000848:	e883 0003 	stmia.w	r3, {r0, r1}
			LCD_DB5_Pin,
			LCD_DB6_Pin,
			LCD_DB7_Pin
	};

	Lcd_HandleTypeDef lcd = Lcd_create(
 800084c:	4638      	mov	r0, r7
 800084e:	f107 0218 	add.w	r2, r7, #24
 8000852:	f107 0120 	add.w	r1, r7, #32
 8000856:	2300      	movs	r3, #0
 8000858:	9303      	str	r3, [sp, #12]
 800085a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800085e:	9302      	str	r3, [sp, #8]
 8000860:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <main+0x9c>)
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	2380      	movs	r3, #128	; 0x80
 8000866:	9300      	str	r3, [sp, #0]
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <main+0x9c>)
 800086a:	f7ff fe8b 	bl	8000584 <Lcd_create>
			LCD_ENA_GPIO_Port,
			LCD_ENA_Pin,
			LCD_4_BIT_MODE
	);

	Lcd_string(&lcd, "4ilo");
 800086e:	463b      	mov	r3, r7
 8000870:	490d      	ldr	r1, [pc, #52]	; (80008a8 <main+0xa0>)
 8000872:	4618      	mov	r0, r3
 8000874:	f7ff fef2 	bl	800065c <Lcd_string>

	Lcd_cursor(&lcd, 1,6);
 8000878:	463b      	mov	r3, r7
 800087a:	2206      	movs	r2, #6
 800087c:	2101      	movs	r1, #1
 800087e:	4618      	mov	r0, r3
 8000880:	f7ff ff0c 	bl	800069c <Lcd_cursor>
	Lcd_int(&lcd, -500);
 8000884:	463b      	mov	r3, r7
 8000886:	4909      	ldr	r1, [pc, #36]	; (80008ac <main+0xa4>)
 8000888:	4618      	mov	r0, r3
 800088a:	f7ff fecf 	bl	800062c <Lcd_int>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 800088e:	f007 fbe3 	bl	8008058 <MX_USB_HOST_Process>
 8000892:	2300      	movs	r3, #0

    /* USER CODE BEGIN 3 */

    /* USER CODE END 3 */
}
 8000894:	4618      	mov	r0, r3
 8000896:	3734      	adds	r7, #52	; 0x34
 8000898:	46bd      	mov	sp, r7
 800089a:	bd90      	pop	{r4, r7, pc}
 800089c:	08008fa0 	.word	0x08008fa0
 80008a0:	08008fb0 	.word	0x08008fb0
 80008a4:	40021000 	.word	0x40021000
 80008a8:	08008f98 	.word	0x08008f98
 80008ac:	fffffe0c 	.word	0xfffffe0c

080008b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b094      	sub	sp, #80	; 0x50
 80008b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008b6:	f107 0320 	add.w	r3, r7, #32
 80008ba:	2230      	movs	r2, #48	; 0x30
 80008bc:	2100      	movs	r1, #0
 80008be:	4618      	mov	r0, r3
 80008c0:	f007 fee6 	bl	8008690 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]
 80008d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008d4:	2300      	movs	r3, #0
 80008d6:	60bb      	str	r3, [r7, #8]
 80008d8:	4b28      	ldr	r3, [pc, #160]	; (800097c <SystemClock_Config+0xcc>)
 80008da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008dc:	4a27      	ldr	r2, [pc, #156]	; (800097c <SystemClock_Config+0xcc>)
 80008de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008e2:	6413      	str	r3, [r2, #64]	; 0x40
 80008e4:	4b25      	ldr	r3, [pc, #148]	; (800097c <SystemClock_Config+0xcc>)
 80008e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008f0:	2300      	movs	r3, #0
 80008f2:	607b      	str	r3, [r7, #4]
 80008f4:	4b22      	ldr	r3, [pc, #136]	; (8000980 <SystemClock_Config+0xd0>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a21      	ldr	r2, [pc, #132]	; (8000980 <SystemClock_Config+0xd0>)
 80008fa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008fe:	6013      	str	r3, [r2, #0]
 8000900:	4b1f      	ldr	r3, [pc, #124]	; (8000980 <SystemClock_Config+0xd0>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800090c:	2301      	movs	r3, #1
 800090e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000910:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000916:	2302      	movs	r3, #2
 8000918:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800091a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800091e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000920:	2308      	movs	r3, #8
 8000922:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000924:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000928:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800092a:	2302      	movs	r3, #2
 800092c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800092e:	2307      	movs	r3, #7
 8000930:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000932:	f107 0320 	add.w	r3, r7, #32
 8000936:	4618      	mov	r0, r3
 8000938:	f003 fc58 	bl	80041ec <HAL_RCC_OscConfig>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000942:	f000 fa5b 	bl	8000dfc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000946:	230f      	movs	r3, #15
 8000948:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800094a:	2302      	movs	r3, #2
 800094c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094e:	2300      	movs	r3, #0
 8000950:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000952:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000956:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000958:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800095c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800095e:	f107 030c 	add.w	r3, r7, #12
 8000962:	2105      	movs	r1, #5
 8000964:	4618      	mov	r0, r3
 8000966:	f003 feb9 	bl	80046dc <HAL_RCC_ClockConfig>
 800096a:	4603      	mov	r3, r0
 800096c:	2b00      	cmp	r3, #0
 800096e:	d001      	beq.n	8000974 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000970:	f000 fa44 	bl	8000dfc <Error_Handler>
  }
}
 8000974:	bf00      	nop
 8000976:	3750      	adds	r7, #80	; 0x50
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	40023800 	.word	0x40023800
 8000980:	40007000 	.word	0x40007000

08000984 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b084      	sub	sp, #16
 8000988:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800098a:	463b      	mov	r3, r7
 800098c:	2200      	movs	r2, #0
 800098e:	601a      	str	r2, [r3, #0]
 8000990:	605a      	str	r2, [r3, #4]
 8000992:	609a      	str	r2, [r3, #8]
 8000994:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000996:	4b21      	ldr	r3, [pc, #132]	; (8000a1c <MX_ADC1_Init+0x98>)
 8000998:	4a21      	ldr	r2, [pc, #132]	; (8000a20 <MX_ADC1_Init+0x9c>)
 800099a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <MX_ADC1_Init+0x98>)
 800099e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80009a2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80009a4:	4b1d      	ldr	r3, [pc, #116]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80009aa:	4b1c      	ldr	r3, [pc, #112]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80009b0:	4b1a      	ldr	r3, [pc, #104]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80009b6:	4b19      	ldr	r3, [pc, #100]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80009be:	4b17      	ldr	r3, [pc, #92]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009c0:	2200      	movs	r2, #0
 80009c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80009c4:	4b15      	ldr	r3, [pc, #84]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009c6:	4a17      	ldr	r2, [pc, #92]	; (8000a24 <MX_ADC1_Init+0xa0>)
 80009c8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80009ca:	4b14      	ldr	r3, [pc, #80]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80009d0:	4b12      	ldr	r3, [pc, #72]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009d2:	2201      	movs	r2, #1
 80009d4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80009d6:	4b11      	ldr	r3, [pc, #68]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009d8:	2200      	movs	r2, #0
 80009da:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80009de:	4b0f      	ldr	r3, [pc, #60]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009e0:	2201      	movs	r2, #1
 80009e2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80009e4:	480d      	ldr	r0, [pc, #52]	; (8000a1c <MX_ADC1_Init+0x98>)
 80009e6:	f000 fce9 	bl	80013bc <HAL_ADC_Init>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d001      	beq.n	80009f4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80009f0:	f000 fa04 	bl	8000dfc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80009f4:	2309      	movs	r3, #9
 80009f6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80009f8:	2301      	movs	r3, #1
 80009fa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80009fc:	2300      	movs	r3, #0
 80009fe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a00:	463b      	mov	r3, r7
 8000a02:	4619      	mov	r1, r3
 8000a04:	4805      	ldr	r0, [pc, #20]	; (8000a1c <MX_ADC1_Init+0x98>)
 8000a06:	f000 fd1d 	bl	8001444 <HAL_ADC_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000a10:	f000 f9f4 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000a14:	bf00      	nop
 8000a16:	3710      	adds	r7, #16
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	200000ac 	.word	0x200000ac
 8000a20:	40012000 	.word	0x40012000
 8000a24:	0f000001 	.word	0x0f000001

08000a28 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a2c:	4b12      	ldr	r3, [pc, #72]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a2e:	4a13      	ldr	r2, [pc, #76]	; (8000a7c <MX_I2C1_Init+0x54>)
 8000a30:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a32:	4b11      	ldr	r3, [pc, #68]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a34:	4a12      	ldr	r2, [pc, #72]	; (8000a80 <MX_I2C1_Init+0x58>)
 8000a36:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a38:	4b0f      	ldr	r3, [pc, #60]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a3e:	4b0e      	ldr	r3, [pc, #56]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a44:	4b0c      	ldr	r3, [pc, #48]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a46:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a4a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a4c:	4b0a      	ldr	r3, [pc, #40]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a52:	4b09      	ldr	r3, [pc, #36]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a58:	4b07      	ldr	r3, [pc, #28]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a5e:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <MX_I2C1_Init+0x50>)
 8000a66:	f002 fddd 	bl	8003624 <HAL_I2C_Init>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d001      	beq.n	8000a74 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a70:	f000 f9c4 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a74:	bf00      	nop
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	200000f4 	.word	0x200000f4
 8000a7c:	40005400 	.word	0x40005400
 8000a80:	000186a0 	.word	0x000186a0

08000a84 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000a88:	4b13      	ldr	r3, [pc, #76]	; (8000ad8 <MX_I2S3_Init+0x54>)
 8000a8a:	4a14      	ldr	r2, [pc, #80]	; (8000adc <MX_I2S3_Init+0x58>)
 8000a8c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000a8e:	4b12      	ldr	r3, [pc, #72]	; (8000ad8 <MX_I2S3_Init+0x54>)
 8000a90:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a94:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000a96:	4b10      	ldr	r3, [pc, #64]	; (8000ad8 <MX_I2S3_Init+0x54>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000a9c:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <MX_I2S3_Init+0x54>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000aa2:	4b0d      	ldr	r3, [pc, #52]	; (8000ad8 <MX_I2S3_Init+0x54>)
 8000aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000aa8:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <MX_I2S3_Init+0x54>)
 8000aac:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <MX_I2S3_Init+0x5c>)
 8000aae:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000ab0:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <MX_I2S3_Init+0x54>)
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000ab6:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <MX_I2S3_Init+0x54>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000abc:	4b06      	ldr	r3, [pc, #24]	; (8000ad8 <MX_I2S3_Init+0x54>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000ac2:	4805      	ldr	r0, [pc, #20]	; (8000ad8 <MX_I2S3_Init+0x54>)
 8000ac4:	f002 fef2 	bl	80038ac <HAL_I2S_Init>
 8000ac8:	4603      	mov	r3, r0
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	d001      	beq.n	8000ad2 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000ace:	f000 f995 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000148 	.word	0x20000148
 8000adc:	40003c00 	.word	0x40003c00
 8000ae0:	00017700 	.word	0x00017700

08000ae4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ae8:	4b17      	ldr	r3, [pc, #92]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000aea:	4a18      	ldr	r2, [pc, #96]	; (8000b4c <MX_SPI1_Init+0x68>)
 8000aec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000aee:	4b16      	ldr	r3, [pc, #88]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000af0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000af4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000af6:	4b14      	ldr	r3, [pc, #80]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000afc:	4b12      	ldr	r3, [pc, #72]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000afe:	2200      	movs	r2, #0
 8000b00:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b02:	4b11      	ldr	r3, [pc, #68]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b04:	2200      	movs	r2, #0
 8000b06:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b08:	4b0f      	ldr	r3, [pc, #60]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b0e:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b10:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b14:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b16:	4b0c      	ldr	r3, [pc, #48]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b1c:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b22:	4b09      	ldr	r3, [pc, #36]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b30:	220a      	movs	r2, #10
 8000b32:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b34:	4804      	ldr	r0, [pc, #16]	; (8000b48 <MX_SPI1_Init+0x64>)
 8000b36:	f004 f91d 	bl	8004d74 <HAL_SPI_Init>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	d001      	beq.n	8000b44 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b40:	f000 f95c 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b44:	bf00      	nop
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20000190 	.word	0x20000190
 8000b4c:	40013000 	.word	0x40013000

08000b50 <MX_TIM11_Init>:
  * @brief TIM11 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM11_Init(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000b54:	4b0e      	ldr	r3, [pc, #56]	; (8000b90 <MX_TIM11_Init+0x40>)
 8000b56:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <MX_TIM11_Init+0x44>)
 8000b58:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 0;
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <MX_TIM11_Init+0x40>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b60:	4b0b      	ldr	r3, [pc, #44]	; (8000b90 <MX_TIM11_Init+0x40>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 65535;
 8000b66:	4b0a      	ldr	r3, [pc, #40]	; (8000b90 <MX_TIM11_Init+0x40>)
 8000b68:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b6c:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b6e:	4b08      	ldr	r3, [pc, #32]	; (8000b90 <MX_TIM11_Init+0x40>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <MX_TIM11_Init+0x40>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000b7a:	4805      	ldr	r0, [pc, #20]	; (8000b90 <MX_TIM11_Init+0x40>)
 8000b7c:	f004 f983 	bl	8004e86 <HAL_TIM_Base_Init>
 8000b80:	4603      	mov	r3, r0
 8000b82:	2b00      	cmp	r3, #0
 8000b84:	d001      	beq.n	8000b8a <MX_TIM11_Init+0x3a>
  {
    Error_Handler();
 8000b86:	f000 f939 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000b8a:	bf00      	nop
 8000b8c:	bd80      	pop	{r7, pc}
 8000b8e:	bf00      	nop
 8000b90:	200001e8 	.word	0x200001e8
 8000b94:	40014800 	.word	0x40014800

08000b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b08c      	sub	sp, #48	; 0x30
 8000b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b9e:	f107 031c 	add.w	r3, r7, #28
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	601a      	str	r2, [r3, #0]
 8000ba6:	605a      	str	r2, [r3, #4]
 8000ba8:	609a      	str	r2, [r3, #8]
 8000baa:	60da      	str	r2, [r3, #12]
 8000bac:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000bae:	2300      	movs	r3, #0
 8000bb0:	61bb      	str	r3, [r7, #24]
 8000bb2:	4b8c      	ldr	r3, [pc, #560]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	4a8b      	ldr	r2, [pc, #556]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000bb8:	f043 0310 	orr.w	r3, r3, #16
 8000bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bbe:	4b89      	ldr	r3, [pc, #548]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	f003 0310 	and.w	r3, r3, #16
 8000bc6:	61bb      	str	r3, [r7, #24]
 8000bc8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	617b      	str	r3, [r7, #20]
 8000bce:	4b85      	ldr	r3, [pc, #532]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	4a84      	ldr	r2, [pc, #528]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bda:	4b82      	ldr	r3, [pc, #520]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	617b      	str	r3, [r7, #20]
 8000be4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
 8000bea:	4b7e      	ldr	r3, [pc, #504]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bee:	4a7d      	ldr	r2, [pc, #500]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000bf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bf6:	4b7b      	ldr	r3, [pc, #492]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bfe:	613b      	str	r3, [r7, #16]
 8000c00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c02:	2300      	movs	r3, #0
 8000c04:	60fb      	str	r3, [r7, #12]
 8000c06:	4b77      	ldr	r3, [pc, #476]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a76      	ldr	r2, [pc, #472]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000c0c:	f043 0301 	orr.w	r3, r3, #1
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b74      	ldr	r3, [pc, #464]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f003 0301 	and.w	r3, r3, #1
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c1e:	2300      	movs	r3, #0
 8000c20:	60bb      	str	r3, [r7, #8]
 8000c22:	4b70      	ldr	r3, [pc, #448]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a6f      	ldr	r2, [pc, #444]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000c28:	f043 0302 	orr.w	r3, r3, #2
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b6d      	ldr	r3, [pc, #436]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0302 	and.w	r3, r3, #2
 8000c36:	60bb      	str	r3, [r7, #8]
 8000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	607b      	str	r3, [r7, #4]
 8000c3e:	4b69      	ldr	r3, [pc, #420]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a68      	ldr	r2, [pc, #416]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000c44:	f043 0308 	orr.w	r3, r3, #8
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b66      	ldr	r3, [pc, #408]	; (8000de4 <MX_GPIO_Init+0x24c>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0308 	and.w	r3, r3, #8
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CS_I2C_SPI_Pin|LCD_RS_Pin|LCD_RW_Pin|LCD_ENA_Pin
 8000c56:	2200      	movs	r2, #0
 8000c58:	f64f 4188 	movw	r1, #64648	; 0xfc88
 8000c5c:	4862      	ldr	r0, [pc, #392]	; (8000de8 <MX_GPIO_Init+0x250>)
 8000c5e:	f001 f8bd 	bl	8001ddc <HAL_GPIO_WritePin>
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000c62:	2201      	movs	r2, #1
 8000c64:	2101      	movs	r1, #1
 8000c66:	4861      	ldr	r0, [pc, #388]	; (8000dec <MX_GPIO_Init+0x254>)
 8000c68:	f001 f8b8 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000c72:	485f      	ldr	r0, [pc, #380]	; (8000df0 <MX_GPIO_Init+0x258>)
 8000c74:	f001 f8b2 	bl	8001ddc <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_DOWN_GPIO_Port, BTN_DOWN_Pin, GPIO_PIN_RESET);
 8000c78:	2200      	movs	r2, #0
 8000c7a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000c7e:	485b      	ldr	r0, [pc, #364]	; (8000dec <MX_GPIO_Init+0x254>)
 8000c80:	f001 f8ac 	bl	8001ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CS_I2C_SPI_Pin LCD_RS_Pin LCD_RW_Pin LCD_ENA_Pin
                           LCD_DB4_Pin LCD_DB5_Pin LCD_DB6_Pin LCD_DB7_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin|LCD_RS_Pin|LCD_RW_Pin|LCD_ENA_Pin
 8000c84:	f64f 4388 	movw	r3, #64648	; 0xfc88
 8000c88:	61fb      	str	r3, [r7, #28]
                          |LCD_DB4_Pin|LCD_DB5_Pin|LCD_DB6_Pin|LCD_DB7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000c96:	f107 031c 	add.w	r3, r7, #28
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4852      	ldr	r0, [pc, #328]	; (8000de8 <MX_GPIO_Init+0x250>)
 8000c9e:	f000 ff01 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin BTN_DOWN_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|BTN_DOWN_Pin;
 8000ca2:	f240 1301 	movw	r3, #257	; 0x101
 8000ca6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cac:	2300      	movs	r3, #0
 8000cae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cb4:	f107 031c 	add.w	r3, r7, #28
 8000cb8:	4619      	mov	r1, r3
 8000cba:	484c      	ldr	r0, [pc, #304]	; (8000dec <MX_GPIO_Init+0x254>)
 8000cbc:	f000 fef2 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000cc0:	2308      	movs	r3, #8
 8000cc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cc4:	2302      	movs	r3, #2
 8000cc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc8:	2300      	movs	r3, #0
 8000cca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000cd0:	2305      	movs	r3, #5
 8000cd2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000cd4:	f107 031c 	add.w	r3, r7, #28
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4844      	ldr	r0, [pc, #272]	; (8000dec <MX_GPIO_Init+0x254>)
 8000cdc:	f000 fee2 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ce0:	2301      	movs	r3, #1
 8000ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000ce4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ce8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cee:	f107 031c 	add.w	r3, r7, #28
 8000cf2:	4619      	mov	r1, r3
 8000cf4:	483f      	ldr	r0, [pc, #252]	; (8000df4 <MX_GPIO_Init+0x25c>)
 8000cf6:	f000 fed5 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	2300      	movs	r3, #0
 8000d04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000d06:	f107 031c 	add.w	r3, r7, #28
 8000d0a:	4619      	mov	r1, r3
 8000d0c:	483a      	ldr	r0, [pc, #232]	; (8000df8 <MX_GPIO_Init+0x260>)
 8000d0e:	f000 fec9 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000d12:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d18:	2302      	movs	r3, #2
 8000d1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d20:	2300      	movs	r3, #0
 8000d22:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8000d24:	2301      	movs	r3, #1
 8000d26:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000d28:	f107 031c 	add.w	r3, r7, #28
 8000d2c:	4619      	mov	r1, r3
 8000d2e:	482e      	ldr	r0, [pc, #184]	; (8000de8 <MX_GPIO_Init+0x250>)
 8000d30:	f000 feb8 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000d34:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d3a:	2302      	movs	r3, #2
 8000d3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d42:	2300      	movs	r3, #0
 8000d44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000d46:	2305      	movs	r3, #5
 8000d48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000d4a:	f107 031c 	add.w	r3, r7, #28
 8000d4e:	4619      	mov	r1, r3
 8000d50:	4829      	ldr	r0, [pc, #164]	; (8000df8 <MX_GPIO_Init+0x260>)
 8000d52:	f000 fea7 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000d56:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000d5a:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d5c:	2301      	movs	r3, #1
 8000d5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d60:	2300      	movs	r3, #0
 8000d62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d68:	f107 031c 	add.w	r3, r7, #28
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4820      	ldr	r0, [pc, #128]	; (8000df0 <MX_GPIO_Init+0x258>)
 8000d70:	f000 fe98 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pins : BTN_UP_Pin BTN_LEFT_Pin BTN_RIGHT_Pin */
  GPIO_InitStruct.Pin = BTN_UP_Pin|BTN_LEFT_Pin|BTN_RIGHT_Pin;
 8000d74:	f44f 6324 	mov.w	r3, #2624	; 0xa40
 8000d78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d82:	f107 031c 	add.w	r3, r7, #28
 8000d86:	4619      	mov	r1, r3
 8000d88:	4818      	ldr	r0, [pc, #96]	; (8000dec <MX_GPIO_Init+0x254>)
 8000d8a:	f000 fe8b 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_MID_Pin */
  GPIO_InitStruct.Pin = BTN_MID_Pin;
 8000d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d94:	2300      	movs	r3, #0
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_MID_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	4814      	ldr	r0, [pc, #80]	; (8000df4 <MX_GPIO_Init+0x25c>)
 8000da4:	f000 fe7e 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000da8:	2320      	movs	r3, #32
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dac:	2300      	movs	r3, #0
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000db4:	f107 031c 	add.w	r3, r7, #28
 8000db8:	4619      	mov	r1, r3
 8000dba:	480d      	ldr	r0, [pc, #52]	; (8000df0 <MX_GPIO_Init+0x258>)
 8000dbc:	f000 fe72 	bl	8001aa4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000dc4:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000dc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dca:	2300      	movs	r3, #0
 8000dcc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000dce:	f107 031c 	add.w	r3, r7, #28
 8000dd2:	4619      	mov	r1, r3
 8000dd4:	4804      	ldr	r0, [pc, #16]	; (8000de8 <MX_GPIO_Init+0x250>)
 8000dd6:	f000 fe65 	bl	8001aa4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000dda:	bf00      	nop
 8000ddc:	3730      	adds	r7, #48	; 0x30
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40023800 	.word	0x40023800
 8000de8:	40021000 	.word	0x40021000
 8000dec:	40020800 	.word	0x40020800
 8000df0:	40020c00 	.word	0x40020c00
 8000df4:	40020000 	.word	0x40020000
 8000df8:	40020400 	.word	0x40020400

08000dfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e00:	b672      	cpsid	i
}
 8000e02:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <Error_Handler+0x8>
	...

08000e08 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b082      	sub	sp, #8
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b10      	ldr	r3, [pc, #64]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e16:	4a0f      	ldr	r2, [pc, #60]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e18:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e1c:	6453      	str	r3, [r2, #68]	; 0x44
 8000e1e:	4b0d      	ldr	r3, [pc, #52]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e22:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	603b      	str	r3, [r7, #0]
 8000e2e:	4b09      	ldr	r3, [pc, #36]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e32:	4a08      	ldr	r2, [pc, #32]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e38:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_MspInit+0x4c>)
 8000e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e42:	603b      	str	r3, [r7, #0]
 8000e44:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e46:	2007      	movs	r0, #7
 8000e48:	f000 fdea 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	40023800 	.word	0x40023800

08000e58 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b08a      	sub	sp, #40	; 0x28
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e60:	f107 0314 	add.w	r3, r7, #20
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]
 8000e6e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a17      	ldr	r2, [pc, #92]	; (8000ed4 <HAL_ADC_MspInit+0x7c>)
 8000e76:	4293      	cmp	r3, r2
 8000e78:	d127      	bne.n	8000eca <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
 8000e7e:	4b16      	ldr	r3, [pc, #88]	; (8000ed8 <HAL_ADC_MspInit+0x80>)
 8000e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e82:	4a15      	ldr	r2, [pc, #84]	; (8000ed8 <HAL_ADC_MspInit+0x80>)
 8000e84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e88:	6453      	str	r3, [r2, #68]	; 0x44
 8000e8a:	4b13      	ldr	r3, [pc, #76]	; (8000ed8 <HAL_ADC_MspInit+0x80>)
 8000e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e92:	613b      	str	r3, [r7, #16]
 8000e94:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60fb      	str	r3, [r7, #12]
 8000e9a:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <HAL_ADC_MspInit+0x80>)
 8000e9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9e:	4a0e      	ldr	r2, [pc, #56]	; (8000ed8 <HAL_ADC_MspInit+0x80>)
 8000ea0:	f043 0302 	orr.w	r3, r3, #2
 8000ea4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea6:	4b0c      	ldr	r3, [pc, #48]	; (8000ed8 <HAL_ADC_MspInit+0x80>)
 8000ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eaa:	f003 0302 	and.w	r3, r3, #2
 8000eae:	60fb      	str	r3, [r7, #12]
 8000eb0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = TEMP_SENS_Pin;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000eb6:	2303      	movs	r3, #3
 8000eb8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(TEMP_SENS_GPIO_Port, &GPIO_InitStruct);
 8000ebe:	f107 0314 	add.w	r3, r7, #20
 8000ec2:	4619      	mov	r1, r3
 8000ec4:	4805      	ldr	r0, [pc, #20]	; (8000edc <HAL_ADC_MspInit+0x84>)
 8000ec6:	f000 fded 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eca:	bf00      	nop
 8000ecc:	3728      	adds	r7, #40	; 0x28
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40012000 	.word	0x40012000
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40020400 	.word	0x40020400

08000ee0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b08a      	sub	sp, #40	; 0x28
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee8:	f107 0314 	add.w	r3, r7, #20
 8000eec:	2200      	movs	r2, #0
 8000eee:	601a      	str	r2, [r3, #0]
 8000ef0:	605a      	str	r2, [r3, #4]
 8000ef2:	609a      	str	r2, [r3, #8]
 8000ef4:	60da      	str	r2, [r3, #12]
 8000ef6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	4a19      	ldr	r2, [pc, #100]	; (8000f64 <HAL_I2C_MspInit+0x84>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d12c      	bne.n	8000f5c <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	613b      	str	r3, [r7, #16]
 8000f06:	4b18      	ldr	r3, [pc, #96]	; (8000f68 <HAL_I2C_MspInit+0x88>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a17      	ldr	r2, [pc, #92]	; (8000f68 <HAL_I2C_MspInit+0x88>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b15      	ldr	r3, [pc, #84]	; (8000f68 <HAL_I2C_MspInit+0x88>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	613b      	str	r3, [r7, #16]
 8000f1c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000f1e:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000f22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f24:	2312      	movs	r3, #18
 8000f26:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f30:	2304      	movs	r3, #4
 8000f32:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f34:	f107 0314 	add.w	r3, r7, #20
 8000f38:	4619      	mov	r1, r3
 8000f3a:	480c      	ldr	r0, [pc, #48]	; (8000f6c <HAL_I2C_MspInit+0x8c>)
 8000f3c:	f000 fdb2 	bl	8001aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f40:	2300      	movs	r3, #0
 8000f42:	60fb      	str	r3, [r7, #12]
 8000f44:	4b08      	ldr	r3, [pc, #32]	; (8000f68 <HAL_I2C_MspInit+0x88>)
 8000f46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f48:	4a07      	ldr	r2, [pc, #28]	; (8000f68 <HAL_I2C_MspInit+0x88>)
 8000f4a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f4e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f50:	4b05      	ldr	r3, [pc, #20]	; (8000f68 <HAL_I2C_MspInit+0x88>)
 8000f52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f58:	60fb      	str	r3, [r7, #12]
 8000f5a:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000f5c:	bf00      	nop
 8000f5e:	3728      	adds	r7, #40	; 0x28
 8000f60:	46bd      	mov	sp, r7
 8000f62:	bd80      	pop	{r7, pc}
 8000f64:	40005400 	.word	0x40005400
 8000f68:	40023800 	.word	0x40023800
 8000f6c:	40020400 	.word	0x40020400

08000f70 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b08e      	sub	sp, #56	; 0x38
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f88:	f107 0314 	add.w	r3, r7, #20
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	4a31      	ldr	r2, [pc, #196]	; (8001060 <HAL_I2S_MspInit+0xf0>)
 8000f9c:	4293      	cmp	r3, r2
 8000f9e:	d15a      	bne.n	8001056 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000fa4:	23c0      	movs	r3, #192	; 0xc0
 8000fa6:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000fa8:	2302      	movs	r3, #2
 8000faa:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fac:	f107 0314 	add.w	r3, r7, #20
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f003 fd9f 	bl	8004af4 <HAL_RCCEx_PeriphCLKConfig>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000fbc:	f7ff ff1e 	bl	8000dfc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	613b      	str	r3, [r7, #16]
 8000fc4:	4b27      	ldr	r3, [pc, #156]	; (8001064 <HAL_I2S_MspInit+0xf4>)
 8000fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc8:	4a26      	ldr	r2, [pc, #152]	; (8001064 <HAL_I2S_MspInit+0xf4>)
 8000fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000fce:	6413      	str	r3, [r2, #64]	; 0x40
 8000fd0:	4b24      	ldr	r3, [pc, #144]	; (8001064 <HAL_I2S_MspInit+0xf4>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000fd8:	613b      	str	r3, [r7, #16]
 8000fda:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fdc:	2300      	movs	r3, #0
 8000fde:	60fb      	str	r3, [r7, #12]
 8000fe0:	4b20      	ldr	r3, [pc, #128]	; (8001064 <HAL_I2S_MspInit+0xf4>)
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	4a1f      	ldr	r2, [pc, #124]	; (8001064 <HAL_I2S_MspInit+0xf4>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6313      	str	r3, [r2, #48]	; 0x30
 8000fec:	4b1d      	ldr	r3, [pc, #116]	; (8001064 <HAL_I2S_MspInit+0xf4>)
 8000fee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	60fb      	str	r3, [r7, #12]
 8000ff6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	60bb      	str	r3, [r7, #8]
 8000ffc:	4b19      	ldr	r3, [pc, #100]	; (8001064 <HAL_I2S_MspInit+0xf4>)
 8000ffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001000:	4a18      	ldr	r2, [pc, #96]	; (8001064 <HAL_I2S_MspInit+0xf4>)
 8001002:	f043 0304 	orr.w	r3, r3, #4
 8001006:	6313      	str	r3, [r2, #48]	; 0x30
 8001008:	4b16      	ldr	r3, [pc, #88]	; (8001064 <HAL_I2S_MspInit+0xf4>)
 800100a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800100c:	f003 0304 	and.w	r3, r3, #4
 8001010:	60bb      	str	r3, [r7, #8]
 8001012:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8001014:	2310      	movs	r3, #16
 8001016:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001018:	2302      	movs	r3, #2
 800101a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101c:	2300      	movs	r3, #0
 800101e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001020:	2300      	movs	r3, #0
 8001022:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001024:	2306      	movs	r3, #6
 8001026:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001028:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800102c:	4619      	mov	r1, r3
 800102e:	480e      	ldr	r0, [pc, #56]	; (8001068 <HAL_I2S_MspInit+0xf8>)
 8001030:	f000 fd38 	bl	8001aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001034:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001038:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800103a:	2302      	movs	r3, #2
 800103c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001046:	2306      	movs	r3, #6
 8001048:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800104a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800104e:	4619      	mov	r1, r3
 8001050:	4806      	ldr	r0, [pc, #24]	; (800106c <HAL_I2S_MspInit+0xfc>)
 8001052:	f000 fd27 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001056:	bf00      	nop
 8001058:	3738      	adds	r7, #56	; 0x38
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40003c00 	.word	0x40003c00
 8001064:	40023800 	.word	0x40023800
 8001068:	40020000 	.word	0x40020000
 800106c:	40020800 	.word	0x40020800

08001070 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a19      	ldr	r2, [pc, #100]	; (80010f4 <HAL_SPI_MspInit+0x84>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d12b      	bne.n	80010ea <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b18      	ldr	r3, [pc, #96]	; (80010f8 <HAL_SPI_MspInit+0x88>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a17      	ldr	r2, [pc, #92]	; (80010f8 <HAL_SPI_MspInit+0x88>)
 800109c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b15      	ldr	r3, [pc, #84]	; (80010f8 <HAL_SPI_MspInit+0x88>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b11      	ldr	r3, [pc, #68]	; (80010f8 <HAL_SPI_MspInit+0x88>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a10      	ldr	r2, [pc, #64]	; (80010f8 <HAL_SPI_MspInit+0x88>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b0e      	ldr	r3, [pc, #56]	; (80010f8 <HAL_SPI_MspInit+0x88>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80010ca:	23e0      	movs	r3, #224	; 0xe0
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ce:	2302      	movs	r3, #2
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010d6:	2300      	movs	r3, #0
 80010d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80010da:	2305      	movs	r3, #5
 80010dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010de:	f107 0314 	add.w	r3, r7, #20
 80010e2:	4619      	mov	r1, r3
 80010e4:	4805      	ldr	r0, [pc, #20]	; (80010fc <HAL_SPI_MspInit+0x8c>)
 80010e6:	f000 fcdd 	bl	8001aa4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80010ea:	bf00      	nop
 80010ec:	3728      	adds	r7, #40	; 0x28
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	40013000 	.word	0x40013000
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020000 	.word	0x40020000

08001100 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001100:	b480      	push	{r7}
 8001102:	b085      	sub	sp, #20
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM11)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a0b      	ldr	r2, [pc, #44]	; (800113c <HAL_TIM_Base_MspInit+0x3c>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d10d      	bne.n	800112e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b0a      	ldr	r3, [pc, #40]	; (8001140 <HAL_TIM_Base_MspInit+0x40>)
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	4a09      	ldr	r2, [pc, #36]	; (8001140 <HAL_TIM_Base_MspInit+0x40>)
 800111c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001120:	6453      	str	r3, [r2, #68]	; 0x44
 8001122:	4b07      	ldr	r3, [pc, #28]	; (8001140 <HAL_TIM_Base_MspInit+0x40>)
 8001124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001126:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 800112e:	bf00      	nop
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr
 800113a:	bf00      	nop
 800113c:	40014800 	.word	0x40014800
 8001140:	40023800 	.word	0x40023800

08001144 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001148:	e7fe      	b.n	8001148 <NMI_Handler+0x4>

0800114a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800114a:	b480      	push	{r7}
 800114c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800114e:	e7fe      	b.n	800114e <HardFault_Handler+0x4>

08001150 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001150:	b480      	push	{r7}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001154:	e7fe      	b.n	8001154 <MemManage_Handler+0x4>

08001156 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001156:	b480      	push	{r7}
 8001158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800115a:	e7fe      	b.n	800115a <BusFault_Handler+0x4>

0800115c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001160:	e7fe      	b.n	8001160 <UsageFault_Handler+0x4>

08001162 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001162:	b480      	push	{r7}
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001166:	bf00      	nop
 8001168:	46bd      	mov	sp, r7
 800116a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116e:	4770      	bx	lr

08001170 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr

0800117e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800117e:	b480      	push	{r7}
 8001180:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr

0800118c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001190:	f000 f8d0 	bl	8001334 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001194:	bf00      	nop
 8001196:	bd80      	pop	{r7, pc}

08001198 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 800119c:	4802      	ldr	r0, [pc, #8]	; (80011a8 <OTG_FS_IRQHandler+0x10>)
 800119e:	f001 f8a1 	bl	80022e4 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011a2:	bf00      	nop
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	20000614 	.word	0x20000614

080011ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b086      	sub	sp, #24
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011b4:	4a14      	ldr	r2, [pc, #80]	; (8001208 <_sbrk+0x5c>)
 80011b6:	4b15      	ldr	r3, [pc, #84]	; (800120c <_sbrk+0x60>)
 80011b8:	1ad3      	subs	r3, r2, r3
 80011ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011bc:	697b      	ldr	r3, [r7, #20]
 80011be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <_sbrk+0x64>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d102      	bne.n	80011ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011c8:	4b11      	ldr	r3, [pc, #68]	; (8001210 <_sbrk+0x64>)
 80011ca:	4a12      	ldr	r2, [pc, #72]	; (8001214 <_sbrk+0x68>)
 80011cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011ce:	4b10      	ldr	r3, [pc, #64]	; (8001210 <_sbrk+0x64>)
 80011d0:	681a      	ldr	r2, [r3, #0]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4413      	add	r3, r2
 80011d6:	693a      	ldr	r2, [r7, #16]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d207      	bcs.n	80011ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011dc:	f007 fa1e 	bl	800861c <__errno>
 80011e0:	4603      	mov	r3, r0
 80011e2:	220c      	movs	r2, #12
 80011e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011e6:	f04f 33ff 	mov.w	r3, #4294967295
 80011ea:	e009      	b.n	8001200 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011ec:	4b08      	ldr	r3, [pc, #32]	; (8001210 <_sbrk+0x64>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011f2:	4b07      	ldr	r3, [pc, #28]	; (8001210 <_sbrk+0x64>)
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	4413      	add	r3, r2
 80011fa:	4a05      	ldr	r2, [pc, #20]	; (8001210 <_sbrk+0x64>)
 80011fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80011fe:	68fb      	ldr	r3, [r7, #12]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	20020000 	.word	0x20020000
 800120c:	00000400 	.word	0x00000400
 8001210:	20000230 	.word	0x20000230
 8001214:	20000928 	.word	0x20000928

08001218 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800121c:	4b06      	ldr	r3, [pc, #24]	; (8001238 <SystemInit+0x20>)
 800121e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001222:	4a05      	ldr	r2, [pc, #20]	; (8001238 <SystemInit+0x20>)
 8001224:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001228:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800122c:	bf00      	nop
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	e000ed00 	.word	0xe000ed00

0800123c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800123c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001274 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001240:	480d      	ldr	r0, [pc, #52]	; (8001278 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001242:	490e      	ldr	r1, [pc, #56]	; (800127c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001244:	4a0e      	ldr	r2, [pc, #56]	; (8001280 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001246:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001248:	e002      	b.n	8001250 <LoopCopyDataInit>

0800124a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800124a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800124c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800124e:	3304      	adds	r3, #4

08001250 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001250:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001252:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001254:	d3f9      	bcc.n	800124a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001258:	4c0b      	ldr	r4, [pc, #44]	; (8001288 <LoopFillZerobss+0x26>)
  movs r3, #0
 800125a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800125c:	e001      	b.n	8001262 <LoopFillZerobss>

0800125e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800125e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001260:	3204      	adds	r2, #4

08001262 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001262:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001264:	d3fb      	bcc.n	800125e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001266:	f7ff ffd7 	bl	8001218 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126a:	f007 f9dd 	bl	8008628 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800126e:	f7ff facb 	bl	8000808 <main>
  bx  lr    
 8001272:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001274:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800127c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001280:	0800901c 	.word	0x0800901c
  ldr r2, =_sbss
 8001284:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001288:	20000928 	.word	0x20000928

0800128c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC_IRQHandler>
	...

08001290 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001294:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <HAL_Init+0x40>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a0d      	ldr	r2, [pc, #52]	; (80012d0 <HAL_Init+0x40>)
 800129a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800129e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012a0:	4b0b      	ldr	r3, [pc, #44]	; (80012d0 <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0a      	ldr	r2, [pc, #40]	; (80012d0 <HAL_Init+0x40>)
 80012a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012ac:	4b08      	ldr	r3, [pc, #32]	; (80012d0 <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a07      	ldr	r2, [pc, #28]	; (80012d0 <HAL_Init+0x40>)
 80012b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012b8:	2003      	movs	r0, #3
 80012ba:	f000 fbb1 	bl	8001a20 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012be:	2000      	movs	r0, #0
 80012c0:	f000 f808 	bl	80012d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012c4:	f7ff fda0 	bl	8000e08 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	40023c00 	.word	0x40023c00

080012d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012dc:	4b12      	ldr	r3, [pc, #72]	; (8001328 <HAL_InitTick+0x54>)
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b12      	ldr	r3, [pc, #72]	; (800132c <HAL_InitTick+0x58>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	4619      	mov	r1, r3
 80012e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80012ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80012ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80012f2:	4618      	mov	r0, r3
 80012f4:	f000 fbc9 	bl	8001a8a <HAL_SYSTICK_Config>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80012fe:	2301      	movs	r3, #1
 8001300:	e00e      	b.n	8001320 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	d80a      	bhi.n	800131e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001308:	2200      	movs	r2, #0
 800130a:	6879      	ldr	r1, [r7, #4]
 800130c:	f04f 30ff 	mov.w	r0, #4294967295
 8001310:	f000 fb91 	bl	8001a36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001314:	4a06      	ldr	r2, [pc, #24]	; (8001330 <HAL_InitTick+0x5c>)
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800131a:	2300      	movs	r3, #0
 800131c:	e000      	b.n	8001320 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800131e:	2301      	movs	r3, #1
}
 8001320:	4618      	mov	r0, r3
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	20000000 	.word	0x20000000
 800132c:	20000008 	.word	0x20000008
 8001330:	20000004 	.word	0x20000004

08001334 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001334:	b480      	push	{r7}
 8001336:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001338:	4b06      	ldr	r3, [pc, #24]	; (8001354 <HAL_IncTick+0x20>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_IncTick+0x24>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4413      	add	r3, r2
 8001344:	4a04      	ldr	r2, [pc, #16]	; (8001358 <HAL_IncTick+0x24>)
 8001346:	6013      	str	r3, [r2, #0]
}
 8001348:	bf00      	nop
 800134a:	46bd      	mov	sp, r7
 800134c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	20000008 	.word	0x20000008
 8001358:	20000234 	.word	0x20000234

0800135c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  return uwTick;
 8001360:	4b03      	ldr	r3, [pc, #12]	; (8001370 <HAL_GetTick+0x14>)
 8001362:	681b      	ldr	r3, [r3, #0]
}
 8001364:	4618      	mov	r0, r3
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	20000234 	.word	0x20000234

08001374 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff ffee 	bl	800135c <HAL_GetTick>
 8001380:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001386:	68fb      	ldr	r3, [r7, #12]
 8001388:	f1b3 3fff 	cmp.w	r3, #4294967295
 800138c:	d005      	beq.n	800139a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800138e:	4b0a      	ldr	r3, [pc, #40]	; (80013b8 <HAL_Delay+0x44>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	461a      	mov	r2, r3
 8001394:	68fb      	ldr	r3, [r7, #12]
 8001396:	4413      	add	r3, r2
 8001398:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800139a:	bf00      	nop
 800139c:	f7ff ffde 	bl	800135c <HAL_GetTick>
 80013a0:	4602      	mov	r2, r0
 80013a2:	68bb      	ldr	r3, [r7, #8]
 80013a4:	1ad3      	subs	r3, r2, r3
 80013a6:	68fa      	ldr	r2, [r7, #12]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d8f7      	bhi.n	800139c <HAL_Delay+0x28>
  {
  }
}
 80013ac:	bf00      	nop
 80013ae:	bf00      	nop
 80013b0:	3710      	adds	r7, #16
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000008 	.word	0x20000008

080013bc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b084      	sub	sp, #16
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013c4:	2300      	movs	r3, #0
 80013c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d101      	bne.n	80013d2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013ce:	2301      	movs	r3, #1
 80013d0:	e033      	b.n	800143a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d109      	bne.n	80013ee <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f7ff fd3c 	bl	8000e58 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2200      	movs	r2, #0
 80013e4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	f003 0310 	and.w	r3, r3, #16
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d118      	bne.n	800142c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013fe:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001402:	f023 0302 	bic.w	r3, r3, #2
 8001406:	f043 0202 	orr.w	r2, r3, #2
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f000 f93a 	bl	8001688 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	2200      	movs	r2, #0
 8001418:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141e:	f023 0303 	bic.w	r3, r3, #3
 8001422:	f043 0201 	orr.w	r2, r3, #1
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
 800142a:	e001      	b.n	8001430 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800142c:	2301      	movs	r3, #1
 800142e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001438:	7bfb      	ldrb	r3, [r7, #15]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001444:	b480      	push	{r7}
 8001446:	b085      	sub	sp, #20
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800144e:	2300      	movs	r3, #0
 8001450:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001458:	2b01      	cmp	r3, #1
 800145a:	d101      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x1c>
 800145c:	2302      	movs	r3, #2
 800145e:	e105      	b.n	800166c <HAL_ADC_ConfigChannel+0x228>
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	2201      	movs	r2, #1
 8001464:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	2b09      	cmp	r3, #9
 800146e:	d925      	bls.n	80014bc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	68d9      	ldr	r1, [r3, #12]
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	b29b      	uxth	r3, r3
 800147c:	461a      	mov	r2, r3
 800147e:	4613      	mov	r3, r2
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	4413      	add	r3, r2
 8001484:	3b1e      	subs	r3, #30
 8001486:	2207      	movs	r2, #7
 8001488:	fa02 f303 	lsl.w	r3, r2, r3
 800148c:	43da      	mvns	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	400a      	ands	r2, r1
 8001494:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	68d9      	ldr	r1, [r3, #12]
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	b29b      	uxth	r3, r3
 80014a6:	4618      	mov	r0, r3
 80014a8:	4603      	mov	r3, r0
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	4403      	add	r3, r0
 80014ae:	3b1e      	subs	r3, #30
 80014b0:	409a      	lsls	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	430a      	orrs	r2, r1
 80014b8:	60da      	str	r2, [r3, #12]
 80014ba:	e022      	b.n	8001502 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	6919      	ldr	r1, [r3, #16]
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	b29b      	uxth	r3, r3
 80014c8:	461a      	mov	r2, r3
 80014ca:	4613      	mov	r3, r2
 80014cc:	005b      	lsls	r3, r3, #1
 80014ce:	4413      	add	r3, r2
 80014d0:	2207      	movs	r2, #7
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	43da      	mvns	r2, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	400a      	ands	r2, r1
 80014de:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6919      	ldr	r1, [r3, #16]
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	689a      	ldr	r2, [r3, #8]
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	b29b      	uxth	r3, r3
 80014f0:	4618      	mov	r0, r3
 80014f2:	4603      	mov	r3, r0
 80014f4:	005b      	lsls	r3, r3, #1
 80014f6:	4403      	add	r3, r0
 80014f8:	409a      	lsls	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	430a      	orrs	r2, r1
 8001500:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b06      	cmp	r3, #6
 8001508:	d824      	bhi.n	8001554 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	685a      	ldr	r2, [r3, #4]
 8001514:	4613      	mov	r3, r2
 8001516:	009b      	lsls	r3, r3, #2
 8001518:	4413      	add	r3, r2
 800151a:	3b05      	subs	r3, #5
 800151c:	221f      	movs	r2, #31
 800151e:	fa02 f303 	lsl.w	r3, r2, r3
 8001522:	43da      	mvns	r2, r3
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	400a      	ands	r2, r1
 800152a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	b29b      	uxth	r3, r3
 8001538:	4618      	mov	r0, r3
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	3b05      	subs	r3, #5
 8001546:	fa00 f203 	lsl.w	r2, r0, r3
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	430a      	orrs	r2, r1
 8001550:	635a      	str	r2, [r3, #52]	; 0x34
 8001552:	e04c      	b.n	80015ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	2b0c      	cmp	r3, #12
 800155a:	d824      	bhi.n	80015a6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685a      	ldr	r2, [r3, #4]
 8001566:	4613      	mov	r3, r2
 8001568:	009b      	lsls	r3, r3, #2
 800156a:	4413      	add	r3, r2
 800156c:	3b23      	subs	r3, #35	; 0x23
 800156e:	221f      	movs	r2, #31
 8001570:	fa02 f303 	lsl.w	r3, r2, r3
 8001574:	43da      	mvns	r2, r3
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	400a      	ands	r2, r1
 800157c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	b29b      	uxth	r3, r3
 800158a:	4618      	mov	r0, r3
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	4613      	mov	r3, r2
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	4413      	add	r3, r2
 8001596:	3b23      	subs	r3, #35	; 0x23
 8001598:	fa00 f203 	lsl.w	r2, r0, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	631a      	str	r2, [r3, #48]	; 0x30
 80015a4:	e023      	b.n	80015ee <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	4613      	mov	r3, r2
 80015b2:	009b      	lsls	r3, r3, #2
 80015b4:	4413      	add	r3, r2
 80015b6:	3b41      	subs	r3, #65	; 0x41
 80015b8:	221f      	movs	r2, #31
 80015ba:	fa02 f303 	lsl.w	r3, r2, r3
 80015be:	43da      	mvns	r2, r3
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	400a      	ands	r2, r1
 80015c6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	b29b      	uxth	r3, r3
 80015d4:	4618      	mov	r0, r3
 80015d6:	683b      	ldr	r3, [r7, #0]
 80015d8:	685a      	ldr	r2, [r3, #4]
 80015da:	4613      	mov	r3, r2
 80015dc:	009b      	lsls	r3, r3, #2
 80015de:	4413      	add	r3, r2
 80015e0:	3b41      	subs	r3, #65	; 0x41
 80015e2:	fa00 f203 	lsl.w	r2, r0, r3
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	430a      	orrs	r2, r1
 80015ec:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015ee:	4b22      	ldr	r3, [pc, #136]	; (8001678 <HAL_ADC_ConfigChannel+0x234>)
 80015f0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a21      	ldr	r2, [pc, #132]	; (800167c <HAL_ADC_ConfigChannel+0x238>)
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d109      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x1cc>
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	2b12      	cmp	r3, #18
 8001602:	d105      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	; (800167c <HAL_ADC_ConfigChannel+0x238>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d123      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x21e>
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	2b10      	cmp	r3, #16
 8001620:	d003      	beq.n	800162a <HAL_ADC_ConfigChannel+0x1e6>
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2b11      	cmp	r3, #17
 8001628:	d11b      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	685b      	ldr	r3, [r3, #4]
 800162e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001636:	683b      	ldr	r3, [r7, #0]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b10      	cmp	r3, #16
 800163c:	d111      	bne.n	8001662 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800163e:	4b10      	ldr	r3, [pc, #64]	; (8001680 <HAL_ADC_ConfigChannel+0x23c>)
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	4a10      	ldr	r2, [pc, #64]	; (8001684 <HAL_ADC_ConfigChannel+0x240>)
 8001644:	fba2 2303 	umull	r2, r3, r2, r3
 8001648:	0c9a      	lsrs	r2, r3, #18
 800164a:	4613      	mov	r3, r2
 800164c:	009b      	lsls	r3, r3, #2
 800164e:	4413      	add	r3, r2
 8001650:	005b      	lsls	r3, r3, #1
 8001652:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001654:	e002      	b.n	800165c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	3b01      	subs	r3, #1
 800165a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d1f9      	bne.n	8001656 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	2200      	movs	r2, #0
 8001666:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800166a:	2300      	movs	r3, #0
}
 800166c:	4618      	mov	r0, r3
 800166e:	3714      	adds	r7, #20
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40012300 	.word	0x40012300
 800167c:	40012000 	.word	0x40012000
 8001680:	20000000 	.word	0x20000000
 8001684:	431bde83 	.word	0x431bde83

08001688 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001688:	b480      	push	{r7}
 800168a:	b085      	sub	sp, #20
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001690:	4b79      	ldr	r3, [pc, #484]	; (8001878 <ADC_Init+0x1f0>)
 8001692:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001694:	68fb      	ldr	r3, [r7, #12]
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	685a      	ldr	r2, [r3, #4]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	431a      	orrs	r2, r3
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80016bc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	6859      	ldr	r1, [r3, #4]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	691b      	ldr	r3, [r3, #16]
 80016c8:	021a      	lsls	r2, r3, #8
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	430a      	orrs	r2, r1
 80016d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	685a      	ldr	r2, [r3, #4]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80016e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	6859      	ldr	r1, [r3, #4]
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	689a      	ldr	r2, [r3, #8]
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	430a      	orrs	r2, r1
 80016f2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	689a      	ldr	r2, [r3, #8]
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001702:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6899      	ldr	r1, [r3, #8]
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	68da      	ldr	r2, [r3, #12]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	430a      	orrs	r2, r1
 8001714:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171a:	4a58      	ldr	r2, [pc, #352]	; (800187c <ADC_Init+0x1f4>)
 800171c:	4293      	cmp	r3, r2
 800171e:	d022      	beq.n	8001766 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	689a      	ldr	r2, [r3, #8]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800172e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	6899      	ldr	r1, [r3, #8]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	430a      	orrs	r2, r1
 8001740:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	689a      	ldr	r2, [r3, #8]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001750:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6899      	ldr	r1, [r3, #8]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	609a      	str	r2, [r3, #8]
 8001764:	e00f      	b.n	8001786 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	689a      	ldr	r2, [r3, #8]
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001774:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001784:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	689a      	ldr	r2, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0202 	bic.w	r2, r2, #2
 8001794:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	6899      	ldr	r1, [r3, #8]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	7e1b      	ldrb	r3, [r3, #24]
 80017a0:	005a      	lsls	r2, r3, #1
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	430a      	orrs	r2, r1
 80017a8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d01b      	beq.n	80017ec <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685a      	ldr	r2, [r3, #4]
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80017c2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	685a      	ldr	r2, [r3, #4]
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80017d2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	6859      	ldr	r1, [r3, #4]
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017de:	3b01      	subs	r3, #1
 80017e0:	035a      	lsls	r2, r3, #13
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	430a      	orrs	r2, r1
 80017e8:	605a      	str	r2, [r3, #4]
 80017ea:	e007      	b.n	80017fc <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	685a      	ldr	r2, [r3, #4]
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017fa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800180a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	69db      	ldr	r3, [r3, #28]
 8001816:	3b01      	subs	r3, #1
 8001818:	051a      	lsls	r2, r3, #20
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	430a      	orrs	r2, r1
 8001820:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001830:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	6899      	ldr	r1, [r3, #8]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800183e:	025a      	lsls	r2, r3, #9
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	430a      	orrs	r2, r1
 8001846:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	689a      	ldr	r2, [r3, #8]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001856:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6899      	ldr	r1, [r3, #8]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	695b      	ldr	r3, [r3, #20]
 8001862:	029a      	lsls	r2, r3, #10
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	609a      	str	r2, [r3, #8]
}
 800186c:	bf00      	nop
 800186e:	3714      	adds	r7, #20
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	40012300 	.word	0x40012300
 800187c:	0f000001 	.word	0x0f000001

08001880 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b480      	push	{r7}
 8001882:	b085      	sub	sp, #20
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f003 0307 	and.w	r3, r3, #7
 800188e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001890:	4b0c      	ldr	r3, [pc, #48]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001896:	68ba      	ldr	r2, [r7, #8]
 8001898:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800189c:	4013      	ands	r3, r2
 800189e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018a8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018b0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018b2:	4a04      	ldr	r2, [pc, #16]	; (80018c4 <__NVIC_SetPriorityGrouping+0x44>)
 80018b4:	68bb      	ldr	r3, [r7, #8]
 80018b6:	60d3      	str	r3, [r2, #12]
}
 80018b8:	bf00      	nop
 80018ba:	3714      	adds	r7, #20
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr
 80018c4:	e000ed00 	.word	0xe000ed00

080018c8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80018c8:	b480      	push	{r7}
 80018ca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80018cc:	4b04      	ldr	r3, [pc, #16]	; (80018e0 <__NVIC_GetPriorityGrouping+0x18>)
 80018ce:	68db      	ldr	r3, [r3, #12]
 80018d0:	0a1b      	lsrs	r3, r3, #8
 80018d2:	f003 0307 	and.w	r3, r3, #7
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	46bd      	mov	sp, r7
 80018da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018de:	4770      	bx	lr
 80018e0:	e000ed00 	.word	0xe000ed00

080018e4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	db0b      	blt.n	800190e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018f6:	79fb      	ldrb	r3, [r7, #7]
 80018f8:	f003 021f 	and.w	r2, r3, #31
 80018fc:	4907      	ldr	r1, [pc, #28]	; (800191c <__NVIC_EnableIRQ+0x38>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	095b      	lsrs	r3, r3, #5
 8001904:	2001      	movs	r0, #1
 8001906:	fa00 f202 	lsl.w	r2, r0, r2
 800190a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800190e:	bf00      	nop
 8001910:	370c      	adds	r7, #12
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
 800191a:	bf00      	nop
 800191c:	e000e100 	.word	0xe000e100

08001920 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001920:	b480      	push	{r7}
 8001922:	b083      	sub	sp, #12
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800192c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001930:	2b00      	cmp	r3, #0
 8001932:	db0a      	blt.n	800194a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001934:	683b      	ldr	r3, [r7, #0]
 8001936:	b2da      	uxtb	r2, r3
 8001938:	490c      	ldr	r1, [pc, #48]	; (800196c <__NVIC_SetPriority+0x4c>)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	0112      	lsls	r2, r2, #4
 8001940:	b2d2      	uxtb	r2, r2
 8001942:	440b      	add	r3, r1
 8001944:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001948:	e00a      	b.n	8001960 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	b2da      	uxtb	r2, r3
 800194e:	4908      	ldr	r1, [pc, #32]	; (8001970 <__NVIC_SetPriority+0x50>)
 8001950:	79fb      	ldrb	r3, [r7, #7]
 8001952:	f003 030f 	and.w	r3, r3, #15
 8001956:	3b04      	subs	r3, #4
 8001958:	0112      	lsls	r2, r2, #4
 800195a:	b2d2      	uxtb	r2, r2
 800195c:	440b      	add	r3, r1
 800195e:	761a      	strb	r2, [r3, #24]
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr
 800196c:	e000e100 	.word	0xe000e100
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001974:	b480      	push	{r7}
 8001976:	b089      	sub	sp, #36	; 0x24
 8001978:	af00      	add	r7, sp, #0
 800197a:	60f8      	str	r0, [r7, #12]
 800197c:	60b9      	str	r1, [r7, #8]
 800197e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001980:	68fb      	ldr	r3, [r7, #12]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f1c3 0307 	rsb	r3, r3, #7
 800198e:	2b04      	cmp	r3, #4
 8001990:	bf28      	it	cs
 8001992:	2304      	movcs	r3, #4
 8001994:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001996:	69fb      	ldr	r3, [r7, #28]
 8001998:	3304      	adds	r3, #4
 800199a:	2b06      	cmp	r3, #6
 800199c:	d902      	bls.n	80019a4 <NVIC_EncodePriority+0x30>
 800199e:	69fb      	ldr	r3, [r7, #28]
 80019a0:	3b03      	subs	r3, #3
 80019a2:	e000      	b.n	80019a6 <NVIC_EncodePriority+0x32>
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019a8:	f04f 32ff 	mov.w	r2, #4294967295
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	fa02 f303 	lsl.w	r3, r2, r3
 80019b2:	43da      	mvns	r2, r3
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	401a      	ands	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019bc:	f04f 31ff 	mov.w	r1, #4294967295
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	fa01 f303 	lsl.w	r3, r1, r3
 80019c6:	43d9      	mvns	r1, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019cc:	4313      	orrs	r3, r2
         );
}
 80019ce:	4618      	mov	r0, r3
 80019d0:	3724      	adds	r7, #36	; 0x24
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
	...

080019dc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	3b01      	subs	r3, #1
 80019e8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80019ec:	d301      	bcc.n	80019f2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019ee:	2301      	movs	r3, #1
 80019f0:	e00f      	b.n	8001a12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019f2:	4a0a      	ldr	r2, [pc, #40]	; (8001a1c <SysTick_Config+0x40>)
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	3b01      	subs	r3, #1
 80019f8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019fa:	210f      	movs	r1, #15
 80019fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001a00:	f7ff ff8e 	bl	8001920 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a04:	4b05      	ldr	r3, [pc, #20]	; (8001a1c <SysTick_Config+0x40>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a0a:	4b04      	ldr	r3, [pc, #16]	; (8001a1c <SysTick_Config+0x40>)
 8001a0c:	2207      	movs	r2, #7
 8001a0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a10:	2300      	movs	r3, #0
}
 8001a12:	4618      	mov	r0, r3
 8001a14:	3708      	adds	r7, #8
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	e000e010 	.word	0xe000e010

08001a20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b082      	sub	sp, #8
 8001a24:	af00      	add	r7, sp, #0
 8001a26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f7ff ff29 	bl	8001880 <__NVIC_SetPriorityGrouping>
}
 8001a2e:	bf00      	nop
 8001a30:	3708      	adds	r7, #8
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}

08001a36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a36:	b580      	push	{r7, lr}
 8001a38:	b086      	sub	sp, #24
 8001a3a:	af00      	add	r7, sp, #0
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	60b9      	str	r1, [r7, #8]
 8001a40:	607a      	str	r2, [r7, #4]
 8001a42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a44:	2300      	movs	r3, #0
 8001a46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a48:	f7ff ff3e 	bl	80018c8 <__NVIC_GetPriorityGrouping>
 8001a4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	68b9      	ldr	r1, [r7, #8]
 8001a52:	6978      	ldr	r0, [r7, #20]
 8001a54:	f7ff ff8e 	bl	8001974 <NVIC_EncodePriority>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5e:	4611      	mov	r1, r2
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7ff ff5d 	bl	8001920 <__NVIC_SetPriority>
}
 8001a66:	bf00      	nop
 8001a68:	3718      	adds	r7, #24
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7ff ff31 	bl	80018e4 <__NVIC_EnableIRQ>
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}

08001a8a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a8a:	b580      	push	{r7, lr}
 8001a8c:	b082      	sub	sp, #8
 8001a8e:	af00      	add	r7, sp, #0
 8001a90:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a92:	6878      	ldr	r0, [r7, #4]
 8001a94:	f7ff ffa2 	bl	80019dc <SysTick_Config>
 8001a98:	4603      	mov	r3, r0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3708      	adds	r7, #8
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	bd80      	pop	{r7, pc}
	...

08001aa4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
 8001aac:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001aba:	2300      	movs	r3, #0
 8001abc:	61fb      	str	r3, [r7, #28]
 8001abe:	e16b      	b.n	8001d98 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001aca:	683b      	ldr	r3, [r7, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	697a      	ldr	r2, [r7, #20]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ad4:	693a      	ldr	r2, [r7, #16]
 8001ad6:	697b      	ldr	r3, [r7, #20]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	f040 815a 	bne.w	8001d92 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	f003 0303 	and.w	r3, r3, #3
 8001ae6:	2b01      	cmp	r3, #1
 8001ae8:	d005      	beq.n	8001af6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d130      	bne.n	8001b58 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	689b      	ldr	r3, [r3, #8]
 8001afa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001afc:	69fb      	ldr	r3, [r7, #28]
 8001afe:	005b      	lsls	r3, r3, #1
 8001b00:	2203      	movs	r2, #3
 8001b02:	fa02 f303 	lsl.w	r3, r2, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	69ba      	ldr	r2, [r7, #24]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	68da      	ldr	r2, [r3, #12]
 8001b12:	69fb      	ldr	r3, [r7, #28]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	69ba      	ldr	r2, [r7, #24]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	69ba      	ldr	r2, [r7, #24]
 8001b24:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b2c:	2201      	movs	r2, #1
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	fa02 f303 	lsl.w	r3, r2, r3
 8001b34:	43db      	mvns	r3, r3
 8001b36:	69ba      	ldr	r2, [r7, #24]
 8001b38:	4013      	ands	r3, r2
 8001b3a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 0201 	and.w	r2, r3, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	69ba      	ldr	r2, [r7, #24]
 8001b56:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d017      	beq.n	8001b94 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	68db      	ldr	r3, [r3, #12]
 8001b68:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	005b      	lsls	r3, r3, #1
 8001b6e:	2203      	movs	r2, #3
 8001b70:	fa02 f303 	lsl.w	r3, r2, r3
 8001b74:	43db      	mvns	r3, r3
 8001b76:	69ba      	ldr	r2, [r7, #24]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	689a      	ldr	r2, [r3, #8]
 8001b80:	69fb      	ldr	r3, [r7, #28]
 8001b82:	005b      	lsls	r3, r3, #1
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d123      	bne.n	8001be8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	08da      	lsrs	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3208      	adds	r2, #8
 8001ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	f003 0307 	and.w	r3, r3, #7
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bbc:	43db      	mvns	r3, r3
 8001bbe:	69ba      	ldr	r2, [r7, #24]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	691a      	ldr	r2, [r3, #16]
 8001bc8:	69fb      	ldr	r3, [r7, #28]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	08da      	lsrs	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	3208      	adds	r2, #8
 8001be2:	69b9      	ldr	r1, [r7, #24]
 8001be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bee:	69fb      	ldr	r3, [r7, #28]
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	2203      	movs	r2, #3
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	f003 0203 	and.w	r2, r3, #3
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	f000 80b4 	beq.w	8001d92 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60fb      	str	r3, [r7, #12]
 8001c2e:	4b60      	ldr	r3, [pc, #384]	; (8001db0 <HAL_GPIO_Init+0x30c>)
 8001c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c32:	4a5f      	ldr	r2, [pc, #380]	; (8001db0 <HAL_GPIO_Init+0x30c>)
 8001c34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c38:	6453      	str	r3, [r2, #68]	; 0x44
 8001c3a:	4b5d      	ldr	r3, [pc, #372]	; (8001db0 <HAL_GPIO_Init+0x30c>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c42:	60fb      	str	r3, [r7, #12]
 8001c44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c46:	4a5b      	ldr	r2, [pc, #364]	; (8001db4 <HAL_GPIO_Init+0x310>)
 8001c48:	69fb      	ldr	r3, [r7, #28]
 8001c4a:	089b      	lsrs	r3, r3, #2
 8001c4c:	3302      	adds	r3, #2
 8001c4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	f003 0303 	and.w	r3, r3, #3
 8001c5a:	009b      	lsls	r3, r3, #2
 8001c5c:	220f      	movs	r2, #15
 8001c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c62:	43db      	mvns	r3, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4013      	ands	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4a52      	ldr	r2, [pc, #328]	; (8001db8 <HAL_GPIO_Init+0x314>)
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d02b      	beq.n	8001cca <HAL_GPIO_Init+0x226>
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	4a51      	ldr	r2, [pc, #324]	; (8001dbc <HAL_GPIO_Init+0x318>)
 8001c76:	4293      	cmp	r3, r2
 8001c78:	d025      	beq.n	8001cc6 <HAL_GPIO_Init+0x222>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a50      	ldr	r2, [pc, #320]	; (8001dc0 <HAL_GPIO_Init+0x31c>)
 8001c7e:	4293      	cmp	r3, r2
 8001c80:	d01f      	beq.n	8001cc2 <HAL_GPIO_Init+0x21e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	4a4f      	ldr	r2, [pc, #316]	; (8001dc4 <HAL_GPIO_Init+0x320>)
 8001c86:	4293      	cmp	r3, r2
 8001c88:	d019      	beq.n	8001cbe <HAL_GPIO_Init+0x21a>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	4a4e      	ldr	r2, [pc, #312]	; (8001dc8 <HAL_GPIO_Init+0x324>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d013      	beq.n	8001cba <HAL_GPIO_Init+0x216>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	4a4d      	ldr	r2, [pc, #308]	; (8001dcc <HAL_GPIO_Init+0x328>)
 8001c96:	4293      	cmp	r3, r2
 8001c98:	d00d      	beq.n	8001cb6 <HAL_GPIO_Init+0x212>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	4a4c      	ldr	r2, [pc, #304]	; (8001dd0 <HAL_GPIO_Init+0x32c>)
 8001c9e:	4293      	cmp	r3, r2
 8001ca0:	d007      	beq.n	8001cb2 <HAL_GPIO_Init+0x20e>
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	4a4b      	ldr	r2, [pc, #300]	; (8001dd4 <HAL_GPIO_Init+0x330>)
 8001ca6:	4293      	cmp	r3, r2
 8001ca8:	d101      	bne.n	8001cae <HAL_GPIO_Init+0x20a>
 8001caa:	2307      	movs	r3, #7
 8001cac:	e00e      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cae:	2308      	movs	r3, #8
 8001cb0:	e00c      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cb2:	2306      	movs	r3, #6
 8001cb4:	e00a      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cb6:	2305      	movs	r3, #5
 8001cb8:	e008      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cba:	2304      	movs	r3, #4
 8001cbc:	e006      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cbe:	2303      	movs	r3, #3
 8001cc0:	e004      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cc2:	2302      	movs	r3, #2
 8001cc4:	e002      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e000      	b.n	8001ccc <HAL_GPIO_Init+0x228>
 8001cca:	2300      	movs	r3, #0
 8001ccc:	69fa      	ldr	r2, [r7, #28]
 8001cce:	f002 0203 	and.w	r2, r2, #3
 8001cd2:	0092      	lsls	r2, r2, #2
 8001cd4:	4093      	lsls	r3, r2
 8001cd6:	69ba      	ldr	r2, [r7, #24]
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001cdc:	4935      	ldr	r1, [pc, #212]	; (8001db4 <HAL_GPIO_Init+0x310>)
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	089b      	lsrs	r3, r3, #2
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cea:	4b3b      	ldr	r3, [pc, #236]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	43db      	mvns	r3, r3
 8001cf4:	69ba      	ldr	r2, [r7, #24]
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d003      	beq.n	8001d0e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d06:	69ba      	ldr	r2, [r7, #24]
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d0e:	4a32      	ldr	r2, [pc, #200]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d14:	4b30      	ldr	r3, [pc, #192]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d16:	68db      	ldr	r3, [r3, #12]
 8001d18:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d1a:	693b      	ldr	r3, [r7, #16]
 8001d1c:	43db      	mvns	r3, r3
 8001d1e:	69ba      	ldr	r2, [r7, #24]
 8001d20:	4013      	ands	r3, r2
 8001d22:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d003      	beq.n	8001d38 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	693b      	ldr	r3, [r7, #16]
 8001d34:	4313      	orrs	r3, r2
 8001d36:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d38:	4a27      	ldr	r2, [pc, #156]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d3e:	4b26      	ldr	r3, [pc, #152]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d40:	685b      	ldr	r3, [r3, #4]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	43db      	mvns	r3, r3
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	685b      	ldr	r3, [r3, #4]
 8001d52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d003      	beq.n	8001d62 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d62:	4a1d      	ldr	r2, [pc, #116]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d68:	4b1b      	ldr	r3, [pc, #108]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	4013      	ands	r3, r2
 8001d76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d003      	beq.n	8001d8c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	693b      	ldr	r3, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d8c:	4a12      	ldr	r2, [pc, #72]	; (8001dd8 <HAL_GPIO_Init+0x334>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3301      	adds	r3, #1
 8001d96:	61fb      	str	r3, [r7, #28]
 8001d98:	69fb      	ldr	r3, [r7, #28]
 8001d9a:	2b0f      	cmp	r3, #15
 8001d9c:	f67f ae90 	bls.w	8001ac0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001da0:	bf00      	nop
 8001da2:	bf00      	nop
 8001da4:	3724      	adds	r7, #36	; 0x24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40013800 	.word	0x40013800
 8001db8:	40020000 	.word	0x40020000
 8001dbc:	40020400 	.word	0x40020400
 8001dc0:	40020800 	.word	0x40020800
 8001dc4:	40020c00 	.word	0x40020c00
 8001dc8:	40021000 	.word	0x40021000
 8001dcc:	40021400 	.word	0x40021400
 8001dd0:	40021800 	.word	0x40021800
 8001dd4:	40021c00 	.word	0x40021c00
 8001dd8:	40013c00 	.word	0x40013c00

08001ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	b083      	sub	sp, #12
 8001de0:	af00      	add	r7, sp, #0
 8001de2:	6078      	str	r0, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
 8001de8:	4613      	mov	r3, r2
 8001dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001dec:	787b      	ldrb	r3, [r7, #1]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d003      	beq.n	8001dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001df2:	887a      	ldrh	r2, [r7, #2]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001df8:	e003      	b.n	8001e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001dfa:	887b      	ldrh	r3, [r7, #2]
 8001dfc:	041a      	lsls	r2, r3, #16
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	619a      	str	r2, [r3, #24]
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr

08001e0e <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e10:	b08f      	sub	sp, #60	; 0x3c
 8001e12:	af0a      	add	r7, sp, #40	; 0x28
 8001e14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d101      	bne.n	8001e20 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e054      	b.n	8001eca <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d106      	bne.n	8001e40 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2200      	movs	r2, #0
 8001e36:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f006 f944 	bl	80080c8 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2203      	movs	r2, #3
 8001e44:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d102      	bne.n	8001e5a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2200      	movs	r2, #0
 8001e58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f003 f972 	bl	8005148 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	603b      	str	r3, [r7, #0]
 8001e6a:	687e      	ldr	r6, [r7, #4]
 8001e6c:	466d      	mov	r5, sp
 8001e6e:	f106 0410 	add.w	r4, r6, #16
 8001e72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001e7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001e82:	1d33      	adds	r3, r6, #4
 8001e84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e86:	6838      	ldr	r0, [r7, #0]
 8001e88:	f003 f8ec 	bl	8005064 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2101      	movs	r1, #1
 8001e92:	4618      	mov	r0, r3
 8001e94:	f003 f969 	bl	800516a <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	603b      	str	r3, [r7, #0]
 8001e9e:	687e      	ldr	r6, [r7, #4]
 8001ea0:	466d      	mov	r5, sp
 8001ea2:	f106 0410 	add.w	r4, r6, #16
 8001ea6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ea8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eaa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001eac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eae:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001eb2:	e885 0003 	stmia.w	r5, {r0, r1}
 8001eb6:	1d33      	adds	r3, r6, #4
 8001eb8:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001eba:	6838      	ldr	r0, [r7, #0]
 8001ebc:	f003 faf2 	bl	80054a4 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001ec8:	2300      	movs	r3, #0
}
 8001eca:	4618      	mov	r0, r3
 8001ecc:	3714      	adds	r7, #20
 8001ece:	46bd      	mov	sp, r7
 8001ed0:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001ed2 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001ed2:	b590      	push	{r4, r7, lr}
 8001ed4:	b089      	sub	sp, #36	; 0x24
 8001ed6:	af04      	add	r7, sp, #16
 8001ed8:	6078      	str	r0, [r7, #4]
 8001eda:	4608      	mov	r0, r1
 8001edc:	4611      	mov	r1, r2
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	70fb      	strb	r3, [r7, #3]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	70bb      	strb	r3, [r7, #2]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001ef2:	2b01      	cmp	r3, #1
 8001ef4:	d101      	bne.n	8001efa <HAL_HCD_HC_Init+0x28>
 8001ef6:	2302      	movs	r3, #2
 8001ef8:	e076      	b.n	8001fe8 <HAL_HCD_HC_Init+0x116>
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2201      	movs	r2, #1
 8001efe:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001f02:	78fb      	ldrb	r3, [r7, #3]
 8001f04:	687a      	ldr	r2, [r7, #4]
 8001f06:	212c      	movs	r1, #44	; 0x2c
 8001f08:	fb01 f303 	mul.w	r3, r1, r3
 8001f0c:	4413      	add	r3, r2
 8001f0e:	333d      	adds	r3, #61	; 0x3d
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f14:	78fb      	ldrb	r3, [r7, #3]
 8001f16:	687a      	ldr	r2, [r7, #4]
 8001f18:	212c      	movs	r1, #44	; 0x2c
 8001f1a:	fb01 f303 	mul.w	r3, r1, r3
 8001f1e:	4413      	add	r3, r2
 8001f20:	3338      	adds	r3, #56	; 0x38
 8001f22:	787a      	ldrb	r2, [r7, #1]
 8001f24:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001f26:	78fb      	ldrb	r3, [r7, #3]
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	212c      	movs	r1, #44	; 0x2c
 8001f2c:	fb01 f303 	mul.w	r3, r1, r3
 8001f30:	4413      	add	r3, r2
 8001f32:	3340      	adds	r3, #64	; 0x40
 8001f34:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f36:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f38:	78fb      	ldrb	r3, [r7, #3]
 8001f3a:	687a      	ldr	r2, [r7, #4]
 8001f3c:	212c      	movs	r1, #44	; 0x2c
 8001f3e:	fb01 f303 	mul.w	r3, r1, r3
 8001f42:	4413      	add	r3, r2
 8001f44:	3339      	adds	r3, #57	; 0x39
 8001f46:	78fa      	ldrb	r2, [r7, #3]
 8001f48:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f4a:	78fb      	ldrb	r3, [r7, #3]
 8001f4c:	687a      	ldr	r2, [r7, #4]
 8001f4e:	212c      	movs	r1, #44	; 0x2c
 8001f50:	fb01 f303 	mul.w	r3, r1, r3
 8001f54:	4413      	add	r3, r2
 8001f56:	333f      	adds	r3, #63	; 0x3f
 8001f58:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f5c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f5e:	78fb      	ldrb	r3, [r7, #3]
 8001f60:	78ba      	ldrb	r2, [r7, #2]
 8001f62:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001f66:	b2d0      	uxtb	r0, r2
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	212c      	movs	r1, #44	; 0x2c
 8001f6c:	fb01 f303 	mul.w	r3, r1, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	333a      	adds	r3, #58	; 0x3a
 8001f74:	4602      	mov	r2, r0
 8001f76:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001f78:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	da09      	bge.n	8001f94 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f80:	78fb      	ldrb	r3, [r7, #3]
 8001f82:	687a      	ldr	r2, [r7, #4]
 8001f84:	212c      	movs	r1, #44	; 0x2c
 8001f86:	fb01 f303 	mul.w	r3, r1, r3
 8001f8a:	4413      	add	r3, r2
 8001f8c:	333b      	adds	r3, #59	; 0x3b
 8001f8e:	2201      	movs	r2, #1
 8001f90:	701a      	strb	r2, [r3, #0]
 8001f92:	e008      	b.n	8001fa6 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001f94:	78fb      	ldrb	r3, [r7, #3]
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	212c      	movs	r1, #44	; 0x2c
 8001f9a:	fb01 f303 	mul.w	r3, r1, r3
 8001f9e:	4413      	add	r3, r2
 8001fa0:	333b      	adds	r3, #59	; 0x3b
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001fa6:	78fb      	ldrb	r3, [r7, #3]
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	212c      	movs	r1, #44	; 0x2c
 8001fac:	fb01 f303 	mul.w	r3, r1, r3
 8001fb0:	4413      	add	r3, r2
 8001fb2:	333c      	adds	r3, #60	; 0x3c
 8001fb4:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001fb8:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6818      	ldr	r0, [r3, #0]
 8001fbe:	787c      	ldrb	r4, [r7, #1]
 8001fc0:	78ba      	ldrb	r2, [r7, #2]
 8001fc2:	78f9      	ldrb	r1, [r7, #3]
 8001fc4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001fc6:	9302      	str	r3, [sp, #8]
 8001fc8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001fcc:	9301      	str	r3, [sp, #4]
 8001fce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001fd2:	9300      	str	r3, [sp, #0]
 8001fd4:	4623      	mov	r3, r4
 8001fd6:	f003 fbeb 	bl	80057b0 <USB_HC_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3714      	adds	r7, #20
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd90      	pop	{r4, r7, pc}

08001ff0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_HCD_HC_Halt+0x1e>
 800200a:	2302      	movs	r3, #2
 800200c:	e00f      	b.n	800202e <HAL_HCD_HC_Halt+0x3e>
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2201      	movs	r2, #1
 8002012:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	78fa      	ldrb	r2, [r7, #3]
 800201c:	4611      	mov	r1, r2
 800201e:	4618      	mov	r0, r3
 8002020:	f003 fe3b 	bl	8005c9a <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2200      	movs	r2, #0
 8002028:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 800202c:	7bfb      	ldrb	r3, [r7, #15]
}
 800202e:	4618      	mov	r0, r3
 8002030:	3710      	adds	r7, #16
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
	...

08002038 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b082      	sub	sp, #8
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	4608      	mov	r0, r1
 8002042:	4611      	mov	r1, r2
 8002044:	461a      	mov	r2, r3
 8002046:	4603      	mov	r3, r0
 8002048:	70fb      	strb	r3, [r7, #3]
 800204a:	460b      	mov	r3, r1
 800204c:	70bb      	strb	r3, [r7, #2]
 800204e:	4613      	mov	r3, r2
 8002050:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002052:	78fb      	ldrb	r3, [r7, #3]
 8002054:	687a      	ldr	r2, [r7, #4]
 8002056:	212c      	movs	r1, #44	; 0x2c
 8002058:	fb01 f303 	mul.w	r3, r1, r3
 800205c:	4413      	add	r3, r2
 800205e:	333b      	adds	r3, #59	; 0x3b
 8002060:	78ba      	ldrb	r2, [r7, #2]
 8002062:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	212c      	movs	r1, #44	; 0x2c
 800206a:	fb01 f303 	mul.w	r3, r1, r3
 800206e:	4413      	add	r3, r2
 8002070:	333f      	adds	r3, #63	; 0x3f
 8002072:	787a      	ldrb	r2, [r7, #1]
 8002074:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8002076:	7c3b      	ldrb	r3, [r7, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d112      	bne.n	80020a2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 800207c:	78fb      	ldrb	r3, [r7, #3]
 800207e:	687a      	ldr	r2, [r7, #4]
 8002080:	212c      	movs	r1, #44	; 0x2c
 8002082:	fb01 f303 	mul.w	r3, r1, r3
 8002086:	4413      	add	r3, r2
 8002088:	3342      	adds	r3, #66	; 0x42
 800208a:	2203      	movs	r2, #3
 800208c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 800208e:	78fb      	ldrb	r3, [r7, #3]
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	212c      	movs	r1, #44	; 0x2c
 8002094:	fb01 f303 	mul.w	r3, r1, r3
 8002098:	4413      	add	r3, r2
 800209a:	333d      	adds	r3, #61	; 0x3d
 800209c:	7f3a      	ldrb	r2, [r7, #28]
 800209e:	701a      	strb	r2, [r3, #0]
 80020a0:	e008      	b.n	80020b4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80020a2:	78fb      	ldrb	r3, [r7, #3]
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	212c      	movs	r1, #44	; 0x2c
 80020a8:	fb01 f303 	mul.w	r3, r1, r3
 80020ac:	4413      	add	r3, r2
 80020ae:	3342      	adds	r3, #66	; 0x42
 80020b0:	2202      	movs	r2, #2
 80020b2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 80020b4:	787b      	ldrb	r3, [r7, #1]
 80020b6:	2b03      	cmp	r3, #3
 80020b8:	f200 80c6 	bhi.w	8002248 <HAL_HCD_HC_SubmitRequest+0x210>
 80020bc:	a201      	add	r2, pc, #4	; (adr r2, 80020c4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 80020be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020c2:	bf00      	nop
 80020c4:	080020d5 	.word	0x080020d5
 80020c8:	08002235 	.word	0x08002235
 80020cc:	08002139 	.word	0x08002139
 80020d0:	080021b7 	.word	0x080021b7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 80020d4:	7c3b      	ldrb	r3, [r7, #16]
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	f040 80b8 	bne.w	800224c <HAL_HCD_HC_SubmitRequest+0x214>
 80020dc:	78bb      	ldrb	r3, [r7, #2]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	f040 80b4 	bne.w	800224c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 80020e4:	8b3b      	ldrh	r3, [r7, #24]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d108      	bne.n	80020fc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 80020ea:	78fb      	ldrb	r3, [r7, #3]
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	212c      	movs	r1, #44	; 0x2c
 80020f0:	fb01 f303 	mul.w	r3, r1, r3
 80020f4:	4413      	add	r3, r2
 80020f6:	3355      	adds	r3, #85	; 0x55
 80020f8:	2201      	movs	r2, #1
 80020fa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80020fc:	78fb      	ldrb	r3, [r7, #3]
 80020fe:	687a      	ldr	r2, [r7, #4]
 8002100:	212c      	movs	r1, #44	; 0x2c
 8002102:	fb01 f303 	mul.w	r3, r1, r3
 8002106:	4413      	add	r3, r2
 8002108:	3355      	adds	r3, #85	; 0x55
 800210a:	781b      	ldrb	r3, [r3, #0]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d109      	bne.n	8002124 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002110:	78fb      	ldrb	r3, [r7, #3]
 8002112:	687a      	ldr	r2, [r7, #4]
 8002114:	212c      	movs	r1, #44	; 0x2c
 8002116:	fb01 f303 	mul.w	r3, r1, r3
 800211a:	4413      	add	r3, r2
 800211c:	3342      	adds	r3, #66	; 0x42
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8002122:	e093      	b.n	800224c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002124:	78fb      	ldrb	r3, [r7, #3]
 8002126:	687a      	ldr	r2, [r7, #4]
 8002128:	212c      	movs	r1, #44	; 0x2c
 800212a:	fb01 f303 	mul.w	r3, r1, r3
 800212e:	4413      	add	r3, r2
 8002130:	3342      	adds	r3, #66	; 0x42
 8002132:	2202      	movs	r2, #2
 8002134:	701a      	strb	r2, [r3, #0]
      break;
 8002136:	e089      	b.n	800224c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002138:	78bb      	ldrb	r3, [r7, #2]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d11d      	bne.n	800217a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800213e:	78fb      	ldrb	r3, [r7, #3]
 8002140:	687a      	ldr	r2, [r7, #4]
 8002142:	212c      	movs	r1, #44	; 0x2c
 8002144:	fb01 f303 	mul.w	r3, r1, r3
 8002148:	4413      	add	r3, r2
 800214a:	3355      	adds	r3, #85	; 0x55
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d109      	bne.n	8002166 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002152:	78fb      	ldrb	r3, [r7, #3]
 8002154:	687a      	ldr	r2, [r7, #4]
 8002156:	212c      	movs	r1, #44	; 0x2c
 8002158:	fb01 f303 	mul.w	r3, r1, r3
 800215c:	4413      	add	r3, r2
 800215e:	3342      	adds	r3, #66	; 0x42
 8002160:	2200      	movs	r2, #0
 8002162:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002164:	e073      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002166:	78fb      	ldrb	r3, [r7, #3]
 8002168:	687a      	ldr	r2, [r7, #4]
 800216a:	212c      	movs	r1, #44	; 0x2c
 800216c:	fb01 f303 	mul.w	r3, r1, r3
 8002170:	4413      	add	r3, r2
 8002172:	3342      	adds	r3, #66	; 0x42
 8002174:	2202      	movs	r2, #2
 8002176:	701a      	strb	r2, [r3, #0]
      break;
 8002178:	e069      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 800217a:	78fb      	ldrb	r3, [r7, #3]
 800217c:	687a      	ldr	r2, [r7, #4]
 800217e:	212c      	movs	r1, #44	; 0x2c
 8002180:	fb01 f303 	mul.w	r3, r1, r3
 8002184:	4413      	add	r3, r2
 8002186:	3354      	adds	r3, #84	; 0x54
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d109      	bne.n	80021a2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800218e:	78fb      	ldrb	r3, [r7, #3]
 8002190:	687a      	ldr	r2, [r7, #4]
 8002192:	212c      	movs	r1, #44	; 0x2c
 8002194:	fb01 f303 	mul.w	r3, r1, r3
 8002198:	4413      	add	r3, r2
 800219a:	3342      	adds	r3, #66	; 0x42
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
      break;
 80021a0:	e055      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021a2:	78fb      	ldrb	r3, [r7, #3]
 80021a4:	687a      	ldr	r2, [r7, #4]
 80021a6:	212c      	movs	r1, #44	; 0x2c
 80021a8:	fb01 f303 	mul.w	r3, r1, r3
 80021ac:	4413      	add	r3, r2
 80021ae:	3342      	adds	r3, #66	; 0x42
 80021b0:	2202      	movs	r2, #2
 80021b2:	701a      	strb	r2, [r3, #0]
      break;
 80021b4:	e04b      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80021b6:	78bb      	ldrb	r3, [r7, #2]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d11d      	bne.n	80021f8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80021bc:	78fb      	ldrb	r3, [r7, #3]
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	212c      	movs	r1, #44	; 0x2c
 80021c2:	fb01 f303 	mul.w	r3, r1, r3
 80021c6:	4413      	add	r3, r2
 80021c8:	3355      	adds	r3, #85	; 0x55
 80021ca:	781b      	ldrb	r3, [r3, #0]
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d109      	bne.n	80021e4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021d0:	78fb      	ldrb	r3, [r7, #3]
 80021d2:	687a      	ldr	r2, [r7, #4]
 80021d4:	212c      	movs	r1, #44	; 0x2c
 80021d6:	fb01 f303 	mul.w	r3, r1, r3
 80021da:	4413      	add	r3, r2
 80021dc:	3342      	adds	r3, #66	; 0x42
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80021e2:	e034      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021e4:	78fb      	ldrb	r3, [r7, #3]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	212c      	movs	r1, #44	; 0x2c
 80021ea:	fb01 f303 	mul.w	r3, r1, r3
 80021ee:	4413      	add	r3, r2
 80021f0:	3342      	adds	r3, #66	; 0x42
 80021f2:	2202      	movs	r2, #2
 80021f4:	701a      	strb	r2, [r3, #0]
      break;
 80021f6:	e02a      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80021f8:	78fb      	ldrb	r3, [r7, #3]
 80021fa:	687a      	ldr	r2, [r7, #4]
 80021fc:	212c      	movs	r1, #44	; 0x2c
 80021fe:	fb01 f303 	mul.w	r3, r1, r3
 8002202:	4413      	add	r3, r2
 8002204:	3354      	adds	r3, #84	; 0x54
 8002206:	781b      	ldrb	r3, [r3, #0]
 8002208:	2b00      	cmp	r3, #0
 800220a:	d109      	bne.n	8002220 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800220c:	78fb      	ldrb	r3, [r7, #3]
 800220e:	687a      	ldr	r2, [r7, #4]
 8002210:	212c      	movs	r1, #44	; 0x2c
 8002212:	fb01 f303 	mul.w	r3, r1, r3
 8002216:	4413      	add	r3, r2
 8002218:	3342      	adds	r3, #66	; 0x42
 800221a:	2200      	movs	r2, #0
 800221c:	701a      	strb	r2, [r3, #0]
      break;
 800221e:	e016      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002220:	78fb      	ldrb	r3, [r7, #3]
 8002222:	687a      	ldr	r2, [r7, #4]
 8002224:	212c      	movs	r1, #44	; 0x2c
 8002226:	fb01 f303 	mul.w	r3, r1, r3
 800222a:	4413      	add	r3, r2
 800222c:	3342      	adds	r3, #66	; 0x42
 800222e:	2202      	movs	r2, #2
 8002230:	701a      	strb	r2, [r3, #0]
      break;
 8002232:	e00c      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002234:	78fb      	ldrb	r3, [r7, #3]
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	212c      	movs	r1, #44	; 0x2c
 800223a:	fb01 f303 	mul.w	r3, r1, r3
 800223e:	4413      	add	r3, r2
 8002240:	3342      	adds	r3, #66	; 0x42
 8002242:	2200      	movs	r2, #0
 8002244:	701a      	strb	r2, [r3, #0]
      break;
 8002246:	e002      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002248:	bf00      	nop
 800224a:	e000      	b.n	800224e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800224c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800224e:	78fb      	ldrb	r3, [r7, #3]
 8002250:	687a      	ldr	r2, [r7, #4]
 8002252:	212c      	movs	r1, #44	; 0x2c
 8002254:	fb01 f303 	mul.w	r3, r1, r3
 8002258:	4413      	add	r3, r2
 800225a:	3344      	adds	r3, #68	; 0x44
 800225c:	697a      	ldr	r2, [r7, #20]
 800225e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002260:	78fb      	ldrb	r3, [r7, #3]
 8002262:	8b3a      	ldrh	r2, [r7, #24]
 8002264:	6879      	ldr	r1, [r7, #4]
 8002266:	202c      	movs	r0, #44	; 0x2c
 8002268:	fb00 f303 	mul.w	r3, r0, r3
 800226c:	440b      	add	r3, r1
 800226e:	334c      	adds	r3, #76	; 0x4c
 8002270:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002272:	78fb      	ldrb	r3, [r7, #3]
 8002274:	687a      	ldr	r2, [r7, #4]
 8002276:	212c      	movs	r1, #44	; 0x2c
 8002278:	fb01 f303 	mul.w	r3, r1, r3
 800227c:	4413      	add	r3, r2
 800227e:	3360      	adds	r3, #96	; 0x60
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002284:	78fb      	ldrb	r3, [r7, #3]
 8002286:	687a      	ldr	r2, [r7, #4]
 8002288:	212c      	movs	r1, #44	; 0x2c
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	4413      	add	r3, r2
 8002290:	3350      	adds	r3, #80	; 0x50
 8002292:	2200      	movs	r2, #0
 8002294:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002296:	78fb      	ldrb	r3, [r7, #3]
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	212c      	movs	r1, #44	; 0x2c
 800229c:	fb01 f303 	mul.w	r3, r1, r3
 80022a0:	4413      	add	r3, r2
 80022a2:	3339      	adds	r3, #57	; 0x39
 80022a4:	78fa      	ldrb	r2, [r7, #3]
 80022a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80022a8:	78fb      	ldrb	r3, [r7, #3]
 80022aa:	687a      	ldr	r2, [r7, #4]
 80022ac:	212c      	movs	r1, #44	; 0x2c
 80022ae:	fb01 f303 	mul.w	r3, r1, r3
 80022b2:	4413      	add	r3, r2
 80022b4:	3361      	adds	r3, #97	; 0x61
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6818      	ldr	r0, [r3, #0]
 80022be:	78fb      	ldrb	r3, [r7, #3]
 80022c0:	222c      	movs	r2, #44	; 0x2c
 80022c2:	fb02 f303 	mul.w	r3, r2, r3
 80022c6:	3338      	adds	r3, #56	; 0x38
 80022c8:	687a      	ldr	r2, [r7, #4]
 80022ca:	18d1      	adds	r1, r2, r3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	691b      	ldr	r3, [r3, #16]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	461a      	mov	r2, r3
 80022d4:	f003 fb8e 	bl	80059f4 <USB_HC_StartXfer>
 80022d8:	4603      	mov	r3, r0
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3708      	adds	r7, #8
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop

080022e4 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b086      	sub	sp, #24
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f003 f88f 	bl	800541e <USB_GetMode>
 8002300:	4603      	mov	r3, r0
 8002302:	2b01      	cmp	r3, #1
 8002304:	f040 80f6 	bne.w	80024f4 <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4618      	mov	r0, r3
 800230e:	f003 f873 	bl	80053f8 <USB_ReadInterrupts>
 8002312:	4603      	mov	r3, r0
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 80ec 	beq.w	80024f2 <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	4618      	mov	r0, r3
 8002320:	f003 f86a 	bl	80053f8 <USB_ReadInterrupts>
 8002324:	4603      	mov	r3, r0
 8002326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800232a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800232e:	d104      	bne.n	800233a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002338:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	4618      	mov	r0, r3
 8002340:	f003 f85a 	bl	80053f8 <USB_ReadInterrupts>
 8002344:	4603      	mov	r3, r0
 8002346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800234a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800234e:	d104      	bne.n	800235a <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002358:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f003 f84a 	bl	80053f8 <USB_ReadInterrupts>
 8002364:	4603      	mov	r3, r0
 8002366:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800236a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800236e:	d104      	bne.n	800237a <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002378:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4618      	mov	r0, r3
 8002380:	f003 f83a 	bl	80053f8 <USB_ReadInterrupts>
 8002384:	4603      	mov	r3, r0
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	2b02      	cmp	r3, #2
 800238c:	d103      	bne.n	8002396 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	2202      	movs	r2, #2
 8002394:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f003 f82c 	bl	80053f8 <USB_ReadInterrupts>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023aa:	d11c      	bne.n	80023e6 <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80023b4:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0301 	and.w	r3, r3, #1
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10f      	bne.n	80023e6 <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80023c6:	2110      	movs	r1, #16
 80023c8:	6938      	ldr	r0, [r7, #16]
 80023ca:	f002 ff1b 	bl	8005204 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80023ce:	6938      	ldr	r0, [r7, #16]
 80023d0:	f002 ff4c 	bl	800526c <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2101      	movs	r1, #1
 80023da:	4618      	mov	r0, r3
 80023dc:	f003 f922 	bl	8005624 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f005 feef 	bl	80081c4 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	4618      	mov	r0, r3
 80023ec:	f003 f804 	bl	80053f8 <USB_ReadInterrupts>
 80023f0:	4603      	mov	r3, r0
 80023f2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80023fa:	d102      	bne.n	8002402 <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80023fc:	6878      	ldr	r0, [r7, #4]
 80023fe:	f001 f89e 	bl	800353e <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f002 fff6 	bl	80053f8 <USB_ReadInterrupts>
 800240c:	4603      	mov	r3, r0
 800240e:	f003 0308 	and.w	r3, r3, #8
 8002412:	2b08      	cmp	r3, #8
 8002414:	d106      	bne.n	8002424 <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002416:	6878      	ldr	r0, [r7, #4]
 8002418:	f005 feb8 	bl	800818c <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2208      	movs	r2, #8
 8002422:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4618      	mov	r0, r3
 800242a:	f002 ffe5 	bl	80053f8 <USB_ReadInterrupts>
 800242e:	4603      	mov	r3, r0
 8002430:	f003 0310 	and.w	r3, r3, #16
 8002434:	2b10      	cmp	r3, #16
 8002436:	d101      	bne.n	800243c <HAL_HCD_IRQHandler+0x158>
 8002438:	2301      	movs	r3, #1
 800243a:	e000      	b.n	800243e <HAL_HCD_IRQHandler+0x15a>
 800243c:	2300      	movs	r3, #0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d012      	beq.n	8002468 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	699a      	ldr	r2, [r3, #24]
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f022 0210 	bic.w	r2, r2, #16
 8002450:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002452:	6878      	ldr	r0, [r7, #4]
 8002454:	f000 ffa1 	bl	800339a <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	699a      	ldr	r2, [r3, #24]
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f042 0210 	orr.w	r2, r2, #16
 8002466:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f002 ffc3 	bl	80053f8 <USB_ReadInterrupts>
 8002472:	4603      	mov	r3, r0
 8002474:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800247c:	d13a      	bne.n	80024f4 <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4618      	mov	r0, r3
 8002484:	f003 fbf8 	bl	8005c78 <USB_HC_ReadInterrupt>
 8002488:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	e025      	b.n	80024dc <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	f003 030f 	and.w	r3, r3, #15
 8002496:	68ba      	ldr	r2, [r7, #8]
 8002498:	fa22 f303 	lsr.w	r3, r2, r3
 800249c:	f003 0301 	and.w	r3, r3, #1
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d018      	beq.n	80024d6 <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80024b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80024ba:	d106      	bne.n	80024ca <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80024bc:	697b      	ldr	r3, [r7, #20]
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	4619      	mov	r1, r3
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 f8ab 	bl	800261e <HCD_HC_IN_IRQHandler>
 80024c8:	e005      	b.n	80024d6 <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	b2db      	uxtb	r3, r3
 80024ce:	4619      	mov	r1, r3
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fbf9 	bl	8002cc8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	3301      	adds	r3, #1
 80024da:	617b      	str	r3, [r7, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	689b      	ldr	r3, [r3, #8]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d3d4      	bcc.n	8002490 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80024ee:	615a      	str	r2, [r3, #20]
 80024f0:	e000      	b.n	80024f4 <HAL_HCD_IRQHandler+0x210>
      return;
 80024f2:	bf00      	nop
    }
  }
}
 80024f4:	3718      	adds	r7, #24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	bd80      	pop	{r7, pc}

080024fa <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80024fa:	b580      	push	{r7, lr}
 80024fc:	b082      	sub	sp, #8
 80024fe:	af00      	add	r7, sp, #0
 8002500:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002508:	2b01      	cmp	r3, #1
 800250a:	d101      	bne.n	8002510 <HAL_HCD_Start+0x16>
 800250c:	2302      	movs	r3, #2
 800250e:	e013      	b.n	8002538 <HAL_HCD_Start+0x3e>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2201      	movs	r2, #1
 8002514:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	2101      	movs	r1, #1
 800251e:	4618      	mov	r0, r3
 8002520:	f003 f8e4 	bl	80056ec <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f002 fdfc 	bl	8005126 <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 800254e:	2b01      	cmp	r3, #1
 8002550:	d101      	bne.n	8002556 <HAL_HCD_Stop+0x16>
 8002552:	2302      	movs	r3, #2
 8002554:	e00d      	b.n	8002572 <HAL_HCD_Stop+0x32>
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	2201      	movs	r2, #1
 800255a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f003 fcd2 	bl	8005f0c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2200      	movs	r2, #0
 800256c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002570:	2300      	movs	r3, #0
}
 8002572:	4618      	mov	r0, r3
 8002574:	3708      	adds	r7, #8
 8002576:	46bd      	mov	sp, r7
 8002578:	bd80      	pop	{r7, pc}

0800257a <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800257a:	b580      	push	{r7, lr}
 800257c:	b082      	sub	sp, #8
 800257e:	af00      	add	r7, sp, #0
 8002580:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	4618      	mov	r0, r3
 8002588:	f003 f886 	bl	8005698 <USB_ResetPort>
 800258c:	4603      	mov	r3, r0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
 800259e:	460b      	mov	r3, r1
 80025a0:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80025a2:	78fb      	ldrb	r3, [r7, #3]
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	212c      	movs	r1, #44	; 0x2c
 80025a8:	fb01 f303 	mul.w	r3, r1, r3
 80025ac:	4413      	add	r3, r2
 80025ae:	3360      	adds	r3, #96	; 0x60
 80025b0:	781b      	ldrb	r3, [r3, #0]
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr

080025be <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
 80025c6:	460b      	mov	r3, r1
 80025c8:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80025ca:	78fb      	ldrb	r3, [r7, #3]
 80025cc:	687a      	ldr	r2, [r7, #4]
 80025ce:	212c      	movs	r1, #44	; 0x2c
 80025d0:	fb01 f303 	mul.w	r3, r1, r3
 80025d4:	4413      	add	r3, r2
 80025d6:	3350      	adds	r3, #80	; 0x50
 80025d8:	681b      	ldr	r3, [r3, #0]
}
 80025da:	4618      	mov	r0, r3
 80025dc:	370c      	adds	r7, #12
 80025de:	46bd      	mov	sp, r7
 80025e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e4:	4770      	bx	lr

080025e6 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b082      	sub	sp, #8
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4618      	mov	r0, r3
 80025f4:	f003 f8ca 	bl	800578c <USB_GetCurrentFrame>
 80025f8:	4603      	mov	r3, r0
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3708      	adds	r7, #8
 80025fe:	46bd      	mov	sp, r7
 8002600:	bd80      	pop	{r7, pc}

08002602 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002602:	b580      	push	{r7, lr}
 8002604:	b082      	sub	sp, #8
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	4618      	mov	r0, r3
 8002610:	f003 f8a5 	bl	800575e <USB_GetHostSpeed>
 8002614:	4603      	mov	r3, r0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b086      	sub	sp, #24
 8002622:	af00      	add	r7, sp, #0
 8002624:	6078      	str	r0, [r7, #4]
 8002626:	460b      	mov	r3, r1
 8002628:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 8002634:	78fb      	ldrb	r3, [r7, #3]
 8002636:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	015a      	lsls	r2, r3, #5
 800263c:	693b      	ldr	r3, [r7, #16]
 800263e:	4413      	add	r3, r2
 8002640:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f003 0304 	and.w	r3, r3, #4
 800264a:	2b04      	cmp	r3, #4
 800264c:	d11a      	bne.n	8002684 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	015a      	lsls	r2, r3, #5
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	4413      	add	r3, r2
 8002656:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800265a:	461a      	mov	r2, r3
 800265c:	2304      	movs	r3, #4
 800265e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002660:	687a      	ldr	r2, [r7, #4]
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	212c      	movs	r1, #44	; 0x2c
 8002666:	fb01 f303 	mul.w	r3, r1, r3
 800266a:	4413      	add	r3, r2
 800266c:	3361      	adds	r3, #97	; 0x61
 800266e:	2206      	movs	r2, #6
 8002670:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	b2d2      	uxtb	r2, r2
 800267a:	4611      	mov	r1, r2
 800267c:	4618      	mov	r0, r3
 800267e:	f003 fb0c 	bl	8005c9a <USB_HC_Halt>
 8002682:	e0af      	b.n	80027e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	015a      	lsls	r2, r3, #5
 8002688:	693b      	ldr	r3, [r7, #16]
 800268a:	4413      	add	r3, r2
 800268c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002690:	689b      	ldr	r3, [r3, #8]
 8002692:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800269a:	d11b      	bne.n	80026d4 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	015a      	lsls	r2, r3, #5
 80026a0:	693b      	ldr	r3, [r7, #16]
 80026a2:	4413      	add	r3, r2
 80026a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026a8:	461a      	mov	r2, r3
 80026aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80026ae:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 80026b0:	687a      	ldr	r2, [r7, #4]
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	212c      	movs	r1, #44	; 0x2c
 80026b6:	fb01 f303 	mul.w	r3, r1, r3
 80026ba:	4413      	add	r3, r2
 80026bc:	3361      	adds	r3, #97	; 0x61
 80026be:	2207      	movs	r2, #7
 80026c0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68fa      	ldr	r2, [r7, #12]
 80026c8:	b2d2      	uxtb	r2, r2
 80026ca:	4611      	mov	r1, r2
 80026cc:	4618      	mov	r0, r3
 80026ce:	f003 fae4 	bl	8005c9a <USB_HC_Halt>
 80026d2:	e087      	b.n	80027e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	015a      	lsls	r2, r3, #5
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	4413      	add	r3, r2
 80026dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026e0:	689b      	ldr	r3, [r3, #8]
 80026e2:	f003 0320 	and.w	r3, r3, #32
 80026e6:	2b20      	cmp	r3, #32
 80026e8:	d109      	bne.n	80026fe <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	015a      	lsls	r2, r3, #5
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	4413      	add	r3, r2
 80026f2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026f6:	461a      	mov	r2, r3
 80026f8:	2320      	movs	r3, #32
 80026fa:	6093      	str	r3, [r2, #8]
 80026fc:	e072      	b.n	80027e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	015a      	lsls	r2, r3, #5
 8002702:	693b      	ldr	r3, [r7, #16]
 8002704:	4413      	add	r3, r2
 8002706:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	f003 0308 	and.w	r3, r3, #8
 8002710:	2b08      	cmp	r3, #8
 8002712:	d11a      	bne.n	800274a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	015a      	lsls	r2, r3, #5
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	4413      	add	r3, r2
 800271c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002720:	461a      	mov	r2, r3
 8002722:	2308      	movs	r3, #8
 8002724:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002726:	687a      	ldr	r2, [r7, #4]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	212c      	movs	r1, #44	; 0x2c
 800272c:	fb01 f303 	mul.w	r3, r1, r3
 8002730:	4413      	add	r3, r2
 8002732:	3361      	adds	r3, #97	; 0x61
 8002734:	2205      	movs	r2, #5
 8002736:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68fa      	ldr	r2, [r7, #12]
 800273e:	b2d2      	uxtb	r2, r2
 8002740:	4611      	mov	r1, r2
 8002742:	4618      	mov	r0, r3
 8002744:	f003 faa9 	bl	8005c9a <USB_HC_Halt>
 8002748:	e04c      	b.n	80027e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800275c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002760:	d11b      	bne.n	800279a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	015a      	lsls	r2, r3, #5
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4413      	add	r3, r2
 800276a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800276e:	461a      	mov	r2, r3
 8002770:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002774:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002776:	687a      	ldr	r2, [r7, #4]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	212c      	movs	r1, #44	; 0x2c
 800277c:	fb01 f303 	mul.w	r3, r1, r3
 8002780:	4413      	add	r3, r2
 8002782:	3361      	adds	r3, #97	; 0x61
 8002784:	2208      	movs	r2, #8
 8002786:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68fa      	ldr	r2, [r7, #12]
 800278e:	b2d2      	uxtb	r2, r2
 8002790:	4611      	mov	r1, r2
 8002792:	4618      	mov	r0, r3
 8002794:	f003 fa81 	bl	8005c9a <USB_HC_Halt>
 8002798:	e024      	b.n	80027e4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	015a      	lsls	r2, r3, #5
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	4413      	add	r3, r2
 80027a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027a6:	689b      	ldr	r3, [r3, #8]
 80027a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027ac:	2b80      	cmp	r3, #128	; 0x80
 80027ae:	d119      	bne.n	80027e4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	015a      	lsls	r2, r3, #5
 80027b4:	693b      	ldr	r3, [r7, #16]
 80027b6:	4413      	add	r3, r2
 80027b8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027bc:	461a      	mov	r2, r3
 80027be:	2380      	movs	r3, #128	; 0x80
 80027c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	212c      	movs	r1, #44	; 0x2c
 80027c8:	fb01 f303 	mul.w	r3, r1, r3
 80027cc:	4413      	add	r3, r2
 80027ce:	3361      	adds	r3, #97	; 0x61
 80027d0:	2206      	movs	r2, #6
 80027d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	68fa      	ldr	r2, [r7, #12]
 80027da:	b2d2      	uxtb	r2, r2
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f003 fa5b 	bl	8005c9a <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	015a      	lsls	r2, r3, #5
 80027e8:	693b      	ldr	r3, [r7, #16]
 80027ea:	4413      	add	r3, r2
 80027ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80027f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027fa:	d112      	bne.n	8002822 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	68fa      	ldr	r2, [r7, #12]
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	4611      	mov	r1, r2
 8002806:	4618      	mov	r0, r3
 8002808:	f003 fa47 	bl	8005c9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002818:	461a      	mov	r2, r3
 800281a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800281e:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 8002820:	e24e      	b.n	8002cc0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	015a      	lsls	r2, r3, #5
 8002826:	693b      	ldr	r3, [r7, #16]
 8002828:	4413      	add	r3, r2
 800282a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800282e:	689b      	ldr	r3, [r3, #8]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b01      	cmp	r3, #1
 8002836:	f040 80df 	bne.w	80029f8 <HCD_HC_IN_IRQHandler+0x3da>
    if (hhcd->Init.dma_enable != 0U)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	691b      	ldr	r3, [r3, #16]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d019      	beq.n	8002876 <HCD_HC_IN_IRQHandler+0x258>
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	3348      	adds	r3, #72	; 0x48
 8002850:	681a      	ldr	r2, [r3, #0]
                                    (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	0159      	lsls	r1, r3, #5
 8002856:	693b      	ldr	r3, [r7, #16]
 8002858:	440b      	add	r3, r1
 800285a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f3c3 0312 	ubfx	r3, r3, #0, #19
      hhcd->hc[ch_num].xfer_count = hhcd->hc[ch_num].XferSize - \
 8002864:	1ad2      	subs	r2, r2, r3
 8002866:	6879      	ldr	r1, [r7, #4]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	202c      	movs	r0, #44	; 0x2c
 800286c:	fb00 f303 	mul.w	r3, r0, r3
 8002870:	440b      	add	r3, r1
 8002872:	3350      	adds	r3, #80	; 0x50
 8002874:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	212c      	movs	r1, #44	; 0x2c
 800287c:	fb01 f303 	mul.w	r3, r1, r3
 8002880:	4413      	add	r3, r2
 8002882:	3361      	adds	r3, #97	; 0x61
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002888:	687a      	ldr	r2, [r7, #4]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	212c      	movs	r1, #44	; 0x2c
 800288e:	fb01 f303 	mul.w	r3, r1, r3
 8002892:	4413      	add	r3, r2
 8002894:	335c      	adds	r3, #92	; 0x5c
 8002896:	2200      	movs	r2, #0
 8002898:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a6:	461a      	mov	r2, r3
 80028a8:	2301      	movs	r3, #1
 80028aa:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028ac:	687a      	ldr	r2, [r7, #4]
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	212c      	movs	r1, #44	; 0x2c
 80028b2:	fb01 f303 	mul.w	r3, r1, r3
 80028b6:	4413      	add	r3, r2
 80028b8:	333f      	adds	r3, #63	; 0x3f
 80028ba:	781b      	ldrb	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d009      	beq.n	80028d4 <HCD_HC_IN_IRQHandler+0x2b6>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80028c0:	687a      	ldr	r2, [r7, #4]
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	212c      	movs	r1, #44	; 0x2c
 80028c6:	fb01 f303 	mul.w	r3, r1, r3
 80028ca:	4413      	add	r3, r2
 80028cc:	333f      	adds	r3, #63	; 0x3f
 80028ce:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80028d0:	2b02      	cmp	r3, #2
 80028d2:	d111      	bne.n	80028f8 <HCD_HC_IN_IRQHandler+0x2da>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68fa      	ldr	r2, [r7, #12]
 80028da:	b2d2      	uxtb	r2, r2
 80028dc:	4611      	mov	r1, r2
 80028de:	4618      	mov	r0, r3
 80028e0:	f003 f9db 	bl	8005c9a <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	015a      	lsls	r2, r3, #5
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4413      	add	r3, r2
 80028ec:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028f0:	461a      	mov	r2, r3
 80028f2:	2310      	movs	r3, #16
 80028f4:	6093      	str	r3, [r2, #8]
 80028f6:	e03a      	b.n	800296e <HCD_HC_IN_IRQHandler+0x350>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80028f8:	687a      	ldr	r2, [r7, #4]
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	212c      	movs	r1, #44	; 0x2c
 80028fe:	fb01 f303 	mul.w	r3, r1, r3
 8002902:	4413      	add	r3, r2
 8002904:	333f      	adds	r3, #63	; 0x3f
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	2b03      	cmp	r3, #3
 800290a:	d009      	beq.n	8002920 <HCD_HC_IN_IRQHandler+0x302>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	212c      	movs	r1, #44	; 0x2c
 8002912:	fb01 f303 	mul.w	r3, r1, r3
 8002916:	4413      	add	r3, r2
 8002918:	333f      	adds	r3, #63	; 0x3f
 800291a:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800291c:	2b01      	cmp	r3, #1
 800291e:	d126      	bne.n	800296e <HCD_HC_IN_IRQHandler+0x350>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	015a      	lsls	r2, r3, #5
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	4413      	add	r3, r2
 8002928:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	68fa      	ldr	r2, [r7, #12]
 8002930:	0151      	lsls	r1, r2, #5
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	440a      	add	r2, r1
 8002936:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800293a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800293e:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002940:	687a      	ldr	r2, [r7, #4]
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	212c      	movs	r1, #44	; 0x2c
 8002946:	fb01 f303 	mul.w	r3, r1, r3
 800294a:	4413      	add	r3, r2
 800294c:	3360      	adds	r3, #96	; 0x60
 800294e:	2201      	movs	r2, #1
 8002950:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	b2d9      	uxtb	r1, r3
 8002956:	687a      	ldr	r2, [r7, #4]
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	202c      	movs	r0, #44	; 0x2c
 800295c:	fb00 f303 	mul.w	r3, r0, r3
 8002960:	4413      	add	r3, r2
 8002962:	3360      	adds	r3, #96	; 0x60
 8002964:	781b      	ldrb	r3, [r3, #0]
 8002966:	461a      	mov	r2, r3
 8002968:	6878      	ldr	r0, [r7, #4]
 800296a:	f005 fc39 	bl	80081e0 <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	691b      	ldr	r3, [r3, #16]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d12b      	bne.n	80029ce <HCD_HC_IN_IRQHandler+0x3b0>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 8002976:	687a      	ldr	r2, [r7, #4]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	212c      	movs	r1, #44	; 0x2c
 800297c:	fb01 f303 	mul.w	r3, r1, r3
 8002980:	4413      	add	r3, r2
 8002982:	3348      	adds	r3, #72	; 0x48
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6879      	ldr	r1, [r7, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	202c      	movs	r0, #44	; 0x2c
 800298c:	fb00 f202 	mul.w	r2, r0, r2
 8002990:	440a      	add	r2, r1
 8002992:	3240      	adds	r2, #64	; 0x40
 8002994:	8812      	ldrh	r2, [r2, #0]
 8002996:	fbb3 f3f2 	udiv	r3, r3, r2
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 818e 	beq.w	8002cc0 <HCD_HC_IN_IRQHandler+0x6a2>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	212c      	movs	r1, #44	; 0x2c
 80029aa:	fb01 f303 	mul.w	r3, r1, r3
 80029ae:	4413      	add	r3, r2
 80029b0:	3354      	adds	r3, #84	; 0x54
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	f083 0301 	eor.w	r3, r3, #1
 80029b8:	b2d8      	uxtb	r0, r3
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	212c      	movs	r1, #44	; 0x2c
 80029c0:	fb01 f303 	mul.w	r3, r1, r3
 80029c4:	4413      	add	r3, r2
 80029c6:	3354      	adds	r3, #84	; 0x54
 80029c8:	4602      	mov	r2, r0
 80029ca:	701a      	strb	r2, [r3, #0]
}
 80029cc:	e178      	b.n	8002cc0 <HCD_HC_IN_IRQHandler+0x6a2>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	3354      	adds	r3, #84	; 0x54
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	f083 0301 	eor.w	r3, r3, #1
 80029e2:	b2d8      	uxtb	r0, r3
 80029e4:	687a      	ldr	r2, [r7, #4]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	212c      	movs	r1, #44	; 0x2c
 80029ea:	fb01 f303 	mul.w	r3, r1, r3
 80029ee:	4413      	add	r3, r2
 80029f0:	3354      	adds	r3, #84	; 0x54
 80029f2:	4602      	mov	r2, r0
 80029f4:	701a      	strb	r2, [r3, #0]
}
 80029f6:	e163      	b.n	8002cc0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	015a      	lsls	r2, r3, #5
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	4413      	add	r3, r2
 8002a00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	f003 0302 	and.w	r3, r3, #2
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	f040 80f6 	bne.w	8002bfc <HCD_HC_IN_IRQHandler+0x5de>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002a10:	687a      	ldr	r2, [r7, #4]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	212c      	movs	r1, #44	; 0x2c
 8002a16:	fb01 f303 	mul.w	r3, r1, r3
 8002a1a:	4413      	add	r3, r2
 8002a1c:	3361      	adds	r3, #97	; 0x61
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d109      	bne.n	8002a38 <HCD_HC_IN_IRQHandler+0x41a>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 8002a24:	687a      	ldr	r2, [r7, #4]
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	212c      	movs	r1, #44	; 0x2c
 8002a2a:	fb01 f303 	mul.w	r3, r1, r3
 8002a2e:	4413      	add	r3, r2
 8002a30:	3360      	adds	r3, #96	; 0x60
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e0c9      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002a38:	687a      	ldr	r2, [r7, #4]
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	212c      	movs	r1, #44	; 0x2c
 8002a3e:	fb01 f303 	mul.w	r3, r1, r3
 8002a42:	4413      	add	r3, r2
 8002a44:	3361      	adds	r3, #97	; 0x61
 8002a46:	781b      	ldrb	r3, [r3, #0]
 8002a48:	2b05      	cmp	r3, #5
 8002a4a:	d109      	bne.n	8002a60 <HCD_HC_IN_IRQHandler+0x442>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	212c      	movs	r1, #44	; 0x2c
 8002a52:	fb01 f303 	mul.w	r3, r1, r3
 8002a56:	4413      	add	r3, r2
 8002a58:	3360      	adds	r3, #96	; 0x60
 8002a5a:	2205      	movs	r2, #5
 8002a5c:	701a      	strb	r2, [r3, #0]
 8002a5e:	e0b5      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x5ae>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	212c      	movs	r1, #44	; 0x2c
 8002a66:	fb01 f303 	mul.w	r3, r1, r3
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3361      	adds	r3, #97	; 0x61
 8002a6e:	781b      	ldrb	r3, [r3, #0]
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d009      	beq.n	8002a88 <HCD_HC_IN_IRQHandler+0x46a>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002a74:	687a      	ldr	r2, [r7, #4]
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	212c      	movs	r1, #44	; 0x2c
 8002a7a:	fb01 f303 	mul.w	r3, r1, r3
 8002a7e:	4413      	add	r3, r2
 8002a80:	3361      	adds	r3, #97	; 0x61
 8002a82:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002a84:	2b08      	cmp	r3, #8
 8002a86:	d150      	bne.n	8002b2a <HCD_HC_IN_IRQHandler+0x50c>
      hhcd->hc[ch_num].ErrCnt++;
 8002a88:	687a      	ldr	r2, [r7, #4]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	212c      	movs	r1, #44	; 0x2c
 8002a8e:	fb01 f303 	mul.w	r3, r1, r3
 8002a92:	4413      	add	r3, r2
 8002a94:	335c      	adds	r3, #92	; 0x5c
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	202c      	movs	r0, #44	; 0x2c
 8002aa0:	fb00 f303 	mul.w	r3, r0, r3
 8002aa4:	440b      	add	r3, r1
 8002aa6:	335c      	adds	r3, #92	; 0x5c
 8002aa8:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	212c      	movs	r1, #44	; 0x2c
 8002ab0:	fb01 f303 	mul.w	r3, r1, r3
 8002ab4:	4413      	add	r3, r2
 8002ab6:	335c      	adds	r3, #92	; 0x5c
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d912      	bls.n	8002ae4 <HCD_HC_IN_IRQHandler+0x4c6>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	212c      	movs	r1, #44	; 0x2c
 8002ac4:	fb01 f303 	mul.w	r3, r1, r3
 8002ac8:	4413      	add	r3, r2
 8002aca:	335c      	adds	r3, #92	; 0x5c
 8002acc:	2200      	movs	r2, #0
 8002ace:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002ad0:	687a      	ldr	r2, [r7, #4]
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	212c      	movs	r1, #44	; 0x2c
 8002ad6:	fb01 f303 	mul.w	r3, r1, r3
 8002ada:	4413      	add	r3, r2
 8002adc:	3360      	adds	r3, #96	; 0x60
 8002ade:	2204      	movs	r2, #4
 8002ae0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002ae2:	e073      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x5ae>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ae4:	687a      	ldr	r2, [r7, #4]
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	212c      	movs	r1, #44	; 0x2c
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	3360      	adds	r3, #96	; 0x60
 8002af2:	2202      	movs	r2, #2
 8002af4:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	015a      	lsls	r2, r3, #5
 8002afa:	693b      	ldr	r3, [r7, #16]
 8002afc:	4413      	add	r3, r2
 8002afe:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b0c:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b14:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	015a      	lsls	r2, r3, #5
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b22:	461a      	mov	r2, r3
 8002b24:	68bb      	ldr	r3, [r7, #8]
 8002b26:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002b28:	e050      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	212c      	movs	r1, #44	; 0x2c
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	4413      	add	r3, r2
 8002b36:	3361      	adds	r3, #97	; 0x61
 8002b38:	781b      	ldrb	r3, [r3, #0]
 8002b3a:	2b03      	cmp	r3, #3
 8002b3c:	d122      	bne.n	8002b84 <HCD_HC_IN_IRQHandler+0x566>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002b3e:	687a      	ldr	r2, [r7, #4]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	212c      	movs	r1, #44	; 0x2c
 8002b44:	fb01 f303 	mul.w	r3, r1, r3
 8002b48:	4413      	add	r3, r2
 8002b4a:	3360      	adds	r3, #96	; 0x60
 8002b4c:	2202      	movs	r2, #2
 8002b4e:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	015a      	lsls	r2, r3, #5
 8002b54:	693b      	ldr	r3, [r7, #16]
 8002b56:	4413      	add	r3, r2
 8002b58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002b66:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002b6e:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	015a      	lsls	r2, r3, #5
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4413      	add	r3, r2
 8002b78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b7c:	461a      	mov	r2, r3
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	6013      	str	r3, [r2, #0]
 8002b82:	e023      	b.n	8002bcc <HCD_HC_IN_IRQHandler+0x5ae>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	212c      	movs	r1, #44	; 0x2c
 8002b8a:	fb01 f303 	mul.w	r3, r1, r3
 8002b8e:	4413      	add	r3, r2
 8002b90:	3361      	adds	r3, #97	; 0x61
 8002b92:	781b      	ldrb	r3, [r3, #0]
 8002b94:	2b07      	cmp	r3, #7
 8002b96:	d119      	bne.n	8002bcc <HCD_HC_IN_IRQHandler+0x5ae>
      hhcd->hc[ch_num].ErrCnt++;
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	212c      	movs	r1, #44	; 0x2c
 8002b9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ba2:	4413      	add	r3, r2
 8002ba4:	335c      	adds	r3, #92	; 0x5c
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	1c5a      	adds	r2, r3, #1
 8002baa:	6879      	ldr	r1, [r7, #4]
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	202c      	movs	r0, #44	; 0x2c
 8002bb0:	fb00 f303 	mul.w	r3, r0, r3
 8002bb4:	440b      	add	r3, r1
 8002bb6:	335c      	adds	r3, #92	; 0x5c
 8002bb8:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002bba:	687a      	ldr	r2, [r7, #4]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	212c      	movs	r1, #44	; 0x2c
 8002bc0:	fb01 f303 	mul.w	r3, r1, r3
 8002bc4:	4413      	add	r3, r2
 8002bc6:	3360      	adds	r3, #96	; 0x60
 8002bc8:	2204      	movs	r2, #4
 8002bca:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	015a      	lsls	r2, r3, #5
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	4413      	add	r3, r2
 8002bd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bd8:	461a      	mov	r2, r3
 8002bda:	2302      	movs	r3, #2
 8002bdc:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	b2d9      	uxtb	r1, r3
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	202c      	movs	r0, #44	; 0x2c
 8002be8:	fb00 f303 	mul.w	r3, r0, r3
 8002bec:	4413      	add	r3, r2
 8002bee:	3360      	adds	r3, #96	; 0x60
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f005 faf3 	bl	80081e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8002bfa:	e061      	b.n	8002cc0 <HCD_HC_IN_IRQHandler+0x6a2>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	015a      	lsls	r2, r3, #5
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	4413      	add	r3, r2
 8002c04:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c08:	689b      	ldr	r3, [r3, #8]
 8002c0a:	f003 0310 	and.w	r3, r3, #16
 8002c0e:	2b10      	cmp	r3, #16
 8002c10:	d156      	bne.n	8002cc0 <HCD_HC_IN_IRQHandler+0x6a2>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	212c      	movs	r1, #44	; 0x2c
 8002c18:	fb01 f303 	mul.w	r3, r1, r3
 8002c1c:	4413      	add	r3, r2
 8002c1e:	333f      	adds	r3, #63	; 0x3f
 8002c20:	781b      	ldrb	r3, [r3, #0]
 8002c22:	2b03      	cmp	r3, #3
 8002c24:	d111      	bne.n	8002c4a <HCD_HC_IN_IRQHandler+0x62c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c26:	687a      	ldr	r2, [r7, #4]
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	212c      	movs	r1, #44	; 0x2c
 8002c2c:	fb01 f303 	mul.w	r3, r1, r3
 8002c30:	4413      	add	r3, r2
 8002c32:	335c      	adds	r3, #92	; 0x5c
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	68fa      	ldr	r2, [r7, #12]
 8002c3e:	b2d2      	uxtb	r2, r2
 8002c40:	4611      	mov	r1, r2
 8002c42:	4618      	mov	r0, r3
 8002c44:	f003 f829 	bl	8005c9a <USB_HC_Halt>
 8002c48:	e031      	b.n	8002cae <HCD_HC_IN_IRQHandler+0x690>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c4a:	687a      	ldr	r2, [r7, #4]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	212c      	movs	r1, #44	; 0x2c
 8002c50:	fb01 f303 	mul.w	r3, r1, r3
 8002c54:	4413      	add	r3, r2
 8002c56:	333f      	adds	r3, #63	; 0x3f
 8002c58:	781b      	ldrb	r3, [r3, #0]
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d009      	beq.n	8002c72 <HCD_HC_IN_IRQHandler+0x654>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	212c      	movs	r1, #44	; 0x2c
 8002c64:	fb01 f303 	mul.w	r3, r1, r3
 8002c68:	4413      	add	r3, r2
 8002c6a:	333f      	adds	r3, #63	; 0x3f
 8002c6c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002c6e:	2b02      	cmp	r3, #2
 8002c70:	d11d      	bne.n	8002cae <HCD_HC_IN_IRQHandler+0x690>
      hhcd->hc[ch_num].ErrCnt = 0U;
 8002c72:	687a      	ldr	r2, [r7, #4]
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	212c      	movs	r1, #44	; 0x2c
 8002c78:	fb01 f303 	mul.w	r3, r1, r3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	335c      	adds	r3, #92	; 0x5c
 8002c80:	2200      	movs	r2, #0
 8002c82:	601a      	str	r2, [r3, #0]
      if (hhcd->Init.dma_enable == 0U)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	691b      	ldr	r3, [r3, #16]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d110      	bne.n	8002cae <HCD_HC_IN_IRQHandler+0x690>
        hhcd->hc[ch_num].state = HC_NAK;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3361      	adds	r3, #97	; 0x61
 8002c9a:	2203      	movs	r2, #3
 8002c9c:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f002 fff6 	bl	8005c9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	015a      	lsls	r2, r3, #5
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	4413      	add	r3, r2
 8002cb6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cba:	461a      	mov	r2, r3
 8002cbc:	2310      	movs	r3, #16
 8002cbe:	6093      	str	r3, [r2, #8]
}
 8002cc0:	bf00      	nop
 8002cc2:	3718      	adds	r7, #24
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	bd80      	pop	{r7, pc}

08002cc8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	460b      	mov	r3, r1
 8002cd2:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002cde:	78fb      	ldrb	r3, [r7, #3]
 8002ce0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	015a      	lsls	r2, r3, #5
 8002ce6:	69bb      	ldr	r3, [r7, #24]
 8002ce8:	4413      	add	r3, r2
 8002cea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0304 	and.w	r3, r3, #4
 8002cf4:	2b04      	cmp	r3, #4
 8002cf6:	d11a      	bne.n	8002d2e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	69bb      	ldr	r3, [r7, #24]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d04:	461a      	mov	r2, r3
 8002d06:	2304      	movs	r3, #4
 8002d08:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d0a:	687a      	ldr	r2, [r7, #4]
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	212c      	movs	r1, #44	; 0x2c
 8002d10:	fb01 f303 	mul.w	r3, r1, r3
 8002d14:	4413      	add	r3, r2
 8002d16:	3361      	adds	r3, #97	; 0x61
 8002d18:	2206      	movs	r2, #6
 8002d1a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	b2d2      	uxtb	r2, r2
 8002d24:	4611      	mov	r1, r2
 8002d26:	4618      	mov	r0, r3
 8002d28:	f002 ffb7 	bl	8005c9a <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002d2c:	e331      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002d2e:	697b      	ldr	r3, [r7, #20]
 8002d30:	015a      	lsls	r2, r3, #5
 8002d32:	69bb      	ldr	r3, [r7, #24]
 8002d34:	4413      	add	r3, r2
 8002d36:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 0320 	and.w	r3, r3, #32
 8002d40:	2b20      	cmp	r3, #32
 8002d42:	d12e      	bne.n	8002da2 <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d50:	461a      	mov	r2, r3
 8002d52:	2320      	movs	r3, #32
 8002d54:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	212c      	movs	r1, #44	; 0x2c
 8002d5c:	fb01 f303 	mul.w	r3, r1, r3
 8002d60:	4413      	add	r3, r2
 8002d62:	333d      	adds	r3, #61	; 0x3d
 8002d64:	781b      	ldrb	r3, [r3, #0]
 8002d66:	2b01      	cmp	r3, #1
 8002d68:	f040 8313 	bne.w	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
      hhcd->hc[ch_num].do_ping = 0U;
 8002d6c:	687a      	ldr	r2, [r7, #4]
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	212c      	movs	r1, #44	; 0x2c
 8002d72:	fb01 f303 	mul.w	r3, r1, r3
 8002d76:	4413      	add	r3, r2
 8002d78:	333d      	adds	r3, #61	; 0x3d
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002d7e:	687a      	ldr	r2, [r7, #4]
 8002d80:	697b      	ldr	r3, [r7, #20]
 8002d82:	212c      	movs	r1, #44	; 0x2c
 8002d84:	fb01 f303 	mul.w	r3, r1, r3
 8002d88:	4413      	add	r3, r2
 8002d8a:	3360      	adds	r3, #96	; 0x60
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	b2d2      	uxtb	r2, r2
 8002d98:	4611      	mov	r1, r2
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f002 ff7d 	bl	8005c9a <USB_HC_Halt>
}
 8002da0:	e2f7      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002da2:	697b      	ldr	r3, [r7, #20]
 8002da4:	015a      	lsls	r2, r3, #5
 8002da6:	69bb      	ldr	r3, [r7, #24]
 8002da8:	4413      	add	r3, r2
 8002daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002db4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002db8:	d112      	bne.n	8002de0 <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002dba:	697b      	ldr	r3, [r7, #20]
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002dcc:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	697a      	ldr	r2, [r7, #20]
 8002dd4:	b2d2      	uxtb	r2, r2
 8002dd6:	4611      	mov	r1, r2
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f002 ff5e 	bl	8005c9a <USB_HC_Halt>
}
 8002dde:	e2d8      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	015a      	lsls	r2, r3, #5
 8002de4:	69bb      	ldr	r3, [r7, #24]
 8002de6:	4413      	add	r3, r2
 8002de8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f003 0301 	and.w	r3, r3, #1
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d140      	bne.n	8002e78 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002df6:	687a      	ldr	r2, [r7, #4]
 8002df8:	697b      	ldr	r3, [r7, #20]
 8002dfa:	212c      	movs	r1, #44	; 0x2c
 8002dfc:	fb01 f303 	mul.w	r3, r1, r3
 8002e00:	4413      	add	r3, r2
 8002e02:	335c      	adds	r3, #92	; 0x5c
 8002e04:	2200      	movs	r2, #0
 8002e06:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	015a      	lsls	r2, r3, #5
 8002e0c:	69bb      	ldr	r3, [r7, #24]
 8002e0e:	4413      	add	r3, r2
 8002e10:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e1a:	2b40      	cmp	r3, #64	; 0x40
 8002e1c:	d111      	bne.n	8002e42 <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002e1e:	687a      	ldr	r2, [r7, #4]
 8002e20:	697b      	ldr	r3, [r7, #20]
 8002e22:	212c      	movs	r1, #44	; 0x2c
 8002e24:	fb01 f303 	mul.w	r3, r1, r3
 8002e28:	4413      	add	r3, r2
 8002e2a:	333d      	adds	r3, #61	; 0x3d
 8002e2c:	2201      	movs	r2, #1
 8002e2e:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	015a      	lsls	r2, r3, #5
 8002e34:	69bb      	ldr	r3, [r7, #24]
 8002e36:	4413      	add	r3, r2
 8002e38:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e3c:	461a      	mov	r2, r3
 8002e3e:	2340      	movs	r3, #64	; 0x40
 8002e40:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002e42:	697b      	ldr	r3, [r7, #20]
 8002e44:	015a      	lsls	r2, r3, #5
 8002e46:	69bb      	ldr	r3, [r7, #24]
 8002e48:	4413      	add	r3, r2
 8002e4a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e4e:	461a      	mov	r2, r3
 8002e50:	2301      	movs	r3, #1
 8002e52:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002e54:	687a      	ldr	r2, [r7, #4]
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	212c      	movs	r1, #44	; 0x2c
 8002e5a:	fb01 f303 	mul.w	r3, r1, r3
 8002e5e:	4413      	add	r3, r2
 8002e60:	3361      	adds	r3, #97	; 0x61
 8002e62:	2201      	movs	r2, #1
 8002e64:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	697a      	ldr	r2, [r7, #20]
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	4611      	mov	r1, r2
 8002e70:	4618      	mov	r0, r3
 8002e72:	f002 ff12 	bl	8005c9a <USB_HC_Halt>
}
 8002e76:	e28c      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	015a      	lsls	r2, r3, #5
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	4413      	add	r3, r2
 8002e80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e8a:	2b40      	cmp	r3, #64	; 0x40
 8002e8c:	d12c      	bne.n	8002ee8 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	697b      	ldr	r3, [r7, #20]
 8002e92:	212c      	movs	r1, #44	; 0x2c
 8002e94:	fb01 f303 	mul.w	r3, r1, r3
 8002e98:	4413      	add	r3, r2
 8002e9a:	3361      	adds	r3, #97	; 0x61
 8002e9c:	2204      	movs	r2, #4
 8002e9e:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002ea0:	687a      	ldr	r2, [r7, #4]
 8002ea2:	697b      	ldr	r3, [r7, #20]
 8002ea4:	212c      	movs	r1, #44	; 0x2c
 8002ea6:	fb01 f303 	mul.w	r3, r1, r3
 8002eaa:	4413      	add	r3, r2
 8002eac:	333d      	adds	r3, #61	; 0x3d
 8002eae:	2201      	movs	r2, #1
 8002eb0:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002eb2:	687a      	ldr	r2, [r7, #4]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	212c      	movs	r1, #44	; 0x2c
 8002eb8:	fb01 f303 	mul.w	r3, r1, r3
 8002ebc:	4413      	add	r3, r2
 8002ebe:	335c      	adds	r3, #92	; 0x5c
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	697a      	ldr	r2, [r7, #20]
 8002eca:	b2d2      	uxtb	r2, r2
 8002ecc:	4611      	mov	r1, r2
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f002 fee3 	bl	8005c9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	015a      	lsls	r2, r3, #5
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	4413      	add	r3, r2
 8002edc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	2340      	movs	r3, #64	; 0x40
 8002ee4:	6093      	str	r3, [r2, #8]
}
 8002ee6:	e254      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	015a      	lsls	r2, r3, #5
 8002eec:	69bb      	ldr	r3, [r7, #24]
 8002eee:	4413      	add	r3, r2
 8002ef0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d11a      	bne.n	8002f34 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002efe:	697b      	ldr	r3, [r7, #20]
 8002f00:	015a      	lsls	r2, r3, #5
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	4413      	add	r3, r2
 8002f06:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f0a:	461a      	mov	r2, r3
 8002f0c:	2308      	movs	r3, #8
 8002f0e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	697b      	ldr	r3, [r7, #20]
 8002f14:	212c      	movs	r1, #44	; 0x2c
 8002f16:	fb01 f303 	mul.w	r3, r1, r3
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3361      	adds	r3, #97	; 0x61
 8002f1e:	2205      	movs	r2, #5
 8002f20:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	697a      	ldr	r2, [r7, #20]
 8002f28:	b2d2      	uxtb	r2, r2
 8002f2a:	4611      	mov	r1, r2
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f002 feb4 	bl	8005c9a <USB_HC_Halt>
}
 8002f32:	e22e      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002f34:	697b      	ldr	r3, [r7, #20]
 8002f36:	015a      	lsls	r2, r3, #5
 8002f38:	69bb      	ldr	r3, [r7, #24]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002f40:	689b      	ldr	r3, [r3, #8]
 8002f42:	f003 0310 	and.w	r3, r3, #16
 8002f46:	2b10      	cmp	r3, #16
 8002f48:	d140      	bne.n	8002fcc <HCD_HC_OUT_IRQHandler+0x304>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	212c      	movs	r1, #44	; 0x2c
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	335c      	adds	r3, #92	; 0x5c
 8002f58:	2200      	movs	r2, #0
 8002f5a:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002f5c:	687a      	ldr	r2, [r7, #4]
 8002f5e:	697b      	ldr	r3, [r7, #20]
 8002f60:	212c      	movs	r1, #44	; 0x2c
 8002f62:	fb01 f303 	mul.w	r3, r1, r3
 8002f66:	4413      	add	r3, r2
 8002f68:	3361      	adds	r3, #97	; 0x61
 8002f6a:	2203      	movs	r2, #3
 8002f6c:	701a      	strb	r2, [r3, #0]
    if (hhcd->hc[ch_num].do_ping == 0U)
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	212c      	movs	r1, #44	; 0x2c
 8002f74:	fb01 f303 	mul.w	r3, r1, r3
 8002f78:	4413      	add	r3, r2
 8002f7a:	333d      	adds	r3, #61	; 0x3d
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d112      	bne.n	8002fa8 <HCD_HC_OUT_IRQHandler+0x2e0>
      if (hhcd->hc[ch_num].speed == HCD_DEVICE_SPEED_HIGH)
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	697b      	ldr	r3, [r7, #20]
 8002f86:	212c      	movs	r1, #44	; 0x2c
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	333c      	adds	r3, #60	; 0x3c
 8002f90:	781b      	ldrb	r3, [r3, #0]
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d108      	bne.n	8002fa8 <HCD_HC_OUT_IRQHandler+0x2e0>
        hhcd->hc[ch_num].do_ping = 1U;
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	212c      	movs	r1, #44	; 0x2c
 8002f9c:	fb01 f303 	mul.w	r3, r1, r3
 8002fa0:	4413      	add	r3, r2
 8002fa2:	333d      	adds	r3, #61	; 0x3d
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	697a      	ldr	r2, [r7, #20]
 8002fae:	b2d2      	uxtb	r2, r2
 8002fb0:	4611      	mov	r1, r2
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f002 fe71 	bl	8005c9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002fb8:	697b      	ldr	r3, [r7, #20]
 8002fba:	015a      	lsls	r2, r3, #5
 8002fbc:	69bb      	ldr	r3, [r7, #24]
 8002fbe:	4413      	add	r3, r2
 8002fc0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2310      	movs	r3, #16
 8002fc8:	6093      	str	r3, [r2, #8]
}
 8002fca:	e1e2      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	015a      	lsls	r2, r3, #5
 8002fd0:	69bb      	ldr	r3, [r7, #24]
 8002fd2:	4413      	add	r3, r2
 8002fd4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fde:	2b80      	cmp	r3, #128	; 0x80
 8002fe0:	d164      	bne.n	80030ac <HCD_HC_OUT_IRQHandler+0x3e4>
    if (hhcd->Init.dma_enable == 0U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d111      	bne.n	800300e <HCD_HC_OUT_IRQHandler+0x346>
      hhcd->hc[ch_num].state = HC_XACTERR;
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	212c      	movs	r1, #44	; 0x2c
 8002ff0:	fb01 f303 	mul.w	r3, r1, r3
 8002ff4:	4413      	add	r3, r2
 8002ff6:	3361      	adds	r3, #97	; 0x61
 8002ff8:	2206      	movs	r2, #6
 8002ffa:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	697a      	ldr	r2, [r7, #20]
 8003002:	b2d2      	uxtb	r2, r2
 8003004:	4611      	mov	r1, r2
 8003006:	4618      	mov	r0, r3
 8003008:	f002 fe47 	bl	8005c9a <USB_HC_Halt>
 800300c:	e044      	b.n	8003098 <HCD_HC_OUT_IRQHandler+0x3d0>
      hhcd->hc[ch_num].ErrCnt++;
 800300e:	687a      	ldr	r2, [r7, #4]
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	212c      	movs	r1, #44	; 0x2c
 8003014:	fb01 f303 	mul.w	r3, r1, r3
 8003018:	4413      	add	r3, r2
 800301a:	335c      	adds	r3, #92	; 0x5c
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	1c5a      	adds	r2, r3, #1
 8003020:	6879      	ldr	r1, [r7, #4]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	202c      	movs	r0, #44	; 0x2c
 8003026:	fb00 f303 	mul.w	r3, r0, r3
 800302a:	440b      	add	r3, r1
 800302c:	335c      	adds	r3, #92	; 0x5c
 800302e:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8003030:	687a      	ldr	r2, [r7, #4]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	212c      	movs	r1, #44	; 0x2c
 8003036:	fb01 f303 	mul.w	r3, r1, r3
 800303a:	4413      	add	r3, r2
 800303c:	335c      	adds	r3, #92	; 0x5c
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2b02      	cmp	r3, #2
 8003042:	d920      	bls.n	8003086 <HCD_HC_OUT_IRQHandler+0x3be>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8003044:	687a      	ldr	r2, [r7, #4]
 8003046:	697b      	ldr	r3, [r7, #20]
 8003048:	212c      	movs	r1, #44	; 0x2c
 800304a:	fb01 f303 	mul.w	r3, r1, r3
 800304e:	4413      	add	r3, r2
 8003050:	335c      	adds	r3, #92	; 0x5c
 8003052:	2200      	movs	r2, #0
 8003054:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8003056:	687a      	ldr	r2, [r7, #4]
 8003058:	697b      	ldr	r3, [r7, #20]
 800305a:	212c      	movs	r1, #44	; 0x2c
 800305c:	fb01 f303 	mul.w	r3, r1, r3
 8003060:	4413      	add	r3, r2
 8003062:	3360      	adds	r3, #96	; 0x60
 8003064:	2204      	movs	r2, #4
 8003066:	701a      	strb	r2, [r3, #0]
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	b2d9      	uxtb	r1, r3
 800306c:	687a      	ldr	r2, [r7, #4]
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	202c      	movs	r0, #44	; 0x2c
 8003072:	fb00 f303 	mul.w	r3, r0, r3
 8003076:	4413      	add	r3, r2
 8003078:	3360      	adds	r3, #96	; 0x60
 800307a:	781b      	ldrb	r3, [r3, #0]
 800307c:	461a      	mov	r2, r3
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f005 f8ae 	bl	80081e0 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003084:	e008      	b.n	8003098 <HCD_HC_OUT_IRQHandler+0x3d0>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003086:	687a      	ldr	r2, [r7, #4]
 8003088:	697b      	ldr	r3, [r7, #20]
 800308a:	212c      	movs	r1, #44	; 0x2c
 800308c:	fb01 f303 	mul.w	r3, r1, r3
 8003090:	4413      	add	r3, r2
 8003092:	3360      	adds	r3, #96	; 0x60
 8003094:	2202      	movs	r2, #2
 8003096:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8003098:	697b      	ldr	r3, [r7, #20]
 800309a:	015a      	lsls	r2, r3, #5
 800309c:	69bb      	ldr	r3, [r7, #24]
 800309e:	4413      	add	r3, r2
 80030a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030a4:	461a      	mov	r2, r3
 80030a6:	2380      	movs	r3, #128	; 0x80
 80030a8:	6093      	str	r3, [r2, #8]
}
 80030aa:	e172      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 80030ac:	697b      	ldr	r3, [r7, #20]
 80030ae:	015a      	lsls	r2, r3, #5
 80030b0:	69bb      	ldr	r3, [r7, #24]
 80030b2:	4413      	add	r3, r2
 80030b4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030c2:	d11b      	bne.n	80030fc <HCD_HC_OUT_IRQHandler+0x434>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 80030c4:	687a      	ldr	r2, [r7, #4]
 80030c6:	697b      	ldr	r3, [r7, #20]
 80030c8:	212c      	movs	r1, #44	; 0x2c
 80030ca:	fb01 f303 	mul.w	r3, r1, r3
 80030ce:	4413      	add	r3, r2
 80030d0:	3361      	adds	r3, #97	; 0x61
 80030d2:	2208      	movs	r2, #8
 80030d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	697a      	ldr	r2, [r7, #20]
 80030dc:	b2d2      	uxtb	r2, r2
 80030de:	4611      	mov	r1, r2
 80030e0:	4618      	mov	r0, r3
 80030e2:	f002 fdda 	bl	8005c9a <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	015a      	lsls	r2, r3, #5
 80030ea:	69bb      	ldr	r3, [r7, #24]
 80030ec:	4413      	add	r3, r2
 80030ee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80030f2:	461a      	mov	r2, r3
 80030f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80030f8:	6093      	str	r3, [r2, #8]
}
 80030fa:	e14a      	b.n	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	015a      	lsls	r2, r3, #5
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	4413      	add	r3, r2
 8003104:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 0302 	and.w	r3, r3, #2
 800310e:	2b02      	cmp	r3, #2
 8003110:	f040 813f 	bne.w	8003392 <HCD_HC_OUT_IRQHandler+0x6ca>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8003114:	687a      	ldr	r2, [r7, #4]
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	212c      	movs	r1, #44	; 0x2c
 800311a:	fb01 f303 	mul.w	r3, r1, r3
 800311e:	4413      	add	r3, r2
 8003120:	3361      	adds	r3, #97	; 0x61
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d17d      	bne.n	8003224 <HCD_HC_OUT_IRQHandler+0x55c>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8003128:	687a      	ldr	r2, [r7, #4]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	212c      	movs	r1, #44	; 0x2c
 800312e:	fb01 f303 	mul.w	r3, r1, r3
 8003132:	4413      	add	r3, r2
 8003134:	3360      	adds	r3, #96	; 0x60
 8003136:	2201      	movs	r2, #1
 8003138:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800313a:	687a      	ldr	r2, [r7, #4]
 800313c:	697b      	ldr	r3, [r7, #20]
 800313e:	212c      	movs	r1, #44	; 0x2c
 8003140:	fb01 f303 	mul.w	r3, r1, r3
 8003144:	4413      	add	r3, r2
 8003146:	333f      	adds	r3, #63	; 0x3f
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	2b02      	cmp	r3, #2
 800314c:	d00a      	beq.n	8003164 <HCD_HC_OUT_IRQHandler+0x49c>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 800314e:	687a      	ldr	r2, [r7, #4]
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	212c      	movs	r1, #44	; 0x2c
 8003154:	fb01 f303 	mul.w	r3, r1, r3
 8003158:	4413      	add	r3, r2
 800315a:	333f      	adds	r3, #63	; 0x3f
 800315c:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 800315e:	2b03      	cmp	r3, #3
 8003160:	f040 8100 	bne.w	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
        if (hhcd->Init.dma_enable == 0U)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	691b      	ldr	r3, [r3, #16]
 8003168:	2b00      	cmp	r3, #0
 800316a:	d113      	bne.n	8003194 <HCD_HC_OUT_IRQHandler+0x4cc>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	212c      	movs	r1, #44	; 0x2c
 8003172:	fb01 f303 	mul.w	r3, r1, r3
 8003176:	4413      	add	r3, r2
 8003178:	3355      	adds	r3, #85	; 0x55
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	f083 0301 	eor.w	r3, r3, #1
 8003180:	b2d8      	uxtb	r0, r3
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	697b      	ldr	r3, [r7, #20]
 8003186:	212c      	movs	r1, #44	; 0x2c
 8003188:	fb01 f303 	mul.w	r3, r1, r3
 800318c:	4413      	add	r3, r2
 800318e:	3355      	adds	r3, #85	; 0x55
 8003190:	4602      	mov	r2, r0
 8003192:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	2b01      	cmp	r3, #1
 800319a:	f040 80e3 	bne.w	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	697b      	ldr	r3, [r7, #20]
 80031a2:	212c      	movs	r1, #44	; 0x2c
 80031a4:	fb01 f303 	mul.w	r3, r1, r3
 80031a8:	4413      	add	r3, r2
 80031aa:	334c      	adds	r3, #76	; 0x4c
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 80d8 	beq.w	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	697b      	ldr	r3, [r7, #20]
 80031b8:	212c      	movs	r1, #44	; 0x2c
 80031ba:	fb01 f303 	mul.w	r3, r1, r3
 80031be:	4413      	add	r3, r2
 80031c0:	334c      	adds	r3, #76	; 0x4c
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	6879      	ldr	r1, [r7, #4]
 80031c6:	697a      	ldr	r2, [r7, #20]
 80031c8:	202c      	movs	r0, #44	; 0x2c
 80031ca:	fb00 f202 	mul.w	r2, r0, r2
 80031ce:	440a      	add	r2, r1
 80031d0:	3240      	adds	r2, #64	; 0x40
 80031d2:	8812      	ldrh	r2, [r2, #0]
 80031d4:	4413      	add	r3, r2
 80031d6:	3b01      	subs	r3, #1
 80031d8:	6879      	ldr	r1, [r7, #4]
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	202c      	movs	r0, #44	; 0x2c
 80031de:	fb00 f202 	mul.w	r2, r0, r2
 80031e2:	440a      	add	r2, r1
 80031e4:	3240      	adds	r2, #64	; 0x40
 80031e6:	8812      	ldrh	r2, [r2, #0]
 80031e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f003 0301 	and.w	r3, r3, #1
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	f000 80b5 	beq.w	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 80031fa:	687a      	ldr	r2, [r7, #4]
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	212c      	movs	r1, #44	; 0x2c
 8003200:	fb01 f303 	mul.w	r3, r1, r3
 8003204:	4413      	add	r3, r2
 8003206:	3355      	adds	r3, #85	; 0x55
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	f083 0301 	eor.w	r3, r3, #1
 800320e:	b2d8      	uxtb	r0, r3
 8003210:	687a      	ldr	r2, [r7, #4]
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	212c      	movs	r1, #44	; 0x2c
 8003216:	fb01 f303 	mul.w	r3, r1, r3
 800321a:	4413      	add	r3, r2
 800321c:	3355      	adds	r3, #85	; 0x55
 800321e:	4602      	mov	r2, r0
 8003220:	701a      	strb	r2, [r3, #0]
 8003222:	e09f      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	212c      	movs	r1, #44	; 0x2c
 800322a:	fb01 f303 	mul.w	r3, r1, r3
 800322e:	4413      	add	r3, r2
 8003230:	3361      	adds	r3, #97	; 0x61
 8003232:	781b      	ldrb	r3, [r3, #0]
 8003234:	2b03      	cmp	r3, #3
 8003236:	d109      	bne.n	800324c <HCD_HC_OUT_IRQHandler+0x584>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003238:	687a      	ldr	r2, [r7, #4]
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	212c      	movs	r1, #44	; 0x2c
 800323e:	fb01 f303 	mul.w	r3, r1, r3
 8003242:	4413      	add	r3, r2
 8003244:	3360      	adds	r3, #96	; 0x60
 8003246:	2202      	movs	r2, #2
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	e08b      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	212c      	movs	r1, #44	; 0x2c
 8003252:	fb01 f303 	mul.w	r3, r1, r3
 8003256:	4413      	add	r3, r2
 8003258:	3361      	adds	r3, #97	; 0x61
 800325a:	781b      	ldrb	r3, [r3, #0]
 800325c:	2b04      	cmp	r3, #4
 800325e:	d109      	bne.n	8003274 <HCD_HC_OUT_IRQHandler+0x5ac>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8003260:	687a      	ldr	r2, [r7, #4]
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	212c      	movs	r1, #44	; 0x2c
 8003266:	fb01 f303 	mul.w	r3, r1, r3
 800326a:	4413      	add	r3, r2
 800326c:	3360      	adds	r3, #96	; 0x60
 800326e:	2202      	movs	r2, #2
 8003270:	701a      	strb	r2, [r3, #0]
 8003272:	e077      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8003274:	687a      	ldr	r2, [r7, #4]
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	212c      	movs	r1, #44	; 0x2c
 800327a:	fb01 f303 	mul.w	r3, r1, r3
 800327e:	4413      	add	r3, r2
 8003280:	3361      	adds	r3, #97	; 0x61
 8003282:	781b      	ldrb	r3, [r3, #0]
 8003284:	2b05      	cmp	r3, #5
 8003286:	d109      	bne.n	800329c <HCD_HC_OUT_IRQHandler+0x5d4>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8003288:	687a      	ldr	r2, [r7, #4]
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	212c      	movs	r1, #44	; 0x2c
 800328e:	fb01 f303 	mul.w	r3, r1, r3
 8003292:	4413      	add	r3, r2
 8003294:	3360      	adds	r3, #96	; 0x60
 8003296:	2205      	movs	r2, #5
 8003298:	701a      	strb	r2, [r3, #0]
 800329a:	e063      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 800329c:	687a      	ldr	r2, [r7, #4]
 800329e:	697b      	ldr	r3, [r7, #20]
 80032a0:	212c      	movs	r1, #44	; 0x2c
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	3361      	adds	r3, #97	; 0x61
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	2b06      	cmp	r3, #6
 80032ae:	d009      	beq.n	80032c4 <HCD_HC_OUT_IRQHandler+0x5fc>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80032b0:	687a      	ldr	r2, [r7, #4]
 80032b2:	697b      	ldr	r3, [r7, #20]
 80032b4:	212c      	movs	r1, #44	; 0x2c
 80032b6:	fb01 f303 	mul.w	r3, r1, r3
 80032ba:	4413      	add	r3, r2
 80032bc:	3361      	adds	r3, #97	; 0x61
 80032be:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d14f      	bne.n	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
      hhcd->hc[ch_num].ErrCnt++;
 80032c4:	687a      	ldr	r2, [r7, #4]
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	212c      	movs	r1, #44	; 0x2c
 80032ca:	fb01 f303 	mul.w	r3, r1, r3
 80032ce:	4413      	add	r3, r2
 80032d0:	335c      	adds	r3, #92	; 0x5c
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	1c5a      	adds	r2, r3, #1
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	202c      	movs	r0, #44	; 0x2c
 80032dc:	fb00 f303 	mul.w	r3, r0, r3
 80032e0:	440b      	add	r3, r1
 80032e2:	335c      	adds	r3, #92	; 0x5c
 80032e4:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80032e6:	687a      	ldr	r2, [r7, #4]
 80032e8:	697b      	ldr	r3, [r7, #20]
 80032ea:	212c      	movs	r1, #44	; 0x2c
 80032ec:	fb01 f303 	mul.w	r3, r1, r3
 80032f0:	4413      	add	r3, r2
 80032f2:	335c      	adds	r3, #92	; 0x5c
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d912      	bls.n	8003320 <HCD_HC_OUT_IRQHandler+0x658>
        hhcd->hc[ch_num].ErrCnt = 0U;
 80032fa:	687a      	ldr	r2, [r7, #4]
 80032fc:	697b      	ldr	r3, [r7, #20]
 80032fe:	212c      	movs	r1, #44	; 0x2c
 8003300:	fb01 f303 	mul.w	r3, r1, r3
 8003304:	4413      	add	r3, r2
 8003306:	335c      	adds	r3, #92	; 0x5c
 8003308:	2200      	movs	r2, #0
 800330a:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 800330c:	687a      	ldr	r2, [r7, #4]
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	212c      	movs	r1, #44	; 0x2c
 8003312:	fb01 f303 	mul.w	r3, r1, r3
 8003316:	4413      	add	r3, r2
 8003318:	3360      	adds	r3, #96	; 0x60
 800331a:	2204      	movs	r2, #4
 800331c:	701a      	strb	r2, [r3, #0]
 800331e:	e021      	b.n	8003364 <HCD_HC_OUT_IRQHandler+0x69c>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	697b      	ldr	r3, [r7, #20]
 8003324:	212c      	movs	r1, #44	; 0x2c
 8003326:	fb01 f303 	mul.w	r3, r1, r3
 800332a:	4413      	add	r3, r2
 800332c:	3360      	adds	r3, #96	; 0x60
 800332e:	2202      	movs	r2, #2
 8003330:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	015a      	lsls	r2, r3, #5
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	4413      	add	r3, r2
 800333a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003348:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003350:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	015a      	lsls	r2, r3, #5
 8003356:	69bb      	ldr	r3, [r7, #24]
 8003358:	4413      	add	r3, r2
 800335a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800335e:	461a      	mov	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	015a      	lsls	r2, r3, #5
 8003368:	69bb      	ldr	r3, [r7, #24]
 800336a:	4413      	add	r3, r2
 800336c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003370:	461a      	mov	r2, r3
 8003372:	2302      	movs	r3, #2
 8003374:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003376:	697b      	ldr	r3, [r7, #20]
 8003378:	b2d9      	uxtb	r1, r3
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	697b      	ldr	r3, [r7, #20]
 800337e:	202c      	movs	r0, #44	; 0x2c
 8003380:	fb00 f303 	mul.w	r3, r0, r3
 8003384:	4413      	add	r3, r2
 8003386:	3360      	adds	r3, #96	; 0x60
 8003388:	781b      	ldrb	r3, [r3, #0]
 800338a:	461a      	mov	r2, r3
 800338c:	6878      	ldr	r0, [r7, #4]
 800338e:	f004 ff27 	bl	80081e0 <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003392:	bf00      	nop
 8003394:	3720      	adds	r7, #32
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}

0800339a <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800339a:	b580      	push	{r7, lr}
 800339c:	b08a      	sub	sp, #40	; 0x28
 800339e:	af00      	add	r7, sp, #0
 80033a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033aa:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	6a1b      	ldr	r3, [r3, #32]
 80033b2:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 80033b4:	69fb      	ldr	r3, [r7, #28]
 80033b6:	f003 030f 	and.w	r3, r3, #15
 80033ba:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	0c5b      	lsrs	r3, r3, #17
 80033c0:	f003 030f 	and.w	r3, r3, #15
 80033c4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	091b      	lsrs	r3, r3, #4
 80033ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80033ce:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 80033d0:	697b      	ldr	r3, [r7, #20]
 80033d2:	2b02      	cmp	r3, #2
 80033d4:	d004      	beq.n	80033e0 <HCD_RXQLVL_IRQHandler+0x46>
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	2b05      	cmp	r3, #5
 80033da:	f000 80a9 	beq.w	8003530 <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 80033de:	e0aa      	b.n	8003536 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 80a6 	beq.w	8003534 <HCD_RXQLVL_IRQHandler+0x19a>
 80033e8:	687a      	ldr	r2, [r7, #4]
 80033ea:	69bb      	ldr	r3, [r7, #24]
 80033ec:	212c      	movs	r1, #44	; 0x2c
 80033ee:	fb01 f303 	mul.w	r3, r1, r3
 80033f2:	4413      	add	r3, r2
 80033f4:	3344      	adds	r3, #68	; 0x44
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	f000 809b 	beq.w	8003534 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80033fe:	687a      	ldr	r2, [r7, #4]
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	212c      	movs	r1, #44	; 0x2c
 8003404:	fb01 f303 	mul.w	r3, r1, r3
 8003408:	4413      	add	r3, r2
 800340a:	3350      	adds	r3, #80	; 0x50
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	693b      	ldr	r3, [r7, #16]
 8003410:	441a      	add	r2, r3
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	69bb      	ldr	r3, [r7, #24]
 8003416:	202c      	movs	r0, #44	; 0x2c
 8003418:	fb00 f303 	mul.w	r3, r0, r3
 800341c:	440b      	add	r3, r1
 800341e:	334c      	adds	r3, #76	; 0x4c
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d87a      	bhi.n	800351c <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	6818      	ldr	r0, [r3, #0]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	69bb      	ldr	r3, [r7, #24]
 800342e:	212c      	movs	r1, #44	; 0x2c
 8003430:	fb01 f303 	mul.w	r3, r1, r3
 8003434:	4413      	add	r3, r2
 8003436:	3344      	adds	r3, #68	; 0x44
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	693a      	ldr	r2, [r7, #16]
 800343c:	b292      	uxth	r2, r2
 800343e:	4619      	mov	r1, r3
 8003440:	f001 ff82 	bl	8005348 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 8003444:	687a      	ldr	r2, [r7, #4]
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	212c      	movs	r1, #44	; 0x2c
 800344a:	fb01 f303 	mul.w	r3, r1, r3
 800344e:	4413      	add	r3, r2
 8003450:	3344      	adds	r3, #68	; 0x44
 8003452:	681a      	ldr	r2, [r3, #0]
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	441a      	add	r2, r3
 8003458:	6879      	ldr	r1, [r7, #4]
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	202c      	movs	r0, #44	; 0x2c
 800345e:	fb00 f303 	mul.w	r3, r0, r3
 8003462:	440b      	add	r3, r1
 8003464:	3344      	adds	r3, #68	; 0x44
 8003466:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003468:	687a      	ldr	r2, [r7, #4]
 800346a:	69bb      	ldr	r3, [r7, #24]
 800346c:	212c      	movs	r1, #44	; 0x2c
 800346e:	fb01 f303 	mul.w	r3, r1, r3
 8003472:	4413      	add	r3, r2
 8003474:	3350      	adds	r3, #80	; 0x50
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	441a      	add	r2, r3
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	69bb      	ldr	r3, [r7, #24]
 8003480:	202c      	movs	r0, #44	; 0x2c
 8003482:	fb00 f303 	mul.w	r3, r0, r3
 8003486:	440b      	add	r3, r1
 8003488:	3350      	adds	r3, #80	; 0x50
 800348a:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	6a3b      	ldr	r3, [r7, #32]
 8003492:	4413      	add	r3, r2
 8003494:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003498:	691b      	ldr	r3, [r3, #16]
 800349a:	0cdb      	lsrs	r3, r3, #19
 800349c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80034a0:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 80034a2:	687a      	ldr	r2, [r7, #4]
 80034a4:	69bb      	ldr	r3, [r7, #24]
 80034a6:	212c      	movs	r1, #44	; 0x2c
 80034a8:	fb01 f303 	mul.w	r3, r1, r3
 80034ac:	4413      	add	r3, r2
 80034ae:	3340      	adds	r3, #64	; 0x40
 80034b0:	881b      	ldrh	r3, [r3, #0]
 80034b2:	461a      	mov	r2, r3
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	4293      	cmp	r3, r2
 80034b8:	d13c      	bne.n	8003534 <HCD_RXQLVL_IRQHandler+0x19a>
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d039      	beq.n	8003534 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	015a      	lsls	r2, r3, #5
 80034c4:	6a3b      	ldr	r3, [r7, #32]
 80034c6:	4413      	add	r3, r2
 80034c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80034d6:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 80034d8:	68bb      	ldr	r3, [r7, #8]
 80034da:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80034de:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 80034e0:	69bb      	ldr	r3, [r7, #24]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	6a3b      	ldr	r3, [r7, #32]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80034ec:	461a      	mov	r2, r3
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	69bb      	ldr	r3, [r7, #24]
 80034f6:	212c      	movs	r1, #44	; 0x2c
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	4413      	add	r3, r2
 80034fe:	3354      	adds	r3, #84	; 0x54
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	f083 0301 	eor.w	r3, r3, #1
 8003506:	b2d8      	uxtb	r0, r3
 8003508:	687a      	ldr	r2, [r7, #4]
 800350a:	69bb      	ldr	r3, [r7, #24]
 800350c:	212c      	movs	r1, #44	; 0x2c
 800350e:	fb01 f303 	mul.w	r3, r1, r3
 8003512:	4413      	add	r3, r2
 8003514:	3354      	adds	r3, #84	; 0x54
 8003516:	4602      	mov	r2, r0
 8003518:	701a      	strb	r2, [r3, #0]
      break;
 800351a:	e00b      	b.n	8003534 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	69bb      	ldr	r3, [r7, #24]
 8003520:	212c      	movs	r1, #44	; 0x2c
 8003522:	fb01 f303 	mul.w	r3, r1, r3
 8003526:	4413      	add	r3, r2
 8003528:	3360      	adds	r3, #96	; 0x60
 800352a:	2204      	movs	r2, #4
 800352c:	701a      	strb	r2, [r3, #0]
      break;
 800352e:	e001      	b.n	8003534 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 8003530:	bf00      	nop
 8003532:	e000      	b.n	8003536 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 8003534:	bf00      	nop
  }
}
 8003536:	bf00      	nop
 8003538:	3728      	adds	r7, #40	; 0x28
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b086      	sub	sp, #24
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800354c:	697b      	ldr	r3, [r7, #20]
 800354e:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003564:	68bb      	ldr	r3, [r7, #8]
 8003566:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 800356a:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b02      	cmp	r3, #2
 8003574:	d10b      	bne.n	800358e <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	f003 0301 	and.w	r3, r3, #1
 800357c:	2b01      	cmp	r3, #1
 800357e:	d102      	bne.n	8003586 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f004 fe11 	bl	80081a8 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003586:	68bb      	ldr	r3, [r7, #8]
 8003588:	f043 0302 	orr.w	r3, r3, #2
 800358c:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f003 0308 	and.w	r3, r3, #8
 8003594:	2b08      	cmp	r3, #8
 8003596:	d132      	bne.n	80035fe <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	f043 0308 	orr.w	r3, r3, #8
 800359e:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	f003 0304 	and.w	r3, r3, #4
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d126      	bne.n	80035f8 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	699b      	ldr	r3, [r3, #24]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d113      	bne.n	80035da <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 80035b8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80035bc:	d106      	bne.n	80035cc <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2102      	movs	r1, #2
 80035c4:	4618      	mov	r0, r3
 80035c6:	f002 f82d 	bl	8005624 <USB_InitFSLSPClkSel>
 80035ca:	e011      	b.n	80035f0 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	2101      	movs	r1, #1
 80035d2:	4618      	mov	r0, r3
 80035d4:	f002 f826 	bl	8005624 <USB_InitFSLSPClkSel>
 80035d8:	e00a      	b.n	80035f0 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d106      	bne.n	80035f0 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 80035e2:	693b      	ldr	r3, [r7, #16]
 80035e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80035e8:	461a      	mov	r2, r3
 80035ea:	f64e 2360 	movw	r3, #60000	; 0xea60
 80035ee:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80035f0:	6878      	ldr	r0, [r7, #4]
 80035f2:	f004 fe03 	bl	80081fc <HAL_HCD_PortEnabled_Callback>
 80035f6:	e002      	b.n	80035fe <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80035f8:	6878      	ldr	r0, [r7, #4]
 80035fa:	f004 fe0d 	bl	8008218 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f003 0320 	and.w	r3, r3, #32
 8003604:	2b20      	cmp	r3, #32
 8003606:	d103      	bne.n	8003610 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	f043 0320 	orr.w	r3, r3, #32
 800360e:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003616:	461a      	mov	r2, r3
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	6013      	str	r3, [r2, #0]
}
 800361c:	bf00      	nop
 800361e:	3718      	adds	r7, #24
 8003620:	46bd      	mov	sp, r7
 8003622:	bd80      	pop	{r7, pc}

08003624 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b084      	sub	sp, #16
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d101      	bne.n	8003636 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003632:	2301      	movs	r3, #1
 8003634:	e12b      	b.n	800388e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800363c:	b2db      	uxtb	r3, r3
 800363e:	2b00      	cmp	r3, #0
 8003640:	d106      	bne.n	8003650 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	2200      	movs	r2, #0
 8003646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7fd fc48 	bl	8000ee0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2224      	movs	r2, #36	; 0x24
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	681a      	ldr	r2, [r3, #0]
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	f022 0201 	bic.w	r2, r2, #1
 8003666:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	681a      	ldr	r2, [r3, #0]
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003676:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003686:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003688:	f001 fa20 	bl	8004acc <HAL_RCC_GetPCLK1Freq>
 800368c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	4a81      	ldr	r2, [pc, #516]	; (8003898 <HAL_I2C_Init+0x274>)
 8003694:	4293      	cmp	r3, r2
 8003696:	d807      	bhi.n	80036a8 <HAL_I2C_Init+0x84>
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4a80      	ldr	r2, [pc, #512]	; (800389c <HAL_I2C_Init+0x278>)
 800369c:	4293      	cmp	r3, r2
 800369e:	bf94      	ite	ls
 80036a0:	2301      	movls	r3, #1
 80036a2:	2300      	movhi	r3, #0
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	e006      	b.n	80036b6 <HAL_I2C_Init+0x92>
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	4a7d      	ldr	r2, [pc, #500]	; (80038a0 <HAL_I2C_Init+0x27c>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	bf94      	ite	ls
 80036b0:	2301      	movls	r3, #1
 80036b2:	2300      	movhi	r3, #0
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d001      	beq.n	80036be <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	e0e7      	b.n	800388e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	4a78      	ldr	r2, [pc, #480]	; (80038a4 <HAL_I2C_Init+0x280>)
 80036c2:	fba2 2303 	umull	r2, r3, r2, r3
 80036c6:	0c9b      	lsrs	r3, r3, #18
 80036c8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	68ba      	ldr	r2, [r7, #8]
 80036da:	430a      	orrs	r2, r1
 80036dc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	6a1b      	ldr	r3, [r3, #32]
 80036e4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	685b      	ldr	r3, [r3, #4]
 80036ec:	4a6a      	ldr	r2, [pc, #424]	; (8003898 <HAL_I2C_Init+0x274>)
 80036ee:	4293      	cmp	r3, r2
 80036f0:	d802      	bhi.n	80036f8 <HAL_I2C_Init+0xd4>
 80036f2:	68bb      	ldr	r3, [r7, #8]
 80036f4:	3301      	adds	r3, #1
 80036f6:	e009      	b.n	800370c <HAL_I2C_Init+0xe8>
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036fe:	fb02 f303 	mul.w	r3, r2, r3
 8003702:	4a69      	ldr	r2, [pc, #420]	; (80038a8 <HAL_I2C_Init+0x284>)
 8003704:	fba2 2303 	umull	r2, r3, r2, r3
 8003708:	099b      	lsrs	r3, r3, #6
 800370a:	3301      	adds	r3, #1
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	6812      	ldr	r2, [r2, #0]
 8003710:	430b      	orrs	r3, r1
 8003712:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	69db      	ldr	r3, [r3, #28]
 800371a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800371e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	495c      	ldr	r1, [pc, #368]	; (8003898 <HAL_I2C_Init+0x274>)
 8003728:	428b      	cmp	r3, r1
 800372a:	d819      	bhi.n	8003760 <HAL_I2C_Init+0x13c>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1e59      	subs	r1, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	685b      	ldr	r3, [r3, #4]
 8003734:	005b      	lsls	r3, r3, #1
 8003736:	fbb1 f3f3 	udiv	r3, r1, r3
 800373a:	1c59      	adds	r1, r3, #1
 800373c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003740:	400b      	ands	r3, r1
 8003742:	2b00      	cmp	r3, #0
 8003744:	d00a      	beq.n	800375c <HAL_I2C_Init+0x138>
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	1e59      	subs	r1, r3, #1
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	005b      	lsls	r3, r3, #1
 8003750:	fbb1 f3f3 	udiv	r3, r1, r3
 8003754:	3301      	adds	r3, #1
 8003756:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800375a:	e051      	b.n	8003800 <HAL_I2C_Init+0x1dc>
 800375c:	2304      	movs	r3, #4
 800375e:	e04f      	b.n	8003800 <HAL_I2C_Init+0x1dc>
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d111      	bne.n	800378c <HAL_I2C_Init+0x168>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	1e58      	subs	r0, r3, #1
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6859      	ldr	r1, [r3, #4]
 8003770:	460b      	mov	r3, r1
 8003772:	005b      	lsls	r3, r3, #1
 8003774:	440b      	add	r3, r1
 8003776:	fbb0 f3f3 	udiv	r3, r0, r3
 800377a:	3301      	adds	r3, #1
 800377c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003780:	2b00      	cmp	r3, #0
 8003782:	bf0c      	ite	eq
 8003784:	2301      	moveq	r3, #1
 8003786:	2300      	movne	r3, #0
 8003788:	b2db      	uxtb	r3, r3
 800378a:	e012      	b.n	80037b2 <HAL_I2C_Init+0x18e>
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	1e58      	subs	r0, r3, #1
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6859      	ldr	r1, [r3, #4]
 8003794:	460b      	mov	r3, r1
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	440b      	add	r3, r1
 800379a:	0099      	lsls	r1, r3, #2
 800379c:	440b      	add	r3, r1
 800379e:	fbb0 f3f3 	udiv	r3, r0, r3
 80037a2:	3301      	adds	r3, #1
 80037a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	bf0c      	ite	eq
 80037ac:	2301      	moveq	r3, #1
 80037ae:	2300      	movne	r3, #0
 80037b0:	b2db      	uxtb	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <HAL_I2C_Init+0x196>
 80037b6:	2301      	movs	r3, #1
 80037b8:	e022      	b.n	8003800 <HAL_I2C_Init+0x1dc>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10e      	bne.n	80037e0 <HAL_I2C_Init+0x1bc>
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	1e58      	subs	r0, r3, #1
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6859      	ldr	r1, [r3, #4]
 80037ca:	460b      	mov	r3, r1
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	440b      	add	r3, r1
 80037d0:	fbb0 f3f3 	udiv	r3, r0, r3
 80037d4:	3301      	adds	r3, #1
 80037d6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037da:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037de:	e00f      	b.n	8003800 <HAL_I2C_Init+0x1dc>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	1e58      	subs	r0, r3, #1
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6859      	ldr	r1, [r3, #4]
 80037e8:	460b      	mov	r3, r1
 80037ea:	009b      	lsls	r3, r3, #2
 80037ec:	440b      	add	r3, r1
 80037ee:	0099      	lsls	r1, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80037f6:	3301      	adds	r3, #1
 80037f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037fc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	6809      	ldr	r1, [r1, #0]
 8003804:	4313      	orrs	r3, r2
 8003806:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	69da      	ldr	r2, [r3, #28]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800382e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6911      	ldr	r1, [r2, #16]
 8003836:	687a      	ldr	r2, [r7, #4]
 8003838:	68d2      	ldr	r2, [r2, #12]
 800383a:	4311      	orrs	r1, r2
 800383c:	687a      	ldr	r2, [r7, #4]
 800383e:	6812      	ldr	r2, [r2, #0]
 8003840:	430b      	orrs	r3, r1
 8003842:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	695a      	ldr	r2, [r3, #20]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	431a      	orrs	r2, r3
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	430a      	orrs	r2, r1
 800385e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f042 0201 	orr.w	r2, r2, #1
 800386e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2200      	movs	r2, #0
 8003874:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2220      	movs	r2, #32
 800387a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	2200      	movs	r2, #0
 8003888:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800388c:	2300      	movs	r3, #0
}
 800388e:	4618      	mov	r0, r3
 8003890:	3710      	adds	r7, #16
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	000186a0 	.word	0x000186a0
 800389c:	001e847f 	.word	0x001e847f
 80038a0:	003d08ff 	.word	0x003d08ff
 80038a4:	431bde83 	.word	0x431bde83
 80038a8:	10624dd3 	.word	0x10624dd3

080038ac <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b088      	sub	sp, #32
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e128      	b.n	8003b10 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d109      	bne.n	80038de <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a90      	ldr	r2, [pc, #576]	; (8003b18 <HAL_I2S_Init+0x26c>)
 80038d6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80038d8:	6878      	ldr	r0, [r7, #4]
 80038da:	f7fd fb49 	bl	8000f70 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2202      	movs	r2, #2
 80038e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	69db      	ldr	r3, [r3, #28]
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	6812      	ldr	r2, [r2, #0]
 80038f0:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80038f4:	f023 030f 	bic.w	r3, r3, #15
 80038f8:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2202      	movs	r2, #2
 8003900:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	2b02      	cmp	r3, #2
 8003908:	d060      	beq.n	80039cc <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d102      	bne.n	8003918 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8003912:	2310      	movs	r3, #16
 8003914:	617b      	str	r3, [r7, #20]
 8003916:	e001      	b.n	800391c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8003918:	2320      	movs	r3, #32
 800391a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	2b20      	cmp	r3, #32
 8003922:	d802      	bhi.n	800392a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	005b      	lsls	r3, r3, #1
 8003928:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 800392a:	2001      	movs	r0, #1
 800392c:	f001 f9c4 	bl	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq>
 8003930:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	691b      	ldr	r3, [r3, #16]
 8003936:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800393a:	d125      	bne.n	8003988 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d010      	beq.n	8003966 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003944:	697b      	ldr	r3, [r7, #20]
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	68fa      	ldr	r2, [r7, #12]
 800394a:	fbb2 f2f3 	udiv	r2, r2, r3
 800394e:	4613      	mov	r3, r2
 8003950:	009b      	lsls	r3, r3, #2
 8003952:	4413      	add	r3, r2
 8003954:	005b      	lsls	r3, r3, #1
 8003956:	461a      	mov	r2, r3
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003960:	3305      	adds	r3, #5
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	e01f      	b.n	80039a6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	00db      	lsls	r3, r3, #3
 800396a:	68fa      	ldr	r2, [r7, #12]
 800396c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003970:	4613      	mov	r3, r2
 8003972:	009b      	lsls	r3, r3, #2
 8003974:	4413      	add	r3, r2
 8003976:	005b      	lsls	r3, r3, #1
 8003978:	461a      	mov	r2, r3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	695b      	ldr	r3, [r3, #20]
 800397e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003982:	3305      	adds	r3, #5
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	e00e      	b.n	80039a6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8003988:	68fa      	ldr	r2, [r7, #12]
 800398a:	697b      	ldr	r3, [r7, #20]
 800398c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003990:	4613      	mov	r3, r2
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4413      	add	r3, r2
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	461a      	mov	r2, r3
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	fbb2 f3f3 	udiv	r3, r2, r3
 80039a2:	3305      	adds	r3, #5
 80039a4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	4a5c      	ldr	r2, [pc, #368]	; (8003b1c <HAL_I2S_Init+0x270>)
 80039aa:	fba2 2303 	umull	r2, r3, r2, r3
 80039ae:	08db      	lsrs	r3, r3, #3
 80039b0:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	f003 0301 	and.w	r3, r3, #1
 80039b8:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80039ba:	693a      	ldr	r2, [r7, #16]
 80039bc:	69bb      	ldr	r3, [r7, #24]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	085b      	lsrs	r3, r3, #1
 80039c2:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	021b      	lsls	r3, r3, #8
 80039c8:	61bb      	str	r3, [r7, #24]
 80039ca:	e003      	b.n	80039d4 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80039cc:	2302      	movs	r3, #2
 80039ce:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d902      	bls.n	80039e0 <HAL_I2S_Init+0x134>
 80039da:	69fb      	ldr	r3, [r7, #28]
 80039dc:	2bff      	cmp	r3, #255	; 0xff
 80039de:	d907      	bls.n	80039f0 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e4:	f043 0210 	orr.w	r2, r3, #16
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80039ec:	2301      	movs	r3, #1
 80039ee:	e08f      	b.n	8003b10 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	691a      	ldr	r2, [r3, #16]
 80039f4:	69bb      	ldr	r3, [r7, #24]
 80039f6:	ea42 0103 	orr.w	r1, r2, r3
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	69fa      	ldr	r2, [r7, #28]
 8003a00:	430a      	orrs	r2, r1
 8003a02:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	69db      	ldr	r3, [r3, #28]
 8003a0a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a0e:	f023 030f 	bic.w	r3, r3, #15
 8003a12:	687a      	ldr	r2, [r7, #4]
 8003a14:	6851      	ldr	r1, [r2, #4]
 8003a16:	687a      	ldr	r2, [r7, #4]
 8003a18:	6892      	ldr	r2, [r2, #8]
 8003a1a:	4311      	orrs	r1, r2
 8003a1c:	687a      	ldr	r2, [r7, #4]
 8003a1e:	68d2      	ldr	r2, [r2, #12]
 8003a20:	4311      	orrs	r1, r2
 8003a22:	687a      	ldr	r2, [r7, #4]
 8003a24:	6992      	ldr	r2, [r2, #24]
 8003a26:	430a      	orrs	r2, r1
 8003a28:	431a      	orrs	r2, r3
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a32:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	6a1b      	ldr	r3, [r3, #32]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d161      	bne.n	8003b00 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a38      	ldr	r2, [pc, #224]	; (8003b20 <HAL_I2S_Init+0x274>)
 8003a40:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a37      	ldr	r2, [pc, #220]	; (8003b24 <HAL_I2S_Init+0x278>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d101      	bne.n	8003a50 <HAL_I2S_Init+0x1a4>
 8003a4c:	4b36      	ldr	r3, [pc, #216]	; (8003b28 <HAL_I2S_Init+0x27c>)
 8003a4e:	e001      	b.n	8003a54 <HAL_I2S_Init+0x1a8>
 8003a50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a54:	69db      	ldr	r3, [r3, #28]
 8003a56:	687a      	ldr	r2, [r7, #4]
 8003a58:	6812      	ldr	r2, [r2, #0]
 8003a5a:	4932      	ldr	r1, [pc, #200]	; (8003b24 <HAL_I2S_Init+0x278>)
 8003a5c:	428a      	cmp	r2, r1
 8003a5e:	d101      	bne.n	8003a64 <HAL_I2S_Init+0x1b8>
 8003a60:	4a31      	ldr	r2, [pc, #196]	; (8003b28 <HAL_I2S_Init+0x27c>)
 8003a62:	e001      	b.n	8003a68 <HAL_I2S_Init+0x1bc>
 8003a64:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8003a68:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8003a6c:	f023 030f 	bic.w	r3, r3, #15
 8003a70:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	4a2b      	ldr	r2, [pc, #172]	; (8003b24 <HAL_I2S_Init+0x278>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d101      	bne.n	8003a80 <HAL_I2S_Init+0x1d4>
 8003a7c:	4b2a      	ldr	r3, [pc, #168]	; (8003b28 <HAL_I2S_Init+0x27c>)
 8003a7e:	e001      	b.n	8003a84 <HAL_I2S_Init+0x1d8>
 8003a80:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a84:	2202      	movs	r2, #2
 8003a86:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a25      	ldr	r2, [pc, #148]	; (8003b24 <HAL_I2S_Init+0x278>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d101      	bne.n	8003a96 <HAL_I2S_Init+0x1ea>
 8003a92:	4b25      	ldr	r3, [pc, #148]	; (8003b28 <HAL_I2S_Init+0x27c>)
 8003a94:	e001      	b.n	8003a9a <HAL_I2S_Init+0x1ee>
 8003a96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003aa6:	d003      	beq.n	8003ab0 <HAL_I2S_Init+0x204>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d103      	bne.n	8003ab8 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8003ab0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003ab4:	613b      	str	r3, [r7, #16]
 8003ab6:	e001      	b.n	8003abc <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8003ab8:	2300      	movs	r3, #0
 8003aba:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8003abc:	693b      	ldr	r3, [r7, #16]
 8003abe:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	689b      	ldr	r3, [r3, #8]
 8003ac4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	68db      	ldr	r3, [r3, #12]
 8003ace:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ad0:	4313      	orrs	r3, r2
 8003ad2:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	699b      	ldr	r3, [r3, #24]
 8003ad8:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8003ada:	4313      	orrs	r3, r2
 8003adc:	b29a      	uxth	r2, r3
 8003ade:	897b      	ldrh	r3, [r7, #10]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ae8:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	4a0d      	ldr	r2, [pc, #52]	; (8003b24 <HAL_I2S_Init+0x278>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d101      	bne.n	8003af8 <HAL_I2S_Init+0x24c>
 8003af4:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <HAL_I2S_Init+0x27c>)
 8003af6:	e001      	b.n	8003afc <HAL_I2S_Init+0x250>
 8003af8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003afc:	897a      	ldrh	r2, [r7, #10]
 8003afe:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2201      	movs	r2, #1
 8003b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8003b0e:	2300      	movs	r3, #0
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3720      	adds	r7, #32
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	08003c23 	.word	0x08003c23
 8003b1c:	cccccccd 	.word	0xcccccccd
 8003b20:	08003d39 	.word	0x08003d39
 8003b24:	40003800 	.word	0x40003800
 8003b28:	40003400 	.word	0x40003400

08003b2c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8003b34:	bf00      	nop
 8003b36:	370c      	adds	r7, #12
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3e:	4770      	bx	lr

08003b40 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8003b48:	bf00      	nop
 8003b4a:	370c      	adds	r7, #12
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b52:	4770      	bx	lr

08003b54 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b083      	sub	sp, #12
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8003b5c:	bf00      	nop
 8003b5e:	370c      	adds	r7, #12
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr

08003b68 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b74:	881a      	ldrh	r2, [r3, #0]
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b80:	1c9a      	adds	r2, r3, #2
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8a:	b29b      	uxth	r3, r3
 8003b8c:	3b01      	subs	r3, #1
 8003b8e:	b29a      	uxth	r2, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d10e      	bne.n	8003bbc <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	685a      	ldr	r2, [r3, #4]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003bac:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8003bb6:	6878      	ldr	r0, [r7, #4]
 8003bb8:	f7ff ffb8 	bl	8003b2c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003bbc:	bf00      	nop
 8003bbe:	3708      	adds	r7, #8
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}

08003bc4 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b082      	sub	sp, #8
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	b292      	uxth	r2, r2
 8003bd8:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bde:	1c9a      	adds	r2, r3, #2
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	3b01      	subs	r3, #1
 8003bec:	b29a      	uxth	r2, r3
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003bf6:	b29b      	uxth	r3, r3
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d10e      	bne.n	8003c1a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c0a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8003c14:	6878      	ldr	r0, [r7, #4]
 8003c16:	f7ff ff93 	bl	8003b40 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8003c1a:	bf00      	nop
 8003c1c:	3708      	adds	r7, #8
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bd80      	pop	{r7, pc}

08003c22 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003c22:	b580      	push	{r7, lr}
 8003c24:	b086      	sub	sp, #24
 8003c26:	af00      	add	r7, sp, #0
 8003c28:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	689b      	ldr	r3, [r3, #8]
 8003c30:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c38:	b2db      	uxtb	r3, r3
 8003c3a:	2b04      	cmp	r3, #4
 8003c3c:	d13a      	bne.n	8003cb4 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8003c3e:	697b      	ldr	r3, [r7, #20]
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d109      	bne.n	8003c5c <I2S_IRQHandler+0x3a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c52:	2b40      	cmp	r3, #64	; 0x40
 8003c54:	d102      	bne.n	8003c5c <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff ffb4 	bl	8003bc4 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003c62:	2b40      	cmp	r3, #64	; 0x40
 8003c64:	d126      	bne.n	8003cb4 <I2S_IRQHandler+0x92>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	f003 0320 	and.w	r3, r3, #32
 8003c70:	2b20      	cmp	r3, #32
 8003c72:	d11f      	bne.n	8003cb4 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	685a      	ldr	r2, [r3, #4]
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003c82:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003c84:	2300      	movs	r3, #0
 8003c86:	613b      	str	r3, [r7, #16]
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	613b      	str	r3, [r7, #16]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	613b      	str	r3, [r7, #16]
 8003c98:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2201      	movs	r2, #1
 8003c9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ca6:	f043 0202 	orr.w	r2, r3, #2
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ff50 	bl	8003b54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cba:	b2db      	uxtb	r3, r3
 8003cbc:	2b03      	cmp	r3, #3
 8003cbe:	d136      	bne.n	8003d2e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	f003 0302 	and.w	r3, r3, #2
 8003cc6:	2b02      	cmp	r3, #2
 8003cc8:	d109      	bne.n	8003cde <I2S_IRQHandler+0xbc>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cd4:	2b80      	cmp	r3, #128	; 0x80
 8003cd6:	d102      	bne.n	8003cde <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f7ff ff45 	bl	8003b68 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f003 0308 	and.w	r3, r3, #8
 8003ce4:	2b08      	cmp	r3, #8
 8003ce6:	d122      	bne.n	8003d2e <I2S_IRQHandler+0x10c>
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	685b      	ldr	r3, [r3, #4]
 8003cee:	f003 0320 	and.w	r3, r3, #32
 8003cf2:	2b20      	cmp	r3, #32
 8003cf4:	d11b      	bne.n	8003d2e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	685a      	ldr	r2, [r3, #4]
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003d04:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003d06:	2300      	movs	r3, #0
 8003d08:	60fb      	str	r3, [r7, #12]
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	60fb      	str	r3, [r7, #12]
 8003d12:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2201      	movs	r2, #1
 8003d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d20:	f043 0204 	orr.w	r2, r3, #4
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003d28:	6878      	ldr	r0, [r7, #4]
 8003d2a:	f7ff ff13 	bl	8003b54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003d2e:	bf00      	nop
 8003d30:	3718      	adds	r7, #24
 8003d32:	46bd      	mov	sp, r7
 8003d34:	bd80      	pop	{r7, pc}
	...

08003d38 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a92      	ldr	r2, [pc, #584]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d101      	bne.n	8003d56 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8003d52:	4b92      	ldr	r3, [pc, #584]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d54:	e001      	b.n	8003d5a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8003d56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a8b      	ldr	r2, [pc, #556]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d101      	bne.n	8003d74 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8003d70:	4b8a      	ldr	r3, [pc, #552]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003d72:	e001      	b.n	8003d78 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8003d74:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003d84:	d004      	beq.n	8003d90 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	685b      	ldr	r3, [r3, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	f040 8099 	bne.w	8003ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	f003 0302 	and.w	r3, r3, #2
 8003d96:	2b02      	cmp	r3, #2
 8003d98:	d107      	bne.n	8003daa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8003d9a:	697b      	ldr	r3, [r7, #20]
 8003d9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d002      	beq.n	8003daa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8003da4:	6878      	ldr	r0, [r7, #4]
 8003da6:	f000 f925 	bl	8003ff4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8003daa:	69bb      	ldr	r3, [r7, #24]
 8003dac:	f003 0301 	and.w	r3, r3, #1
 8003db0:	2b01      	cmp	r3, #1
 8003db2:	d107      	bne.n	8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8003db4:	693b      	ldr	r3, [r7, #16]
 8003db6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d002      	beq.n	8003dc4 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f9c8 	bl	8004154 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dca:	2b40      	cmp	r3, #64	; 0x40
 8003dcc:	d13a      	bne.n	8003e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8003dce:	693b      	ldr	r3, [r7, #16]
 8003dd0:	f003 0320 	and.w	r3, r3, #32
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d035      	beq.n	8003e44 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4a6e      	ldr	r2, [pc, #440]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d101      	bne.n	8003de6 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8003de2:	4b6e      	ldr	r3, [pc, #440]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003de4:	e001      	b.n	8003dea <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8003de6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4969      	ldr	r1, [pc, #420]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003df2:	428b      	cmp	r3, r1
 8003df4:	d101      	bne.n	8003dfa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8003df6:	4b69      	ldr	r3, [pc, #420]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003df8:	e001      	b.n	8003dfe <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8003dfa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003dfe:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e02:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	685a      	ldr	r2, [r3, #4]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e12:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8003e14:	2300      	movs	r3, #0
 8003e16:	60fb      	str	r3, [r7, #12]
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
 8003e1e:	60fb      	str	r3, [r7, #12]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	60fb      	str	r3, [r7, #12]
 8003e28:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e36:	f043 0202 	orr.w	r2, r3, #2
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f7ff fe88 	bl	8003b54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003e44:	69fb      	ldr	r3, [r7, #28]
 8003e46:	f003 0308 	and.w	r3, r3, #8
 8003e4a:	2b08      	cmp	r3, #8
 8003e4c:	f040 80c3 	bne.w	8003fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 80bd 	beq.w	8003fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	685a      	ldr	r2, [r3, #4]
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003e6a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a49      	ldr	r2, [pc, #292]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d101      	bne.n	8003e7a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8003e76:	4b49      	ldr	r3, [pc, #292]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e78:	e001      	b.n	8003e7e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8003e7a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e7e:	685a      	ldr	r2, [r3, #4]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4944      	ldr	r1, [pc, #272]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003e86:	428b      	cmp	r3, r1
 8003e88:	d101      	bne.n	8003e8e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8003e8a:	4b44      	ldr	r3, [pc, #272]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003e8c:	e001      	b.n	8003e92 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8003e8e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003e92:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003e96:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8003e98:	2300      	movs	r3, #0
 8003e9a:	60bb      	str	r3, [r7, #8]
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	60bb      	str	r3, [r7, #8]
 8003ea4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003eb2:	f043 0204 	orr.w	r2, r3, #4
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f7ff fe4a 	bl	8003b54 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ec0:	e089      	b.n	8003fd6 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8003ec2:	69bb      	ldr	r3, [r7, #24]
 8003ec4:	f003 0302 	and.w	r3, r3, #2
 8003ec8:	2b02      	cmp	r3, #2
 8003eca:	d107      	bne.n	8003edc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d002      	beq.n	8003edc <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8003ed6:	6878      	ldr	r0, [r7, #4]
 8003ed8:	f000 f8be 	bl	8004058 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8003edc:	69fb      	ldr	r3, [r7, #28]
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b01      	cmp	r3, #1
 8003ee4:	d107      	bne.n	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8003ef0:	6878      	ldr	r0, [r7, #4]
 8003ef2:	f000 f8fd 	bl	80040f0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003efc:	2b40      	cmp	r3, #64	; 0x40
 8003efe:	d12f      	bne.n	8003f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d02a      	beq.n	8003f60 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003f18:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	4a1e      	ldr	r2, [pc, #120]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f20:	4293      	cmp	r3, r2
 8003f22:	d101      	bne.n	8003f28 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003f24:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f26:	e001      	b.n	8003f2c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003f28:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f2c:	685a      	ldr	r2, [r3, #4]
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	4919      	ldr	r1, [pc, #100]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f34:	428b      	cmp	r3, r1
 8003f36:	d101      	bne.n	8003f3c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003f38:	4b18      	ldr	r3, [pc, #96]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f3a:	e001      	b.n	8003f40 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003f3c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f40:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003f44:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2201      	movs	r2, #1
 8003f4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f52:	f043 0202 	orr.w	r2, r3, #2
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003f5a:	6878      	ldr	r0, [r7, #4]
 8003f5c:	f7ff fdfa 	bl	8003b54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003f60:	69bb      	ldr	r3, [r7, #24]
 8003f62:	f003 0308 	and.w	r3, r3, #8
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d136      	bne.n	8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f003 0320 	and.w	r3, r3, #32
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d031      	beq.n	8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a07      	ldr	r2, [pc, #28]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d101      	bne.n	8003f82 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8003f7e:	4b07      	ldr	r3, [pc, #28]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f80:	e001      	b.n	8003f86 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003f82:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003f86:	685a      	ldr	r2, [r3, #4]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4902      	ldr	r1, [pc, #8]	; (8003f98 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8003f8e:	428b      	cmp	r3, r1
 8003f90:	d106      	bne.n	8003fa0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8003f92:	4b02      	ldr	r3, [pc, #8]	; (8003f9c <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8003f94:	e006      	b.n	8003fa4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8003f96:	bf00      	nop
 8003f98:	40003800 	.word	0x40003800
 8003f9c:	40003400 	.word	0x40003400
 8003fa0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003fa4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003fa8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	685a      	ldr	r2, [r3, #4]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003fb8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2201      	movs	r2, #1
 8003fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fc6:	f043 0204 	orr.w	r2, r3, #4
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f7ff fdc0 	bl	8003b54 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003fd4:	e000      	b.n	8003fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8003fd6:	bf00      	nop
}
 8003fd8:	bf00      	nop
 8003fda:	3720      	adds	r7, #32
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}

08003fe0 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003fe8:	bf00      	nop
 8003fea:	370c      	adds	r7, #12
 8003fec:	46bd      	mov	sp, r7
 8003fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff2:	4770      	bx	lr

08003ff4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b082      	sub	sp, #8
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	1c99      	adds	r1, r3, #2
 8004002:	687a      	ldr	r2, [r7, #4]
 8004004:	6251      	str	r1, [r2, #36]	; 0x24
 8004006:	881a      	ldrh	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004012:	b29b      	uxth	r3, r3
 8004014:	3b01      	subs	r3, #1
 8004016:	b29a      	uxth	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004020:	b29b      	uxth	r3, r3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d113      	bne.n	800404e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685a      	ldr	r2, [r3, #4]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8004034:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800403a:	b29b      	uxth	r3, r3
 800403c:	2b00      	cmp	r3, #0
 800403e:	d106      	bne.n	800404e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2201      	movs	r2, #1
 8004044:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7ff ffc9 	bl	8003fe0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800404e:	bf00      	nop
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}
	...

08004058 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b082      	sub	sp, #8
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004064:	1c99      	adds	r1, r3, #2
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	6251      	str	r1, [r2, #36]	; 0x24
 800406a:	8819      	ldrh	r1, [r3, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a1d      	ldr	r2, [pc, #116]	; (80040e8 <I2SEx_TxISR_I2SExt+0x90>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d101      	bne.n	800407a <I2SEx_TxISR_I2SExt+0x22>
 8004076:	4b1d      	ldr	r3, [pc, #116]	; (80040ec <I2SEx_TxISR_I2SExt+0x94>)
 8004078:	e001      	b.n	800407e <I2SEx_TxISR_I2SExt+0x26>
 800407a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800407e:	460a      	mov	r2, r1
 8004080:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004086:	b29b      	uxth	r3, r3
 8004088:	3b01      	subs	r3, #1
 800408a:	b29a      	uxth	r2, r3
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004094:	b29b      	uxth	r3, r3
 8004096:	2b00      	cmp	r3, #0
 8004098:	d121      	bne.n	80040de <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a12      	ldr	r2, [pc, #72]	; (80040e8 <I2SEx_TxISR_I2SExt+0x90>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d101      	bne.n	80040a8 <I2SEx_TxISR_I2SExt+0x50>
 80040a4:	4b11      	ldr	r3, [pc, #68]	; (80040ec <I2SEx_TxISR_I2SExt+0x94>)
 80040a6:	e001      	b.n	80040ac <I2SEx_TxISR_I2SExt+0x54>
 80040a8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	490d      	ldr	r1, [pc, #52]	; (80040e8 <I2SEx_TxISR_I2SExt+0x90>)
 80040b4:	428b      	cmp	r3, r1
 80040b6:	d101      	bne.n	80040bc <I2SEx_TxISR_I2SExt+0x64>
 80040b8:	4b0c      	ldr	r3, [pc, #48]	; (80040ec <I2SEx_TxISR_I2SExt+0x94>)
 80040ba:	e001      	b.n	80040c0 <I2SEx_TxISR_I2SExt+0x68>
 80040bc:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80040c0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80040c4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80040ca:	b29b      	uxth	r3, r3
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d106      	bne.n	80040de <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2201      	movs	r2, #1
 80040d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff81 	bl	8003fe0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40003800 	.word	0x40003800
 80040ec:	40003400 	.word	0x40003400

080040f0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b082      	sub	sp, #8
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	68d8      	ldr	r0, [r3, #12]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004102:	1c99      	adds	r1, r3, #2
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	62d1      	str	r1, [r2, #44]	; 0x2c
 8004108:	b282      	uxth	r2, r0
 800410a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004110:	b29b      	uxth	r3, r3
 8004112:	3b01      	subs	r3, #1
 8004114:	b29a      	uxth	r2, r3
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800411e:	b29b      	uxth	r3, r3
 8004120:	2b00      	cmp	r3, #0
 8004122:	d113      	bne.n	800414c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	685a      	ldr	r2, [r3, #4]
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8004132:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004138:	b29b      	uxth	r3, r3
 800413a:	2b00      	cmp	r3, #0
 800413c:	d106      	bne.n	800414c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2201      	movs	r2, #1
 8004142:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004146:	6878      	ldr	r0, [r7, #4]
 8004148:	f7ff ff4a 	bl	8003fe0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800414c:	bf00      	nop
 800414e:	3708      	adds	r7, #8
 8004150:	46bd      	mov	sp, r7
 8004152:	bd80      	pop	{r7, pc}

08004154 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004154:	b580      	push	{r7, lr}
 8004156:	b082      	sub	sp, #8
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	4a20      	ldr	r2, [pc, #128]	; (80041e4 <I2SEx_RxISR_I2SExt+0x90>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d101      	bne.n	800416a <I2SEx_RxISR_I2SExt+0x16>
 8004166:	4b20      	ldr	r3, [pc, #128]	; (80041e8 <I2SEx_RxISR_I2SExt+0x94>)
 8004168:	e001      	b.n	800416e <I2SEx_RxISR_I2SExt+0x1a>
 800416a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800416e:	68d8      	ldr	r0, [r3, #12]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004174:	1c99      	adds	r1, r3, #2
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	62d1      	str	r1, [r2, #44]	; 0x2c
 800417a:	b282      	uxth	r2, r0
 800417c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004182:	b29b      	uxth	r3, r3
 8004184:	3b01      	subs	r3, #1
 8004186:	b29a      	uxth	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8004190:	b29b      	uxth	r3, r3
 8004192:	2b00      	cmp	r3, #0
 8004194:	d121      	bne.n	80041da <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a12      	ldr	r2, [pc, #72]	; (80041e4 <I2SEx_RxISR_I2SExt+0x90>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d101      	bne.n	80041a4 <I2SEx_RxISR_I2SExt+0x50>
 80041a0:	4b11      	ldr	r3, [pc, #68]	; (80041e8 <I2SEx_RxISR_I2SExt+0x94>)
 80041a2:	e001      	b.n	80041a8 <I2SEx_RxISR_I2SExt+0x54>
 80041a4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041a8:	685a      	ldr	r2, [r3, #4]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	490d      	ldr	r1, [pc, #52]	; (80041e4 <I2SEx_RxISR_I2SExt+0x90>)
 80041b0:	428b      	cmp	r3, r1
 80041b2:	d101      	bne.n	80041b8 <I2SEx_RxISR_I2SExt+0x64>
 80041b4:	4b0c      	ldr	r3, [pc, #48]	; (80041e8 <I2SEx_RxISR_I2SExt+0x94>)
 80041b6:	e001      	b.n	80041bc <I2SEx_RxISR_I2SExt+0x68>
 80041b8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80041bc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80041c0:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c6:	b29b      	uxth	r3, r3
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d106      	bne.n	80041da <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f7ff ff03 	bl	8003fe0 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80041da:	bf00      	nop
 80041dc:	3708      	adds	r7, #8
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40003800 	.word	0x40003800
 80041e8:	40003400 	.word	0x40003400

080041ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e267      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0301 	and.w	r3, r3, #1
 8004206:	2b00      	cmp	r3, #0
 8004208:	d075      	beq.n	80042f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800420a:	4b88      	ldr	r3, [pc, #544]	; (800442c <HAL_RCC_OscConfig+0x240>)
 800420c:	689b      	ldr	r3, [r3, #8]
 800420e:	f003 030c 	and.w	r3, r3, #12
 8004212:	2b04      	cmp	r3, #4
 8004214:	d00c      	beq.n	8004230 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004216:	4b85      	ldr	r3, [pc, #532]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004218:	689b      	ldr	r3, [r3, #8]
 800421a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800421e:	2b08      	cmp	r3, #8
 8004220:	d112      	bne.n	8004248 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004222:	4b82      	ldr	r3, [pc, #520]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004224:	685b      	ldr	r3, [r3, #4]
 8004226:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800422e:	d10b      	bne.n	8004248 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004230:	4b7e      	ldr	r3, [pc, #504]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d05b      	beq.n	80042f4 <HAL_RCC_OscConfig+0x108>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	685b      	ldr	r3, [r3, #4]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d157      	bne.n	80042f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e242      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	685b      	ldr	r3, [r3, #4]
 800424c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004250:	d106      	bne.n	8004260 <HAL_RCC_OscConfig+0x74>
 8004252:	4b76      	ldr	r3, [pc, #472]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	4a75      	ldr	r2, [pc, #468]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004258:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800425c:	6013      	str	r3, [r2, #0]
 800425e:	e01d      	b.n	800429c <HAL_RCC_OscConfig+0xb0>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004268:	d10c      	bne.n	8004284 <HAL_RCC_OscConfig+0x98>
 800426a:	4b70      	ldr	r3, [pc, #448]	; (800442c <HAL_RCC_OscConfig+0x240>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a6f      	ldr	r2, [pc, #444]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004270:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004274:	6013      	str	r3, [r2, #0]
 8004276:	4b6d      	ldr	r3, [pc, #436]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	4a6c      	ldr	r2, [pc, #432]	; (800442c <HAL_RCC_OscConfig+0x240>)
 800427c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004280:	6013      	str	r3, [r2, #0]
 8004282:	e00b      	b.n	800429c <HAL_RCC_OscConfig+0xb0>
 8004284:	4b69      	ldr	r3, [pc, #420]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	4a68      	ldr	r2, [pc, #416]	; (800442c <HAL_RCC_OscConfig+0x240>)
 800428a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800428e:	6013      	str	r3, [r2, #0]
 8004290:	4b66      	ldr	r3, [pc, #408]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a65      	ldr	r2, [pc, #404]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004296:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800429a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d013      	beq.n	80042cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042a4:	f7fd f85a 	bl	800135c <HAL_GetTick>
 80042a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	e008      	b.n	80042be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042ac:	f7fd f856 	bl	800135c <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	693b      	ldr	r3, [r7, #16]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	2b64      	cmp	r3, #100	; 0x64
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e207      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042be:	4b5b      	ldr	r3, [pc, #364]	; (800442c <HAL_RCC_OscConfig+0x240>)
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0f0      	beq.n	80042ac <HAL_RCC_OscConfig+0xc0>
 80042ca:	e014      	b.n	80042f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042cc:	f7fd f846 	bl	800135c <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042d2:	e008      	b.n	80042e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80042d4:	f7fd f842 	bl	800135c <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	2b64      	cmp	r3, #100	; 0x64
 80042e0:	d901      	bls.n	80042e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80042e2:	2303      	movs	r3, #3
 80042e4:	e1f3      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80042e6:	4b51      	ldr	r3, [pc, #324]	; (800442c <HAL_RCC_OscConfig+0x240>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1f0      	bne.n	80042d4 <HAL_RCC_OscConfig+0xe8>
 80042f2:	e000      	b.n	80042f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80042f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d063      	beq.n	80043ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004302:	4b4a      	ldr	r3, [pc, #296]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004304:	689b      	ldr	r3, [r3, #8]
 8004306:	f003 030c 	and.w	r3, r3, #12
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800430e:	4b47      	ldr	r3, [pc, #284]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004310:	689b      	ldr	r3, [r3, #8]
 8004312:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004316:	2b08      	cmp	r3, #8
 8004318:	d11c      	bne.n	8004354 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800431a:	4b44      	ldr	r3, [pc, #272]	; (800442c <HAL_RCC_OscConfig+0x240>)
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d116      	bne.n	8004354 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004326:	4b41      	ldr	r3, [pc, #260]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d005      	beq.n	800433e <HAL_RCC_OscConfig+0x152>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	68db      	ldr	r3, [r3, #12]
 8004336:	2b01      	cmp	r3, #1
 8004338:	d001      	beq.n	800433e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	e1c7      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800433e:	4b3b      	ldr	r3, [pc, #236]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	00db      	lsls	r3, r3, #3
 800434c:	4937      	ldr	r1, [pc, #220]	; (800442c <HAL_RCC_OscConfig+0x240>)
 800434e:	4313      	orrs	r3, r2
 8004350:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004352:	e03a      	b.n	80043ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	68db      	ldr	r3, [r3, #12]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d020      	beq.n	800439e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800435c:	4b34      	ldr	r3, [pc, #208]	; (8004430 <HAL_RCC_OscConfig+0x244>)
 800435e:	2201      	movs	r2, #1
 8004360:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004362:	f7fc fffb 	bl	800135c <HAL_GetTick>
 8004366:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004368:	e008      	b.n	800437c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800436a:	f7fc fff7 	bl	800135c <HAL_GetTick>
 800436e:	4602      	mov	r2, r0
 8004370:	693b      	ldr	r3, [r7, #16]
 8004372:	1ad3      	subs	r3, r2, r3
 8004374:	2b02      	cmp	r3, #2
 8004376:	d901      	bls.n	800437c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004378:	2303      	movs	r3, #3
 800437a:	e1a8      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800437c:	4b2b      	ldr	r3, [pc, #172]	; (800442c <HAL_RCC_OscConfig+0x240>)
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	f003 0302 	and.w	r3, r3, #2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d0f0      	beq.n	800436a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004388:	4b28      	ldr	r3, [pc, #160]	; (800442c <HAL_RCC_OscConfig+0x240>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	691b      	ldr	r3, [r3, #16]
 8004394:	00db      	lsls	r3, r3, #3
 8004396:	4925      	ldr	r1, [pc, #148]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004398:	4313      	orrs	r3, r2
 800439a:	600b      	str	r3, [r1, #0]
 800439c:	e015      	b.n	80043ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800439e:	4b24      	ldr	r3, [pc, #144]	; (8004430 <HAL_RCC_OscConfig+0x244>)
 80043a0:	2200      	movs	r2, #0
 80043a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a4:	f7fc ffda 	bl	800135c <HAL_GetTick>
 80043a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043aa:	e008      	b.n	80043be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80043ac:	f7fc ffd6 	bl	800135c <HAL_GetTick>
 80043b0:	4602      	mov	r2, r0
 80043b2:	693b      	ldr	r3, [r7, #16]
 80043b4:	1ad3      	subs	r3, r2, r3
 80043b6:	2b02      	cmp	r3, #2
 80043b8:	d901      	bls.n	80043be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80043ba:	2303      	movs	r3, #3
 80043bc:	e187      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80043be:	4b1b      	ldr	r3, [pc, #108]	; (800442c <HAL_RCC_OscConfig+0x240>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f003 0302 	and.w	r3, r3, #2
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1f0      	bne.n	80043ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 0308 	and.w	r3, r3, #8
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d036      	beq.n	8004444 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d016      	beq.n	800440c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80043de:	4b15      	ldr	r3, [pc, #84]	; (8004434 <HAL_RCC_OscConfig+0x248>)
 80043e0:	2201      	movs	r2, #1
 80043e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80043e4:	f7fc ffba 	bl	800135c <HAL_GetTick>
 80043e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043ea:	e008      	b.n	80043fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80043ec:	f7fc ffb6 	bl	800135c <HAL_GetTick>
 80043f0:	4602      	mov	r2, r0
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	1ad3      	subs	r3, r2, r3
 80043f6:	2b02      	cmp	r3, #2
 80043f8:	d901      	bls.n	80043fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80043fa:	2303      	movs	r3, #3
 80043fc:	e167      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80043fe:	4b0b      	ldr	r3, [pc, #44]	; (800442c <HAL_RCC_OscConfig+0x240>)
 8004400:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004402:	f003 0302 	and.w	r3, r3, #2
 8004406:	2b00      	cmp	r3, #0
 8004408:	d0f0      	beq.n	80043ec <HAL_RCC_OscConfig+0x200>
 800440a:	e01b      	b.n	8004444 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800440c:	4b09      	ldr	r3, [pc, #36]	; (8004434 <HAL_RCC_OscConfig+0x248>)
 800440e:	2200      	movs	r2, #0
 8004410:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004412:	f7fc ffa3 	bl	800135c <HAL_GetTick>
 8004416:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004418:	e00e      	b.n	8004438 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800441a:	f7fc ff9f 	bl	800135c <HAL_GetTick>
 800441e:	4602      	mov	r2, r0
 8004420:	693b      	ldr	r3, [r7, #16]
 8004422:	1ad3      	subs	r3, r2, r3
 8004424:	2b02      	cmp	r3, #2
 8004426:	d907      	bls.n	8004438 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e150      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
 800442c:	40023800 	.word	0x40023800
 8004430:	42470000 	.word	0x42470000
 8004434:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004438:	4b88      	ldr	r3, [pc, #544]	; (800465c <HAL_RCC_OscConfig+0x470>)
 800443a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800443c:	f003 0302 	and.w	r3, r3, #2
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1ea      	bne.n	800441a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f003 0304 	and.w	r3, r3, #4
 800444c:	2b00      	cmp	r3, #0
 800444e:	f000 8097 	beq.w	8004580 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004452:	2300      	movs	r3, #0
 8004454:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004456:	4b81      	ldr	r3, [pc, #516]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800445e:	2b00      	cmp	r3, #0
 8004460:	d10f      	bne.n	8004482 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004462:	2300      	movs	r3, #0
 8004464:	60bb      	str	r3, [r7, #8]
 8004466:	4b7d      	ldr	r3, [pc, #500]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446a:	4a7c      	ldr	r2, [pc, #496]	; (800465c <HAL_RCC_OscConfig+0x470>)
 800446c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004470:	6413      	str	r3, [r2, #64]	; 0x40
 8004472:	4b7a      	ldr	r3, [pc, #488]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800447a:	60bb      	str	r3, [r7, #8]
 800447c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800447e:	2301      	movs	r3, #1
 8004480:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004482:	4b77      	ldr	r3, [pc, #476]	; (8004660 <HAL_RCC_OscConfig+0x474>)
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800448a:	2b00      	cmp	r3, #0
 800448c:	d118      	bne.n	80044c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800448e:	4b74      	ldr	r3, [pc, #464]	; (8004660 <HAL_RCC_OscConfig+0x474>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	4a73      	ldr	r2, [pc, #460]	; (8004660 <HAL_RCC_OscConfig+0x474>)
 8004494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800449a:	f7fc ff5f 	bl	800135c <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044a2:	f7fc ff5b 	bl	800135c <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e10c      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044b4:	4b6a      	ldr	r3, [pc, #424]	; (8004660 <HAL_RCC_OscConfig+0x474>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	689b      	ldr	r3, [r3, #8]
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d106      	bne.n	80044d6 <HAL_RCC_OscConfig+0x2ea>
 80044c8:	4b64      	ldr	r3, [pc, #400]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80044ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044cc:	4a63      	ldr	r2, [pc, #396]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80044ce:	f043 0301 	orr.w	r3, r3, #1
 80044d2:	6713      	str	r3, [r2, #112]	; 0x70
 80044d4:	e01c      	b.n	8004510 <HAL_RCC_OscConfig+0x324>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	2b05      	cmp	r3, #5
 80044dc:	d10c      	bne.n	80044f8 <HAL_RCC_OscConfig+0x30c>
 80044de:	4b5f      	ldr	r3, [pc, #380]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80044e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e2:	4a5e      	ldr	r2, [pc, #376]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80044e4:	f043 0304 	orr.w	r3, r3, #4
 80044e8:	6713      	str	r3, [r2, #112]	; 0x70
 80044ea:	4b5c      	ldr	r3, [pc, #368]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80044ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ee:	4a5b      	ldr	r2, [pc, #364]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80044f0:	f043 0301 	orr.w	r3, r3, #1
 80044f4:	6713      	str	r3, [r2, #112]	; 0x70
 80044f6:	e00b      	b.n	8004510 <HAL_RCC_OscConfig+0x324>
 80044f8:	4b58      	ldr	r3, [pc, #352]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80044fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044fc:	4a57      	ldr	r2, [pc, #348]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80044fe:	f023 0301 	bic.w	r3, r3, #1
 8004502:	6713      	str	r3, [r2, #112]	; 0x70
 8004504:	4b55      	ldr	r3, [pc, #340]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004508:	4a54      	ldr	r2, [pc, #336]	; (800465c <HAL_RCC_OscConfig+0x470>)
 800450a:	f023 0304 	bic.w	r3, r3, #4
 800450e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	2b00      	cmp	r3, #0
 8004516:	d015      	beq.n	8004544 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004518:	f7fc ff20 	bl	800135c <HAL_GetTick>
 800451c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800451e:	e00a      	b.n	8004536 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004520:	f7fc ff1c 	bl	800135c <HAL_GetTick>
 8004524:	4602      	mov	r2, r0
 8004526:	693b      	ldr	r3, [r7, #16]
 8004528:	1ad3      	subs	r3, r2, r3
 800452a:	f241 3288 	movw	r2, #5000	; 0x1388
 800452e:	4293      	cmp	r3, r2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e0cb      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004536:	4b49      	ldr	r3, [pc, #292]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0ee      	beq.n	8004520 <HAL_RCC_OscConfig+0x334>
 8004542:	e014      	b.n	800456e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004544:	f7fc ff0a 	bl	800135c <HAL_GetTick>
 8004548:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800454a:	e00a      	b.n	8004562 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800454c:	f7fc ff06 	bl	800135c <HAL_GetTick>
 8004550:	4602      	mov	r2, r0
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	1ad3      	subs	r3, r2, r3
 8004556:	f241 3288 	movw	r2, #5000	; 0x1388
 800455a:	4293      	cmp	r3, r2
 800455c:	d901      	bls.n	8004562 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800455e:	2303      	movs	r3, #3
 8004560:	e0b5      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004562:	4b3e      	ldr	r3, [pc, #248]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004566:	f003 0302 	and.w	r3, r3, #2
 800456a:	2b00      	cmp	r3, #0
 800456c:	d1ee      	bne.n	800454c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800456e:	7dfb      	ldrb	r3, [r7, #23]
 8004570:	2b01      	cmp	r3, #1
 8004572:	d105      	bne.n	8004580 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004574:	4b39      	ldr	r3, [pc, #228]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004578:	4a38      	ldr	r2, [pc, #224]	; (800465c <HAL_RCC_OscConfig+0x470>)
 800457a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800457e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	699b      	ldr	r3, [r3, #24]
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 80a1 	beq.w	80046cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800458a:	4b34      	ldr	r3, [pc, #208]	; (800465c <HAL_RCC_OscConfig+0x470>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b08      	cmp	r3, #8
 8004594:	d05c      	beq.n	8004650 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	2b02      	cmp	r3, #2
 800459c:	d141      	bne.n	8004622 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800459e:	4b31      	ldr	r3, [pc, #196]	; (8004664 <HAL_RCC_OscConfig+0x478>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a4:	f7fc feda 	bl	800135c <HAL_GetTick>
 80045a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045aa:	e008      	b.n	80045be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80045ac:	f7fc fed6 	bl	800135c <HAL_GetTick>
 80045b0:	4602      	mov	r2, r0
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	1ad3      	subs	r3, r2, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d901      	bls.n	80045be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80045ba:	2303      	movs	r3, #3
 80045bc:	e087      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80045be:	4b27      	ldr	r3, [pc, #156]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d1f0      	bne.n	80045ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69da      	ldr	r2, [r3, #28]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a1b      	ldr	r3, [r3, #32]
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	019b      	lsls	r3, r3, #6
 80045da:	431a      	orrs	r2, r3
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e0:	085b      	lsrs	r3, r3, #1
 80045e2:	3b01      	subs	r3, #1
 80045e4:	041b      	lsls	r3, r3, #16
 80045e6:	431a      	orrs	r2, r3
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ec:	061b      	lsls	r3, r3, #24
 80045ee:	491b      	ldr	r1, [pc, #108]	; (800465c <HAL_RCC_OscConfig+0x470>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80045f4:	4b1b      	ldr	r3, [pc, #108]	; (8004664 <HAL_RCC_OscConfig+0x478>)
 80045f6:	2201      	movs	r2, #1
 80045f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045fa:	f7fc feaf 	bl	800135c <HAL_GetTick>
 80045fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004600:	e008      	b.n	8004614 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004602:	f7fc feab 	bl	800135c <HAL_GetTick>
 8004606:	4602      	mov	r2, r0
 8004608:	693b      	ldr	r3, [r7, #16]
 800460a:	1ad3      	subs	r3, r2, r3
 800460c:	2b02      	cmp	r3, #2
 800460e:	d901      	bls.n	8004614 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004610:	2303      	movs	r3, #3
 8004612:	e05c      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004614:	4b11      	ldr	r3, [pc, #68]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800461c:	2b00      	cmp	r3, #0
 800461e:	d0f0      	beq.n	8004602 <HAL_RCC_OscConfig+0x416>
 8004620:	e054      	b.n	80046cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004622:	4b10      	ldr	r3, [pc, #64]	; (8004664 <HAL_RCC_OscConfig+0x478>)
 8004624:	2200      	movs	r2, #0
 8004626:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004628:	f7fc fe98 	bl	800135c <HAL_GetTick>
 800462c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800462e:	e008      	b.n	8004642 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004630:	f7fc fe94 	bl	800135c <HAL_GetTick>
 8004634:	4602      	mov	r2, r0
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	1ad3      	subs	r3, r2, r3
 800463a:	2b02      	cmp	r3, #2
 800463c:	d901      	bls.n	8004642 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e045      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004642:	4b06      	ldr	r3, [pc, #24]	; (800465c <HAL_RCC_OscConfig+0x470>)
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800464a:	2b00      	cmp	r3, #0
 800464c:	d1f0      	bne.n	8004630 <HAL_RCC_OscConfig+0x444>
 800464e:	e03d      	b.n	80046cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	699b      	ldr	r3, [r3, #24]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d107      	bne.n	8004668 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004658:	2301      	movs	r3, #1
 800465a:	e038      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
 800465c:	40023800 	.word	0x40023800
 8004660:	40007000 	.word	0x40007000
 8004664:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004668:	4b1b      	ldr	r3, [pc, #108]	; (80046d8 <HAL_RCC_OscConfig+0x4ec>)
 800466a:	685b      	ldr	r3, [r3, #4]
 800466c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	699b      	ldr	r3, [r3, #24]
 8004672:	2b01      	cmp	r3, #1
 8004674:	d028      	beq.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004680:	429a      	cmp	r2, r3
 8004682:	d121      	bne.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800468e:	429a      	cmp	r2, r3
 8004690:	d11a      	bne.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004692:	68fa      	ldr	r2, [r7, #12]
 8004694:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004698:	4013      	ands	r3, r2
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800469e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d111      	bne.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046ae:	085b      	lsrs	r3, r3, #1
 80046b0:	3b01      	subs	r3, #1
 80046b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d107      	bne.n	80046c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d001      	beq.n	80046cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80046c8:	2301      	movs	r3, #1
 80046ca:	e000      	b.n	80046ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80046cc:	2300      	movs	r3, #0
}
 80046ce:	4618      	mov	r0, r3
 80046d0:	3718      	adds	r7, #24
 80046d2:	46bd      	mov	sp, r7
 80046d4:	bd80      	pop	{r7, pc}
 80046d6:	bf00      	nop
 80046d8:	40023800 	.word	0x40023800

080046dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b084      	sub	sp, #16
 80046e0:	af00      	add	r7, sp, #0
 80046e2:	6078      	str	r0, [r7, #4]
 80046e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d101      	bne.n	80046f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80046ec:	2301      	movs	r3, #1
 80046ee:	e0cc      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80046f0:	4b68      	ldr	r3, [pc, #416]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	f003 0307 	and.w	r3, r3, #7
 80046f8:	683a      	ldr	r2, [r7, #0]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	d90c      	bls.n	8004718 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fe:	4b65      	ldr	r3, [pc, #404]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 8004700:	683a      	ldr	r2, [r7, #0]
 8004702:	b2d2      	uxtb	r2, r2
 8004704:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004706:	4b63      	ldr	r3, [pc, #396]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f003 0307 	and.w	r3, r3, #7
 800470e:	683a      	ldr	r2, [r7, #0]
 8004710:	429a      	cmp	r2, r3
 8004712:	d001      	beq.n	8004718 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	e0b8      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 0302 	and.w	r3, r3, #2
 8004720:	2b00      	cmp	r3, #0
 8004722:	d020      	beq.n	8004766 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f003 0304 	and.w	r3, r3, #4
 800472c:	2b00      	cmp	r3, #0
 800472e:	d005      	beq.n	800473c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004730:	4b59      	ldr	r3, [pc, #356]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004732:	689b      	ldr	r3, [r3, #8]
 8004734:	4a58      	ldr	r2, [pc, #352]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004736:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800473a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	f003 0308 	and.w	r3, r3, #8
 8004744:	2b00      	cmp	r3, #0
 8004746:	d005      	beq.n	8004754 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004748:	4b53      	ldr	r3, [pc, #332]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800474a:	689b      	ldr	r3, [r3, #8]
 800474c:	4a52      	ldr	r2, [pc, #328]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004752:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004754:	4b50      	ldr	r3, [pc, #320]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004756:	689b      	ldr	r3, [r3, #8]
 8004758:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	689b      	ldr	r3, [r3, #8]
 8004760:	494d      	ldr	r1, [pc, #308]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004762:	4313      	orrs	r3, r2
 8004764:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0301 	and.w	r3, r3, #1
 800476e:	2b00      	cmp	r3, #0
 8004770:	d044      	beq.n	80047fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d107      	bne.n	800478a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800477a:	4b47      	ldr	r3, [pc, #284]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d119      	bne.n	80047ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004786:	2301      	movs	r3, #1
 8004788:	e07f      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	2b02      	cmp	r3, #2
 8004790:	d003      	beq.n	800479a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004796:	2b03      	cmp	r3, #3
 8004798:	d107      	bne.n	80047aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800479a:	4b3f      	ldr	r3, [pc, #252]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d109      	bne.n	80047ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e06f      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047aa:	4b3b      	ldr	r3, [pc, #236]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0302 	and.w	r3, r3, #2
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e067      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80047ba:	4b37      	ldr	r3, [pc, #220]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f023 0203 	bic.w	r2, r3, #3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	685b      	ldr	r3, [r3, #4]
 80047c6:	4934      	ldr	r1, [pc, #208]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80047cc:	f7fc fdc6 	bl	800135c <HAL_GetTick>
 80047d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047d2:	e00a      	b.n	80047ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80047d4:	f7fc fdc2 	bl	800135c <HAL_GetTick>
 80047d8:	4602      	mov	r2, r0
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	1ad3      	subs	r3, r2, r3
 80047de:	f241 3288 	movw	r2, #5000	; 0x1388
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d901      	bls.n	80047ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80047e6:	2303      	movs	r3, #3
 80047e8:	e04f      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80047ea:	4b2b      	ldr	r3, [pc, #172]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 80047ec:	689b      	ldr	r3, [r3, #8]
 80047ee:	f003 020c 	and.w	r2, r3, #12
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	009b      	lsls	r3, r3, #2
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d1eb      	bne.n	80047d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80047fc:	4b25      	ldr	r3, [pc, #148]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f003 0307 	and.w	r3, r3, #7
 8004804:	683a      	ldr	r2, [r7, #0]
 8004806:	429a      	cmp	r2, r3
 8004808:	d20c      	bcs.n	8004824 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800480a:	4b22      	ldr	r3, [pc, #136]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 800480c:	683a      	ldr	r2, [r7, #0]
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004812:	4b20      	ldr	r3, [pc, #128]	; (8004894 <HAL_RCC_ClockConfig+0x1b8>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f003 0307 	and.w	r3, r3, #7
 800481a:	683a      	ldr	r2, [r7, #0]
 800481c:	429a      	cmp	r2, r3
 800481e:	d001      	beq.n	8004824 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004820:	2301      	movs	r3, #1
 8004822:	e032      	b.n	800488a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f003 0304 	and.w	r3, r3, #4
 800482c:	2b00      	cmp	r3, #0
 800482e:	d008      	beq.n	8004842 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004830:	4b19      	ldr	r3, [pc, #100]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004832:	689b      	ldr	r3, [r3, #8]
 8004834:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	68db      	ldr	r3, [r3, #12]
 800483c:	4916      	ldr	r1, [pc, #88]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800483e:	4313      	orrs	r3, r2
 8004840:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	f003 0308 	and.w	r3, r3, #8
 800484a:	2b00      	cmp	r3, #0
 800484c:	d009      	beq.n	8004862 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800484e:	4b12      	ldr	r3, [pc, #72]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	691b      	ldr	r3, [r3, #16]
 800485a:	00db      	lsls	r3, r3, #3
 800485c:	490e      	ldr	r1, [pc, #56]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800485e:	4313      	orrs	r3, r2
 8004860:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004862:	f000 f821 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8004866:	4602      	mov	r2, r0
 8004868:	4b0b      	ldr	r3, [pc, #44]	; (8004898 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	091b      	lsrs	r3, r3, #4
 800486e:	f003 030f 	and.w	r3, r3, #15
 8004872:	490a      	ldr	r1, [pc, #40]	; (800489c <HAL_RCC_ClockConfig+0x1c0>)
 8004874:	5ccb      	ldrb	r3, [r1, r3]
 8004876:	fa22 f303 	lsr.w	r3, r2, r3
 800487a:	4a09      	ldr	r2, [pc, #36]	; (80048a0 <HAL_RCC_ClockConfig+0x1c4>)
 800487c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800487e:	4b09      	ldr	r3, [pc, #36]	; (80048a4 <HAL_RCC_ClockConfig+0x1c8>)
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	4618      	mov	r0, r3
 8004884:	f7fc fd26 	bl	80012d4 <HAL_InitTick>

  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3710      	adds	r7, #16
 800488e:	46bd      	mov	sp, r7
 8004890:	bd80      	pop	{r7, pc}
 8004892:	bf00      	nop
 8004894:	40023c00 	.word	0x40023c00
 8004898:	40023800 	.word	0x40023800
 800489c:	08008fc0 	.word	0x08008fc0
 80048a0:	20000000 	.word	0x20000000
 80048a4:	20000004 	.word	0x20000004

080048a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80048ac:	b094      	sub	sp, #80	; 0x50
 80048ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80048b0:	2300      	movs	r3, #0
 80048b2:	647b      	str	r3, [r7, #68]	; 0x44
 80048b4:	2300      	movs	r3, #0
 80048b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048b8:	2300      	movs	r3, #0
 80048ba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80048bc:	2300      	movs	r3, #0
 80048be:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80048c0:	4b79      	ldr	r3, [pc, #484]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 030c 	and.w	r3, r3, #12
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d00d      	beq.n	80048e8 <HAL_RCC_GetSysClockFreq+0x40>
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	f200 80e1 	bhi.w	8004a94 <HAL_RCC_GetSysClockFreq+0x1ec>
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d002      	beq.n	80048dc <HAL_RCC_GetSysClockFreq+0x34>
 80048d6:	2b04      	cmp	r3, #4
 80048d8:	d003      	beq.n	80048e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80048da:	e0db      	b.n	8004a94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80048dc:	4b73      	ldr	r3, [pc, #460]	; (8004aac <HAL_RCC_GetSysClockFreq+0x204>)
 80048de:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80048e0:	e0db      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80048e2:	4b73      	ldr	r3, [pc, #460]	; (8004ab0 <HAL_RCC_GetSysClockFreq+0x208>)
 80048e4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048e6:	e0d8      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80048e8:	4b6f      	ldr	r3, [pc, #444]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048ea:	685b      	ldr	r3, [r3, #4]
 80048ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048f0:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80048f2:	4b6d      	ldr	r3, [pc, #436]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80048f4:	685b      	ldr	r3, [r3, #4]
 80048f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d063      	beq.n	80049c6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80048fe:	4b6a      	ldr	r3, [pc, #424]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	099b      	lsrs	r3, r3, #6
 8004904:	2200      	movs	r2, #0
 8004906:	63bb      	str	r3, [r7, #56]	; 0x38
 8004908:	63fa      	str	r2, [r7, #60]	; 0x3c
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004910:	633b      	str	r3, [r7, #48]	; 0x30
 8004912:	2300      	movs	r3, #0
 8004914:	637b      	str	r3, [r7, #52]	; 0x34
 8004916:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800491a:	4622      	mov	r2, r4
 800491c:	462b      	mov	r3, r5
 800491e:	f04f 0000 	mov.w	r0, #0
 8004922:	f04f 0100 	mov.w	r1, #0
 8004926:	0159      	lsls	r1, r3, #5
 8004928:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800492c:	0150      	lsls	r0, r2, #5
 800492e:	4602      	mov	r2, r0
 8004930:	460b      	mov	r3, r1
 8004932:	4621      	mov	r1, r4
 8004934:	1a51      	subs	r1, r2, r1
 8004936:	6139      	str	r1, [r7, #16]
 8004938:	4629      	mov	r1, r5
 800493a:	eb63 0301 	sbc.w	r3, r3, r1
 800493e:	617b      	str	r3, [r7, #20]
 8004940:	f04f 0200 	mov.w	r2, #0
 8004944:	f04f 0300 	mov.w	r3, #0
 8004948:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800494c:	4659      	mov	r1, fp
 800494e:	018b      	lsls	r3, r1, #6
 8004950:	4651      	mov	r1, sl
 8004952:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004956:	4651      	mov	r1, sl
 8004958:	018a      	lsls	r2, r1, #6
 800495a:	4651      	mov	r1, sl
 800495c:	ebb2 0801 	subs.w	r8, r2, r1
 8004960:	4659      	mov	r1, fp
 8004962:	eb63 0901 	sbc.w	r9, r3, r1
 8004966:	f04f 0200 	mov.w	r2, #0
 800496a:	f04f 0300 	mov.w	r3, #0
 800496e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004972:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004976:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800497a:	4690      	mov	r8, r2
 800497c:	4699      	mov	r9, r3
 800497e:	4623      	mov	r3, r4
 8004980:	eb18 0303 	adds.w	r3, r8, r3
 8004984:	60bb      	str	r3, [r7, #8]
 8004986:	462b      	mov	r3, r5
 8004988:	eb49 0303 	adc.w	r3, r9, r3
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	f04f 0200 	mov.w	r2, #0
 8004992:	f04f 0300 	mov.w	r3, #0
 8004996:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800499a:	4629      	mov	r1, r5
 800499c:	024b      	lsls	r3, r1, #9
 800499e:	4621      	mov	r1, r4
 80049a0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80049a4:	4621      	mov	r1, r4
 80049a6:	024a      	lsls	r2, r1, #9
 80049a8:	4610      	mov	r0, r2
 80049aa:	4619      	mov	r1, r3
 80049ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049ae:	2200      	movs	r2, #0
 80049b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80049b2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80049b4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80049b8:	f7fb fc62 	bl	8000280 <__aeabi_uldivmod>
 80049bc:	4602      	mov	r2, r0
 80049be:	460b      	mov	r3, r1
 80049c0:	4613      	mov	r3, r2
 80049c2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049c4:	e058      	b.n	8004a78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80049c6:	4b38      	ldr	r3, [pc, #224]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	099b      	lsrs	r3, r3, #6
 80049cc:	2200      	movs	r2, #0
 80049ce:	4618      	mov	r0, r3
 80049d0:	4611      	mov	r1, r2
 80049d2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80049d6:	623b      	str	r3, [r7, #32]
 80049d8:	2300      	movs	r3, #0
 80049da:	627b      	str	r3, [r7, #36]	; 0x24
 80049dc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80049e0:	4642      	mov	r2, r8
 80049e2:	464b      	mov	r3, r9
 80049e4:	f04f 0000 	mov.w	r0, #0
 80049e8:	f04f 0100 	mov.w	r1, #0
 80049ec:	0159      	lsls	r1, r3, #5
 80049ee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80049f2:	0150      	lsls	r0, r2, #5
 80049f4:	4602      	mov	r2, r0
 80049f6:	460b      	mov	r3, r1
 80049f8:	4641      	mov	r1, r8
 80049fa:	ebb2 0a01 	subs.w	sl, r2, r1
 80049fe:	4649      	mov	r1, r9
 8004a00:	eb63 0b01 	sbc.w	fp, r3, r1
 8004a04:	f04f 0200 	mov.w	r2, #0
 8004a08:	f04f 0300 	mov.w	r3, #0
 8004a0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004a10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004a14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004a18:	ebb2 040a 	subs.w	r4, r2, sl
 8004a1c:	eb63 050b 	sbc.w	r5, r3, fp
 8004a20:	f04f 0200 	mov.w	r2, #0
 8004a24:	f04f 0300 	mov.w	r3, #0
 8004a28:	00eb      	lsls	r3, r5, #3
 8004a2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a2e:	00e2      	lsls	r2, r4, #3
 8004a30:	4614      	mov	r4, r2
 8004a32:	461d      	mov	r5, r3
 8004a34:	4643      	mov	r3, r8
 8004a36:	18e3      	adds	r3, r4, r3
 8004a38:	603b      	str	r3, [r7, #0]
 8004a3a:	464b      	mov	r3, r9
 8004a3c:	eb45 0303 	adc.w	r3, r5, r3
 8004a40:	607b      	str	r3, [r7, #4]
 8004a42:	f04f 0200 	mov.w	r2, #0
 8004a46:	f04f 0300 	mov.w	r3, #0
 8004a4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004a4e:	4629      	mov	r1, r5
 8004a50:	028b      	lsls	r3, r1, #10
 8004a52:	4621      	mov	r1, r4
 8004a54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004a58:	4621      	mov	r1, r4
 8004a5a:	028a      	lsls	r2, r1, #10
 8004a5c:	4610      	mov	r0, r2
 8004a5e:	4619      	mov	r1, r3
 8004a60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a62:	2200      	movs	r2, #0
 8004a64:	61bb      	str	r3, [r7, #24]
 8004a66:	61fa      	str	r2, [r7, #28]
 8004a68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a6c:	f7fb fc08 	bl	8000280 <__aeabi_uldivmod>
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	4613      	mov	r3, r2
 8004a76:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004a78:	4b0b      	ldr	r3, [pc, #44]	; (8004aa8 <HAL_RCC_GetSysClockFreq+0x200>)
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	0c1b      	lsrs	r3, r3, #16
 8004a7e:	f003 0303 	and.w	r3, r3, #3
 8004a82:	3301      	adds	r3, #1
 8004a84:	005b      	lsls	r3, r3, #1
 8004a86:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004a88:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a92:	e002      	b.n	8004a9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004a94:	4b05      	ldr	r3, [pc, #20]	; (8004aac <HAL_RCC_GetSysClockFreq+0x204>)
 8004a96:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004a98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004a9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3750      	adds	r7, #80	; 0x50
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004aa6:	bf00      	nop
 8004aa8:	40023800 	.word	0x40023800
 8004aac:	00f42400 	.word	0x00f42400
 8004ab0:	007a1200 	.word	0x007a1200

08004ab4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004ab8:	4b03      	ldr	r3, [pc, #12]	; (8004ac8 <HAL_RCC_GetHCLKFreq+0x14>)
 8004aba:	681b      	ldr	r3, [r3, #0]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop
 8004ac8:	20000000 	.word	0x20000000

08004acc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004ad0:	f7ff fff0 	bl	8004ab4 <HAL_RCC_GetHCLKFreq>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	4b05      	ldr	r3, [pc, #20]	; (8004aec <HAL_RCC_GetPCLK1Freq+0x20>)
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	0a9b      	lsrs	r3, r3, #10
 8004adc:	f003 0307 	and.w	r3, r3, #7
 8004ae0:	4903      	ldr	r1, [pc, #12]	; (8004af0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004ae2:	5ccb      	ldrb	r3, [r1, r3]
 8004ae4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	bd80      	pop	{r7, pc}
 8004aec:	40023800 	.word	0x40023800
 8004af0:	08008fd0 	.word	0x08008fd0

08004af4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b086      	sub	sp, #24
 8004af8:	af00      	add	r7, sp, #0
 8004afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004afc:	2300      	movs	r3, #0
 8004afe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	f003 0301 	and.w	r3, r3, #1
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d105      	bne.n	8004b1c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d035      	beq.n	8004b88 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004b1c:	4b62      	ldr	r3, [pc, #392]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b1e:	2200      	movs	r2, #0
 8004b20:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b22:	f7fc fc1b 	bl	800135c <HAL_GetTick>
 8004b26:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b28:	e008      	b.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b2a:	f7fc fc17 	bl	800135c <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	697b      	ldr	r3, [r7, #20]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e0b0      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004b3c:	4b5b      	ldr	r3, [pc, #364]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1f0      	bne.n	8004b2a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	019a      	lsls	r2, r3, #6
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	071b      	lsls	r3, r3, #28
 8004b54:	4955      	ldr	r1, [pc, #340]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b56:	4313      	orrs	r3, r2
 8004b58:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004b5c:	4b52      	ldr	r3, [pc, #328]	; (8004ca8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004b5e:	2201      	movs	r2, #1
 8004b60:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004b62:	f7fc fbfb 	bl	800135c <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b68:	e008      	b.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8004b6a:	f7fc fbf7 	bl	800135c <HAL_GetTick>
 8004b6e:	4602      	mov	r2, r0
 8004b70:	697b      	ldr	r3, [r7, #20]
 8004b72:	1ad3      	subs	r3, r2, r3
 8004b74:	2b02      	cmp	r3, #2
 8004b76:	d901      	bls.n	8004b7c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004b78:	2303      	movs	r3, #3
 8004b7a:	e090      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004b7c:	4b4b      	ldr	r3, [pc, #300]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d0f0      	beq.n	8004b6a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	f000 8083 	beq.w	8004c9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004b96:	2300      	movs	r3, #0
 8004b98:	60fb      	str	r3, [r7, #12]
 8004b9a:	4b44      	ldr	r3, [pc, #272]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9e:	4a43      	ldr	r2, [pc, #268]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ba4:	6413      	str	r3, [r2, #64]	; 0x40
 8004ba6:	4b41      	ldr	r3, [pc, #260]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bae:	60fb      	str	r3, [r7, #12]
 8004bb0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004bb2:	4b3f      	ldr	r3, [pc, #252]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a3e      	ldr	r2, [pc, #248]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bbc:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004bbe:	f7fc fbcd 	bl	800135c <HAL_GetTick>
 8004bc2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004bc4:	e008      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8004bc6:	f7fc fbc9 	bl	800135c <HAL_GetTick>
 8004bca:	4602      	mov	r2, r0
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	1ad3      	subs	r3, r2, r3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d901      	bls.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e062      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004bd8:	4b35      	ldr	r3, [pc, #212]	; (8004cb0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d0f0      	beq.n	8004bc6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004be4:	4b31      	ldr	r3, [pc, #196]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004be6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004be8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bec:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004bee:	693b      	ldr	r3, [r7, #16]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d02f      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	68db      	ldr	r3, [r3, #12]
 8004bf8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	429a      	cmp	r2, r3
 8004c00:	d028      	beq.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004c02:	4b2a      	ldr	r3, [pc, #168]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c0a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004c0c:	4b29      	ldr	r3, [pc, #164]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004c12:	4b28      	ldr	r3, [pc, #160]	; (8004cb4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004c14:	2200      	movs	r2, #0
 8004c16:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8004c18:	4a24      	ldr	r2, [pc, #144]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c1a:	693b      	ldr	r3, [r7, #16]
 8004c1c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004c1e:	4b23      	ldr	r3, [pc, #140]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c22:	f003 0301 	and.w	r3, r3, #1
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d114      	bne.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8004c2a:	f7fc fb97 	bl	800135c <HAL_GetTick>
 8004c2e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c30:	e00a      	b.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004c32:	f7fc fb93 	bl	800135c <HAL_GetTick>
 8004c36:	4602      	mov	r2, r0
 8004c38:	697b      	ldr	r3, [r7, #20]
 8004c3a:	1ad3      	subs	r3, r2, r3
 8004c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d901      	bls.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	e02a      	b.n	8004c9e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c48:	4b18      	ldr	r3, [pc, #96]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4c:	f003 0302 	and.w	r3, r3, #2
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d0ee      	beq.n	8004c32 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	68db      	ldr	r3, [r3, #12]
 8004c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004c5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c60:	d10d      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8004c62:	4b12      	ldr	r3, [pc, #72]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8004c72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004c76:	490d      	ldr	r1, [pc, #52]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	608b      	str	r3, [r1, #8]
 8004c7c:	e005      	b.n	8004c8a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004c7e:	4b0b      	ldr	r3, [pc, #44]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c80:	689b      	ldr	r3, [r3, #8]
 8004c82:	4a0a      	ldr	r2, [pc, #40]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c84:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8004c88:	6093      	str	r3, [r2, #8]
 8004c8a:	4b08      	ldr	r3, [pc, #32]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c8c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c96:	4905      	ldr	r1, [pc, #20]	; (8004cac <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004c98:	4313      	orrs	r3, r2
 8004c9a:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004c9c:	2300      	movs	r3, #0
}
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	3718      	adds	r7, #24
 8004ca2:	46bd      	mov	sp, r7
 8004ca4:	bd80      	pop	{r7, pc}
 8004ca6:	bf00      	nop
 8004ca8:	42470068 	.word	0x42470068
 8004cac:	40023800 	.word	0x40023800
 8004cb0:	40007000 	.word	0x40007000
 8004cb4:	42470e40 	.word	0x42470e40

08004cb8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004cb8:	b480      	push	{r7}
 8004cba:	b087      	sub	sp, #28
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d13e      	bne.n	8004d54 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8004cd6:	4b23      	ldr	r3, [pc, #140]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cde:	60fb      	str	r3, [r7, #12]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d005      	beq.n	8004cf2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d12f      	bne.n	8004d4c <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004cec:	4b1e      	ldr	r3, [pc, #120]	; (8004d68 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004cee:	617b      	str	r3, [r7, #20]
          break;
 8004cf0:	e02f      	b.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004cf2:	4b1c      	ldr	r3, [pc, #112]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004cf4:	685b      	ldr	r3, [r3, #4]
 8004cf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004cfe:	d108      	bne.n	8004d12 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d00:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d02:	685b      	ldr	r3, [r3, #4]
 8004d04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d08:	4a18      	ldr	r2, [pc, #96]	; (8004d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8004d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0e:	613b      	str	r3, [r7, #16]
 8004d10:	e007      	b.n	8004d22 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004d12:	4b14      	ldr	r3, [pc, #80]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d14:	685b      	ldr	r3, [r3, #4]
 8004d16:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d1a:	4a15      	ldr	r2, [pc, #84]	; (8004d70 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004d22:	4b10      	ldr	r3, [pc, #64]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d28:	099b      	lsrs	r3, r3, #6
 8004d2a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	fb02 f303 	mul.w	r3, r2, r3
 8004d34:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8004d36:	4b0b      	ldr	r3, [pc, #44]	; (8004d64 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004d38:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004d3c:	0f1b      	lsrs	r3, r3, #28
 8004d3e:	f003 0307 	and.w	r3, r3, #7
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d48:	617b      	str	r3, [r7, #20]
          break;
 8004d4a:	e002      	b.n	8004d52 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	617b      	str	r3, [r7, #20]
          break;
 8004d50:	bf00      	nop
        }
      }
      break;
 8004d52:	bf00      	nop
    }
  }
  return frequency;
 8004d54:	697b      	ldr	r3, [r7, #20]
}
 8004d56:	4618      	mov	r0, r3
 8004d58:	371c      	adds	r7, #28
 8004d5a:	46bd      	mov	sp, r7
 8004d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	40023800 	.word	0x40023800
 8004d68:	00bb8000 	.word	0x00bb8000
 8004d6c:	007a1200 	.word	0x007a1200
 8004d70:	00f42400 	.word	0x00f42400

08004d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004d74:	b580      	push	{r7, lr}
 8004d76:	b082      	sub	sp, #8
 8004d78:	af00      	add	r7, sp, #0
 8004d7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004d82:	2301      	movs	r3, #1
 8004d84:	e07b      	b.n	8004e7e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d108      	bne.n	8004da0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d96:	d009      	beq.n	8004dac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	61da      	str	r2, [r3, #28]
 8004d9e:	e005      	b.n	8004dac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2200      	movs	r2, #0
 8004da4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2200      	movs	r2, #0
 8004daa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2200      	movs	r2, #0
 8004db0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d106      	bne.n	8004dcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7fc f952 	bl	8001070 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2202      	movs	r2, #2
 8004dd0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	681a      	ldr	r2, [r3, #0]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004de2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	685b      	ldr	r3, [r3, #4]
 8004de8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	689b      	ldr	r3, [r3, #8]
 8004df0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004df4:	431a      	orrs	r2, r3
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68db      	ldr	r3, [r3, #12]
 8004dfa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004dfe:	431a      	orrs	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	691b      	ldr	r3, [r3, #16]
 8004e04:	f003 0302 	and.w	r3, r3, #2
 8004e08:	431a      	orrs	r2, r3
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	f003 0301 	and.w	r3, r3, #1
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004e1c:	431a      	orrs	r2, r3
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69db      	ldr	r3, [r3, #28]
 8004e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004e26:	431a      	orrs	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e30:	ea42 0103 	orr.w	r1, r2, r3
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e38:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	430a      	orrs	r2, r1
 8004e42:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	699b      	ldr	r3, [r3, #24]
 8004e48:	0c1b      	lsrs	r3, r3, #16
 8004e4a:	f003 0104 	and.w	r1, r3, #4
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	f003 0210 	and.w	r2, r3, #16
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	430a      	orrs	r2, r1
 8004e5c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	69da      	ldr	r2, [r3, #28]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e6c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2200      	movs	r2, #0
 8004e72:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2201      	movs	r2, #1
 8004e78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004e7c:	2300      	movs	r3, #0
}
 8004e7e:	4618      	mov	r0, r3
 8004e80:	3708      	adds	r7, #8
 8004e82:	46bd      	mov	sp, r7
 8004e84:	bd80      	pop	{r7, pc}

08004e86 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e86:	b580      	push	{r7, lr}
 8004e88:	b082      	sub	sp, #8
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d101      	bne.n	8004e98 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e041      	b.n	8004f1c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e9e:	b2db      	uxtb	r3, r3
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d106      	bne.n	8004eb2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eac:	6878      	ldr	r0, [r7, #4]
 8004eae:	f7fc f927 	bl	8001100 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681a      	ldr	r2, [r3, #0]
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3304      	adds	r3, #4
 8004ec2:	4619      	mov	r1, r3
 8004ec4:	4610      	mov	r0, r2
 8004ec6:	f000 f82d 	bl	8004f24 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	2201      	movs	r2, #1
 8004ece:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	2201      	movs	r2, #1
 8004ed6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2201      	movs	r2, #1
 8004ede:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2201      	movs	r2, #1
 8004eee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2201      	movs	r2, #1
 8004ef6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2201      	movs	r2, #1
 8004f06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2201      	movs	r2, #1
 8004f0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2201      	movs	r2, #1
 8004f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f1a:	2300      	movs	r3, #0
}
 8004f1c:	4618      	mov	r0, r3
 8004f1e:	3708      	adds	r7, #8
 8004f20:	46bd      	mov	sp, r7
 8004f22:	bd80      	pop	{r7, pc}

08004f24 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	4a40      	ldr	r2, [pc, #256]	; (8005038 <TIM_Base_SetConfig+0x114>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d013      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f42:	d00f      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	4a3d      	ldr	r2, [pc, #244]	; (800503c <TIM_Base_SetConfig+0x118>)
 8004f48:	4293      	cmp	r3, r2
 8004f4a:	d00b      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	4a3c      	ldr	r2, [pc, #240]	; (8005040 <TIM_Base_SetConfig+0x11c>)
 8004f50:	4293      	cmp	r3, r2
 8004f52:	d007      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	4a3b      	ldr	r2, [pc, #236]	; (8005044 <TIM_Base_SetConfig+0x120>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d003      	beq.n	8004f64 <TIM_Base_SetConfig+0x40>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	4a3a      	ldr	r2, [pc, #232]	; (8005048 <TIM_Base_SetConfig+0x124>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d108      	bne.n	8004f76 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f6a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	68fa      	ldr	r2, [r7, #12]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	4a2f      	ldr	r2, [pc, #188]	; (8005038 <TIM_Base_SetConfig+0x114>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d02b      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f84:	d027      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	4a2c      	ldr	r2, [pc, #176]	; (800503c <TIM_Base_SetConfig+0x118>)
 8004f8a:	4293      	cmp	r3, r2
 8004f8c:	d023      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	4a2b      	ldr	r2, [pc, #172]	; (8005040 <TIM_Base_SetConfig+0x11c>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d01f      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	4a2a      	ldr	r2, [pc, #168]	; (8005044 <TIM_Base_SetConfig+0x120>)
 8004f9a:	4293      	cmp	r3, r2
 8004f9c:	d01b      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	4a29      	ldr	r2, [pc, #164]	; (8005048 <TIM_Base_SetConfig+0x124>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d017      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a28      	ldr	r2, [pc, #160]	; (800504c <TIM_Base_SetConfig+0x128>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d013      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a27      	ldr	r2, [pc, #156]	; (8005050 <TIM_Base_SetConfig+0x12c>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00f      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a26      	ldr	r2, [pc, #152]	; (8005054 <TIM_Base_SetConfig+0x130>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d00b      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a25      	ldr	r2, [pc, #148]	; (8005058 <TIM_Base_SetConfig+0x134>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d007      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a24      	ldr	r2, [pc, #144]	; (800505c <TIM_Base_SetConfig+0x138>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d003      	beq.n	8004fd6 <TIM_Base_SetConfig+0xb2>
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	4a23      	ldr	r2, [pc, #140]	; (8005060 <TIM_Base_SetConfig+0x13c>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d108      	bne.n	8004fe8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fdc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	68fa      	ldr	r2, [r7, #12]
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	4313      	orrs	r3, r2
 8004ff4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	68fa      	ldr	r2, [r7, #12]
 8004ffa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	689a      	ldr	r2, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a0a      	ldr	r2, [pc, #40]	; (8005038 <TIM_Base_SetConfig+0x114>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d003      	beq.n	800501c <TIM_Base_SetConfig+0xf8>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a0c      	ldr	r2, [pc, #48]	; (8005048 <TIM_Base_SetConfig+0x124>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d103      	bne.n	8005024 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	691a      	ldr	r2, [r3, #16]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	615a      	str	r2, [r3, #20]
}
 800502a:	bf00      	nop
 800502c:	3714      	adds	r7, #20
 800502e:	46bd      	mov	sp, r7
 8005030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005034:	4770      	bx	lr
 8005036:	bf00      	nop
 8005038:	40010000 	.word	0x40010000
 800503c:	40000400 	.word	0x40000400
 8005040:	40000800 	.word	0x40000800
 8005044:	40000c00 	.word	0x40000c00
 8005048:	40010400 	.word	0x40010400
 800504c:	40014000 	.word	0x40014000
 8005050:	40014400 	.word	0x40014400
 8005054:	40014800 	.word	0x40014800
 8005058:	40001800 	.word	0x40001800
 800505c:	40001c00 	.word	0x40001c00
 8005060:	40002000 	.word	0x40002000

08005064 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005064:	b084      	sub	sp, #16
 8005066:	b580      	push	{r7, lr}
 8005068:	b084      	sub	sp, #16
 800506a:	af00      	add	r7, sp, #0
 800506c:	6078      	str	r0, [r7, #4]
 800506e:	f107 001c 	add.w	r0, r7, #28
 8005072:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005078:	2b01      	cmp	r3, #1
 800507a:	d122      	bne.n	80050c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005080:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	68db      	ldr	r3, [r3, #12]
 800508c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005090:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005094:	687a      	ldr	r2, [r7, #4]
 8005096:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80050a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d105      	bne.n	80050b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050b6:	6878      	ldr	r0, [r7, #4]
 80050b8:	f000 f9c0 	bl	800543c <USB_CoreReset>
 80050bc:	4603      	mov	r3, r0
 80050be:	73fb      	strb	r3, [r7, #15]
 80050c0:	e01a      	b.n	80050f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	68db      	ldr	r3, [r3, #12]
 80050c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80050ce:	6878      	ldr	r0, [r7, #4]
 80050d0:	f000 f9b4 	bl	800543c <USB_CoreReset>
 80050d4:	4603      	mov	r3, r0
 80050d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80050d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d106      	bne.n	80050ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	639a      	str	r2, [r3, #56]	; 0x38
 80050ea:	e005      	b.n	80050f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80050f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050fa:	2b01      	cmp	r3, #1
 80050fc:	d10b      	bne.n	8005116 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f043 0206 	orr.w	r2, r3, #6
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	689b      	ldr	r3, [r3, #8]
 800510e:	f043 0220 	orr.w	r2, r3, #32
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005116:	7bfb      	ldrb	r3, [r7, #15]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005122:	b004      	add	sp, #16
 8005124:	4770      	bx	lr

08005126 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005126:	b480      	push	{r7}
 8005128:	b083      	sub	sp, #12
 800512a:	af00      	add	r7, sp, #0
 800512c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	f043 0201 	orr.w	r2, r3, #1
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800513a:	2300      	movs	r3, #0
}
 800513c:	4618      	mov	r0, r3
 800513e:	370c      	adds	r7, #12
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005148:	b480      	push	{r7}
 800514a:	b083      	sub	sp, #12
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f023 0201 	bic.w	r2, r3, #1
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800515c:	2300      	movs	r3, #0
}
 800515e:	4618      	mov	r0, r3
 8005160:	370c      	adds	r7, #12
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800516a:	b580      	push	{r7, lr}
 800516c:	b084      	sub	sp, #16
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	460b      	mov	r3, r1
 8005174:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005176:	2300      	movs	r3, #0
 8005178:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005186:	78fb      	ldrb	r3, [r7, #3]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d115      	bne.n	80051b8 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005198:	2001      	movs	r0, #1
 800519a:	f7fc f8eb 	bl	8001374 <HAL_Delay>
      ms++;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3301      	adds	r3, #1
 80051a2:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 f93a 	bl	800541e <USB_GetMode>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d01e      	beq.n	80051ee <USB_SetCurrentMode+0x84>
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	2b31      	cmp	r3, #49	; 0x31
 80051b4:	d9f0      	bls.n	8005198 <USB_SetCurrentMode+0x2e>
 80051b6:	e01a      	b.n	80051ee <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80051b8:	78fb      	ldrb	r3, [r7, #3]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d115      	bne.n	80051ea <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80051ca:	2001      	movs	r0, #1
 80051cc:	f7fc f8d2 	bl	8001374 <HAL_Delay>
      ms++;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	3301      	adds	r3, #1
 80051d4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80051d6:	6878      	ldr	r0, [r7, #4]
 80051d8:	f000 f921 	bl	800541e <USB_GetMode>
 80051dc:	4603      	mov	r3, r0
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <USB_SetCurrentMode+0x84>
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2b31      	cmp	r3, #49	; 0x31
 80051e6:	d9f0      	bls.n	80051ca <USB_SetCurrentMode+0x60>
 80051e8:	e001      	b.n	80051ee <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e005      	b.n	80051fa <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2b32      	cmp	r3, #50	; 0x32
 80051f2:	d101      	bne.n	80051f8 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80051f4:	2301      	movs	r3, #1
 80051f6:	e000      	b.n	80051fa <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80051f8:	2300      	movs	r3, #0
}
 80051fa:	4618      	mov	r0, r3
 80051fc:	3710      	adds	r7, #16
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
	...

08005204 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800520e:	2300      	movs	r3, #0
 8005210:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	3301      	adds	r3, #1
 8005216:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	4a13      	ldr	r2, [pc, #76]	; (8005268 <USB_FlushTxFifo+0x64>)
 800521c:	4293      	cmp	r3, r2
 800521e:	d901      	bls.n	8005224 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e01b      	b.n	800525c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	691b      	ldr	r3, [r3, #16]
 8005228:	2b00      	cmp	r3, #0
 800522a:	daf2      	bge.n	8005212 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800522c:	2300      	movs	r3, #0
 800522e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	019b      	lsls	r3, r3, #6
 8005234:	f043 0220 	orr.w	r2, r3, #32
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	3301      	adds	r3, #1
 8005240:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	4a08      	ldr	r2, [pc, #32]	; (8005268 <USB_FlushTxFifo+0x64>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d901      	bls.n	800524e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e006      	b.n	800525c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	691b      	ldr	r3, [r3, #16]
 8005252:	f003 0320 	and.w	r3, r3, #32
 8005256:	2b20      	cmp	r3, #32
 8005258:	d0f0      	beq.n	800523c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800525a:	2300      	movs	r3, #0
}
 800525c:	4618      	mov	r0, r3
 800525e:	3714      	adds	r7, #20
 8005260:	46bd      	mov	sp, r7
 8005262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005266:	4770      	bx	lr
 8005268:	00030d40 	.word	0x00030d40

0800526c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800526c:	b480      	push	{r7}
 800526e:	b085      	sub	sp, #20
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005274:	2300      	movs	r3, #0
 8005276:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	3301      	adds	r3, #1
 800527c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	4a11      	ldr	r2, [pc, #68]	; (80052c8 <USB_FlushRxFifo+0x5c>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d901      	bls.n	800528a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e018      	b.n	80052bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	daf2      	bge.n	8005278 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005292:	2300      	movs	r3, #0
 8005294:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2210      	movs	r2, #16
 800529a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	4a08      	ldr	r2, [pc, #32]	; (80052c8 <USB_FlushRxFifo+0x5c>)
 80052a6:	4293      	cmp	r3, r2
 80052a8:	d901      	bls.n	80052ae <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e006      	b.n	80052bc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	2b10      	cmp	r3, #16
 80052b8:	d0f0      	beq.n	800529c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80052ba:	2300      	movs	r3, #0
}
 80052bc:	4618      	mov	r0, r3
 80052be:	3714      	adds	r7, #20
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr
 80052c8:	00030d40 	.word	0x00030d40

080052cc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80052cc:	b480      	push	{r7}
 80052ce:	b089      	sub	sp, #36	; 0x24
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	4611      	mov	r1, r2
 80052d8:	461a      	mov	r2, r3
 80052da:	460b      	mov	r3, r1
 80052dc:	71fb      	strb	r3, [r7, #7]
 80052de:	4613      	mov	r3, r2
 80052e0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80052e6:	68bb      	ldr	r3, [r7, #8]
 80052e8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80052ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d123      	bne.n	800533a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80052f2:	88bb      	ldrh	r3, [r7, #4]
 80052f4:	3303      	adds	r3, #3
 80052f6:	089b      	lsrs	r3, r3, #2
 80052f8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80052fa:	2300      	movs	r3, #0
 80052fc:	61bb      	str	r3, [r7, #24]
 80052fe:	e018      	b.n	8005332 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005300:	79fb      	ldrb	r3, [r7, #7]
 8005302:	031a      	lsls	r2, r3, #12
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	4413      	add	r3, r2
 8005308:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800530c:	461a      	mov	r2, r3
 800530e:	69fb      	ldr	r3, [r7, #28]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005314:	69fb      	ldr	r3, [r7, #28]
 8005316:	3301      	adds	r3, #1
 8005318:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	3301      	adds	r3, #1
 800531e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	3301      	adds	r3, #1
 8005324:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	3301      	adds	r3, #1
 800532a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800532c:	69bb      	ldr	r3, [r7, #24]
 800532e:	3301      	adds	r3, #1
 8005330:	61bb      	str	r3, [r7, #24]
 8005332:	69ba      	ldr	r2, [r7, #24]
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	429a      	cmp	r2, r3
 8005338:	d3e2      	bcc.n	8005300 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800533a:	2300      	movs	r3, #0
}
 800533c:	4618      	mov	r0, r3
 800533e:	3724      	adds	r7, #36	; 0x24
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005348:	b480      	push	{r7}
 800534a:	b08b      	sub	sp, #44	; 0x2c
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	4613      	mov	r3, r2
 8005354:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800535a:	68bb      	ldr	r3, [r7, #8]
 800535c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	089b      	lsrs	r3, r3, #2
 8005362:	b29b      	uxth	r3, r3
 8005364:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005366:	88fb      	ldrh	r3, [r7, #6]
 8005368:	f003 0303 	and.w	r3, r3, #3
 800536c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800536e:	2300      	movs	r3, #0
 8005370:	623b      	str	r3, [r7, #32]
 8005372:	e014      	b.n	800539e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800537a:	681a      	ldr	r2, [r3, #0]
 800537c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800537e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005380:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005382:	3301      	adds	r3, #1
 8005384:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005388:	3301      	adds	r3, #1
 800538a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800538c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800538e:	3301      	adds	r3, #1
 8005390:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005394:	3301      	adds	r3, #1
 8005396:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	3301      	adds	r3, #1
 800539c:	623b      	str	r3, [r7, #32]
 800539e:	6a3a      	ldr	r2, [r7, #32]
 80053a0:	697b      	ldr	r3, [r7, #20]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d3e6      	bcc.n	8005374 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80053a6:	8bfb      	ldrh	r3, [r7, #30]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d01e      	beq.n	80053ea <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80053ac:	2300      	movs	r3, #0
 80053ae:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80053b0:	69bb      	ldr	r3, [r7, #24]
 80053b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80053b6:	461a      	mov	r2, r3
 80053b8:	f107 0310 	add.w	r3, r7, #16
 80053bc:	6812      	ldr	r2, [r2, #0]
 80053be:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80053c0:	693a      	ldr	r2, [r7, #16]
 80053c2:	6a3b      	ldr	r3, [r7, #32]
 80053c4:	b2db      	uxtb	r3, r3
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	fa22 f303 	lsr.w	r3, r2, r3
 80053cc:	b2da      	uxtb	r2, r3
 80053ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053d0:	701a      	strb	r2, [r3, #0]
      i++;
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	3301      	adds	r3, #1
 80053d6:	623b      	str	r3, [r7, #32]
      pDest++;
 80053d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053da:	3301      	adds	r3, #1
 80053dc:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80053de:	8bfb      	ldrh	r3, [r7, #30]
 80053e0:	3b01      	subs	r3, #1
 80053e2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80053e4:	8bfb      	ldrh	r3, [r7, #30]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1ea      	bne.n	80053c0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80053ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	372c      	adds	r7, #44	; 0x2c
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	699b      	ldr	r3, [r3, #24]
 800540a:	68fa      	ldr	r2, [r7, #12]
 800540c:	4013      	ands	r3, r2
 800540e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005410:	68fb      	ldr	r3, [r7, #12]
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800541e:	b480      	push	{r7}
 8005420:	b083      	sub	sp, #12
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	695b      	ldr	r3, [r3, #20]
 800542a:	f003 0301 	and.w	r3, r3, #1
}
 800542e:	4618      	mov	r0, r3
 8005430:	370c      	adds	r7, #12
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
	...

0800543c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800543c:	b480      	push	{r7}
 800543e:	b085      	sub	sp, #20
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	3301      	adds	r3, #1
 800544c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	4a13      	ldr	r2, [pc, #76]	; (80054a0 <USB_CoreReset+0x64>)
 8005452:	4293      	cmp	r3, r2
 8005454:	d901      	bls.n	800545a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005456:	2303      	movs	r3, #3
 8005458:	e01b      	b.n	8005492 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	2b00      	cmp	r3, #0
 8005460:	daf2      	bge.n	8005448 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005462:	2300      	movs	r3, #0
 8005464:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f043 0201 	orr.w	r2, r3, #1
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	3301      	adds	r3, #1
 8005476:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	4a09      	ldr	r2, [pc, #36]	; (80054a0 <USB_CoreReset+0x64>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d901      	bls.n	8005484 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005480:	2303      	movs	r3, #3
 8005482:	e006      	b.n	8005492 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	f003 0301 	and.w	r3, r3, #1
 800548c:	2b01      	cmp	r3, #1
 800548e:	d0f0      	beq.n	8005472 <USB_CoreReset+0x36>

  return HAL_OK;
 8005490:	2300      	movs	r3, #0
}
 8005492:	4618      	mov	r0, r3
 8005494:	3714      	adds	r7, #20
 8005496:	46bd      	mov	sp, r7
 8005498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800549c:	4770      	bx	lr
 800549e:	bf00      	nop
 80054a0:	00030d40 	.word	0x00030d40

080054a4 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80054a4:	b084      	sub	sp, #16
 80054a6:	b580      	push	{r7, lr}
 80054a8:	b086      	sub	sp, #24
 80054aa:	af00      	add	r7, sp, #0
 80054ac:	6078      	str	r0, [r7, #4]
 80054ae:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80054b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80054b6:	2300      	movs	r3, #0
 80054b8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80054c4:	461a      	mov	r2, r3
 80054c6:	2300      	movs	r3, #0
 80054c8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054ce:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054da:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054e6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d018      	beq.n	800552c <USB_HostInit+0x88>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80054fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d10a      	bne.n	8005516 <USB_HostInit+0x72>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800550e:	f043 0304 	orr.w	r3, r3, #4
 8005512:	6013      	str	r3, [r2, #0]
 8005514:	e014      	b.n	8005540 <USB_HostInit+0x9c>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68fa      	ldr	r2, [r7, #12]
 8005520:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005524:	f023 0304 	bic.w	r3, r3, #4
 8005528:	6013      	str	r3, [r2, #0]
 800552a:	e009      	b.n	8005540 <USB_HostInit+0x9c>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800553a:	f023 0304 	bic.w	r3, r3, #4
 800553e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005540:	2110      	movs	r1, #16
 8005542:	6878      	ldr	r0, [r7, #4]
 8005544:	f7ff fe5e 	bl	8005204 <USB_FlushTxFifo>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d001      	beq.n	8005552 <USB_HostInit+0xae>
  {
    ret = HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005552:	6878      	ldr	r0, [r7, #4]
 8005554:	f7ff fe8a 	bl	800526c <USB_FlushRxFifo>
 8005558:	4603      	mov	r3, r0
 800555a:	2b00      	cmp	r3, #0
 800555c:	d001      	beq.n	8005562 <USB_HostInit+0xbe>
  {
    ret = HAL_ERROR;
 800555e:	2301      	movs	r3, #1
 8005560:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8005562:	2300      	movs	r3, #0
 8005564:	613b      	str	r3, [r7, #16]
 8005566:	e015      	b.n	8005594 <USB_HostInit+0xf0>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8005568:	693b      	ldr	r3, [r7, #16]
 800556a:	015a      	lsls	r2, r3, #5
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4413      	add	r3, r2
 8005570:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005574:	461a      	mov	r2, r3
 8005576:	f04f 33ff 	mov.w	r3, #4294967295
 800557a:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	015a      	lsls	r2, r3, #5
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	4413      	add	r3, r2
 8005584:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005588:	461a      	mov	r2, r3
 800558a:	2300      	movs	r3, #0
 800558c:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	3301      	adds	r3, #1
 8005592:	613b      	str	r3, [r7, #16]
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	693a      	ldr	r2, [r7, #16]
 8005598:	429a      	cmp	r2, r3
 800559a:	d3e5      	bcc.n	8005568 <USB_HostInit+0xc4>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f04f 32ff 	mov.w	r2, #4294967295
 80055a8:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80055ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d00b      	beq.n	80055ce <USB_HostInit+0x12a>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055bc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a13      	ldr	r2, [pc, #76]	; (8005610 <USB_HostInit+0x16c>)
 80055c2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4a13      	ldr	r2, [pc, #76]	; (8005614 <USB_HostInit+0x170>)
 80055c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80055cc:	e009      	b.n	80055e2 <USB_HostInit+0x13e>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2280      	movs	r2, #128	; 0x80
 80055d2:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	4a10      	ldr	r2, [pc, #64]	; (8005618 <USB_HostInit+0x174>)
 80055d8:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	4a0f      	ldr	r2, [pc, #60]	; (800561c <USB_HostInit+0x178>)
 80055de:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d105      	bne.n	80055f4 <USB_HostInit+0x150>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	699b      	ldr	r3, [r3, #24]
 80055ec:	f043 0210 	orr.w	r2, r3, #16
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	699a      	ldr	r2, [r3, #24]
 80055f8:	4b09      	ldr	r3, [pc, #36]	; (8005620 <USB_HostInit+0x17c>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	687a      	ldr	r2, [r7, #4]
 80055fe:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8005600:	7dfb      	ldrb	r3, [r7, #23]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3718      	adds	r7, #24
 8005606:	46bd      	mov	sp, r7
 8005608:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800560c:	b004      	add	sp, #16
 800560e:	4770      	bx	lr
 8005610:	01000200 	.word	0x01000200
 8005614:	00e00300 	.word	0x00e00300
 8005618:	00600080 	.word	0x00600080
 800561c:	004000e0 	.word	0x004000e0
 8005620:	a3200008 	.word	0xa3200008

08005624 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8005624:	b480      	push	{r7}
 8005626:	b085      	sub	sp, #20
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
 800562c:	460b      	mov	r3, r1
 800562e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005642:	f023 0303 	bic.w	r3, r3, #3
 8005646:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	78fb      	ldrb	r3, [r7, #3]
 8005652:	f003 0303 	and.w	r3, r3, #3
 8005656:	68f9      	ldr	r1, [r7, #12]
 8005658:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 800565c:	4313      	orrs	r3, r2
 800565e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8005660:	78fb      	ldrb	r3, [r7, #3]
 8005662:	2b01      	cmp	r3, #1
 8005664:	d107      	bne.n	8005676 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800566c:	461a      	mov	r2, r3
 800566e:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8005672:	6053      	str	r3, [r2, #4]
 8005674:	e009      	b.n	800568a <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8005676:	78fb      	ldrb	r3, [r7, #3]
 8005678:	2b02      	cmp	r3, #2
 800567a:	d106      	bne.n	800568a <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005682:	461a      	mov	r2, r3
 8005684:	f241 7370 	movw	r3, #6000	; 0x1770
 8005688:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 800568a:	2300      	movs	r3, #0
}
 800568c:	4618      	mov	r0, r3
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr

08005698 <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(USB_OTG_GlobalTypeDef *USBx)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80056a4:	2300      	movs	r3, #0
 80056a6:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80056b8:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	68fa      	ldr	r2, [r7, #12]
 80056be:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80056c6:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80056c8:	2064      	movs	r0, #100	; 0x64
 80056ca:	f7fb fe53 	bl	8001374 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80056ce:	68bb      	ldr	r3, [r7, #8]
 80056d0:	68fa      	ldr	r2, [r7, #12]
 80056d2:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80056d6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056da:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 80056dc:	200a      	movs	r0, #10
 80056de:	f7fb fe49 	bl	8001374 <HAL_Delay>

  return HAL_OK;
 80056e2:	2300      	movs	r3, #0
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b085      	sub	sp, #20
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
 80056f4:	460b      	mov	r3, r1
 80056f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80056fc:	2300      	movs	r3, #0
 80056fe:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8005710:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005718:	2b00      	cmp	r3, #0
 800571a:	d109      	bne.n	8005730 <USB_DriveVbus+0x44>
 800571c:	78fb      	ldrb	r3, [r7, #3]
 800571e:	2b01      	cmp	r3, #1
 8005720:	d106      	bne.n	8005730 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8005722:	68bb      	ldr	r3, [r7, #8]
 8005724:	68fa      	ldr	r2, [r7, #12]
 8005726:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800572a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800572e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005736:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800573a:	d109      	bne.n	8005750 <USB_DriveVbus+0x64>
 800573c:	78fb      	ldrb	r3, [r7, #3]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d106      	bne.n	8005750 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800574a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800574e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3714      	adds	r7, #20
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr

0800575e <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800575e:	b480      	push	{r7}
 8005760:	b085      	sub	sp, #20
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800576a:	2300      	movs	r3, #0
 800576c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	0c5b      	lsrs	r3, r3, #17
 800577c:	f003 0303 	and.w	r3, r3, #3
}
 8005780:	4618      	mov	r0, r3
 8005782:	3714      	adds	r7, #20
 8005784:	46bd      	mov	sp, r7
 8005786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578a:	4770      	bx	lr

0800578c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 800578c:	b480      	push	{r7}
 800578e:	b085      	sub	sp, #20
 8005790:	af00      	add	r7, sp, #0
 8005792:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800579e:	689b      	ldr	r3, [r3, #8]
 80057a0:	b29b      	uxth	r3, r3
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3714      	adds	r7, #20
 80057a6:	46bd      	mov	sp, r7
 80057a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ac:	4770      	bx	lr
	...

080057b0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b088      	sub	sp, #32
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	4608      	mov	r0, r1
 80057ba:	4611      	mov	r1, r2
 80057bc:	461a      	mov	r2, r3
 80057be:	4603      	mov	r3, r0
 80057c0:	70fb      	strb	r3, [r7, #3]
 80057c2:	460b      	mov	r3, r1
 80057c4:	70bb      	strb	r3, [r7, #2]
 80057c6:	4613      	mov	r3, r2
 80057c8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80057ca:	2300      	movs	r3, #0
 80057cc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 80057d2:	78fb      	ldrb	r3, [r7, #3]
 80057d4:	015a      	lsls	r2, r3, #5
 80057d6:	693b      	ldr	r3, [r7, #16]
 80057d8:	4413      	add	r3, r2
 80057da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80057de:	461a      	mov	r2, r3
 80057e0:	f04f 33ff 	mov.w	r3, #4294967295
 80057e4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 80057e6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80057ea:	2b03      	cmp	r3, #3
 80057ec:	d87e      	bhi.n	80058ec <USB_HC_Init+0x13c>
 80057ee:	a201      	add	r2, pc, #4	; (adr r2, 80057f4 <USB_HC_Init+0x44>)
 80057f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057f4:	08005805 	.word	0x08005805
 80057f8:	080058af 	.word	0x080058af
 80057fc:	08005805 	.word	0x08005805
 8005800:	08005871 	.word	0x08005871
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005804:	78fb      	ldrb	r3, [r7, #3]
 8005806:	015a      	lsls	r2, r3, #5
 8005808:	693b      	ldr	r3, [r7, #16]
 800580a:	4413      	add	r3, r2
 800580c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005810:	461a      	mov	r2, r3
 8005812:	f240 439d 	movw	r3, #1181	; 0x49d
 8005816:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8005818:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800581c:	2b00      	cmp	r3, #0
 800581e:	da10      	bge.n	8005842 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	015a      	lsls	r2, r3, #5
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	4413      	add	r3, r2
 8005828:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800582c:	68db      	ldr	r3, [r3, #12]
 800582e:	78fa      	ldrb	r2, [r7, #3]
 8005830:	0151      	lsls	r1, r2, #5
 8005832:	693a      	ldr	r2, [r7, #16]
 8005834:	440a      	add	r2, r1
 8005836:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800583a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800583e:	60d3      	str	r3, [r2, #12]
        {
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
      }
      break;
 8005840:	e057      	b.n	80058f2 <USB_HC_Init+0x142>
        if ((USBx->CID & (0x1U << 8)) != 0U)
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800584a:	2b00      	cmp	r3, #0
 800584c:	d051      	beq.n	80058f2 <USB_HC_Init+0x142>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800584e:	78fb      	ldrb	r3, [r7, #3]
 8005850:	015a      	lsls	r2, r3, #5
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	4413      	add	r3, r2
 8005856:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800585a:	68db      	ldr	r3, [r3, #12]
 800585c:	78fa      	ldrb	r2, [r7, #3]
 800585e:	0151      	lsls	r1, r2, #5
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	440a      	add	r2, r1
 8005864:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005868:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800586c:	60d3      	str	r3, [r2, #12]
      break;
 800586e:	e040      	b.n	80058f2 <USB_HC_Init+0x142>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8005870:	78fb      	ldrb	r3, [r7, #3]
 8005872:	015a      	lsls	r2, r3, #5
 8005874:	693b      	ldr	r3, [r7, #16]
 8005876:	4413      	add	r3, r2
 8005878:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800587c:	461a      	mov	r2, r3
 800587e:	f240 639d 	movw	r3, #1693	; 0x69d
 8005882:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8005884:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8005888:	2b00      	cmp	r3, #0
 800588a:	da34      	bge.n	80058f6 <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800588c:	78fb      	ldrb	r3, [r7, #3]
 800588e:	015a      	lsls	r2, r3, #5
 8005890:	693b      	ldr	r3, [r7, #16]
 8005892:	4413      	add	r3, r2
 8005894:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005898:	68db      	ldr	r3, [r3, #12]
 800589a:	78fa      	ldrb	r2, [r7, #3]
 800589c:	0151      	lsls	r1, r2, #5
 800589e:	693a      	ldr	r2, [r7, #16]
 80058a0:	440a      	add	r2, r1
 80058a2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058aa:	60d3      	str	r3, [r2, #12]
      }

      break;
 80058ac:	e023      	b.n	80058f6 <USB_HC_Init+0x146>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80058ae:	78fb      	ldrb	r3, [r7, #3]
 80058b0:	015a      	lsls	r2, r3, #5
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	4413      	add	r3, r2
 80058b6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058ba:	461a      	mov	r2, r3
 80058bc:	f240 2325 	movw	r3, #549	; 0x225
 80058c0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80058c2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	da17      	bge.n	80058fa <USB_HC_Init+0x14a>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80058ca:	78fb      	ldrb	r3, [r7, #3]
 80058cc:	015a      	lsls	r2, r3, #5
 80058ce:	693b      	ldr	r3, [r7, #16]
 80058d0:	4413      	add	r3, r2
 80058d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80058d6:	68db      	ldr	r3, [r3, #12]
 80058d8:	78fa      	ldrb	r2, [r7, #3]
 80058da:	0151      	lsls	r1, r2, #5
 80058dc:	693a      	ldr	r2, [r7, #16]
 80058de:	440a      	add	r2, r1
 80058e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80058e4:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 80058e8:	60d3      	str	r3, [r2, #12]
      }
      break;
 80058ea:	e006      	b.n	80058fa <USB_HC_Init+0x14a>

    default:
      ret = HAL_ERROR;
 80058ec:	2301      	movs	r3, #1
 80058ee:	77fb      	strb	r3, [r7, #31]
      break;
 80058f0:	e004      	b.n	80058fc <USB_HC_Init+0x14c>
      break;
 80058f2:	bf00      	nop
 80058f4:	e002      	b.n	80058fc <USB_HC_Init+0x14c>
      break;
 80058f6:	bf00      	nop
 80058f8:	e000      	b.n	80058fc <USB_HC_Init+0x14c>
      break;
 80058fa:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80058fc:	78fb      	ldrb	r3, [r7, #3]
 80058fe:	015a      	lsls	r2, r3, #5
 8005900:	693b      	ldr	r3, [r7, #16]
 8005902:	4413      	add	r3, r2
 8005904:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	78fa      	ldrb	r2, [r7, #3]
 800590c:	0151      	lsls	r1, r2, #5
 800590e:	693a      	ldr	r2, [r7, #16]
 8005910:	440a      	add	r2, r1
 8005912:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005916:	f043 0302 	orr.w	r3, r3, #2
 800591a:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005922:	699a      	ldr	r2, [r3, #24]
 8005924:	78fb      	ldrb	r3, [r7, #3]
 8005926:	f003 030f 	and.w	r3, r3, #15
 800592a:	2101      	movs	r1, #1
 800592c:	fa01 f303 	lsl.w	r3, r1, r3
 8005930:	6939      	ldr	r1, [r7, #16]
 8005932:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005936:	4313      	orrs	r3, r2
 8005938:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	699b      	ldr	r3, [r3, #24]
 800593e:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8005946:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800594a:	2b00      	cmp	r3, #0
 800594c:	da03      	bge.n	8005956 <USB_HC_Init+0x1a6>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 800594e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005952:	61bb      	str	r3, [r7, #24]
 8005954:	e001      	b.n	800595a <USB_HC_Init+0x1aa>
  }
  else
  {
    HCcharEpDir = 0U;
 8005956:	2300      	movs	r3, #0
 8005958:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800595a:	6878      	ldr	r0, [r7, #4]
 800595c:	f7ff feff 	bl	800575e <USB_GetHostSpeed>
 8005960:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8005962:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005966:	2b02      	cmp	r3, #2
 8005968:	d106      	bne.n	8005978 <USB_HC_Init+0x1c8>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	2b02      	cmp	r3, #2
 800596e:	d003      	beq.n	8005978 <USB_HC_Init+0x1c8>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8005970:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8005974:	617b      	str	r3, [r7, #20]
 8005976:	e001      	b.n	800597c <USB_HC_Init+0x1cc>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8005978:	2300      	movs	r3, #0
 800597a:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800597c:	787b      	ldrb	r3, [r7, #1]
 800597e:	059b      	lsls	r3, r3, #22
 8005980:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005984:	78bb      	ldrb	r3, [r7, #2]
 8005986:	02db      	lsls	r3, r3, #11
 8005988:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800598c:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 800598e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8005992:	049b      	lsls	r3, r3, #18
 8005994:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8005998:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 800599a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800599c:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80059a0:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80059a2:	69bb      	ldr	r3, [r7, #24]
 80059a4:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059a6:	78fb      	ldrb	r3, [r7, #3]
 80059a8:	0159      	lsls	r1, r3, #5
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	440b      	add	r3, r1
 80059ae:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059b2:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 80059b4:	697b      	ldr	r3, [r7, #20]
 80059b6:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80059b8:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80059ba:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80059be:	2b03      	cmp	r3, #3
 80059c0:	d003      	beq.n	80059ca <USB_HC_Init+0x21a>
 80059c2:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80059c6:	2b01      	cmp	r3, #1
 80059c8:	d10f      	bne.n	80059ea <USB_HC_Init+0x23a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80059ca:	78fb      	ldrb	r3, [r7, #3]
 80059cc:	015a      	lsls	r2, r3, #5
 80059ce:	693b      	ldr	r3, [r7, #16]
 80059d0:	4413      	add	r3, r2
 80059d2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	78fa      	ldrb	r2, [r7, #3]
 80059da:	0151      	lsls	r1, r2, #5
 80059dc:	693a      	ldr	r2, [r7, #16]
 80059de:	440a      	add	r2, r1
 80059e0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80059e4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80059e8:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80059ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3720      	adds	r7, #32
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b08c      	sub	sp, #48	; 0x30
 80059f8:	af02      	add	r7, sp, #8
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	4613      	mov	r3, r2
 8005a00:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8005a06:	68bb      	ldr	r3, [r7, #8]
 8005a08:	785b      	ldrb	r3, [r3, #1]
 8005a0a:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8005a0c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005a10:	837b      	strh	r3, [r7, #26]

  if (((USBx->CID & (0x1U << 8)) != 0U) && (hc->speed == USBH_HS_SPEED))
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d02d      	beq.n	8005a7a <USB_HC_StartXfer+0x86>
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	791b      	ldrb	r3, [r3, #4]
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d129      	bne.n	8005a7a <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping  in case of NYET/NAK */
    if ((dma == 1U) && ((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)))
 8005a26:	79fb      	ldrb	r3, [r7, #7]
 8005a28:	2b01      	cmp	r3, #1
 8005a2a:	d117      	bne.n	8005a5c <USB_HC_StartXfer+0x68>
 8005a2c:	68bb      	ldr	r3, [r7, #8]
 8005a2e:	79db      	ldrb	r3, [r3, #7]
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d003      	beq.n	8005a3c <USB_HC_StartXfer+0x48>
 8005a34:	68bb      	ldr	r3, [r7, #8]
 8005a36:	79db      	ldrb	r3, [r3, #7]
 8005a38:	2b02      	cmp	r3, #2
 8005a3a:	d10f      	bne.n	8005a5c <USB_HC_StartXfer+0x68>
    {
      USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	6a3b      	ldr	r3, [r7, #32]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	69fa      	ldr	r2, [r7, #28]
 8005a4c:	0151      	lsls	r1, r2, #5
 8005a4e:	6a3a      	ldr	r2, [r7, #32]
 8005a50:	440a      	add	r2, r1
 8005a52:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005a56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a5a:	60d3      	str	r3, [r2, #12]
                                               USB_OTG_HCINTMSK_ACKM |
                                               USB_OTG_HCINTMSK_NAKM);
    }

    if ((dma == 0U) && (hc->do_ping == 1U))
 8005a5c:	79fb      	ldrb	r3, [r7, #7]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d10b      	bne.n	8005a7a <USB_HC_StartXfer+0x86>
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	795b      	ldrb	r3, [r3, #5]
 8005a66:	2b01      	cmp	r3, #1
 8005a68:	d107      	bne.n	8005a7a <USB_HC_StartXfer+0x86>
    {
      (void)USB_DoPing(USBx, hc->ch_num);
 8005a6a:	68bb      	ldr	r3, [r7, #8]
 8005a6c:	785b      	ldrb	r3, [r3, #1]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	68f8      	ldr	r0, [r7, #12]
 8005a72:	f000 fa0f 	bl	8005e94 <USB_DoPing>
      return HAL_OK;
 8005a76:	2300      	movs	r3, #0
 8005a78:	e0f8      	b.n	8005c6c <USB_HC_StartXfer+0x278>
    }

  }

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8005a7a:	68bb      	ldr	r3, [r7, #8]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d018      	beq.n	8005ab4 <USB_HC_StartXfer+0xc0>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8005a82:	68bb      	ldr	r3, [r7, #8]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	68ba      	ldr	r2, [r7, #8]
 8005a88:	8912      	ldrh	r2, [r2, #8]
 8005a8a:	4413      	add	r3, r2
 8005a8c:	3b01      	subs	r3, #1
 8005a8e:	68ba      	ldr	r2, [r7, #8]
 8005a90:	8912      	ldrh	r2, [r2, #8]
 8005a92:	fbb3 f3f2 	udiv	r3, r3, r2
 8005a96:	84fb      	strh	r3, [r7, #38]	; 0x26

    if (num_packets > max_hc_pkt_count)
 8005a98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8005a9a:	8b7b      	ldrh	r3, [r7, #26]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d90b      	bls.n	8005ab8 <USB_HC_StartXfer+0xc4>
    {
      num_packets = max_hc_pkt_count;
 8005aa0:	8b7b      	ldrh	r3, [r7, #26]
 8005aa2:	84fb      	strh	r3, [r7, #38]	; 0x26
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005aa4:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005aa6:	68ba      	ldr	r2, [r7, #8]
 8005aa8:	8912      	ldrh	r2, [r2, #8]
 8005aaa:	fb03 f202 	mul.w	r2, r3, r2
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	611a      	str	r2, [r3, #16]
 8005ab2:	e001      	b.n	8005ab8 <USB_HC_StartXfer+0xc4>
    }
  }
  else
  {
    num_packets = 1U;
 8005ab4:	2301      	movs	r3, #1
 8005ab6:	84fb      	strh	r3, [r7, #38]	; 0x26

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8005ab8:	68bb      	ldr	r3, [r7, #8]
 8005aba:	78db      	ldrb	r3, [r3, #3]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	d007      	beq.n	8005ad0 <USB_HC_StartXfer+0xdc>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8005ac0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ac2:	68ba      	ldr	r2, [r7, #8]
 8005ac4:	8912      	ldrh	r2, [r2, #8]
 8005ac6:	fb03 f202 	mul.w	r2, r3, r2
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	611a      	str	r2, [r3, #16]
 8005ace:	e003      	b.n	8005ad8 <USB_HC_StartXfer+0xe4>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	695a      	ldr	r2, [r3, #20]
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	691b      	ldr	r3, [r3, #16]
 8005adc:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005ae0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8005ae2:	04d9      	lsls	r1, r3, #19
 8005ae4:	4b63      	ldr	r3, [pc, #396]	; (8005c74 <USB_HC_StartXfer+0x280>)
 8005ae6:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005ae8:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8005aea:	68bb      	ldr	r3, [r7, #8]
 8005aec:	7a9b      	ldrb	r3, [r3, #10]
 8005aee:	075b      	lsls	r3, r3, #29
 8005af0:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005af4:	69f9      	ldr	r1, [r7, #28]
 8005af6:	0148      	lsls	r0, r1, #5
 8005af8:	6a39      	ldr	r1, [r7, #32]
 8005afa:	4401      	add	r1, r0
 8005afc:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005b00:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8005b02:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8005b04:	79fb      	ldrb	r3, [r7, #7]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d009      	beq.n	8005b1e <USB_HC_StartXfer+0x12a>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8005b0a:	68bb      	ldr	r3, [r7, #8]
 8005b0c:	68d9      	ldr	r1, [r3, #12]
 8005b0e:	69fb      	ldr	r3, [r7, #28]
 8005b10:	015a      	lsls	r2, r3, #5
 8005b12:	6a3b      	ldr	r3, [r7, #32]
 8005b14:	4413      	add	r3, r2
 8005b16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b1a:	460a      	mov	r2, r1
 8005b1c:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8005b1e:	6a3b      	ldr	r3, [r7, #32]
 8005b20:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005b24:	689b      	ldr	r3, [r3, #8]
 8005b26:	f003 0301 	and.w	r3, r3, #1
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	bf0c      	ite	eq
 8005b2e:	2301      	moveq	r3, #1
 8005b30:	2300      	movne	r3, #0
 8005b32:	b2db      	uxtb	r3, r3
 8005b34:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	015a      	lsls	r2, r3, #5
 8005b3a:	6a3b      	ldr	r3, [r7, #32]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	69fa      	ldr	r2, [r7, #28]
 8005b46:	0151      	lsls	r1, r2, #5
 8005b48:	6a3a      	ldr	r2, [r7, #32]
 8005b4a:	440a      	add	r2, r1
 8005b4c:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005b50:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005b54:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	015a      	lsls	r2, r3, #5
 8005b5a:	6a3b      	ldr	r3, [r7, #32]
 8005b5c:	4413      	add	r3, r2
 8005b5e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	7e7b      	ldrb	r3, [r7, #25]
 8005b66:	075b      	lsls	r3, r3, #29
 8005b68:	69f9      	ldr	r1, [r7, #28]
 8005b6a:	0148      	lsls	r0, r1, #5
 8005b6c:	6a39      	ldr	r1, [r7, #32]
 8005b6e:	4401      	add	r1, r0
 8005b70:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 8005b74:	4313      	orrs	r3, r2
 8005b76:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	6a3b      	ldr	r3, [r7, #32]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005b8e:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8005b90:	68bb      	ldr	r3, [r7, #8]
 8005b92:	78db      	ldrb	r3, [r3, #3]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d004      	beq.n	8005ba2 <USB_HC_StartXfer+0x1ae>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8005b98:	693b      	ldr	r3, [r7, #16]
 8005b9a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005b9e:	613b      	str	r3, [r7, #16]
 8005ba0:	e003      	b.n	8005baa <USB_HC_StartXfer+0x1b6>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8005ba2:	693b      	ldr	r3, [r7, #16]
 8005ba4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005ba8:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005baa:	693b      	ldr	r3, [r7, #16]
 8005bac:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005bb0:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	6a3b      	ldr	r3, [r7, #32]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005bbe:	461a      	mov	r2, r3
 8005bc0:	693b      	ldr	r3, [r7, #16]
 8005bc2:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8005bc4:	79fb      	ldrb	r3, [r7, #7]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d001      	beq.n	8005bce <USB_HC_StartXfer+0x1da>
  {
    return HAL_OK;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	e04e      	b.n	8005c6c <USB_HC_StartXfer+0x278>
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	78db      	ldrb	r3, [r3, #3]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d149      	bne.n	8005c6a <USB_HC_StartXfer+0x276>
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d045      	beq.n	8005c6a <USB_HC_StartXfer+0x276>
  {
    switch (hc->ep_type)
 8005bde:	68bb      	ldr	r3, [r7, #8]
 8005be0:	79db      	ldrb	r3, [r3, #7]
 8005be2:	2b03      	cmp	r3, #3
 8005be4:	d830      	bhi.n	8005c48 <USB_HC_StartXfer+0x254>
 8005be6:	a201      	add	r2, pc, #4	; (adr r2, 8005bec <USB_HC_StartXfer+0x1f8>)
 8005be8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bec:	08005bfd 	.word	0x08005bfd
 8005bf0:	08005c21 	.word	0x08005c21
 8005bf4:	08005bfd 	.word	0x08005bfd
 8005bf8:	08005c21 	.word	0x08005c21
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	695b      	ldr	r3, [r3, #20]
 8005c00:	3303      	adds	r3, #3
 8005c02:	089b      	lsrs	r3, r3, #2
 8005c04:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8005c06:	8afa      	ldrh	r2, [r7, #22]
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0c:	b29b      	uxth	r3, r3
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d91c      	bls.n	8005c4c <USB_HC_StartXfer+0x258>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	f043 0220 	orr.w	r2, r3, #32
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c1e:	e015      	b.n	8005c4c <USB_HC_StartXfer+0x258>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8005c20:	68bb      	ldr	r3, [r7, #8]
 8005c22:	695b      	ldr	r3, [r3, #20]
 8005c24:	3303      	adds	r3, #3
 8005c26:	089b      	lsrs	r3, r3, #2
 8005c28:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8005c2a:	8afa      	ldrh	r2, [r7, #22]
 8005c2c:	6a3b      	ldr	r3, [r7, #32]
 8005c2e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	b29b      	uxth	r3, r3
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d90a      	bls.n	8005c50 <USB_HC_StartXfer+0x25c>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	619a      	str	r2, [r3, #24]
        }
        break;
 8005c46:	e003      	b.n	8005c50 <USB_HC_StartXfer+0x25c>

      default:
        break;
 8005c48:	bf00      	nop
 8005c4a:	e002      	b.n	8005c52 <USB_HC_StartXfer+0x25e>
        break;
 8005c4c:	bf00      	nop
 8005c4e:	e000      	b.n	8005c52 <USB_HC_StartXfer+0x25e>
        break;
 8005c50:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8005c52:	68bb      	ldr	r3, [r7, #8]
 8005c54:	68d9      	ldr	r1, [r3, #12]
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	785a      	ldrb	r2, [r3, #1]
 8005c5a:	68bb      	ldr	r3, [r7, #8]
 8005c5c:	695b      	ldr	r3, [r3, #20]
 8005c5e:	b29b      	uxth	r3, r3
 8005c60:	2000      	movs	r0, #0
 8005c62:	9000      	str	r0, [sp, #0]
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	f7ff fb31 	bl	80052cc <USB_WritePacket>
  }

  return HAL_OK;
 8005c6a:	2300      	movs	r3, #0
}
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	3728      	adds	r7, #40	; 0x28
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	1ff80000 	.word	0x1ff80000

08005c78 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b085      	sub	sp, #20
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005c8a:	695b      	ldr	r3, [r3, #20]
 8005c8c:	b29b      	uxth	r3, r3
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3714      	adds	r7, #20
 8005c92:	46bd      	mov	sp, r7
 8005c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c98:	4770      	bx	lr

08005c9a <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b089      	sub	sp, #36	; 0x24
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8005caa:	78fb      	ldrb	r3, [r7, #3]
 8005cac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8005cb2:	69bb      	ldr	r3, [r7, #24]
 8005cb4:	015a      	lsls	r2, r3, #5
 8005cb6:	69fb      	ldr	r3, [r7, #28]
 8005cb8:	4413      	add	r3, r2
 8005cba:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	0c9b      	lsrs	r3, r3, #18
 8005cc2:	f003 0303 	and.w	r3, r3, #3
 8005cc6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	015a      	lsls	r2, r3, #5
 8005ccc:	69fb      	ldr	r3, [r7, #28]
 8005cce:	4413      	add	r3, r2
 8005cd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	0fdb      	lsrs	r3, r3, #31
 8005cd8:	f003 0301 	and.w	r3, r3, #1
 8005cdc:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	689b      	ldr	r3, [r3, #8]
 8005ce2:	f003 0320 	and.w	r3, r3, #32
 8005ce6:	2b20      	cmp	r3, #32
 8005ce8:	d104      	bne.n	8005cf4 <USB_HC_Halt+0x5a>
 8005cea:	693b      	ldr	r3, [r7, #16]
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d101      	bne.n	8005cf4 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	e0c8      	b.n	8005e86 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8005cf4:	697b      	ldr	r3, [r7, #20]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <USB_HC_Halt+0x66>
 8005cfa:	697b      	ldr	r3, [r7, #20]
 8005cfc:	2b02      	cmp	r3, #2
 8005cfe:	d163      	bne.n	8005dc8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005d00:	69bb      	ldr	r3, [r7, #24]
 8005d02:	015a      	lsls	r2, r3, #5
 8005d04:	69fb      	ldr	r3, [r7, #28]
 8005d06:	4413      	add	r3, r2
 8005d08:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	69ba      	ldr	r2, [r7, #24]
 8005d10:	0151      	lsls	r1, r2, #5
 8005d12:	69fa      	ldr	r2, [r7, #28]
 8005d14:	440a      	add	r2, r1
 8005d16:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d1e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	f003 0320 	and.w	r3, r3, #32
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	f040 80ab 	bne.w	8005e84 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d32:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d133      	bne.n	8005da2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	015a      	lsls	r2, r3, #5
 8005d3e:	69fb      	ldr	r3, [r7, #28]
 8005d40:	4413      	add	r3, r2
 8005d42:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	69ba      	ldr	r2, [r7, #24]
 8005d4a:	0151      	lsls	r1, r2, #5
 8005d4c:	69fa      	ldr	r2, [r7, #28]
 8005d4e:	440a      	add	r2, r1
 8005d50:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d54:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005d58:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	015a      	lsls	r2, r3, #5
 8005d5e:	69fb      	ldr	r3, [r7, #28]
 8005d60:	4413      	add	r3, r2
 8005d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	69ba      	ldr	r2, [r7, #24]
 8005d6a:	0151      	lsls	r1, r2, #5
 8005d6c:	69fa      	ldr	r2, [r7, #28]
 8005d6e:	440a      	add	r2, r1
 8005d70:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005d74:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005d78:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005d86:	d81d      	bhi.n	8005dc4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005d88:	69bb      	ldr	r3, [r7, #24]
 8005d8a:	015a      	lsls	r2, r3, #5
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	4413      	add	r3, r2
 8005d90:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d9a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d9e:	d0ec      	beq.n	8005d7a <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005da0:	e070      	b.n	8005e84 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005da2:	69bb      	ldr	r3, [r7, #24]
 8005da4:	015a      	lsls	r2, r3, #5
 8005da6:	69fb      	ldr	r3, [r7, #28]
 8005da8:	4413      	add	r3, r2
 8005daa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	69ba      	ldr	r2, [r7, #24]
 8005db2:	0151      	lsls	r1, r2, #5
 8005db4:	69fa      	ldr	r2, [r7, #28]
 8005db6:	440a      	add	r2, r1
 8005db8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005dbc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005dc0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dc2:	e05f      	b.n	8005e84 <USB_HC_Halt+0x1ea>
            break;
 8005dc4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8005dc6:	e05d      	b.n	8005e84 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	015a      	lsls	r2, r3, #5
 8005dcc:	69fb      	ldr	r3, [r7, #28]
 8005dce:	4413      	add	r3, r2
 8005dd0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	69ba      	ldr	r2, [r7, #24]
 8005dd8:	0151      	lsls	r1, r2, #5
 8005dda:	69fa      	ldr	r2, [r7, #28]
 8005ddc:	440a      	add	r2, r1
 8005dde:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005de2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005de6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005dee:	691b      	ldr	r3, [r3, #16]
 8005df0:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d133      	bne.n	8005e60 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	015a      	lsls	r2, r3, #5
 8005dfc:	69fb      	ldr	r3, [r7, #28]
 8005dfe:	4413      	add	r3, r2
 8005e00:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	69ba      	ldr	r2, [r7, #24]
 8005e08:	0151      	lsls	r1, r2, #5
 8005e0a:	69fa      	ldr	r2, [r7, #28]
 8005e0c:	440a      	add	r2, r1
 8005e0e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e12:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005e16:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e18:	69bb      	ldr	r3, [r7, #24]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	69fb      	ldr	r3, [r7, #28]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	69ba      	ldr	r2, [r7, #24]
 8005e28:	0151      	lsls	r1, r2, #5
 8005e2a:	69fa      	ldr	r2, [r7, #28]
 8005e2c:	440a      	add	r2, r1
 8005e2e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e32:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e36:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005e44:	d81d      	bhi.n	8005e82 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005e46:	69bb      	ldr	r3, [r7, #24]
 8005e48:	015a      	lsls	r2, r3, #5
 8005e4a:	69fb      	ldr	r3, [r7, #28]
 8005e4c:	4413      	add	r3, r2
 8005e4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e5c:	d0ec      	beq.n	8005e38 <USB_HC_Halt+0x19e>
 8005e5e:	e011      	b.n	8005e84 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8005e60:	69bb      	ldr	r3, [r7, #24]
 8005e62:	015a      	lsls	r2, r3, #5
 8005e64:	69fb      	ldr	r3, [r7, #28]
 8005e66:	4413      	add	r3, r2
 8005e68:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	69ba      	ldr	r2, [r7, #24]
 8005e70:	0151      	lsls	r1, r2, #5
 8005e72:	69fa      	ldr	r2, [r7, #28]
 8005e74:	440a      	add	r2, r1
 8005e76:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005e7a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005e7e:	6013      	str	r3, [r2, #0]
 8005e80:	e000      	b.n	8005e84 <USB_HC_Halt+0x1ea>
          break;
 8005e82:	bf00      	nop
    }
  }

  return HAL_OK;
 8005e84:	2300      	movs	r3, #0
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3724      	adds	r7, #36	; 0x24
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
	...

08005e94 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b087      	sub	sp, #28
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8005ea4:	78fb      	ldrb	r3, [r7, #3]
 8005ea6:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	04da      	lsls	r2, r3, #19
 8005eb0:	4b15      	ldr	r3, [pc, #84]	; (8005f08 <USB_DoPing+0x74>)
 8005eb2:	4013      	ands	r3, r2
 8005eb4:	693a      	ldr	r2, [r7, #16]
 8005eb6:	0151      	lsls	r1, r2, #5
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	440a      	add	r2, r1
 8005ebc:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8005ec0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ec4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	697b      	ldr	r3, [r7, #20]
 8005ecc:	4413      	add	r3, r2
 8005ece:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8005ed6:	68bb      	ldr	r3, [r7, #8]
 8005ed8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005edc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8005ede:	68bb      	ldr	r3, [r7, #8]
 8005ee0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005ee4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	015a      	lsls	r2, r3, #5
 8005eea:	697b      	ldr	r3, [r7, #20]
 8005eec:	4413      	add	r3, r2
 8005eee:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005ef2:	461a      	mov	r2, r3
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8005ef8:	2300      	movs	r3, #0
}
 8005efa:	4618      	mov	r0, r3
 8005efc:	371c      	adds	r7, #28
 8005efe:	46bd      	mov	sp, r7
 8005f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f04:	4770      	bx	lr
 8005f06:	bf00      	nop
 8005f08:	1ff80000 	.word	0x1ff80000

08005f0c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8005f0c:	b580      	push	{r7, lr}
 8005f0e:	b088      	sub	sp, #32
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8005f14:	2300      	movs	r3, #0
 8005f16:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8005f1c:	2300      	movs	r3, #0
 8005f1e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff f911 	bl	8005148 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005f26:	2110      	movs	r1, #16
 8005f28:	6878      	ldr	r0, [r7, #4]
 8005f2a:	f7ff f96b 	bl	8005204 <USB_FlushTxFifo>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8005f34:	2301      	movs	r3, #1
 8005f36:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005f38:	6878      	ldr	r0, [r7, #4]
 8005f3a:	f7ff f997 	bl	800526c <USB_FlushRxFifo>
 8005f3e:	4603      	mov	r3, r0
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d001      	beq.n	8005f48 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8005f44:	2301      	movs	r3, #1
 8005f46:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8005f48:	2300      	movs	r3, #0
 8005f4a:	61bb      	str	r3, [r7, #24]
 8005f4c:	e01f      	b.n	8005f8e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f4e:	69bb      	ldr	r3, [r7, #24]
 8005f50:	015a      	lsls	r2, r3, #5
 8005f52:	697b      	ldr	r3, [r7, #20]
 8005f54:	4413      	add	r3, r2
 8005f56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8005f5e:	693b      	ldr	r3, [r7, #16]
 8005f60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f64:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005f6c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005f74:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005f76:	69bb      	ldr	r3, [r7, #24]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	697b      	ldr	r3, [r7, #20]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005f82:	461a      	mov	r2, r3
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8005f88:	69bb      	ldr	r3, [r7, #24]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	61bb      	str	r3, [r7, #24]
 8005f8e:	69bb      	ldr	r3, [r7, #24]
 8005f90:	2b0f      	cmp	r3, #15
 8005f92:	d9dc      	bls.n	8005f4e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8005f94:	2300      	movs	r3, #0
 8005f96:	61bb      	str	r3, [r7, #24]
 8005f98:	e034      	b.n	8006004 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8005f9a:	69bb      	ldr	r3, [r7, #24]
 8005f9c:	015a      	lsls	r2, r3, #5
 8005f9e:	697b      	ldr	r3, [r7, #20]
 8005fa0:	4413      	add	r3, r2
 8005fa2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005fb0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005fb8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005fc0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8005fc2:	69bb      	ldr	r3, [r7, #24]
 8005fc4:	015a      	lsls	r2, r3, #5
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	4413      	add	r3, r2
 8005fca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fce:	461a      	mov	r2, r3
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	3301      	adds	r3, #1
 8005fd8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005fe0:	d80c      	bhi.n	8005ffc <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8005fe2:	69bb      	ldr	r3, [r7, #24]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	697b      	ldr	r3, [r7, #20]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ff4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ff8:	d0ec      	beq.n	8005fd4 <USB_StopHost+0xc8>
 8005ffa:	e000      	b.n	8005ffe <USB_StopHost+0xf2>
        break;
 8005ffc:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	3301      	adds	r3, #1
 8006002:	61bb      	str	r3, [r7, #24]
 8006004:	69bb      	ldr	r3, [r7, #24]
 8006006:	2b0f      	cmp	r3, #15
 8006008:	d9c7      	bls.n	8005f9a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006010:	461a      	mov	r2, r3
 8006012:	f04f 33ff 	mov.w	r3, #4294967295
 8006016:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	f04f 32ff 	mov.w	r2, #4294967295
 800601e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f7ff f880 	bl	8005126 <USB_EnableGlobalInt>

  return ret;
 8006026:	7ffb      	ldrb	r3, [r7, #31]
}
 8006028:	4618      	mov	r0, r3
 800602a:	3720      	adds	r7, #32
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8006030:	b590      	push	{r4, r7, lr}
 8006032:	b089      	sub	sp, #36	; 0x24
 8006034:	af04      	add	r7, sp, #16
 8006036:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8006038:	2301      	movs	r3, #1
 800603a:	2202      	movs	r2, #2
 800603c:	2102      	movs	r1, #2
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fc66 	bl	8006910 <USBH_FindInterface>
 8006044:	4603      	mov	r3, r0
 8006046:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8006048:	7bfb      	ldrb	r3, [r7, #15]
 800604a:	2bff      	cmp	r3, #255	; 0xff
 800604c:	d002      	beq.n	8006054 <USBH_CDC_InterfaceInit+0x24>
 800604e:	7bfb      	ldrb	r3, [r7, #15]
 8006050:	2b01      	cmp	r3, #1
 8006052:	d901      	bls.n	8006058 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8006054:	2302      	movs	r3, #2
 8006056:	e13d      	b.n	80062d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8006058:	7bfb      	ldrb	r3, [r7, #15]
 800605a:	4619      	mov	r1, r3
 800605c:	6878      	ldr	r0, [r7, #4]
 800605e:	f000 fc3b 	bl	80068d8 <USBH_SelectInterface>
 8006062:	4603      	mov	r3, r0
 8006064:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8006066:	7bbb      	ldrb	r3, [r7, #14]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d001      	beq.n	8006070 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 800606c:	2302      	movs	r3, #2
 800606e:	e131      	b.n	80062d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 8006076:	2050      	movs	r0, #80	; 0x50
 8006078:	f002 fafa 	bl	8008670 <malloc>
 800607c:	4603      	mov	r3, r0
 800607e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006086:	69db      	ldr	r3, [r3, #28]
 8006088:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800608a:	68bb      	ldr	r3, [r7, #8]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d101      	bne.n	8006094 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8006090:	2302      	movs	r3, #2
 8006092:	e11f      	b.n	80062d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8006094:	2250      	movs	r2, #80	; 0x50
 8006096:	2100      	movs	r1, #0
 8006098:	68b8      	ldr	r0, [r7, #8]
 800609a:	f002 faf9 	bl	8008690 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800609e:	7bfb      	ldrb	r3, [r7, #15]
 80060a0:	687a      	ldr	r2, [r7, #4]
 80060a2:	211a      	movs	r1, #26
 80060a4:	fb01 f303 	mul.w	r3, r1, r3
 80060a8:	4413      	add	r3, r2
 80060aa:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060ae:	781b      	ldrb	r3, [r3, #0]
 80060b0:	b25b      	sxtb	r3, r3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	da15      	bge.n	80060e2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80060b6:	7bfb      	ldrb	r3, [r7, #15]
 80060b8:	687a      	ldr	r2, [r7, #4]
 80060ba:	211a      	movs	r1, #26
 80060bc:	fb01 f303 	mul.w	r3, r1, r3
 80060c0:	4413      	add	r3, r2
 80060c2:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80060c6:	781a      	ldrb	r2, [r3, #0]
 80060c8:	68bb      	ldr	r3, [r7, #8]
 80060ca:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80060cc:	7bfb      	ldrb	r3, [r7, #15]
 80060ce:	687a      	ldr	r2, [r7, #4]
 80060d0:	211a      	movs	r1, #26
 80060d2:	fb01 f303 	mul.w	r3, r1, r3
 80060d6:	4413      	add	r3, r2
 80060d8:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80060dc:	881a      	ldrh	r2, [r3, #0]
 80060de:	68bb      	ldr	r3, [r7, #8]
 80060e0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 80060e2:	68bb      	ldr	r3, [r7, #8]
 80060e4:	785b      	ldrb	r3, [r3, #1]
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f001 ff2c 	bl	8007f46 <USBH_AllocPipe>
 80060ee:	4603      	mov	r3, r0
 80060f0:	461a      	mov	r2, r3
 80060f2:	68bb      	ldr	r3, [r7, #8]
 80060f4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	7819      	ldrb	r1, [r3, #0]
 80060fa:	68bb      	ldr	r3, [r7, #8]
 80060fc:	7858      	ldrb	r0, [r3, #1]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	8952      	ldrh	r2, [r2, #10]
 800610e:	9202      	str	r2, [sp, #8]
 8006110:	2203      	movs	r2, #3
 8006112:	9201      	str	r2, [sp, #4]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	4623      	mov	r3, r4
 8006118:	4602      	mov	r2, r0
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f001 fee4 	bl	8007ee8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8006120:	68bb      	ldr	r3, [r7, #8]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	2200      	movs	r2, #0
 8006126:	4619      	mov	r1, r3
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f002 f9f3 	bl	8008514 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 800612e:	2300      	movs	r3, #0
 8006130:	2200      	movs	r2, #0
 8006132:	210a      	movs	r1, #10
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f000 fbeb 	bl	8006910 <USBH_FindInterface>
 800613a:	4603      	mov	r3, r0
 800613c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 800613e:	7bfb      	ldrb	r3, [r7, #15]
 8006140:	2bff      	cmp	r3, #255	; 0xff
 8006142:	d002      	beq.n	800614a <USBH_CDC_InterfaceInit+0x11a>
 8006144:	7bfb      	ldrb	r3, [r7, #15]
 8006146:	2b01      	cmp	r3, #1
 8006148:	d901      	bls.n	800614e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800614a:	2302      	movs	r3, #2
 800614c:	e0c2      	b.n	80062d4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800614e:	7bfb      	ldrb	r3, [r7, #15]
 8006150:	687a      	ldr	r2, [r7, #4]
 8006152:	211a      	movs	r1, #26
 8006154:	fb01 f303 	mul.w	r3, r1, r3
 8006158:	4413      	add	r3, r2
 800615a:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800615e:	781b      	ldrb	r3, [r3, #0]
 8006160:	b25b      	sxtb	r3, r3
 8006162:	2b00      	cmp	r3, #0
 8006164:	da16      	bge.n	8006194 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006166:	7bfb      	ldrb	r3, [r7, #15]
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	211a      	movs	r1, #26
 800616c:	fb01 f303 	mul.w	r3, r1, r3
 8006170:	4413      	add	r3, r2
 8006172:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8006176:	781a      	ldrb	r2, [r3, #0]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800617c:	7bfb      	ldrb	r3, [r7, #15]
 800617e:	687a      	ldr	r2, [r7, #4]
 8006180:	211a      	movs	r1, #26
 8006182:	fb01 f303 	mul.w	r3, r1, r3
 8006186:	4413      	add	r3, r2
 8006188:	f503 7354 	add.w	r3, r3, #848	; 0x350
 800618c:	881a      	ldrh	r2, [r3, #0]
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	835a      	strh	r2, [r3, #26]
 8006192:	e015      	b.n	80061c0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	687a      	ldr	r2, [r7, #4]
 8006198:	211a      	movs	r1, #26
 800619a:	fb01 f303 	mul.w	r3, r1, r3
 800619e:	4413      	add	r3, r2
 80061a0:	f203 334e 	addw	r3, r3, #846	; 0x34e
 80061a4:	781a      	ldrb	r2, [r3, #0]
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80061aa:	7bfb      	ldrb	r3, [r7, #15]
 80061ac:	687a      	ldr	r2, [r7, #4]
 80061ae:	211a      	movs	r1, #26
 80061b0:	fb01 f303 	mul.w	r3, r1, r3
 80061b4:	4413      	add	r3, r2
 80061b6:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80061ba:	881a      	ldrh	r2, [r3, #0]
 80061bc:	68bb      	ldr	r3, [r7, #8]
 80061be:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 80061c0:	7bfb      	ldrb	r3, [r7, #15]
 80061c2:	687a      	ldr	r2, [r7, #4]
 80061c4:	211a      	movs	r1, #26
 80061c6:	fb01 f303 	mul.w	r3, r1, r3
 80061ca:	4413      	add	r3, r2
 80061cc:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	b25b      	sxtb	r3, r3
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	da16      	bge.n	8006206 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	211a      	movs	r1, #26
 80061de:	fb01 f303 	mul.w	r3, r1, r3
 80061e2:	4413      	add	r3, r2
 80061e4:	f203 3356 	addw	r3, r3, #854	; 0x356
 80061e8:	781a      	ldrb	r2, [r3, #0]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80061ee:	7bfb      	ldrb	r3, [r7, #15]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	211a      	movs	r1, #26
 80061f4:	fb01 f303 	mul.w	r3, r1, r3
 80061f8:	4413      	add	r3, r2
 80061fa:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80061fe:	881a      	ldrh	r2, [r3, #0]
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	835a      	strh	r2, [r3, #26]
 8006204:	e015      	b.n	8006232 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8006206:	7bfb      	ldrb	r3, [r7, #15]
 8006208:	687a      	ldr	r2, [r7, #4]
 800620a:	211a      	movs	r1, #26
 800620c:	fb01 f303 	mul.w	r3, r1, r3
 8006210:	4413      	add	r3, r2
 8006212:	f203 3356 	addw	r3, r3, #854	; 0x356
 8006216:	781a      	ldrb	r2, [r3, #0]
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800621c:	7bfb      	ldrb	r3, [r7, #15]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	211a      	movs	r1, #26
 8006222:	fb01 f303 	mul.w	r3, r1, r3
 8006226:	4413      	add	r3, r2
 8006228:	f503 7356 	add.w	r3, r3, #856	; 0x358
 800622c:	881a      	ldrh	r2, [r3, #0]
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8006232:	68bb      	ldr	r3, [r7, #8]
 8006234:	7b9b      	ldrb	r3, [r3, #14]
 8006236:	4619      	mov	r1, r3
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f001 fe84 	bl	8007f46 <USBH_AllocPipe>
 800623e:	4603      	mov	r3, r0
 8006240:	461a      	mov	r2, r3
 8006242:	68bb      	ldr	r3, [r7, #8]
 8006244:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8006246:	68bb      	ldr	r3, [r7, #8]
 8006248:	7bdb      	ldrb	r3, [r3, #15]
 800624a:	4619      	mov	r1, r3
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f001 fe7a 	bl	8007f46 <USBH_AllocPipe>
 8006252:	4603      	mov	r3, r0
 8006254:	461a      	mov	r2, r3
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	7b59      	ldrb	r1, [r3, #13]
 800625e:	68bb      	ldr	r3, [r7, #8]
 8006260:	7b98      	ldrb	r0, [r3, #14]
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	8b12      	ldrh	r2, [r2, #24]
 8006272:	9202      	str	r2, [sp, #8]
 8006274:	2202      	movs	r2, #2
 8006276:	9201      	str	r2, [sp, #4]
 8006278:	9300      	str	r3, [sp, #0]
 800627a:	4623      	mov	r3, r4
 800627c:	4602      	mov	r2, r0
 800627e:	6878      	ldr	r0, [r7, #4]
 8006280:	f001 fe32 	bl	8007ee8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	7b19      	ldrb	r1, [r3, #12]
 8006288:	68bb      	ldr	r3, [r7, #8]
 800628a:	7bd8      	ldrb	r0, [r3, #15]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8006298:	68ba      	ldr	r2, [r7, #8]
 800629a:	8b52      	ldrh	r2, [r2, #26]
 800629c:	9202      	str	r2, [sp, #8]
 800629e:	2202      	movs	r2, #2
 80062a0:	9201      	str	r2, [sp, #4]
 80062a2:	9300      	str	r3, [sp, #0]
 80062a4:	4623      	mov	r3, r4
 80062a6:	4602      	mov	r2, r0
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f001 fe1d 	bl	8007ee8 <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	7b5b      	ldrb	r3, [r3, #13]
 80062ba:	2200      	movs	r2, #0
 80062bc:	4619      	mov	r1, r3
 80062be:	6878      	ldr	r0, [r7, #4]
 80062c0:	f002 f928 	bl	8008514 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80062c4:	68bb      	ldr	r3, [r7, #8]
 80062c6:	7b1b      	ldrb	r3, [r3, #12]
 80062c8:	2200      	movs	r2, #0
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f002 f921 	bl	8008514 <USBH_LL_SetToggle>

  return USBH_OK;
 80062d2:	2300      	movs	r3, #0
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	bd90      	pop	{r4, r7, pc}

080062dc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80062ea:	69db      	ldr	r3, [r3, #28]
 80062ec:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d00e      	beq.n	8006314 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	781b      	ldrb	r3, [r3, #0]
 80062fa:	4619      	mov	r1, r3
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f001 fe12 	bl	8007f26 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	781b      	ldrb	r3, [r3, #0]
 8006306:	4619      	mov	r1, r3
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f001 fe3d 	bl	8007f88 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	2200      	movs	r2, #0
 8006312:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	7b1b      	ldrb	r3, [r3, #12]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00e      	beq.n	800633a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	7b1b      	ldrb	r3, [r3, #12]
 8006320:	4619      	mov	r1, r3
 8006322:	6878      	ldr	r0, [r7, #4]
 8006324:	f001 fdff 	bl	8007f26 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	7b1b      	ldrb	r3, [r3, #12]
 800632c:	4619      	mov	r1, r3
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f001 fe2a 	bl	8007f88 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	7b5b      	ldrb	r3, [r3, #13]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d00e      	beq.n	8006360 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	7b5b      	ldrb	r3, [r3, #13]
 8006346:	4619      	mov	r1, r3
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 fdec 	bl	8007f26 <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	7b5b      	ldrb	r3, [r3, #13]
 8006352:	4619      	mov	r1, r3
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f001 fe17 	bl	8007f88 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	2200      	movs	r2, #0
 800635e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006366:	69db      	ldr	r3, [r3, #28]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d00b      	beq.n	8006384 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006372:	69db      	ldr	r3, [r3, #28]
 8006374:	4618      	mov	r0, r3
 8006376:	f002 f983 	bl	8008680 <free>
    phost->pActiveClass->pData = 0U;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006380:	2200      	movs	r2, #0
 8006382:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8006384:	2300      	movs	r3, #0
}
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}

0800638e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800638e:	b580      	push	{r7, lr}
 8006390:	b084      	sub	sp, #16
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800639c:	69db      	ldr	r3, [r3, #28]
 800639e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 80063a0:	68fb      	ldr	r3, [r7, #12]
 80063a2:	3340      	adds	r3, #64	; 0x40
 80063a4:	4619      	mov	r1, r3
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 f8b1 	bl	800650e <GetLineCoding>
 80063ac:	4603      	mov	r3, r0
 80063ae:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80063b0:	7afb      	ldrb	r3, [r7, #11]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d105      	bne.n	80063c2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80063bc:	2102      	movs	r1, #2
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80063c2:	7afb      	ldrb	r3, [r7, #11]
}
 80063c4:	4618      	mov	r0, r3
 80063c6:	3710      	adds	r7, #16
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}

080063cc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80063d4:	2301      	movs	r3, #1
 80063d6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80063d8:	2300      	movs	r3, #0
 80063da:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80063e2:	69db      	ldr	r3, [r3, #28]
 80063e4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80063ec:	2b04      	cmp	r3, #4
 80063ee:	d877      	bhi.n	80064e0 <USBH_CDC_Process+0x114>
 80063f0:	a201      	add	r2, pc, #4	; (adr r2, 80063f8 <USBH_CDC_Process+0x2c>)
 80063f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063f6:	bf00      	nop
 80063f8:	0800640d 	.word	0x0800640d
 80063fc:	08006413 	.word	0x08006413
 8006400:	08006443 	.word	0x08006443
 8006404:	080064b7 	.word	0x080064b7
 8006408:	080064c5 	.word	0x080064c5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800640c:	2300      	movs	r3, #0
 800640e:	73fb      	strb	r3, [r7, #15]
      break;
 8006410:	e06d      	b.n	80064ee <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8006412:	68bb      	ldr	r3, [r7, #8]
 8006414:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006416:	4619      	mov	r1, r3
 8006418:	6878      	ldr	r0, [r7, #4]
 800641a:	f000 f897 	bl	800654c <SetLineCoding>
 800641e:	4603      	mov	r3, r0
 8006420:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006422:	7bbb      	ldrb	r3, [r7, #14]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d104      	bne.n	8006432 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8006428:	68bb      	ldr	r3, [r7, #8]
 800642a:	2202      	movs	r2, #2
 800642c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8006430:	e058      	b.n	80064e4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8006432:	7bbb      	ldrb	r3, [r7, #14]
 8006434:	2b01      	cmp	r3, #1
 8006436:	d055      	beq.n	80064e4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8006438:	68bb      	ldr	r3, [r7, #8]
 800643a:	2204      	movs	r2, #4
 800643c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 8006440:	e050      	b.n	80064e4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	3340      	adds	r3, #64	; 0x40
 8006446:	4619      	mov	r1, r3
 8006448:	6878      	ldr	r0, [r7, #4]
 800644a:	f000 f860 	bl	800650e <GetLineCoding>
 800644e:	4603      	mov	r3, r0
 8006450:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8006452:	7bbb      	ldrb	r3, [r7, #14]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d126      	bne.n	80064a6 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8006466:	68bb      	ldr	r3, [r7, #8]
 8006468:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800646a:	791b      	ldrb	r3, [r3, #4]
 800646c:	429a      	cmp	r2, r3
 800646e:	d13b      	bne.n	80064e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800647a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800647c:	429a      	cmp	r2, r3
 800647e:	d133      	bne.n	80064e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800648a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800648c:	429a      	cmp	r2, r3
 800648e:	d12b      	bne.n	80064e8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006498:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800649a:	429a      	cmp	r2, r3
 800649c:	d124      	bne.n	80064e8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f958 	bl	8006754 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80064a4:	e020      	b.n	80064e8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 80064a6:	7bbb      	ldrb	r3, [r7, #14]
 80064a8:	2b01      	cmp	r3, #1
 80064aa:	d01d      	beq.n	80064e8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 80064ac:	68bb      	ldr	r3, [r7, #8]
 80064ae:	2204      	movs	r2, #4
 80064b0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80064b4:	e018      	b.n	80064e8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80064b6:	6878      	ldr	r0, [r7, #4]
 80064b8:	f000 f867 	bl	800658a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80064bc:	6878      	ldr	r0, [r7, #4]
 80064be:	f000 f8da 	bl	8006676 <CDC_ProcessReception>
      break;
 80064c2:	e014      	b.n	80064ee <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80064c4:	2100      	movs	r1, #0
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 ffef 	bl	80074aa <USBH_ClrFeature>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80064d0:	7bbb      	ldrb	r3, [r7, #14]
 80064d2:	2b00      	cmp	r3, #0
 80064d4:	d10a      	bne.n	80064ec <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 80064de:	e005      	b.n	80064ec <USBH_CDC_Process+0x120>

    default:
      break;
 80064e0:	bf00      	nop
 80064e2:	e004      	b.n	80064ee <USBH_CDC_Process+0x122>
      break;
 80064e4:	bf00      	nop
 80064e6:	e002      	b.n	80064ee <USBH_CDC_Process+0x122>
      break;
 80064e8:	bf00      	nop
 80064ea:	e000      	b.n	80064ee <USBH_CDC_Process+0x122>
      break;
 80064ec:	bf00      	nop

  }

  return status;
 80064ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3710      	adds	r7, #16
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80064f8:	b480      	push	{r7}
 80064fa:	b083      	sub	sp, #12
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	370c      	adds	r7, #12
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr

0800650e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b082      	sub	sp, #8
 8006512:	af00      	add	r7, sp, #0
 8006514:	6078      	str	r0, [r7, #4]
 8006516:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	22a1      	movs	r2, #161	; 0xa1
 800651c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	2221      	movs	r2, #33	; 0x21
 8006522:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2200      	movs	r2, #0
 8006528:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	2200      	movs	r2, #0
 800652e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2207      	movs	r2, #7
 8006534:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	2207      	movs	r2, #7
 800653a:	4619      	mov	r1, r3
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f001 fa81 	bl	8007a44 <USBH_CtlReq>
 8006542:	4603      	mov	r3, r0
}
 8006544:	4618      	mov	r0, r3
 8006546:	3708      	adds	r7, #8
 8006548:	46bd      	mov	sp, r7
 800654a:	bd80      	pop	{r7, pc}

0800654c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b082      	sub	sp, #8
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
 8006554:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2221      	movs	r2, #33	; 0x21
 800655a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2220      	movs	r2, #32
 8006560:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2200      	movs	r2, #0
 8006566:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2200      	movs	r2, #0
 800656c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2207      	movs	r2, #7
 8006572:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8006574:	683b      	ldr	r3, [r7, #0]
 8006576:	2207      	movs	r2, #7
 8006578:	4619      	mov	r1, r3
 800657a:	6878      	ldr	r0, [r7, #4]
 800657c:	f001 fa62 	bl	8007a44 <USBH_CtlReq>
 8006580:	4603      	mov	r3, r0
}
 8006582:	4618      	mov	r0, r3
 8006584:	3708      	adds	r7, #8
 8006586:	46bd      	mov	sp, r7
 8006588:	bd80      	pop	{r7, pc}

0800658a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800658a:	b580      	push	{r7, lr}
 800658c:	b086      	sub	sp, #24
 800658e:	af02      	add	r7, sp, #8
 8006590:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006598:	69db      	ldr	r3, [r3, #28]
 800659a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800659c:	2300      	movs	r3, #0
 800659e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 80065a6:	2b01      	cmp	r3, #1
 80065a8:	d002      	beq.n	80065b0 <CDC_ProcessTransmission+0x26>
 80065aa:	2b02      	cmp	r3, #2
 80065ac:	d023      	beq.n	80065f6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 80065ae:	e05e      	b.n	800666e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	8b12      	ldrh	r2, [r2, #24]
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d90b      	bls.n	80065d4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	69d9      	ldr	r1, [r3, #28]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	8b1a      	ldrh	r2, [r3, #24]
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	7b5b      	ldrb	r3, [r3, #13]
 80065c8:	2001      	movs	r0, #1
 80065ca:	9000      	str	r0, [sp, #0]
 80065cc:	6878      	ldr	r0, [r7, #4]
 80065ce:	f001 fc48 	bl	8007e62 <USBH_BulkSendData>
 80065d2:	e00b      	b.n	80065ec <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        (void)USBH_BulkSendData(phost,
 80065dc:	b29a      	uxth	r2, r3
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	7b5b      	ldrb	r3, [r3, #13]
 80065e2:	2001      	movs	r0, #1
 80065e4:	9000      	str	r0, [sp, #0]
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	f001 fc3b 	bl	8007e62 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2202      	movs	r2, #2
 80065f0:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 80065f4:	e03b      	b.n	800666e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	7b5b      	ldrb	r3, [r3, #13]
 80065fa:	4619      	mov	r1, r3
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f001 ff5f 	bl	80084c0 <USBH_LL_GetURBState>
 8006602:	4603      	mov	r3, r0
 8006604:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8006606:	7afb      	ldrb	r3, [r7, #11]
 8006608:	2b01      	cmp	r3, #1
 800660a:	d128      	bne.n	800665e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006610:	68fa      	ldr	r2, [r7, #12]
 8006612:	8b12      	ldrh	r2, [r2, #24]
 8006614:	4293      	cmp	r3, r2
 8006616:	d90e      	bls.n	8006636 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	8b12      	ldrh	r2, [r2, #24]
 8006620:	1a9a      	subs	r2, r3, r2
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	69db      	ldr	r3, [r3, #28]
 800662a:	68fa      	ldr	r2, [r7, #12]
 800662c:	8b12      	ldrh	r2, [r2, #24]
 800662e:	441a      	add	r2, r3
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	61da      	str	r2, [r3, #28]
 8006634:	e002      	b.n	800663c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	2200      	movs	r2, #0
 800663a:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006640:	2b00      	cmp	r3, #0
 8006642:	d004      	beq.n	800664e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2201      	movs	r2, #1
 8006648:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800664c:	e00e      	b.n	800666c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	2200      	movs	r2, #0
 8006652:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8006656:	6878      	ldr	r0, [r7, #4]
 8006658:	f000 f868 	bl	800672c <USBH_CDC_TransmitCallback>
      break;
 800665c:	e006      	b.n	800666c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800665e:	7afb      	ldrb	r3, [r7, #11]
 8006660:	2b02      	cmp	r3, #2
 8006662:	d103      	bne.n	800666c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 800666c:	bf00      	nop
  }
}
 800666e:	bf00      	nop
 8006670:	3710      	adds	r7, #16
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}

08006676 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8006676:	b580      	push	{r7, lr}
 8006678:	b086      	sub	sp, #24
 800667a:	af00      	add	r7, sp, #0
 800667c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006684:	69db      	ldr	r3, [r3, #28]
 8006686:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8006688:	2300      	movs	r3, #0
 800668a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8006692:	2b03      	cmp	r3, #3
 8006694:	d002      	beq.n	800669c <CDC_ProcessReception+0x26>
 8006696:	2b04      	cmp	r3, #4
 8006698:	d00e      	beq.n	80066b8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800669a:	e043      	b.n	8006724 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	6a19      	ldr	r1, [r3, #32]
 80066a0:	697b      	ldr	r3, [r7, #20]
 80066a2:	8b5a      	ldrh	r2, [r3, #26]
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	7b1b      	ldrb	r3, [r3, #12]
 80066a8:	6878      	ldr	r0, [r7, #4]
 80066aa:	f001 fbff 	bl	8007eac <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	2204      	movs	r2, #4
 80066b2:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 80066b6:	e035      	b.n	8006724 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	7b1b      	ldrb	r3, [r3, #12]
 80066bc:	4619      	mov	r1, r3
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f001 fefe 	bl	80084c0 <USBH_LL_GetURBState>
 80066c4:	4603      	mov	r3, r0
 80066c6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80066c8:	7cfb      	ldrb	r3, [r7, #19]
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	d129      	bne.n	8006722 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	7b1b      	ldrb	r3, [r3, #12]
 80066d2:	4619      	mov	r1, r3
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f001 fe61 	bl	800839c <USBH_LL_GetLastXferSize>
 80066da:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 80066dc:	697b      	ldr	r3, [r7, #20]
 80066de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d016      	beq.n	8006714 <CDC_ProcessReception+0x9e>
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	8b5b      	ldrh	r3, [r3, #26]
 80066ea:	461a      	mov	r2, r3
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	4293      	cmp	r3, r2
 80066f0:	d910      	bls.n	8006714 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 80066f2:	697b      	ldr	r3, [r7, #20]
 80066f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	1ad2      	subs	r2, r2, r3
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	6a1a      	ldr	r2, [r3, #32]
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	441a      	add	r2, r3
 8006706:	697b      	ldr	r3, [r7, #20]
 8006708:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	2203      	movs	r2, #3
 800670e:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8006712:	e006      	b.n	8006722 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8006714:	697b      	ldr	r3, [r7, #20]
 8006716:	2200      	movs	r2, #0
 8006718:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800671c:	6878      	ldr	r0, [r7, #4]
 800671e:	f000 f80f 	bl	8006740 <USBH_CDC_ReceiveCallback>
      break;
 8006722:	bf00      	nop
  }
}
 8006724:	bf00      	nop
 8006726:	3718      	adds	r7, #24
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                               uint8_t id), uint8_t id)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b084      	sub	sp, #16
 800676c:	af00      	add	r7, sp, #0
 800676e:	60f8      	str	r0, [r7, #12]
 8006770:	60b9      	str	r1, [r7, #8]
 8006772:	4613      	mov	r3, r2
 8006774:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d101      	bne.n	8006780 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800677c:	2302      	movs	r3, #2
 800677e:	e029      	b.n	80067d4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	79fa      	ldrb	r2, [r7, #7]
 8006784:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2200      	movs	r2, #0
 800678c:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8006798:	68f8      	ldr	r0, [r7, #12]
 800679a:	f000 f81f 	bl	80067dc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2200      	movs	r2, #0
 80067a2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	2200      	movs	r2, #0
 80067aa:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80067be:	68bb      	ldr	r3, [r7, #8]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d003      	beq.n	80067cc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f001 fd31 	bl	8008234 <USBH_LL_Init>

  return USBH_OK;
 80067d2:	2300      	movs	r3, #0
}
 80067d4:	4618      	mov	r0, r3
 80067d6:	3710      	adds	r7, #16
 80067d8:	46bd      	mov	sp, r7
 80067da:	bd80      	pop	{r7, pc}

080067dc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80067dc:	b480      	push	{r7}
 80067de:	b085      	sub	sp, #20
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80067e4:	2300      	movs	r3, #0
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]
 80067ec:	e009      	b.n	8006802 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	33e0      	adds	r3, #224	; 0xe0
 80067f4:	009b      	lsls	r3, r3, #2
 80067f6:	4413      	add	r3, r2
 80067f8:	2200      	movs	r2, #0
 80067fa:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	3301      	adds	r3, #1
 8006800:	60fb      	str	r3, [r7, #12]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	2b0f      	cmp	r3, #15
 8006806:	d9f2      	bls.n	80067ee <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8006808:	2300      	movs	r3, #0
 800680a:	60fb      	str	r3, [r7, #12]
 800680c:	e009      	b.n	8006822 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 800680e:	687a      	ldr	r2, [r7, #4]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	4413      	add	r3, r2
 8006814:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8006818:	2200      	movs	r2, #0
 800681a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	3301      	adds	r3, #1
 8006820:	60fb      	str	r3, [r7, #12]
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006828:	d3f1      	bcc.n	800680e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2200      	movs	r2, #0
 800682e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2201      	movs	r2, #1
 800683a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2200      	movs	r2, #0
 8006840:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	2201      	movs	r2, #1
 8006848:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	2240      	movs	r2, #64	; 0x40
 800684e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2200      	movs	r2, #0
 8006854:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2200      	movs	r2, #0
 800685a:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8006876:	2300      	movs	r3, #0
}
 8006878:	4618      	mov	r0, r3
 800687a:	3714      	adds	r7, #20
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8006884:	b480      	push	{r7}
 8006886:	b085      	sub	sp, #20
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d016      	beq.n	80068c6 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d10e      	bne.n	80068c0 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 80068a8:	1c59      	adds	r1, r3, #1
 80068aa:	687a      	ldr	r2, [r7, #4]
 80068ac:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 80068b0:	687a      	ldr	r2, [r7, #4]
 80068b2:	33de      	adds	r3, #222	; 0xde
 80068b4:	6839      	ldr	r1, [r7, #0]
 80068b6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80068ba:	2300      	movs	r3, #0
 80068bc:	73fb      	strb	r3, [r7, #15]
 80068be:	e004      	b.n	80068ca <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80068c0:	2302      	movs	r3, #2
 80068c2:	73fb      	strb	r3, [r7, #15]
 80068c4:	e001      	b.n	80068ca <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80068c6:	2302      	movs	r3, #2
 80068c8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80068ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3714      	adds	r7, #20
 80068d0:	46bd      	mov	sp, r7
 80068d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d6:	4770      	bx	lr

080068d8 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 80068d8:	b480      	push	{r7}
 80068da:	b085      	sub	sp, #20
 80068dc:	af00      	add	r7, sp, #0
 80068de:	6078      	str	r0, [r7, #4]
 80068e0:	460b      	mov	r3, r1
 80068e2:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 80068e4:	2300      	movs	r3, #0
 80068e6:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 80068ee:	78fa      	ldrb	r2, [r7, #3]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d204      	bcs.n	80068fe <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	78fa      	ldrb	r2, [r7, #3]
 80068f8:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 80068fc:	e001      	b.n	8006902 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 80068fe:	2302      	movs	r3, #2
 8006900:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8006902:	7bfb      	ldrb	r3, [r7, #15]
}
 8006904:	4618      	mov	r0, r3
 8006906:	3714      	adds	r7, #20
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8006910:	b480      	push	{r7}
 8006912:	b087      	sub	sp, #28
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	4608      	mov	r0, r1
 800691a:	4611      	mov	r1, r2
 800691c:	461a      	mov	r2, r3
 800691e:	4603      	mov	r3, r0
 8006920:	70fb      	strb	r3, [r7, #3]
 8006922:	460b      	mov	r3, r1
 8006924:	70bb      	strb	r3, [r7, #2]
 8006926:	4613      	mov	r3, r2
 8006928:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 800692a:	2300      	movs	r3, #0
 800692c:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800692e:	2300      	movs	r3, #0
 8006930:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8006938:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 800693a:	e025      	b.n	8006988 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800693c:	7dfb      	ldrb	r3, [r7, #23]
 800693e:	221a      	movs	r2, #26
 8006940:	fb02 f303 	mul.w	r3, r2, r3
 8006944:	3308      	adds	r3, #8
 8006946:	68fa      	ldr	r2, [r7, #12]
 8006948:	4413      	add	r3, r2
 800694a:	3302      	adds	r3, #2
 800694c:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	795b      	ldrb	r3, [r3, #5]
 8006952:	78fa      	ldrb	r2, [r7, #3]
 8006954:	429a      	cmp	r2, r3
 8006956:	d002      	beq.n	800695e <USBH_FindInterface+0x4e>
 8006958:	78fb      	ldrb	r3, [r7, #3]
 800695a:	2bff      	cmp	r3, #255	; 0xff
 800695c:	d111      	bne.n	8006982 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800695e:	693b      	ldr	r3, [r7, #16]
 8006960:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8006962:	78ba      	ldrb	r2, [r7, #2]
 8006964:	429a      	cmp	r2, r3
 8006966:	d002      	beq.n	800696e <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006968:	78bb      	ldrb	r3, [r7, #2]
 800696a:	2bff      	cmp	r3, #255	; 0xff
 800696c:	d109      	bne.n	8006982 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8006972:	787a      	ldrb	r2, [r7, #1]
 8006974:	429a      	cmp	r2, r3
 8006976:	d002      	beq.n	800697e <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8006978:	787b      	ldrb	r3, [r7, #1]
 800697a:	2bff      	cmp	r3, #255	; 0xff
 800697c:	d101      	bne.n	8006982 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 800697e:	7dfb      	ldrb	r3, [r7, #23]
 8006980:	e006      	b.n	8006990 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8006982:	7dfb      	ldrb	r3, [r7, #23]
 8006984:	3301      	adds	r3, #1
 8006986:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8006988:	7dfb      	ldrb	r3, [r7, #23]
 800698a:	2b01      	cmp	r3, #1
 800698c:	d9d6      	bls.n	800693c <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 800698e:	23ff      	movs	r3, #255	; 0xff
}
 8006990:	4618      	mov	r0, r3
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b082      	sub	sp, #8
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80069a4:	6878      	ldr	r0, [r7, #4]
 80069a6:	f001 fc81 	bl	80082ac <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80069aa:	2101      	movs	r1, #1
 80069ac:	6878      	ldr	r0, [r7, #4]
 80069ae:	f001 fd9a 	bl	80084e6 <USBH_LL_DriverVBUS>

  return USBH_OK;
 80069b2:	2300      	movs	r3, #0
}
 80069b4:	4618      	mov	r0, r3
 80069b6:	3708      	adds	r7, #8
 80069b8:	46bd      	mov	sp, r7
 80069ba:	bd80      	pop	{r7, pc}

080069bc <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Process(USBH_HandleTypeDef *phost)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b088      	sub	sp, #32
 80069c0:	af04      	add	r7, sp, #16
 80069c2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80069c4:	2302      	movs	r3, #2
 80069c6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80069c8:	2300      	movs	r3, #0
 80069ca:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f893 3321 	ldrb.w	r3, [r3, #801]	; 0x321
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d102      	bne.n	80069de <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2203      	movs	r2, #3
 80069dc:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	781b      	ldrb	r3, [r3, #0]
 80069e2:	b2db      	uxtb	r3, r3
 80069e4:	2b0b      	cmp	r3, #11
 80069e6:	f200 81be 	bhi.w	8006d66 <USBH_Process+0x3aa>
 80069ea:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <USBH_Process+0x34>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a21 	.word	0x08006a21
 80069f4:	08006a53 	.word	0x08006a53
 80069f8:	08006abb 	.word	0x08006abb
 80069fc:	08006d01 	.word	0x08006d01
 8006a00:	08006d67 	.word	0x08006d67
 8006a04:	08006b5f 	.word	0x08006b5f
 8006a08:	08006ca7 	.word	0x08006ca7
 8006a0c:	08006b95 	.word	0x08006b95
 8006a10:	08006bb5 	.word	0x08006bb5
 8006a14:	08006bd5 	.word	0x08006bd5
 8006a18:	08006c19 	.word	0x08006c19
 8006a1c:	08006ce9 	.word	0x08006ce9
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	f893 3320 	ldrb.w	r3, [r3, #800]	; 0x320
 8006a26:	b2db      	uxtb	r3, r3
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	f000 819e 	beq.w	8006d6a <USBH_Process+0x3ae>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8006a34:	20c8      	movs	r0, #200	; 0xc8
 8006a36:	f001 fd9d 	bl	8008574 <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f001 fc93 	bl	8008366 <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
        phost->Timeout = 0U;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006a50:	e18b      	b.n	8006d6a <USBH_Process+0x3ae>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	f893 3323 	ldrb.w	r3, [r3, #803]	; 0x323
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d107      	bne.n	8006a6c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	2200      	movs	r2, #0
 8006a60:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2202      	movs	r2, #2
 8006a68:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006a6a:	e18d      	b.n	8006d88 <USBH_Process+0x3cc>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006a72:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8006a76:	d914      	bls.n	8006aa2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006a7e:	3301      	adds	r3, #1
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
          if (phost->device.RstCnt > 3U)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	f893 331f 	ldrb.w	r3, [r3, #799]	; 0x31f
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d903      	bls.n	8006a9a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	220d      	movs	r2, #13
 8006a96:	701a      	strb	r2, [r3, #0]
      break;
 8006a98:	e176      	b.n	8006d88 <USBH_Process+0x3cc>
            phost->gState = HOST_IDLE;
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	2200      	movs	r2, #0
 8006a9e:	701a      	strb	r2, [r3, #0]
      break;
 8006aa0:	e172      	b.n	8006d88 <USBH_Process+0x3cc>
          phost->Timeout += 10U;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	; 0x3c8
 8006aa8:	f103 020a 	add.w	r2, r3, #10
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	f8c3 23c8 	str.w	r2, [r3, #968]	; 0x3c8
          USBH_Delay(10U);
 8006ab2:	200a      	movs	r0, #10
 8006ab4:	f001 fd5e 	bl	8008574 <USBH_Delay>
      break;
 8006ab8:	e166      	b.n	8006d88 <USBH_Process+0x3cc>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d005      	beq.n	8006ad0 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006aca:	2104      	movs	r1, #4
 8006acc:	6878      	ldr	r0, [r7, #4]
 8006ace:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8006ad0:	2064      	movs	r0, #100	; 0x64
 8006ad2:	f001 fd4f 	bl	8008574 <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f001 fc1e 	bl	8008318 <USBH_LL_GetSpeed>
 8006adc:	4603      	mov	r3, r0
 8006ade:	461a      	mov	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d

      phost->gState = HOST_ENUMERATION;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2205      	movs	r2, #5
 8006aea:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8006aec:	2100      	movs	r1, #0
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f001 fa29 	bl	8007f46 <USBH_AllocPipe>
 8006af4:	4603      	mov	r3, r0
 8006af6:	461a      	mov	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8006afc:	2180      	movs	r1, #128	; 0x80
 8006afe:	6878      	ldr	r0, [r7, #4]
 8006b00:	f001 fa21 	bl	8007f46 <USBH_AllocPipe>
 8006b04:	4603      	mov	r3, r0
 8006b06:	461a      	mov	r2, r3
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	7919      	ldrb	r1, [r3, #4]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b1c:	687a      	ldr	r2, [r7, #4]
 8006b1e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8006b20:	b292      	uxth	r2, r2
 8006b22:	9202      	str	r2, [sp, #8]
 8006b24:	2200      	movs	r2, #0
 8006b26:	9201      	str	r2, [sp, #4]
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	4603      	mov	r3, r0
 8006b2c:	2280      	movs	r2, #128	; 0x80
 8006b2e:	6878      	ldr	r0, [r7, #4]
 8006b30:	f001 f9da 	bl	8007ee8 <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	7959      	ldrb	r1, [r3, #5]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8006b44:	687a      	ldr	r2, [r7, #4]
 8006b46:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8006b48:	b292      	uxth	r2, r2
 8006b4a:	9202      	str	r2, [sp, #8]
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	9201      	str	r2, [sp, #4]
 8006b50:	9300      	str	r3, [sp, #0]
 8006b52:	4603      	mov	r3, r0
 8006b54:	2200      	movs	r2, #0
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f001 f9c6 	bl	8007ee8 <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006b5c:	e114      	b.n	8006d88 <USBH_Process+0x3cc>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8006b5e:	6878      	ldr	r0, [r7, #4]
 8006b60:	f000 f918 	bl	8006d94 <USBH_HandleEnum>
 8006b64:	4603      	mov	r3, r0
 8006b66:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	b2db      	uxtb	r3, r3
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	f040 80fe 	bne.w	8006d6e <USBH_Process+0x3b2>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	2200      	movs	r2, #0
 8006b76:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3337 	ldrb.w	r3, [r3, #823]	; 0x337
 8006b80:	2b01      	cmp	r3, #1
 8006b82:	d103      	bne.n	8006b8c <USBH_Process+0x1d0>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2208      	movs	r2, #8
 8006b88:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8006b8a:	e0f0      	b.n	8006d6e <USBH_Process+0x3b2>
          phost->gState = HOST_INPUT;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2207      	movs	r2, #7
 8006b90:	701a      	strb	r2, [r3, #0]
      break;
 8006b92:	e0ec      	b.n	8006d6e <USBH_Process+0x3b2>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 80e9 	beq.w	8006d72 <USBH_Process+0x3b6>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006ba6:	2101      	movs	r1, #1
 8006ba8:	6878      	ldr	r0, [r7, #4]
 8006baa:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	2208      	movs	r2, #8
 8006bb0:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8006bb2:	e0de      	b.n	8006d72 <USBH_Process+0x3b6>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f893 333d 	ldrb.w	r3, [r3, #829]	; 0x33d
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	4619      	mov	r1, r3
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f000 fc2c 	bl	800741c <USBH_SetCfg>
 8006bc4:	4603      	mov	r3, r0
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	f040 80d5 	bne.w	8006d76 <USBH_Process+0x3ba>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2209      	movs	r2, #9
 8006bd0:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006bd2:	e0d0      	b.n	8006d76 <USBH_Process+0x3ba>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	f893 333f 	ldrb.w	r3, [r3, #831]	; 0x33f
 8006bda:	f003 0320 	and.w	r3, r3, #32
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d016      	beq.n	8006c10 <USBH_Process+0x254>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8006be2:	2101      	movs	r1, #1
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fc3c 	bl	8007462 <USBH_SetFeature>
 8006bea:	4603      	mov	r3, r0
 8006bec:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006bee:	7bbb      	ldrb	r3, [r7, #14]
 8006bf0:	b2db      	uxtb	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d103      	bne.n	8006bfe <USBH_Process+0x242>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	220a      	movs	r2, #10
 8006bfa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006bfc:	e0bd      	b.n	8006d7a <USBH_Process+0x3be>
        else if (status == USBH_NOT_SUPPORTED)
 8006bfe:	7bbb      	ldrb	r3, [r7, #14]
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	f040 80b9 	bne.w	8006d7a <USBH_Process+0x3be>
          phost->gState = HOST_CHECK_CLASS;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	220a      	movs	r2, #10
 8006c0c:	701a      	strb	r2, [r3, #0]
      break;
 8006c0e:	e0b4      	b.n	8006d7a <USBH_Process+0x3be>
        phost->gState = HOST_CHECK_CLASS;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	220a      	movs	r2, #10
 8006c14:	701a      	strb	r2, [r3, #0]
      break;
 8006c16:	e0b0      	b.n	8006d7a <USBH_Process+0x3be>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	f000 80ad 	beq.w	8006d7e <USBH_Process+0x3c2>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2200      	movs	r2, #0
 8006c28:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c2c:	2300      	movs	r3, #0
 8006c2e:	73fb      	strb	r3, [r7, #15]
 8006c30:	e016      	b.n	8006c60 <USBH_Process+0x2a4>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8006c32:	7bfa      	ldrb	r2, [r7, #15]
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	32de      	adds	r2, #222	; 0xde
 8006c38:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3c:	791a      	ldrb	r2, [r3, #4]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	f893 3347 	ldrb.w	r3, [r3, #839]	; 0x347
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d108      	bne.n	8006c5a <USBH_Process+0x29e>
          {
            phost->pActiveClass = phost->pClass[idx];
 8006c48:	7bfa      	ldrb	r2, [r7, #15]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	32de      	adds	r2, #222	; 0xde
 8006c4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
            break;
 8006c58:	e005      	b.n	8006c66 <USBH_Process+0x2aa>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8006c5a:	7bfb      	ldrb	r3, [r7, #15]
 8006c5c:	3301      	adds	r3, #1
 8006c5e:	73fb      	strb	r3, [r7, #15]
 8006c60:	7bfb      	ldrb	r3, [r7, #15]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d0e5      	beq.n	8006c32 <USBH_Process+0x276>
          }
        }

        if (phost->pActiveClass != NULL)
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d016      	beq.n	8006c9e <USBH_Process+0x2e2>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006c76:	689b      	ldr	r3, [r3, #8]
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	4798      	blx	r3
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d109      	bne.n	8006c96 <USBH_Process+0x2da>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2206      	movs	r2, #6
 8006c86:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006c8e:	2103      	movs	r1, #3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006c94:	e073      	b.n	8006d7e <USBH_Process+0x3c2>
            phost->gState = HOST_ABORT_STATE;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	220d      	movs	r2, #13
 8006c9a:	701a      	strb	r2, [r3, #0]
      break;
 8006c9c:	e06f      	b.n	8006d7e <USBH_Process+0x3c2>
          phost->gState = HOST_ABORT_STATE;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	220d      	movs	r2, #13
 8006ca2:	701a      	strb	r2, [r3, #0]
      break;
 8006ca4:	e06b      	b.n	8006d7e <USBH_Process+0x3c2>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d017      	beq.n	8006ce0 <USBH_Process+0x324>
      {
        status = phost->pActiveClass->Requests(phost);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	6878      	ldr	r0, [r7, #4]
 8006cba:	4798      	blx	r3
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8006cc0:	7bbb      	ldrb	r3, [r7, #14]
 8006cc2:	b2db      	uxtb	r3, r3
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d103      	bne.n	8006cd0 <USBH_Process+0x314>
        {
          phost->gState = HOST_CLASS;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	220b      	movs	r2, #11
 8006ccc:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006cce:	e058      	b.n	8006d82 <USBH_Process+0x3c6>
        else if (status == USBH_FAIL)
 8006cd0:	7bbb      	ldrb	r3, [r7, #14]
 8006cd2:	b2db      	uxtb	r3, r3
 8006cd4:	2b02      	cmp	r3, #2
 8006cd6:	d154      	bne.n	8006d82 <USBH_Process+0x3c6>
          phost->gState = HOST_ABORT_STATE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	220d      	movs	r2, #13
 8006cdc:	701a      	strb	r2, [r3, #0]
      break;
 8006cde:	e050      	b.n	8006d82 <USBH_Process+0x3c6>
        phost->gState = HOST_ABORT_STATE;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	220d      	movs	r2, #13
 8006ce4:	701a      	strb	r2, [r3, #0]
      break;
 8006ce6:	e04c      	b.n	8006d82 <USBH_Process+0x3c6>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d049      	beq.n	8006d86 <USBH_Process+0x3ca>
      {
        phost->pActiveClass->BgndProcess(phost);
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	4798      	blx	r3
      }
      break;
 8006cfe:	e042      	b.n	8006d86 <USBH_Process+0x3ca>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2200      	movs	r2, #0
 8006d04:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321

      (void)DeInitStateMachine(phost);
 8006d08:	6878      	ldr	r0, [r7, #4]
 8006d0a:	f7ff fd67 	bl	80067dc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d009      	beq.n	8006d2c <USBH_Process+0x370>
      {
        phost->pActiveClass->DeInit(phost);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8006d1e:	68db      	ldr	r3, [r3, #12]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2200      	movs	r2, #0
 8006d28:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
      }

      if (phost->pUser != NULL)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d005      	beq.n	8006d42 <USBH_Process+0x386>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8006d3c:	2105      	movs	r1, #5
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3322 	ldrb.w	r3, [r3, #802]	; 0x322
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b01      	cmp	r3, #1
 8006d4c:	d107      	bne.n	8006d5e <USBH_Process+0x3a2>
      {
        phost->device.is_ReEnumerated = 0U;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2200      	movs	r2, #0
 8006d52:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8006d56:	6878      	ldr	r0, [r7, #4]
 8006d58:	f7ff fe20 	bl	800699c <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8006d5c:	e014      	b.n	8006d88 <USBH_Process+0x3cc>
        (void)USBH_LL_Start(phost);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f001 faa4 	bl	80082ac <USBH_LL_Start>
      break;
 8006d64:	e010      	b.n	8006d88 <USBH_Process+0x3cc>

    case HOST_ABORT_STATE:
    default :
      break;
 8006d66:	bf00      	nop
 8006d68:	e00e      	b.n	8006d88 <USBH_Process+0x3cc>
      break;
 8006d6a:	bf00      	nop
 8006d6c:	e00c      	b.n	8006d88 <USBH_Process+0x3cc>
      break;
 8006d6e:	bf00      	nop
 8006d70:	e00a      	b.n	8006d88 <USBH_Process+0x3cc>
    break;
 8006d72:	bf00      	nop
 8006d74:	e008      	b.n	8006d88 <USBH_Process+0x3cc>
      break;
 8006d76:	bf00      	nop
 8006d78:	e006      	b.n	8006d88 <USBH_Process+0x3cc>
      break;
 8006d7a:	bf00      	nop
 8006d7c:	e004      	b.n	8006d88 <USBH_Process+0x3cc>
      break;
 8006d7e:	bf00      	nop
 8006d80:	e002      	b.n	8006d88 <USBH_Process+0x3cc>
      break;
 8006d82:	bf00      	nop
 8006d84:	e000      	b.n	8006d88 <USBH_Process+0x3cc>
      break;
 8006d86:	bf00      	nop
  }
  return USBH_OK;
 8006d88:	2300      	movs	r3, #0
}
 8006d8a:	4618      	mov	r0, r3
 8006d8c:	3710      	adds	r7, #16
 8006d8e:	46bd      	mov	sp, r7
 8006d90:	bd80      	pop	{r7, pc}
 8006d92:	bf00      	nop

08006d94 <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8006d94:	b580      	push	{r7, lr}
 8006d96:	b088      	sub	sp, #32
 8006d98:	af04      	add	r7, sp, #16
 8006d9a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8006da0:	2301      	movs	r3, #1
 8006da2:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	785b      	ldrb	r3, [r3, #1]
 8006da8:	2b07      	cmp	r3, #7
 8006daa:	f200 81c1 	bhi.w	8007130 <USBH_HandleEnum+0x39c>
 8006dae:	a201      	add	r2, pc, #4	; (adr r2, 8006db4 <USBH_HandleEnum+0x20>)
 8006db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006db4:	08006dd5 	.word	0x08006dd5
 8006db8:	08006e93 	.word	0x08006e93
 8006dbc:	08006efd 	.word	0x08006efd
 8006dc0:	08006f8b 	.word	0x08006f8b
 8006dc4:	08006ff5 	.word	0x08006ff5
 8006dc8:	08007065 	.word	0x08007065
 8006dcc:	080070ab 	.word	0x080070ab
 8006dd0:	080070f1 	.word	0x080070f1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8006dd4:	2108      	movs	r1, #8
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fa50 	bl	800727c <USBH_Get_DevDesc>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006de0:	7bbb      	ldrb	r3, [r7, #14]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d130      	bne.n	8006e48 <USBH_HandleEnum+0xb4>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	f893 232d 	ldrb.w	r2, [r3, #813]	; 0x32d
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2201      	movs	r2, #1
 8006df4:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	7919      	ldrb	r1, [r3, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8006e0a:	b292      	uxth	r2, r2
 8006e0c:	9202      	str	r2, [sp, #8]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	9201      	str	r2, [sp, #4]
 8006e12:	9300      	str	r3, [sp, #0]
 8006e14:	4603      	mov	r3, r0
 8006e16:	2280      	movs	r2, #128	; 0x80
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f001 f865 	bl	8007ee8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	7959      	ldrb	r1, [r3, #5]
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006e2e:	687a      	ldr	r2, [r7, #4]
 8006e30:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006e32:	b292      	uxth	r2, r2
 8006e34:	9202      	str	r2, [sp, #8]
 8006e36:	2200      	movs	r2, #0
 8006e38:	9201      	str	r2, [sp, #4]
 8006e3a:	9300      	str	r3, [sp, #0]
 8006e3c:	4603      	mov	r3, r0
 8006e3e:	2200      	movs	r2, #0
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 f851 	bl	8007ee8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006e46:	e175      	b.n	8007134 <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006e48:	7bbb      	ldrb	r3, [r7, #14]
 8006e4a:	2b03      	cmp	r3, #3
 8006e4c:	f040 8172 	bne.w	8007134 <USBH_HandleEnum+0x3a0>
        phost->device.EnumCnt++;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e56:	3301      	adds	r3, #1
 8006e58:	b2da      	uxtb	r2, r3
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006e66:	2b03      	cmp	r3, #3
 8006e68:	d903      	bls.n	8006e72 <USBH_HandleEnum+0xde>
          phost->gState = HOST_ABORT_STATE;
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	220d      	movs	r2, #13
 8006e6e:	701a      	strb	r2, [r3, #0]
      break;
 8006e70:	e160      	b.n	8007134 <USBH_HandleEnum+0x3a0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	795b      	ldrb	r3, [r3, #5]
 8006e76:	4619      	mov	r1, r3
 8006e78:	6878      	ldr	r0, [r7, #4]
 8006e7a:	f001 f885 	bl	8007f88 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	791b      	ldrb	r3, [r3, #4]
 8006e82:	4619      	mov	r1, r3
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f001 f87f 	bl	8007f88 <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	701a      	strb	r2, [r3, #0]
      break;
 8006e90:	e150      	b.n	8007134 <USBH_HandleEnum+0x3a0>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8006e92:	2112      	movs	r1, #18
 8006e94:	6878      	ldr	r0, [r7, #4]
 8006e96:	f000 f9f1 	bl	800727c <USBH_Get_DevDesc>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006e9e:	7bbb      	ldrb	r3, [r7, #14]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d103      	bne.n	8006eac <USBH_HandleEnum+0x118>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2202      	movs	r2, #2
 8006ea8:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006eaa:	e145      	b.n	8007138 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006eac:	7bbb      	ldrb	r3, [r7, #14]
 8006eae:	2b03      	cmp	r3, #3
 8006eb0:	f040 8142 	bne.w	8007138 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006eba:	3301      	adds	r3, #1
 8006ebc:	b2da      	uxtb	r2, r3
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006eca:	2b03      	cmp	r3, #3
 8006ecc:	d903      	bls.n	8006ed6 <USBH_HandleEnum+0x142>
          phost->gState = HOST_ABORT_STATE;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	220d      	movs	r2, #13
 8006ed2:	701a      	strb	r2, [r3, #0]
      break;
 8006ed4:	e130      	b.n	8007138 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	795b      	ldrb	r3, [r3, #5]
 8006eda:	4619      	mov	r1, r3
 8006edc:	6878      	ldr	r0, [r7, #4]
 8006ede:	f001 f853 	bl	8007f88 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	791b      	ldrb	r3, [r3, #4]
 8006ee6:	4619      	mov	r1, r3
 8006ee8:	6878      	ldr	r0, [r7, #4]
 8006eea:	f001 f84d 	bl	8007f88 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	701a      	strb	r2, [r3, #0]
      break;
 8006efa:	e11d      	b.n	8007138 <USBH_HandleEnum+0x3a4>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8006efc:	2101      	movs	r1, #1
 8006efe:	6878      	ldr	r0, [r7, #4]
 8006f00:	f000 fa68 	bl	80073d4 <USBH_SetAddress>
 8006f04:	4603      	mov	r3, r0
 8006f06:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f08:	7bbb      	ldrb	r3, [r7, #14]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d132      	bne.n	8006f74 <USBH_HandleEnum+0x1e0>
      {
        USBH_Delay(2U);
 8006f0e:	2002      	movs	r0, #2
 8006f10:	f001 fb30 	bl	8008574 <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	2201      	movs	r2, #1
 8006f18:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	2203      	movs	r2, #3
 8006f20:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	7919      	ldrb	r1, [r3, #4]
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8006f36:	b292      	uxth	r2, r2
 8006f38:	9202      	str	r2, [sp, #8]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	9201      	str	r2, [sp, #4]
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	4603      	mov	r3, r0
 8006f42:	2280      	movs	r2, #128	; 0x80
 8006f44:	6878      	ldr	r0, [r7, #4]
 8006f46:	f000 ffcf 	bl	8007ee8 <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	7959      	ldrb	r1, [r3, #5]
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f893 031c 	ldrb.w	r0, [r3, #796]	; 0x31c
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8006f5a:	687a      	ldr	r2, [r7, #4]
 8006f5c:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8006f5e:	b292      	uxth	r2, r2
 8006f60:	9202      	str	r2, [sp, #8]
 8006f62:	2200      	movs	r2, #0
 8006f64:	9201      	str	r2, [sp, #4]
 8006f66:	9300      	str	r3, [sp, #0]
 8006f68:	4603      	mov	r3, r0
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	6878      	ldr	r0, [r7, #4]
 8006f6e:	f000 ffbb 	bl	8007ee8 <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8006f72:	e0e3      	b.n	800713c <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006f74:	7bbb      	ldrb	r3, [r7, #14]
 8006f76:	2b03      	cmp	r3, #3
 8006f78:	f040 80e0 	bne.w	800713c <USBH_HandleEnum+0x3a8>
        phost->gState = HOST_ABORT_STATE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	220d      	movs	r2, #13
 8006f80:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	705a      	strb	r2, [r3, #1]
      break;
 8006f88:	e0d8      	b.n	800713c <USBH_HandleEnum+0x3a8>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8006f8a:	2109      	movs	r1, #9
 8006f8c:	6878      	ldr	r0, [r7, #4]
 8006f8e:	f000 f99d 	bl	80072cc <USBH_Get_CfgDesc>
 8006f92:	4603      	mov	r3, r0
 8006f94:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8006f96:	7bbb      	ldrb	r3, [r7, #14]
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d103      	bne.n	8006fa4 <USBH_HandleEnum+0x210>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	2204      	movs	r2, #4
 8006fa0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8006fa2:	e0cd      	b.n	8007140 <USBH_HandleEnum+0x3ac>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8006fa4:	7bbb      	ldrb	r3, [r7, #14]
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	f040 80ca 	bne.w	8007140 <USBH_HandleEnum+0x3ac>
        phost->device.EnumCnt++;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	b2da      	uxtb	r2, r3
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8006fc2:	2b03      	cmp	r3, #3
 8006fc4:	d903      	bls.n	8006fce <USBH_HandleEnum+0x23a>
          phost->gState = HOST_ABORT_STATE;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	220d      	movs	r2, #13
 8006fca:	701a      	strb	r2, [r3, #0]
      break;
 8006fcc:	e0b8      	b.n	8007140 <USBH_HandleEnum+0x3ac>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	795b      	ldrb	r3, [r3, #5]
 8006fd2:	4619      	mov	r1, r3
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 ffd7 	bl	8007f88 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	791b      	ldrb	r3, [r3, #4]
 8006fde:	4619      	mov	r1, r3
 8006fe0:	6878      	ldr	r0, [r7, #4]
 8006fe2:	f000 ffd1 	bl	8007f88 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2200      	movs	r2, #0
 8006ff0:	701a      	strb	r2, [r3, #0]
      break;
 8006ff2:	e0a5      	b.n	8007140 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	; 0x33a
 8006ffa:	4619      	mov	r1, r3
 8006ffc:	6878      	ldr	r0, [r7, #4]
 8006ffe:	f000 f965 	bl	80072cc <USBH_Get_CfgDesc>
 8007002:	4603      	mov	r3, r0
 8007004:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8007006:	7bbb      	ldrb	r3, [r7, #14]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d103      	bne.n	8007014 <USBH_HandleEnum+0x280>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	2205      	movs	r2, #5
 8007010:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8007012:	e097      	b.n	8007144 <USBH_HandleEnum+0x3b0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007014:	7bbb      	ldrb	r3, [r7, #14]
 8007016:	2b03      	cmp	r3, #3
 8007018:	f040 8094 	bne.w	8007144 <USBH_HandleEnum+0x3b0>
        phost->device.EnumCnt++;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007022:	3301      	adds	r3, #1
 8007024:	b2da      	uxtb	r2, r3
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e
        if (phost->device.EnumCnt > 3U)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 331e 	ldrb.w	r3, [r3, #798]	; 0x31e
 8007032:	2b03      	cmp	r3, #3
 8007034:	d903      	bls.n	800703e <USBH_HandleEnum+0x2aa>
          phost->gState = HOST_ABORT_STATE;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	220d      	movs	r2, #13
 800703a:	701a      	strb	r2, [r3, #0]
      break;
 800703c:	e082      	b.n	8007144 <USBH_HandleEnum+0x3b0>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	795b      	ldrb	r3, [r3, #5]
 8007042:	4619      	mov	r1, r3
 8007044:	6878      	ldr	r0, [r7, #4]
 8007046:	f000 ff9f 	bl	8007f88 <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	791b      	ldrb	r3, [r3, #4]
 800704e:	4619      	mov	r1, r3
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 ff99 	bl	8007f88 <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	2200      	movs	r2, #0
 800705a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2200      	movs	r2, #0
 8007060:	701a      	strb	r2, [r3, #0]
      break;
 8007062:	e06f      	b.n	8007144 <USBH_HandleEnum+0x3b0>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 3334 	ldrb.w	r3, [r3, #820]	; 0x334
 800706a:	2b00      	cmp	r3, #0
 800706c:	d019      	beq.n	80070a2 <USBH_HandleEnum+0x30e>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	f893 1334 	ldrb.w	r1, [r3, #820]	; 0x334
                                        phost->device.Data, 0xFFU);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800707a:	23ff      	movs	r3, #255	; 0xff
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 f949 	bl	8007314 <USBH_Get_StringDesc>
 8007082:	4603      	mov	r3, r0
 8007084:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007086:	7bbb      	ldrb	r3, [r7, #14]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d103      	bne.n	8007094 <USBH_HandleEnum+0x300>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2206      	movs	r2, #6
 8007090:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8007092:	e059      	b.n	8007148 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8007094:	7bbb      	ldrb	r3, [r7, #14]
 8007096:	2b03      	cmp	r3, #3
 8007098:	d156      	bne.n	8007148 <USBH_HandleEnum+0x3b4>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2206      	movs	r2, #6
 800709e:	705a      	strb	r2, [r3, #1]
      break;
 80070a0:	e052      	b.n	8007148 <USBH_HandleEnum+0x3b4>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	2206      	movs	r2, #6
 80070a6:	705a      	strb	r2, [r3, #1]
      break;
 80070a8:	e04e      	b.n	8007148 <USBH_HandleEnum+0x3b4>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	f893 3335 	ldrb.w	r3, [r3, #821]	; 0x335
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d019      	beq.n	80070e8 <USBH_HandleEnum+0x354>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f893 1335 	ldrb.w	r1, [r3, #821]	; 0x335
                                        phost->device.Data, 0xFFU);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 80070c0:	23ff      	movs	r3, #255	; 0xff
 80070c2:	6878      	ldr	r0, [r7, #4]
 80070c4:	f000 f926 	bl	8007314 <USBH_Get_StringDesc>
 80070c8:	4603      	mov	r3, r0
 80070ca:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80070cc:	7bbb      	ldrb	r3, [r7, #14]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d103      	bne.n	80070da <USBH_HandleEnum+0x346>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	2207      	movs	r2, #7
 80070d6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80070d8:	e038      	b.n	800714c <USBH_HandleEnum+0x3b8>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80070da:	7bbb      	ldrb	r3, [r7, #14]
 80070dc:	2b03      	cmp	r3, #3
 80070de:	d135      	bne.n	800714c <USBH_HandleEnum+0x3b8>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2207      	movs	r2, #7
 80070e4:	705a      	strb	r2, [r3, #1]
      break;
 80070e6:	e031      	b.n	800714c <USBH_HandleEnum+0x3b8>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2207      	movs	r2, #7
 80070ec:	705a      	strb	r2, [r3, #1]
      break;
 80070ee:	e02d      	b.n	800714c <USBH_HandleEnum+0x3b8>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3336 	ldrb.w	r3, [r3, #822]	; 0x336
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d017      	beq.n	800712a <USBH_HandleEnum+0x396>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 1336 	ldrb.w	r1, [r3, #822]	; 0x336
                                        phost->device.Data, 0xFFU);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f503 728e 	add.w	r2, r3, #284	; 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8007106:	23ff      	movs	r3, #255	; 0xff
 8007108:	6878      	ldr	r0, [r7, #4]
 800710a:	f000 f903 	bl	8007314 <USBH_Get_StringDesc>
 800710e:	4603      	mov	r3, r0
 8007110:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d102      	bne.n	800711e <USBH_HandleEnum+0x38a>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8007118:	2300      	movs	r3, #0
 800711a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 800711c:	e018      	b.n	8007150 <USBH_HandleEnum+0x3bc>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800711e:	7bbb      	ldrb	r3, [r7, #14]
 8007120:	2b03      	cmp	r3, #3
 8007122:	d115      	bne.n	8007150 <USBH_HandleEnum+0x3bc>
          Status = USBH_OK;
 8007124:	2300      	movs	r3, #0
 8007126:	73fb      	strb	r3, [r7, #15]
      break;
 8007128:	e012      	b.n	8007150 <USBH_HandleEnum+0x3bc>
        Status = USBH_OK;
 800712a:	2300      	movs	r3, #0
 800712c:	73fb      	strb	r3, [r7, #15]
      break;
 800712e:	e00f      	b.n	8007150 <USBH_HandleEnum+0x3bc>

    default:
      break;
 8007130:	bf00      	nop
 8007132:	e00e      	b.n	8007152 <USBH_HandleEnum+0x3be>
      break;
 8007134:	bf00      	nop
 8007136:	e00c      	b.n	8007152 <USBH_HandleEnum+0x3be>
      break;
 8007138:	bf00      	nop
 800713a:	e00a      	b.n	8007152 <USBH_HandleEnum+0x3be>
      break;
 800713c:	bf00      	nop
 800713e:	e008      	b.n	8007152 <USBH_HandleEnum+0x3be>
      break;
 8007140:	bf00      	nop
 8007142:	e006      	b.n	8007152 <USBH_HandleEnum+0x3be>
      break;
 8007144:	bf00      	nop
 8007146:	e004      	b.n	8007152 <USBH_HandleEnum+0x3be>
      break;
 8007148:	bf00      	nop
 800714a:	e002      	b.n	8007152 <USBH_HandleEnum+0x3be>
      break;
 800714c:	bf00      	nop
 800714e:	e000      	b.n	8007152 <USBH_HandleEnum+0x3be>
      break;
 8007150:	bf00      	nop
  }
  return Status;
 8007152:	7bfb      	ldrb	r3, [r7, #15]
}
 8007154:	4618      	mov	r0, r3
 8007156:	3710      	adds	r7, #16
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800715c:	b480      	push	{r7}
 800715e:	b083      	sub	sp, #12
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
 8007164:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	683a      	ldr	r2, [r7, #0]
 800716a:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 800716e:	bf00      	nop
 8007170:	370c      	adds	r7, #12
 8007172:	46bd      	mov	sp, r7
 8007174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007178:	4770      	bx	lr

0800717a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800717a:	b580      	push	{r7, lr}
 800717c:	b082      	sub	sp, #8
 800717e:	af00      	add	r7, sp, #0
 8007180:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007188:	1c5a      	adds	r2, r3, #1
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007190:	6878      	ldr	r0, [r7, #4]
 8007192:	f000 f804 	bl	800719e <USBH_HandleSof>
}
 8007196:	bf00      	nop
 8007198:	3708      	adds	r7, #8
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}

0800719e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800719e:	b580      	push	{r7, lr}
 80071a0:	b082      	sub	sp, #8
 80071a2:	af00      	add	r7, sp, #0
 80071a4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	781b      	ldrb	r3, [r3, #0]
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b0b      	cmp	r3, #11
 80071ae:	d10a      	bne.n	80071c6 <USBH_HandleSof+0x28>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d005      	beq.n	80071c6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80071c0:	699b      	ldr	r3, [r3, #24]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	4798      	blx	r3
  }
}
 80071c6:	bf00      	nop
 80071c8:	3708      	adds	r7, #8
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}

080071ce <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 80071ce:	b480      	push	{r7}
 80071d0:	b083      	sub	sp, #12
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	2201      	movs	r2, #1
 80071da:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 80071de:	bf00      	nop
}
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 80071ea:	b480      	push	{r7}
 80071ec:	b083      	sub	sp, #12
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	2200      	movs	r2, #0
 80071f6:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 80071fa:	bf00      	nop
}
 80071fc:	370c      	adds	r7, #12
 80071fe:	46bd      	mov	sp, r7
 8007200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007204:	4770      	bx	lr

08007206 <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007206:	b480      	push	{r7}
 8007208:	b083      	sub	sp, #12
 800720a:	af00      	add	r7, sp, #0
 800720c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2201      	movs	r2, #1
 8007212:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	2200      	movs	r2, #0
 800721a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007226:	2300      	movs	r3, #0
}
 8007228:	4618      	mov	r0, r3
 800722a:	370c      	adds	r7, #12
 800722c:	46bd      	mov	sp, r7
 800722e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007232:	4770      	bx	lr

08007234 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007234:	b580      	push	{r7, lr}
 8007236:	b082      	sub	sp, #8
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2201      	movs	r2, #1
 8007240:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	2200      	movs	r2, #0
 8007250:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8007254:	6878      	ldr	r0, [r7, #4]
 8007256:	f001 f844 	bl	80082e2 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	791b      	ldrb	r3, [r3, #4]
 800725e:	4619      	mov	r1, r3
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fe91 	bl	8007f88 <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	795b      	ldrb	r3, [r3, #5]
 800726a:	4619      	mov	r1, r3
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fe8b 	bl	8007f88 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8007272:	2300      	movs	r3, #0
}
 8007274:	4618      	mov	r0, r3
 8007276:	3708      	adds	r7, #8
 8007278:	46bd      	mov	sp, r7
 800727a:	bd80      	pop	{r7, pc}

0800727c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint8_t length)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b086      	sub	sp, #24
 8007280:	af02      	add	r7, sp, #8
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	460b      	mov	r3, r1
 8007286:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data,
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f503 728e 	add.w	r2, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 800728e:	78fb      	ldrb	r3, [r7, #3]
 8007290:	b29b      	uxth	r3, r3
 8007292:	9300      	str	r3, [sp, #0]
 8007294:	4613      	mov	r3, r2
 8007296:	f44f 7280 	mov.w	r2, #256	; 0x100
 800729a:	2100      	movs	r1, #0
 800729c:	6878      	ldr	r0, [r7, #4]
 800729e:	f000 f864 	bl	800736a <USBH_GetDescriptor>
 80072a2:	4603      	mov	r3, r0
 80072a4:	73fb      	strb	r3, [r7, #15]
                              (uint16_t)length);

  if (status == USBH_OK)
 80072a6:	7bfb      	ldrb	r3, [r7, #15]
 80072a8:	2b00      	cmp	r3, #0
 80072aa:	d10a      	bne.n	80072c2 <USBH_Get_DevDesc+0x46>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseDevDesc(&phost->device.DevDesc, phost->device.Data,
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	f203 3026 	addw	r0, r3, #806	; 0x326
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 80072b8:	78fa      	ldrb	r2, [r7, #3]
 80072ba:	b292      	uxth	r2, r2
 80072bc:	4619      	mov	r1, r3
 80072be:	f000 f918 	bl	80074f2 <USBH_ParseDevDesc>
                      (uint16_t)length);
  }

  return status;
 80072c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072c4:	4618      	mov	r0, r3
 80072c6:	3710      	adds	r7, #16
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bd80      	pop	{r7, pc}

080072cc <USBH_Get_CfgDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost,
                                    uint16_t length)

{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b086      	sub	sp, #24
 80072d0:	af02      	add	r7, sp, #8
 80072d2:	6078      	str	r0, [r7, #4]
 80072d4:	460b      	mov	r3, r1
 80072d6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	331c      	adds	r3, #28
 80072dc:	60bb      	str	r3, [r7, #8]

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80072de:	887b      	ldrh	r3, [r7, #2]
 80072e0:	9300      	str	r3, [sp, #0]
 80072e2:	68bb      	ldr	r3, [r7, #8]
 80072e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072e8:	2100      	movs	r1, #0
 80072ea:	6878      	ldr	r0, [r7, #4]
 80072ec:	f000 f83d 	bl	800736a <USBH_GetDescriptor>
 80072f0:	4603      	mov	r3, r0
 80072f2:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80072f4:	7bfb      	ldrb	r3, [r7, #15]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d107      	bne.n	800730a <USBH_Get_CfgDesc+0x3e>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80072fa:	887b      	ldrh	r3, [r7, #2]
 80072fc:	461a      	mov	r2, r3
 80072fe:	68b9      	ldr	r1, [r7, #8]
 8007300:	6878      	ldr	r0, [r7, #4]
 8007302:	f000 f987 	bl	8007614 <USBH_ParseCfgDesc>
 8007306:	4603      	mov	r3, r0
 8007308:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800730a:	7bfb      	ldrb	r3, [r7, #15]
}
 800730c:	4618      	mov	r0, r3
 800730e:	3710      	adds	r7, #16
 8007310:	46bd      	mov	sp, r7
 8007312:	bd80      	pop	{r7, pc}

08007314 <USBH_Get_StringDesc>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost,
                                       uint8_t string_index, uint8_t *buff,
                                       uint16_t length)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b088      	sub	sp, #32
 8007318:	af02      	add	r7, sp, #8
 800731a:	60f8      	str	r0, [r7, #12]
 800731c:	607a      	str	r2, [r7, #4]
 800731e:	461a      	mov	r2, r3
 8007320:	460b      	mov	r3, r1
 8007322:	72fb      	strb	r3, [r7, #11]
 8007324:	4613      	mov	r3, r2
 8007326:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  status = USBH_GetDescriptor(phost,
 8007328:	7afb      	ldrb	r3, [r7, #11]
 800732a:	b29b      	uxth	r3, r3
 800732c:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007330:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f503 718e 	add.w	r1, r3, #284	; 0x11c
  status = USBH_GetDescriptor(phost,
 8007338:	893b      	ldrh	r3, [r7, #8]
 800733a:	9300      	str	r3, [sp, #0]
 800733c:	460b      	mov	r3, r1
 800733e:	2100      	movs	r1, #0
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 f812 	bl	800736a <USBH_GetDescriptor>
 8007346:	4603      	mov	r3, r0
 8007348:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 800734a:	7dfb      	ldrb	r3, [r7, #23]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d107      	bne.n	8007360 <USBH_Get_StringDesc+0x4c>
  {
    /* Commands successfully sent and Response Received  */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007356:	893a      	ldrh	r2, [r7, #8]
 8007358:	6879      	ldr	r1, [r7, #4]
 800735a:	4618      	mov	r0, r3
 800735c:	f000 fb24 	bl	80079a8 <USBH_ParseStringDesc>
  }

  return status;
 8007360:	7dfb      	ldrb	r3, [r7, #23]
}
 8007362:	4618      	mov	r0, r3
 8007364:	3718      	adds	r7, #24
 8007366:	46bd      	mov	sp, r7
 8007368:	bd80      	pop	{r7, pc}

0800736a <USBH_GetDescriptor>:
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost,
                                      uint8_t  req_type,
                                      uint16_t value_idx,
                                      uint8_t *buff,
                                      uint16_t length)
{
 800736a:	b580      	push	{r7, lr}
 800736c:	b084      	sub	sp, #16
 800736e:	af00      	add	r7, sp, #0
 8007370:	60f8      	str	r0, [r7, #12]
 8007372:	607b      	str	r3, [r7, #4]
 8007374:	460b      	mov	r3, r1
 8007376:	72fb      	strb	r3, [r7, #11]
 8007378:	4613      	mov	r3, r2
 800737a:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	789b      	ldrb	r3, [r3, #2]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d11c      	bne.n	80073be <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 8007384:	7afb      	ldrb	r3, [r7, #11]
 8007386:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800738a:	b2da      	uxtb	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	2206      	movs	r2, #6
 8007394:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	893a      	ldrh	r2, [r7, #8]
 800739a:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 800739c:	893b      	ldrh	r3, [r7, #8]
 800739e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80073a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80073a6:	d104      	bne.n	80073b2 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	f240 4209 	movw	r2, #1033	; 0x409
 80073ae:	829a      	strh	r2, [r3, #20]
 80073b0:	e002      	b.n	80073b8 <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	2200      	movs	r2, #0
 80073b6:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8b3a      	ldrh	r2, [r7, #24]
 80073bc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 80073be:	8b3b      	ldrh	r3, [r7, #24]
 80073c0:	461a      	mov	r2, r3
 80073c2:	6879      	ldr	r1, [r7, #4]
 80073c4:	68f8      	ldr	r0, [r7, #12]
 80073c6:	f000 fb3d 	bl	8007a44 <USBH_CtlReq>
 80073ca:	4603      	mov	r3, r0
}
 80073cc:	4618      	mov	r0, r3
 80073ce:	3710      	adds	r7, #16
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b082      	sub	sp, #8
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	460b      	mov	r3, r1
 80073de:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	789b      	ldrb	r3, [r3, #2]
 80073e4:	2b01      	cmp	r3, #1
 80073e6:	d10f      	bne.n	8007408 <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2200      	movs	r2, #0
 80073ec:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	2205      	movs	r2, #5
 80073f2:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80073f4:	78fb      	ldrb	r3, [r7, #3]
 80073f6:	b29a      	uxth	r2, r3
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2200      	movs	r2, #0
 8007400:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	2200      	movs	r2, #0
 8007406:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007408:	2200      	movs	r2, #0
 800740a:	2100      	movs	r1, #0
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 fb19 	bl	8007a44 <USBH_CtlReq>
 8007412:	4603      	mov	r3, r0
}
 8007414:	4618      	mov	r0, r3
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	460b      	mov	r3, r1
 8007426:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	789b      	ldrb	r3, [r3, #2]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d10e      	bne.n	800744e <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	2200      	movs	r2, #0
 8007434:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2209      	movs	r2, #9
 800743a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	887a      	ldrh	r2, [r7, #2]
 8007440:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	2200      	movs	r2, #0
 8007446:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800744e:	2200      	movs	r2, #0
 8007450:	2100      	movs	r1, #0
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 faf6 	bl	8007a44 <USBH_CtlReq>
 8007458:	4603      	mov	r3, r0
}
 800745a:	4618      	mov	r0, r3
 800745c:	3708      	adds	r7, #8
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}

08007462 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8007462:	b580      	push	{r7, lr}
 8007464:	b082      	sub	sp, #8
 8007466:	af00      	add	r7, sp, #0
 8007468:	6078      	str	r0, [r7, #4]
 800746a:	460b      	mov	r3, r1
 800746c:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	789b      	ldrb	r3, [r3, #2]
 8007472:	2b01      	cmp	r3, #1
 8007474:	d10f      	bne.n	8007496 <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2200      	movs	r2, #0
 800747a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2203      	movs	r2, #3
 8007480:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8007482:	78fb      	ldrb	r3, [r7, #3]
 8007484:	b29a      	uxth	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2200      	movs	r2, #0
 800748e:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	2200      	movs	r2, #0
 8007494:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8007496:	2200      	movs	r2, #0
 8007498:	2100      	movs	r1, #0
 800749a:	6878      	ldr	r0, [r7, #4]
 800749c:	f000 fad2 	bl	8007a44 <USBH_CtlReq>
 80074a0:	4603      	mov	r3, r0
}
 80074a2:	4618      	mov	r0, r3
 80074a4:	3708      	adds	r7, #8
 80074a6:	46bd      	mov	sp, r7
 80074a8:	bd80      	pop	{r7, pc}

080074aa <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80074aa:	b580      	push	{r7, lr}
 80074ac:	b082      	sub	sp, #8
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	6078      	str	r0, [r7, #4]
 80074b2:	460b      	mov	r3, r1
 80074b4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	789b      	ldrb	r3, [r3, #2]
 80074ba:	2b01      	cmp	r3, #1
 80074bc:	d10f      	bne.n	80074de <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	2202      	movs	r2, #2
 80074c2:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2201      	movs	r2, #1
 80074c8:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2200      	movs	r2, #0
 80074ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80074d0:	78fb      	ldrb	r3, [r7, #3]
 80074d2:	b29a      	uxth	r2, r3
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	2200      	movs	r2, #0
 80074dc:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, NULL, 0U);
 80074de:	2200      	movs	r2, #0
 80074e0:	2100      	movs	r1, #0
 80074e2:	6878      	ldr	r0, [r7, #4]
 80074e4:	f000 faae 	bl	8007a44 <USBH_CtlReq>
 80074e8:	4603      	mov	r3, r0
}
 80074ea:	4618      	mov	r0, r3
 80074ec:	3708      	adds	r7, #8
 80074ee:	46bd      	mov	sp, r7
 80074f0:	bd80      	pop	{r7, pc}

080074f2 <USBH_ParseDevDesc>:
  * @param  length: Length of the descriptor
  * @retval None
  */
static void  USBH_ParseDevDesc(USBH_DevDescTypeDef *dev_desc, uint8_t *buf,
                               uint16_t length)
{
 80074f2:	b480      	push	{r7}
 80074f4:	b085      	sub	sp, #20
 80074f6:	af00      	add	r7, sp, #0
 80074f8:	60f8      	str	r0, [r7, #12]
 80074fa:	60b9      	str	r1, [r7, #8]
 80074fc:	4613      	mov	r3, r2
 80074fe:	80fb      	strh	r3, [r7, #6]
  dev_desc->bLength            = *(uint8_t *)(buf +  0);
 8007500:	68bb      	ldr	r3, [r7, #8]
 8007502:	781a      	ldrb	r2, [r3, #0]
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1);
 8007508:	68bb      	ldr	r3, [r7, #8]
 800750a:	785a      	ldrb	r2, [r3, #1]
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2);
 8007510:	68bb      	ldr	r3, [r7, #8]
 8007512:	3302      	adds	r3, #2
 8007514:	781b      	ldrb	r3, [r3, #0]
 8007516:	b29a      	uxth	r2, r3
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	3303      	adds	r3, #3
 800751c:	781b      	ldrb	r3, [r3, #0]
 800751e:	b29b      	uxth	r3, r3
 8007520:	021b      	lsls	r3, r3, #8
 8007522:	b29b      	uxth	r3, r3
 8007524:	4313      	orrs	r3, r2
 8007526:	b29a      	uxth	r2, r3
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4);
 800752c:	68bb      	ldr	r3, [r7, #8]
 800752e:	791a      	ldrb	r2, [r3, #4]
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5);
 8007534:	68bb      	ldr	r3, [r7, #8]
 8007536:	795a      	ldrb	r2, [r3, #5]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6);
 800753c:	68bb      	ldr	r3, [r7, #8]
 800753e:	799a      	ldrb	r2, [r3, #6]
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7);
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	79da      	ldrb	r2, [r3, #7]
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	71da      	strb	r2, [r3, #7]

  /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to 64 */
  switch (dev_desc->bMaxPacketSize)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	79db      	ldrb	r3, [r3, #7]
 8007550:	2b20      	cmp	r3, #32
 8007552:	dc11      	bgt.n	8007578 <USBH_ParseDevDesc+0x86>
 8007554:	2b08      	cmp	r3, #8
 8007556:	db16      	blt.n	8007586 <USBH_ParseDevDesc+0x94>
 8007558:	3b08      	subs	r3, #8
 800755a:	2201      	movs	r2, #1
 800755c:	fa02 f303 	lsl.w	r3, r2, r3
 8007560:	f003 3301 	and.w	r3, r3, #16843009	; 0x1010101
 8007564:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007568:	2b00      	cmp	r3, #0
 800756a:	bf14      	ite	ne
 800756c:	2301      	movne	r3, #1
 800756e:	2300      	moveq	r3, #0
 8007570:	b2db      	uxtb	r3, r3
 8007572:	2b00      	cmp	r3, #0
 8007574:	d102      	bne.n	800757c <USBH_ParseDevDesc+0x8a>
 8007576:	e006      	b.n	8007586 <USBH_ParseDevDesc+0x94>
 8007578:	2b40      	cmp	r3, #64	; 0x40
 800757a:	d104      	bne.n	8007586 <USBH_ParseDevDesc+0x94>
  {
    case 8:
    case 16:
    case 32:
    case 64:
      dev_desc->bMaxPacketSize = dev_desc->bMaxPacketSize;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	79da      	ldrb	r2, [r3, #7]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	71da      	strb	r2, [r3, #7]
      break;
 8007584:	e003      	b.n	800758e <USBH_ParseDevDesc+0x9c>

    default:
      /*set the size to 64 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 64U;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	2240      	movs	r2, #64	; 0x40
 800758a:	71da      	strb	r2, [r3, #7]
      break;
 800758c:	bf00      	nop
  }

  if (length > 8U)
 800758e:	88fb      	ldrh	r3, [r7, #6]
 8007590:	2b08      	cmp	r3, #8
 8007592:	d939      	bls.n	8007608 <USBH_ParseDevDesc+0x116>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	3308      	adds	r3, #8
 8007598:	781b      	ldrb	r3, [r3, #0]
 800759a:	b29a      	uxth	r2, r3
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	3309      	adds	r3, #9
 80075a0:	781b      	ldrb	r3, [r3, #0]
 80075a2:	b29b      	uxth	r3, r3
 80075a4:	021b      	lsls	r3, r3, #8
 80075a6:	b29b      	uxth	r3, r3
 80075a8:	4313      	orrs	r3, r2
 80075aa:	b29a      	uxth	r2, r3
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10);
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	330a      	adds	r3, #10
 80075b4:	781b      	ldrb	r3, [r3, #0]
 80075b6:	b29a      	uxth	r2, r3
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	330b      	adds	r3, #11
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	b29b      	uxth	r3, r3
 80075c0:	021b      	lsls	r3, r3, #8
 80075c2:	b29b      	uxth	r3, r3
 80075c4:	4313      	orrs	r3, r2
 80075c6:	b29a      	uxth	r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12);
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	330c      	adds	r3, #12
 80075d0:	781b      	ldrb	r3, [r3, #0]
 80075d2:	b29a      	uxth	r2, r3
 80075d4:	68bb      	ldr	r3, [r7, #8]
 80075d6:	330d      	adds	r3, #13
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	b29b      	uxth	r3, r3
 80075dc:	021b      	lsls	r3, r3, #8
 80075de:	b29b      	uxth	r3, r3
 80075e0:	4313      	orrs	r3, r2
 80075e2:	b29a      	uxth	r2, r3
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14);
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	7b9a      	ldrb	r2, [r3, #14]
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15);
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	7bda      	ldrb	r2, [r3, #15]
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	7c1a      	ldrb	r2, [r3, #16]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17);
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	7c5a      	ldrb	r2, [r3, #17]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	745a      	strb	r2, [r3, #17]
  }
}
 8007608:	bf00      	nop
 800760a:	3714      	adds	r7, #20
 800760c:	46bd      	mov	sp, r7
 800760e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007612:	4770      	bx	lr

08007614 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH statuse
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8007614:	b580      	push	{r7, lr}
 8007616:	b08c      	sub	sp, #48	; 0x30
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	60b9      	str	r1, [r7, #8]
 800761e:	4613      	mov	r3, r2
 8007620:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007628:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800762a:	2300      	movs	r3, #0
 800762c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  USBH_InterfaceDescTypeDef    *pif ;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc = (USBH_DescHeader_t *)(void *)buf;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	62bb      	str	r3, [r7, #40]	; 0x28
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8007634:	2300      	movs	r3, #0
 8007636:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint8_t                      ep_ix = 0U;
 800763a:	2300      	movs	r3, #0
 800763c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

  pdesc   = (USBH_DescHeader_t *)(void *)buf;
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0);
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	781a      	ldrb	r2, [r3, #0]
 8007648:	6a3b      	ldr	r3, [r7, #32]
 800764a:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1);
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	785a      	ldrb	r2, [r3, #1]
 8007650:	6a3b      	ldr	r3, [r7, #32]
 8007652:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	3302      	adds	r3, #2
 8007658:	781b      	ldrb	r3, [r3, #0]
 800765a:	b29a      	uxth	r2, r3
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	3303      	adds	r3, #3
 8007660:	781b      	ldrb	r3, [r3, #0]
 8007662:	b29b      	uxth	r3, r3
 8007664:	021b      	lsls	r3, r3, #8
 8007666:	b29b      	uxth	r3, r3
 8007668:	4313      	orrs	r3, r2
 800766a:	b29b      	uxth	r3, r3
 800766c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007670:	bf28      	it	cs
 8007672:	f44f 7380 	movcs.w	r3, #256	; 0x100
 8007676:	b29a      	uxth	r2, r3
 8007678:	6a3b      	ldr	r3, [r7, #32]
 800767a:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4);
 800767c:	68bb      	ldr	r3, [r7, #8]
 800767e:	791a      	ldrb	r2, [r3, #4]
 8007680:	6a3b      	ldr	r3, [r7, #32]
 8007682:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5);
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	795a      	ldrb	r2, [r3, #5]
 8007688:	6a3b      	ldr	r3, [r7, #32]
 800768a:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6);
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	799a      	ldrb	r2, [r3, #6]
 8007690:	6a3b      	ldr	r3, [r7, #32]
 8007692:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7);
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	79da      	ldrb	r2, [r3, #7]
 8007698:	6a3b      	ldr	r3, [r7, #32]
 800769a:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	7a1a      	ldrb	r2, [r3, #8]
 80076a0:	6a3b      	ldr	r3, [r7, #32]
 80076a2:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Confguration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength  != USB_CONFIGURATION_DESC_SIZE)
 80076a4:	6a3b      	ldr	r3, [r7, #32]
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	2b09      	cmp	r3, #9
 80076aa:	d002      	beq.n	80076b2 <USBH_ParseCfgDesc+0x9e>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80076ac:	6a3b      	ldr	r3, [r7, #32]
 80076ae:	2209      	movs	r2, #9
 80076b0:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80076b2:	88fb      	ldrh	r3, [r7, #6]
 80076b4:	2b09      	cmp	r3, #9
 80076b6:	f240 809d 	bls.w	80077f4 <USBH_ParseCfgDesc+0x1e0>
  {
    ptr = USB_LEN_CFG_DESC;
 80076ba:	2309      	movs	r3, #9
 80076bc:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80076be:	2300      	movs	r3, #0
 80076c0:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80076c2:	e081      	b.n	80077c8 <USBH_ParseCfgDesc+0x1b4>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80076c4:	f107 0316 	add.w	r3, r7, #22
 80076c8:	4619      	mov	r1, r3
 80076ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80076cc:	f000 f99f 	bl	8007a0e <USBH_GetNextDesc>
 80076d0:	62b8      	str	r0, [r7, #40]	; 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80076d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076d4:	785b      	ldrb	r3, [r3, #1]
 80076d6:	2b04      	cmp	r3, #4
 80076d8:	d176      	bne.n	80077c8 <USBH_ParseCfgDesc+0x1b4>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076dc:	781b      	ldrb	r3, [r3, #0]
 80076de:	2b09      	cmp	r3, #9
 80076e0:	d002      	beq.n	80076e8 <USBH_ParseCfgDesc+0xd4>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80076e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076e4:	2209      	movs	r2, #9
 80076e6:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 80076e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80076ec:	221a      	movs	r2, #26
 80076ee:	fb02 f303 	mul.w	r3, r2, r3
 80076f2:	3308      	adds	r3, #8
 80076f4:	6a3a      	ldr	r2, [r7, #32]
 80076f6:	4413      	add	r3, r2
 80076f8:	3302      	adds	r3, #2
 80076fa:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 80076fc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80076fe:	69f8      	ldr	r0, [r7, #28]
 8007700:	f000 f87e 	bl	8007800 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8007704:	2300      	movs	r3, #0
 8007706:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 800770a:	2300      	movs	r3, #0
 800770c:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 800770e:	e043      	b.n	8007798 <USBH_ParseCfgDesc+0x184>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8007710:	f107 0316 	add.w	r3, r7, #22
 8007714:	4619      	mov	r1, r3
 8007716:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007718:	f000 f979 	bl	8007a0e <USBH_GetNextDesc>
 800771c:	62b8      	str	r0, [r7, #40]	; 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800771e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007720:	785b      	ldrb	r3, [r3, #1]
 8007722:	2b05      	cmp	r3, #5
 8007724:	d138      	bne.n	8007798 <USBH_ParseCfgDesc+0x184>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) && (pif->bInterfaceSubClass == 0x02U))
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	795b      	ldrb	r3, [r3, #5]
 800772a:	2b01      	cmp	r3, #1
 800772c:	d10f      	bne.n	800774e <USBH_ParseCfgDesc+0x13a>
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	799b      	ldrb	r3, [r3, #6]
 8007732:	2b02      	cmp	r3, #2
 8007734:	d10b      	bne.n	800774e <USBH_ParseCfgDesc+0x13a>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8007736:	69fb      	ldr	r3, [r7, #28]
 8007738:	79db      	ldrb	r3, [r3, #7]
 800773a:	2b00      	cmp	r3, #0
 800773c:	d10f      	bne.n	800775e <USBH_ParseCfgDesc+0x14a>
 800773e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007740:	781b      	ldrb	r3, [r3, #0]
 8007742:	2b09      	cmp	r3, #9
 8007744:	d00b      	beq.n	800775e <USBH_ParseCfgDesc+0x14a>
              {
                pdesc->bLength = 0x09U;
 8007746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007748:	2209      	movs	r2, #9
 800774a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800774c:	e007      	b.n	800775e <USBH_ParseCfgDesc+0x14a>
              }
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else if (pdesc->bLength != USB_ENDPOINT_DESC_SIZE)
 800774e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007750:	781b      	ldrb	r3, [r3, #0]
 8007752:	2b07      	cmp	r3, #7
 8007754:	d004      	beq.n	8007760 <USBH_ParseCfgDesc+0x14c>
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8007756:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007758:	2207      	movs	r2, #7
 800775a:	701a      	strb	r2, [r3, #0]
 800775c:	e000      	b.n	8007760 <USBH_ParseCfgDesc+0x14c>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 800775e:	bf00      	nop
            else
            {
              /* ... */
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8007760:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007764:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 8007768:	3201      	adds	r2, #1
 800776a:	00d2      	lsls	r2, r2, #3
 800776c:	211a      	movs	r1, #26
 800776e:	fb01 f303 	mul.w	r3, r1, r3
 8007772:	4413      	add	r3, r2
 8007774:	3308      	adds	r3, #8
 8007776:	6a3a      	ldr	r2, [r7, #32]
 8007778:	4413      	add	r3, r2
 800777a:	3304      	adds	r3, #4
 800777c:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 800777e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007780:	69b9      	ldr	r1, [r7, #24]
 8007782:	68f8      	ldr	r0, [r7, #12]
 8007784:	f000 f86b 	bl	800785e <USBH_ParseEPDesc>
 8007788:	4603      	mov	r3, r0
 800778a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

            ep_ix++;
 800778e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007792:	3301      	adds	r3, #1
 8007794:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	791b      	ldrb	r3, [r3, #4]
 800779c:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80077a0:	429a      	cmp	r2, r3
 80077a2:	d204      	bcs.n	80077ae <USBH_ParseCfgDesc+0x19a>
 80077a4:	6a3b      	ldr	r3, [r7, #32]
 80077a6:	885a      	ldrh	r2, [r3, #2]
 80077a8:	8afb      	ldrh	r3, [r7, #22]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d8b0      	bhi.n	8007710 <USBH_ParseCfgDesc+0xfc>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	791b      	ldrb	r3, [r3, #4]
 80077b2:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 80077b6:	429a      	cmp	r2, r3
 80077b8:	d201      	bcs.n	80077be <USBH_ParseCfgDesc+0x1aa>
        {
          return USBH_NOT_SUPPORTED;
 80077ba:	2303      	movs	r3, #3
 80077bc:	e01c      	b.n	80077f8 <USBH_ParseCfgDesc+0x1e4>
        }

        if_ix++;
 80077be:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077c2:	3301      	adds	r3, #1
 80077c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80077c8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80077cc:	2b01      	cmp	r3, #1
 80077ce:	d805      	bhi.n	80077dc <USBH_ParseCfgDesc+0x1c8>
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	885a      	ldrh	r2, [r3, #2]
 80077d4:	8afb      	ldrh	r3, [r7, #22]
 80077d6:	429a      	cmp	r2, r3
 80077d8:	f63f af74 	bhi.w	80076c4 <USBH_ParseCfgDesc+0xb0>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	791b      	ldrb	r3, [r3, #4]
 80077e0:	2b02      	cmp	r3, #2
 80077e2:	bf28      	it	cs
 80077e4:	2302      	movcs	r3, #2
 80077e6:	b2db      	uxtb	r3, r3
 80077e8:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80077ec:	429a      	cmp	r2, r3
 80077ee:	d201      	bcs.n	80077f4 <USBH_ParseCfgDesc+0x1e0>
    {
      return USBH_NOT_SUPPORTED;
 80077f0:	2303      	movs	r3, #3
 80077f2:	e001      	b.n	80077f8 <USBH_ParseCfgDesc+0x1e4>
    }
  }

  return status;
 80077f4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80077f8:	4618      	mov	r0, r3
 80077fa:	3730      	adds	r7, #48	; 0x30
 80077fc:	46bd      	mov	sp, r7
 80077fe:	bd80      	pop	{r7, pc}

08007800 <USBH_ParseInterfaceDesc>:
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void  USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor,
                                     uint8_t *buf)
{
 8007800:	b480      	push	{r7}
 8007802:	b083      	sub	sp, #12
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
 8007808:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0);
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	781a      	ldrb	r2, [r3, #0]
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1);
 8007812:	683b      	ldr	r3, [r7, #0]
 8007814:	785a      	ldrb	r2, [r3, #1]
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2);
 800781a:	683b      	ldr	r3, [r7, #0]
 800781c:	789a      	ldrb	r2, [r3, #2]
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3);
 8007822:	683b      	ldr	r3, [r7, #0]
 8007824:	78da      	ldrb	r2, [r3, #3]
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = *(uint8_t *)(buf + 4);
 800782a:	683b      	ldr	r3, [r7, #0]
 800782c:	791a      	ldrb	r2, [r3, #4]
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5);
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	795a      	ldrb	r2, [r3, #5]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6);
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	799a      	ldrb	r2, [r3, #6]
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7);
 8007842:	683b      	ldr	r3, [r7, #0]
 8007844:	79da      	ldrb	r2, [r3, #7]
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8);
 800784a:	683b      	ldr	r3, [r7, #0]
 800784c:	7a1a      	ldrb	r2, [r3, #8]
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	721a      	strb	r2, [r3, #8]
}
 8007852:	bf00      	nop
 8007854:	370c      	adds	r7, #12
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <USBH_ParseEPDesc>:
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef  USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef  *ep_descriptor,
                                            uint8_t *buf)
{
 800785e:	b480      	push	{r7}
 8007860:	b087      	sub	sp, #28
 8007862:	af00      	add	r7, sp, #0
 8007864:	60f8      	str	r0, [r7, #12]
 8007866:	60b9      	str	r1, [r7, #8]
 8007868:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 800786a:	2300      	movs	r3, #0
 800786c:	75fb      	strb	r3, [r7, #23]
  ep_descriptor->bLength          = *(uint8_t *)(buf + 0);
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	781a      	ldrb	r2, [r3, #0]
 8007872:	68bb      	ldr	r3, [r7, #8]
 8007874:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1);
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	785a      	ldrb	r2, [r3, #1]
 800787a:	68bb      	ldr	r3, [r7, #8]
 800787c:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	789a      	ldrb	r2, [r3, #2]
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	78da      	ldrb	r2, [r3, #3]
 800788a:	68bb      	ldr	r3, [r7, #8]
 800788c:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	3304      	adds	r3, #4
 8007892:	781b      	ldrb	r3, [r3, #0]
 8007894:	b29a      	uxth	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	3305      	adds	r3, #5
 800789a:	781b      	ldrb	r3, [r3, #0]
 800789c:	b29b      	uxth	r3, r3
 800789e:	021b      	lsls	r3, r3, #8
 80078a0:	b29b      	uxth	r3, r3
 80078a2:	4313      	orrs	r3, r2
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68bb      	ldr	r3, [r7, #8]
 80078a8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6);
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	799a      	ldrb	r2, [r3, #6]
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if (ep_descriptor->wMaxPacketSize == 0x00U)
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	889b      	ldrh	r3, [r3, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <USBH_ParseEPDesc+0x62>
  {
    status = USBH_NOT_SUPPORTED;
 80078ba:	2303      	movs	r3, #3
 80078bc:	75fb      	strb	r3, [r7, #23]
 80078be:	e033      	b.n	8007928 <USBH_ParseEPDesc+0xca>

  }
  else if ((uint16_t)USBH_MAX_DATA_BUFFER < USBH_MAX_EP_PACKET_SIZE)
  {
    /* Make sure that maximum packet size (bits 0..10) does not exceed the total buffer length */
    ep_descriptor->wMaxPacketSize &= ~0x7FFU;
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	889b      	ldrh	r3, [r3, #4]
 80078c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80078c8:	f023 0307 	bic.w	r3, r3, #7
 80078cc:	b29a      	uxth	r2, r3
 80078ce:	68bb      	ldr	r3, [r7, #8]
 80078d0:	809a      	strh	r2, [r3, #4]
    ep_descriptor->wMaxPacketSize |= MIN((uint16_t)(LE16(buf + 4) & 0x7FFU), (uint16_t)USBH_MAX_DATA_BUFFER);
 80078d2:	68bb      	ldr	r3, [r7, #8]
 80078d4:	889b      	ldrh	r3, [r3, #4]
 80078d6:	b21a      	sxth	r2, r3
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	3304      	adds	r3, #4
 80078dc:	781b      	ldrb	r3, [r3, #0]
 80078de:	b299      	uxth	r1, r3
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	3305      	adds	r3, #5
 80078e4:	781b      	ldrb	r3, [r3, #0]
 80078e6:	b29b      	uxth	r3, r3
 80078e8:	021b      	lsls	r3, r3, #8
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	430b      	orrs	r3, r1
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d110      	bne.n	800791a <USBH_ParseEPDesc+0xbc>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	3304      	adds	r3, #4
 80078fc:	781b      	ldrb	r3, [r3, #0]
 80078fe:	b299      	uxth	r1, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	3305      	adds	r3, #5
 8007904:	781b      	ldrb	r3, [r3, #0]
 8007906:	b29b      	uxth	r3, r3
 8007908:	021b      	lsls	r3, r3, #8
 800790a:	b29b      	uxth	r3, r3
 800790c:	430b      	orrs	r3, r1
 800790e:	b29b      	uxth	r3, r3
 8007910:	b21b      	sxth	r3, r3
 8007912:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007916:	b21b      	sxth	r3, r3
 8007918:	e001      	b.n	800791e <USBH_ParseEPDesc+0xc0>
 800791a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800791e:	4313      	orrs	r3, r2
 8007920:	b21b      	sxth	r3, r3
 8007922:	b29a      	uxth	r2, r3
 8007924:	68bb      	ldr	r3, [r7, #8]
 8007926:	809a      	strh	r2, [r3, #4]
  {
    /* ... */
  }

  /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800792e:	2b00      	cmp	r3, #0
 8007930:	d116      	bne.n	8007960 <USBH_ParseEPDesc+0x102>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007932:	68bb      	ldr	r3, [r7, #8]
 8007934:	78db      	ldrb	r3, [r3, #3]
 8007936:	f003 0303 	and.w	r3, r3, #3
 800793a:	2b01      	cmp	r3, #1
 800793c:	d005      	beq.n	800794a <USBH_ParseEPDesc+0xec>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	78db      	ldrb	r3, [r3, #3]
 8007942:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8007946:	2b03      	cmp	r3, #3
 8007948:	d127      	bne.n	800799a <USBH_ParseEPDesc+0x13c>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800794a:	68bb      	ldr	r3, [r7, #8]
 800794c:	799b      	ldrb	r3, [r3, #6]
 800794e:	2b00      	cmp	r3, #0
 8007950:	d003      	beq.n	800795a <USBH_ParseEPDesc+0xfc>
 8007952:	68bb      	ldr	r3, [r7, #8]
 8007954:	799b      	ldrb	r3, [r3, #6]
 8007956:	2b10      	cmp	r3, #16
 8007958:	d91f      	bls.n	800799a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800795a:	2303      	movs	r3, #3
 800795c:	75fb      	strb	r3, [r7, #23]
 800795e:	e01c      	b.n	800799a <USBH_ParseEPDesc+0x13c>
    }
  }
  else
  {
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	78db      	ldrb	r3, [r3, #3]
 8007964:	f003 0303 	and.w	r3, r3, #3
 8007968:	2b01      	cmp	r3, #1
 800796a:	d10a      	bne.n	8007982 <USBH_ParseEPDesc+0x124>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 800796c:	68bb      	ldr	r3, [r7, #8]
 800796e:	799b      	ldrb	r3, [r3, #6]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d003      	beq.n	800797c <USBH_ParseEPDesc+0x11e>
 8007974:	68bb      	ldr	r3, [r7, #8]
 8007976:	799b      	ldrb	r3, [r3, #6]
 8007978:	2b10      	cmp	r3, #16
 800797a:	d90e      	bls.n	800799a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 800797c:	2303      	movs	r3, #3
 800797e:	75fb      	strb	r3, [r7, #23]
 8007980:	e00b      	b.n	800799a <USBH_ParseEPDesc+0x13c>
      }
    }
    /* For full-/low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8007982:	68bb      	ldr	r3, [r7, #8]
 8007984:	78db      	ldrb	r3, [r3, #3]
 8007986:	f003 0303 	and.w	r3, r3, #3
 800798a:	2b03      	cmp	r3, #3
 800798c:	d105      	bne.n	800799a <USBH_ParseEPDesc+0x13c>
    {
      if (ep_descriptor->bInterval == 0U)
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	799b      	ldrb	r3, [r3, #6]
 8007992:	2b00      	cmp	r3, #0
 8007994:	d101      	bne.n	800799a <USBH_ParseEPDesc+0x13c>
      {
        status = USBH_NOT_SUPPORTED;
 8007996:	2303      	movs	r3, #3
 8007998:	75fb      	strb	r3, [r7, #23]
    {
      /* ... */
    }
  }

  return status;
 800799a:	7dfb      	ldrb	r3, [r7, #23]
}
 800799c:	4618      	mov	r0, r3
 800799e:	371c      	adds	r7, #28
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80079a8:	b480      	push	{r7}
 80079aa:	b087      	sub	sp, #28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	4613      	mov	r3, r2
 80079b4:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	3301      	adds	r3, #1
 80079ba:	781b      	ldrb	r3, [r3, #0]
 80079bc:	2b03      	cmp	r3, #3
 80079be:	d120      	bne.n	8007a02 <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	781b      	ldrb	r3, [r3, #0]
 80079c4:	1e9a      	subs	r2, r3, #2
 80079c6:	88fb      	ldrh	r3, [r7, #6]
 80079c8:	4293      	cmp	r3, r2
 80079ca:	bf28      	it	cs
 80079cc:	4613      	movcs	r3, r2
 80079ce:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	3302      	adds	r3, #2
 80079d4:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80079d6:	2300      	movs	r3, #0
 80079d8:	82fb      	strh	r3, [r7, #22]
 80079da:	e00b      	b.n	80079f4 <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80079dc:	8afb      	ldrh	r3, [r7, #22]
 80079de:	68fa      	ldr	r2, [r7, #12]
 80079e0:	4413      	add	r3, r2
 80079e2:	781a      	ldrb	r2, [r3, #0]
 80079e4:	68bb      	ldr	r3, [r7, #8]
 80079e6:	701a      	strb	r2, [r3, #0]
      pdest++;
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	3301      	adds	r3, #1
 80079ec:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 80079ee:	8afb      	ldrh	r3, [r7, #22]
 80079f0:	3302      	adds	r3, #2
 80079f2:	82fb      	strh	r3, [r7, #22]
 80079f4:	8afa      	ldrh	r2, [r7, #22]
 80079f6:	8abb      	ldrh	r3, [r7, #20]
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d3ef      	bcc.n	80079dc <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 80079fc:	68bb      	ldr	r3, [r7, #8]
 80079fe:	2200      	movs	r2, #0
 8007a00:	701a      	strb	r2, [r3, #0]
  }
}
 8007a02:	bf00      	nop
 8007a04:	371c      	adds	r7, #28
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr

08007a0e <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t  *USBH_GetNextDesc(uint8_t   *pbuf, uint16_t  *ptr)
{
 8007a0e:	b480      	push	{r7}
 8007a10:	b085      	sub	sp, #20
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	6078      	str	r0, [r7, #4]
 8007a16:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t  *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8007a18:	683b      	ldr	r3, [r7, #0]
 8007a1a:	881a      	ldrh	r2, [r3, #0]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	781b      	ldrb	r3, [r3, #0]
 8007a20:	b29b      	uxth	r3, r3
 8007a22:	4413      	add	r3, r2
 8007a24:	b29a      	uxth	r2, r3
 8007a26:	683b      	ldr	r3, [r7, #0]
 8007a28:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	781b      	ldrb	r3, [r3, #0]
 8007a2e:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	4413      	add	r3, r2
 8007a34:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8007a36:	68fb      	ldr	r3, [r7, #12]
}
 8007a38:	4618      	mov	r0, r3
 8007a3a:	3714      	adds	r7, #20
 8007a3c:	46bd      	mov	sp, r7
 8007a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a42:	4770      	bx	lr

08007a44 <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	60f8      	str	r0, [r7, #12]
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	4613      	mov	r3, r2
 8007a50:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007a52:	2301      	movs	r3, #1
 8007a54:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	789b      	ldrb	r3, [r3, #2]
 8007a5a:	2b01      	cmp	r3, #1
 8007a5c:	d002      	beq.n	8007a64 <USBH_CtlReq+0x20>
 8007a5e:	2b02      	cmp	r3, #2
 8007a60:	d00f      	beq.n	8007a82 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007a62:	e027      	b.n	8007ab4 <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	88fa      	ldrh	r2, [r7, #6]
 8007a6e:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	2201      	movs	r2, #1
 8007a74:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	2202      	movs	r2, #2
 8007a7a:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8007a7c:	2301      	movs	r3, #1
 8007a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8007a80:	e018      	b.n	8007ab4 <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8007a82:	68f8      	ldr	r0, [r7, #12]
 8007a84:	f000 f81c 	bl	8007ac0 <USBH_HandleControl>
 8007a88:	4603      	mov	r3, r0
 8007a8a:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8007a8c:	7dfb      	ldrb	r3, [r7, #23]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d002      	beq.n	8007a98 <USBH_CtlReq+0x54>
 8007a92:	7dfb      	ldrb	r3, [r7, #23]
 8007a94:	2b03      	cmp	r3, #3
 8007a96:	d106      	bne.n	8007aa6 <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	2201      	movs	r2, #1
 8007a9c:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	761a      	strb	r2, [r3, #24]
      break;
 8007aa4:	e005      	b.n	8007ab2 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8007aa6:	7dfb      	ldrb	r3, [r7, #23]
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d102      	bne.n	8007ab2 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8007aac:	68fb      	ldr	r3, [r7, #12]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	709a      	strb	r2, [r3, #2]
      break;
 8007ab2:	bf00      	nop
  }
  return status;
 8007ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
	...

08007ac0 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	b086      	sub	sp, #24
 8007ac4:	af02      	add	r7, sp, #8
 8007ac6:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8007ac8:	2301      	movs	r3, #1
 8007aca:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007acc:	2300      	movs	r3, #0
 8007ace:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	7e1b      	ldrb	r3, [r3, #24]
 8007ad4:	3b01      	subs	r3, #1
 8007ad6:	2b0a      	cmp	r3, #10
 8007ad8:	f200 8156 	bhi.w	8007d88 <USBH_HandleControl+0x2c8>
 8007adc:	a201      	add	r2, pc, #4	; (adr r2, 8007ae4 <USBH_HandleControl+0x24>)
 8007ade:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007ae2:	bf00      	nop
 8007ae4:	08007b11 	.word	0x08007b11
 8007ae8:	08007b2b 	.word	0x08007b2b
 8007aec:	08007b95 	.word	0x08007b95
 8007af0:	08007bbb 	.word	0x08007bbb
 8007af4:	08007bf3 	.word	0x08007bf3
 8007af8:	08007c1d 	.word	0x08007c1d
 8007afc:	08007c6f 	.word	0x08007c6f
 8007b00:	08007c91 	.word	0x08007c91
 8007b04:	08007ccd 	.word	0x08007ccd
 8007b08:	08007cf3 	.word	0x08007cf3
 8007b0c:	08007d31 	.word	0x08007d31
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f103 0110 	add.w	r1, r3, #16
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	795b      	ldrb	r3, [r3, #5]
 8007b1a:	461a      	mov	r2, r3
 8007b1c:	6878      	ldr	r0, [r7, #4]
 8007b1e:	f000 f943 	bl	8007da8 <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2202      	movs	r2, #2
 8007b26:	761a      	strb	r2, [r3, #24]
      break;
 8007b28:	e139      	b.n	8007d9e <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	795b      	ldrb	r3, [r3, #5]
 8007b2e:	4619      	mov	r1, r3
 8007b30:	6878      	ldr	r0, [r7, #4]
 8007b32:	f000 fcc5 	bl	80084c0 <USBH_LL_GetURBState>
 8007b36:	4603      	mov	r3, r0
 8007b38:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8007b3a:	7bbb      	ldrb	r3, [r7, #14]
 8007b3c:	2b01      	cmp	r3, #1
 8007b3e:	d11e      	bne.n	8007b7e <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	7c1b      	ldrb	r3, [r3, #16]
 8007b44:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007b48:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	8adb      	ldrh	r3, [r3, #22]
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00a      	beq.n	8007b68 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8007b52:	7b7b      	ldrb	r3, [r7, #13]
 8007b54:	2b80      	cmp	r3, #128	; 0x80
 8007b56:	d103      	bne.n	8007b60 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2203      	movs	r2, #3
 8007b5c:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007b5e:	e115      	b.n	8007d8c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2205      	movs	r2, #5
 8007b64:	761a      	strb	r2, [r3, #24]
      break;
 8007b66:	e111      	b.n	8007d8c <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8007b68:	7b7b      	ldrb	r3, [r7, #13]
 8007b6a:	2b80      	cmp	r3, #128	; 0x80
 8007b6c:	d103      	bne.n	8007b76 <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	2209      	movs	r2, #9
 8007b72:	761a      	strb	r2, [r3, #24]
      break;
 8007b74:	e10a      	b.n	8007d8c <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2207      	movs	r2, #7
 8007b7a:	761a      	strb	r2, [r3, #24]
      break;
 8007b7c:	e106      	b.n	8007d8c <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
 8007b80:	2b04      	cmp	r3, #4
 8007b82:	d003      	beq.n	8007b8c <USBH_HandleControl+0xcc>
 8007b84:	7bbb      	ldrb	r3, [r7, #14]
 8007b86:	2b02      	cmp	r3, #2
 8007b88:	f040 8100 	bne.w	8007d8c <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	220b      	movs	r2, #11
 8007b90:	761a      	strb	r2, [r3, #24]
      break;
 8007b92:	e0fb      	b.n	8007d8c <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007b9a:	b29a      	uxth	r2, r3
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6899      	ldr	r1, [r3, #8]
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	899a      	ldrh	r2, [r3, #12]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	791b      	ldrb	r3, [r3, #4]
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f93a 	bl	8007e26 <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2204      	movs	r2, #4
 8007bb6:	761a      	strb	r2, [r3, #24]
      break;
 8007bb8:	e0f1      	b.n	8007d9e <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	791b      	ldrb	r3, [r3, #4]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	6878      	ldr	r0, [r7, #4]
 8007bc2:	f000 fc7d 	bl	80084c0 <USBH_LL_GetURBState>
 8007bc6:	4603      	mov	r3, r0
 8007bc8:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8007bca:	7bbb      	ldrb	r3, [r7, #14]
 8007bcc:	2b01      	cmp	r3, #1
 8007bce:	d102      	bne.n	8007bd6 <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	2209      	movs	r2, #9
 8007bd4:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
 8007bd8:	2b05      	cmp	r3, #5
 8007bda:	d102      	bne.n	8007be2 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8007bdc:	2303      	movs	r3, #3
 8007bde:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007be0:	e0d6      	b.n	8007d90 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8007be2:	7bbb      	ldrb	r3, [r7, #14]
 8007be4:	2b04      	cmp	r3, #4
 8007be6:	f040 80d3 	bne.w	8007d90 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	220b      	movs	r2, #11
 8007bee:	761a      	strb	r2, [r3, #24]
      break;
 8007bf0:	e0ce      	b.n	8007d90 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6899      	ldr	r1, [r3, #8]
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	899a      	ldrh	r2, [r3, #12]
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	795b      	ldrb	r3, [r3, #5]
 8007bfe:	2001      	movs	r0, #1
 8007c00:	9000      	str	r0, [sp, #0]
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f000 f8ea 	bl	8007ddc <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c0e:	b29a      	uxth	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	2206      	movs	r2, #6
 8007c18:	761a      	strb	r2, [r3, #24]
      break;
 8007c1a:	e0c0      	b.n	8007d9e <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	795b      	ldrb	r3, [r3, #5]
 8007c20:	4619      	mov	r1, r3
 8007c22:	6878      	ldr	r0, [r7, #4]
 8007c24:	f000 fc4c 	bl	80084c0 <USBH_LL_GetURBState>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007c2c:	7bbb      	ldrb	r3, [r7, #14]
 8007c2e:	2b01      	cmp	r3, #1
 8007c30:	d103      	bne.n	8007c3a <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2207      	movs	r2, #7
 8007c36:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007c38:	e0ac      	b.n	8007d94 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8007c3a:	7bbb      	ldrb	r3, [r7, #14]
 8007c3c:	2b05      	cmp	r3, #5
 8007c3e:	d105      	bne.n	8007c4c <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	220c      	movs	r2, #12
 8007c44:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8007c46:	2303      	movs	r3, #3
 8007c48:	73fb      	strb	r3, [r7, #15]
      break;
 8007c4a:	e0a3      	b.n	8007d94 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007c4c:	7bbb      	ldrb	r3, [r7, #14]
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d103      	bne.n	8007c5a <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2205      	movs	r2, #5
 8007c56:	761a      	strb	r2, [r3, #24]
      break;
 8007c58:	e09c      	b.n	8007d94 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8007c5a:	7bbb      	ldrb	r3, [r7, #14]
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	f040 8099 	bne.w	8007d94 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	220b      	movs	r2, #11
 8007c66:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8007c68:	2302      	movs	r3, #2
 8007c6a:	73fb      	strb	r3, [r7, #15]
      break;
 8007c6c:	e092      	b.n	8007d94 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	791b      	ldrb	r3, [r3, #4]
 8007c72:	2200      	movs	r2, #0
 8007c74:	2100      	movs	r1, #0
 8007c76:	6878      	ldr	r0, [r7, #4]
 8007c78:	f000 f8d5 	bl	8007e26 <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007c82:	b29a      	uxth	r2, r3
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	2208      	movs	r2, #8
 8007c8c:	761a      	strb	r2, [r3, #24]

      break;
 8007c8e:	e086      	b.n	8007d9e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	791b      	ldrb	r3, [r3, #4]
 8007c94:	4619      	mov	r1, r3
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fc12 	bl	80084c0 <USBH_LL_GetURBState>
 8007c9c:	4603      	mov	r3, r0
 8007c9e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8007ca0:	7bbb      	ldrb	r3, [r7, #14]
 8007ca2:	2b01      	cmp	r3, #1
 8007ca4:	d105      	bne.n	8007cb2 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	220d      	movs	r2, #13
 8007caa:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8007cac:	2300      	movs	r3, #0
 8007cae:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007cb0:	e072      	b.n	8007d98 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8007cb2:	7bbb      	ldrb	r3, [r7, #14]
 8007cb4:	2b04      	cmp	r3, #4
 8007cb6:	d103      	bne.n	8007cc0 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	220b      	movs	r2, #11
 8007cbc:	761a      	strb	r2, [r3, #24]
      break;
 8007cbe:	e06b      	b.n	8007d98 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8007cc0:	7bbb      	ldrb	r3, [r7, #14]
 8007cc2:	2b05      	cmp	r3, #5
 8007cc4:	d168      	bne.n	8007d98 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8007cc6:	2303      	movs	r3, #3
 8007cc8:	73fb      	strb	r3, [r7, #15]
      break;
 8007cca:	e065      	b.n	8007d98 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	795b      	ldrb	r3, [r3, #5]
 8007cd0:	2201      	movs	r2, #1
 8007cd2:	9200      	str	r2, [sp, #0]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	2100      	movs	r1, #0
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 f87f 	bl	8007ddc <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ce4:	b29a      	uxth	r2, r3
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	220a      	movs	r2, #10
 8007cee:	761a      	strb	r2, [r3, #24]
      break;
 8007cf0:	e055      	b.n	8007d9e <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	795b      	ldrb	r3, [r3, #5]
 8007cf6:	4619      	mov	r1, r3
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fbe1 	bl	80084c0 <USBH_LL_GetURBState>
 8007cfe:	4603      	mov	r3, r0
 8007d00:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8007d02:	7bbb      	ldrb	r3, [r7, #14]
 8007d04:	2b01      	cmp	r3, #1
 8007d06:	d105      	bne.n	8007d14 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	220d      	movs	r2, #13
 8007d10:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8007d12:	e043      	b.n	8007d9c <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8007d14:	7bbb      	ldrb	r3, [r7, #14]
 8007d16:	2b02      	cmp	r3, #2
 8007d18:	d103      	bne.n	8007d22 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	2209      	movs	r2, #9
 8007d1e:	761a      	strb	r2, [r3, #24]
      break;
 8007d20:	e03c      	b.n	8007d9c <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8007d22:	7bbb      	ldrb	r3, [r7, #14]
 8007d24:	2b04      	cmp	r3, #4
 8007d26:	d139      	bne.n	8007d9c <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	220b      	movs	r2, #11
 8007d2c:	761a      	strb	r2, [r3, #24]
      break;
 8007d2e:	e035      	b.n	8007d9c <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	7e5b      	ldrb	r3, [r3, #25]
 8007d34:	3301      	adds	r3, #1
 8007d36:	b2da      	uxtb	r2, r3
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	765a      	strb	r2, [r3, #25]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	7e5b      	ldrb	r3, [r3, #25]
 8007d40:	2b02      	cmp	r3, #2
 8007d42:	d806      	bhi.n	8007d52 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	2201      	movs	r2, #1
 8007d48:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	2201      	movs	r2, #1
 8007d4e:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8007d50:	e025      	b.n	8007d9e <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007d58:	2106      	movs	r1, #6
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2200      	movs	r2, #0
 8007d62:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	795b      	ldrb	r3, [r3, #5]
 8007d68:	4619      	mov	r1, r3
 8007d6a:	6878      	ldr	r0, [r7, #4]
 8007d6c:	f000 f90c 	bl	8007f88 <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	791b      	ldrb	r3, [r3, #4]
 8007d74:	4619      	mov	r1, r3
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f906 	bl	8007f88 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	2200      	movs	r2, #0
 8007d80:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8007d82:	2302      	movs	r3, #2
 8007d84:	73fb      	strb	r3, [r7, #15]
      break;
 8007d86:	e00a      	b.n	8007d9e <USBH_HandleControl+0x2de>

    default:
      break;
 8007d88:	bf00      	nop
 8007d8a:	e008      	b.n	8007d9e <USBH_HandleControl+0x2de>
      break;
 8007d8c:	bf00      	nop
 8007d8e:	e006      	b.n	8007d9e <USBH_HandleControl+0x2de>
      break;
 8007d90:	bf00      	nop
 8007d92:	e004      	b.n	8007d9e <USBH_HandleControl+0x2de>
      break;
 8007d94:	bf00      	nop
 8007d96:	e002      	b.n	8007d9e <USBH_HandleControl+0x2de>
      break;
 8007d98:	bf00      	nop
 8007d9a:	e000      	b.n	8007d9e <USBH_HandleControl+0x2de>
      break;
 8007d9c:	bf00      	nop
  }

  return status;
 8007d9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007da0:	4618      	mov	r0, r3
 8007da2:	3710      	adds	r7, #16
 8007da4:	46bd      	mov	sp, r7
 8007da6:	bd80      	pop	{r7, pc}

08007da8 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8007da8:	b580      	push	{r7, lr}
 8007daa:	b088      	sub	sp, #32
 8007dac:	af04      	add	r7, sp, #16
 8007dae:	60f8      	str	r0, [r7, #12]
 8007db0:	60b9      	str	r1, [r7, #8]
 8007db2:	4613      	mov	r3, r2
 8007db4:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007db6:	79f9      	ldrb	r1, [r7, #7]
 8007db8:	2300      	movs	r3, #0
 8007dba:	9303      	str	r3, [sp, #12]
 8007dbc:	2308      	movs	r3, #8
 8007dbe:	9302      	str	r3, [sp, #8]
 8007dc0:	68bb      	ldr	r3, [r7, #8]
 8007dc2:	9301      	str	r3, [sp, #4]
 8007dc4:	2300      	movs	r3, #0
 8007dc6:	9300      	str	r3, [sp, #0]
 8007dc8:	2300      	movs	r3, #0
 8007dca:	2200      	movs	r2, #0
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f000 fb46 	bl	800845e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8007dd2:	2300      	movs	r3, #0
}
 8007dd4:	4618      	mov	r0, r3
 8007dd6:	3710      	adds	r7, #16
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	bd80      	pop	{r7, pc}

08007ddc <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b088      	sub	sp, #32
 8007de0:	af04      	add	r7, sp, #16
 8007de2:	60f8      	str	r0, [r7, #12]
 8007de4:	60b9      	str	r1, [r7, #8]
 8007de6:	4611      	mov	r1, r2
 8007de8:	461a      	mov	r2, r3
 8007dea:	460b      	mov	r3, r1
 8007dec:	80fb      	strh	r3, [r7, #6]
 8007dee:	4613      	mov	r3, r2
 8007df0:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007df8:	2b00      	cmp	r3, #0
 8007dfa:	d001      	beq.n	8007e00 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007e00:	7979      	ldrb	r1, [r7, #5]
 8007e02:	7e3b      	ldrb	r3, [r7, #24]
 8007e04:	9303      	str	r3, [sp, #12]
 8007e06:	88fb      	ldrh	r3, [r7, #6]
 8007e08:	9302      	str	r3, [sp, #8]
 8007e0a:	68bb      	ldr	r3, [r7, #8]
 8007e0c:	9301      	str	r3, [sp, #4]
 8007e0e:	2301      	movs	r3, #1
 8007e10:	9300      	str	r3, [sp, #0]
 8007e12:	2300      	movs	r3, #0
 8007e14:	2200      	movs	r2, #0
 8007e16:	68f8      	ldr	r0, [r7, #12]
 8007e18:	f000 fb21 	bl	800845e <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8007e1c:	2300      	movs	r3, #0
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b088      	sub	sp, #32
 8007e2a:	af04      	add	r7, sp, #16
 8007e2c:	60f8      	str	r0, [r7, #12]
 8007e2e:	60b9      	str	r1, [r7, #8]
 8007e30:	4611      	mov	r1, r2
 8007e32:	461a      	mov	r2, r3
 8007e34:	460b      	mov	r3, r1
 8007e36:	80fb      	strh	r3, [r7, #6]
 8007e38:	4613      	mov	r3, r2
 8007e3a:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007e3c:	7979      	ldrb	r1, [r7, #5]
 8007e3e:	2300      	movs	r3, #0
 8007e40:	9303      	str	r3, [sp, #12]
 8007e42:	88fb      	ldrh	r3, [r7, #6]
 8007e44:	9302      	str	r3, [sp, #8]
 8007e46:	68bb      	ldr	r3, [r7, #8]
 8007e48:	9301      	str	r3, [sp, #4]
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	9300      	str	r3, [sp, #0]
 8007e4e:	2300      	movs	r3, #0
 8007e50:	2201      	movs	r2, #1
 8007e52:	68f8      	ldr	r0, [r7, #12]
 8007e54:	f000 fb03 	bl	800845e <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007e58:	2300      	movs	r3, #0

}
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	3710      	adds	r7, #16
 8007e5e:	46bd      	mov	sp, r7
 8007e60:	bd80      	pop	{r7, pc}

08007e62 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8007e62:	b580      	push	{r7, lr}
 8007e64:	b088      	sub	sp, #32
 8007e66:	af04      	add	r7, sp, #16
 8007e68:	60f8      	str	r0, [r7, #12]
 8007e6a:	60b9      	str	r1, [r7, #8]
 8007e6c:	4611      	mov	r1, r2
 8007e6e:	461a      	mov	r2, r3
 8007e70:	460b      	mov	r3, r1
 8007e72:	80fb      	strh	r3, [r7, #6]
 8007e74:	4613      	mov	r3, r2
 8007e76:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d001      	beq.n	8007e86 <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8007e82:	2300      	movs	r3, #0
 8007e84:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007e86:	7979      	ldrb	r1, [r7, #5]
 8007e88:	7e3b      	ldrb	r3, [r7, #24]
 8007e8a:	9303      	str	r3, [sp, #12]
 8007e8c:	88fb      	ldrh	r3, [r7, #6]
 8007e8e:	9302      	str	r3, [sp, #8]
 8007e90:	68bb      	ldr	r3, [r7, #8]
 8007e92:	9301      	str	r3, [sp, #4]
 8007e94:	2301      	movs	r3, #1
 8007e96:	9300      	str	r3, [sp, #0]
 8007e98:	2302      	movs	r3, #2
 8007e9a:	2200      	movs	r2, #0
 8007e9c:	68f8      	ldr	r0, [r7, #12]
 8007e9e:	f000 fade 	bl	800845e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8007ea2:	2300      	movs	r3, #0
}
 8007ea4:	4618      	mov	r0, r3
 8007ea6:	3710      	adds	r7, #16
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	bd80      	pop	{r7, pc}

08007eac <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8007eac:	b580      	push	{r7, lr}
 8007eae:	b088      	sub	sp, #32
 8007eb0:	af04      	add	r7, sp, #16
 8007eb2:	60f8      	str	r0, [r7, #12]
 8007eb4:	60b9      	str	r1, [r7, #8]
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	461a      	mov	r2, r3
 8007eba:	460b      	mov	r3, r1
 8007ebc:	80fb      	strh	r3, [r7, #6]
 8007ebe:	4613      	mov	r3, r2
 8007ec0:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8007ec2:	7979      	ldrb	r1, [r7, #5]
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	9303      	str	r3, [sp, #12]
 8007ec8:	88fb      	ldrh	r3, [r7, #6]
 8007eca:	9302      	str	r3, [sp, #8]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	9301      	str	r3, [sp, #4]
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	9300      	str	r3, [sp, #0]
 8007ed4:	2302      	movs	r3, #2
 8007ed6:	2201      	movs	r2, #1
 8007ed8:	68f8      	ldr	r0, [r7, #12]
 8007eda:	f000 fac0 	bl	800845e <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8007ede:	2300      	movs	r3, #0
}
 8007ee0:	4618      	mov	r0, r3
 8007ee2:	3710      	adds	r7, #16
 8007ee4:	46bd      	mov	sp, r7
 8007ee6:	bd80      	pop	{r7, pc}

08007ee8 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	b086      	sub	sp, #24
 8007eec:	af04      	add	r7, sp, #16
 8007eee:	6078      	str	r0, [r7, #4]
 8007ef0:	4608      	mov	r0, r1
 8007ef2:	4611      	mov	r1, r2
 8007ef4:	461a      	mov	r2, r3
 8007ef6:	4603      	mov	r3, r0
 8007ef8:	70fb      	strb	r3, [r7, #3]
 8007efa:	460b      	mov	r3, r1
 8007efc:	70bb      	strb	r3, [r7, #2]
 8007efe:	4613      	mov	r3, r2
 8007f00:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8007f02:	7878      	ldrb	r0, [r7, #1]
 8007f04:	78ba      	ldrb	r2, [r7, #2]
 8007f06:	78f9      	ldrb	r1, [r7, #3]
 8007f08:	8b3b      	ldrh	r3, [r7, #24]
 8007f0a:	9302      	str	r3, [sp, #8]
 8007f0c:	7d3b      	ldrb	r3, [r7, #20]
 8007f0e:	9301      	str	r3, [sp, #4]
 8007f10:	7c3b      	ldrb	r3, [r7, #16]
 8007f12:	9300      	str	r3, [sp, #0]
 8007f14:	4603      	mov	r3, r0
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f000 fa53 	bl	80083c2 <USBH_LL_OpenPipe>

  return USBH_OK;
 8007f1c:	2300      	movs	r3, #0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}

08007f26 <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8007f26:	b580      	push	{r7, lr}
 8007f28:	b082      	sub	sp, #8
 8007f2a:	af00      	add	r7, sp, #0
 8007f2c:	6078      	str	r0, [r7, #4]
 8007f2e:	460b      	mov	r3, r1
 8007f30:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8007f32:	78fb      	ldrb	r3, [r7, #3]
 8007f34:	4619      	mov	r1, r3
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	f000 fa72 	bl	8008420 <USBH_LL_ClosePipe>

  return USBH_OK;
 8007f3c:	2300      	movs	r3, #0
}
 8007f3e:	4618      	mov	r0, r3
 8007f40:	3708      	adds	r7, #8
 8007f42:	46bd      	mov	sp, r7
 8007f44:	bd80      	pop	{r7, pc}

08007f46 <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8007f46:	b580      	push	{r7, lr}
 8007f48:	b084      	sub	sp, #16
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8007f52:	6878      	ldr	r0, [r7, #4]
 8007f54:	f000 f836 	bl	8007fc4 <USBH_GetFreePipe>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8007f5c:	89fb      	ldrh	r3, [r7, #14]
 8007f5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d00a      	beq.n	8007f7c <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8007f66:	78fa      	ldrb	r2, [r7, #3]
 8007f68:	89fb      	ldrh	r3, [r7, #14]
 8007f6a:	f003 030f 	and.w	r3, r3, #15
 8007f6e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f72:	6879      	ldr	r1, [r7, #4]
 8007f74:	33e0      	adds	r3, #224	; 0xe0
 8007f76:	009b      	lsls	r3, r3, #2
 8007f78:	440b      	add	r3, r1
 8007f7a:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8007f7c:	89fb      	ldrh	r3, [r7, #14]
 8007f7e:	b2db      	uxtb	r3, r3
}
 8007f80:	4618      	mov	r0, r3
 8007f82:	3710      	adds	r7, #16
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b083      	sub	sp, #12
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8007f94:	78fb      	ldrb	r3, [r7, #3]
 8007f96:	2b0f      	cmp	r3, #15
 8007f98:	d80d      	bhi.n	8007fb6 <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8007f9a:	78fb      	ldrb	r3, [r7, #3]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	33e0      	adds	r3, #224	; 0xe0
 8007fa0:	009b      	lsls	r3, r3, #2
 8007fa2:	4413      	add	r3, r2
 8007fa4:	685a      	ldr	r2, [r3, #4]
 8007fa6:	78fb      	ldrb	r3, [r7, #3]
 8007fa8:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8007fac:	6879      	ldr	r1, [r7, #4]
 8007fae:	33e0      	adds	r3, #224	; 0xe0
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	440b      	add	r3, r1
 8007fb4:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8007fb6:	2300      	movs	r3, #0
}
 8007fb8:	4618      	mov	r0, r3
 8007fba:	370c      	adds	r7, #12
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr

08007fc4 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8007fc4:	b480      	push	{r7}
 8007fc6:	b085      	sub	sp, #20
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	73fb      	strb	r3, [r7, #15]
 8007fd4:	e00f      	b.n	8007ff6 <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8007fd6:	7bfb      	ldrb	r3, [r7, #15]
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	33e0      	adds	r3, #224	; 0xe0
 8007fdc:	009b      	lsls	r3, r3, #2
 8007fde:	4413      	add	r3, r2
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fe6:	2b00      	cmp	r3, #0
 8007fe8:	d102      	bne.n	8007ff0 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8007fea:	7bfb      	ldrb	r3, [r7, #15]
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	e007      	b.n	8008000 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < USBH_MAX_PIPES_NBR ; idx++)
 8007ff0:	7bfb      	ldrb	r3, [r7, #15]
 8007ff2:	3301      	adds	r3, #1
 8007ff4:	73fb      	strb	r3, [r7, #15]
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	2b0f      	cmp	r3, #15
 8007ffa:	d9ec      	bls.n	8007fd6 <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8007ffc:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008000:	4618      	mov	r0, r3
 8008002:	3714      	adds	r7, #20
 8008004:	46bd      	mov	sp, r7
 8008006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800a:	4770      	bx	lr

0800800c <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800800c:	b580      	push	{r7, lr}
 800800e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8008010:	2201      	movs	r2, #1
 8008012:	490e      	ldr	r1, [pc, #56]	; (800804c <MX_USB_HOST_Init+0x40>)
 8008014:	480e      	ldr	r0, [pc, #56]	; (8008050 <MX_USB_HOST_Init+0x44>)
 8008016:	f7fe fba7 	bl	8006768 <USBH_Init>
 800801a:	4603      	mov	r3, r0
 800801c:	2b00      	cmp	r3, #0
 800801e:	d001      	beq.n	8008024 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8008020:	f7f8 feec 	bl	8000dfc <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8008024:	490b      	ldr	r1, [pc, #44]	; (8008054 <MX_USB_HOST_Init+0x48>)
 8008026:	480a      	ldr	r0, [pc, #40]	; (8008050 <MX_USB_HOST_Init+0x44>)
 8008028:	f7fe fc2c 	bl	8006884 <USBH_RegisterClass>
 800802c:	4603      	mov	r3, r0
 800802e:	2b00      	cmp	r3, #0
 8008030:	d001      	beq.n	8008036 <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8008032:	f7f8 fee3 	bl	8000dfc <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8008036:	4806      	ldr	r0, [pc, #24]	; (8008050 <MX_USB_HOST_Init+0x44>)
 8008038:	f7fe fcb0 	bl	800699c <USBH_Start>
 800803c:	4603      	mov	r3, r0
 800803e:	2b00      	cmp	r3, #0
 8008040:	d001      	beq.n	8008046 <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8008042:	f7f8 fedb 	bl	8000dfc <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8008046:	bf00      	nop
 8008048:	bd80      	pop	{r7, pc}
 800804a:	bf00      	nop
 800804c:	0800806d 	.word	0x0800806d
 8008050:	20000238 	.word	0x20000238
 8008054:	2000000c 	.word	0x2000000c

08008058 <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800805c:	4802      	ldr	r0, [pc, #8]	; (8008068 <MX_USB_HOST_Process+0x10>)
 800805e:	f7fe fcad 	bl	80069bc <USBH_Process>
}
 8008062:	bf00      	nop
 8008064:	bd80      	pop	{r7, pc}
 8008066:	bf00      	nop
 8008068:	20000238 	.word	0x20000238

0800806c <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
 8008074:	460b      	mov	r3, r1
 8008076:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8008078:	78fb      	ldrb	r3, [r7, #3]
 800807a:	3b01      	subs	r3, #1
 800807c:	2b04      	cmp	r3, #4
 800807e:	d819      	bhi.n	80080b4 <USBH_UserProcess+0x48>
 8008080:	a201      	add	r2, pc, #4	; (adr r2, 8008088 <USBH_UserProcess+0x1c>)
 8008082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008086:	bf00      	nop
 8008088:	080080b5 	.word	0x080080b5
 800808c:	080080a5 	.word	0x080080a5
 8008090:	080080b5 	.word	0x080080b5
 8008094:	080080ad 	.word	0x080080ad
 8008098:	0800809d 	.word	0x0800809d
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800809c:	4b09      	ldr	r3, [pc, #36]	; (80080c4 <USBH_UserProcess+0x58>)
 800809e:	2203      	movs	r2, #3
 80080a0:	701a      	strb	r2, [r3, #0]
  break;
 80080a2:	e008      	b.n	80080b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 80080a4:	4b07      	ldr	r3, [pc, #28]	; (80080c4 <USBH_UserProcess+0x58>)
 80080a6:	2202      	movs	r2, #2
 80080a8:	701a      	strb	r2, [r3, #0]
  break;
 80080aa:	e004      	b.n	80080b6 <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 80080ac:	4b05      	ldr	r3, [pc, #20]	; (80080c4 <USBH_UserProcess+0x58>)
 80080ae:	2201      	movs	r2, #1
 80080b0:	701a      	strb	r2, [r3, #0]
  break;
 80080b2:	e000      	b.n	80080b6 <USBH_UserProcess+0x4a>

  default:
  break;
 80080b4:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 80080b6:	bf00      	nop
 80080b8:	370c      	adds	r7, #12
 80080ba:	46bd      	mov	sp, r7
 80080bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080c0:	4770      	bx	lr
 80080c2:	bf00      	nop
 80080c4:	20000610 	.word	0x20000610

080080c8 <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 80080c8:	b580      	push	{r7, lr}
 80080ca:	b08a      	sub	sp, #40	; 0x28
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80080d0:	f107 0314 	add.w	r3, r7, #20
 80080d4:	2200      	movs	r2, #0
 80080d6:	601a      	str	r2, [r3, #0]
 80080d8:	605a      	str	r2, [r3, #4]
 80080da:	609a      	str	r2, [r3, #8]
 80080dc:	60da      	str	r2, [r3, #12]
 80080de:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80080e8:	d147      	bne.n	800817a <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80080ea:	2300      	movs	r3, #0
 80080ec:	613b      	str	r3, [r7, #16]
 80080ee:	4b25      	ldr	r3, [pc, #148]	; (8008184 <HAL_HCD_MspInit+0xbc>)
 80080f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080f2:	4a24      	ldr	r2, [pc, #144]	; (8008184 <HAL_HCD_MspInit+0xbc>)
 80080f4:	f043 0301 	orr.w	r3, r3, #1
 80080f8:	6313      	str	r3, [r2, #48]	; 0x30
 80080fa:	4b22      	ldr	r3, [pc, #136]	; (8008184 <HAL_HCD_MspInit+0xbc>)
 80080fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080fe:	f003 0301 	and.w	r3, r3, #1
 8008102:	613b      	str	r3, [r7, #16]
 8008104:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8008106:	f44f 7300 	mov.w	r3, #512	; 0x200
 800810a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800810c:	2300      	movs	r3, #0
 800810e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008110:	2300      	movs	r3, #0
 8008112:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8008114:	f107 0314 	add.w	r3, r7, #20
 8008118:	4619      	mov	r1, r3
 800811a:	481b      	ldr	r0, [pc, #108]	; (8008188 <HAL_HCD_MspInit+0xc0>)
 800811c:	f7f9 fcc2 	bl	8001aa4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008120:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 8008124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008126:	2302      	movs	r3, #2
 8008128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800812a:	2300      	movs	r3, #0
 800812c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800812e:	2300      	movs	r3, #0
 8008130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008132:	230a      	movs	r3, #10
 8008134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008136:	f107 0314 	add.w	r3, r7, #20
 800813a:	4619      	mov	r1, r3
 800813c:	4812      	ldr	r0, [pc, #72]	; (8008188 <HAL_HCD_MspInit+0xc0>)
 800813e:	f7f9 fcb1 	bl	8001aa4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8008142:	4b10      	ldr	r3, [pc, #64]	; (8008184 <HAL_HCD_MspInit+0xbc>)
 8008144:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008146:	4a0f      	ldr	r2, [pc, #60]	; (8008184 <HAL_HCD_MspInit+0xbc>)
 8008148:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800814c:	6353      	str	r3, [r2, #52]	; 0x34
 800814e:	2300      	movs	r3, #0
 8008150:	60fb      	str	r3, [r7, #12]
 8008152:	4b0c      	ldr	r3, [pc, #48]	; (8008184 <HAL_HCD_MspInit+0xbc>)
 8008154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008156:	4a0b      	ldr	r2, [pc, #44]	; (8008184 <HAL_HCD_MspInit+0xbc>)
 8008158:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800815c:	6453      	str	r3, [r2, #68]	; 0x44
 800815e:	4b09      	ldr	r3, [pc, #36]	; (8008184 <HAL_HCD_MspInit+0xbc>)
 8008160:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008162:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008166:	60fb      	str	r3, [r7, #12]
 8008168:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800816a:	2200      	movs	r2, #0
 800816c:	2100      	movs	r1, #0
 800816e:	2043      	movs	r0, #67	; 0x43
 8008170:	f7f9 fc61 	bl	8001a36 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008174:	2043      	movs	r0, #67	; 0x43
 8008176:	f7f9 fc7a 	bl	8001a6e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800817a:	bf00      	nop
 800817c:	3728      	adds	r7, #40	; 0x28
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
 8008182:	bf00      	nop
 8008184:	40023800 	.word	0x40023800
 8008188:	40020000 	.word	0x40020000

0800818c <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800819a:	4618      	mov	r0, r3
 800819c:	f7fe ffed 	bl	800717a <USBH_LL_IncTimer>
}
 80081a0:	bf00      	nop
 80081a2:	3708      	adds	r7, #8
 80081a4:	46bd      	mov	sp, r7
 80081a6:	bd80      	pop	{r7, pc}

080081a8 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7ff f825 	bl	8007206 <USBH_LL_Connect>
}
 80081bc:	bf00      	nop
 80081be:	3708      	adds	r7, #8
 80081c0:	46bd      	mov	sp, r7
 80081c2:	bd80      	pop	{r7, pc}

080081c4 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 80081c4:	b580      	push	{r7, lr}
 80081c6:	b082      	sub	sp, #8
 80081c8:	af00      	add	r7, sp, #0
 80081ca:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80081d2:	4618      	mov	r0, r3
 80081d4:	f7ff f82e 	bl	8007234 <USBH_LL_Disconnect>
}
 80081d8:	bf00      	nop
 80081da:	3708      	adds	r7, #8
 80081dc:	46bd      	mov	sp, r7
 80081de:	bd80      	pop	{r7, pc}

080081e0 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 80081e0:	b480      	push	{r7}
 80081e2:	b083      	sub	sp, #12
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
 80081e8:	460b      	mov	r3, r1
 80081ea:	70fb      	strb	r3, [r7, #3]
 80081ec:	4613      	mov	r3, r2
 80081ee:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 80081f0:	bf00      	nop
 80081f2:	370c      	adds	r7, #12
 80081f4:	46bd      	mov	sp, r7
 80081f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fa:	4770      	bx	lr

080081fc <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80081fc:	b580      	push	{r7, lr}
 80081fe:	b082      	sub	sp, #8
 8008200:	af00      	add	r7, sp, #0
 8008202:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800820a:	4618      	mov	r0, r3
 800820c:	f7fe ffdf 	bl	80071ce <USBH_LL_PortEnabled>
}
 8008210:	bf00      	nop
 8008212:	3708      	adds	r7, #8
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	b082      	sub	sp, #8
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008226:	4618      	mov	r0, r3
 8008228:	f7fe ffdf 	bl	80071ea <USBH_LL_PortDisabled>
}
 800822c:	bf00      	nop
 800822e:	3708      	adds	r7, #8
 8008230:	46bd      	mov	sp, r7
 8008232:	bd80      	pop	{r7, pc}

08008234 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	b082      	sub	sp, #8
 8008238:	af00      	add	r7, sp, #0
 800823a:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008242:	2b01      	cmp	r3, #1
 8008244:	d12a      	bne.n	800829c <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 8008246:	4a18      	ldr	r2, [pc, #96]	; (80082a8 <USBH_LL_Init+0x74>)
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	4a15      	ldr	r2, [pc, #84]	; (80082a8 <USBH_LL_Init+0x74>)
 8008252:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008256:	4b14      	ldr	r3, [pc, #80]	; (80082a8 <USBH_LL_Init+0x74>)
 8008258:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800825c:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800825e:	4b12      	ldr	r3, [pc, #72]	; (80082a8 <USBH_LL_Init+0x74>)
 8008260:	2208      	movs	r2, #8
 8008262:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 8008264:	4b10      	ldr	r3, [pc, #64]	; (80082a8 <USBH_LL_Init+0x74>)
 8008266:	2201      	movs	r2, #1
 8008268:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800826a:	4b0f      	ldr	r3, [pc, #60]	; (80082a8 <USBH_LL_Init+0x74>)
 800826c:	2200      	movs	r2, #0
 800826e:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 8008270:	4b0d      	ldr	r3, [pc, #52]	; (80082a8 <USBH_LL_Init+0x74>)
 8008272:	2202      	movs	r2, #2
 8008274:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008276:	4b0c      	ldr	r3, [pc, #48]	; (80082a8 <USBH_LL_Init+0x74>)
 8008278:	2200      	movs	r2, #0
 800827a:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800827c:	480a      	ldr	r0, [pc, #40]	; (80082a8 <USBH_LL_Init+0x74>)
 800827e:	f7f9 fdc6 	bl	8001e0e <HAL_HCD_Init>
 8008282:	4603      	mov	r3, r0
 8008284:	2b00      	cmp	r3, #0
 8008286:	d001      	beq.n	800828c <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008288:	f7f8 fdb8 	bl	8000dfc <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800828c:	4806      	ldr	r0, [pc, #24]	; (80082a8 <USBH_LL_Init+0x74>)
 800828e:	f7fa f9aa 	bl	80025e6 <HAL_HCD_GetCurrentFrame>
 8008292:	4603      	mov	r3, r0
 8008294:	4619      	mov	r1, r3
 8008296:	6878      	ldr	r0, [r7, #4]
 8008298:	f7fe ff60 	bl	800715c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800829c:	2300      	movs	r3, #0
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3708      	adds	r7, #8
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}
 80082a6:	bf00      	nop
 80082a8:	20000614 	.word	0x20000614

080082ac <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 80082ac:	b580      	push	{r7, lr}
 80082ae:	b084      	sub	sp, #16
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b4:	2300      	movs	r3, #0
 80082b6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082b8:	2300      	movs	r3, #0
 80082ba:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082c2:	4618      	mov	r0, r3
 80082c4:	f7fa f919 	bl	80024fa <HAL_HCD_Start>
 80082c8:	4603      	mov	r3, r0
 80082ca:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 80082cc:	7bfb      	ldrb	r3, [r7, #15]
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 f95c 	bl	800858c <USBH_Get_USB_Status>
 80082d4:	4603      	mov	r3, r0
 80082d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082d8:	7bbb      	ldrb	r3, [r7, #14]
}
 80082da:	4618      	mov	r0, r3
 80082dc:	3710      	adds	r7, #16
 80082de:	46bd      	mov	sp, r7
 80082e0:	bd80      	pop	{r7, pc}

080082e2 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 80082e2:	b580      	push	{r7, lr}
 80082e4:	b084      	sub	sp, #16
 80082e6:	af00      	add	r7, sp, #0
 80082e8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082ea:	2300      	movs	r3, #0
 80082ec:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80082ee:	2300      	movs	r3, #0
 80082f0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80082f8:	4618      	mov	r0, r3
 80082fa:	f7fa f921 	bl	8002540 <HAL_HCD_Stop>
 80082fe:	4603      	mov	r3, r0
 8008300:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008302:	7bfb      	ldrb	r3, [r7, #15]
 8008304:	4618      	mov	r0, r3
 8008306:	f000 f941 	bl	800858c <USBH_Get_USB_Status>
 800830a:	4603      	mov	r3, r0
 800830c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800830e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 8008318:	b580      	push	{r7, lr}
 800831a:	b084      	sub	sp, #16
 800831c:	af00      	add	r7, sp, #0
 800831e:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 8008320:	2301      	movs	r3, #1
 8008322:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800832a:	4618      	mov	r0, r3
 800832c:	f7fa f969 	bl	8002602 <HAL_HCD_GetCurrentSpeed>
 8008330:	4603      	mov	r3, r0
 8008332:	2b02      	cmp	r3, #2
 8008334:	d00c      	beq.n	8008350 <USBH_LL_GetSpeed+0x38>
 8008336:	2b02      	cmp	r3, #2
 8008338:	d80d      	bhi.n	8008356 <USBH_LL_GetSpeed+0x3e>
 800833a:	2b00      	cmp	r3, #0
 800833c:	d002      	beq.n	8008344 <USBH_LL_GetSpeed+0x2c>
 800833e:	2b01      	cmp	r3, #1
 8008340:	d003      	beq.n	800834a <USBH_LL_GetSpeed+0x32>
 8008342:	e008      	b.n	8008356 <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 8008344:	2300      	movs	r3, #0
 8008346:	73fb      	strb	r3, [r7, #15]
    break;
 8008348:	e008      	b.n	800835c <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800834a:	2301      	movs	r3, #1
 800834c:	73fb      	strb	r3, [r7, #15]
    break;
 800834e:	e005      	b.n	800835c <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 8008350:	2302      	movs	r3, #2
 8008352:	73fb      	strb	r3, [r7, #15]
    break;
 8008354:	e002      	b.n	800835c <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 8008356:	2301      	movs	r3, #1
 8008358:	73fb      	strb	r3, [r7, #15]
    break;
 800835a:	bf00      	nop
  }
  return  speed;
 800835c:	7bfb      	ldrb	r3, [r7, #15]
}
 800835e:	4618      	mov	r0, r3
 8008360:	3710      	adds	r7, #16
 8008362:	46bd      	mov	sp, r7
 8008364:	bd80      	pop	{r7, pc}

08008366 <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 8008366:	b580      	push	{r7, lr}
 8008368:	b084      	sub	sp, #16
 800836a:	af00      	add	r7, sp, #0
 800836c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008372:	2300      	movs	r3, #0
 8008374:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800837c:	4618      	mov	r0, r3
 800837e:	f7fa f8fc 	bl	800257a <HAL_HCD_ResetPort>
 8008382:	4603      	mov	r3, r0
 8008384:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008386:	7bfb      	ldrb	r3, [r7, #15]
 8008388:	4618      	mov	r0, r3
 800838a:	f000 f8ff 	bl	800858c <USBH_Get_USB_Status>
 800838e:	4603      	mov	r3, r0
 8008390:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008392:	7bbb      	ldrb	r3, [r7, #14]
}
 8008394:	4618      	mov	r0, r3
 8008396:	3710      	adds	r7, #16
 8008398:	46bd      	mov	sp, r7
 800839a:	bd80      	pop	{r7, pc}

0800839c <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800839c:	b580      	push	{r7, lr}
 800839e:	b082      	sub	sp, #8
 80083a0:	af00      	add	r7, sp, #0
 80083a2:	6078      	str	r0, [r7, #4]
 80083a4:	460b      	mov	r3, r1
 80083a6:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80083ae:	78fa      	ldrb	r2, [r7, #3]
 80083b0:	4611      	mov	r1, r2
 80083b2:	4618      	mov	r0, r3
 80083b4:	f7fa f903 	bl	80025be <HAL_HCD_HC_GetXferCount>
 80083b8:	4603      	mov	r3, r0
}
 80083ba:	4618      	mov	r0, r3
 80083bc:	3708      	adds	r7, #8
 80083be:	46bd      	mov	sp, r7
 80083c0:	bd80      	pop	{r7, pc}

080083c2 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80083c2:	b590      	push	{r4, r7, lr}
 80083c4:	b089      	sub	sp, #36	; 0x24
 80083c6:	af04      	add	r7, sp, #16
 80083c8:	6078      	str	r0, [r7, #4]
 80083ca:	4608      	mov	r0, r1
 80083cc:	4611      	mov	r1, r2
 80083ce:	461a      	mov	r2, r3
 80083d0:	4603      	mov	r3, r0
 80083d2:	70fb      	strb	r3, [r7, #3]
 80083d4:	460b      	mov	r3, r1
 80083d6:	70bb      	strb	r3, [r7, #2]
 80083d8:	4613      	mov	r3, r2
 80083da:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083dc:	2300      	movs	r3, #0
 80083de:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80083e0:	2300      	movs	r3, #0
 80083e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80083ea:	787c      	ldrb	r4, [r7, #1]
 80083ec:	78ba      	ldrb	r2, [r7, #2]
 80083ee:	78f9      	ldrb	r1, [r7, #3]
 80083f0:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80083f2:	9302      	str	r3, [sp, #8]
 80083f4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80083f8:	9301      	str	r3, [sp, #4]
 80083fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 80083fe:	9300      	str	r3, [sp, #0]
 8008400:	4623      	mov	r3, r4
 8008402:	f7f9 fd66 	bl	8001ed2 <HAL_HCD_HC_Init>
 8008406:	4603      	mov	r3, r0
 8008408:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800840a:	7bfb      	ldrb	r3, [r7, #15]
 800840c:	4618      	mov	r0, r3
 800840e:	f000 f8bd 	bl	800858c <USBH_Get_USB_Status>
 8008412:	4603      	mov	r3, r0
 8008414:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008416:	7bbb      	ldrb	r3, [r7, #14]
}
 8008418:	4618      	mov	r0, r3
 800841a:	3714      	adds	r7, #20
 800841c:	46bd      	mov	sp, r7
 800841e:	bd90      	pop	{r4, r7, pc}

08008420 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b084      	sub	sp, #16
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
 8008428:	460b      	mov	r3, r1
 800842a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800842c:	2300      	movs	r3, #0
 800842e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008430:	2300      	movs	r3, #0
 8008432:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800843a:	78fa      	ldrb	r2, [r7, #3]
 800843c:	4611      	mov	r1, r2
 800843e:	4618      	mov	r0, r3
 8008440:	f7f9 fdd6 	bl	8001ff0 <HAL_HCD_HC_Halt>
 8008444:	4603      	mov	r3, r0
 8008446:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008448:	7bfb      	ldrb	r3, [r7, #15]
 800844a:	4618      	mov	r0, r3
 800844c:	f000 f89e 	bl	800858c <USBH_Get_USB_Status>
 8008450:	4603      	mov	r3, r0
 8008452:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008454:	7bbb      	ldrb	r3, [r7, #14]
}
 8008456:	4618      	mov	r0, r3
 8008458:	3710      	adds	r7, #16
 800845a:	46bd      	mov	sp, r7
 800845c:	bd80      	pop	{r7, pc}

0800845e <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800845e:	b590      	push	{r4, r7, lr}
 8008460:	b089      	sub	sp, #36	; 0x24
 8008462:	af04      	add	r7, sp, #16
 8008464:	6078      	str	r0, [r7, #4]
 8008466:	4608      	mov	r0, r1
 8008468:	4611      	mov	r1, r2
 800846a:	461a      	mov	r2, r3
 800846c:	4603      	mov	r3, r0
 800846e:	70fb      	strb	r3, [r7, #3]
 8008470:	460b      	mov	r3, r1
 8008472:	70bb      	strb	r3, [r7, #2]
 8008474:	4613      	mov	r3, r2
 8008476:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008478:	2300      	movs	r3, #0
 800847a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800847c:	2300      	movs	r3, #0
 800847e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 8008486:	787c      	ldrb	r4, [r7, #1]
 8008488:	78ba      	ldrb	r2, [r7, #2]
 800848a:	78f9      	ldrb	r1, [r7, #3]
 800848c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008490:	9303      	str	r3, [sp, #12]
 8008492:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8008494:	9302      	str	r3, [sp, #8]
 8008496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008498:	9301      	str	r3, [sp, #4]
 800849a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800849e:	9300      	str	r3, [sp, #0]
 80084a0:	4623      	mov	r3, r4
 80084a2:	f7f9 fdc9 	bl	8002038 <HAL_HCD_HC_SubmitRequest>
 80084a6:	4603      	mov	r3, r0
 80084a8:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 80084aa:	7bfb      	ldrb	r3, [r7, #15]
 80084ac:	4618      	mov	r0, r3
 80084ae:	f000 f86d 	bl	800858c <USBH_Get_USB_Status>
 80084b2:	4603      	mov	r3, r0
 80084b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80084b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80084b8:	4618      	mov	r0, r3
 80084ba:	3714      	adds	r7, #20
 80084bc:	46bd      	mov	sp, r7
 80084be:	bd90      	pop	{r4, r7, pc}

080084c0 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b082      	sub	sp, #8
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
 80084c8:	460b      	mov	r3, r1
 80084ca:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80084d2:	78fa      	ldrb	r2, [r7, #3]
 80084d4:	4611      	mov	r1, r2
 80084d6:	4618      	mov	r0, r3
 80084d8:	f7fa f85d 	bl	8002596 <HAL_HCD_HC_GetURBState>
 80084dc:	4603      	mov	r3, r0
}
 80084de:	4618      	mov	r0, r3
 80084e0:	3708      	adds	r7, #8
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b082      	sub	sp, #8
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
 80084ee:	460b      	mov	r3, r1
 80084f0:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80084f8:	2b01      	cmp	r3, #1
 80084fa:	d103      	bne.n	8008504 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 80084fc:	78fb      	ldrb	r3, [r7, #3]
 80084fe:	4618      	mov	r0, r3
 8008500:	f000 f870 	bl	80085e4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008504:	20c8      	movs	r0, #200	; 0xc8
 8008506:	f7f8 ff35 	bl	8001374 <HAL_Delay>
  return USBH_OK;
 800850a:	2300      	movs	r3, #0
}
 800850c:	4618      	mov	r0, r3
 800850e:	3708      	adds	r7, #8
 8008510:	46bd      	mov	sp, r7
 8008512:	bd80      	pop	{r7, pc}

08008514 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008514:	b480      	push	{r7}
 8008516:	b085      	sub	sp, #20
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
 800851c:	460b      	mov	r3, r1
 800851e:	70fb      	strb	r3, [r7, #3]
 8008520:	4613      	mov	r3, r2
 8008522:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800852a:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800852c:	78fb      	ldrb	r3, [r7, #3]
 800852e:	68fa      	ldr	r2, [r7, #12]
 8008530:	212c      	movs	r1, #44	; 0x2c
 8008532:	fb01 f303 	mul.w	r3, r1, r3
 8008536:	4413      	add	r3, r2
 8008538:	333b      	adds	r3, #59	; 0x3b
 800853a:	781b      	ldrb	r3, [r3, #0]
 800853c:	2b00      	cmp	r3, #0
 800853e:	d009      	beq.n	8008554 <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008540:	78fb      	ldrb	r3, [r7, #3]
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	212c      	movs	r1, #44	; 0x2c
 8008546:	fb01 f303 	mul.w	r3, r1, r3
 800854a:	4413      	add	r3, r2
 800854c:	3354      	adds	r3, #84	; 0x54
 800854e:	78ba      	ldrb	r2, [r7, #2]
 8008550:	701a      	strb	r2, [r3, #0]
 8008552:	e008      	b.n	8008566 <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008554:	78fb      	ldrb	r3, [r7, #3]
 8008556:	68fa      	ldr	r2, [r7, #12]
 8008558:	212c      	movs	r1, #44	; 0x2c
 800855a:	fb01 f303 	mul.w	r3, r1, r3
 800855e:	4413      	add	r3, r2
 8008560:	3355      	adds	r3, #85	; 0x55
 8008562:	78ba      	ldrb	r2, [r7, #2]
 8008564:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008566:	2300      	movs	r3, #0
}
 8008568:	4618      	mov	r0, r3
 800856a:	3714      	adds	r7, #20
 800856c:	46bd      	mov	sp, r7
 800856e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008572:	4770      	bx	lr

08008574 <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 8008574:	b580      	push	{r7, lr}
 8008576:	b082      	sub	sp, #8
 8008578:	af00      	add	r7, sp, #0
 800857a:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f7f8 fef9 	bl	8001374 <HAL_Delay>
}
 8008582:	bf00      	nop
 8008584:	3708      	adds	r7, #8
 8008586:	46bd      	mov	sp, r7
 8008588:	bd80      	pop	{r7, pc}
	...

0800858c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800858c:	b480      	push	{r7}
 800858e:	b085      	sub	sp, #20
 8008590:	af00      	add	r7, sp, #0
 8008592:	4603      	mov	r3, r0
 8008594:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800859a:	79fb      	ldrb	r3, [r7, #7]
 800859c:	2b03      	cmp	r3, #3
 800859e:	d817      	bhi.n	80085d0 <USBH_Get_USB_Status+0x44>
 80085a0:	a201      	add	r2, pc, #4	; (adr r2, 80085a8 <USBH_Get_USB_Status+0x1c>)
 80085a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085a6:	bf00      	nop
 80085a8:	080085b9 	.word	0x080085b9
 80085ac:	080085bf 	.word	0x080085bf
 80085b0:	080085c5 	.word	0x080085c5
 80085b4:	080085cb 	.word	0x080085cb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 80085b8:	2300      	movs	r3, #0
 80085ba:	73fb      	strb	r3, [r7, #15]
    break;
 80085bc:	e00b      	b.n	80085d6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 80085be:	2302      	movs	r3, #2
 80085c0:	73fb      	strb	r3, [r7, #15]
    break;
 80085c2:	e008      	b.n	80085d6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 80085c4:	2301      	movs	r3, #1
 80085c6:	73fb      	strb	r3, [r7, #15]
    break;
 80085c8:	e005      	b.n	80085d6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 80085ca:	2302      	movs	r3, #2
 80085cc:	73fb      	strb	r3, [r7, #15]
    break;
 80085ce:	e002      	b.n	80085d6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 80085d0:	2302      	movs	r3, #2
 80085d2:	73fb      	strb	r3, [r7, #15]
    break;
 80085d4:	bf00      	nop
  }
  return usb_status;
 80085d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3714      	adds	r7, #20
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr

080085e4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b084      	sub	sp, #16
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	4603      	mov	r3, r0
 80085ec:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 80085ee:	79fb      	ldrb	r3, [r7, #7]
 80085f0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 80085f2:	79fb      	ldrb	r3, [r7, #7]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d102      	bne.n	80085fe <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 80085f8:	2300      	movs	r3, #0
 80085fa:	73fb      	strb	r3, [r7, #15]
 80085fc:	e001      	b.n	8008602 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 80085fe:	2301      	movs	r3, #1
 8008600:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 8008602:	7bfb      	ldrb	r3, [r7, #15]
 8008604:	461a      	mov	r2, r3
 8008606:	2101      	movs	r1, #1
 8008608:	4803      	ldr	r0, [pc, #12]	; (8008618 <MX_DriverVbusFS+0x34>)
 800860a:	f7f9 fbe7 	bl	8001ddc <HAL_GPIO_WritePin>
}
 800860e:	bf00      	nop
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	40020800 	.word	0x40020800

0800861c <__errno>:
 800861c:	4b01      	ldr	r3, [pc, #4]	; (8008624 <__errno+0x8>)
 800861e:	6818      	ldr	r0, [r3, #0]
 8008620:	4770      	bx	lr
 8008622:	bf00      	nop
 8008624:	2000002c 	.word	0x2000002c

08008628 <__libc_init_array>:
 8008628:	b570      	push	{r4, r5, r6, lr}
 800862a:	4d0d      	ldr	r5, [pc, #52]	; (8008660 <__libc_init_array+0x38>)
 800862c:	4c0d      	ldr	r4, [pc, #52]	; (8008664 <__libc_init_array+0x3c>)
 800862e:	1b64      	subs	r4, r4, r5
 8008630:	10a4      	asrs	r4, r4, #2
 8008632:	2600      	movs	r6, #0
 8008634:	42a6      	cmp	r6, r4
 8008636:	d109      	bne.n	800864c <__libc_init_array+0x24>
 8008638:	4d0b      	ldr	r5, [pc, #44]	; (8008668 <__libc_init_array+0x40>)
 800863a:	4c0c      	ldr	r4, [pc, #48]	; (800866c <__libc_init_array+0x44>)
 800863c:	f000 fc9e 	bl	8008f7c <_init>
 8008640:	1b64      	subs	r4, r4, r5
 8008642:	10a4      	asrs	r4, r4, #2
 8008644:	2600      	movs	r6, #0
 8008646:	42a6      	cmp	r6, r4
 8008648:	d105      	bne.n	8008656 <__libc_init_array+0x2e>
 800864a:	bd70      	pop	{r4, r5, r6, pc}
 800864c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008650:	4798      	blx	r3
 8008652:	3601      	adds	r6, #1
 8008654:	e7ee      	b.n	8008634 <__libc_init_array+0xc>
 8008656:	f855 3b04 	ldr.w	r3, [r5], #4
 800865a:	4798      	blx	r3
 800865c:	3601      	adds	r6, #1
 800865e:	e7f2      	b.n	8008646 <__libc_init_array+0x1e>
 8008660:	08009014 	.word	0x08009014
 8008664:	08009014 	.word	0x08009014
 8008668:	08009014 	.word	0x08009014
 800866c:	08009018 	.word	0x08009018

08008670 <malloc>:
 8008670:	4b02      	ldr	r3, [pc, #8]	; (800867c <malloc+0xc>)
 8008672:	4601      	mov	r1, r0
 8008674:	6818      	ldr	r0, [r3, #0]
 8008676:	f000 b87f 	b.w	8008778 <_malloc_r>
 800867a:	bf00      	nop
 800867c:	2000002c 	.word	0x2000002c

08008680 <free>:
 8008680:	4b02      	ldr	r3, [pc, #8]	; (800868c <free+0xc>)
 8008682:	4601      	mov	r1, r0
 8008684:	6818      	ldr	r0, [r3, #0]
 8008686:	f000 b80b 	b.w	80086a0 <_free_r>
 800868a:	bf00      	nop
 800868c:	2000002c 	.word	0x2000002c

08008690 <memset>:
 8008690:	4402      	add	r2, r0
 8008692:	4603      	mov	r3, r0
 8008694:	4293      	cmp	r3, r2
 8008696:	d100      	bne.n	800869a <memset+0xa>
 8008698:	4770      	bx	lr
 800869a:	f803 1b01 	strb.w	r1, [r3], #1
 800869e:	e7f9      	b.n	8008694 <memset+0x4>

080086a0 <_free_r>:
 80086a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80086a2:	2900      	cmp	r1, #0
 80086a4:	d044      	beq.n	8008730 <_free_r+0x90>
 80086a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80086aa:	9001      	str	r0, [sp, #4]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	f1a1 0404 	sub.w	r4, r1, #4
 80086b2:	bfb8      	it	lt
 80086b4:	18e4      	addlt	r4, r4, r3
 80086b6:	f000 f903 	bl	80088c0 <__malloc_lock>
 80086ba:	4a1e      	ldr	r2, [pc, #120]	; (8008734 <_free_r+0x94>)
 80086bc:	9801      	ldr	r0, [sp, #4]
 80086be:	6813      	ldr	r3, [r2, #0]
 80086c0:	b933      	cbnz	r3, 80086d0 <_free_r+0x30>
 80086c2:	6063      	str	r3, [r4, #4]
 80086c4:	6014      	str	r4, [r2, #0]
 80086c6:	b003      	add	sp, #12
 80086c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80086cc:	f000 b8fe 	b.w	80088cc <__malloc_unlock>
 80086d0:	42a3      	cmp	r3, r4
 80086d2:	d908      	bls.n	80086e6 <_free_r+0x46>
 80086d4:	6825      	ldr	r5, [r4, #0]
 80086d6:	1961      	adds	r1, r4, r5
 80086d8:	428b      	cmp	r3, r1
 80086da:	bf01      	itttt	eq
 80086dc:	6819      	ldreq	r1, [r3, #0]
 80086de:	685b      	ldreq	r3, [r3, #4]
 80086e0:	1949      	addeq	r1, r1, r5
 80086e2:	6021      	streq	r1, [r4, #0]
 80086e4:	e7ed      	b.n	80086c2 <_free_r+0x22>
 80086e6:	461a      	mov	r2, r3
 80086e8:	685b      	ldr	r3, [r3, #4]
 80086ea:	b10b      	cbz	r3, 80086f0 <_free_r+0x50>
 80086ec:	42a3      	cmp	r3, r4
 80086ee:	d9fa      	bls.n	80086e6 <_free_r+0x46>
 80086f0:	6811      	ldr	r1, [r2, #0]
 80086f2:	1855      	adds	r5, r2, r1
 80086f4:	42a5      	cmp	r5, r4
 80086f6:	d10b      	bne.n	8008710 <_free_r+0x70>
 80086f8:	6824      	ldr	r4, [r4, #0]
 80086fa:	4421      	add	r1, r4
 80086fc:	1854      	adds	r4, r2, r1
 80086fe:	42a3      	cmp	r3, r4
 8008700:	6011      	str	r1, [r2, #0]
 8008702:	d1e0      	bne.n	80086c6 <_free_r+0x26>
 8008704:	681c      	ldr	r4, [r3, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	6053      	str	r3, [r2, #4]
 800870a:	4421      	add	r1, r4
 800870c:	6011      	str	r1, [r2, #0]
 800870e:	e7da      	b.n	80086c6 <_free_r+0x26>
 8008710:	d902      	bls.n	8008718 <_free_r+0x78>
 8008712:	230c      	movs	r3, #12
 8008714:	6003      	str	r3, [r0, #0]
 8008716:	e7d6      	b.n	80086c6 <_free_r+0x26>
 8008718:	6825      	ldr	r5, [r4, #0]
 800871a:	1961      	adds	r1, r4, r5
 800871c:	428b      	cmp	r3, r1
 800871e:	bf04      	itt	eq
 8008720:	6819      	ldreq	r1, [r3, #0]
 8008722:	685b      	ldreq	r3, [r3, #4]
 8008724:	6063      	str	r3, [r4, #4]
 8008726:	bf04      	itt	eq
 8008728:	1949      	addeq	r1, r1, r5
 800872a:	6021      	streq	r1, [r4, #0]
 800872c:	6054      	str	r4, [r2, #4]
 800872e:	e7ca      	b.n	80086c6 <_free_r+0x26>
 8008730:	b003      	add	sp, #12
 8008732:	bd30      	pop	{r4, r5, pc}
 8008734:	20000918 	.word	0x20000918

08008738 <sbrk_aligned>:
 8008738:	b570      	push	{r4, r5, r6, lr}
 800873a:	4e0e      	ldr	r6, [pc, #56]	; (8008774 <sbrk_aligned+0x3c>)
 800873c:	460c      	mov	r4, r1
 800873e:	6831      	ldr	r1, [r6, #0]
 8008740:	4605      	mov	r5, r0
 8008742:	b911      	cbnz	r1, 800874a <sbrk_aligned+0x12>
 8008744:	f000 f88c 	bl	8008860 <_sbrk_r>
 8008748:	6030      	str	r0, [r6, #0]
 800874a:	4621      	mov	r1, r4
 800874c:	4628      	mov	r0, r5
 800874e:	f000 f887 	bl	8008860 <_sbrk_r>
 8008752:	1c43      	adds	r3, r0, #1
 8008754:	d00a      	beq.n	800876c <sbrk_aligned+0x34>
 8008756:	1cc4      	adds	r4, r0, #3
 8008758:	f024 0403 	bic.w	r4, r4, #3
 800875c:	42a0      	cmp	r0, r4
 800875e:	d007      	beq.n	8008770 <sbrk_aligned+0x38>
 8008760:	1a21      	subs	r1, r4, r0
 8008762:	4628      	mov	r0, r5
 8008764:	f000 f87c 	bl	8008860 <_sbrk_r>
 8008768:	3001      	adds	r0, #1
 800876a:	d101      	bne.n	8008770 <sbrk_aligned+0x38>
 800876c:	f04f 34ff 	mov.w	r4, #4294967295
 8008770:	4620      	mov	r0, r4
 8008772:	bd70      	pop	{r4, r5, r6, pc}
 8008774:	2000091c 	.word	0x2000091c

08008778 <_malloc_r>:
 8008778:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800877c:	1ccd      	adds	r5, r1, #3
 800877e:	f025 0503 	bic.w	r5, r5, #3
 8008782:	3508      	adds	r5, #8
 8008784:	2d0c      	cmp	r5, #12
 8008786:	bf38      	it	cc
 8008788:	250c      	movcc	r5, #12
 800878a:	2d00      	cmp	r5, #0
 800878c:	4607      	mov	r7, r0
 800878e:	db01      	blt.n	8008794 <_malloc_r+0x1c>
 8008790:	42a9      	cmp	r1, r5
 8008792:	d905      	bls.n	80087a0 <_malloc_r+0x28>
 8008794:	230c      	movs	r3, #12
 8008796:	603b      	str	r3, [r7, #0]
 8008798:	2600      	movs	r6, #0
 800879a:	4630      	mov	r0, r6
 800879c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a0:	4e2e      	ldr	r6, [pc, #184]	; (800885c <_malloc_r+0xe4>)
 80087a2:	f000 f88d 	bl	80088c0 <__malloc_lock>
 80087a6:	6833      	ldr	r3, [r6, #0]
 80087a8:	461c      	mov	r4, r3
 80087aa:	bb34      	cbnz	r4, 80087fa <_malloc_r+0x82>
 80087ac:	4629      	mov	r1, r5
 80087ae:	4638      	mov	r0, r7
 80087b0:	f7ff ffc2 	bl	8008738 <sbrk_aligned>
 80087b4:	1c43      	adds	r3, r0, #1
 80087b6:	4604      	mov	r4, r0
 80087b8:	d14d      	bne.n	8008856 <_malloc_r+0xde>
 80087ba:	6834      	ldr	r4, [r6, #0]
 80087bc:	4626      	mov	r6, r4
 80087be:	2e00      	cmp	r6, #0
 80087c0:	d140      	bne.n	8008844 <_malloc_r+0xcc>
 80087c2:	6823      	ldr	r3, [r4, #0]
 80087c4:	4631      	mov	r1, r6
 80087c6:	4638      	mov	r0, r7
 80087c8:	eb04 0803 	add.w	r8, r4, r3
 80087cc:	f000 f848 	bl	8008860 <_sbrk_r>
 80087d0:	4580      	cmp	r8, r0
 80087d2:	d13a      	bne.n	800884a <_malloc_r+0xd2>
 80087d4:	6821      	ldr	r1, [r4, #0]
 80087d6:	3503      	adds	r5, #3
 80087d8:	1a6d      	subs	r5, r5, r1
 80087da:	f025 0503 	bic.w	r5, r5, #3
 80087de:	3508      	adds	r5, #8
 80087e0:	2d0c      	cmp	r5, #12
 80087e2:	bf38      	it	cc
 80087e4:	250c      	movcc	r5, #12
 80087e6:	4629      	mov	r1, r5
 80087e8:	4638      	mov	r0, r7
 80087ea:	f7ff ffa5 	bl	8008738 <sbrk_aligned>
 80087ee:	3001      	adds	r0, #1
 80087f0:	d02b      	beq.n	800884a <_malloc_r+0xd2>
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	442b      	add	r3, r5
 80087f6:	6023      	str	r3, [r4, #0]
 80087f8:	e00e      	b.n	8008818 <_malloc_r+0xa0>
 80087fa:	6822      	ldr	r2, [r4, #0]
 80087fc:	1b52      	subs	r2, r2, r5
 80087fe:	d41e      	bmi.n	800883e <_malloc_r+0xc6>
 8008800:	2a0b      	cmp	r2, #11
 8008802:	d916      	bls.n	8008832 <_malloc_r+0xba>
 8008804:	1961      	adds	r1, r4, r5
 8008806:	42a3      	cmp	r3, r4
 8008808:	6025      	str	r5, [r4, #0]
 800880a:	bf18      	it	ne
 800880c:	6059      	strne	r1, [r3, #4]
 800880e:	6863      	ldr	r3, [r4, #4]
 8008810:	bf08      	it	eq
 8008812:	6031      	streq	r1, [r6, #0]
 8008814:	5162      	str	r2, [r4, r5]
 8008816:	604b      	str	r3, [r1, #4]
 8008818:	4638      	mov	r0, r7
 800881a:	f104 060b 	add.w	r6, r4, #11
 800881e:	f000 f855 	bl	80088cc <__malloc_unlock>
 8008822:	f026 0607 	bic.w	r6, r6, #7
 8008826:	1d23      	adds	r3, r4, #4
 8008828:	1af2      	subs	r2, r6, r3
 800882a:	d0b6      	beq.n	800879a <_malloc_r+0x22>
 800882c:	1b9b      	subs	r3, r3, r6
 800882e:	50a3      	str	r3, [r4, r2]
 8008830:	e7b3      	b.n	800879a <_malloc_r+0x22>
 8008832:	6862      	ldr	r2, [r4, #4]
 8008834:	42a3      	cmp	r3, r4
 8008836:	bf0c      	ite	eq
 8008838:	6032      	streq	r2, [r6, #0]
 800883a:	605a      	strne	r2, [r3, #4]
 800883c:	e7ec      	b.n	8008818 <_malloc_r+0xa0>
 800883e:	4623      	mov	r3, r4
 8008840:	6864      	ldr	r4, [r4, #4]
 8008842:	e7b2      	b.n	80087aa <_malloc_r+0x32>
 8008844:	4634      	mov	r4, r6
 8008846:	6876      	ldr	r6, [r6, #4]
 8008848:	e7b9      	b.n	80087be <_malloc_r+0x46>
 800884a:	230c      	movs	r3, #12
 800884c:	603b      	str	r3, [r7, #0]
 800884e:	4638      	mov	r0, r7
 8008850:	f000 f83c 	bl	80088cc <__malloc_unlock>
 8008854:	e7a1      	b.n	800879a <_malloc_r+0x22>
 8008856:	6025      	str	r5, [r4, #0]
 8008858:	e7de      	b.n	8008818 <_malloc_r+0xa0>
 800885a:	bf00      	nop
 800885c:	20000918 	.word	0x20000918

08008860 <_sbrk_r>:
 8008860:	b538      	push	{r3, r4, r5, lr}
 8008862:	4d06      	ldr	r5, [pc, #24]	; (800887c <_sbrk_r+0x1c>)
 8008864:	2300      	movs	r3, #0
 8008866:	4604      	mov	r4, r0
 8008868:	4608      	mov	r0, r1
 800886a:	602b      	str	r3, [r5, #0]
 800886c:	f7f8 fc9e 	bl	80011ac <_sbrk>
 8008870:	1c43      	adds	r3, r0, #1
 8008872:	d102      	bne.n	800887a <_sbrk_r+0x1a>
 8008874:	682b      	ldr	r3, [r5, #0]
 8008876:	b103      	cbz	r3, 800887a <_sbrk_r+0x1a>
 8008878:	6023      	str	r3, [r4, #0]
 800887a:	bd38      	pop	{r3, r4, r5, pc}
 800887c:	20000920 	.word	0x20000920

08008880 <siprintf>:
 8008880:	b40e      	push	{r1, r2, r3}
 8008882:	b500      	push	{lr}
 8008884:	b09c      	sub	sp, #112	; 0x70
 8008886:	ab1d      	add	r3, sp, #116	; 0x74
 8008888:	9002      	str	r0, [sp, #8]
 800888a:	9006      	str	r0, [sp, #24]
 800888c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008890:	4809      	ldr	r0, [pc, #36]	; (80088b8 <siprintf+0x38>)
 8008892:	9107      	str	r1, [sp, #28]
 8008894:	9104      	str	r1, [sp, #16]
 8008896:	4909      	ldr	r1, [pc, #36]	; (80088bc <siprintf+0x3c>)
 8008898:	f853 2b04 	ldr.w	r2, [r3], #4
 800889c:	9105      	str	r1, [sp, #20]
 800889e:	6800      	ldr	r0, [r0, #0]
 80088a0:	9301      	str	r3, [sp, #4]
 80088a2:	a902      	add	r1, sp, #8
 80088a4:	f000 f874 	bl	8008990 <_svfiprintf_r>
 80088a8:	9b02      	ldr	r3, [sp, #8]
 80088aa:	2200      	movs	r2, #0
 80088ac:	701a      	strb	r2, [r3, #0]
 80088ae:	b01c      	add	sp, #112	; 0x70
 80088b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80088b4:	b003      	add	sp, #12
 80088b6:	4770      	bx	lr
 80088b8:	2000002c 	.word	0x2000002c
 80088bc:	ffff0208 	.word	0xffff0208

080088c0 <__malloc_lock>:
 80088c0:	4801      	ldr	r0, [pc, #4]	; (80088c8 <__malloc_lock+0x8>)
 80088c2:	f000 baf9 	b.w	8008eb8 <__retarget_lock_acquire_recursive>
 80088c6:	bf00      	nop
 80088c8:	20000924 	.word	0x20000924

080088cc <__malloc_unlock>:
 80088cc:	4801      	ldr	r0, [pc, #4]	; (80088d4 <__malloc_unlock+0x8>)
 80088ce:	f000 baf4 	b.w	8008eba <__retarget_lock_release_recursive>
 80088d2:	bf00      	nop
 80088d4:	20000924 	.word	0x20000924

080088d8 <__ssputs_r>:
 80088d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088dc:	688e      	ldr	r6, [r1, #8]
 80088de:	429e      	cmp	r6, r3
 80088e0:	4682      	mov	sl, r0
 80088e2:	460c      	mov	r4, r1
 80088e4:	4690      	mov	r8, r2
 80088e6:	461f      	mov	r7, r3
 80088e8:	d838      	bhi.n	800895c <__ssputs_r+0x84>
 80088ea:	898a      	ldrh	r2, [r1, #12]
 80088ec:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80088f0:	d032      	beq.n	8008958 <__ssputs_r+0x80>
 80088f2:	6825      	ldr	r5, [r4, #0]
 80088f4:	6909      	ldr	r1, [r1, #16]
 80088f6:	eba5 0901 	sub.w	r9, r5, r1
 80088fa:	6965      	ldr	r5, [r4, #20]
 80088fc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008900:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008904:	3301      	adds	r3, #1
 8008906:	444b      	add	r3, r9
 8008908:	106d      	asrs	r5, r5, #1
 800890a:	429d      	cmp	r5, r3
 800890c:	bf38      	it	cc
 800890e:	461d      	movcc	r5, r3
 8008910:	0553      	lsls	r3, r2, #21
 8008912:	d531      	bpl.n	8008978 <__ssputs_r+0xa0>
 8008914:	4629      	mov	r1, r5
 8008916:	f7ff ff2f 	bl	8008778 <_malloc_r>
 800891a:	4606      	mov	r6, r0
 800891c:	b950      	cbnz	r0, 8008934 <__ssputs_r+0x5c>
 800891e:	230c      	movs	r3, #12
 8008920:	f8ca 3000 	str.w	r3, [sl]
 8008924:	89a3      	ldrh	r3, [r4, #12]
 8008926:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800892a:	81a3      	strh	r3, [r4, #12]
 800892c:	f04f 30ff 	mov.w	r0, #4294967295
 8008930:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008934:	6921      	ldr	r1, [r4, #16]
 8008936:	464a      	mov	r2, r9
 8008938:	f000 fac0 	bl	8008ebc <memcpy>
 800893c:	89a3      	ldrh	r3, [r4, #12]
 800893e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008942:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008946:	81a3      	strh	r3, [r4, #12]
 8008948:	6126      	str	r6, [r4, #16]
 800894a:	6165      	str	r5, [r4, #20]
 800894c:	444e      	add	r6, r9
 800894e:	eba5 0509 	sub.w	r5, r5, r9
 8008952:	6026      	str	r6, [r4, #0]
 8008954:	60a5      	str	r5, [r4, #8]
 8008956:	463e      	mov	r6, r7
 8008958:	42be      	cmp	r6, r7
 800895a:	d900      	bls.n	800895e <__ssputs_r+0x86>
 800895c:	463e      	mov	r6, r7
 800895e:	6820      	ldr	r0, [r4, #0]
 8008960:	4632      	mov	r2, r6
 8008962:	4641      	mov	r1, r8
 8008964:	f000 fab8 	bl	8008ed8 <memmove>
 8008968:	68a3      	ldr	r3, [r4, #8]
 800896a:	1b9b      	subs	r3, r3, r6
 800896c:	60a3      	str	r3, [r4, #8]
 800896e:	6823      	ldr	r3, [r4, #0]
 8008970:	4433      	add	r3, r6
 8008972:	6023      	str	r3, [r4, #0]
 8008974:	2000      	movs	r0, #0
 8008976:	e7db      	b.n	8008930 <__ssputs_r+0x58>
 8008978:	462a      	mov	r2, r5
 800897a:	f000 fac7 	bl	8008f0c <_realloc_r>
 800897e:	4606      	mov	r6, r0
 8008980:	2800      	cmp	r0, #0
 8008982:	d1e1      	bne.n	8008948 <__ssputs_r+0x70>
 8008984:	6921      	ldr	r1, [r4, #16]
 8008986:	4650      	mov	r0, sl
 8008988:	f7ff fe8a 	bl	80086a0 <_free_r>
 800898c:	e7c7      	b.n	800891e <__ssputs_r+0x46>
	...

08008990 <_svfiprintf_r>:
 8008990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008994:	4698      	mov	r8, r3
 8008996:	898b      	ldrh	r3, [r1, #12]
 8008998:	061b      	lsls	r3, r3, #24
 800899a:	b09d      	sub	sp, #116	; 0x74
 800899c:	4607      	mov	r7, r0
 800899e:	460d      	mov	r5, r1
 80089a0:	4614      	mov	r4, r2
 80089a2:	d50e      	bpl.n	80089c2 <_svfiprintf_r+0x32>
 80089a4:	690b      	ldr	r3, [r1, #16]
 80089a6:	b963      	cbnz	r3, 80089c2 <_svfiprintf_r+0x32>
 80089a8:	2140      	movs	r1, #64	; 0x40
 80089aa:	f7ff fee5 	bl	8008778 <_malloc_r>
 80089ae:	6028      	str	r0, [r5, #0]
 80089b0:	6128      	str	r0, [r5, #16]
 80089b2:	b920      	cbnz	r0, 80089be <_svfiprintf_r+0x2e>
 80089b4:	230c      	movs	r3, #12
 80089b6:	603b      	str	r3, [r7, #0]
 80089b8:	f04f 30ff 	mov.w	r0, #4294967295
 80089bc:	e0d1      	b.n	8008b62 <_svfiprintf_r+0x1d2>
 80089be:	2340      	movs	r3, #64	; 0x40
 80089c0:	616b      	str	r3, [r5, #20]
 80089c2:	2300      	movs	r3, #0
 80089c4:	9309      	str	r3, [sp, #36]	; 0x24
 80089c6:	2320      	movs	r3, #32
 80089c8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80089cc:	f8cd 800c 	str.w	r8, [sp, #12]
 80089d0:	2330      	movs	r3, #48	; 0x30
 80089d2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8008b7c <_svfiprintf_r+0x1ec>
 80089d6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80089da:	f04f 0901 	mov.w	r9, #1
 80089de:	4623      	mov	r3, r4
 80089e0:	469a      	mov	sl, r3
 80089e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80089e6:	b10a      	cbz	r2, 80089ec <_svfiprintf_r+0x5c>
 80089e8:	2a25      	cmp	r2, #37	; 0x25
 80089ea:	d1f9      	bne.n	80089e0 <_svfiprintf_r+0x50>
 80089ec:	ebba 0b04 	subs.w	fp, sl, r4
 80089f0:	d00b      	beq.n	8008a0a <_svfiprintf_r+0x7a>
 80089f2:	465b      	mov	r3, fp
 80089f4:	4622      	mov	r2, r4
 80089f6:	4629      	mov	r1, r5
 80089f8:	4638      	mov	r0, r7
 80089fa:	f7ff ff6d 	bl	80088d8 <__ssputs_r>
 80089fe:	3001      	adds	r0, #1
 8008a00:	f000 80aa 	beq.w	8008b58 <_svfiprintf_r+0x1c8>
 8008a04:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008a06:	445a      	add	r2, fp
 8008a08:	9209      	str	r2, [sp, #36]	; 0x24
 8008a0a:	f89a 3000 	ldrb.w	r3, [sl]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	f000 80a2 	beq.w	8008b58 <_svfiprintf_r+0x1c8>
 8008a14:	2300      	movs	r3, #0
 8008a16:	f04f 32ff 	mov.w	r2, #4294967295
 8008a1a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008a1e:	f10a 0a01 	add.w	sl, sl, #1
 8008a22:	9304      	str	r3, [sp, #16]
 8008a24:	9307      	str	r3, [sp, #28]
 8008a26:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008a2a:	931a      	str	r3, [sp, #104]	; 0x68
 8008a2c:	4654      	mov	r4, sl
 8008a2e:	2205      	movs	r2, #5
 8008a30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008a34:	4851      	ldr	r0, [pc, #324]	; (8008b7c <_svfiprintf_r+0x1ec>)
 8008a36:	f7f7 fbd3 	bl	80001e0 <memchr>
 8008a3a:	9a04      	ldr	r2, [sp, #16]
 8008a3c:	b9d8      	cbnz	r0, 8008a76 <_svfiprintf_r+0xe6>
 8008a3e:	06d0      	lsls	r0, r2, #27
 8008a40:	bf44      	itt	mi
 8008a42:	2320      	movmi	r3, #32
 8008a44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a48:	0711      	lsls	r1, r2, #28
 8008a4a:	bf44      	itt	mi
 8008a4c:	232b      	movmi	r3, #43	; 0x2b
 8008a4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008a52:	f89a 3000 	ldrb.w	r3, [sl]
 8008a56:	2b2a      	cmp	r3, #42	; 0x2a
 8008a58:	d015      	beq.n	8008a86 <_svfiprintf_r+0xf6>
 8008a5a:	9a07      	ldr	r2, [sp, #28]
 8008a5c:	4654      	mov	r4, sl
 8008a5e:	2000      	movs	r0, #0
 8008a60:	f04f 0c0a 	mov.w	ip, #10
 8008a64:	4621      	mov	r1, r4
 8008a66:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008a6a:	3b30      	subs	r3, #48	; 0x30
 8008a6c:	2b09      	cmp	r3, #9
 8008a6e:	d94e      	bls.n	8008b0e <_svfiprintf_r+0x17e>
 8008a70:	b1b0      	cbz	r0, 8008aa0 <_svfiprintf_r+0x110>
 8008a72:	9207      	str	r2, [sp, #28]
 8008a74:	e014      	b.n	8008aa0 <_svfiprintf_r+0x110>
 8008a76:	eba0 0308 	sub.w	r3, r0, r8
 8008a7a:	fa09 f303 	lsl.w	r3, r9, r3
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	9304      	str	r3, [sp, #16]
 8008a82:	46a2      	mov	sl, r4
 8008a84:	e7d2      	b.n	8008a2c <_svfiprintf_r+0x9c>
 8008a86:	9b03      	ldr	r3, [sp, #12]
 8008a88:	1d19      	adds	r1, r3, #4
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	9103      	str	r1, [sp, #12]
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	bfbb      	ittet	lt
 8008a92:	425b      	neglt	r3, r3
 8008a94:	f042 0202 	orrlt.w	r2, r2, #2
 8008a98:	9307      	strge	r3, [sp, #28]
 8008a9a:	9307      	strlt	r3, [sp, #28]
 8008a9c:	bfb8      	it	lt
 8008a9e:	9204      	strlt	r2, [sp, #16]
 8008aa0:	7823      	ldrb	r3, [r4, #0]
 8008aa2:	2b2e      	cmp	r3, #46	; 0x2e
 8008aa4:	d10c      	bne.n	8008ac0 <_svfiprintf_r+0x130>
 8008aa6:	7863      	ldrb	r3, [r4, #1]
 8008aa8:	2b2a      	cmp	r3, #42	; 0x2a
 8008aaa:	d135      	bne.n	8008b18 <_svfiprintf_r+0x188>
 8008aac:	9b03      	ldr	r3, [sp, #12]
 8008aae:	1d1a      	adds	r2, r3, #4
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	9203      	str	r2, [sp, #12]
 8008ab4:	2b00      	cmp	r3, #0
 8008ab6:	bfb8      	it	lt
 8008ab8:	f04f 33ff 	movlt.w	r3, #4294967295
 8008abc:	3402      	adds	r4, #2
 8008abe:	9305      	str	r3, [sp, #20]
 8008ac0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8008b8c <_svfiprintf_r+0x1fc>
 8008ac4:	7821      	ldrb	r1, [r4, #0]
 8008ac6:	2203      	movs	r2, #3
 8008ac8:	4650      	mov	r0, sl
 8008aca:	f7f7 fb89 	bl	80001e0 <memchr>
 8008ace:	b140      	cbz	r0, 8008ae2 <_svfiprintf_r+0x152>
 8008ad0:	2340      	movs	r3, #64	; 0x40
 8008ad2:	eba0 000a 	sub.w	r0, r0, sl
 8008ad6:	fa03 f000 	lsl.w	r0, r3, r0
 8008ada:	9b04      	ldr	r3, [sp, #16]
 8008adc:	4303      	orrs	r3, r0
 8008ade:	3401      	adds	r4, #1
 8008ae0:	9304      	str	r3, [sp, #16]
 8008ae2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ae6:	4826      	ldr	r0, [pc, #152]	; (8008b80 <_svfiprintf_r+0x1f0>)
 8008ae8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008aec:	2206      	movs	r2, #6
 8008aee:	f7f7 fb77 	bl	80001e0 <memchr>
 8008af2:	2800      	cmp	r0, #0
 8008af4:	d038      	beq.n	8008b68 <_svfiprintf_r+0x1d8>
 8008af6:	4b23      	ldr	r3, [pc, #140]	; (8008b84 <_svfiprintf_r+0x1f4>)
 8008af8:	bb1b      	cbnz	r3, 8008b42 <_svfiprintf_r+0x1b2>
 8008afa:	9b03      	ldr	r3, [sp, #12]
 8008afc:	3307      	adds	r3, #7
 8008afe:	f023 0307 	bic.w	r3, r3, #7
 8008b02:	3308      	adds	r3, #8
 8008b04:	9303      	str	r3, [sp, #12]
 8008b06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b08:	4433      	add	r3, r6
 8008b0a:	9309      	str	r3, [sp, #36]	; 0x24
 8008b0c:	e767      	b.n	80089de <_svfiprintf_r+0x4e>
 8008b0e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008b12:	460c      	mov	r4, r1
 8008b14:	2001      	movs	r0, #1
 8008b16:	e7a5      	b.n	8008a64 <_svfiprintf_r+0xd4>
 8008b18:	2300      	movs	r3, #0
 8008b1a:	3401      	adds	r4, #1
 8008b1c:	9305      	str	r3, [sp, #20]
 8008b1e:	4619      	mov	r1, r3
 8008b20:	f04f 0c0a 	mov.w	ip, #10
 8008b24:	4620      	mov	r0, r4
 8008b26:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008b2a:	3a30      	subs	r2, #48	; 0x30
 8008b2c:	2a09      	cmp	r2, #9
 8008b2e:	d903      	bls.n	8008b38 <_svfiprintf_r+0x1a8>
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	d0c5      	beq.n	8008ac0 <_svfiprintf_r+0x130>
 8008b34:	9105      	str	r1, [sp, #20]
 8008b36:	e7c3      	b.n	8008ac0 <_svfiprintf_r+0x130>
 8008b38:	fb0c 2101 	mla	r1, ip, r1, r2
 8008b3c:	4604      	mov	r4, r0
 8008b3e:	2301      	movs	r3, #1
 8008b40:	e7f0      	b.n	8008b24 <_svfiprintf_r+0x194>
 8008b42:	ab03      	add	r3, sp, #12
 8008b44:	9300      	str	r3, [sp, #0]
 8008b46:	462a      	mov	r2, r5
 8008b48:	4b0f      	ldr	r3, [pc, #60]	; (8008b88 <_svfiprintf_r+0x1f8>)
 8008b4a:	a904      	add	r1, sp, #16
 8008b4c:	4638      	mov	r0, r7
 8008b4e:	f3af 8000 	nop.w
 8008b52:	1c42      	adds	r2, r0, #1
 8008b54:	4606      	mov	r6, r0
 8008b56:	d1d6      	bne.n	8008b06 <_svfiprintf_r+0x176>
 8008b58:	89ab      	ldrh	r3, [r5, #12]
 8008b5a:	065b      	lsls	r3, r3, #25
 8008b5c:	f53f af2c 	bmi.w	80089b8 <_svfiprintf_r+0x28>
 8008b60:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b62:	b01d      	add	sp, #116	; 0x74
 8008b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b68:	ab03      	add	r3, sp, #12
 8008b6a:	9300      	str	r3, [sp, #0]
 8008b6c:	462a      	mov	r2, r5
 8008b6e:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <_svfiprintf_r+0x1f8>)
 8008b70:	a904      	add	r1, sp, #16
 8008b72:	4638      	mov	r0, r7
 8008b74:	f000 f87a 	bl	8008c6c <_printf_i>
 8008b78:	e7eb      	b.n	8008b52 <_svfiprintf_r+0x1c2>
 8008b7a:	bf00      	nop
 8008b7c:	08008fd8 	.word	0x08008fd8
 8008b80:	08008fe2 	.word	0x08008fe2
 8008b84:	00000000 	.word	0x00000000
 8008b88:	080088d9 	.word	0x080088d9
 8008b8c:	08008fde 	.word	0x08008fde

08008b90 <_printf_common>:
 8008b90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b94:	4616      	mov	r6, r2
 8008b96:	4699      	mov	r9, r3
 8008b98:	688a      	ldr	r2, [r1, #8]
 8008b9a:	690b      	ldr	r3, [r1, #16]
 8008b9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	bfb8      	it	lt
 8008ba4:	4613      	movlt	r3, r2
 8008ba6:	6033      	str	r3, [r6, #0]
 8008ba8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008bac:	4607      	mov	r7, r0
 8008bae:	460c      	mov	r4, r1
 8008bb0:	b10a      	cbz	r2, 8008bb6 <_printf_common+0x26>
 8008bb2:	3301      	adds	r3, #1
 8008bb4:	6033      	str	r3, [r6, #0]
 8008bb6:	6823      	ldr	r3, [r4, #0]
 8008bb8:	0699      	lsls	r1, r3, #26
 8008bba:	bf42      	ittt	mi
 8008bbc:	6833      	ldrmi	r3, [r6, #0]
 8008bbe:	3302      	addmi	r3, #2
 8008bc0:	6033      	strmi	r3, [r6, #0]
 8008bc2:	6825      	ldr	r5, [r4, #0]
 8008bc4:	f015 0506 	ands.w	r5, r5, #6
 8008bc8:	d106      	bne.n	8008bd8 <_printf_common+0x48>
 8008bca:	f104 0a19 	add.w	sl, r4, #25
 8008bce:	68e3      	ldr	r3, [r4, #12]
 8008bd0:	6832      	ldr	r2, [r6, #0]
 8008bd2:	1a9b      	subs	r3, r3, r2
 8008bd4:	42ab      	cmp	r3, r5
 8008bd6:	dc26      	bgt.n	8008c26 <_printf_common+0x96>
 8008bd8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008bdc:	1e13      	subs	r3, r2, #0
 8008bde:	6822      	ldr	r2, [r4, #0]
 8008be0:	bf18      	it	ne
 8008be2:	2301      	movne	r3, #1
 8008be4:	0692      	lsls	r2, r2, #26
 8008be6:	d42b      	bmi.n	8008c40 <_printf_common+0xb0>
 8008be8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008bec:	4649      	mov	r1, r9
 8008bee:	4638      	mov	r0, r7
 8008bf0:	47c0      	blx	r8
 8008bf2:	3001      	adds	r0, #1
 8008bf4:	d01e      	beq.n	8008c34 <_printf_common+0xa4>
 8008bf6:	6823      	ldr	r3, [r4, #0]
 8008bf8:	68e5      	ldr	r5, [r4, #12]
 8008bfa:	6832      	ldr	r2, [r6, #0]
 8008bfc:	f003 0306 	and.w	r3, r3, #6
 8008c00:	2b04      	cmp	r3, #4
 8008c02:	bf08      	it	eq
 8008c04:	1aad      	subeq	r5, r5, r2
 8008c06:	68a3      	ldr	r3, [r4, #8]
 8008c08:	6922      	ldr	r2, [r4, #16]
 8008c0a:	bf0c      	ite	eq
 8008c0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008c10:	2500      	movne	r5, #0
 8008c12:	4293      	cmp	r3, r2
 8008c14:	bfc4      	itt	gt
 8008c16:	1a9b      	subgt	r3, r3, r2
 8008c18:	18ed      	addgt	r5, r5, r3
 8008c1a:	2600      	movs	r6, #0
 8008c1c:	341a      	adds	r4, #26
 8008c1e:	42b5      	cmp	r5, r6
 8008c20:	d11a      	bne.n	8008c58 <_printf_common+0xc8>
 8008c22:	2000      	movs	r0, #0
 8008c24:	e008      	b.n	8008c38 <_printf_common+0xa8>
 8008c26:	2301      	movs	r3, #1
 8008c28:	4652      	mov	r2, sl
 8008c2a:	4649      	mov	r1, r9
 8008c2c:	4638      	mov	r0, r7
 8008c2e:	47c0      	blx	r8
 8008c30:	3001      	adds	r0, #1
 8008c32:	d103      	bne.n	8008c3c <_printf_common+0xac>
 8008c34:	f04f 30ff 	mov.w	r0, #4294967295
 8008c38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008c3c:	3501      	adds	r5, #1
 8008c3e:	e7c6      	b.n	8008bce <_printf_common+0x3e>
 8008c40:	18e1      	adds	r1, r4, r3
 8008c42:	1c5a      	adds	r2, r3, #1
 8008c44:	2030      	movs	r0, #48	; 0x30
 8008c46:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008c4a:	4422      	add	r2, r4
 8008c4c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008c50:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008c54:	3302      	adds	r3, #2
 8008c56:	e7c7      	b.n	8008be8 <_printf_common+0x58>
 8008c58:	2301      	movs	r3, #1
 8008c5a:	4622      	mov	r2, r4
 8008c5c:	4649      	mov	r1, r9
 8008c5e:	4638      	mov	r0, r7
 8008c60:	47c0      	blx	r8
 8008c62:	3001      	adds	r0, #1
 8008c64:	d0e6      	beq.n	8008c34 <_printf_common+0xa4>
 8008c66:	3601      	adds	r6, #1
 8008c68:	e7d9      	b.n	8008c1e <_printf_common+0x8e>
	...

08008c6c <_printf_i>:
 8008c6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008c70:	7e0f      	ldrb	r7, [r1, #24]
 8008c72:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008c74:	2f78      	cmp	r7, #120	; 0x78
 8008c76:	4691      	mov	r9, r2
 8008c78:	4680      	mov	r8, r0
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	469a      	mov	sl, r3
 8008c7e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8008c82:	d807      	bhi.n	8008c94 <_printf_i+0x28>
 8008c84:	2f62      	cmp	r7, #98	; 0x62
 8008c86:	d80a      	bhi.n	8008c9e <_printf_i+0x32>
 8008c88:	2f00      	cmp	r7, #0
 8008c8a:	f000 80d8 	beq.w	8008e3e <_printf_i+0x1d2>
 8008c8e:	2f58      	cmp	r7, #88	; 0x58
 8008c90:	f000 80a3 	beq.w	8008dda <_printf_i+0x16e>
 8008c94:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008c98:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008c9c:	e03a      	b.n	8008d14 <_printf_i+0xa8>
 8008c9e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008ca2:	2b15      	cmp	r3, #21
 8008ca4:	d8f6      	bhi.n	8008c94 <_printf_i+0x28>
 8008ca6:	a101      	add	r1, pc, #4	; (adr r1, 8008cac <_printf_i+0x40>)
 8008ca8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008cac:	08008d05 	.word	0x08008d05
 8008cb0:	08008d19 	.word	0x08008d19
 8008cb4:	08008c95 	.word	0x08008c95
 8008cb8:	08008c95 	.word	0x08008c95
 8008cbc:	08008c95 	.word	0x08008c95
 8008cc0:	08008c95 	.word	0x08008c95
 8008cc4:	08008d19 	.word	0x08008d19
 8008cc8:	08008c95 	.word	0x08008c95
 8008ccc:	08008c95 	.word	0x08008c95
 8008cd0:	08008c95 	.word	0x08008c95
 8008cd4:	08008c95 	.word	0x08008c95
 8008cd8:	08008e25 	.word	0x08008e25
 8008cdc:	08008d49 	.word	0x08008d49
 8008ce0:	08008e07 	.word	0x08008e07
 8008ce4:	08008c95 	.word	0x08008c95
 8008ce8:	08008c95 	.word	0x08008c95
 8008cec:	08008e47 	.word	0x08008e47
 8008cf0:	08008c95 	.word	0x08008c95
 8008cf4:	08008d49 	.word	0x08008d49
 8008cf8:	08008c95 	.word	0x08008c95
 8008cfc:	08008c95 	.word	0x08008c95
 8008d00:	08008e0f 	.word	0x08008e0f
 8008d04:	682b      	ldr	r3, [r5, #0]
 8008d06:	1d1a      	adds	r2, r3, #4
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	602a      	str	r2, [r5, #0]
 8008d0c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008d10:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008d14:	2301      	movs	r3, #1
 8008d16:	e0a3      	b.n	8008e60 <_printf_i+0x1f4>
 8008d18:	6820      	ldr	r0, [r4, #0]
 8008d1a:	6829      	ldr	r1, [r5, #0]
 8008d1c:	0606      	lsls	r6, r0, #24
 8008d1e:	f101 0304 	add.w	r3, r1, #4
 8008d22:	d50a      	bpl.n	8008d3a <_printf_i+0xce>
 8008d24:	680e      	ldr	r6, [r1, #0]
 8008d26:	602b      	str	r3, [r5, #0]
 8008d28:	2e00      	cmp	r6, #0
 8008d2a:	da03      	bge.n	8008d34 <_printf_i+0xc8>
 8008d2c:	232d      	movs	r3, #45	; 0x2d
 8008d2e:	4276      	negs	r6, r6
 8008d30:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008d34:	485e      	ldr	r0, [pc, #376]	; (8008eb0 <_printf_i+0x244>)
 8008d36:	230a      	movs	r3, #10
 8008d38:	e019      	b.n	8008d6e <_printf_i+0x102>
 8008d3a:	680e      	ldr	r6, [r1, #0]
 8008d3c:	602b      	str	r3, [r5, #0]
 8008d3e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8008d42:	bf18      	it	ne
 8008d44:	b236      	sxthne	r6, r6
 8008d46:	e7ef      	b.n	8008d28 <_printf_i+0xbc>
 8008d48:	682b      	ldr	r3, [r5, #0]
 8008d4a:	6820      	ldr	r0, [r4, #0]
 8008d4c:	1d19      	adds	r1, r3, #4
 8008d4e:	6029      	str	r1, [r5, #0]
 8008d50:	0601      	lsls	r1, r0, #24
 8008d52:	d501      	bpl.n	8008d58 <_printf_i+0xec>
 8008d54:	681e      	ldr	r6, [r3, #0]
 8008d56:	e002      	b.n	8008d5e <_printf_i+0xf2>
 8008d58:	0646      	lsls	r6, r0, #25
 8008d5a:	d5fb      	bpl.n	8008d54 <_printf_i+0xe8>
 8008d5c:	881e      	ldrh	r6, [r3, #0]
 8008d5e:	4854      	ldr	r0, [pc, #336]	; (8008eb0 <_printf_i+0x244>)
 8008d60:	2f6f      	cmp	r7, #111	; 0x6f
 8008d62:	bf0c      	ite	eq
 8008d64:	2308      	moveq	r3, #8
 8008d66:	230a      	movne	r3, #10
 8008d68:	2100      	movs	r1, #0
 8008d6a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008d6e:	6865      	ldr	r5, [r4, #4]
 8008d70:	60a5      	str	r5, [r4, #8]
 8008d72:	2d00      	cmp	r5, #0
 8008d74:	bfa2      	ittt	ge
 8008d76:	6821      	ldrge	r1, [r4, #0]
 8008d78:	f021 0104 	bicge.w	r1, r1, #4
 8008d7c:	6021      	strge	r1, [r4, #0]
 8008d7e:	b90e      	cbnz	r6, 8008d84 <_printf_i+0x118>
 8008d80:	2d00      	cmp	r5, #0
 8008d82:	d04d      	beq.n	8008e20 <_printf_i+0x1b4>
 8008d84:	4615      	mov	r5, r2
 8008d86:	fbb6 f1f3 	udiv	r1, r6, r3
 8008d8a:	fb03 6711 	mls	r7, r3, r1, r6
 8008d8e:	5dc7      	ldrb	r7, [r0, r7]
 8008d90:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008d94:	4637      	mov	r7, r6
 8008d96:	42bb      	cmp	r3, r7
 8008d98:	460e      	mov	r6, r1
 8008d9a:	d9f4      	bls.n	8008d86 <_printf_i+0x11a>
 8008d9c:	2b08      	cmp	r3, #8
 8008d9e:	d10b      	bne.n	8008db8 <_printf_i+0x14c>
 8008da0:	6823      	ldr	r3, [r4, #0]
 8008da2:	07de      	lsls	r6, r3, #31
 8008da4:	d508      	bpl.n	8008db8 <_printf_i+0x14c>
 8008da6:	6923      	ldr	r3, [r4, #16]
 8008da8:	6861      	ldr	r1, [r4, #4]
 8008daa:	4299      	cmp	r1, r3
 8008dac:	bfde      	ittt	le
 8008dae:	2330      	movle	r3, #48	; 0x30
 8008db0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008db4:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008db8:	1b52      	subs	r2, r2, r5
 8008dba:	6122      	str	r2, [r4, #16]
 8008dbc:	f8cd a000 	str.w	sl, [sp]
 8008dc0:	464b      	mov	r3, r9
 8008dc2:	aa03      	add	r2, sp, #12
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	4640      	mov	r0, r8
 8008dc8:	f7ff fee2 	bl	8008b90 <_printf_common>
 8008dcc:	3001      	adds	r0, #1
 8008dce:	d14c      	bne.n	8008e6a <_printf_i+0x1fe>
 8008dd0:	f04f 30ff 	mov.w	r0, #4294967295
 8008dd4:	b004      	add	sp, #16
 8008dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008dda:	4835      	ldr	r0, [pc, #212]	; (8008eb0 <_printf_i+0x244>)
 8008ddc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008de0:	6829      	ldr	r1, [r5, #0]
 8008de2:	6823      	ldr	r3, [r4, #0]
 8008de4:	f851 6b04 	ldr.w	r6, [r1], #4
 8008de8:	6029      	str	r1, [r5, #0]
 8008dea:	061d      	lsls	r5, r3, #24
 8008dec:	d514      	bpl.n	8008e18 <_printf_i+0x1ac>
 8008dee:	07df      	lsls	r7, r3, #31
 8008df0:	bf44      	itt	mi
 8008df2:	f043 0320 	orrmi.w	r3, r3, #32
 8008df6:	6023      	strmi	r3, [r4, #0]
 8008df8:	b91e      	cbnz	r6, 8008e02 <_printf_i+0x196>
 8008dfa:	6823      	ldr	r3, [r4, #0]
 8008dfc:	f023 0320 	bic.w	r3, r3, #32
 8008e00:	6023      	str	r3, [r4, #0]
 8008e02:	2310      	movs	r3, #16
 8008e04:	e7b0      	b.n	8008d68 <_printf_i+0xfc>
 8008e06:	6823      	ldr	r3, [r4, #0]
 8008e08:	f043 0320 	orr.w	r3, r3, #32
 8008e0c:	6023      	str	r3, [r4, #0]
 8008e0e:	2378      	movs	r3, #120	; 0x78
 8008e10:	4828      	ldr	r0, [pc, #160]	; (8008eb4 <_printf_i+0x248>)
 8008e12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008e16:	e7e3      	b.n	8008de0 <_printf_i+0x174>
 8008e18:	0659      	lsls	r1, r3, #25
 8008e1a:	bf48      	it	mi
 8008e1c:	b2b6      	uxthmi	r6, r6
 8008e1e:	e7e6      	b.n	8008dee <_printf_i+0x182>
 8008e20:	4615      	mov	r5, r2
 8008e22:	e7bb      	b.n	8008d9c <_printf_i+0x130>
 8008e24:	682b      	ldr	r3, [r5, #0]
 8008e26:	6826      	ldr	r6, [r4, #0]
 8008e28:	6961      	ldr	r1, [r4, #20]
 8008e2a:	1d18      	adds	r0, r3, #4
 8008e2c:	6028      	str	r0, [r5, #0]
 8008e2e:	0635      	lsls	r5, r6, #24
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	d501      	bpl.n	8008e38 <_printf_i+0x1cc>
 8008e34:	6019      	str	r1, [r3, #0]
 8008e36:	e002      	b.n	8008e3e <_printf_i+0x1d2>
 8008e38:	0670      	lsls	r0, r6, #25
 8008e3a:	d5fb      	bpl.n	8008e34 <_printf_i+0x1c8>
 8008e3c:	8019      	strh	r1, [r3, #0]
 8008e3e:	2300      	movs	r3, #0
 8008e40:	6123      	str	r3, [r4, #16]
 8008e42:	4615      	mov	r5, r2
 8008e44:	e7ba      	b.n	8008dbc <_printf_i+0x150>
 8008e46:	682b      	ldr	r3, [r5, #0]
 8008e48:	1d1a      	adds	r2, r3, #4
 8008e4a:	602a      	str	r2, [r5, #0]
 8008e4c:	681d      	ldr	r5, [r3, #0]
 8008e4e:	6862      	ldr	r2, [r4, #4]
 8008e50:	2100      	movs	r1, #0
 8008e52:	4628      	mov	r0, r5
 8008e54:	f7f7 f9c4 	bl	80001e0 <memchr>
 8008e58:	b108      	cbz	r0, 8008e5e <_printf_i+0x1f2>
 8008e5a:	1b40      	subs	r0, r0, r5
 8008e5c:	6060      	str	r0, [r4, #4]
 8008e5e:	6863      	ldr	r3, [r4, #4]
 8008e60:	6123      	str	r3, [r4, #16]
 8008e62:	2300      	movs	r3, #0
 8008e64:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008e68:	e7a8      	b.n	8008dbc <_printf_i+0x150>
 8008e6a:	6923      	ldr	r3, [r4, #16]
 8008e6c:	462a      	mov	r2, r5
 8008e6e:	4649      	mov	r1, r9
 8008e70:	4640      	mov	r0, r8
 8008e72:	47d0      	blx	sl
 8008e74:	3001      	adds	r0, #1
 8008e76:	d0ab      	beq.n	8008dd0 <_printf_i+0x164>
 8008e78:	6823      	ldr	r3, [r4, #0]
 8008e7a:	079b      	lsls	r3, r3, #30
 8008e7c:	d413      	bmi.n	8008ea6 <_printf_i+0x23a>
 8008e7e:	68e0      	ldr	r0, [r4, #12]
 8008e80:	9b03      	ldr	r3, [sp, #12]
 8008e82:	4298      	cmp	r0, r3
 8008e84:	bfb8      	it	lt
 8008e86:	4618      	movlt	r0, r3
 8008e88:	e7a4      	b.n	8008dd4 <_printf_i+0x168>
 8008e8a:	2301      	movs	r3, #1
 8008e8c:	4632      	mov	r2, r6
 8008e8e:	4649      	mov	r1, r9
 8008e90:	4640      	mov	r0, r8
 8008e92:	47d0      	blx	sl
 8008e94:	3001      	adds	r0, #1
 8008e96:	d09b      	beq.n	8008dd0 <_printf_i+0x164>
 8008e98:	3501      	adds	r5, #1
 8008e9a:	68e3      	ldr	r3, [r4, #12]
 8008e9c:	9903      	ldr	r1, [sp, #12]
 8008e9e:	1a5b      	subs	r3, r3, r1
 8008ea0:	42ab      	cmp	r3, r5
 8008ea2:	dcf2      	bgt.n	8008e8a <_printf_i+0x21e>
 8008ea4:	e7eb      	b.n	8008e7e <_printf_i+0x212>
 8008ea6:	2500      	movs	r5, #0
 8008ea8:	f104 0619 	add.w	r6, r4, #25
 8008eac:	e7f5      	b.n	8008e9a <_printf_i+0x22e>
 8008eae:	bf00      	nop
 8008eb0:	08008fe9 	.word	0x08008fe9
 8008eb4:	08008ffa 	.word	0x08008ffa

08008eb8 <__retarget_lock_acquire_recursive>:
 8008eb8:	4770      	bx	lr

08008eba <__retarget_lock_release_recursive>:
 8008eba:	4770      	bx	lr

08008ebc <memcpy>:
 8008ebc:	440a      	add	r2, r1
 8008ebe:	4291      	cmp	r1, r2
 8008ec0:	f100 33ff 	add.w	r3, r0, #4294967295
 8008ec4:	d100      	bne.n	8008ec8 <memcpy+0xc>
 8008ec6:	4770      	bx	lr
 8008ec8:	b510      	push	{r4, lr}
 8008eca:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008ece:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008ed2:	4291      	cmp	r1, r2
 8008ed4:	d1f9      	bne.n	8008eca <memcpy+0xe>
 8008ed6:	bd10      	pop	{r4, pc}

08008ed8 <memmove>:
 8008ed8:	4288      	cmp	r0, r1
 8008eda:	b510      	push	{r4, lr}
 8008edc:	eb01 0402 	add.w	r4, r1, r2
 8008ee0:	d902      	bls.n	8008ee8 <memmove+0x10>
 8008ee2:	4284      	cmp	r4, r0
 8008ee4:	4623      	mov	r3, r4
 8008ee6:	d807      	bhi.n	8008ef8 <memmove+0x20>
 8008ee8:	1e43      	subs	r3, r0, #1
 8008eea:	42a1      	cmp	r1, r4
 8008eec:	d008      	beq.n	8008f00 <memmove+0x28>
 8008eee:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008ef2:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008ef6:	e7f8      	b.n	8008eea <memmove+0x12>
 8008ef8:	4402      	add	r2, r0
 8008efa:	4601      	mov	r1, r0
 8008efc:	428a      	cmp	r2, r1
 8008efe:	d100      	bne.n	8008f02 <memmove+0x2a>
 8008f00:	bd10      	pop	{r4, pc}
 8008f02:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008f06:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008f0a:	e7f7      	b.n	8008efc <memmove+0x24>

08008f0c <_realloc_r>:
 8008f0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f10:	4680      	mov	r8, r0
 8008f12:	4614      	mov	r4, r2
 8008f14:	460e      	mov	r6, r1
 8008f16:	b921      	cbnz	r1, 8008f22 <_realloc_r+0x16>
 8008f18:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1c:	4611      	mov	r1, r2
 8008f1e:	f7ff bc2b 	b.w	8008778 <_malloc_r>
 8008f22:	b92a      	cbnz	r2, 8008f30 <_realloc_r+0x24>
 8008f24:	f7ff fbbc 	bl	80086a0 <_free_r>
 8008f28:	4625      	mov	r5, r4
 8008f2a:	4628      	mov	r0, r5
 8008f2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008f30:	f000 f81b 	bl	8008f6a <_malloc_usable_size_r>
 8008f34:	4284      	cmp	r4, r0
 8008f36:	4607      	mov	r7, r0
 8008f38:	d802      	bhi.n	8008f40 <_realloc_r+0x34>
 8008f3a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008f3e:	d812      	bhi.n	8008f66 <_realloc_r+0x5a>
 8008f40:	4621      	mov	r1, r4
 8008f42:	4640      	mov	r0, r8
 8008f44:	f7ff fc18 	bl	8008778 <_malloc_r>
 8008f48:	4605      	mov	r5, r0
 8008f4a:	2800      	cmp	r0, #0
 8008f4c:	d0ed      	beq.n	8008f2a <_realloc_r+0x1e>
 8008f4e:	42bc      	cmp	r4, r7
 8008f50:	4622      	mov	r2, r4
 8008f52:	4631      	mov	r1, r6
 8008f54:	bf28      	it	cs
 8008f56:	463a      	movcs	r2, r7
 8008f58:	f7ff ffb0 	bl	8008ebc <memcpy>
 8008f5c:	4631      	mov	r1, r6
 8008f5e:	4640      	mov	r0, r8
 8008f60:	f7ff fb9e 	bl	80086a0 <_free_r>
 8008f64:	e7e1      	b.n	8008f2a <_realloc_r+0x1e>
 8008f66:	4635      	mov	r5, r6
 8008f68:	e7df      	b.n	8008f2a <_realloc_r+0x1e>

08008f6a <_malloc_usable_size_r>:
 8008f6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f6e:	1f18      	subs	r0, r3, #4
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	bfbc      	itt	lt
 8008f74:	580b      	ldrlt	r3, [r1, r0]
 8008f76:	18c0      	addlt	r0, r0, r3
 8008f78:	4770      	bx	lr
	...

08008f7c <_init>:
 8008f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7e:	bf00      	nop
 8008f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f82:	bc08      	pop	{r3}
 8008f84:	469e      	mov	lr, r3
 8008f86:	4770      	bx	lr

08008f88 <_fini>:
 8008f88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f8a:	bf00      	nop
 8008f8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f8e:	bc08      	pop	{r3}
 8008f90:	469e      	mov	lr, r3
 8008f92:	4770      	bx	lr
